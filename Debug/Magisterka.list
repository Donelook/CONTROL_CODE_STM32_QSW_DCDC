
Magisterka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000167d8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  080169b8  080169b8  000179b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080171e8  080171e8  00019380  2**0
                  CONTENTS
  4 .ARM          00000008  080171e8  080171e8  000181e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080171f0  080171f0  00019380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080171f0  080171f0  000181f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080171f4  080171f4  000181f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  080171f8  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000230c  20000380  08017578  00019380  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000268c  08017578  0001968c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019380  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025507  00000000  00000000  000193b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ece  00000000  00000000  0003e8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f18  00000000  00000000  00043788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017f4  00000000  00000000  000456a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d55c  00000000  00000000  00046e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026654  00000000  00000000  000743f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f034  00000000  00000000  0009aa44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b9a78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f8c  00000000  00000000  001b9abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001c3a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000380 	.word	0x20000380
 80001fc:	00000000 	.word	0x00000000
 8000200:	080169a0 	.word	0x080169a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000384 	.word	0x20000384
 800021c:	080169a0 	.word	0x080169a0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f003 f865 	bl	8004106 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f9a8 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f000 ffca 	bl	8001fd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001044:	f000 ff7e 	bl	8001f44 <MX_DMA_Init>
  MX_ADC3_Init();
 8001048:	f000 fa68 	bl	800151c <MX_ADC3_Init>
  MX_ADC4_Init();
 800104c:	f000 fb32 	bl	80016b4 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001050:	f000 fb96 	bl	8001780 <MX_ADC5_Init>
  MX_DAC1_Init();
 8001054:	f000 fc1a 	bl	800188c <MX_DAC1_Init>
  MX_DAC2_Init();
 8001058:	f000 fc64 	bl	8001924 <MX_DAC2_Init>
  MX_TIM1_Init();
 800105c:	f000 fc9c 	bl	8001998 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001060:	f000 fe1a 	bl	8001c98 <MX_TIM8_Init>
  MX_UART4_Init();
 8001064:	f000 ff22 	bl	8001eac <MX_UART4_Init>
  MX_ADC1_Init();
 8001068:	f000 f9e0 	bl	800142c <MX_ADC1_Init>
  MX_TIM4_Init();
 800106c:	f000 fd26 	bl	8001abc <MX_TIM4_Init>
  MX_USB_Device_Init();
 8001070:	f00e fdc4 	bl	800fbfc <MX_USB_Device_Init>
  MX_TIM15_Init();
 8001074:	f000 fea2 	bl	8001dbc <MX_TIM15_Init>
  MX_TIM16_Init();
 8001078:	f000 fef2 	bl	8001e60 <MX_TIM16_Init>
  MX_TIM7_Init();
 800107c:	f000 fdd6 	bl	8001c2c <MX_TIM7_Init>
  MX_TIM6_Init();
 8001080:	f000 fd94 	bl	8001bac <MX_TIM6_Init>
  MX_CORDIC_Init();
 8001084:	f000 fbee 	bl	8001864 <MX_CORDIC_Init>


  while (1)
  {

	  	  	  	  checkfaults = Check_Faults();
 8001088:	f001 fa50 	bl	800252c <Check_Faults>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4ba0      	ldr	r3, [pc, #640]	@ (8001314 <main+0x2e0>)
 8001092:	701a      	strb	r2, [r3, #0]

	  	  	  	  if (dataReceivedFlag) {
 8001094:	4ba0      	ldr	r3, [pc, #640]	@ (8001318 <main+0x2e4>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <main+0x74>
	  	  	  	      // Process the data
	  	  	  	      ParseUSBCommand();  // Function to handle the received command
 800109e:	f001 ff79 	bl	8002f94 <ParseUSBCommand>

	  	  	  	      // Clear the flag after processing
	  	  	  	      dataReceivedFlag = 0;
 80010a2:	4b9d      	ldr	r3, [pc, #628]	@ (8001318 <main+0x2e4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
	  	  	  	  }

	  	  	  	  interlock = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 80010a8:	2104      	movs	r1, #4
 80010aa:	489c      	ldr	r0, [pc, #624]	@ (800131c <main+0x2e8>)
 80010ac:	f005 fd40 	bl	8006b30 <HAL_GPIO_ReadPin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b9a      	ldr	r3, [pc, #616]	@ (8001320 <main+0x2ec>)
 80010b6:	701a      	strb	r2, [r3, #0]

	  	          if (interlock &&  start_program && !(Check_Faults())) {
 80010b8:	4b99      	ldr	r3, [pc, #612]	@ (8001320 <main+0x2ec>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00f      	beq.n	80010e0 <main+0xac>
 80010c0:	4b98      	ldr	r3, [pc, #608]	@ (8001324 <main+0x2f0>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00b      	beq.n	80010e0 <main+0xac>
 80010c8:	f001 fa30 	bl	800252c <Check_Faults>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d106      	bne.n	80010e0 <main+0xac>
	  	        	//USB_SendString("State: EVENT start_program \r\n");
	  	              event = EVENT_START;
 80010d2:	4b95      	ldr	r3, [pc, #596]	@ (8001328 <main+0x2f4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
	  	              start_program = 0;
 80010d8:	4b92      	ldr	r3, [pc, #584]	@ (8001324 <main+0x2f0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e017      	b.n	8001110 <main+0xdc>
	  	          }else if (interlock &&  stop_program && !(Check_Faults())) {
 80010e0:	4b8f      	ldr	r3, [pc, #572]	@ (8001320 <main+0x2ec>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00c      	beq.n	8001102 <main+0xce>
 80010e8:	4b90      	ldr	r3, [pc, #576]	@ (800132c <main+0x2f8>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d008      	beq.n	8001102 <main+0xce>
 80010f0:	f001 fa1c 	bl	800252c <Check_Faults>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d103      	bne.n	8001102 <main+0xce>
		  	        	//USB_SendString("State: EVENT start_program \r\n");
		  	              event = EVENT_SHUTDOWN;
 80010fa:	4b8b      	ldr	r3, [pc, #556]	@ (8001328 <main+0x2f4>)
 80010fc:	2203      	movs	r2, #3
 80010fe:	701a      	strb	r2, [r3, #0]
 8001100:	e006      	b.n	8001110 <main+0xdc>
		  	          }
	  	          else if (clear_fault) {
 8001102:	4b8b      	ldr	r3, [pc, #556]	@ (8001330 <main+0x2fc>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <main+0xdc>
	  	        	  /* clear fault condition */
	  	              event = EVENT_CLEAR_FAULT;
 800110a:	4b87      	ldr	r3, [pc, #540]	@ (8001328 <main+0x2f4>)
 800110c:	2202      	movs	r2, #2
 800110e:	701a      	strb	r2, [r3, #0]
	  	          }

	  	         if (!interlock || Check_Faults() /* fault condition */)
 8001110:	4b83      	ldr	r3, [pc, #524]	@ (8001320 <main+0x2ec>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d004      	beq.n	8001122 <main+0xee>
 8001118:	f001 fa08 	bl	800252c <Check_Faults>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <main+0xf4>
	  	       	 {
	  	       	  	event = EVENT_FAULT;
 8001122:	4b81      	ldr	r3, [pc, #516]	@ (8001328 <main+0x2f4>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
	  	       	 }

	  	          // Handle the event and update the state
	  	          currentState = handle_event(currentState, event);
 8001128:	4b82      	ldr	r3, [pc, #520]	@ (8001334 <main+0x300>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4a7e      	ldr	r2, [pc, #504]	@ (8001328 <main+0x2f4>)
 800112e:	7812      	ldrb	r2, [r2, #0]
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f001 f89c 	bl	8002270 <handle_event>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b7d      	ldr	r3, [pc, #500]	@ (8001334 <main+0x300>)
 800113e:	701a      	strb	r2, [r3, #0]

	  	          // Perform actions based on the current state
	  	          switch (currentState) {
 8001140:	4b7c      	ldr	r3, [pc, #496]	@ (8001334 <main+0x300>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b05      	cmp	r3, #5
 8001146:	f200 80df 	bhi.w	8001308 <main+0x2d4>
 800114a:	a201      	add	r2, pc, #4	@ (adr r2, 8001150 <main+0x11c>)
 800114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001150:	08001169 	.word	0x08001169
 8001154:	08001227 	.word	0x08001227
 8001158:	0800125f 	.word	0x0800125f
 800115c:	08001309 	.word	0x08001309
 8001160:	08001279 	.word	0x08001279
 8001164:	080012ed 	.word	0x080012ed
	  	              {
	  	            	//GPIOs
	  	            	//CUrrent Sensors OCD pin needed to go low in reset condition after fault event
	  	            	//HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_SET);
	  	            	//HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 8001168:	2201      	movs	r2, #1
 800116a:	2104      	movs	r1, #4
 800116c:	4872      	ldr	r0, [pc, #456]	@ (8001338 <main+0x304>)
 800116e:	f005 fcf7 	bl	8006b60 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP
 8001172:	2200      	movs	r2, #0
 8001174:	2120      	movs	r1, #32
 8001176:	4869      	ldr	r0, [pc, #420]	@ (800131c <main+0x2e8>)
 8001178:	f005 fcf2 	bl	8006b60 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	2120      	movs	r1, #32
 8001180:	486e      	ldr	r0, [pc, #440]	@ (800133c <main+0x308>)
 8001182:	f005 fced 	bl	8006b60 <HAL_GPIO_WritePin>
	  	            	HAL_Delay(1000);
 8001186:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800118a:	f003 f82d 	bl	80041e8 <HAL_Delay>
	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2120      	movs	r1, #32
 8001192:	486a      	ldr	r0, [pc, #424]	@ (800133c <main+0x308>)
 8001194:	f005 fce4 	bl	8006b60 <HAL_GPIO_WritePin>
	  	            	  // Start PWM for delay time transfer to FPGA
	  	            	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001198:	2100      	movs	r1, #0
 800119a:	4869      	ldr	r0, [pc, #420]	@ (8001340 <main+0x30c>)
 800119c:	f008 fc3e 	bl	8009a1c <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80011a0:	2104      	movs	r1, #4
 80011a2:	4868      	ldr	r0, [pc, #416]	@ (8001344 <main+0x310>)
 80011a4:	f008 fc3a 	bl	8009a1c <HAL_TIM_PWM_Start>

	  	            	  //DAC for  current reference
	  	            	  ///DAC1_OUT1 	- MAX1
	  	            	  //DAC1_OUT2 	- MAX2
	  	            	  //DAC2_OUT1	- MIN
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_1);
 80011a8:	2100      	movs	r1, #0
 80011aa:	4867      	ldr	r0, [pc, #412]	@ (8001348 <main+0x314>)
 80011ac:	f004 fe10 	bl	8005dd0 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_2);
 80011b0:	2110      	movs	r1, #16
 80011b2:	4865      	ldr	r0, [pc, #404]	@ (8001348 <main+0x314>)
 80011b4:	f004 fe0c 	bl	8005dd0 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac2,DAC2_CHANNEL_1);
 80011b8:	2100      	movs	r1, #0
 80011ba:	4864      	ldr	r0, [pc, #400]	@ (800134c <main+0x318>)
 80011bc:	f004 fe08 	bl	8005dd0 <HAL_DAC_Start>

	  	            	//if( HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R)!= HAL_OK) printf("error");
	  	            	//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);

	  	            	  // FAN PWM and 5s timer6 for check temperature and change duty cycle
	  	            	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80011c0:	2100      	movs	r1, #0
 80011c2:	4863      	ldr	r0, [pc, #396]	@ (8001350 <main+0x31c>)
 80011c4:	f008 fc2a 	bl	8009a1c <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_Base_Start_IT(&htim6);
 80011c8:	4862      	ldr	r0, [pc, #392]	@ (8001354 <main+0x320>)
 80011ca:	f008 fb29 	bl	8009820 <HAL_TIM_Base_Start_IT>

	  	            	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 80011ce:	217f      	movs	r1, #127	@ 0x7f
 80011d0:	4861      	ldr	r0, [pc, #388]	@ (8001358 <main+0x324>)
 80011d2:	f004 fb2f 	bl	8005834 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 80011d6:	217f      	movs	r1, #127	@ 0x7f
 80011d8:	4860      	ldr	r0, [pc, #384]	@ (800135c <main+0x328>)
 80011da:	f004 fb2b 	bl	8005834 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 80011de:	217f      	movs	r1, #127	@ 0x7f
 80011e0:	485f      	ldr	r0, [pc, #380]	@ (8001360 <main+0x32c>)
 80011e2:	f004 fb27 	bl	8005834 <HAL_ADCEx_Calibration_Start>

	  	            	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_dma_buffer, 5);
 80011e6:	2205      	movs	r2, #5
 80011e8:	495e      	ldr	r1, [pc, #376]	@ (8001364 <main+0x330>)
 80011ea:	485b      	ldr	r0, [pc, #364]	@ (8001358 <main+0x324>)
 80011ec:	f003 fc1e 	bl	8004a2c <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4_dma_buffer, 2);
 80011f0:	2202      	movs	r2, #2
 80011f2:	495d      	ldr	r1, [pc, #372]	@ (8001368 <main+0x334>)
 80011f4:	4859      	ldr	r0, [pc, #356]	@ (800135c <main+0x328>)
 80011f6:	f003 fc19 	bl	8004a2c <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_dma_buffer, 10);
 80011fa:	220a      	movs	r2, #10
 80011fc:	495b      	ldr	r1, [pc, #364]	@ (800136c <main+0x338>)
 80011fe:	4858      	ldr	r0, [pc, #352]	@ (8001360 <main+0x32c>)
 8001200:	f003 fc14 	bl	8004a2c <HAL_ADC_Start_DMA>

	  	            	Set_PWM_DutyCycle(20);
 8001204:	2014      	movs	r0, #20
 8001206:	f001 f8a9 	bl	800235c <Set_PWM_DutyCycle>

	  	            	current_sensor1_vref = adc3_dma_buffer[0];// reference for imax imin
 800120a:	4b56      	ldr	r3, [pc, #344]	@ (8001364 <main+0x330>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	b29a      	uxth	r2, r3
 8001210:	4b57      	ldr	r3, [pc, #348]	@ (8001370 <main+0x33c>)
 8001212:	801a      	strh	r2, [r3, #0]
	  	            	current_sensor2_vref = adc3_dma_buffer[1];// reference for imax imin
 8001214:	4b53      	ldr	r3, [pc, #332]	@ (8001364 <main+0x330>)
 8001216:	885b      	ldrh	r3, [r3, #2]
 8001218:	b29a      	uxth	r2, r3
 800121a:	4b56      	ldr	r3, [pc, #344]	@ (8001374 <main+0x340>)
 800121c:	801a      	strh	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 800121e:	4b45      	ldr	r3, [pc, #276]	@ (8001334 <main+0x300>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 8001224:	e075      	b.n	8001312 <main+0x2de>
	  	              case STATE_STANDBY:
	  	                  // Wait for start_program signal
	  	              {
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
	  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	            	checkreads = Check_Ready();
 8001226:	f001 f9bb 	bl	80025a0 <Check_Ready>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	4b52      	ldr	r3, [pc, #328]	@ (8001378 <main+0x344>)
 8001230:	701a      	strb	r2, [r3, #0]
	  	            	  if(start_program && interlock &&  !(Check_Faults())   && Check_Ready()){
 8001232:	4b3c      	ldr	r3, [pc, #240]	@ (8001324 <main+0x2f0>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d068      	beq.n	800130c <main+0x2d8>
 800123a:	4b39      	ldr	r3, [pc, #228]	@ (8001320 <main+0x2ec>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d064      	beq.n	800130c <main+0x2d8>
 8001242:	f001 f973 	bl	800252c <Check_Faults>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d15f      	bne.n	800130c <main+0x2d8>
 800124c:	f001 f9a8 	bl	80025a0 <Check_Ready>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d05a      	beq.n	800130c <main+0x2d8>
	  	            		  currentState = STATE_SOFT_START;
 8001256:	4b37      	ldr	r3, [pc, #220]	@ (8001334 <main+0x300>)
 8001258:	2202      	movs	r2, #2
 800125a:	701a      	strb	r2, [r3, #0]
	  	            	  }

	  	              }
	  	                  break;
 800125c:	e056      	b.n	800130c <main+0x2d8>
	  	              case STATE_SOFT_START:
	  	                  // Gradually ramp up the output
	  	              {
	  	            	  if(once == 0){
 800125e:	4b47      	ldr	r3, [pc, #284]	@ (800137c <main+0x348>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d154      	bne.n	8001310 <main+0x2dc>
	  	            	  //Start timer that start_program ramp and pi regulation
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
 8001266:	2200      	movs	r2, #0
 8001268:	2104      	movs	r1, #4
 800126a:	4833      	ldr	r0, [pc, #204]	@ (8001338 <main+0x304>)
 800126c:	f005 fc78 	bl	8006b60 <HAL_GPIO_WritePin>
	  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	            	HAL_TIM_Base_Start_IT(&htim15); // START TIM15 THATS IS MAIN CONTROL LOOP
 8001270:	4843      	ldr	r0, [pc, #268]	@ (8001380 <main+0x34c>)
 8001272:	f008 fad5 	bl	8009820 <HAL_TIM_Base_Start_IT>
	  	            	//once = 1;
	  	            	  }


	  	              }
	  	                  break;
 8001276:	e04b      	b.n	8001310 <main+0x2dc>
	  	                  break;
	  	              case STATE_FAULT:
	  	                  // Handle fault condition
	  	            	  // Turn off all gate drivers and stop FPGA
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP drives mosfet etc
 8001278:	2200      	movs	r2, #0
 800127a:	2120      	movs	r1, #32
 800127c:	4827      	ldr	r0, [pc, #156]	@ (800131c <main+0x2e8>)
 800127e:	f005 fc6f 	bl	8006b60 <HAL_GPIO_WritePin>

	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!


	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 8001282:	483f      	ldr	r0, [pc, #252]	@ (8001380 <main+0x34c>)
 8001284:	f008 fb44 	bl	8009910 <HAL_TIM_Base_Stop_IT>

	  	            	HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port,NOT_RST_1_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2180      	movs	r1, #128	@ 0x80
 800128c:	483d      	ldr	r0, [pc, #244]	@ (8001384 <main+0x350>)
 800128e:	f005 fc67 	bl	8006b60 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_2_GPIO_Port,NOT_RST_2_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001298:	4828      	ldr	r0, [pc, #160]	@ (800133c <main+0x308>)
 800129a:	f005 fc61 	bl	8006b60 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port,NOT_RST_3_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2101      	movs	r1, #1
 80012a2:	4839      	ldr	r0, [pc, #228]	@ (8001388 <main+0x354>)
 80012a4:	f005 fc5c 	bl	8006b60 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port,NOT_RST_4_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2140      	movs	r1, #64	@ 0x40
 80012ac:	481b      	ldr	r0, [pc, #108]	@ (800131c <main+0x2e8>)
 80012ae:	f005 fc57 	bl	8006b60 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2102      	movs	r1, #2
 80012b6:	4821      	ldr	r0, [pc, #132]	@ (800133c <main+0x308>)
 80012b8:	f005 fc52 	bl	8006b60 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012c2:	481d      	ldr	r0, [pc, #116]	@ (8001338 <main+0x304>)
 80012c4:	f005 fc4c 	bl	8006b60 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2120      	movs	r1, #32
 80012cc:	481b      	ldr	r0, [pc, #108]	@ (800133c <main+0x308>)
 80012ce:	f005 fc47 	bl	8006b60 <HAL_GPIO_WritePin>

	  	            	HAL_TIM_Base_Start(&htim7); // timer for reset OCD and INTERLOCK reset turn off
 80012d2:	482e      	ldr	r0, [pc, #184]	@ (800138c <main+0x358>)
 80012d4:	f008 fa34 	bl	8009740 <HAL_TIM_Base_Start>


	  	            	once = 0;
 80012d8:	4b28      	ldr	r3, [pc, #160]	@ (800137c <main+0x348>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
	  	            	start_program = 0;
 80012de:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <main+0x2f0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
	  	            	currentState = STATE_STANDBY;
 80012e4:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <main+0x300>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 80012ea:	e012      	b.n	8001312 <main+0x2de>
	  	              case STATE_SHUTDOWN:
	  	                  // Safely shut down the converter
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2120      	movs	r1, #32
 80012f0:	480a      	ldr	r0, [pc, #40]	@ (800131c <main+0x2e8>)
 80012f2:	f005 fc35 	bl	8006b60 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 80012f6:	2201      	movs	r2, #1
 80012f8:	2104      	movs	r1, #4
 80012fa:	480f      	ldr	r0, [pc, #60]	@ (8001338 <main+0x304>)
 80012fc:	f005 fc30 	bl	8006b60 <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 8001300:	481f      	ldr	r0, [pc, #124]	@ (8001380 <main+0x34c>)
 8001302:	f008 fb05 	bl	8009910 <HAL_TIM_Base_Stop_IT>
	  	              }

	  	                  break;
 8001306:	e004      	b.n	8001312 <main+0x2de>
	  	              default:
	  	                  break;
 8001308:	bf00      	nop
 800130a:	e6bd      	b.n	8001088 <main+0x54>
	  	                  break;
 800130c:	bf00      	nop
 800130e:	e6bb      	b.n	8001088 <main+0x54>
	  	                  break;
 8001310:	bf00      	nop
	  	  	  	  checkfaults = Check_Faults();
 8001312:	e6b9      	b.n	8001088 <main+0x54>
 8001314:	20000b50 	.word	0x20000b50
 8001318:	20000b40 	.word	0x20000b40
 800131c:	48000800 	.word	0x48000800
 8001320:	20000b58 	.word	0x20000b58
 8001324:	20000b4c 	.word	0x20000b4c
 8001328:	20000018 	.word	0x20000018
 800132c:	20000b4d 	.word	0x20000b4d
 8001330:	20000b4e 	.word	0x20000b4e
 8001334:	20000b4f 	.word	0x20000b4f
 8001338:	48001400 	.word	0x48001400
 800133c:	48001000 	.word	0x48001000
 8001340:	2000077c 	.word	0x2000077c
 8001344:	200008ac 	.word	0x200008ac
 8001348:	20000694 	.word	0x20000694
 800134c:	200006a8 	.word	0x200006a8
 8001350:	200007c8 	.word	0x200007c8
 8001354:	20000814 	.word	0x20000814
 8001358:	20000408 	.word	0x20000408
 800135c:	20000474 	.word	0x20000474
 8001360:	200004e0 	.word	0x200004e0
 8001364:	20000a40 	.word	0x20000a40
 8001368:	20000a54 	.word	0x20000a54
 800136c:	20000a68 	.word	0x20000a68
 8001370:	20000a24 	.word	0x20000a24
 8001374:	20000a26 	.word	0x20000a26
 8001378:	20000b51 	.word	0x20000b51
 800137c:	20000b54 	.word	0x20000b54
 8001380:	200008f8 	.word	0x200008f8
 8001384:	48000400 	.word	0x48000400
 8001388:	48000c00 	.word	0x48000c00
 800138c:	20000860 	.word	0x20000860

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b094      	sub	sp, #80	@ 0x50
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 0318 	add.w	r3, r7, #24
 800139a:	2238      	movs	r2, #56	@ 0x38
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f010 f909 	bl	80115b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013b6:	f007 f93b 	bl	8008630 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80013ba:	2322      	movs	r3, #34	@ 0x22
 80013bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c4:	2340      	movs	r3, #64	@ 0x40
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013c8:	2301      	movs	r3, #1
 80013ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013cc:	2302      	movs	r3, #2
 80013ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013d0:	2302      	movs	r3, #2
 80013d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80013d4:	2304      	movs	r3, #4
 80013d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80013d8:	234b      	movs	r3, #75	@ 0x4b
 80013da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013dc:	2302      	movs	r3, #2
 80013de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013e4:	2302      	movs	r3, #2
 80013e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e8:	f107 0318 	add.w	r3, r7, #24
 80013ec:	4618      	mov	r0, r3
 80013ee:	f007 f9d3 	bl	8008798 <HAL_RCC_OscConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80013f8:	f002 f882 	bl	8003500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fc:	230f      	movs	r3, #15
 80013fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001400:	2303      	movs	r3, #3
 8001402:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2104      	movs	r1, #4
 8001414:	4618      	mov	r0, r3
 8001416:	f007 fcd1 	bl	8008dbc <HAL_RCC_ClockConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001420:	f002 f86e 	bl	8003500 <Error_Handler>
  }
}
 8001424:	bf00      	nop
 8001426:	3750      	adds	r7, #80	@ 0x50
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	@ 0x30
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2220      	movs	r2, #32
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f010 f8b6 	bl	80115b6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800144a:	4b32      	ldr	r3, [pc, #200]	@ (8001514 <MX_ADC1_Init+0xe8>)
 800144c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001450:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001452:	4b30      	ldr	r3, [pc, #192]	@ (8001514 <MX_ADC1_Init+0xe8>)
 8001454:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001458:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800145a:	4b2e      	ldr	r3, [pc, #184]	@ (8001514 <MX_ADC1_Init+0xe8>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001460:	4b2c      	ldr	r3, [pc, #176]	@ (8001514 <MX_ADC1_Init+0xe8>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001466:	4b2b      	ldr	r3, [pc, #172]	@ (8001514 <MX_ADC1_Init+0xe8>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800146c:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <MX_ADC1_Init+0xe8>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001472:	4b28      	ldr	r3, [pc, #160]	@ (8001514 <MX_ADC1_Init+0xe8>)
 8001474:	2204      	movs	r2, #4
 8001476:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001478:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <MX_ADC1_Init+0xe8>)
 800147a:	2200      	movs	r2, #0
 800147c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800147e:	4b25      	ldr	r3, [pc, #148]	@ (8001514 <MX_ADC1_Init+0xe8>)
 8001480:	2200      	movs	r2, #0
 8001482:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001484:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <MX_ADC1_Init+0xe8>)
 8001486:	2201      	movs	r2, #1
 8001488:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800148a:	4b22      	ldr	r3, [pc, #136]	@ (8001514 <MX_ADC1_Init+0xe8>)
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001492:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <MX_ADC1_Init+0xe8>)
 8001494:	2200      	movs	r2, #0
 8001496:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001498:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <MX_ADC1_Init+0xe8>)
 800149a:	2200      	movs	r2, #0
 800149c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800149e:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <MX_ADC1_Init+0xe8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <MX_ADC1_Init+0xe8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80014ac:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <MX_ADC1_Init+0xe8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014b4:	4817      	ldr	r0, [pc, #92]	@ (8001514 <MX_ADC1_Init+0xe8>)
 80014b6:	f003 f8fd 	bl	80046b4 <HAL_ADC_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80014c0:	f002 f81e 	bl	8003500 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014cc:	4619      	mov	r1, r3
 80014ce:	4811      	ldr	r0, [pc, #68]	@ (8001514 <MX_ADC1_Init+0xe8>)
 80014d0:	f004 fa12 	bl	80058f8 <HAL_ADCEx_MultiModeConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80014da:	f002 f811 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <MX_ADC1_Init+0xec>)
 80014e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014e2:	2306      	movs	r3, #6
 80014e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80014e6:	2307      	movs	r3, #7
 80014e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ea:	237f      	movs	r3, #127	@ 0x7f
 80014ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014ee:	2304      	movs	r3, #4
 80014f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	@ (8001514 <MX_ADC1_Init+0xe8>)
 80014fc:	f003 fb7e 	bl	8004bfc <HAL_ADC_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001506:	f001 fffb 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	3730      	adds	r7, #48	@ 0x30
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000039c 	.word	0x2000039c
 8001518:	cb840000 	.word	0xcb840000

0800151c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	@ 0x30
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2220      	movs	r2, #32
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f010 f83e 	bl	80115b6 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800153a:	4b57      	ldr	r3, [pc, #348]	@ (8001698 <MX_ADC3_Init+0x17c>)
 800153c:	4a57      	ldr	r2, [pc, #348]	@ (800169c <MX_ADC3_Init+0x180>)
 800153e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001540:	4b55      	ldr	r3, [pc, #340]	@ (8001698 <MX_ADC3_Init+0x17c>)
 8001542:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001546:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001548:	4b53      	ldr	r3, [pc, #332]	@ (8001698 <MX_ADC3_Init+0x17c>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154e:	4b52      	ldr	r3, [pc, #328]	@ (8001698 <MX_ADC3_Init+0x17c>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001554:	4b50      	ldr	r3, [pc, #320]	@ (8001698 <MX_ADC3_Init+0x17c>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800155a:	4b4f      	ldr	r3, [pc, #316]	@ (8001698 <MX_ADC3_Init+0x17c>)
 800155c:	2201      	movs	r2, #1
 800155e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001560:	4b4d      	ldr	r3, [pc, #308]	@ (8001698 <MX_ADC3_Init+0x17c>)
 8001562:	2204      	movs	r2, #4
 8001564:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001566:	4b4c      	ldr	r3, [pc, #304]	@ (8001698 <MX_ADC3_Init+0x17c>)
 8001568:	2200      	movs	r2, #0
 800156a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800156c:	4b4a      	ldr	r3, [pc, #296]	@ (8001698 <MX_ADC3_Init+0x17c>)
 800156e:	2201      	movs	r2, #1
 8001570:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 5;
 8001572:	4b49      	ldr	r3, [pc, #292]	@ (8001698 <MX_ADC3_Init+0x17c>)
 8001574:	2205      	movs	r2, #5
 8001576:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001578:	4b47      	ldr	r3, [pc, #284]	@ (8001698 <MX_ADC3_Init+0x17c>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001580:	4b45      	ldr	r3, [pc, #276]	@ (8001698 <MX_ADC3_Init+0x17c>)
 8001582:	2200      	movs	r2, #0
 8001584:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001586:	4b44      	ldr	r3, [pc, #272]	@ (8001698 <MX_ADC3_Init+0x17c>)
 8001588:	2200      	movs	r2, #0
 800158a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800158c:	4b42      	ldr	r3, [pc, #264]	@ (8001698 <MX_ADC3_Init+0x17c>)
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001594:	4b40      	ldr	r3, [pc, #256]	@ (8001698 <MX_ADC3_Init+0x17c>)
 8001596:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800159a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800159c:	4b3e      	ldr	r3, [pc, #248]	@ (8001698 <MX_ADC3_Init+0x17c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015a4:	483c      	ldr	r0, [pc, #240]	@ (8001698 <MX_ADC3_Init+0x17c>)
 80015a6:	f003 f885 	bl	80046b4 <HAL_ADC_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 80015b0:	f001 ffa6 	bl	8003500 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80015b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	4836      	ldr	r0, [pc, #216]	@ (8001698 <MX_ADC3_Init+0x17c>)
 80015c0:	f004 f99a 	bl	80058f8 <HAL_ADCEx_MultiModeConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80015ca:	f001 ff99 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ce:	4b34      	ldr	r3, [pc, #208]	@ (80016a0 <MX_ADC3_Init+0x184>)
 80015d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015d2:	2306      	movs	r3, #6
 80015d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015da:	237f      	movs	r3, #127	@ 0x7f
 80015dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 38;
 80015e2:	2326      	movs	r3, #38	@ 0x26
 80015e4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 80015e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015ea:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetSaturation = DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4828      	ldr	r0, [pc, #160]	@ (8001698 <MX_ADC3_Init+0x17c>)
 80015f8:	f003 fb00 	bl	8004bfc <HAL_ADC_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001602:	f001 ff7d 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001606:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <MX_ADC3_Init+0x188>)
 8001608:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800160a:	230c      	movs	r3, #12
 800160c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_2;
 800160e:	2301      	movs	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 37;
 8001612:	2325      	movs	r3, #37	@ 0x25
 8001614:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4619      	mov	r1, r3
 800161a:	481f      	ldr	r0, [pc, #124]	@ (8001698 <MX_ADC3_Init+0x17c>)
 800161c:	f003 faee 	bl	8004bfc <HAL_ADC_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 8001626:	f001 ff6b 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800162a:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <MX_ADC3_Init+0x18c>)
 800162c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800162e:	2312      	movs	r3, #18
 8001630:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_3;
 8001632:	2302      	movs	r3, #2
 8001634:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 8;
 8001636:	2308      	movs	r3, #8
 8001638:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4619      	mov	r1, r3
 800163e:	4816      	ldr	r0, [pc, #88]	@ (8001698 <MX_ADC3_Init+0x17c>)
 8001640:	f003 fadc 	bl	8004bfc <HAL_ADC_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_ADC3_Init+0x132>
  {
    Error_Handler();
 800164a:	f001 ff59 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800164e:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <MX_ADC3_Init+0x190>)
 8001650:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001652:	2318      	movs	r3, #24
 8001654:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001656:	2304      	movs	r3, #4
 8001658:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	4619      	mov	r1, r3
 8001662:	480d      	ldr	r0, [pc, #52]	@ (8001698 <MX_ADC3_Init+0x17c>)
 8001664:	f003 faca 	bl	8004bfc <HAL_ADC_ConfigChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 800166e:	f001 ff47 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001672:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <MX_ADC3_Init+0x194>)
 8001674:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001676:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800167a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	4619      	mov	r1, r3
 8001680:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_ADC3_Init+0x17c>)
 8001682:	f003 fabb 	bl	8004bfc <HAL_ADC_ConfigChannel>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 800168c:	f001 ff38 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	3730      	adds	r7, #48	@ 0x30
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000408 	.word	0x20000408
 800169c:	50000400 	.word	0x50000400
 80016a0:	04300002 	.word	0x04300002
 80016a4:	08600004 	.word	0x08600004
 80016a8:	0c900008 	.word	0x0c900008
 80016ac:	10c00010 	.word	0x10c00010
 80016b0:	14f00020 	.word	0x14f00020

080016b4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ba:	463b      	mov	r3, r7
 80016bc:	2220      	movs	r2, #32
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f00f ff78 	bl	80115b6 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80016c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <MX_ADC4_Init+0xc0>)
 80016c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001778 <MX_ADC4_Init+0xc4>)
 80016ca:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 80016cc:	4b29      	ldr	r3, [pc, #164]	@ (8001774 <MX_ADC4_Init+0xc0>)
 80016ce:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 80016d2:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <MX_ADC4_Init+0xc0>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016da:	4b26      	ldr	r3, [pc, #152]	@ (8001774 <MX_ADC4_Init+0xc0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80016e0:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <MX_ADC4_Init+0xc0>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016e6:	4b23      	ldr	r3, [pc, #140]	@ (8001774 <MX_ADC4_Init+0xc0>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016ec:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <MX_ADC4_Init+0xc0>)
 80016ee:	2204      	movs	r2, #4
 80016f0:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80016f2:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <MX_ADC4_Init+0xc0>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80016f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <MX_ADC4_Init+0xc0>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80016fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <MX_ADC4_Init+0xc0>)
 8001700:	2201      	movs	r2, #1
 8001702:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <MX_ADC4_Init+0xc0>)
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800170c:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <MX_ADC4_Init+0xc0>)
 800170e:	2200      	movs	r2, #0
 8001710:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <MX_ADC4_Init+0xc0>)
 8001714:	2200      	movs	r2, #0
 8001716:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001718:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <MX_ADC4_Init+0xc0>)
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001720:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <MX_ADC4_Init+0xc0>)
 8001722:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001726:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <MX_ADC4_Init+0xc0>)
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001730:	4810      	ldr	r0, [pc, #64]	@ (8001774 <MX_ADC4_Init+0xc0>)
 8001732:	f002 ffbf 	bl	80046b4 <HAL_ADC_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 800173c:	f001 fee0 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001740:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <MX_ADC4_Init+0xc8>)
 8001742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001744:	2306      	movs	r3, #6
 8001746:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001748:	2307      	movs	r3, #7
 800174a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800174c:	237f      	movs	r3, #127	@ 0x7f
 800174e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001750:	2304      	movs	r3, #4
 8001752:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001758:	463b      	mov	r3, r7
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	@ (8001774 <MX_ADC4_Init+0xc0>)
 800175e:	f003 fa4d 	bl	8004bfc <HAL_ADC_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8001768:	f001 feca 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000474 	.word	0x20000474
 8001778:	50000500 	.word	0x50000500
 800177c:	04300002 	.word	0x04300002

08001780 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001786:	463b      	mov	r3, r7
 8001788:	2220      	movs	r2, #32
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f00f ff12 	bl	80115b6 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001792:	4b31      	ldr	r3, [pc, #196]	@ (8001858 <MX_ADC5_Init+0xd8>)
 8001794:	4a31      	ldr	r2, [pc, #196]	@ (800185c <MX_ADC5_Init+0xdc>)
 8001796:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001798:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <MX_ADC5_Init+0xd8>)
 800179a:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 800179e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80017a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001858 <MX_ADC5_Init+0xd8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001858 <MX_ADC5_Init+0xd8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80017ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001858 <MX_ADC5_Init+0xd8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017b2:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <MX_ADC5_Init+0xd8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b8:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <MX_ADC5_Init+0xd8>)
 80017ba:	2204      	movs	r2, #4
 80017bc:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80017be:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <MX_ADC5_Init+0xd8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 80017c4:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <MX_ADC5_Init+0xd8>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80017ca:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <MX_ADC5_Init+0xd8>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80017d0:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <MX_ADC5_Init+0xd8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <MX_ADC5_Init+0xd8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017de:	4b1e      	ldr	r3, [pc, #120]	@ (8001858 <MX_ADC5_Init+0xd8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 80017e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001858 <MX_ADC5_Init+0xd8>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <MX_ADC5_Init+0xd8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 80017f2:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <MX_ADC5_Init+0xd8>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 80017fa:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <MX_ADC5_Init+0xd8>)
 80017fc:	221c      	movs	r2, #28
 80017fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8001800:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <MX_ADC5_Init+0xd8>)
 8001802:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001806:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <MX_ADC5_Init+0xd8>)
 800180a:	2200      	movs	r2, #0
 800180c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <MX_ADC5_Init+0xd8>)
 8001810:	2201      	movs	r2, #1
 8001812:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001814:	4810      	ldr	r0, [pc, #64]	@ (8001858 <MX_ADC5_Init+0xd8>)
 8001816:	f002 ff4d 	bl	80046b4 <HAL_ADC_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_ADC5_Init+0xa4>
  {
    Error_Handler();
 8001820:	f001 fe6e 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001824:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <MX_ADC5_Init+0xe0>)
 8001826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001828:	2306      	movs	r3, #6
 800182a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001830:	237f      	movs	r3, #127	@ 0x7f
 8001832:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001834:	2304      	movs	r3, #4
 8001836:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_ADC5_Init+0xd8>)
 8001842:	f003 f9db 	bl	8004bfc <HAL_ADC_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_ADC5_Init+0xd0>
  {
    Error_Handler();
 800184c:	f001 fe58 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200004e0 	.word	0x200004e0
 800185c:	50000600 	.word	0x50000600
 8001860:	04300002 	.word	0x04300002

08001864 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <MX_CORDIC_Init+0x20>)
 800186a:	4a07      	ldr	r2, [pc, #28]	@ (8001888 <MX_CORDIC_Init+0x24>)
 800186c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800186e:	4805      	ldr	r0, [pc, #20]	@ (8001884 <MX_CORDIC_Init+0x20>)
 8001870:	f004 f94a 	bl	8005b08 <HAL_CORDIC_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800187a:	f001 fe41 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000066c 	.word	0x2000066c
 8001888:	40020c00 	.word	0x40020c00

0800188c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	@ 0x30
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001892:	463b      	mov	r3, r7
 8001894:	2230      	movs	r2, #48	@ 0x30
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f00f fe8c 	bl	80115b6 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800189e:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <MX_DAC1_Init+0x8c>)
 80018a0:	4a1e      	ldr	r2, [pc, #120]	@ (800191c <MX_DAC1_Init+0x90>)
 80018a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80018a4:	481c      	ldr	r0, [pc, #112]	@ (8001918 <MX_DAC1_Init+0x8c>)
 80018a6:	f004 fa70 	bl	8005d8a <HAL_DAC_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80018b0:	f001 fe26 	bl	8003500 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80018b4:	2302      	movs	r3, #2
 80018b6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80018d0:	2301      	movs	r3, #1
 80018d2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80018d8:	463b      	mov	r3, r7
 80018da:	2200      	movs	r2, #0
 80018dc:	4619      	mov	r1, r3
 80018de:	480e      	ldr	r0, [pc, #56]	@ (8001918 <MX_DAC1_Init+0x8c>)
 80018e0:	f004 fb70 	bl	8005fc4 <HAL_DAC_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80018ea:	f001 fe09 	bl	8003500 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80018ee:	463b      	mov	r3, r7
 80018f0:	2210      	movs	r2, #16
 80018f2:	4619      	mov	r1, r3
 80018f4:	4808      	ldr	r0, [pc, #32]	@ (8001918 <MX_DAC1_Init+0x8c>)
 80018f6:	f004 fb65 	bl	8005fc4 <HAL_DAC_ConfigChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8001900:	f001 fdfe 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  __HAL_LINKDMA(&hdac1, DMA_Handle1, hdma_dac1_ch1);
 8001904:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <MX_DAC1_Init+0x8c>)
 8001906:	4a06      	ldr	r2, [pc, #24]	@ (8001920 <MX_DAC1_Init+0x94>)
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <MX_DAC1_Init+0x94>)
 800190c:	4a02      	ldr	r2, [pc, #8]	@ (8001918 <MX_DAC1_Init+0x8c>)
 800190e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END DAC1_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	3730      	adds	r7, #48	@ 0x30
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000694 	.word	0x20000694
 800191c:	50000800 	.word	0x50000800
 8001920:	200006bc 	.word	0x200006bc

08001924 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	@ 0x30
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800192a:	463b      	mov	r3, r7
 800192c:	2230      	movs	r2, #48	@ 0x30
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f00f fe40 	bl	80115b6 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001936:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <MX_DAC2_Init+0x6c>)
 8001938:	4a16      	ldr	r2, [pc, #88]	@ (8001994 <MX_DAC2_Init+0x70>)
 800193a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800193c:	4814      	ldr	r0, [pc, #80]	@ (8001990 <MX_DAC2_Init+0x6c>)
 800193e:	f004 fa24 	bl	8005d8a <HAL_DAC_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001948:	f001 fdda 	bl	8003500 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800194c:	2302      	movs	r3, #2
 800194e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001968:	2301      	movs	r3, #1
 800196a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	2200      	movs	r2, #0
 8001974:	4619      	mov	r1, r3
 8001976:	4806      	ldr	r0, [pc, #24]	@ (8001990 <MX_DAC2_Init+0x6c>)
 8001978:	f004 fb24 	bl	8005fc4 <HAL_DAC_ConfigChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001982:	f001 fdbd 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	3730      	adds	r7, #48	@ 0x30
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200006a8 	.word	0x200006a8
 8001994:	50000c00 	.word	0x50000c00

08001998 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b098      	sub	sp, #96	@ 0x60
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]
 80019ba:	615a      	str	r2, [r3, #20]
 80019bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2234      	movs	r2, #52	@ 0x34
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00f fdf6 	bl	80115b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ca:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab4 <MX_TIM1_Init+0x11c>)
 80019cc:	4a3a      	ldr	r2, [pc, #232]	@ (8001ab8 <MX_TIM1_Init+0x120>)
 80019ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019d0:	4b38      	ldr	r3, [pc, #224]	@ (8001ab4 <MX_TIM1_Init+0x11c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d6:	4b37      	ldr	r3, [pc, #220]	@ (8001ab4 <MX_TIM1_Init+0x11c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210;
 80019dc:	4b35      	ldr	r3, [pc, #212]	@ (8001ab4 <MX_TIM1_Init+0x11c>)
 80019de:	22d2      	movs	r2, #210	@ 0xd2
 80019e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e2:	4b34      	ldr	r3, [pc, #208]	@ (8001ab4 <MX_TIM1_Init+0x11c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019e8:	4b32      	ldr	r3, [pc, #200]	@ (8001ab4 <MX_TIM1_Init+0x11c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ee:	4b31      	ldr	r3, [pc, #196]	@ (8001ab4 <MX_TIM1_Init+0x11c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019f4:	482f      	ldr	r0, [pc, #188]	@ (8001ab4 <MX_TIM1_Init+0x11c>)
 80019f6:	f007 ffba 	bl	800996e <HAL_TIM_PWM_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001a00:	f001 fd7e 	bl	8003500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a14:	4619      	mov	r1, r3
 8001a16:	4827      	ldr	r0, [pc, #156]	@ (8001ab4 <MX_TIM1_Init+0x11c>)
 8001a18:	f009 f954 	bl	800acc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001a22:	f001 fd6d 	bl	8003500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a26:	2360      	movs	r3, #96	@ 0x60
 8001a28:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a32:	2300      	movs	r3, #0
 8001a34:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a42:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a46:	2200      	movs	r2, #0
 8001a48:	4619      	mov	r1, r3
 8001a4a:	481a      	ldr	r0, [pc, #104]	@ (8001ab4 <MX_TIM1_Init+0x11c>)
 8001a4c:	f008 fa48 	bl	8009ee0 <HAL_TIM_PWM_ConfigChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001a56:	f001 fd53 	bl	8003500 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	4619      	mov	r1, r3
 8001a96:	4807      	ldr	r0, [pc, #28]	@ (8001ab4 <MX_TIM1_Init+0x11c>)
 8001a98:	f009 f9aa 	bl	800adf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001aa2:	f001 fd2d 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aa6:	4803      	ldr	r0, [pc, #12]	@ (8001ab4 <MX_TIM1_Init+0x11c>)
 8001aa8:	f002 f8c8 	bl	8003c3c <HAL_TIM_MspPostInit>

}
 8001aac:	bf00      	nop
 8001aae:	3760      	adds	r7, #96	@ 0x60
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	2000077c 	.word	0x2000077c
 8001ab8:	40012c00 	.word	0x40012c00

08001abc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08e      	sub	sp, #56	@ 0x38
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001adc:	463b      	mov	r3, r7
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
 8001aea:	615a      	str	r2, [r3, #20]
 8001aec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aee:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba4 <MX_TIM4_Init+0xe8>)
 8001af0:	4a2d      	ldr	r2, [pc, #180]	@ (8001ba8 <MX_TIM4_Init+0xec>)
 8001af2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001af4:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba4 <MX_TIM4_Init+0xe8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba4 <MX_TIM4_Init+0xe8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 679;
 8001b00:	4b28      	ldr	r3, [pc, #160]	@ (8001ba4 <MX_TIM4_Init+0xe8>)
 8001b02:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8001b06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b08:	4b26      	ldr	r3, [pc, #152]	@ (8001ba4 <MX_TIM4_Init+0xe8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ba4 <MX_TIM4_Init+0xe8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b14:	4823      	ldr	r0, [pc, #140]	@ (8001ba4 <MX_TIM4_Init+0xe8>)
 8001b16:	f007 fdbb 	bl	8009690 <HAL_TIM_Base_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001b20:	f001 fcee 	bl	8003500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b2e:	4619      	mov	r1, r3
 8001b30:	481c      	ldr	r0, [pc, #112]	@ (8001ba4 <MX_TIM4_Init+0xe8>)
 8001b32:	f008 fae9 	bl	800a108 <HAL_TIM_ConfigClockSource>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001b3c:	f001 fce0 	bl	8003500 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b40:	4818      	ldr	r0, [pc, #96]	@ (8001ba4 <MX_TIM4_Init+0xe8>)
 8001b42:	f007 ff14 	bl	800996e <HAL_TIM_PWM_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001b4c:	f001 fcd8 	bl	8003500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4811      	ldr	r0, [pc, #68]	@ (8001ba4 <MX_TIM4_Init+0xe8>)
 8001b60:	f009 f8b0 	bl	800acc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001b6a:	f001 fcc9 	bl	8003500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6e:	2360      	movs	r3, #96	@ 0x60
 8001b70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b7e:	463b      	mov	r3, r7
 8001b80:	2200      	movs	r2, #0
 8001b82:	4619      	mov	r1, r3
 8001b84:	4807      	ldr	r0, [pc, #28]	@ (8001ba4 <MX_TIM4_Init+0xe8>)
 8001b86:	f008 f9ab 	bl	8009ee0 <HAL_TIM_PWM_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001b90:	f001 fcb6 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b94:	4803      	ldr	r0, [pc, #12]	@ (8001ba4 <MX_TIM4_Init+0xe8>)
 8001b96:	f002 f851 	bl	8003c3c <HAL_TIM_MspPostInit>

}
 8001b9a:	bf00      	nop
 8001b9c:	3738      	adds	r7, #56	@ 0x38
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200007c8 	.word	0x200007c8
 8001ba8:	40000800 	.word	0x40000800

08001bac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bbc:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <MX_TIM6_Init+0x78>)
 8001bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8001c28 <MX_TIM6_Init+0x7c>)
 8001bc0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11549;
 8001bc2:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <MX_TIM6_Init+0x78>)
 8001bc4:	f642 521d 	movw	r2, #11549	@ 0x2d1d
 8001bc8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bca:	4b16      	ldr	r3, [pc, #88]	@ (8001c24 <MX_TIM6_Init+0x78>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64934;
 8001bd0:	4b14      	ldr	r3, [pc, #80]	@ (8001c24 <MX_TIM6_Init+0x78>)
 8001bd2:	f64f 52a6 	movw	r2, #64934	@ 0xfda6
 8001bd6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd8:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <MX_TIM6_Init+0x78>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bde:	4811      	ldr	r0, [pc, #68]	@ (8001c24 <MX_TIM6_Init+0x78>)
 8001be0:	f007 fd56 	bl	8009690 <HAL_TIM_Base_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001bea:	f001 fc89 	bl	8003500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	480a      	ldr	r0, [pc, #40]	@ (8001c24 <MX_TIM6_Init+0x78>)
 8001bfc:	f009 f862 	bl	800acc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001c06:	f001 fc7b 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	2036      	movs	r0, #54	@ 0x36
 8001c10:	f004 f887 	bl	8005d22 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c14:	2036      	movs	r0, #54	@ 0x36
 8001c16:	f004 f89e 	bl	8005d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000814 	.word	0x20000814
 8001c28:	40001000 	.word	0x40001000

08001c2c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c3c:	4b14      	ldr	r3, [pc, #80]	@ (8001c90 <MX_TIM7_Init+0x64>)
 8001c3e:	4a15      	ldr	r2, [pc, #84]	@ (8001c94 <MX_TIM7_Init+0x68>)
 8001c40:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 14999;
 8001c42:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <MX_TIM7_Init+0x64>)
 8001c44:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001c48:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4a:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <MX_TIM7_Init+0x64>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8001c50:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <MX_TIM7_Init+0x64>)
 8001c52:	2209      	movs	r2, #9
 8001c54:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <MX_TIM7_Init+0x64>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c5c:	480c      	ldr	r0, [pc, #48]	@ (8001c90 <MX_TIM7_Init+0x64>)
 8001c5e:	f007 fd17 	bl	8009690 <HAL_TIM_Base_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001c68:	f001 fc4a 	bl	8003500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	4619      	mov	r1, r3
 8001c78:	4805      	ldr	r0, [pc, #20]	@ (8001c90 <MX_TIM7_Init+0x64>)
 8001c7a:	f009 f823 	bl	800acc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001c84:	f001 fc3c 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000860 	.word	0x20000860
 8001c94:	40001400 	.word	0x40001400

08001c98 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b098      	sub	sp, #96	@ 0x60
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001caa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]
 8001cba:	615a      	str	r2, [r3, #20]
 8001cbc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2234      	movs	r2, #52	@ 0x34
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f00f fc76 	bl	80115b6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001cca:	4b3a      	ldr	r3, [pc, #232]	@ (8001db4 <MX_TIM8_Init+0x11c>)
 8001ccc:	4a3a      	ldr	r2, [pc, #232]	@ (8001db8 <MX_TIM8_Init+0x120>)
 8001cce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001cd0:	4b38      	ldr	r3, [pc, #224]	@ (8001db4 <MX_TIM8_Init+0x11c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd6:	4b37      	ldr	r3, [pc, #220]	@ (8001db4 <MX_TIM8_Init+0x11c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 8001cdc:	4b35      	ldr	r3, [pc, #212]	@ (8001db4 <MX_TIM8_Init+0x11c>)
 8001cde:	22d2      	movs	r2, #210	@ 0xd2
 8001ce0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce2:	4b34      	ldr	r3, [pc, #208]	@ (8001db4 <MX_TIM8_Init+0x11c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ce8:	4b32      	ldr	r3, [pc, #200]	@ (8001db4 <MX_TIM8_Init+0x11c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cee:	4b31      	ldr	r3, [pc, #196]	@ (8001db4 <MX_TIM8_Init+0x11c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001cf4:	482f      	ldr	r0, [pc, #188]	@ (8001db4 <MX_TIM8_Init+0x11c>)
 8001cf6:	f007 fe3a 	bl	800996e <HAL_TIM_PWM_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001d00:	f001 fbfe 	bl	8003500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d04:	2300      	movs	r3, #0
 8001d06:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d14:	4619      	mov	r1, r3
 8001d16:	4827      	ldr	r0, [pc, #156]	@ (8001db4 <MX_TIM8_Init+0x11c>)
 8001d18:	f008 ffd4 	bl	800acc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8001d22:	f001 fbed 	bl	8003500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d26:	2360      	movs	r3, #96	@ 0x60
 8001d28:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d32:	2300      	movs	r3, #0
 8001d34:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d42:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d46:	2204      	movs	r2, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	481a      	ldr	r0, [pc, #104]	@ (8001db4 <MX_TIM8_Init+0x11c>)
 8001d4c:	f008 f8c8 	bl	8009ee0 <HAL_TIM_PWM_ConfigChannel>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001d56:	f001 fbd3 	bl	8003500 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4807      	ldr	r0, [pc, #28]	@ (8001db4 <MX_TIM8_Init+0x11c>)
 8001d98:	f009 f82a 	bl	800adf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001da2:	f001 fbad 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001da6:	4803      	ldr	r0, [pc, #12]	@ (8001db4 <MX_TIM8_Init+0x11c>)
 8001da8:	f001 ff48 	bl	8003c3c <HAL_TIM_MspPostInit>

}
 8001dac:	bf00      	nop
 8001dae:	3760      	adds	r7, #96	@ 0x60
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200008ac 	.word	0x200008ac
 8001db8:	40013400 	.word	0x40013400

08001dbc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001dda:	4b1f      	ldr	r3, [pc, #124]	@ (8001e58 <MX_TIM15_Init+0x9c>)
 8001ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8001e5c <MX_TIM15_Init+0xa0>)
 8001dde:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1499;
 8001de0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e58 <MX_TIM15_Init+0x9c>)
 8001de2:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001de6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <MX_TIM15_Init+0x9c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <MX_TIM15_Init+0x9c>)
 8001df0:	2204      	movs	r2, #4
 8001df2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df4:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <MX_TIM15_Init+0x9c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001dfa:	4b17      	ldr	r3, [pc, #92]	@ (8001e58 <MX_TIM15_Init+0x9c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e00:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <MX_TIM15_Init+0x9c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001e06:	4814      	ldr	r0, [pc, #80]	@ (8001e58 <MX_TIM15_Init+0x9c>)
 8001e08:	f007 fc42 	bl	8009690 <HAL_TIM_Base_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001e12:	f001 fb75 	bl	8003500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	4619      	mov	r1, r3
 8001e22:	480d      	ldr	r0, [pc, #52]	@ (8001e58 <MX_TIM15_Init+0x9c>)
 8001e24:	f008 f970 	bl	800a108 <HAL_TIM_ConfigClockSource>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001e2e:	f001 fb67 	bl	8003500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4806      	ldr	r0, [pc, #24]	@ (8001e58 <MX_TIM15_Init+0x9c>)
 8001e40:	f008 ff40 	bl	800acc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001e4a:	f001 fb59 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	3720      	adds	r7, #32
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200008f8 	.word	0x200008f8
 8001e5c:	40014000 	.word	0x40014000

08001e60 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <MX_TIM16_Init+0x44>)
 8001e66:	4a10      	ldr	r2, [pc, #64]	@ (8001ea8 <MX_TIM16_Init+0x48>)
 8001e68:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 14999;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <MX_TIM16_Init+0x44>)
 8001e6c:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001e70:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <MX_TIM16_Init+0x44>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8001e78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <MX_TIM16_Init+0x44>)
 8001e7a:	2209      	movs	r2, #9
 8001e7c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <MX_TIM16_Init+0x44>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001e84:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <MX_TIM16_Init+0x44>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <MX_TIM16_Init+0x44>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e90:	4804      	ldr	r0, [pc, #16]	@ (8001ea4 <MX_TIM16_Init+0x44>)
 8001e92:	f007 fbfd 	bl	8009690 <HAL_TIM_Base_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001e9c:	f001 fb30 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000944 	.word	0x20000944
 8001ea8:	40014400 	.word	0x40014400

08001eac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001eb0:	4b22      	ldr	r3, [pc, #136]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001eb2:	4a23      	ldr	r2, [pc, #140]	@ (8001f40 <MX_UART4_Init+0x94>)
 8001eb4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001eb6:	4b21      	ldr	r3, [pc, #132]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001eb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ebc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001edc:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eee:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ef4:	4811      	ldr	r0, [pc, #68]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001ef6:	f009 f855 	bl	800afa4 <HAL_UART_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001f00:	f001 fafe 	bl	8003500 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f04:	2100      	movs	r1, #0
 8001f06:	480d      	ldr	r0, [pc, #52]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001f08:	f009 fdf0 	bl	800baec <HAL_UARTEx_SetTxFifoThreshold>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001f12:	f001 faf5 	bl	8003500 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f16:	2100      	movs	r1, #0
 8001f18:	4808      	ldr	r0, [pc, #32]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001f1a:	f009 fe25 	bl	800bb68 <HAL_UARTEx_SetRxFifoThreshold>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001f24:	f001 faec 	bl	8003500 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	@ (8001f3c <MX_UART4_Init+0x90>)
 8001f2a:	f009 fda6 	bl	800ba7a <HAL_UARTEx_DisableFifoMode>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001f34:	f001 fae4 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000990 	.word	0x20000990
 8001f40:	40004c00 	.word	0x40004c00

08001f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f4a:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <MX_DMA_Init+0x90>)
 8001f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f4e:	4a21      	ldr	r2, [pc, #132]	@ (8001fd4 <MX_DMA_Init+0x90>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f56:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd4 <MX_DMA_Init+0x90>)
 8001f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f62:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd4 <MX_DMA_Init+0x90>)
 8001f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f66:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd4 <MX_DMA_Init+0x90>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f6e:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <MX_DMA_Init+0x90>)
 8001f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	200b      	movs	r0, #11
 8001f80:	f003 fecf 	bl	8005d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f84:	200b      	movs	r0, #11
 8001f86:	f003 fee6 	bl	8005d56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	200c      	movs	r0, #12
 8001f90:	f003 fec7 	bl	8005d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f94:	200c      	movs	r0, #12
 8001f96:	f003 fede 	bl	8005d56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	200d      	movs	r0, #13
 8001fa0:	f003 febf 	bl	8005d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001fa4:	200d      	movs	r0, #13
 8001fa6:	f003 fed6 	bl	8005d56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	200e      	movs	r0, #14
 8001fb0:	f003 feb7 	bl	8005d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001fb4:	200e      	movs	r0, #14
 8001fb6:	f003 fece 	bl	8005d56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	200f      	movs	r0, #15
 8001fc0:	f003 feaf 	bl	8005d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001fc4:	200f      	movs	r0, #15
 8001fc6:	f003 fec6 	bl	8005d56 <HAL_NVIC_EnableIRQ>

}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	@ 0x30
 8001fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fde:	f107 031c 	add.w	r3, r7, #28
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fee:	4b9a      	ldr	r3, [pc, #616]	@ (8002258 <MX_GPIO_Init+0x280>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff2:	4a99      	ldr	r2, [pc, #612]	@ (8002258 <MX_GPIO_Init+0x280>)
 8001ff4:	f043 0310 	orr.w	r3, r3, #16
 8001ff8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ffa:	4b97      	ldr	r3, [pc, #604]	@ (8002258 <MX_GPIO_Init+0x280>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002006:	4b94      	ldr	r3, [pc, #592]	@ (8002258 <MX_GPIO_Init+0x280>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200a:	4a93      	ldr	r2, [pc, #588]	@ (8002258 <MX_GPIO_Init+0x280>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002012:	4b91      	ldr	r3, [pc, #580]	@ (8002258 <MX_GPIO_Init+0x280>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800201e:	4b8e      	ldr	r3, [pc, #568]	@ (8002258 <MX_GPIO_Init+0x280>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002022:	4a8d      	ldr	r2, [pc, #564]	@ (8002258 <MX_GPIO_Init+0x280>)
 8002024:	f043 0320 	orr.w	r3, r3, #32
 8002028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800202a:	4b8b      	ldr	r3, [pc, #556]	@ (8002258 <MX_GPIO_Init+0x280>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002036:	4b88      	ldr	r3, [pc, #544]	@ (8002258 <MX_GPIO_Init+0x280>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203a:	4a87      	ldr	r2, [pc, #540]	@ (8002258 <MX_GPIO_Init+0x280>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002042:	4b85      	ldr	r3, [pc, #532]	@ (8002258 <MX_GPIO_Init+0x280>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800204e:	4b82      	ldr	r3, [pc, #520]	@ (8002258 <MX_GPIO_Init+0x280>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002052:	4a81      	ldr	r2, [pc, #516]	@ (8002258 <MX_GPIO_Init+0x280>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800205a:	4b7f      	ldr	r3, [pc, #508]	@ (8002258 <MX_GPIO_Init+0x280>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002066:	4b7c      	ldr	r3, [pc, #496]	@ (8002258 <MX_GPIO_Init+0x280>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206a:	4a7b      	ldr	r2, [pc, #492]	@ (8002258 <MX_GPIO_Init+0x280>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002072:	4b79      	ldr	r3, [pc, #484]	@ (8002258 <MX_GPIO_Init+0x280>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 800207e:	2200      	movs	r2, #0
 8002080:	2120      	movs	r1, #32
 8002082:	4876      	ldr	r0, [pc, #472]	@ (800225c <MX_GPIO_Init+0x284>)
 8002084:	f004 fd6c 	bl	8006b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
 8002088:	2201      	movs	r2, #1
 800208a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800208e:	4874      	ldr	r0, [pc, #464]	@ (8002260 <MX_GPIO_Init+0x288>)
 8002090:	f004 fd66 	bl	8006b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	2104      	movs	r1, #4
 8002098:	4871      	ldr	r0, [pc, #452]	@ (8002260 <MX_GPIO_Init+0x288>)
 800209a:	f004 fd61 	bl	8006b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 800209e:	2200      	movs	r2, #0
 80020a0:	2120      	movs	r1, #32
 80020a2:	4870      	ldr	r0, [pc, #448]	@ (8002264 <MX_GPIO_Init+0x28c>)
 80020a4:	f004 fd5c 	bl	8006b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_RST_2_Pin|CS_OCD_1_Pin, GPIO_PIN_SET);
 80020a8:	2201      	movs	r2, #1
 80020aa:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80020ae:	486b      	ldr	r0, [pc, #428]	@ (800225c <MX_GPIO_Init+0x284>)
 80020b0:	f004 fd56 	bl	8006b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port, NOT_RST_4_Pin, GPIO_PIN_SET);
 80020b4:	2201      	movs	r2, #1
 80020b6:	2140      	movs	r1, #64	@ 0x40
 80020b8:	486a      	ldr	r0, [pc, #424]	@ (8002264 <MX_GPIO_Init+0x28c>)
 80020ba:	f004 fd51 	bl	8006b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port, NOT_RST_3_Pin, GPIO_PIN_SET);
 80020be:	2201      	movs	r2, #1
 80020c0:	2101      	movs	r1, #1
 80020c2:	4869      	ldr	r0, [pc, #420]	@ (8002268 <MX_GPIO_Init+0x290>)
 80020c4:	f004 fd4c 	bl	8006b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port, NOT_RST_1_Pin, GPIO_PIN_SET);
 80020c8:	2201      	movs	r2, #1
 80020ca:	2180      	movs	r1, #128	@ 0x80
 80020cc:	4867      	ldr	r0, [pc, #412]	@ (800226c <MX_GPIO_Init+0x294>)
 80020ce:	f004 fd47 	bl	8006b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NOT_FAULT_1_Pin CS_FAULT_2_Pin NOT_FAULT_2_Pin CS_FAULT_1_Pin */
  GPIO_InitStruct.Pin = NOT_FAULT_1_Pin|CS_FAULT_2_Pin|NOT_FAULT_2_Pin|CS_FAULT_1_Pin;
 80020d2:	f640 0315 	movw	r3, #2069	@ 0x815
 80020d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	4619      	mov	r1, r3
 80020e6:	485d      	ldr	r0, [pc, #372]	@ (800225c <MX_GPIO_Init+0x284>)
 80020e8:	f004 fba0 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_INTERLOCK_Pin */
  GPIO_InitStruct.Pin = RESET_INTERLOCK_Pin;
 80020ec:	2320      	movs	r3, #32
 80020ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f0:	2301      	movs	r3, #1
 80020f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	4619      	mov	r1, r3
 8002102:	4856      	ldr	r0, [pc, #344]	@ (800225c <MX_GPIO_Init+0x284>)
 8002104:	f004 fb92 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_OCD_2_Pin */
  GPIO_InitStruct.Pin = CS_OCD_2_Pin;
 8002108:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800210c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800210e:	2311      	movs	r3, #17
 8002110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_OCD_2_GPIO_Port, &GPIO_InitStruct);
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	4619      	mov	r1, r3
 8002120:	484f      	ldr	r0, [pc, #316]	@ (8002260 <MX_GPIO_Init+0x288>)
 8002122:	f004 fb83 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_3_Pin */
  GPIO_InitStruct.Pin = READY_3_Pin;
 8002126:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800212a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_3_GPIO_Port, &GPIO_InitStruct);
 8002134:	f107 031c 	add.w	r3, r7, #28
 8002138:	4619      	mov	r1, r3
 800213a:	4849      	ldr	r0, [pc, #292]	@ (8002260 <MX_GPIO_Init+0x288>)
 800213c:	f004 fb76 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERLOCK_Pin NOT_FAULT_4_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin|NOT_FAULT_4_Pin;
 8002140:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214e:	f107 031c 	add.w	r3, r7, #28
 8002152:	4619      	mov	r1, r3
 8002154:	4843      	ldr	r0, [pc, #268]	@ (8002264 <MX_GPIO_Init+0x28c>)
 8002156:	f004 fb69 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_FPGA_Pin */
  GPIO_InitStruct.Pin = RESET_FPGA_Pin;
 800215a:	2304      	movs	r3, #4
 800215c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215e:	2301      	movs	r3, #1
 8002160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2300      	movs	r3, #0
 8002168:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_FPGA_GPIO_Port, &GPIO_InitStruct);
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	4619      	mov	r1, r3
 8002170:	483b      	ldr	r0, [pc, #236]	@ (8002260 <MX_GPIO_Init+0x288>)
 8002172:	f004 fb5b 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pin : START_STOP_FPGA_Pin */
  GPIO_InitStruct.Pin = START_STOP_FPGA_Pin;
 8002176:	2320      	movs	r3, #32
 8002178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217a:	2301      	movs	r3, #1
 800217c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(START_STOP_FPGA_GPIO_Port, &GPIO_InitStruct);
 8002186:	f107 031c 	add.w	r3, r7, #28
 800218a:	4619      	mov	r1, r3
 800218c:	4835      	ldr	r0, [pc, #212]	@ (8002264 <MX_GPIO_Init+0x28c>)
 800218e:	f004 fb4d 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_2_Pin */
  GPIO_InitStruct.Pin = READY_2_Pin;
 8002192:	2301      	movs	r3, #1
 8002194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002196:	2300      	movs	r3, #0
 8002198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_2_GPIO_Port, &GPIO_InitStruct);
 800219e:	f107 031c 	add.w	r3, r7, #28
 80021a2:	4619      	mov	r1, r3
 80021a4:	4831      	ldr	r0, [pc, #196]	@ (800226c <MX_GPIO_Init+0x294>)
 80021a6:	f004 fb41 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pins : NOT_RST_2_Pin CS_OCD_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_2_Pin|CS_OCD_1_Pin;
 80021aa:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80021ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021b0:	2311      	movs	r3, #17
 80021b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	4619      	mov	r1, r3
 80021c2:	4826      	ldr	r0, [pc, #152]	@ (800225c <MX_GPIO_Init+0x284>)
 80021c4:	f004 fb32 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_4_Pin */
  GPIO_InitStruct.Pin = NOT_RST_4_Pin;
 80021c8:	2340      	movs	r3, #64	@ 0x40
 80021ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021cc:	2311      	movs	r3, #17
 80021ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_4_GPIO_Port, &GPIO_InitStruct);
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	4619      	mov	r1, r3
 80021de:	4821      	ldr	r0, [pc, #132]	@ (8002264 <MX_GPIO_Init+0x28c>)
 80021e0:	f004 fb24 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_4_Pin */
  GPIO_InitStruct.Pin = READY_4_Pin;
 80021e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_4_GPIO_Port, &GPIO_InitStruct);
 80021f2:	f107 031c 	add.w	r3, r7, #28
 80021f6:	4619      	mov	r1, r3
 80021f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021fc:	f004 fb16 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_3_Pin */
  GPIO_InitStruct.Pin = NOT_RST_3_Pin;
 8002200:	2301      	movs	r3, #1
 8002202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002204:	2311      	movs	r3, #17
 8002206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_3_GPIO_Port, &GPIO_InitStruct);
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	4619      	mov	r1, r3
 8002216:	4814      	ldr	r0, [pc, #80]	@ (8002268 <MX_GPIO_Init+0x290>)
 8002218:	f004 fb08 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_1_Pin PD5 NOT_FAULT_3_Pin */
  GPIO_InitStruct.Pin = READY_1_Pin|GPIO_PIN_5|NOT_FAULT_3_Pin;
 800221c:	2370      	movs	r3, #112	@ 0x70
 800221e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002228:	f107 031c 	add.w	r3, r7, #28
 800222c:	4619      	mov	r1, r3
 800222e:	480e      	ldr	r0, [pc, #56]	@ (8002268 <MX_GPIO_Init+0x290>)
 8002230:	f004 fafc 	bl	800682c <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_1_Pin;
 8002234:	2380      	movs	r3, #128	@ 0x80
 8002236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002238:	2311      	movs	r3, #17
 800223a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_1_GPIO_Port, &GPIO_InitStruct);
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	4619      	mov	r1, r3
 800224a:	4808      	ldr	r0, [pc, #32]	@ (800226c <MX_GPIO_Init+0x294>)
 800224c:	f004 faee 	bl	800682c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002250:	bf00      	nop
 8002252:	3730      	adds	r7, #48	@ 0x30
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	48001000 	.word	0x48001000
 8002260:	48001400 	.word	0x48001400
 8002264:	48000800 	.word	0x48000800
 8002268:	48000c00 	.word	0x48000c00
 800226c:	48000400 	.word	0x48000400

08002270 <handle_event>:

/* USER CODE BEGIN 4 */

ConverterState handle_event(ConverterState currentState, ConverterEvent event) {
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	460a      	mov	r2, r1
 800227a:	71fb      	strb	r3, [r7, #7]
 800227c:	4613      	mov	r3, r2
 800227e:	71bb      	strb	r3, [r7, #6]
    switch (currentState) {
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	2b05      	cmp	r3, #5
 8002284:	d851      	bhi.n	800232a <handle_event+0xba>
 8002286:	a201      	add	r2, pc, #4	@ (adr r2, 800228c <handle_event+0x1c>)
 8002288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228c:	080022a5 	.word	0x080022a5
 8002290:	080022b3 	.word	0x080022b3
 8002294:	080022c1 	.word	0x080022c1
 8002298:	080022ed 	.word	0x080022ed
 800229c:	08002309 	.word	0x08002309
 80022a0:	08002317 	.word	0x08002317
        case STATE_INIT:
            if (event == EVENT_START)
 80022a4:	79bb      	ldrb	r3, [r7, #6]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d141      	bne.n	800232e <handle_event+0xbe>
            {
            	currentState = STATE_SOFT_START;
 80022aa:	2302      	movs	r3, #2
 80022ac:	71fb      	strb	r3, [r7, #7]
                return STATE_SOFT_START;
 80022ae:	2302      	movs	r3, #2
 80022b0:	e049      	b.n	8002346 <handle_event+0xd6>
            }
            break;

        case STATE_STANDBY:
            if (event == EVENT_START)
 80022b2:	79bb      	ldrb	r3, [r7, #6]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d13c      	bne.n	8002332 <handle_event+0xc2>
            {
            	currentState = STATE_SOFT_START;
 80022b8:	2302      	movs	r3, #2
 80022ba:	71fb      	strb	r3, [r7, #7]
                return STATE_SOFT_START;
 80022bc:	2302      	movs	r3, #2
 80022be:	e042      	b.n	8002346 <handle_event+0xd6>
            }
            break;

        case STATE_SOFT_START:
            if (event == EVENT_FAULT)
 80022c0:	79bb      	ldrb	r3, [r7, #6]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d103      	bne.n	80022ce <handle_event+0x5e>
            {
            	currentState = STATE_FAULT;
 80022c6:	2304      	movs	r3, #4
 80022c8:	71fb      	strb	r3, [r7, #7]
                return STATE_FAULT;
 80022ca:	2304      	movs	r3, #4
 80022cc:	e03b      	b.n	8002346 <handle_event+0xd6>

            } else if (RAMP_FINISHED)
 80022ce:	4b21      	ldr	r3, [pc, #132]	@ (8002354 <handle_event+0xe4>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <handle_event+0x6e>
            {
            	//RAMP_FINISHED = 0;
            	currentState = STATE_REGULATION;
 80022d6:	2303      	movs	r3, #3
 80022d8:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 80022da:	2303      	movs	r3, #3
 80022dc:	e033      	b.n	8002346 <handle_event+0xd6>
            }else if (event == EVENT_SHUTDOWN)
 80022de:	79bb      	ldrb	r3, [r7, #6]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d128      	bne.n	8002336 <handle_event+0xc6>
            {
            	currentState = STATE_SHUTDOWN;
 80022e4:	2305      	movs	r3, #5
 80022e6:	71fb      	strb	r3, [r7, #7]
                return STATE_SHUTDOWN;
 80022e8:	2305      	movs	r3, #5
 80022ea:	e02c      	b.n	8002346 <handle_event+0xd6>

            break;

        case STATE_REGULATION:
        	//USB_SendString("State: INIT -> RUNNING\r\n");
            if (event == EVENT_FAULT)
 80022ec:	79bb      	ldrb	r3, [r7, #6]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d103      	bne.n	80022fa <handle_event+0x8a>
            {
            	currentState = STATE_FAULT;
 80022f2:	2304      	movs	r3, #4
 80022f4:	71fb      	strb	r3, [r7, #7]
                return STATE_FAULT;
 80022f6:	2304      	movs	r3, #4
 80022f8:	e025      	b.n	8002346 <handle_event+0xd6>

            } else if (event == EVENT_SHUTDOWN)
 80022fa:	79bb      	ldrb	r3, [r7, #6]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d11c      	bne.n	800233a <handle_event+0xca>
            {
            	currentState = STATE_SHUTDOWN;
 8002300:	2305      	movs	r3, #5
 8002302:	71fb      	strb	r3, [r7, #7]
                return STATE_SHUTDOWN;
 8002304:	2305      	movs	r3, #5
 8002306:	e01e      	b.n	8002346 <handle_event+0xd6>
            }

            break;

        case STATE_FAULT:
            if (event == EVENT_CLEAR_FAULT)
 8002308:	79bb      	ldrb	r3, [r7, #6]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d117      	bne.n	800233e <handle_event+0xce>
            {
            	currentState = STATE_STANDBY;
 800230e:	2301      	movs	r3, #1
 8002310:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 8002312:	2301      	movs	r3, #1
 8002314:	e017      	b.n	8002346 <handle_event+0xd6>
            }
            break;

        case STATE_SHUTDOWN:
            if (event == EVENT_START)
 8002316:	79bb      	ldrb	r3, [r7, #6]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d112      	bne.n	8002342 <handle_event+0xd2>
            {
            	once = 0;
 800231c:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <handle_event+0xe8>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
            	currentState = STATE_SOFT_START;
 8002322:	2302      	movs	r3, #2
 8002324:	71fb      	strb	r3, [r7, #7]
                return STATE_SOFT_START;
 8002326:	2302      	movs	r3, #2
 8002328:	e00d      	b.n	8002346 <handle_event+0xd6>
            }
            break;
        default:
            break;
 800232a:	bf00      	nop
 800232c:	e00a      	b.n	8002344 <handle_event+0xd4>
            break;
 800232e:	bf00      	nop
 8002330:	e008      	b.n	8002344 <handle_event+0xd4>
            break;
 8002332:	bf00      	nop
 8002334:	e006      	b.n	8002344 <handle_event+0xd4>
            break;
 8002336:	bf00      	nop
 8002338:	e004      	b.n	8002344 <handle_event+0xd4>
            break;
 800233a:	bf00      	nop
 800233c:	e002      	b.n	8002344 <handle_event+0xd4>
            break;
 800233e:	bf00      	nop
 8002340:	e000      	b.n	8002344 <handle_event+0xd4>
            break;
 8002342:	bf00      	nop
    }
    return currentState; // No state change
 8002344:	79fb      	ldrb	r3, [r7, #7]
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000a58 	.word	0x20000a58
 8002358:	20000b54 	.word	0x20000b54

0800235c <Set_PWM_DutyCycle>:
       // float TEMPERATURE_AFTER_CONVERSION_FROM_ADC = (((adc_value/4096.0f)*3.3f) - 0.4f)/0.0195f;
       // return TEMPERATURE_AFTER_CONVERSION_FROM_ADC;

}

void Set_PWM_DutyCycle(uint32_t dutyCycle) { // dutycyle for FAN SPEED CONTROl
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
    if (dutyCycle > 100) dutyCycle = 100;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b64      	cmp	r3, #100	@ 0x64
 8002368:	d901      	bls.n	800236e <Set_PWM_DutyCycle+0x12>
 800236a:	2364      	movs	r3, #100	@ 0x64
 800236c:	607b      	str	r3, [r7, #4]
    uint32_t pulse = (htim4.Init.Period + 1) * dutyCycle / 100 - 1;
 800236e:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <Set_PWM_DutyCycle+0x40>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	3301      	adds	r3, #1
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	4a09      	ldr	r2, [pc, #36]	@ (80023a0 <Set_PWM_DutyCycle+0x44>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	3b01      	subs	r3, #1
 8002384:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 8002386:	4b05      	ldr	r3, [pc, #20]	@ (800239c <Set_PWM_DutyCycle+0x40>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	200007c8 	.word	0x200007c8
 80023a0:	51eb851f 	.word	0x51eb851f
 80023a4:	00000000 	.word	0x00000000

080023a8 <HAL_ADC_ConvCpltCallback>:
//ADC save to array and moving average
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC5)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a20      	ldr	r2, [pc, #128]	@ (8002438 <HAL_ADC_ConvCpltCallback+0x90>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d135      	bne.n	8002426 <HAL_ADC_ConvCpltCallback+0x7e>
		    {
		        uint32_t sum = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	e00b      	b.n	80023dc <HAL_ADC_ConvCpltCallback+0x34>
		        {
		            sum += adc5_dma_buffer[i];
 80023c4:	4a1d      	ldr	r2, [pc, #116]	@ (800243c <HAL_ADC_ConvCpltCallback+0x94>)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	3301      	adds	r3, #1
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b09      	cmp	r3, #9
 80023e0:	ddf0      	ble.n	80023c4 <HAL_ADC_ConvCpltCallback+0x1c>
		        }
		        adc_moving_average = ((sum / MA_WINDOW_SIZE)*3300)/4096;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a16      	ldr	r2, [pc, #88]	@ (8002440 <HAL_ADC_ConvCpltCallback+0x98>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	08db      	lsrs	r3, r3, #3
 80023ec:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80023f0:	fb02 f303 	mul.w	r3, r2, r3
 80023f4:	0b1b      	lsrs	r3, r3, #12
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	4b12      	ldr	r3, [pc, #72]	@ (8002444 <HAL_ADC_ConvCpltCallback+0x9c>)
 80023fa:	801a      	strh	r2, [r3, #0]
		        imax2_sum=(adc_moving_average-1450)*0.384;
 80023fc:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <HAL_ADC_ConvCpltCallback+0x9c>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	f2a3 53aa 	subw	r3, r3, #1450	@ 0x5aa
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f8b5 	bl	8000574 <__aeabi_i2d>
 800240a:	a309      	add	r3, pc, #36	@ (adr r3, 8002430 <HAL_ADC_ConvCpltCallback+0x88>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	f7fe f91a 	bl	8000648 <__aeabi_dmul>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	f7fe fbec 	bl	8000bf8 <__aeabi_d2uiz>
 8002420:	4603      	mov	r3, r0
 8002422:	4a09      	ldr	r2, [pc, #36]	@ (8002448 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002424:	6013      	str	r3, [r2, #0]
		        // Restart the DMA transfer
		       // HAL_ADC_Start_DMA(hadc, (uint32_t*)adc5_dma_buffer, MA_WINDOW_SIZE);
		    }


}
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	bc6a7efa 	.word	0xbc6a7efa
 8002434:	3fd89374 	.word	0x3fd89374
 8002438:	50000600 	.word	0x50000600
 800243c:	20000a68 	.word	0x20000a68
 8002440:	cccccccd 	.word	0xcccccccd
 8002444:	20000a7c 	.word	0x20000a7c
 8002448:	20000a64 	.word	0x20000a64

0800244c <Update_PWM_Frequency>:
        }
    }
}

void Update_PWM_Frequency(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	@ 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
	 uint32_t timer_clock = 150000000;  // Assuming a 150 MHz timer clock
 8002458:	4b33      	ldr	r3, [pc, #204]	@ (8002528 <Update_PWM_Frequency+0xdc>)
 800245a:	61bb      	str	r3, [r7, #24]
	    uint32_t prescaler = htim->Init.Prescaler + 1;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	3301      	adds	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
	    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	fb02 f303 	mul.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	61fb      	str	r3, [r7, #28]

	    // Ensure period is within valid range
	    if (period > 65535) {
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800247c:	d314      	bcc.n	80024a8 <Update_PWM_Frequency+0x5c>
	        // Adjust prescaler to bring period within range
	        prescaler = (prescaler * (period / 65536)) + 1;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	0c1b      	lsrs	r3, r3, #16
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	fb02 f303 	mul.w	r3, r2, r3
 8002488:	3301      	adds	r3, #1
 800248a:	617b      	str	r3, [r7, #20]
	        period = (timer_clock / (prescaler * frequency)) - 1;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	fb02 f303 	mul.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	61fb      	str	r3, [r7, #28]
	        __HAL_TIM_SET_PRESCALER(htim, prescaler - 1);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	3a01      	subs	r2, #1
 80024a6:	629a      	str	r2, [r3, #40]	@ 0x28
	    }

	    // Update the period register (ARR) with double buffering
	    __HAL_TIM_SET_AUTORELOAD(htim, period);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	60da      	str	r2, [r3, #12]

	    // Set the duty cycle to approximately 50%
	    uint32_t pulse = period / 2;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	613b      	str	r3, [r7, #16]
	    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d104      	bne.n	80024cc <Update_PWM_Frequency+0x80>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80024ca:	e023      	b.n	8002514 <Update_PWM_Frequency+0xc8>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d104      	bne.n	80024dc <Update_PWM_Frequency+0x90>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	6393      	str	r3, [r2, #56]	@ 0x38
 80024da:	e01b      	b.n	8002514 <Update_PWM_Frequency+0xc8>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d104      	bne.n	80024ec <Update_PWM_Frequency+0xa0>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80024ea:	e013      	b.n	8002514 <Update_PWM_Frequency+0xc8>
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b0c      	cmp	r3, #12
 80024f0:	d104      	bne.n	80024fc <Update_PWM_Frequency+0xb0>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024fa:	e00b      	b.n	8002514 <Update_PWM_Frequency+0xc8>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b10      	cmp	r3, #16
 8002500:	d104      	bne.n	800250c <Update_PWM_Frequency+0xc0>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	6493      	str	r3, [r2, #72]	@ 0x48
 800250a:	e003      	b.n	8002514 <Update_PWM_Frequency+0xc8>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	64d3      	str	r3, [r2, #76]	@ 0x4c

	    // Manually generate an update event by setting the UG bit in the EGR register
	    htim->Instance->EGR = TIM_EGR_UG;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2201      	movs	r2, #1
 800251a:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_AUTORELOAD(htim, period);

    // Restart the timer PWM generation
    HAL_TIM_PWM_Stop(htim, channel);
    HAL_TIM_PWM_Start(htim, channel);*/
}
 800251c:	bf00      	nop
 800251e:	3724      	adds	r7, #36	@ 0x24
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	08f0d180 	.word	0x08f0d180

0800252c <Check_Faults>:
	        dac_buffer[i] = (((1/3.3)*res12_b) + ((0.5/3.3)*res12_b) * sin(2 * M_PI * i/BUFFER_SIZE));
	    }
}

uint8_t Check_Faults()
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	// Faults pins are from gate driver and they are active pull down
	// 4 fault pins from 4 gate driver + 2 fault pins from  2 currents sensors  = 6 pins
	if(HAL_GPIO_ReadPin(CS_FAULT_1_GPIO_Port, CS_FAULT_1_Pin) && HAL_GPIO_ReadPin(CS_FAULT_2_GPIO_Port, CS_FAULT_2_Pin)
 8002530:	2101      	movs	r1, #1
 8002532:	4818      	ldr	r0, [pc, #96]	@ (8002594 <Check_Faults+0x68>)
 8002534:	f004 fafc 	bl	8006b30 <HAL_GPIO_ReadPin>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d026      	beq.n	800258c <Check_Faults+0x60>
 800253e:	2110      	movs	r1, #16
 8002540:	4814      	ldr	r0, [pc, #80]	@ (8002594 <Check_Faults+0x68>)
 8002542:	f004 faf5 	bl	8006b30 <HAL_GPIO_ReadPin>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01f      	beq.n	800258c <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_1_GPIO_Port, NOT_FAULT_1_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_2_GPIO_Port, NOT_FAULT_2_Pin)
 800254c:	2104      	movs	r1, #4
 800254e:	4811      	ldr	r0, [pc, #68]	@ (8002594 <Check_Faults+0x68>)
 8002550:	f004 faee 	bl	8006b30 <HAL_GPIO_ReadPin>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d018      	beq.n	800258c <Check_Faults+0x60>
 800255a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800255e:	480d      	ldr	r0, [pc, #52]	@ (8002594 <Check_Faults+0x68>)
 8002560:	f004 fae6 	bl	8006b30 <HAL_GPIO_ReadPin>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_3_GPIO_Port, NOT_FAULT_3_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_4_GPIO_Port, NOT_FAULT_4_Pin) )
 800256a:	2140      	movs	r1, #64	@ 0x40
 800256c:	480a      	ldr	r0, [pc, #40]	@ (8002598 <Check_Faults+0x6c>)
 800256e:	f004 fadf 	bl	8006b30 <HAL_GPIO_ReadPin>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d009      	beq.n	800258c <Check_Faults+0x60>
 8002578:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800257c:	4807      	ldr	r0, [pc, #28]	@ (800259c <Check_Faults+0x70>)
 800257e:	f004 fad7 	bl	8006b30 <HAL_GPIO_ReadPin>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <Check_Faults+0x60>
		return 0; // if all pins is 1 then all is ready, there is not faults then return 0
 8002588:	2300      	movs	r3, #0
 800258a:	e000      	b.n	800258e <Check_Faults+0x62>

	return 1;
 800258c:	2301      	movs	r3, #1
}
 800258e:	4618      	mov	r0, r3
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	48001000 	.word	0x48001000
 8002598:	48000c00 	.word	0x48000c00
 800259c:	48000800 	.word	0x48000800

080025a0 <Check_Ready>:

uint8_t Check_Ready()
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	// Ready pins are from gate driver and they are active pull up
	// 4 ready pins from 4 gate drivers
	if(HAL_GPIO_ReadPin(READY_1_GPIO_Port, READY_1_Pin) && HAL_GPIO_ReadPin(READY_2_GPIO_Port, READY_2_Pin)
 80025a4:	2110      	movs	r1, #16
 80025a6:	4811      	ldr	r0, [pc, #68]	@ (80025ec <Check_Ready+0x4c>)
 80025a8:	f004 fac2 	bl	8006b30 <HAL_GPIO_ReadPin>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d019      	beq.n	80025e6 <Check_Ready+0x46>
 80025b2:	2101      	movs	r1, #1
 80025b4:	480e      	ldr	r0, [pc, #56]	@ (80025f0 <Check_Ready+0x50>)
 80025b6:	f004 fabb 	bl	8006b30 <HAL_GPIO_ReadPin>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d012      	beq.n	80025e6 <Check_Ready+0x46>
			&& HAL_GPIO_ReadPin(READY_3_GPIO_Port, READY_3_Pin) && HAL_GPIO_ReadPin(READY_4_GPIO_Port, READY_4_Pin) )
 80025c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025c4:	480b      	ldr	r0, [pc, #44]	@ (80025f4 <Check_Ready+0x54>)
 80025c6:	f004 fab3 	bl	8006b30 <HAL_GPIO_ReadPin>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <Check_Ready+0x46>
 80025d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025d8:	f004 faaa 	bl	8006b30 <HAL_GPIO_ReadPin>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <Check_Ready+0x46>
			return 1; // return 1 when is gate drivers ready
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <Check_Ready+0x48>

		return 0;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	48000c00 	.word	0x48000c00
 80025f0:	48000400 	.word	0x48000400
 80025f4:	48001400 	.word	0x48001400

080025f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80025f8:	b5b0      	push	{r4, r5, r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	// SOFT start_program RAMP REALISATION
	//  Ts 20khz
	if(htim->Instance == TIM15)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a72      	ldr	r2, [pc, #456]	@ (80027d0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	f040 8258 	bne.w	8002abc <HAL_TIM_PeriodElapsedCallback+0x4c4>
	{
		sythick1 =  HAL_GetTick();
 800260c:	f001 fde0 	bl	80041d0 <HAL_GetTick>
 8002610:	4603      	mov	r3, r0
 8002612:	4a70      	ldr	r2, [pc, #448]	@ (80027d4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002614:	6013      	str	r3, [r2, #0]
		if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
 8002616:	4b70      	ldr	r3, [pc, #448]	@ (80027d8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d004      	beq.n	8002628 <HAL_TIM_PeriodElapsedCallback+0x30>
 800261e:	4b6e      	ldr	r3, [pc, #440]	@ (80027d8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b03      	cmp	r3, #3
 8002624:	f040 8236 	bne.w	8002a94 <HAL_TIM_PeriodElapsedCallback+0x49c>
		{
		//current_sensor1_vref = adc3_dma_buffer[0]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[0], pcb_temp)/4096)*3.3;
		//current_sensor2_vref = adc3_dma_buffer[1]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[1], pcb_temp)/4096)*3.3;

		input_voltage = (int)((((adc3_dma_buffer[2])*3300)/4096-200)*18.81);//[mV]		((Low_pass_filter(adc3_dma_buffer[2], input_voltage)/4096)*3.3-0.2)*27.1;
 8002628:	4b6c      	ldr	r3, [pc, #432]	@ (80027dc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800262a:	889b      	ldrh	r3, [r3, #4]
 800262c:	b29b      	uxth	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002634:	fb02 f303 	mul.w	r3, r2, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	da01      	bge.n	8002640 <HAL_TIM_PeriodElapsedCallback+0x48>
 800263c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002640:	131b      	asrs	r3, r3, #12
 8002642:	3bc8      	subs	r3, #200	@ 0xc8
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd ff95 	bl	8000574 <__aeabi_i2d>
 800264a:	a35b      	add	r3, pc, #364	@ (adr r3, 80027b8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	f7fd fffa 	bl	8000648 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe faa4 	bl	8000ba8 <__aeabi_d2iz>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	4b5e      	ldr	r3, [pc, #376]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002666:	601a      	str	r2, [r3, #0]
		output_voltage = (int)((((adc4_dma_buffer[1])*3300)/4096-200)*18.81);//[mV] 		((Low_pass_filter(adc4_dma_buffer, output_voltage)/4096)*3.3-0.2)*27.1;
 8002668:	4b5e      	ldr	r3, [pc, #376]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800266a:	885b      	ldrh	r3, [r3, #2]
 800266c:	b29b      	uxth	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002674:	fb02 f303 	mul.w	r3, r2, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	da01      	bge.n	8002680 <HAL_TIM_PeriodElapsedCallback+0x88>
 800267c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002680:	131b      	asrs	r3, r3, #12
 8002682:	3bc8      	subs	r3, #200	@ 0xc8
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd ff75 	bl	8000574 <__aeabi_i2d>
 800268a:	a34b      	add	r3, pc, #300	@ (adr r3, 80027b8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	f7fd ffda 	bl	8000648 <__aeabi_dmul>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f7fe fa84 	bl	8000ba8 <__aeabi_d2iz>
 80026a0:	4603      	mov	r3, r0
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b50      	ldr	r3, [pc, #320]	@ (80027e8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80026a6:	601a      	str	r2, [r3, #0]

		//imax2_sum = //(adc_moving_average-1450)*0.384; //[mA] 0.20V - -0.5A || 1.45v - 0A || 2.77V - 0.5A		0.384 A/V
		Gv = (float)output_voltage/(float)input_voltage;//output_voltage/input_voltage;
 80026a8:	4b4f      	ldr	r3, [pc, #316]	@ (80027e8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	ee07 3a90 	vmov	s15, r3
 80026b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b4:	4b4a      	ldr	r3, [pc, #296]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026c4:	4b49      	ldr	r3, [pc, #292]	@ (80027ec <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80026c6:	edc3 7a00 	vstr	s15, [r3]

		if(Gv<2) //CZARY
 80026ca:	4b48      	ldr	r3, [pc, #288]	@ (80027ec <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80026cc:	edd3 7a00 	vldr	s15, [r3]
 80026d0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80026d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026dc:	f140 808e 	bpl.w	80027fc <HAL_TIM_PeriodElapsedCallback+0x204>
		{
			delay_tr = acos(1-Gv)/wr;
 80026e0:	4b42      	ldr	r3, [pc, #264]	@ (80027ec <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80026ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ee:	ee17 0a90 	vmov	r0, s15
 80026f2:	f7fd ff51 	bl	8000598 <__aeabi_f2d>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	ec43 2b10 	vmov	d0, r2, r3
 80026fe:	f012 ff33 	bl	8015568 <acos>
 8002702:	ec51 0b10 	vmov	r0, r1, d0
 8002706:	a32e      	add	r3, pc, #184	@ (adr r3, 80027c0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270c:	f7fe f8c6 	bl	800089c <__aeabi_ddiv>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	f7fe fa8e 	bl	8000c38 <__aeabi_d2f>
 800271c:	4603      	mov	r3, r0
 800271e:	4a34      	ldr	r2, [pc, #208]	@ (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002720:	6013      	str	r3, [r2, #0]
			imin = (int)(Imin_Factor*output_voltage*sqrt((2-Gv)/Gv)/Z); //[mA] Negative current needed to Zero voltage switching in resonance
 8002722:	4b31      	ldr	r3, [pc, #196]	@ (80027e8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	ee07 3a90 	vmov	s15, r3
 800272a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800272e:	4b31      	ldr	r3, [pc, #196]	@ (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002738:	ee17 0a90 	vmov	r0, s15
 800273c:	f7fd ff2c 	bl	8000598 <__aeabi_f2d>
 8002740:	4604      	mov	r4, r0
 8002742:	460d      	mov	r5, r1
 8002744:	4b29      	ldr	r3, [pc, #164]	@ (80027ec <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002746:	edd3 7a00 	vldr	s15, [r3]
 800274a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800274e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002752:	4b26      	ldr	r3, [pc, #152]	@ (80027ec <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800275c:	ee16 0a90 	vmov	r0, s13
 8002760:	f7fd ff1a 	bl	8000598 <__aeabi_f2d>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	ec43 2b10 	vmov	d0, r2, r3
 800276c:	f012 ffa0 	bl	80156b0 <sqrt>
 8002770:	ec53 2b10 	vmov	r2, r3, d0
 8002774:	4620      	mov	r0, r4
 8002776:	4629      	mov	r1, r5
 8002778:	f7fd ff66 	bl	8000648 <__aeabi_dmul>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	a310      	add	r3, pc, #64	@ (adr r3, 80027c8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278a:	f7fe f887 	bl	800089c <__aeabi_ddiv>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	f7fe fa07 	bl	8000ba8 <__aeabi_d2iz>
 800279a:	4603      	mov	r3, r0
 800279c:	461a      	mov	r2, r3
 800279e:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80027a0:	601a      	str	r2, [r3, #0]
			if(imin>500) imin = 500;
 80027a2:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80027aa:	d962      	bls.n	8002872 <HAL_TIM_PeriodElapsedCallback+0x27a>
 80027ac:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80027ae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	e05d      	b.n	8002872 <HAL_TIM_PeriodElapsedCallback+0x27a>
 80027b6:	bf00      	nop
 80027b8:	28f5c28f 	.word	0x28f5c28f
 80027bc:	4032cf5c 	.word	0x4032cf5c
 80027c0:	78000000 	.word	0x78000000
 80027c4:	4190942a 	.word	0x4190942a
 80027c8:	9374bc6a 	.word	0x9374bc6a
 80027cc:	40624418 	.word	0x40624418
 80027d0:	40014000 	.word	0x40014000
 80027d4:	20000b5c 	.word	0x20000b5c
 80027d8:	20000b4f 	.word	0x20000b4f
 80027dc:	20000a40 	.word	0x20000a40
 80027e0:	20000a34 	.word	0x20000a34
 80027e4:	20000a54 	.word	0x20000a54
 80027e8:	20000a4c 	.word	0x20000a4c
 80027ec:	20000004 	.word	0x20000004
 80027f0:	20000a5c 	.word	0x20000a5c
 80027f4:	20000020 	.word	0x20000020
 80027f8:	20000a30 	.word	0x20000a30
		} else if(Gv>=2)
 80027fc:	4bc0      	ldr	r3, [pc, #768]	@ (8002b00 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80027fe:	edd3 7a00 	vldr	s15, [r3]
 8002802:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280e:	db30      	blt.n	8002872 <HAL_TIM_PeriodElapsedCallback+0x27a>
		{
			delay_tr = (M_PI-acos(1/(Gv-1)))/wr;
 8002810:	4bbb      	ldr	r3, [pc, #748]	@ (8002b00 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002812:	edd3 7a00 	vldr	s15, [r3]
 8002816:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800281a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800281e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002822:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002826:	ee16 0a90 	vmov	r0, s13
 800282a:	f7fd feb5 	bl	8000598 <__aeabi_f2d>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	ec43 2b10 	vmov	d0, r2, r3
 8002836:	f012 fe97 	bl	8015568 <acos>
 800283a:	ec53 2b10 	vmov	r2, r3, d0
 800283e:	a1a6      	add	r1, pc, #664	@ (adr r1, 8002ad8 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8002840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002844:	f7fd fd48 	bl	80002d8 <__aeabi_dsub>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	a3a3      	add	r3, pc, #652	@ (adr r3, 8002ae0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f7fe f821 	bl	800089c <__aeabi_ddiv>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	f7fe f9e9 	bl	8000c38 <__aeabi_d2f>
 8002866:	4603      	mov	r3, r0
 8002868:	4aa6      	ldr	r2, [pc, #664]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 800286a:	6013      	str	r3, [r2, #0]
			imin = 0;
 800286c:	4ba6      	ldr	r3, [pc, #664]	@ (8002b08 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
		}
		if(delay_tr<0.001){
 8002872:	4ba4      	ldr	r3, [pc, #656]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe8e 	bl	8000598 <__aeabi_f2d>
 800287c:	a39a      	add	r3, pc, #616	@ (adr r3, 8002ae8 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	f7fe f953 	bl	8000b2c <__aeabi_dcmplt>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01a      	beq.n	80028c2 <HAL_TIM_PeriodElapsedCallback+0x2ca>
		int delay_tr_freq = (int)(1/delay_tr);
 800288c:	4b9d      	ldr	r3, [pc, #628]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 800288e:	ed93 7a00 	vldr	s14, [r3]
 8002892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800289e:	ee17 3a90 	vmov	r3, s15
 80028a2:	60fb      	str	r3, [r7, #12]
		if(delay_tr_freq>20000000) delay_tr_freq = 15000000;//10Mhz
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4a99      	ldr	r2, [pc, #612]	@ (8002b0c <HAL_TIM_PeriodElapsedCallback+0x514>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	dd01      	ble.n	80028b0 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 80028ac:	4b98      	ldr	r3, [pc, #608]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80028ae:	60fb      	str	r3, [r7, #12]
		if(once == 0) Update_PWM_Frequency(&htim1, TIM_CHANNEL_1, 221454); // Set TIM1 CH1 to freq that is delay tr and send to fpga
 80028b0:	4b98      	ldr	r3, [pc, #608]	@ (8002b14 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d104      	bne.n	80028c2 <HAL_TIM_PeriodElapsedCallback+0x2ca>
 80028b8:	4a97      	ldr	r2, [pc, #604]	@ (8002b18 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80028ba:	2100      	movs	r1, #0
 80028bc:	4897      	ldr	r0, [pc, #604]	@ (8002b1c <HAL_TIM_PeriodElapsedCallback+0x524>)
 80028be:	f7ff fdc5 	bl	800244c <Update_PWM_Frequency>
		}

		if(currentState == STATE_SOFT_START) RAMP(); // Adding to Vramp stepping voltage to create starting ramp
 80028c2:	4b97      	ldr	r3, [pc, #604]	@ (8002b20 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_PeriodElapsedCallback+0x2d6>
 80028ca:	f000 f977 	bl	8002bbc <RAMP>

		regulatorPI(&imax1, &Integral_I, output_voltage, Vramp, LIM_PEAK_POS, LIM_PEAK_NEG, Kp, Ti, Ts);
 80028ce:	4b95      	ldr	r3, [pc, #596]	@ (8002b24 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	ee07 3a90 	vmov	s15, r3
 80028d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028da:	4b93      	ldr	r3, [pc, #588]	@ (8002b28 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	ee07 3a10 	vmov	s14, r3
 80028e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80028e6:	4b91      	ldr	r3, [pc, #580]	@ (8002b2c <HAL_TIM_PeriodElapsedCallback+0x534>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	ee06 3a90 	vmov	s13, r3
 80028ee:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80028f2:	4b8f      	ldr	r3, [pc, #572]	@ (8002b30 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	ee06 3a10 	vmov	s12, r3
 80028fa:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80028fe:	4b8d      	ldr	r3, [pc, #564]	@ (8002b34 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002900:	edd3 5a00 	vldr	s11, [r3]
 8002904:	4b8c      	ldr	r3, [pc, #560]	@ (8002b38 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002906:	ed93 5a00 	vldr	s10, [r3]
 800290a:	ed9f 3a8c 	vldr	s6, [pc, #560]	@ 8002b3c <HAL_TIM_PeriodElapsedCallback+0x544>
 800290e:	eef0 2a45 	vmov.f32	s5, s10
 8002912:	eeb0 2a65 	vmov.f32	s4, s11
 8002916:	eef0 1a46 	vmov.f32	s3, s12
 800291a:	eeb0 1a66 	vmov.f32	s2, s13
 800291e:	eef0 0a47 	vmov.f32	s1, s14
 8002922:	eeb0 0a67 	vmov.f32	s0, s15
 8002926:	4986      	ldr	r1, [pc, #536]	@ (8002b40 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002928:	4886      	ldr	r0, [pc, #536]	@ (8002b44 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800292a:	f000 f9a5 	bl	8002c78 <regulatorPI>

		if(output_voltage>40000)
 800292e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b24 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8002936:	4293      	cmp	r3, r2
 8002938:	d93c      	bls.n	80029b4 <HAL_TIM_PeriodElapsedCallback+0x3bc>
		{
		delay_hc = (2*C_CAP*output_voltage)/imax1;
 800293a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b24 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7fd fe08 	bl	8000554 <__aeabi_ui2d>
 8002944:	a36a      	add	r3, pc, #424	@ (adr r3, 8002af0 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8002946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294a:	f7fd fe7d 	bl	8000648 <__aeabi_dmul>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4614      	mov	r4, r2
 8002954:	461d      	mov	r5, r3
 8002956:	4b7b      	ldr	r3, [pc, #492]	@ (8002b44 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fdfa 	bl	8000554 <__aeabi_ui2d>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4620      	mov	r0, r4
 8002966:	4629      	mov	r1, r5
 8002968:	f7fd ff98 	bl	800089c <__aeabi_ddiv>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f960 	bl	8000c38 <__aeabi_d2f>
 8002978:	4603      	mov	r3, r0
 800297a:	4a73      	ldr	r2, [pc, #460]	@ (8002b48 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800297c:	6013      	str	r3, [r2, #0]
		int delay_hc_freq = (int)(1/delay_hc);
 800297e:	4b72      	ldr	r3, [pc, #456]	@ (8002b48 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002980:	ed93 7a00 	vldr	s14, [r3]
 8002984:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800298c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002990:	ee17 3a90 	vmov	r3, s15
 8002994:	60bb      	str	r3, [r7, #8]
		if(delay_hc_freq>20000000) delay_hc_freq = 15000000;//10Mhz jakis problem
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4a5c      	ldr	r2, [pc, #368]	@ (8002b0c <HAL_TIM_PeriodElapsedCallback+0x514>)
 800299a:	4293      	cmp	r3, r2
 800299c:	dd01      	ble.n	80029a2 <HAL_TIM_PeriodElapsedCallback+0x3aa>
 800299e:	4b5c      	ldr	r3, [pc, #368]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80029a0:	60bb      	str	r3, [r7, #8]
		if(once == 0) Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, 7100000); // Set TIM8 CH1 o freq that is delay hc and send to fpga
 80029a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b14 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d104      	bne.n	80029b4 <HAL_TIM_PeriodElapsedCallback+0x3bc>
 80029aa:	4a68      	ldr	r2, [pc, #416]	@ (8002b4c <HAL_TIM_PeriodElapsedCallback+0x554>)
 80029ac:	2104      	movs	r1, #4
 80029ae:	4868      	ldr	r0, [pc, #416]	@ (8002b50 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80029b0:	f7ff fd4c 	bl	800244c <Update_PWM_Frequency>
		}

		imax2 = imax1 + imax2_sum; // imax2_sum signal from FPGA
 80029b4:	4b63      	ldr	r3, [pc, #396]	@ (8002b44 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b66      	ldr	r3, [pc, #408]	@ (8002b54 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4413      	add	r3, r2
 80029be:	4a66      	ldr	r2, [pc, #408]	@ (8002b58 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80029c0:	6013      	str	r3, [r2, #0]
		// imax1,2 each for branches to make 180 degree shift
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref+((int)imax1*0.025)); // imax1  1.5V is 0A;  1A is 20mV; 1 bit is 0.8mV; imax[mA]*0.02 [V/A]/0.8[mV] = Value for DAC
 80029c2:	4b66      	ldr	r3, [pc, #408]	@ (8002b5c <HAL_TIM_PeriodElapsedCallback+0x564>)
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fdd4 	bl	8000574 <__aeabi_i2d>
 80029cc:	4604      	mov	r4, r0
 80029ce:	460d      	mov	r5, r1
 80029d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002b44 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fdcd 	bl	8000574 <__aeabi_i2d>
 80029da:	a347      	add	r3, pc, #284	@ (adr r3, 8002af8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f7fd fe32 	bl	8000648 <__aeabi_dmul>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4620      	mov	r0, r4
 80029ea:	4629      	mov	r1, r5
 80029ec:	f7fd fc76 	bl	80002dc <__adddf3>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	f7fe f8fe 	bl	8000bf8 <__aeabi_d2uiz>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2200      	movs	r2, #0
 8002a00:	2100      	movs	r1, #0
 8002a02:	4857      	ldr	r0, [pc, #348]	@ (8002b60 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002a04:	f003 faa6 	bl	8005f54 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, current_sensor2_vref+((int)imax2*0.025)); // imax2
 8002a08:	4b56      	ldr	r3, [pc, #344]	@ (8002b64 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fdb1 	bl	8000574 <__aeabi_i2d>
 8002a12:	4604      	mov	r4, r0
 8002a14:	460d      	mov	r5, r1
 8002a16:	4b50      	ldr	r3, [pc, #320]	@ (8002b58 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fdaa 	bl	8000574 <__aeabi_i2d>
 8002a20:	a335      	add	r3, pc, #212	@ (adr r3, 8002af8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fe0f 	bl	8000648 <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4620      	mov	r0, r4
 8002a30:	4629      	mov	r1, r5
 8002a32:	f7fd fc53 	bl	80002dc <__adddf3>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f7fe f8db 	bl	8000bf8 <__aeabi_d2uiz>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2200      	movs	r2, #0
 8002a46:	2110      	movs	r1, #16
 8002a48:	4845      	ldr	r0, [pc, #276]	@ (8002b60 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002a4a:	f003 fa83 	bl	8005f54 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref-((int)imin*0.25)); // imin uzyto tutaj wzmacniacza 10x dla sygnalu z sensora pradu wiec ma wzmocnienie 200mv/A a nie 20mv/a
 8002a4e:	4b43      	ldr	r3, [pc, #268]	@ (8002b5c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fd8e 	bl	8000574 <__aeabi_i2d>
 8002a58:	4604      	mov	r4, r0
 8002a5a:	460d      	mov	r5, r1
 8002a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002b08 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fd87 	bl	8000574 <__aeabi_i2d>
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b68 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002a6c:	f7fd fdec 	bl	8000648 <__aeabi_dmul>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4620      	mov	r0, r4
 8002a76:	4629      	mov	r1, r5
 8002a78:	f7fd fc2e 	bl	80002d8 <__aeabi_dsub>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7fe f8b8 	bl	8000bf8 <__aeabi_d2uiz>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4837      	ldr	r0, [pc, #220]	@ (8002b6c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002a90:	f003 fa60 	bl	8005f54 <HAL_DAC_SetValue>

		}
		//HAL_TIM_Base_Stop_IT(&htim15);
		if(once == 0){
 8002a94:	4b1f      	ldr	r3, [pc, #124]	@ (8002b14 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <HAL_TIM_PeriodElapsedCallback+0x4b4>
		//	HAL_Delay(10);
		HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	2120      	movs	r1, #32
 8002aa0:	4833      	ldr	r0, [pc, #204]	@ (8002b70 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8002aa2:	f004 f85d 	bl	8006b60 <HAL_GPIO_WritePin>
		once = 1;
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b14 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
		}

		sythick2 =  HAL_GetTick() - sythick1;
 8002aac:	f001 fb90 	bl	80041d0 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4b30      	ldr	r3, [pc, #192]	@ (8002b74 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	4a2f      	ldr	r2, [pc, #188]	@ (8002b78 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002aba:	6013      	str	r3, [r2, #0]

	}

	if (htim->Instance == TIM6) // 5 sec period
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a2e      	ldr	r2, [pc, #184]	@ (8002b7c <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d101      	bne.n	8002aca <HAL_TIM_PeriodElapsedCallback+0x4d2>
		    {
		//if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
				//{
				FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
 8002ac6:	f000 f9a3 	bl	8002e10 <FAN_Drive>
				//}
		    }


	if (htim->Instance == TIM7)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2c      	ldr	r2, [pc, #176]	@ (8002b80 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d168      	bne.n	8002ba6 <HAL_TIM_PeriodElapsedCallback+0x5ae>
 8002ad4:	e056      	b.n	8002b84 <HAL_TIM_PeriodElapsedCallback+0x58c>
 8002ad6:	bf00      	nop
 8002ad8:	54442d18 	.word	0x54442d18
 8002adc:	400921fb 	.word	0x400921fb
 8002ae0:	78000000 	.word	0x78000000
 8002ae4:	4190942a 	.word	0x4190942a
 8002ae8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002aec:	3f50624d 	.word	0x3f50624d
 8002af0:	e5c45270 	.word	0xe5c45270
 8002af4:	3e32e5d9 	.word	0x3e32e5d9
 8002af8:	9999999a 	.word	0x9999999a
 8002afc:	3f999999 	.word	0x3f999999
 8002b00:	20000004 	.word	0x20000004
 8002b04:	20000a5c 	.word	0x20000a5c
 8002b08:	20000a30 	.word	0x20000a30
 8002b0c:	01312d00 	.word	0x01312d00
 8002b10:	00e4e1c0 	.word	0x00e4e1c0
 8002b14:	20000b54 	.word	0x20000b54
 8002b18:	0003610e 	.word	0x0003610e
 8002b1c:	2000077c 	.word	0x2000077c
 8002b20:	20000b4f 	.word	0x20000b4f
 8002b24:	20000a4c 	.word	0x20000a4c
 8002b28:	20000a50 	.word	0x20000a50
 8002b2c:	20000010 	.word	0x20000010
 8002b30:	20000014 	.word	0x20000014
 8002b34:	20000008 	.word	0x20000008
 8002b38:	2000000c 	.word	0x2000000c
 8002b3c:	3851b717 	.word	0x3851b717
 8002b40:	20000b44 	.word	0x20000b44
 8002b44:	20000a28 	.word	0x20000a28
 8002b48:	20000a60 	.word	0x20000a60
 8002b4c:	006c5660 	.word	0x006c5660
 8002b50:	200008ac 	.word	0x200008ac
 8002b54:	20000a64 	.word	0x20000a64
 8002b58:	20000a2c 	.word	0x20000a2c
 8002b5c:	20000a24 	.word	0x20000a24
 8002b60:	20000694 	.word	0x20000694
 8002b64:	20000a26 	.word	0x20000a26
 8002b68:	3fd00000 	.word	0x3fd00000
 8002b6c:	200006a8 	.word	0x200006a8
 8002b70:	48000800 	.word	0x48000800
 8002b74:	20000b5c 	.word	0x20000b5c
 8002b78:	20000b60 	.word	0x20000b60
 8002b7c:	40001000 	.word	0x40001000
 8002b80:	40001400 	.word	0x40001400
	    {
	        // Turn off OCD pins of currents sensors to reset current sensor 1us

	        HAL_GPIO_TogglePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin);
 8002b84:	2102      	movs	r1, #2
 8002b86:	480a      	ldr	r0, [pc, #40]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8002b88:	f004 f802 	bl	8006b90 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin);
 8002b8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b90:	4808      	ldr	r0, [pc, #32]	@ (8002bb4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8002b92:	f003 fffd 	bl	8006b90 <HAL_GPIO_TogglePin>
	        HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2120      	movs	r1, #32
 8002b9a:	4805      	ldr	r0, [pc, #20]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8002b9c:	f003 ffe0 	bl	8006b60 <HAL_GPIO_WritePin>
	        // Stop the timer
	        HAL_TIM_Base_Stop_IT(&htim7);
 8002ba0:	4805      	ldr	r0, [pc, #20]	@ (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002ba2:	f006 feb5 	bl	8009910 <HAL_TIM_Base_Stop_IT>
	    }


}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bdb0      	pop	{r4, r5, r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	48001000 	.word	0x48001000
 8002bb4:	48001400 	.word	0x48001400
 8002bb8:	20000860 	.word	0x20000860

08002bbc <RAMP>:

void RAMP()
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
	// RAMP Voltage to soft-start
				if((vref-output_voltage)>100)
 8002bc0:	4b27      	ldr	r3, [pc, #156]	@ (8002c60 <RAMP+0xa4>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b27      	ldr	r3, [pc, #156]	@ (8002c64 <RAMP+0xa8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b64      	cmp	r3, #100	@ 0x64
 8002bce:	d917      	bls.n	8002c00 <RAMP+0x44>
				{
					Vramp = output_voltage+4000000*Ts; // 200mV step per loop period
 8002bd0:	4b24      	ldr	r3, [pc, #144]	@ (8002c64 <RAMP+0xa8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fd fcbd 	bl	8000554 <__aeabi_ui2d>
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	4b22      	ldr	r3, [pc, #136]	@ (8002c68 <RAMP+0xac>)
 8002be0:	f7fd fb7c 	bl	80002dc <__adddf3>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f7fe f804 	bl	8000bf8 <__aeabi_d2uiz>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c6c <RAMP+0xb0>)
 8002bf6:	801a      	strh	r2, [r3, #0]
					RAMP_FINISHED = 0;
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c70 <RAMP+0xb4>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	e01c      	b.n	8002c3a <RAMP+0x7e>
				}
				else if((vref-output_voltage)<-100)
 8002c00:	4b17      	ldr	r3, [pc, #92]	@ (8002c60 <RAMP+0xa4>)
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b17      	ldr	r3, [pc, #92]	@ (8002c64 <RAMP+0xa8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f113 0f65 	cmn.w	r3, #101	@ 0x65
 8002c10:	d813      	bhi.n	8002c3a <RAMP+0x7e>
				{
					Vramp = output_voltage-4000000*Ts;
 8002c12:	4b14      	ldr	r3, [pc, #80]	@ (8002c64 <RAMP+0xa8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fc9c 	bl	8000554 <__aeabi_ui2d>
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	4b11      	ldr	r3, [pc, #68]	@ (8002c68 <RAMP+0xac>)
 8002c22:	f7fd fb59 	bl	80002d8 <__aeabi_dsub>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f7fd ffe3 	bl	8000bf8 <__aeabi_d2uiz>
 8002c32:	4603      	mov	r3, r0
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	4b0d      	ldr	r3, [pc, #52]	@ (8002c6c <RAMP+0xb0>)
 8002c38:	801a      	strh	r2, [r3, #0]
				}
				if(Vramp>=48000)
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <RAMP+0xb0>)
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d909      	bls.n	8002c5a <RAMP+0x9e>
				{
					Vramp = 48000; // 48V
 8002c46:	4b09      	ldr	r3, [pc, #36]	@ (8002c6c <RAMP+0xb0>)
 8002c48:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002c4c:	801a      	strh	r2, [r3, #0]
					RAMP_FINISHED = 1;
 8002c4e:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <RAMP+0xb4>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
					currentState = STATE_REGULATION;
 8002c54:	4b07      	ldr	r3, [pc, #28]	@ (8002c74 <RAMP+0xb8>)
 8002c56:	2203      	movs	r2, #3
 8002c58:	701a      	strb	r2, [r3, #0]
				}


}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000000 	.word	0x20000000
 8002c64:	20000a4c 	.word	0x20000a4c
 8002c68:	40690000 	.word	0x40690000
 8002c6c:	20000a50 	.word	0x20000a50
 8002c70:	20000a58 	.word	0x20000a58
 8002c74:	20000b4f 	.word	0x20000b4f

08002c78 <regulatorPI>:

void regulatorPI(uint32_t *out, uint32_t *integral, float in, float in_zad, float limp, float limn, float kp, float ti, float Ts1)
{
 8002c78:	b5b0      	push	{r4, r5, r7, lr}
 8002c7a:	b08c      	sub	sp, #48	@ 0x30
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c80:	6239      	str	r1, [r7, #32]
 8002c82:	ed87 0a07 	vstr	s0, [r7, #28]
 8002c86:	edc7 0a06 	vstr	s1, [r7, #24]
 8002c8a:	ed87 1a05 	vstr	s2, [r7, #20]
 8002c8e:	edc7 1a04 	vstr	s3, [r7, #16]
 8002c92:	ed87 2a03 	vstr	s4, [r7, #12]
 8002c96:	edc7 2a02 	vstr	s5, [r7, #8]
 8002c9a:	ed87 3a01 	vstr	s6, [r7, #4]
	// Tustin transfrom of PI regulator s -> 2/T * (Z-1)/(Z+1)
    float delta;

    delta = in_zad - in; // error
 8002c9e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ca2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002caa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    *integral = *integral + (delta + prev_delta) * (kp / ti) * Ts1 * 0.5 ; // I part
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fc4e 	bl	8000554 <__aeabi_ui2d>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	460d      	mov	r5, r1
 8002cbc:	4b51      	ldr	r3, [pc, #324]	@ (8002e04 <regulatorPI+0x18c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	ee07 3a90 	vmov	s15, r3
 8002cc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cc8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cd4:	edd7 6a02 	vldr	s13, [r7, #8]
 8002cd8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ce0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce8:	ee17 0a90 	vmov	r0, s15
 8002cec:	f7fd fc54 	bl	8000598 <__aeabi_f2d>
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	4b44      	ldr	r3, [pc, #272]	@ (8002e08 <regulatorPI+0x190>)
 8002cf6:	f7fd fca7 	bl	8000648 <__aeabi_dmul>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4620      	mov	r0, r4
 8002d00:	4629      	mov	r1, r5
 8002d02:	f7fd faeb 	bl	80002dc <__adddf3>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f7fd ff73 	bl	8000bf8 <__aeabi_d2uiz>
 8002d12:	4602      	mov	r2, r0
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	601a      	str	r2, [r3, #0]
    prev_delta = delta;
 8002d18:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002d1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d20:	ee17 2a90 	vmov	r2, s15
 8002d24:	4b37      	ldr	r3, [pc, #220]	@ (8002e04 <regulatorPI+0x18c>)
 8002d26:	601a      	str	r2, [r3, #0]
    if (*integral >= limp) // limit peak positive
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	ee07 3a90 	vmov	s15, r3
 8002d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d34:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d40:	d807      	bhi.n	8002d52 <regulatorPI+0xda>
    {
        *integral = limp;
 8002d42:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d4a:	ee17 2a90 	vmov	r2, s15
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	601a      	str	r2, [r3, #0]
    }
    if (*integral <= limn)// limit peak negative
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6a:	db07      	blt.n	8002d7c <regulatorPI+0x104>
    {
        *integral = limn;
 8002d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d74:	ee17 2a90 	vmov	r2, s15
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	601a      	str	r2, [r3, #0]
    }
    *out = (delta * kp + *integral); // Sum of P and I
 8002d7c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002d80:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	ee07 3a90 	vmov	s15, r3
 8002d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d9c:	ee17 2a90 	vmov	r2, s15
 8002da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da2:	601a      	str	r2, [r3, #0]
    if (*out >= limp) // limit peak positive
 8002da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	ee07 3a90 	vmov	s15, r3
 8002dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002db0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dbc:	d807      	bhi.n	8002dce <regulatorPI+0x156>
    {
        *out = limp;
 8002dbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc6:	ee17 2a90 	vmov	r2, s15
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	601a      	str	r2, [r3, #0]
    }
    if (*out <= limn)// limit peak negative
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dda:	ed97 7a04 	vldr	s14, [r7, #16]
 8002dde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de6:	da00      	bge.n	8002dea <regulatorPI+0x172>
    {
        *out = limn;
    }
}
 8002de8:	e007      	b.n	8002dfa <regulatorPI+0x182>
        *out = limn;
 8002dea:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002df2:	ee17 2a90 	vmov	r2, s15
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	601a      	str	r2, [r3, #0]
}
 8002dfa:	bf00      	nop
 8002dfc:	3730      	adds	r7, #48	@ 0x30
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bdb0      	pop	{r4, r5, r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000b48 	.word	0x20000b48
 8002e08:	3fe00000 	.word	0x3fe00000
 8002e0c:	00000000 	.word	0x00000000

08002e10 <FAN_Drive>:

	return Low_passed_sample;

}
void FAN_Drive()
{ //@ToDo poprawic ogarnac zeby a intach bylo
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
		pcb_temp = (adc3_dma_buffer[3]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[3], pcb_temp)/4096)*3.3;
 8002e16:	4b44      	ldr	r3, [pc, #272]	@ (8002f28 <FAN_Drive+0x118>)
 8002e18:	88db      	ldrh	r3, [r3, #6]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	da01      	bge.n	8002e2e <FAN_Drive+0x1e>
 8002e2a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002e2e:	131b      	asrs	r3, r3, #12
 8002e30:	461a      	mov	r2, r3
 8002e32:	4b3e      	ldr	r3, [pc, #248]	@ (8002f2c <FAN_Drive+0x11c>)
 8002e34:	601a      	str	r2, [r3, #0]
		heat_sink_temp = (adc3_dma_buffer[4]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[4], heat_sink_temp)/4096)*3.3;
 8002e36:	4b3c      	ldr	r3, [pc, #240]	@ (8002f28 <FAN_Drive+0x118>)
 8002e38:	891b      	ldrh	r3, [r3, #8]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	da01      	bge.n	8002e4e <FAN_Drive+0x3e>
 8002e4a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002e4e:	131b      	asrs	r3, r3, #12
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b37      	ldr	r3, [pc, #220]	@ (8002f30 <FAN_Drive+0x120>)
 8002e54:	601a      	str	r2, [r3, #0]

		uint32_t temperature = 20;
 8002e56:	2314      	movs	r3, #20
 8002e58:	603b      	str	r3, [r7, #0]

		pcb_temp = (pcb_temp-400)/20;
 8002e5a:	4b34      	ldr	r3, [pc, #208]	@ (8002f2c <FAN_Drive+0x11c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e62:	4a34      	ldr	r2, [pc, #208]	@ (8002f34 <FAN_Drive+0x124>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	4a30      	ldr	r2, [pc, #192]	@ (8002f2c <FAN_Drive+0x11c>)
 8002e6c:	6013      	str	r3, [r2, #0]
		heat_sink_temp = (heat_sink_temp-500)/10;
 8002e6e:	4b30      	ldr	r3, [pc, #192]	@ (8002f30 <FAN_Drive+0x120>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002e76:	4a2f      	ldr	r2, [pc, #188]	@ (8002f34 <FAN_Drive+0x124>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	08db      	lsrs	r3, r3, #3
 8002e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8002f30 <FAN_Drive+0x120>)
 8002e80:	6013      	str	r3, [r2, #0]
		// Choose the higher of the two temperatures
		temperature = (pcb_temp > heat_sink_temp) ? pcb_temp : heat_sink_temp;
 8002e82:	4b2b      	ldr	r3, [pc, #172]	@ (8002f30 <FAN_Drive+0x120>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4b29      	ldr	r3, [pc, #164]	@ (8002f2c <FAN_Drive+0x11c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	bf38      	it	cc
 8002e8e:	4613      	movcc	r3, r2
 8002e90:	603b      	str	r3, [r7, #0]
		// Apply a non-linear (exponential) scaling for the fan speed
		// This scales the temperature to a value between 0 and 1, then applies an exponential curve
		uint32_t normalized_temp = ((temperature - 20) *100)/ 80;  // Normalizing between 0 (20°C) and 1000 (100°C)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2264      	movs	r2, #100	@ 0x64
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8002e9e:	4a25      	ldr	r2, [pc, #148]	@ (8002f34 <FAN_Drive+0x124>)
 8002ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea4:	099b      	lsrs	r3, r3, #6
 8002ea6:	607b      	str	r3, [r7, #4]
		if (normalized_temp > 100) normalized_temp = 100;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b64      	cmp	r3, #100	@ 0x64
 8002eac:	d901      	bls.n	8002eb2 <FAN_Drive+0xa2>
 8002eae:	2364      	movs	r3, #100	@ 0x64
 8002eb0:	607b      	str	r3, [r7, #4]
		if (normalized_temp < 0) normalized_temp = 0;

		duty_cycle = 20 + ((int)(pow(normalized_temp, 3) * 79))/1000000;  // Cubic curve for fan speed control
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fd fb4e 	bl	8000554 <__aeabi_ui2d>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8002f18 <FAN_Drive+0x108>
 8002ec0:	ec43 2b10 	vmov	d0, r2, r3
 8002ec4:	f012 fb84 	bl	80155d0 <pow>
 8002ec8:	ec51 0b10 	vmov	r0, r1, d0
 8002ecc:	a314      	add	r3, pc, #80	@ (adr r3, 8002f20 <FAN_Drive+0x110>)
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f7fd fbb9 	bl	8000648 <__aeabi_dmul>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	f7fd fe63 	bl	8000ba8 <__aeabi_d2iz>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4a14      	ldr	r2, [pc, #80]	@ (8002f38 <FAN_Drive+0x128>)
 8002ee6:	fb82 1203 	smull	r1, r2, r2, r3
 8002eea:	1492      	asrs	r2, r2, #18
 8002eec:	17db      	asrs	r3, r3, #31
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	3314      	adds	r3, #20
 8002ef2:	4a12      	ldr	r2, [pc, #72]	@ (8002f3c <FAN_Drive+0x12c>)
 8002ef4:	6013      	str	r3, [r2, #0]

		// Enforce minimum and maximum duty cycles
		if (temperature < 20) {
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b13      	cmp	r3, #19
 8002efa:	d803      	bhi.n	8002f04 <FAN_Drive+0xf4>
		        duty_cycle = 20;
 8002efc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f3c <FAN_Drive+0x12c>)
 8002efe:	2214      	movs	r2, #20
 8002f00:	601a      	str	r2, [r3, #0]
		    	duty_cycle = 99;
		}

		//Set_PWM_DutyCycle(duty_cycle);

}
 8002f02:	e005      	b.n	8002f10 <FAN_Drive+0x100>
		} else if (temperature > 100) {
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b64      	cmp	r3, #100	@ 0x64
 8002f08:	d902      	bls.n	8002f10 <FAN_Drive+0x100>
		    	duty_cycle = 99;
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <FAN_Drive+0x12c>)
 8002f0c:	2263      	movs	r2, #99	@ 0x63
 8002f0e:	601a      	str	r2, [r3, #0]
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	00000000 	.word	0x00000000
 8002f1c:	40080000 	.word	0x40080000
 8002f20:	00000000 	.word	0x00000000
 8002f24:	4053c000 	.word	0x4053c000
 8002f28:	20000a40 	.word	0x20000a40
 8002f2c:	20000a38 	.word	0x20000a38
 8002f30:	20000a3c 	.word	0x20000a3c
 8002f34:	cccccccd 	.word	0xcccccccd
 8002f38:	431bde83 	.word	0x431bde83
 8002f3c:	2000001c 	.word	0x2000001c

08002f40 <SendUSBMessage>:



void SendUSBMessage(const char* message) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7fd f9b9 	bl	80002c0 <strlen>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	81fb      	strh	r3, [r7, #14]
    if (len > 127) len = 127;  // Limit to buffer size
 8002f52:	89fb      	ldrh	r3, [r7, #14]
 8002f54:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f56:	d901      	bls.n	8002f5c <SendUSBMessage+0x1c>
 8002f58:	237f      	movs	r3, #127	@ 0x7f
 8002f5a:	81fb      	strh	r3, [r7, #14]
    memcpy(USB_TX_Buffer, message, len);
 8002f5c:	89fb      	ldrh	r3, [r7, #14]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	480b      	ldr	r0, [pc, #44]	@ (8002f90 <SendUSBMessage+0x50>)
 8002f64:	f00e fbb9 	bl	80116da <memcpy>
    USB_TX_Buffer[len] = '\0';  // Ensure null-terminated string
 8002f68:	89fb      	ldrh	r3, [r7, #14]
 8002f6a:	4a09      	ldr	r2, [pc, #36]	@ (8002f90 <SendUSBMessage+0x50>)
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	54d1      	strb	r1, [r2, r3]
            break;
        }
      // HAL_Delay(10);  // Small delay before retrying
    } while (retry_count-- > 0);*/
    do {
            result = CDC_Transmit_FS((uint8_t*)message, len);
 8002f70:	89fb      	ldrh	r3, [r7, #14]
 8002f72:	4619      	mov	r1, r3
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f00c ff15 	bl	800fda4 <CDC_Transmit_FS>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	737b      	strb	r3, [r7, #13]
        } while (result == USBD_BUSY); // Retry while USB is busy
 8002f7e:	7b7b      	ldrb	r3, [r7, #13]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d0f5      	beq.n	8002f70 <SendUSBMessage+0x30>


}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000ac0 	.word	0x20000ac0

08002f94 <ParseUSBCommand>:

void ParseUSBCommand(void) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
	 if (dataReceivedFlag) {
 8002f98:	4ba6      	ldr	r3, [pc, #664]	@ (8003234 <ParseUSBCommand+0x2a0>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8146 	beq.w	8003230 <ParseUSBCommand+0x29c>
	        if (strncmp((char*)USB_RX_Buffer, "SET_KP", 6) == 0) {
 8002fa4:	2206      	movs	r2, #6
 8002fa6:	49a4      	ldr	r1, [pc, #656]	@ (8003238 <ParseUSBCommand+0x2a4>)
 8002fa8:	48a4      	ldr	r0, [pc, #656]	@ (800323c <ParseUSBCommand+0x2a8>)
 8002faa:	f00e fb0c 	bl	80115c6 <strncmp>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d108      	bne.n	8002fc6 <ParseUSBCommand+0x32>
	            sscanf((char*)USB_RX_Buffer, "SET_KP %f", &Kp);
 8002fb4:	4aa2      	ldr	r2, [pc, #648]	@ (8003240 <ParseUSBCommand+0x2ac>)
 8002fb6:	49a3      	ldr	r1, [pc, #652]	@ (8003244 <ParseUSBCommand+0x2b0>)
 8002fb8:	48a0      	ldr	r0, [pc, #640]	@ (800323c <ParseUSBCommand+0x2a8>)
 8002fba:	f00e fa8d 	bl	80114d8 <siscanf>
	            SendUSBMessage("KP Updated\n");
 8002fbe:	48a2      	ldr	r0, [pc, #648]	@ (8003248 <ParseUSBCommand+0x2b4>)
 8002fc0:	f7ff ffbe 	bl	8002f40 <SendUSBMessage>
 8002fc4:	e12c      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_Ti", 6) == 0) {
 8002fc6:	2206      	movs	r2, #6
 8002fc8:	49a0      	ldr	r1, [pc, #640]	@ (800324c <ParseUSBCommand+0x2b8>)
 8002fca:	489c      	ldr	r0, [pc, #624]	@ (800323c <ParseUSBCommand+0x2a8>)
 8002fcc:	f00e fafb 	bl	80115c6 <strncmp>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d108      	bne.n	8002fe8 <ParseUSBCommand+0x54>
	            sscanf((char*)USB_RX_Buffer, "SET_Ti %f", &Ti);
 8002fd6:	4a9e      	ldr	r2, [pc, #632]	@ (8003250 <ParseUSBCommand+0x2bc>)
 8002fd8:	499e      	ldr	r1, [pc, #632]	@ (8003254 <ParseUSBCommand+0x2c0>)
 8002fda:	4898      	ldr	r0, [pc, #608]	@ (800323c <ParseUSBCommand+0x2a8>)
 8002fdc:	f00e fa7c 	bl	80114d8 <siscanf>
	            SendUSBMessage("Ti Updated\n");
 8002fe0:	489d      	ldr	r0, [pc, #628]	@ (8003258 <ParseUSBCommand+0x2c4>)
 8002fe2:	f7ff ffad 	bl	8002f40 <SendUSBMessage>
 8002fe6:	e11b      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_VREF", 8) == 0) {
 8002fe8:	2208      	movs	r2, #8
 8002fea:	499c      	ldr	r1, [pc, #624]	@ (800325c <ParseUSBCommand+0x2c8>)
 8002fec:	4893      	ldr	r0, [pc, #588]	@ (800323c <ParseUSBCommand+0x2a8>)
 8002fee:	f00e faea 	bl	80115c6 <strncmp>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d108      	bne.n	800300a <ParseUSBCommand+0x76>
	            sscanf((char*)USB_RX_Buffer, "SET_VREF %hu", &vref);
 8002ff8:	4a99      	ldr	r2, [pc, #612]	@ (8003260 <ParseUSBCommand+0x2cc>)
 8002ffa:	499a      	ldr	r1, [pc, #616]	@ (8003264 <ParseUSBCommand+0x2d0>)
 8002ffc:	488f      	ldr	r0, [pc, #572]	@ (800323c <ParseUSBCommand+0x2a8>)
 8002ffe:	f00e fa6b 	bl	80114d8 <siscanf>
	            SendUSBMessage("vref Updated\n");
 8003002:	4899      	ldr	r0, [pc, #612]	@ (8003268 <ParseUSBCommand+0x2d4>)
 8003004:	f7ff ff9c 	bl	8002f40 <SendUSBMessage>
 8003008:	e10a      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS1_VREF", 12) == 0) {
 800300a:	220c      	movs	r2, #12
 800300c:	4997      	ldr	r1, [pc, #604]	@ (800326c <ParseUSBCommand+0x2d8>)
 800300e:	488b      	ldr	r0, [pc, #556]	@ (800323c <ParseUSBCommand+0x2a8>)
 8003010:	f00e fad9 	bl	80115c6 <strncmp>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d108      	bne.n	800302c <ParseUSBCommand+0x98>
	            sscanf((char*)USB_RX_Buffer, "SET_CS1_VREF %d", &current_sensor1_vref);
 800301a:	4a95      	ldr	r2, [pc, #596]	@ (8003270 <ParseUSBCommand+0x2dc>)
 800301c:	4995      	ldr	r1, [pc, #596]	@ (8003274 <ParseUSBCommand+0x2e0>)
 800301e:	4887      	ldr	r0, [pc, #540]	@ (800323c <ParseUSBCommand+0x2a8>)
 8003020:	f00e fa5a 	bl	80114d8 <siscanf>
	            SendUSBMessage("current_sensor1_vref Updated\n");
 8003024:	4894      	ldr	r0, [pc, #592]	@ (8003278 <ParseUSBCommand+0x2e4>)
 8003026:	f7ff ff8b 	bl	8002f40 <SendUSBMessage>
 800302a:	e0f9      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS2_VREF", 12) == 0) {
 800302c:	220c      	movs	r2, #12
 800302e:	4993      	ldr	r1, [pc, #588]	@ (800327c <ParseUSBCommand+0x2e8>)
 8003030:	4882      	ldr	r0, [pc, #520]	@ (800323c <ParseUSBCommand+0x2a8>)
 8003032:	f00e fac8 	bl	80115c6 <strncmp>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d108      	bne.n	800304e <ParseUSBCommand+0xba>
	            sscanf((char*)USB_RX_Buffer, "SET_CS2_VREF %d", &current_sensor2_vref);
 800303c:	4a90      	ldr	r2, [pc, #576]	@ (8003280 <ParseUSBCommand+0x2ec>)
 800303e:	4991      	ldr	r1, [pc, #580]	@ (8003284 <ParseUSBCommand+0x2f0>)
 8003040:	487e      	ldr	r0, [pc, #504]	@ (800323c <ParseUSBCommand+0x2a8>)
 8003042:	f00e fa49 	bl	80114d8 <siscanf>
	            SendUSBMessage("current_sensor2_vref Updated\n");
 8003046:	4890      	ldr	r0, [pc, #576]	@ (8003288 <ParseUSBCommand+0x2f4>)
 8003048:	f7ff ff7a 	bl	8002f40 <SendUSBMessage>
 800304c:	e0e8      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_IMAX2_SUM", 13) == 0) {
 800304e:	220d      	movs	r2, #13
 8003050:	498e      	ldr	r1, [pc, #568]	@ (800328c <ParseUSBCommand+0x2f8>)
 8003052:	487a      	ldr	r0, [pc, #488]	@ (800323c <ParseUSBCommand+0x2a8>)
 8003054:	f00e fab7 	bl	80115c6 <strncmp>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d108      	bne.n	8003070 <ParseUSBCommand+0xdc>
	            sscanf((char*)USB_RX_Buffer, "SET_IMAX2_SUM %d", &imax2_sum);
 800305e:	4a8c      	ldr	r2, [pc, #560]	@ (8003290 <ParseUSBCommand+0x2fc>)
 8003060:	498c      	ldr	r1, [pc, #560]	@ (8003294 <ParseUSBCommand+0x300>)
 8003062:	4876      	ldr	r0, [pc, #472]	@ (800323c <ParseUSBCommand+0x2a8>)
 8003064:	f00e fa38 	bl	80114d8 <siscanf>
	            SendUSBMessage("imax2_sum Updated\n");
 8003068:	488b      	ldr	r0, [pc, #556]	@ (8003298 <ParseUSBCommand+0x304>)
 800306a:	f7ff ff69 	bl	8002f40 <SendUSBMessage>
 800306e:	e0d7      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_TR", 12) == 0) {
 8003070:	220c      	movs	r2, #12
 8003072:	498a      	ldr	r1, [pc, #552]	@ (800329c <ParseUSBCommand+0x308>)
 8003074:	4871      	ldr	r0, [pc, #452]	@ (800323c <ParseUSBCommand+0x2a8>)
 8003076:	f00e faa6 	bl	80115c6 <strncmp>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d108      	bne.n	8003092 <ParseUSBCommand+0xfe>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_TR %f", &delay_tr);
 8003080:	4a87      	ldr	r2, [pc, #540]	@ (80032a0 <ParseUSBCommand+0x30c>)
 8003082:	4988      	ldr	r1, [pc, #544]	@ (80032a4 <ParseUSBCommand+0x310>)
 8003084:	486d      	ldr	r0, [pc, #436]	@ (800323c <ParseUSBCommand+0x2a8>)
 8003086:	f00e fa27 	bl	80114d8 <siscanf>
	            SendUSBMessage("delay_tr Updated\n");
 800308a:	4887      	ldr	r0, [pc, #540]	@ (80032a8 <ParseUSBCommand+0x314>)
 800308c:	f7ff ff58 	bl	8002f40 <SendUSBMessage>
 8003090:	e0c6      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_HC", 12) == 0) {
 8003092:	220c      	movs	r2, #12
 8003094:	4985      	ldr	r1, [pc, #532]	@ (80032ac <ParseUSBCommand+0x318>)
 8003096:	4869      	ldr	r0, [pc, #420]	@ (800323c <ParseUSBCommand+0x2a8>)
 8003098:	f00e fa95 	bl	80115c6 <strncmp>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d108      	bne.n	80030b4 <ParseUSBCommand+0x120>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_HC %f", &delay_hc);
 80030a2:	4a83      	ldr	r2, [pc, #524]	@ (80032b0 <ParseUSBCommand+0x31c>)
 80030a4:	4983      	ldr	r1, [pc, #524]	@ (80032b4 <ParseUSBCommand+0x320>)
 80030a6:	4865      	ldr	r0, [pc, #404]	@ (800323c <ParseUSBCommand+0x2a8>)
 80030a8:	f00e fa16 	bl	80114d8 <siscanf>
	            SendUSBMessage("delay_hc Updated\n");
 80030ac:	4882      	ldr	r0, [pc, #520]	@ (80032b8 <ParseUSBCommand+0x324>)
 80030ae:	f7ff ff47 	bl	8002f40 <SendUSBMessage>
 80030b2:	e0b5      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_KP", 6) == 0) {
 80030b4:	2206      	movs	r2, #6
 80030b6:	4981      	ldr	r1, [pc, #516]	@ (80032bc <ParseUSBCommand+0x328>)
 80030b8:	4860      	ldr	r0, [pc, #384]	@ (800323c <ParseUSBCommand+0x2a8>)
 80030ba:	f00e fa84 	bl	80115c6 <strncmp>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10e      	bne.n	80030e2 <ParseUSBCommand+0x14e>
	            sprintf((char*)USB_TX_Buffer, "KP = %f\n", Kp);
 80030c4:	4b5e      	ldr	r3, [pc, #376]	@ (8003240 <ParseUSBCommand+0x2ac>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fa65 	bl	8000598 <__aeabi_f2d>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	497b      	ldr	r1, [pc, #492]	@ (80032c0 <ParseUSBCommand+0x32c>)
 80030d4:	487b      	ldr	r0, [pc, #492]	@ (80032c4 <ParseUSBCommand+0x330>)
 80030d6:	f00e f9df 	bl	8011498 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80030da:	487a      	ldr	r0, [pc, #488]	@ (80032c4 <ParseUSBCommand+0x330>)
 80030dc:	f7ff ff30 	bl	8002f40 <SendUSBMessage>
 80030e0:	e09e      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_Ti", 6) == 0) {
 80030e2:	2206      	movs	r2, #6
 80030e4:	4978      	ldr	r1, [pc, #480]	@ (80032c8 <ParseUSBCommand+0x334>)
 80030e6:	4855      	ldr	r0, [pc, #340]	@ (800323c <ParseUSBCommand+0x2a8>)
 80030e8:	f00e fa6d 	bl	80115c6 <strncmp>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10e      	bne.n	8003110 <ParseUSBCommand+0x17c>
	            sprintf((char*)USB_TX_Buffer, "Ti = %f\n", Ti);
 80030f2:	4b57      	ldr	r3, [pc, #348]	@ (8003250 <ParseUSBCommand+0x2bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fd fa4e 	bl	8000598 <__aeabi_f2d>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4972      	ldr	r1, [pc, #456]	@ (80032cc <ParseUSBCommand+0x338>)
 8003102:	4870      	ldr	r0, [pc, #448]	@ (80032c4 <ParseUSBCommand+0x330>)
 8003104:	f00e f9c8 	bl	8011498 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003108:	486e      	ldr	r0, [pc, #440]	@ (80032c4 <ParseUSBCommand+0x330>)
 800310a:	f7ff ff19 	bl	8002f40 <SendUSBMessage>
 800310e:	e087      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_VREF", 8) == 0) {
 8003110:	2208      	movs	r2, #8
 8003112:	496f      	ldr	r1, [pc, #444]	@ (80032d0 <ParseUSBCommand+0x33c>)
 8003114:	4849      	ldr	r0, [pc, #292]	@ (800323c <ParseUSBCommand+0x2a8>)
 8003116:	f00e fa56 	bl	80115c6 <strncmp>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <ParseUSBCommand+0x1a2>
	            sprintf((char*)USB_TX_Buffer, "vref = %hu\n", vref);
 8003120:	4b4f      	ldr	r3, [pc, #316]	@ (8003260 <ParseUSBCommand+0x2cc>)
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	496b      	ldr	r1, [pc, #428]	@ (80032d4 <ParseUSBCommand+0x340>)
 8003128:	4866      	ldr	r0, [pc, #408]	@ (80032c4 <ParseUSBCommand+0x330>)
 800312a:	f00e f9b5 	bl	8011498 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800312e:	4865      	ldr	r0, [pc, #404]	@ (80032c4 <ParseUSBCommand+0x330>)
 8003130:	f7ff ff06 	bl	8002f40 <SendUSBMessage>
 8003134:	e074      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS1_VREF", 12) == 0) {
 8003136:	220c      	movs	r2, #12
 8003138:	4967      	ldr	r1, [pc, #412]	@ (80032d8 <ParseUSBCommand+0x344>)
 800313a:	4840      	ldr	r0, [pc, #256]	@ (800323c <ParseUSBCommand+0x2a8>)
 800313c:	f00e fa43 	bl	80115c6 <strncmp>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10a      	bne.n	800315c <ParseUSBCommand+0x1c8>
	            sprintf((char*)USB_TX_Buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 8003146:	4b4a      	ldr	r3, [pc, #296]	@ (8003270 <ParseUSBCommand+0x2dc>)
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	4963      	ldr	r1, [pc, #396]	@ (80032dc <ParseUSBCommand+0x348>)
 800314e:	485d      	ldr	r0, [pc, #372]	@ (80032c4 <ParseUSBCommand+0x330>)
 8003150:	f00e f9a2 	bl	8011498 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003154:	485b      	ldr	r0, [pc, #364]	@ (80032c4 <ParseUSBCommand+0x330>)
 8003156:	f7ff fef3 	bl	8002f40 <SendUSBMessage>
 800315a:	e061      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS2_VREF", 12) == 0) {
 800315c:	220c      	movs	r2, #12
 800315e:	4960      	ldr	r1, [pc, #384]	@ (80032e0 <ParseUSBCommand+0x34c>)
 8003160:	4836      	ldr	r0, [pc, #216]	@ (800323c <ParseUSBCommand+0x2a8>)
 8003162:	f00e fa30 	bl	80115c6 <strncmp>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <ParseUSBCommand+0x1ee>
	            sprintf((char*)USB_TX_Buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 800316c:	4b44      	ldr	r3, [pc, #272]	@ (8003280 <ParseUSBCommand+0x2ec>)
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	495c      	ldr	r1, [pc, #368]	@ (80032e4 <ParseUSBCommand+0x350>)
 8003174:	4853      	ldr	r0, [pc, #332]	@ (80032c4 <ParseUSBCommand+0x330>)
 8003176:	f00e f98f 	bl	8011498 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800317a:	4852      	ldr	r0, [pc, #328]	@ (80032c4 <ParseUSBCommand+0x330>)
 800317c:	f7ff fee0 	bl	8002f40 <SendUSBMessage>
 8003180:	e04e      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_IMAX2_SUM", 13) == 0) {
 8003182:	220d      	movs	r2, #13
 8003184:	4958      	ldr	r1, [pc, #352]	@ (80032e8 <ParseUSBCommand+0x354>)
 8003186:	482d      	ldr	r0, [pc, #180]	@ (800323c <ParseUSBCommand+0x2a8>)
 8003188:	f00e fa1d 	bl	80115c6 <strncmp>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <ParseUSBCommand+0x214>
	            sprintf((char*)USB_TX_Buffer, "imax2_sum = %f\n", imax2_sum);
 8003192:	4b3f      	ldr	r3, [pc, #252]	@ (8003290 <ParseUSBCommand+0x2fc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	4954      	ldr	r1, [pc, #336]	@ (80032ec <ParseUSBCommand+0x358>)
 800319a:	484a      	ldr	r0, [pc, #296]	@ (80032c4 <ParseUSBCommand+0x330>)
 800319c:	f00e f97c 	bl	8011498 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80031a0:	4848      	ldr	r0, [pc, #288]	@ (80032c4 <ParseUSBCommand+0x330>)
 80031a2:	f7ff fecd 	bl	8002f40 <SendUSBMessage>
 80031a6:	e03b      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_TR", 12) == 0) {
 80031a8:	220c      	movs	r2, #12
 80031aa:	4951      	ldr	r1, [pc, #324]	@ (80032f0 <ParseUSBCommand+0x35c>)
 80031ac:	4823      	ldr	r0, [pc, #140]	@ (800323c <ParseUSBCommand+0x2a8>)
 80031ae:	f00e fa0a 	bl	80115c6 <strncmp>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10e      	bne.n	80031d6 <ParseUSBCommand+0x242>
	            sprintf((char*)USB_TX_Buffer, "delay_tr = %f\n", delay_tr);
 80031b8:	4b39      	ldr	r3, [pc, #228]	@ (80032a0 <ParseUSBCommand+0x30c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd f9eb 	bl	8000598 <__aeabi_f2d>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	494b      	ldr	r1, [pc, #300]	@ (80032f4 <ParseUSBCommand+0x360>)
 80031c8:	483e      	ldr	r0, [pc, #248]	@ (80032c4 <ParseUSBCommand+0x330>)
 80031ca:	f00e f965 	bl	8011498 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80031ce:	483d      	ldr	r0, [pc, #244]	@ (80032c4 <ParseUSBCommand+0x330>)
 80031d0:	f7ff feb6 	bl	8002f40 <SendUSBMessage>
 80031d4:	e024      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_HC", 12) == 0) {
 80031d6:	220c      	movs	r2, #12
 80031d8:	4947      	ldr	r1, [pc, #284]	@ (80032f8 <ParseUSBCommand+0x364>)
 80031da:	4818      	ldr	r0, [pc, #96]	@ (800323c <ParseUSBCommand+0x2a8>)
 80031dc:	f00e f9f3 	bl	80115c6 <strncmp>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10e      	bne.n	8003204 <ParseUSBCommand+0x270>
	            sprintf((char*)USB_TX_Buffer, "delay_hc = %f\n", delay_hc);
 80031e6:	4b32      	ldr	r3, [pc, #200]	@ (80032b0 <ParseUSBCommand+0x31c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd f9d4 	bl	8000598 <__aeabi_f2d>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4941      	ldr	r1, [pc, #260]	@ (80032fc <ParseUSBCommand+0x368>)
 80031f6:	4833      	ldr	r0, [pc, #204]	@ (80032c4 <ParseUSBCommand+0x330>)
 80031f8:	f00e f94e 	bl	8011498 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80031fc:	4831      	ldr	r0, [pc, #196]	@ (80032c4 <ParseUSBCommand+0x330>)
 80031fe:	f7ff fe9f 	bl	8002f40 <SendUSBMessage>
 8003202:	e00d      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "DISPLAY_ALL", 11) == 0) {
 8003204:	220b      	movs	r2, #11
 8003206:	493e      	ldr	r1, [pc, #248]	@ (8003300 <ParseUSBCommand+0x36c>)
 8003208:	480c      	ldr	r0, [pc, #48]	@ (800323c <ParseUSBCommand+0x2a8>)
 800320a:	f00e f9dc 	bl	80115c6 <strncmp>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d102      	bne.n	800321a <ParseUSBCommand+0x286>
	            DisplayAllVariables();
 8003214:	f000 f878 	bl	8003308 <DisplayAllVariables>
 8003218:	e002      	b.n	8003220 <ParseUSBCommand+0x28c>

	        } else {
	            SendUSBMessage("Unknown Command\n");
 800321a:	483a      	ldr	r0, [pc, #232]	@ (8003304 <ParseUSBCommand+0x370>)
 800321c:	f7ff fe90 	bl	8002f40 <SendUSBMessage>
	        }
	        memset(USB_RX_Buffer, 0, sizeof(USB_RX_Buffer));  // Clear buffer
 8003220:	2240      	movs	r2, #64	@ 0x40
 8003222:	2100      	movs	r1, #0
 8003224:	4805      	ldr	r0, [pc, #20]	@ (800323c <ParseUSBCommand+0x2a8>)
 8003226:	f00e f9c6 	bl	80115b6 <memset>
	        dataReceivedFlag = 0;
 800322a:	4b02      	ldr	r3, [pc, #8]	@ (8003234 <ParseUSBCommand+0x2a0>)
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
	    }
}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20000b40 	.word	0x20000b40
 8003238:	080169b8 	.word	0x080169b8
 800323c:	20000a80 	.word	0x20000a80
 8003240:	20000008 	.word	0x20000008
 8003244:	080169c0 	.word	0x080169c0
 8003248:	080169cc 	.word	0x080169cc
 800324c:	080169d8 	.word	0x080169d8
 8003250:	2000000c 	.word	0x2000000c
 8003254:	080169e0 	.word	0x080169e0
 8003258:	080169ec 	.word	0x080169ec
 800325c:	080169f8 	.word	0x080169f8
 8003260:	20000000 	.word	0x20000000
 8003264:	08016a04 	.word	0x08016a04
 8003268:	08016a14 	.word	0x08016a14
 800326c:	08016a24 	.word	0x08016a24
 8003270:	20000a24 	.word	0x20000a24
 8003274:	08016a34 	.word	0x08016a34
 8003278:	08016a44 	.word	0x08016a44
 800327c:	08016a64 	.word	0x08016a64
 8003280:	20000a26 	.word	0x20000a26
 8003284:	08016a74 	.word	0x08016a74
 8003288:	08016a84 	.word	0x08016a84
 800328c:	08016aa4 	.word	0x08016aa4
 8003290:	20000a64 	.word	0x20000a64
 8003294:	08016ab4 	.word	0x08016ab4
 8003298:	08016ac8 	.word	0x08016ac8
 800329c:	08016adc 	.word	0x08016adc
 80032a0:	20000a5c 	.word	0x20000a5c
 80032a4:	08016aec 	.word	0x08016aec
 80032a8:	08016afc 	.word	0x08016afc
 80032ac:	08016b10 	.word	0x08016b10
 80032b0:	20000a60 	.word	0x20000a60
 80032b4:	08016b20 	.word	0x08016b20
 80032b8:	08016b30 	.word	0x08016b30
 80032bc:	08016b44 	.word	0x08016b44
 80032c0:	08016b4c 	.word	0x08016b4c
 80032c4:	20000ac0 	.word	0x20000ac0
 80032c8:	08016b58 	.word	0x08016b58
 80032cc:	08016b60 	.word	0x08016b60
 80032d0:	08016b6c 	.word	0x08016b6c
 80032d4:	08016b78 	.word	0x08016b78
 80032d8:	08016b84 	.word	0x08016b84
 80032dc:	08016b94 	.word	0x08016b94
 80032e0:	08016bb0 	.word	0x08016bb0
 80032e4:	08016bc0 	.word	0x08016bc0
 80032e8:	08016bdc 	.word	0x08016bdc
 80032ec:	08016bec 	.word	0x08016bec
 80032f0:	08016bfc 	.word	0x08016bfc
 80032f4:	08016c0c 	.word	0x08016c0c
 80032f8:	08016c1c 	.word	0x08016c1c
 80032fc:	08016c2c 	.word	0x08016c2c
 8003300:	08016c3c 	.word	0x08016c3c
 8003304:	08016c48 	.word	0x08016c48

08003308 <DisplayAllVariables>:

void DisplayAllVariables(void) {
 8003308:	b580      	push	{r7, lr}
 800330a:	b0a0      	sub	sp, #128	@ 0x80
 800330c:	af00      	add	r7, sp, #0
    char buffer[128];

    sprintf(buffer, "KP = %f\n", Kp);
 800330e:	4b5e      	ldr	r3, [pc, #376]	@ (8003488 <DisplayAllVariables+0x180>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd f940 	bl	8000598 <__aeabi_f2d>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4638      	mov	r0, r7
 800331e:	495b      	ldr	r1, [pc, #364]	@ (800348c <DisplayAllVariables+0x184>)
 8003320:	f00e f8ba 	bl	8011498 <siprintf>
        SendUSBMessage(buffer);
 8003324:	463b      	mov	r3, r7
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fe0a 	bl	8002f40 <SendUSBMessage>

        sprintf(buffer, "Ti = %f\n", Ti);
 800332c:	4b58      	ldr	r3, [pc, #352]	@ (8003490 <DisplayAllVariables+0x188>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd f931 	bl	8000598 <__aeabi_f2d>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4638      	mov	r0, r7
 800333c:	4955      	ldr	r1, [pc, #340]	@ (8003494 <DisplayAllVariables+0x18c>)
 800333e:	f00e f8ab 	bl	8011498 <siprintf>
        SendUSBMessage(buffer);
 8003342:	463b      	mov	r3, r7
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fdfb 	bl	8002f40 <SendUSBMessage>

        sprintf(buffer, "vref = %hu\n", vref);
 800334a:	4b53      	ldr	r3, [pc, #332]	@ (8003498 <DisplayAllVariables+0x190>)
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	463b      	mov	r3, r7
 8003352:	4952      	ldr	r1, [pc, #328]	@ (800349c <DisplayAllVariables+0x194>)
 8003354:	4618      	mov	r0, r3
 8003356:	f00e f89f 	bl	8011498 <siprintf>
        SendUSBMessage(buffer);
 800335a:	463b      	mov	r3, r7
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fdef 	bl	8002f40 <SendUSBMessage>

        sprintf(buffer, "imax1 = %f\n", imax1);
 8003362:	4b4f      	ldr	r3, [pc, #316]	@ (80034a0 <DisplayAllVariables+0x198>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	463b      	mov	r3, r7
 8003368:	494e      	ldr	r1, [pc, #312]	@ (80034a4 <DisplayAllVariables+0x19c>)
 800336a:	4618      	mov	r0, r3
 800336c:	f00e f894 	bl	8011498 <siprintf>
        SendUSBMessage(buffer);
 8003370:	463b      	mov	r3, r7
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fde4 	bl	8002f40 <SendUSBMessage>

        sprintf(buffer, "imax2 = %f\n", imax2);
 8003378:	4b4b      	ldr	r3, [pc, #300]	@ (80034a8 <DisplayAllVariables+0x1a0>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	463b      	mov	r3, r7
 800337e:	494b      	ldr	r1, [pc, #300]	@ (80034ac <DisplayAllVariables+0x1a4>)
 8003380:	4618      	mov	r0, r3
 8003382:	f00e f889 	bl	8011498 <siprintf>
        SendUSBMessage(buffer);
 8003386:	463b      	mov	r3, r7
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fdd9 	bl	8002f40 <SendUSBMessage>

        sprintf(buffer, "imin = %f\n", imin);
 800338e:	4b48      	ldr	r3, [pc, #288]	@ (80034b0 <DisplayAllVariables+0x1a8>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	463b      	mov	r3, r7
 8003394:	4947      	ldr	r1, [pc, #284]	@ (80034b4 <DisplayAllVariables+0x1ac>)
 8003396:	4618      	mov	r0, r3
 8003398:	f00e f87e 	bl	8011498 <siprintf>
        SendUSBMessage(buffer);
 800339c:	463b      	mov	r3, r7
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fdce 	bl	8002f40 <SendUSBMessage>

        sprintf(buffer, "input_voltage = %f\n", input_voltage);
 80033a4:	4b44      	ldr	r3, [pc, #272]	@ (80034b8 <DisplayAllVariables+0x1b0>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	463b      	mov	r3, r7
 80033aa:	4944      	ldr	r1, [pc, #272]	@ (80034bc <DisplayAllVariables+0x1b4>)
 80033ac:	4618      	mov	r0, r3
 80033ae:	f00e f873 	bl	8011498 <siprintf>
        SendUSBMessage(buffer);
 80033b2:	463b      	mov	r3, r7
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fdc3 	bl	8002f40 <SendUSBMessage>

        sprintf(buffer, "output_voltage = %f\n", output_voltage);
 80033ba:	4b41      	ldr	r3, [pc, #260]	@ (80034c0 <DisplayAllVariables+0x1b8>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	463b      	mov	r3, r7
 80033c0:	4940      	ldr	r1, [pc, #256]	@ (80034c4 <DisplayAllVariables+0x1bc>)
 80033c2:	4618      	mov	r0, r3
 80033c4:	f00e f868 	bl	8011498 <siprintf>
        SendUSBMessage(buffer);
 80033c8:	463b      	mov	r3, r7
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fdb8 	bl	8002f40 <SendUSBMessage>

        sprintf(buffer, "pcb_temp = %f\n", pcb_temp);
 80033d0:	4b3d      	ldr	r3, [pc, #244]	@ (80034c8 <DisplayAllVariables+0x1c0>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	463b      	mov	r3, r7
 80033d6:	493d      	ldr	r1, [pc, #244]	@ (80034cc <DisplayAllVariables+0x1c4>)
 80033d8:	4618      	mov	r0, r3
 80033da:	f00e f85d 	bl	8011498 <siprintf>
        SendUSBMessage(buffer);
 80033de:	463b      	mov	r3, r7
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fdad 	bl	8002f40 <SendUSBMessage>

        sprintf(buffer, "heat_sink_temp = %f\n", heat_sink_temp);
 80033e6:	4b3a      	ldr	r3, [pc, #232]	@ (80034d0 <DisplayAllVariables+0x1c8>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	463b      	mov	r3, r7
 80033ec:	4939      	ldr	r1, [pc, #228]	@ (80034d4 <DisplayAllVariables+0x1cc>)
 80033ee:	4618      	mov	r0, r3
 80033f0:	f00e f852 	bl	8011498 <siprintf>
        SendUSBMessage(buffer);
 80033f4:	463b      	mov	r3, r7
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fda2 	bl	8002f40 <SendUSBMessage>

        sprintf(buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 80033fc:	4b36      	ldr	r3, [pc, #216]	@ (80034d8 <DisplayAllVariables+0x1d0>)
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	463b      	mov	r3, r7
 8003404:	4935      	ldr	r1, [pc, #212]	@ (80034dc <DisplayAllVariables+0x1d4>)
 8003406:	4618      	mov	r0, r3
 8003408:	f00e f846 	bl	8011498 <siprintf>
        SendUSBMessage(buffer);
 800340c:	463b      	mov	r3, r7
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fd96 	bl	8002f40 <SendUSBMessage>

        sprintf(buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 8003414:	4b32      	ldr	r3, [pc, #200]	@ (80034e0 <DisplayAllVariables+0x1d8>)
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	463b      	mov	r3, r7
 800341c:	4931      	ldr	r1, [pc, #196]	@ (80034e4 <DisplayAllVariables+0x1dc>)
 800341e:	4618      	mov	r0, r3
 8003420:	f00e f83a 	bl	8011498 <siprintf>
        SendUSBMessage(buffer);
 8003424:	463b      	mov	r3, r7
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fd8a 	bl	8002f40 <SendUSBMessage>

        sprintf(buffer, "imax2_sum = %f\n", imax2_sum);
 800342c:	4b2e      	ldr	r3, [pc, #184]	@ (80034e8 <DisplayAllVariables+0x1e0>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	463b      	mov	r3, r7
 8003432:	492e      	ldr	r1, [pc, #184]	@ (80034ec <DisplayAllVariables+0x1e4>)
 8003434:	4618      	mov	r0, r3
 8003436:	f00e f82f 	bl	8011498 <siprintf>
        SendUSBMessage(buffer);
 800343a:	463b      	mov	r3, r7
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fd7f 	bl	8002f40 <SendUSBMessage>

        sprintf(buffer, "delay_tr = %f\n", delay_tr);
 8003442:	4b2b      	ldr	r3, [pc, #172]	@ (80034f0 <DisplayAllVariables+0x1e8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd f8a6 	bl	8000598 <__aeabi_f2d>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4638      	mov	r0, r7
 8003452:	4928      	ldr	r1, [pc, #160]	@ (80034f4 <DisplayAllVariables+0x1ec>)
 8003454:	f00e f820 	bl	8011498 <siprintf>
        SendUSBMessage(buffer);
 8003458:	463b      	mov	r3, r7
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fd70 	bl	8002f40 <SendUSBMessage>

        sprintf(buffer, "delay_hc = %f\n", delay_hc);
 8003460:	4b25      	ldr	r3, [pc, #148]	@ (80034f8 <DisplayAllVariables+0x1f0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd f897 	bl	8000598 <__aeabi_f2d>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4638      	mov	r0, r7
 8003470:	4922      	ldr	r1, [pc, #136]	@ (80034fc <DisplayAllVariables+0x1f4>)
 8003472:	f00e f811 	bl	8011498 <siprintf>
        SendUSBMessage(buffer);
 8003476:	463b      	mov	r3, r7
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fd61 	bl	8002f40 <SendUSBMessage>
}
 800347e:	bf00      	nop
 8003480:	3780      	adds	r7, #128	@ 0x80
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000008 	.word	0x20000008
 800348c:	08016b4c 	.word	0x08016b4c
 8003490:	2000000c 	.word	0x2000000c
 8003494:	08016b60 	.word	0x08016b60
 8003498:	20000000 	.word	0x20000000
 800349c:	08016b78 	.word	0x08016b78
 80034a0:	20000a28 	.word	0x20000a28
 80034a4:	08016c5c 	.word	0x08016c5c
 80034a8:	20000a2c 	.word	0x20000a2c
 80034ac:	08016c68 	.word	0x08016c68
 80034b0:	20000a30 	.word	0x20000a30
 80034b4:	08016c74 	.word	0x08016c74
 80034b8:	20000a34 	.word	0x20000a34
 80034bc:	08016c80 	.word	0x08016c80
 80034c0:	20000a4c 	.word	0x20000a4c
 80034c4:	08016c94 	.word	0x08016c94
 80034c8:	20000a38 	.word	0x20000a38
 80034cc:	08016cac 	.word	0x08016cac
 80034d0:	20000a3c 	.word	0x20000a3c
 80034d4:	08016cbc 	.word	0x08016cbc
 80034d8:	20000a24 	.word	0x20000a24
 80034dc:	08016b94 	.word	0x08016b94
 80034e0:	20000a26 	.word	0x20000a26
 80034e4:	08016bc0 	.word	0x08016bc0
 80034e8:	20000a64 	.word	0x20000a64
 80034ec:	08016bec 	.word	0x08016bec
 80034f0:	20000a5c 	.word	0x20000a5c
 80034f4:	08016c0c 	.word	0x08016c0c
 80034f8:	20000a60 	.word	0x20000a60
 80034fc:	08016c2c 	.word	0x08016c2c

08003500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003504:	b672      	cpsid	i
}
 8003506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003508:	bf00      	nop
 800350a:	e7fd      	b.n	8003508 <Error_Handler+0x8>

0800350c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003512:	4b0f      	ldr	r3, [pc, #60]	@ (8003550 <HAL_MspInit+0x44>)
 8003514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003516:	4a0e      	ldr	r2, [pc, #56]	@ (8003550 <HAL_MspInit+0x44>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6613      	str	r3, [r2, #96]	@ 0x60
 800351e:	4b0c      	ldr	r3, [pc, #48]	@ (8003550 <HAL_MspInit+0x44>)
 8003520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	4b09      	ldr	r3, [pc, #36]	@ (8003550 <HAL_MspInit+0x44>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352e:	4a08      	ldr	r2, [pc, #32]	@ (8003550 <HAL_MspInit+0x44>)
 8003530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003534:	6593      	str	r3, [r2, #88]	@ 0x58
 8003536:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <HAL_MspInit+0x44>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003542:	f005 f919 	bl	8008778 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000

08003554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b0a4      	sub	sp, #144	@ 0x90
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800356c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003570:	2254      	movs	r2, #84	@ 0x54
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f00e f81e 	bl	80115b6 <memset>
  if(hadc->Instance==ADC1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003582:	d11c      	bne.n	80035be <HAL_ADC_MspInit+0x6a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003584:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003588:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800358a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800358e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003590:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003594:	4618      	mov	r0, r3
 8003596:	f005 fe2d 	bl	80091f4 <HAL_RCCEx_PeriphCLKConfig>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80035a0:	f7ff ffae 	bl	8003500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80035a4:	4b85      	ldr	r3, [pc, #532]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 80035a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a8:	4a84      	ldr	r2, [pc, #528]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 80035aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80035ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035b0:	4b82      	ldr	r3, [pc, #520]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 80035b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 80035bc:	e183      	b.n	80038c6 <HAL_ADC_MspInit+0x372>
  else if(hadc->Instance==ADC3)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a7f      	ldr	r2, [pc, #508]	@ (80037c0 <HAL_ADC_MspInit+0x26c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	f040 8087 	bne.w	80036d8 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80035ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80035d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80035d4:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035da:	4618      	mov	r0, r3
 80035dc:	f005 fe0a 	bl	80091f4 <HAL_RCCEx_PeriphCLKConfig>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_ADC_MspInit+0x96>
      Error_Handler();
 80035e6:	f7ff ff8b 	bl	8003500 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80035ea:	4b76      	ldr	r3, [pc, #472]	@ (80037c4 <HAL_ADC_MspInit+0x270>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3301      	adds	r3, #1
 80035f0:	4a74      	ldr	r2, [pc, #464]	@ (80037c4 <HAL_ADC_MspInit+0x270>)
 80035f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80035f4:	4b73      	ldr	r3, [pc, #460]	@ (80037c4 <HAL_ADC_MspInit+0x270>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d10b      	bne.n	8003614 <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80035fc:	4b6f      	ldr	r3, [pc, #444]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 80035fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003600:	4a6e      	ldr	r2, [pc, #440]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 8003602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003608:	4b6c      	ldr	r3, [pc, #432]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 800360a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003610:	623b      	str	r3, [r7, #32]
 8003612:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003614:	4b69      	ldr	r3, [pc, #420]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 8003616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003618:	4a68      	ldr	r2, [pc, #416]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 800361a:	f043 0302 	orr.w	r3, r3, #2
 800361e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003620:	4b66      	ldr	r3, [pc, #408]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 8003622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800362c:	4b63      	ldr	r3, [pc, #396]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 800362e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003630:	4a62      	ldr	r2, [pc, #392]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 8003632:	f043 0310 	orr.w	r3, r3, #16
 8003636:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003638:	4b60      	ldr	r3, [pc, #384]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 800363a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS_VREF_1_Pin|HEATSINK_TEMP_Pin;
 8003644:	f242 0302 	movw	r3, #8194	@ 0x2002
 8003648:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800364a:	2303      	movs	r3, #3
 800364c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003656:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800365a:	4619      	mov	r1, r3
 800365c:	485a      	ldr	r0, [pc, #360]	@ (80037c8 <HAL_ADC_MspInit+0x274>)
 800365e:	f003 f8e5 	bl	800682c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PCB_TEMP_Pin|CS_VREF_2_Pin|INPUT_V_ADC_Pin;
 8003662:	f44f 530a 	mov.w	r3, #8832	@ 0x2280
 8003666:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003668:	2303      	movs	r3, #3
 800366a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003674:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003678:	4619      	mov	r1, r3
 800367a:	4854      	ldr	r0, [pc, #336]	@ (80037cc <HAL_ADC_MspInit+0x278>)
 800367c:	f003 f8d6 	bl	800682c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel1;
 8003680:	4b53      	ldr	r3, [pc, #332]	@ (80037d0 <HAL_ADC_MspInit+0x27c>)
 8003682:	4a54      	ldr	r2, [pc, #336]	@ (80037d4 <HAL_ADC_MspInit+0x280>)
 8003684:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003686:	4b52      	ldr	r3, [pc, #328]	@ (80037d0 <HAL_ADC_MspInit+0x27c>)
 8003688:	2225      	movs	r2, #37	@ 0x25
 800368a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800368c:	4b50      	ldr	r3, [pc, #320]	@ (80037d0 <HAL_ADC_MspInit+0x27c>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003692:	4b4f      	ldr	r3, [pc, #316]	@ (80037d0 <HAL_ADC_MspInit+0x27c>)
 8003694:	2200      	movs	r2, #0
 8003696:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003698:	4b4d      	ldr	r3, [pc, #308]	@ (80037d0 <HAL_ADC_MspInit+0x27c>)
 800369a:	2280      	movs	r2, #128	@ 0x80
 800369c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800369e:	4b4c      	ldr	r3, [pc, #304]	@ (80037d0 <HAL_ADC_MspInit+0x27c>)
 80036a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036a4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036a6:	4b4a      	ldr	r3, [pc, #296]	@ (80037d0 <HAL_ADC_MspInit+0x27c>)
 80036a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036ac:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80036ae:	4b48      	ldr	r3, [pc, #288]	@ (80037d0 <HAL_ADC_MspInit+0x27c>)
 80036b0:	2220      	movs	r2, #32
 80036b2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80036b4:	4b46      	ldr	r3, [pc, #280]	@ (80037d0 <HAL_ADC_MspInit+0x27c>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80036ba:	4845      	ldr	r0, [pc, #276]	@ (80037d0 <HAL_ADC_MspInit+0x27c>)
 80036bc:	f002 fe44 	bl	8006348 <HAL_DMA_Init>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_ADC_MspInit+0x176>
      Error_Handler();
 80036c6:	f7ff ff1b 	bl	8003500 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a40      	ldr	r2, [pc, #256]	@ (80037d0 <HAL_ADC_MspInit+0x27c>)
 80036ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80036d0:	4a3f      	ldr	r2, [pc, #252]	@ (80037d0 <HAL_ADC_MspInit+0x27c>)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80036d6:	e0f6      	b.n	80038c6 <HAL_ADC_MspInit+0x372>
  else if(hadc->Instance==ADC4)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a3e      	ldr	r2, [pc, #248]	@ (80037d8 <HAL_ADC_MspInit+0x284>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	f040 8080 	bne.w	80037e4 <HAL_ADC_MspInit+0x290>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80036e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80036ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80036ee:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036f4:	4618      	mov	r0, r3
 80036f6:	f005 fd7d 	bl	80091f4 <HAL_RCCEx_PeriphCLKConfig>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8003700:	f7ff fefe 	bl	8003500 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003704:	4b2f      	ldr	r3, [pc, #188]	@ (80037c4 <HAL_ADC_MspInit+0x270>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	4a2e      	ldr	r2, [pc, #184]	@ (80037c4 <HAL_ADC_MspInit+0x270>)
 800370c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800370e:	4b2d      	ldr	r3, [pc, #180]	@ (80037c4 <HAL_ADC_MspInit+0x270>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d10b      	bne.n	800372e <HAL_ADC_MspInit+0x1da>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003716:	4b29      	ldr	r3, [pc, #164]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 8003718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371a:	4a28      	ldr	r2, [pc, #160]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 800371c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003722:	4b26      	ldr	r3, [pc, #152]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 8003724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800372e:	4b23      	ldr	r3, [pc, #140]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 8003730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003732:	4a22      	ldr	r2, [pc, #136]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 8003734:	f043 0310 	orr.w	r3, r3, #16
 8003738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800373a:	4b20      	ldr	r3, [pc, #128]	@ (80037bc <HAL_ADC_MspInit+0x268>)
 800373c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT_V_ADC_Pin;
 8003746:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800374a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800374c:	2303      	movs	r3, #3
 800374e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003752:	2300      	movs	r3, #0
 8003754:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(OUTPUT_V_ADC_GPIO_Port, &GPIO_InitStruct);
 8003758:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800375c:	4619      	mov	r1, r3
 800375e:	481b      	ldr	r0, [pc, #108]	@ (80037cc <HAL_ADC_MspInit+0x278>)
 8003760:	f003 f864 	bl	800682c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel2;
 8003764:	4b1d      	ldr	r3, [pc, #116]	@ (80037dc <HAL_ADC_MspInit+0x288>)
 8003766:	4a1e      	ldr	r2, [pc, #120]	@ (80037e0 <HAL_ADC_MspInit+0x28c>)
 8003768:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800376a:	4b1c      	ldr	r3, [pc, #112]	@ (80037dc <HAL_ADC_MspInit+0x288>)
 800376c:	2226      	movs	r2, #38	@ 0x26
 800376e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003770:	4b1a      	ldr	r3, [pc, #104]	@ (80037dc <HAL_ADC_MspInit+0x288>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003776:	4b19      	ldr	r3, [pc, #100]	@ (80037dc <HAL_ADC_MspInit+0x288>)
 8003778:	2200      	movs	r2, #0
 800377a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800377c:	4b17      	ldr	r3, [pc, #92]	@ (80037dc <HAL_ADC_MspInit+0x288>)
 800377e:	2280      	movs	r2, #128	@ 0x80
 8003780:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003782:	4b16      	ldr	r3, [pc, #88]	@ (80037dc <HAL_ADC_MspInit+0x288>)
 8003784:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003788:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800378a:	4b14      	ldr	r3, [pc, #80]	@ (80037dc <HAL_ADC_MspInit+0x288>)
 800378c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003790:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8003792:	4b12      	ldr	r3, [pc, #72]	@ (80037dc <HAL_ADC_MspInit+0x288>)
 8003794:	2220      	movs	r2, #32
 8003796:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8003798:	4b10      	ldr	r3, [pc, #64]	@ (80037dc <HAL_ADC_MspInit+0x288>)
 800379a:	2200      	movs	r2, #0
 800379c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800379e:	480f      	ldr	r0, [pc, #60]	@ (80037dc <HAL_ADC_MspInit+0x288>)
 80037a0:	f002 fdd2 	bl	8006348 <HAL_DMA_Init>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_ADC_MspInit+0x25a>
      Error_Handler();
 80037aa:	f7ff fea9 	bl	8003500 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a0a      	ldr	r2, [pc, #40]	@ (80037dc <HAL_ADC_MspInit+0x288>)
 80037b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80037b4:	4a09      	ldr	r2, [pc, #36]	@ (80037dc <HAL_ADC_MspInit+0x288>)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80037ba:	e084      	b.n	80038c6 <HAL_ADC_MspInit+0x372>
 80037bc:	40021000 	.word	0x40021000
 80037c0:	50000400 	.word	0x50000400
 80037c4:	20000b64 	.word	0x20000b64
 80037c8:	48000400 	.word	0x48000400
 80037cc:	48001000 	.word	0x48001000
 80037d0:	2000054c 	.word	0x2000054c
 80037d4:	40020008 	.word	0x40020008
 80037d8:	50000500 	.word	0x50000500
 80037dc:	200005ac 	.word	0x200005ac
 80037e0:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC5)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a39      	ldr	r2, [pc, #228]	@ (80038d0 <HAL_ADC_MspInit+0x37c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d16b      	bne.n	80038c6 <HAL_ADC_MspInit+0x372>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80037ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80037f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80037f8:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037fe:	4618      	mov	r0, r3
 8003800:	f005 fcf8 	bl	80091f4 <HAL_RCCEx_PeriphCLKConfig>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_ADC_MspInit+0x2ba>
      Error_Handler();
 800380a:	f7ff fe79 	bl	8003500 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800380e:	4b31      	ldr	r3, [pc, #196]	@ (80038d4 <HAL_ADC_MspInit+0x380>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3301      	adds	r3, #1
 8003814:	4a2f      	ldr	r2, [pc, #188]	@ (80038d4 <HAL_ADC_MspInit+0x380>)
 8003816:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003818:	4b2e      	ldr	r3, [pc, #184]	@ (80038d4 <HAL_ADC_MspInit+0x380>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d10b      	bne.n	8003838 <HAL_ADC_MspInit+0x2e4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003820:	4b2d      	ldr	r3, [pc, #180]	@ (80038d8 <HAL_ADC_MspInit+0x384>)
 8003822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003824:	4a2c      	ldr	r2, [pc, #176]	@ (80038d8 <HAL_ADC_MspInit+0x384>)
 8003826:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800382a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800382c:	4b2a      	ldr	r3, [pc, #168]	@ (80038d8 <HAL_ADC_MspInit+0x384>)
 800382e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003838:	4b27      	ldr	r3, [pc, #156]	@ (80038d8 <HAL_ADC_MspInit+0x384>)
 800383a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383c:	4a26      	ldr	r2, [pc, #152]	@ (80038d8 <HAL_ADC_MspInit+0x384>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003844:	4b24      	ldr	r3, [pc, #144]	@ (80038d8 <HAL_ADC_MspInit+0x384>)
 8003846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMAX2_SUM_Pin;
 8003850:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003854:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003856:	2303      	movs	r3, #3
 8003858:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385c:	2300      	movs	r3, #0
 800385e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(IMAX2_SUM_GPIO_Port, &GPIO_InitStruct);
 8003862:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003866:	4619      	mov	r1, r3
 8003868:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800386c:	f002 ffde 	bl	800682c <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel3;
 8003870:	4b1a      	ldr	r3, [pc, #104]	@ (80038dc <HAL_ADC_MspInit+0x388>)
 8003872:	4a1b      	ldr	r2, [pc, #108]	@ (80038e0 <HAL_ADC_MspInit+0x38c>)
 8003874:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003876:	4b19      	ldr	r3, [pc, #100]	@ (80038dc <HAL_ADC_MspInit+0x388>)
 8003878:	2227      	movs	r2, #39	@ 0x27
 800387a:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800387c:	4b17      	ldr	r3, [pc, #92]	@ (80038dc <HAL_ADC_MspInit+0x388>)
 800387e:	2200      	movs	r2, #0
 8003880:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003882:	4b16      	ldr	r3, [pc, #88]	@ (80038dc <HAL_ADC_MspInit+0x388>)
 8003884:	2200      	movs	r2, #0
 8003886:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003888:	4b14      	ldr	r3, [pc, #80]	@ (80038dc <HAL_ADC_MspInit+0x388>)
 800388a:	2280      	movs	r2, #128	@ 0x80
 800388c:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800388e:	4b13      	ldr	r3, [pc, #76]	@ (80038dc <HAL_ADC_MspInit+0x388>)
 8003890:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003894:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003896:	4b11      	ldr	r3, [pc, #68]	@ (80038dc <HAL_ADC_MspInit+0x388>)
 8003898:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800389c:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 800389e:	4b0f      	ldr	r3, [pc, #60]	@ (80038dc <HAL_ADC_MspInit+0x388>)
 80038a0:	2220      	movs	r2, #32
 80038a2:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80038a4:	4b0d      	ldr	r3, [pc, #52]	@ (80038dc <HAL_ADC_MspInit+0x388>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80038aa:	480c      	ldr	r0, [pc, #48]	@ (80038dc <HAL_ADC_MspInit+0x388>)
 80038ac:	f002 fd4c 	bl	8006348 <HAL_DMA_Init>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_ADC_MspInit+0x366>
      Error_Handler();
 80038b6:	f7ff fe23 	bl	8003500 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a07      	ldr	r2, [pc, #28]	@ (80038dc <HAL_ADC_MspInit+0x388>)
 80038be:	655a      	str	r2, [r3, #84]	@ 0x54
 80038c0:	4a06      	ldr	r2, [pc, #24]	@ (80038dc <HAL_ADC_MspInit+0x388>)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80038c6:	bf00      	nop
 80038c8:	3790      	adds	r7, #144	@ 0x90
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	50000600 	.word	0x50000600
 80038d4:	20000b64 	.word	0x20000b64
 80038d8:	40021000 	.word	0x40021000
 80038dc:	2000060c 	.word	0x2000060c
 80038e0:	40020030 	.word	0x40020030

080038e4 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0a      	ldr	r2, [pc, #40]	@ (800391c <HAL_CORDIC_MspInit+0x38>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d10b      	bne.n	800390e <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80038f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003920 <HAL_CORDIC_MspInit+0x3c>)
 80038f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fa:	4a09      	ldr	r2, [pc, #36]	@ (8003920 <HAL_CORDIC_MspInit+0x3c>)
 80038fc:	f043 0308 	orr.w	r3, r3, #8
 8003900:	6493      	str	r3, [r2, #72]	@ 0x48
 8003902:	4b07      	ldr	r3, [pc, #28]	@ (8003920 <HAL_CORDIC_MspInit+0x3c>)
 8003904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 800390e:	bf00      	nop
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40020c00 	.word	0x40020c00
 8003920:	40021000 	.word	0x40021000

08003924 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08c      	sub	sp, #48	@ 0x30
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800392c:	f107 031c 	add.w	r3, r7, #28
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	605a      	str	r2, [r3, #4]
 8003936:	609a      	str	r2, [r3, #8]
 8003938:	60da      	str	r2, [r3, #12]
 800393a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a5b      	ldr	r2, [pc, #364]	@ (8003ab0 <HAL_DAC_MspInit+0x18c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d159      	bne.n	80039fa <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003946:	4b5b      	ldr	r3, [pc, #364]	@ (8003ab4 <HAL_DAC_MspInit+0x190>)
 8003948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800394a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ab4 <HAL_DAC_MspInit+0x190>)
 800394c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003952:	4b58      	ldr	r3, [pc, #352]	@ (8003ab4 <HAL_DAC_MspInit+0x190>)
 8003954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800395e:	4b55      	ldr	r3, [pc, #340]	@ (8003ab4 <HAL_DAC_MspInit+0x190>)
 8003960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003962:	4a54      	ldr	r2, [pc, #336]	@ (8003ab4 <HAL_DAC_MspInit+0x190>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800396a:	4b52      	ldr	r3, [pc, #328]	@ (8003ab4 <HAL_DAC_MspInit+0x190>)
 800396c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = IMAX_Pin|IMAX2_Pin;
 8003976:	2330      	movs	r3, #48	@ 0x30
 8003978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800397a:	2303      	movs	r3, #3
 800397c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397e:	2300      	movs	r3, #0
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003982:	f107 031c 	add.w	r3, r7, #28
 8003986:	4619      	mov	r1, r3
 8003988:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800398c:	f002 ff4e 	bl	800682c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 8003990:	4b49      	ldr	r3, [pc, #292]	@ (8003ab8 <HAL_DAC_MspInit+0x194>)
 8003992:	4a4a      	ldr	r2, [pc, #296]	@ (8003abc <HAL_DAC_MspInit+0x198>)
 8003994:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003996:	4b48      	ldr	r3, [pc, #288]	@ (8003ab8 <HAL_DAC_MspInit+0x194>)
 8003998:	2206      	movs	r2, #6
 800399a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800399c:	4b46      	ldr	r3, [pc, #280]	@ (8003ab8 <HAL_DAC_MspInit+0x194>)
 800399e:	2210      	movs	r2, #16
 80039a0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80039a2:	4b45      	ldr	r3, [pc, #276]	@ (8003ab8 <HAL_DAC_MspInit+0x194>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80039a8:	4b43      	ldr	r3, [pc, #268]	@ (8003ab8 <HAL_DAC_MspInit+0x194>)
 80039aa:	2280      	movs	r2, #128	@ 0x80
 80039ac:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039ae:	4b42      	ldr	r3, [pc, #264]	@ (8003ab8 <HAL_DAC_MspInit+0x194>)
 80039b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039b4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80039b6:	4b40      	ldr	r3, [pc, #256]	@ (8003ab8 <HAL_DAC_MspInit+0x194>)
 80039b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039bc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80039be:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab8 <HAL_DAC_MspInit+0x194>)
 80039c0:	2220      	movs	r2, #32
 80039c2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80039c4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ab8 <HAL_DAC_MspInit+0x194>)
 80039c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80039cc:	483a      	ldr	r0, [pc, #232]	@ (8003ab8 <HAL_DAC_MspInit+0x194>)
 80039ce:	f002 fcbb 	bl	8006348 <HAL_DMA_Init>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80039d8:	f7ff fd92 	bl	8003500 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a36      	ldr	r2, [pc, #216]	@ (8003ab8 <HAL_DAC_MspInit+0x194>)
 80039e0:	609a      	str	r2, [r3, #8]
 80039e2:	4a35      	ldr	r2, [pc, #212]	@ (8003ab8 <HAL_DAC_MspInit+0x194>)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80039e8:	2200      	movs	r2, #0
 80039ea:	2100      	movs	r1, #0
 80039ec:	2036      	movs	r0, #54	@ 0x36
 80039ee:	f002 f998 	bl	8005d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80039f2:	2036      	movs	r0, #54	@ 0x36
 80039f4:	f002 f9af 	bl	8005d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 80039f8:	e055      	b.n	8003aa6 <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC2)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a30      	ldr	r2, [pc, #192]	@ (8003ac0 <HAL_DAC_MspInit+0x19c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d150      	bne.n	8003aa6 <HAL_DAC_MspInit+0x182>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003a04:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab4 <HAL_DAC_MspInit+0x190>)
 8003a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a08:	4a2a      	ldr	r2, [pc, #168]	@ (8003ab4 <HAL_DAC_MspInit+0x190>)
 8003a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a10:	4b28      	ldr	r3, [pc, #160]	@ (8003ab4 <HAL_DAC_MspInit+0x190>)
 8003a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1c:	4b25      	ldr	r3, [pc, #148]	@ (8003ab4 <HAL_DAC_MspInit+0x190>)
 8003a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a20:	4a24      	ldr	r2, [pc, #144]	@ (8003ab4 <HAL_DAC_MspInit+0x190>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a28:	4b22      	ldr	r3, [pc, #136]	@ (8003ab4 <HAL_DAC_MspInit+0x190>)
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMIN_Pin;
 8003a34:	2340      	movs	r3, #64	@ 0x40
 8003a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMIN_GPIO_Port, &GPIO_InitStruct);
 8003a40:	f107 031c 	add.w	r3, r7, #28
 8003a44:	4619      	mov	r1, r3
 8003a46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a4a:	f002 feef 	bl	800682c <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel5;
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac4 <HAL_DAC_MspInit+0x1a0>)
 8003a50:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac8 <HAL_DAC_MspInit+0x1a4>)
 8003a52:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8003a54:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac4 <HAL_DAC_MspInit+0x1a0>)
 8003a56:	2229      	movs	r2, #41	@ 0x29
 8003a58:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac4 <HAL_DAC_MspInit+0x1a0>)
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a60:	4b18      	ldr	r3, [pc, #96]	@ (8003ac4 <HAL_DAC_MspInit+0x1a0>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003a66:	4b17      	ldr	r3, [pc, #92]	@ (8003ac4 <HAL_DAC_MspInit+0x1a0>)
 8003a68:	2280      	movs	r2, #128	@ 0x80
 8003a6a:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a6c:	4b15      	ldr	r3, [pc, #84]	@ (8003ac4 <HAL_DAC_MspInit+0x1a0>)
 8003a6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a72:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a74:	4b13      	ldr	r3, [pc, #76]	@ (8003ac4 <HAL_DAC_MspInit+0x1a0>)
 8003a76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a7a:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8003a7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ac4 <HAL_DAC_MspInit+0x1a0>)
 8003a7e:	2220      	movs	r2, #32
 8003a80:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003a82:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <HAL_DAC_MspInit+0x1a0>)
 8003a84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8003a8a:	480e      	ldr	r0, [pc, #56]	@ (8003ac4 <HAL_DAC_MspInit+0x1a0>)
 8003a8c:	f002 fc5c 	bl	8006348 <HAL_DMA_Init>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_DAC_MspInit+0x176>
      Error_Handler();
 8003a96:	f7ff fd33 	bl	8003500 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a09      	ldr	r2, [pc, #36]	@ (8003ac4 <HAL_DAC_MspInit+0x1a0>)
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	4a08      	ldr	r2, [pc, #32]	@ (8003ac4 <HAL_DAC_MspInit+0x1a0>)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003aa6:	bf00      	nop
 8003aa8:	3730      	adds	r7, #48	@ 0x30
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	50000800 	.word	0x50000800
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	200006bc 	.word	0x200006bc
 8003abc:	40020044 	.word	0x40020044
 8003ac0:	50000c00 	.word	0x50000c00
 8003ac4:	2000071c 	.word	0x2000071c
 8003ac8:	40020058 	.word	0x40020058

08003acc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a16      	ldr	r2, [pc, #88]	@ (8003b34 <HAL_TIM_PWM_MspInit+0x68>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d114      	bne.n	8003b08 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ade:	4b16      	ldr	r3, [pc, #88]	@ (8003b38 <HAL_TIM_PWM_MspInit+0x6c>)
 8003ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae2:	4a15      	ldr	r2, [pc, #84]	@ (8003b38 <HAL_TIM_PWM_MspInit+0x6c>)
 8003ae4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ae8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003aea:	4b13      	ldr	r3, [pc, #76]	@ (8003b38 <HAL_TIM_PWM_MspInit+0x6c>)
 8003aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	2100      	movs	r1, #0
 8003afa:	2018      	movs	r0, #24
 8003afc:	f002 f911 	bl	8005d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003b00:	2018      	movs	r0, #24
 8003b02:	f002 f928 	bl	8005d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003b06:	e010      	b.n	8003b2a <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b3c <HAL_TIM_PWM_MspInit+0x70>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d10b      	bne.n	8003b2a <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b12:	4b09      	ldr	r3, [pc, #36]	@ (8003b38 <HAL_TIM_PWM_MspInit+0x6c>)
 8003b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b16:	4a08      	ldr	r2, [pc, #32]	@ (8003b38 <HAL_TIM_PWM_MspInit+0x6c>)
 8003b18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b1e:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <HAL_TIM_PWM_MspInit+0x6c>)
 8003b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
}
 8003b2a:	bf00      	nop
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40013400 	.word	0x40013400

08003b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a35      	ldr	r2, [pc, #212]	@ (8003c24 <HAL_TIM_Base_MspInit+0xe4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10c      	bne.n	8003b6c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b52:	4b35      	ldr	r3, [pc, #212]	@ (8003c28 <HAL_TIM_Base_MspInit+0xe8>)
 8003b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b56:	4a34      	ldr	r2, [pc, #208]	@ (8003c28 <HAL_TIM_Base_MspInit+0xe8>)
 8003b58:	f043 0304 	orr.w	r3, r3, #4
 8003b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b5e:	4b32      	ldr	r3, [pc, #200]	@ (8003c28 <HAL_TIM_Base_MspInit+0xe8>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003b6a:	e056      	b.n	8003c1a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a2e      	ldr	r2, [pc, #184]	@ (8003c2c <HAL_TIM_Base_MspInit+0xec>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d114      	bne.n	8003ba0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b76:	4b2c      	ldr	r3, [pc, #176]	@ (8003c28 <HAL_TIM_Base_MspInit+0xe8>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8003c28 <HAL_TIM_Base_MspInit+0xe8>)
 8003b7c:	f043 0310 	orr.w	r3, r3, #16
 8003b80:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b82:	4b29      	ldr	r3, [pc, #164]	@ (8003c28 <HAL_TIM_Base_MspInit+0xe8>)
 8003b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2100      	movs	r1, #0
 8003b92:	2036      	movs	r0, #54	@ 0x36
 8003b94:	f002 f8c5 	bl	8005d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b98:	2036      	movs	r0, #54	@ 0x36
 8003b9a:	f002 f8dc 	bl	8005d56 <HAL_NVIC_EnableIRQ>
}
 8003b9e:	e03c      	b.n	8003c1a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM7)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a22      	ldr	r2, [pc, #136]	@ (8003c30 <HAL_TIM_Base_MspInit+0xf0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003baa:	4b1f      	ldr	r3, [pc, #124]	@ (8003c28 <HAL_TIM_Base_MspInit+0xe8>)
 8003bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bae:	4a1e      	ldr	r2, [pc, #120]	@ (8003c28 <HAL_TIM_Base_MspInit+0xe8>)
 8003bb0:	f043 0320 	orr.w	r3, r3, #32
 8003bb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c28 <HAL_TIM_Base_MspInit+0xe8>)
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	697b      	ldr	r3, [r7, #20]
}
 8003bc2:	e02a      	b.n	8003c1a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM15)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c34 <HAL_TIM_Base_MspInit+0xf4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d114      	bne.n	8003bf8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003bce:	4b16      	ldr	r3, [pc, #88]	@ (8003c28 <HAL_TIM_Base_MspInit+0xe8>)
 8003bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd2:	4a15      	ldr	r2, [pc, #84]	@ (8003c28 <HAL_TIM_Base_MspInit+0xe8>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bda:	4b13      	ldr	r3, [pc, #76]	@ (8003c28 <HAL_TIM_Base_MspInit+0xe8>)
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003be6:	2200      	movs	r2, #0
 8003be8:	2100      	movs	r1, #0
 8003bea:	2018      	movs	r0, #24
 8003bec:	f002 f899 	bl	8005d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003bf0:	2018      	movs	r0, #24
 8003bf2:	f002 f8b0 	bl	8005d56 <HAL_NVIC_EnableIRQ>
}
 8003bf6:	e010      	b.n	8003c1a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM16)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a0e      	ldr	r2, [pc, #56]	@ (8003c38 <HAL_TIM_Base_MspInit+0xf8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d10b      	bne.n	8003c1a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003c02:	4b09      	ldr	r3, [pc, #36]	@ (8003c28 <HAL_TIM_Base_MspInit+0xe8>)
 8003c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c06:	4a08      	ldr	r2, [pc, #32]	@ (8003c28 <HAL_TIM_Base_MspInit+0xe8>)
 8003c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c0e:	4b06      	ldr	r3, [pc, #24]	@ (8003c28 <HAL_TIM_Base_MspInit+0xe8>)
 8003c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
}
 8003c1a:	bf00      	nop
 8003c1c:	3720      	adds	r7, #32
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40000800 	.word	0x40000800
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40001000 	.word	0x40001000
 8003c30:	40001400 	.word	0x40001400
 8003c34:	40014000 	.word	0x40014000
 8003c38:	40014400 	.word	0x40014400

08003c3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	@ 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c44:	f107 0314 	add.w	r3, r7, #20
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a33      	ldr	r2, [pc, #204]	@ (8003d28 <HAL_TIM_MspPostInit+0xec>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d11c      	bne.n	8003c98 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c5e:	4b33      	ldr	r3, [pc, #204]	@ (8003d2c <HAL_TIM_MspPostInit+0xf0>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c62:	4a32      	ldr	r2, [pc, #200]	@ (8003d2c <HAL_TIM_MspPostInit+0xf0>)
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c6a:	4b30      	ldr	r3, [pc, #192]	@ (8003d2c <HAL_TIM_MspPostInit+0xf0>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DEADTIME_TR_Pin;
 8003c76:	2301      	movs	r3, #1
 8003c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c82:	2300      	movs	r3, #0
 8003c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003c86:	2302      	movs	r3, #2
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_TR_GPIO_Port, &GPIO_InitStruct);
 8003c8a:	f107 0314 	add.w	r3, r7, #20
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4827      	ldr	r0, [pc, #156]	@ (8003d30 <HAL_TIM_MspPostInit+0xf4>)
 8003c92:	f002 fdcb 	bl	800682c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003c96:	e043      	b.n	8003d20 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a25      	ldr	r2, [pc, #148]	@ (8003d34 <HAL_TIM_MspPostInit+0xf8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d11d      	bne.n	8003cde <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ca2:	4b22      	ldr	r3, [pc, #136]	@ (8003d2c <HAL_TIM_MspPostInit+0xf0>)
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca6:	4a21      	ldr	r2, [pc, #132]	@ (8003d2c <HAL_TIM_MspPostInit+0xf0>)
 8003ca8:	f043 0308 	orr.w	r3, r3, #8
 8003cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cae:	4b1f      	ldr	r3, [pc, #124]	@ (8003d2c <HAL_TIM_MspPostInit+0xf0>)
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8003cba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4818      	ldr	r0, [pc, #96]	@ (8003d38 <HAL_TIM_MspPostInit+0xfc>)
 8003cd8:	f002 fda8 	bl	800682c <HAL_GPIO_Init>
}
 8003cdc:	e020      	b.n	8003d20 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <HAL_TIM_MspPostInit+0x100>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d11b      	bne.n	8003d20 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ce8:	4b10      	ldr	r3, [pc, #64]	@ (8003d2c <HAL_TIM_MspPostInit+0xf0>)
 8003cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cec:	4a0f      	ldr	r2, [pc, #60]	@ (8003d2c <HAL_TIM_MspPostInit+0xf0>)
 8003cee:	f043 0304 	orr.w	r3, r3, #4
 8003cf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8003d2c <HAL_TIM_MspPostInit+0xf0>)
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEADTIME_HC_Pin;
 8003d00:	2380      	movs	r3, #128	@ 0x80
 8003d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d04:	2302      	movs	r3, #2
 8003d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003d10:	2304      	movs	r3, #4
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_HC_GPIO_Port, &GPIO_InitStruct);
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4805      	ldr	r0, [pc, #20]	@ (8003d30 <HAL_TIM_MspPostInit+0xf4>)
 8003d1c:	f002 fd86 	bl	800682c <HAL_GPIO_Init>
}
 8003d20:	bf00      	nop
 8003d22:	3728      	adds	r7, #40	@ 0x28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	48000800 	.word	0x48000800
 8003d34:	40000800 	.word	0x40000800
 8003d38:	48000c00 	.word	0x48000c00
 8003d3c:	40013400 	.word	0x40013400

08003d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b09e      	sub	sp, #120	@ 0x78
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d58:	f107 0310 	add.w	r3, r7, #16
 8003d5c:	2254      	movs	r2, #84	@ 0x54
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f00d fc28 	bl	80115b6 <memset>
  if(huart->Instance==UART4)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003de8 <HAL_UART_MspInit+0xa8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d136      	bne.n	8003dde <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003d70:	2308      	movs	r3, #8
 8003d72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_HSI;
 8003d74:	2380      	movs	r3, #128	@ 0x80
 8003d76:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d78:	f107 0310 	add.w	r3, r7, #16
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f005 fa39 	bl	80091f4 <HAL_RCCEx_PeriphCLKConfig>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003d88:	f7ff fbba 	bl	8003500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003d8c:	4b17      	ldr	r3, [pc, #92]	@ (8003dec <HAL_UART_MspInit+0xac>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d90:	4a16      	ldr	r2, [pc, #88]	@ (8003dec <HAL_UART_MspInit+0xac>)
 8003d92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d98:	4b14      	ldr	r3, [pc, #80]	@ (8003dec <HAL_UART_MspInit+0xac>)
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003da4:	4b11      	ldr	r3, [pc, #68]	@ (8003dec <HAL_UART_MspInit+0xac>)
 8003da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da8:	4a10      	ldr	r2, [pc, #64]	@ (8003dec <HAL_UART_MspInit+0xac>)
 8003daa:	f043 0304 	orr.w	r3, r3, #4
 8003dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003db0:	4b0e      	ldr	r3, [pc, #56]	@ (8003dec <HAL_UART_MspInit+0xac>)
 8003db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003dbc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003dc0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003dce:	2305      	movs	r3, #5
 8003dd0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dd2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4805      	ldr	r0, [pc, #20]	@ (8003df0 <HAL_UART_MspInit+0xb0>)
 8003dda:	f002 fd27 	bl	800682c <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8003dde:	bf00      	nop
 8003de0:	3778      	adds	r7, #120	@ 0x78
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40004c00 	.word	0x40004c00
 8003dec:	40021000 	.word	0x40021000
 8003df0:	48000800 	.word	0x48000800

08003df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003df8:	bf00      	nop
 8003dfa:	e7fd      	b.n	8003df8 <NMI_Handler+0x4>

08003dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <HardFault_Handler+0x4>

08003e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e08:	bf00      	nop
 8003e0a:	e7fd      	b.n	8003e08 <MemManage_Handler+0x4>

08003e0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e10:	bf00      	nop
 8003e12:	e7fd      	b.n	8003e10 <BusFault_Handler+0x4>

08003e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e18:	bf00      	nop
 8003e1a:	e7fd      	b.n	8003e18 <UsageFault_Handler+0x4>

08003e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e20:	bf00      	nop
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e4a:	f000 f9af 	bl	80041ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003e58:	4802      	ldr	r0, [pc, #8]	@ (8003e64 <DMA1_Channel1_IRQHandler+0x10>)
 8003e5a:	f002 fb98 	bl	800658e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	2000054c 	.word	0x2000054c

08003e68 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8003e6c:	4802      	ldr	r0, [pc, #8]	@ (8003e78 <DMA1_Channel2_IRQHandler+0x10>)
 8003e6e:	f002 fb8e 	bl	800658e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200005ac 	.word	0x200005ac

08003e7c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8003e80:	4802      	ldr	r0, [pc, #8]	@ (8003e8c <DMA1_Channel3_IRQHandler+0x10>)
 8003e82:	f002 fb84 	bl	800658e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	2000060c 	.word	0x2000060c

08003e90 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003e94:	4802      	ldr	r0, [pc, #8]	@ (8003ea0 <DMA1_Channel4_IRQHandler+0x10>)
 8003e96:	f002 fb7a 	bl	800658e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	200006bc 	.word	0x200006bc

08003ea4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8003ea8:	4802      	ldr	r0, [pc, #8]	@ (8003eb4 <DMA1_Channel5_IRQHandler+0x10>)
 8003eaa:	f002 fb70 	bl	800658e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	2000071c 	.word	0x2000071c

08003eb8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003ebc:	4802      	ldr	r0, [pc, #8]	@ (8003ec8 <USB_LP_IRQHandler+0x10>)
 8003ebe:	f002 ff71 	bl	8006da4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20002044 	.word	0x20002044

08003ecc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ed0:	4803      	ldr	r0, [pc, #12]	@ (8003ee0 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8003ed2:	f005 feb5 	bl	8009c40 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8003ed6:	4803      	ldr	r0, [pc, #12]	@ (8003ee4 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8003ed8:	f005 feb2 	bl	8009c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003edc:	bf00      	nop
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	2000077c 	.word	0x2000077c
 8003ee4:	200008f8 	.word	0x200008f8

08003ee8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
					HEAT_SINK_TEMP = (ADC3_DMA_BUFFER[4]/4096)*3.3;//(Low_pass_filter(ADC3_DMA_BUFFER[4], HEAT_SINK_TEMP)/4096)*3.3;
					FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
					}*/

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003eec:	4803      	ldr	r0, [pc, #12]	@ (8003efc <TIM6_DAC_IRQHandler+0x14>)
 8003eee:	f005 fea7 	bl	8009c40 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003ef2:	4803      	ldr	r0, [pc, #12]	@ (8003f00 <TIM6_DAC_IRQHandler+0x18>)
 8003ef4:	f001 ffd8 	bl	8005ea8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ef8:	bf00      	nop
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20000814 	.word	0x20000814
 8003f00:	20000694 	.word	0x20000694

08003f04 <_getpid>:
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	2301      	movs	r3, #1
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <_kill>:
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
 8003f1e:	f00d fbaf 	bl	8011680 <__errno>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2216      	movs	r2, #22
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <_exit>:
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff ffe7 	bl	8003f14 <_kill>
 8003f46:	bf00      	nop
 8003f48:	e7fd      	b.n	8003f46 <_exit+0x12>

08003f4a <_read>:
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e00a      	b.n	8003f72 <_read+0x28>
 8003f5c:	f3af 8000 	nop.w
 8003f60:	4601      	mov	r1, r0
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	60ba      	str	r2, [r7, #8]
 8003f68:	b2ca      	uxtb	r2, r1
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	dbf0      	blt.n	8003f5c <_read+0x12>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <_write>:
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e009      	b.n	8003faa <_write+0x26>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	60ba      	str	r2, [r7, #8]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f3af 8000 	nop.w
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	dbf1      	blt.n	8003f96 <_write+0x12>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <_close>:
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <_fstat>:
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <_isatty>:
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <_lseek>:
 800400a:	b480      	push	{r7}
 800400c:	b085      	sub	sp, #20
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	2300      	movs	r3, #0
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <_sbrk>:
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	4a14      	ldr	r2, [pc, #80]	@ (8004080 <_sbrk+0x5c>)
 800402e:	4b15      	ldr	r3, [pc, #84]	@ (8004084 <_sbrk+0x60>)
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	4b13      	ldr	r3, [pc, #76]	@ (8004088 <_sbrk+0x64>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <_sbrk+0x22>
 8004040:	4b11      	ldr	r3, [pc, #68]	@ (8004088 <_sbrk+0x64>)
 8004042:	4a12      	ldr	r2, [pc, #72]	@ (800408c <_sbrk+0x68>)
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	4b10      	ldr	r3, [pc, #64]	@ (8004088 <_sbrk+0x64>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4413      	add	r3, r2
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	429a      	cmp	r2, r3
 8004052:	d207      	bcs.n	8004064 <_sbrk+0x40>
 8004054:	f00d fb14 	bl	8011680 <__errno>
 8004058:	4603      	mov	r3, r0
 800405a:	220c      	movs	r2, #12
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f04f 33ff 	mov.w	r3, #4294967295
 8004062:	e009      	b.n	8004078 <_sbrk+0x54>
 8004064:	4b08      	ldr	r3, [pc, #32]	@ (8004088 <_sbrk+0x64>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	4b07      	ldr	r3, [pc, #28]	@ (8004088 <_sbrk+0x64>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	4a05      	ldr	r2, [pc, #20]	@ (8004088 <_sbrk+0x64>)
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20020000 	.word	0x20020000
 8004084:	00000400 	.word	0x00000400
 8004088:	20000b68 	.word	0x20000b68
 800408c:	20002690 	.word	0x20002690

08004090 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004094:	4b06      	ldr	r3, [pc, #24]	@ (80040b0 <SystemInit+0x20>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409a:	4a05      	ldr	r2, [pc, #20]	@ (80040b0 <SystemInit+0x20>)
 800409c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <Reset_Handler>:
 80040b4:	480d      	ldr	r0, [pc, #52]	@ (80040ec <LoopForever+0x2>)
 80040b6:	4685      	mov	sp, r0
 80040b8:	f7ff ffea 	bl	8004090 <SystemInit>
 80040bc:	480c      	ldr	r0, [pc, #48]	@ (80040f0 <LoopForever+0x6>)
 80040be:	490d      	ldr	r1, [pc, #52]	@ (80040f4 <LoopForever+0xa>)
 80040c0:	4a0d      	ldr	r2, [pc, #52]	@ (80040f8 <LoopForever+0xe>)
 80040c2:	2300      	movs	r3, #0
 80040c4:	e002      	b.n	80040cc <LoopCopyDataInit>

080040c6 <CopyDataInit>:
 80040c6:	58d4      	ldr	r4, [r2, r3]
 80040c8:	50c4      	str	r4, [r0, r3]
 80040ca:	3304      	adds	r3, #4

080040cc <LoopCopyDataInit>:
 80040cc:	18c4      	adds	r4, r0, r3
 80040ce:	428c      	cmp	r4, r1
 80040d0:	d3f9      	bcc.n	80040c6 <CopyDataInit>
 80040d2:	4a0a      	ldr	r2, [pc, #40]	@ (80040fc <LoopForever+0x12>)
 80040d4:	4c0a      	ldr	r4, [pc, #40]	@ (8004100 <LoopForever+0x16>)
 80040d6:	2300      	movs	r3, #0
 80040d8:	e001      	b.n	80040de <LoopFillZerobss>

080040da <FillZerobss>:
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	3204      	adds	r2, #4

080040de <LoopFillZerobss>:
 80040de:	42a2      	cmp	r2, r4
 80040e0:	d3fb      	bcc.n	80040da <FillZerobss>
 80040e2:	f00d fad3 	bl	801168c <__libc_init_array>
 80040e6:	f7fc ffa5 	bl	8001034 <main>

080040ea <LoopForever>:
 80040ea:	e7fe      	b.n	80040ea <LoopForever>
 80040ec:	20020000 	.word	0x20020000
 80040f0:	20000000 	.word	0x20000000
 80040f4:	20000380 	.word	0x20000380
 80040f8:	080171f8 	.word	0x080171f8
 80040fc:	20000380 	.word	0x20000380
 8004100:	2000268c 	.word	0x2000268c

08004104 <ADC1_2_IRQHandler>:
 8004104:	e7fe      	b.n	8004104 <ADC1_2_IRQHandler>

08004106 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004110:	2003      	movs	r0, #3
 8004112:	f001 fdfb 	bl	8005d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004116:	2000      	movs	r0, #0
 8004118:	f000 f80e 	bl	8004138 <HAL_InitTick>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	71fb      	strb	r3, [r7, #7]
 8004126:	e001      	b.n	800412c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004128:	f7ff f9f0 	bl	800350c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800412c:	79fb      	ldrb	r3, [r7, #7]

}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004144:	4b16      	ldr	r3, [pc, #88]	@ (80041a0 <HAL_InitTick+0x68>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d022      	beq.n	8004192 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800414c:	4b15      	ldr	r3, [pc, #84]	@ (80041a4 <HAL_InitTick+0x6c>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4b13      	ldr	r3, [pc, #76]	@ (80041a0 <HAL_InitTick+0x68>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004158:	fbb1 f3f3 	udiv	r3, r1, r3
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	4618      	mov	r0, r3
 8004162:	f001 fe06 	bl	8005d72 <HAL_SYSTICK_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10f      	bne.n	800418c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b0f      	cmp	r3, #15
 8004170:	d809      	bhi.n	8004186 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004172:	2200      	movs	r2, #0
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	f04f 30ff 	mov.w	r0, #4294967295
 800417a:	f001 fdd2 	bl	8005d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800417e:	4a0a      	ldr	r2, [pc, #40]	@ (80041a8 <HAL_InitTick+0x70>)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	e007      	b.n	8004196 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
 800418a:	e004      	b.n	8004196 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	e001      	b.n	8004196 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	2000002c 	.word	0x2000002c
 80041a4:	20000024 	.word	0x20000024
 80041a8:	20000028 	.word	0x20000028

080041ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041b0:	4b05      	ldr	r3, [pc, #20]	@ (80041c8 <HAL_IncTick+0x1c>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <HAL_IncTick+0x20>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4413      	add	r3, r2
 80041ba:	4a03      	ldr	r2, [pc, #12]	@ (80041c8 <HAL_IncTick+0x1c>)
 80041bc:	6013      	str	r3, [r2, #0]
}
 80041be:	bf00      	nop
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	20000b6c 	.word	0x20000b6c
 80041cc:	2000002c 	.word	0x2000002c

080041d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return uwTick;
 80041d4:	4b03      	ldr	r3, [pc, #12]	@ (80041e4 <HAL_GetTick+0x14>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000b6c 	.word	0x20000b6c

080041e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041f0:	f7ff ffee 	bl	80041d0 <HAL_GetTick>
 80041f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d004      	beq.n	800420c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004202:	4b09      	ldr	r3, [pc, #36]	@ (8004228 <HAL_Delay+0x40>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4413      	add	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800420c:	bf00      	nop
 800420e:	f7ff ffdf 	bl	80041d0 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	429a      	cmp	r2, r3
 800421c:	d8f7      	bhi.n	800420e <HAL_Delay+0x26>
  {
  }
}
 800421e:	bf00      	nop
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	2000002c 	.word	0x2000002c

0800422c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	609a      	str	r2, [r3, #8]
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	609a      	str	r2, [r3, #8]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3360      	adds	r3, #96	@ 0x60
 80042a6:	461a      	mov	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b08      	ldr	r3, [pc, #32]	@ (80042d8 <LL_ADC_SetOffset+0x44>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80042cc:	bf00      	nop
 80042ce:	371c      	adds	r7, #28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	03fff000 	.word	0x03fff000

080042dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3360      	adds	r3, #96	@ 0x60
 80042ea:	461a      	mov	r2, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3360      	adds	r3, #96	@ 0x60
 8004318:	461a      	mov	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	431a      	orrs	r2, r3
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004332:	bf00      	nop
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800433e:	b480      	push	{r7}
 8004340:	b087      	sub	sp, #28
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3360      	adds	r3, #96	@ 0x60
 800434e:	461a      	mov	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	431a      	orrs	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004368:	bf00      	nop
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3360      	adds	r3, #96	@ 0x60
 8004384:	461a      	mov	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	431a      	orrs	r2, r3
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	615a      	str	r2, [r3, #20]
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b087      	sub	sp, #28
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3330      	adds	r3, #48	@ 0x30
 8004406:	461a      	mov	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	0a1b      	lsrs	r3, r3, #8
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	4413      	add	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	211f      	movs	r1, #31
 8004422:	fa01 f303 	lsl.w	r3, r1, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	401a      	ands	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	0e9b      	lsrs	r3, r3, #26
 800442e:	f003 011f 	and.w	r1, r3, #31
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	fa01 f303 	lsl.w	r3, r1, r3
 800443c:	431a      	orrs	r2, r3
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800444e:	b480      	push	{r7}
 8004450:	b087      	sub	sp, #28
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3314      	adds	r3, #20
 800445e:	461a      	mov	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	0e5b      	lsrs	r3, r3, #25
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	4413      	add	r3, r2
 800446c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	0d1b      	lsrs	r3, r3, #20
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	2107      	movs	r1, #7
 800447c:	fa01 f303 	lsl.w	r3, r1, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	401a      	ands	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	0d1b      	lsrs	r3, r3, #20
 8004488:	f003 031f 	and.w	r3, r3, #31
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	fa01 f303 	lsl.w	r3, r1, r3
 8004492:	431a      	orrs	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004498:	bf00      	nop
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044bc:	43db      	mvns	r3, r3
 80044be:	401a      	ands	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f003 0318 	and.w	r3, r3, #24
 80044c6:	4908      	ldr	r1, [pc, #32]	@ (80044e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80044c8:	40d9      	lsrs	r1, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	400b      	ands	r3, r1
 80044ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d2:	431a      	orrs	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	0007ffff 	.word	0x0007ffff

080044ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 031f 	and.w	r3, r3, #31
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004518:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6093      	str	r3, [r2, #8]
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800453c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004540:	d101      	bne.n	8004546 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004564:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004568:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800458c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004590:	d101      	bne.n	8004596 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045b8:	f043 0201 	orr.w	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045e0:	f043 0202 	orr.w	r2, r3, #2
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <LL_ADC_IsEnabled+0x18>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <LL_ADC_IsEnabled+0x1a>
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b02      	cmp	r3, #2
 800462c:	d101      	bne.n	8004632 <LL_ADC_IsDisableOngoing+0x18>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <LL_ADC_IsDisableOngoing+0x1a>
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004650:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004654:	f043 0204 	orr.w	r2, r3, #4
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b04      	cmp	r3, #4
 800467a:	d101      	bne.n	8004680 <LL_ADC_REG_IsConversionOngoing+0x18>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d101      	bne.n	80046a6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046b4:	b590      	push	{r4, r7, lr}
 80046b6:	b089      	sub	sp, #36	@ 0x24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e1a9      	b.n	8004a22 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7fe ff39 	bl	8003554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff19 	bl	800452c <LL_ADC_IsDeepPowerDownEnabled>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d004      	beq.n	800470a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff feff 	bl	8004508 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff ff34 	bl	800457c <LL_ADC_IsInternalRegulatorEnabled>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d115      	bne.n	8004746 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff ff18 	bl	8004554 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004724:	4b9c      	ldr	r3, [pc, #624]	@ (8004998 <HAL_ADC_Init+0x2e4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	099b      	lsrs	r3, r3, #6
 800472a:	4a9c      	ldr	r2, [pc, #624]	@ (800499c <HAL_ADC_Init+0x2e8>)
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	099b      	lsrs	r3, r3, #6
 8004732:	3301      	adds	r3, #1
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004738:	e002      	b.n	8004740 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3b01      	subs	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f9      	bne.n	800473a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff ff16 	bl	800457c <LL_ADC_IsInternalRegulatorEnabled>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10d      	bne.n	8004772 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475a:	f043 0210 	orr.w	r2, r3, #16
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004766:	f043 0201 	orr.w	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff ff76 	bl	8004668 <LL_ADC_REG_IsConversionOngoing>
 800477c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004782:	f003 0310 	and.w	r3, r3, #16
 8004786:	2b00      	cmp	r3, #0
 8004788:	f040 8142 	bne.w	8004a10 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f040 813e 	bne.w	8004a10 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004798:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800479c:	f043 0202 	orr.w	r2, r3, #2
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff ff23 	bl	80045f4 <LL_ADC_IsEnabled>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d141      	bne.n	8004838 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047bc:	d004      	beq.n	80047c8 <HAL_ADC_Init+0x114>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a77      	ldr	r2, [pc, #476]	@ (80049a0 <HAL_ADC_Init+0x2ec>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d10f      	bne.n	80047e8 <HAL_ADC_Init+0x134>
 80047c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80047cc:	f7ff ff12 	bl	80045f4 <LL_ADC_IsEnabled>
 80047d0:	4604      	mov	r4, r0
 80047d2:	4873      	ldr	r0, [pc, #460]	@ (80049a0 <HAL_ADC_Init+0x2ec>)
 80047d4:	f7ff ff0e 	bl	80045f4 <LL_ADC_IsEnabled>
 80047d8:	4603      	mov	r3, r0
 80047da:	4323      	orrs	r3, r4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	e012      	b.n	800480e <HAL_ADC_Init+0x15a>
 80047e8:	486e      	ldr	r0, [pc, #440]	@ (80049a4 <HAL_ADC_Init+0x2f0>)
 80047ea:	f7ff ff03 	bl	80045f4 <LL_ADC_IsEnabled>
 80047ee:	4604      	mov	r4, r0
 80047f0:	486d      	ldr	r0, [pc, #436]	@ (80049a8 <HAL_ADC_Init+0x2f4>)
 80047f2:	f7ff feff 	bl	80045f4 <LL_ADC_IsEnabled>
 80047f6:	4603      	mov	r3, r0
 80047f8:	431c      	orrs	r4, r3
 80047fa:	486c      	ldr	r0, [pc, #432]	@ (80049ac <HAL_ADC_Init+0x2f8>)
 80047fc:	f7ff fefa 	bl	80045f4 <LL_ADC_IsEnabled>
 8004800:	4603      	mov	r3, r0
 8004802:	4323      	orrs	r3, r4
 8004804:	2b00      	cmp	r3, #0
 8004806:	bf0c      	ite	eq
 8004808:	2301      	moveq	r3, #1
 800480a:	2300      	movne	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d012      	beq.n	8004838 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800481a:	d004      	beq.n	8004826 <HAL_ADC_Init+0x172>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a5f      	ldr	r2, [pc, #380]	@ (80049a0 <HAL_ADC_Init+0x2ec>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d101      	bne.n	800482a <HAL_ADC_Init+0x176>
 8004826:	4a62      	ldr	r2, [pc, #392]	@ (80049b0 <HAL_ADC_Init+0x2fc>)
 8004828:	e000      	b.n	800482c <HAL_ADC_Init+0x178>
 800482a:	4a62      	ldr	r2, [pc, #392]	@ (80049b4 <HAL_ADC_Init+0x300>)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f7ff fcfa 	bl	800422c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7f5b      	ldrb	r3, [r3, #29]
 800483c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004842:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004848:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800484e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004856:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004858:	4313      	orrs	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004862:	2b01      	cmp	r3, #1
 8004864:	d106      	bne.n	8004874 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486a:	3b01      	subs	r3, #1
 800486c:	045b      	lsls	r3, r3, #17
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d009      	beq.n	8004890 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004880:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004888:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	4b48      	ldr	r3, [pc, #288]	@ (80049b8 <HAL_ADC_Init+0x304>)
 8004898:	4013      	ands	r3, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	69b9      	ldr	r1, [r7, #24]
 80048a0:	430b      	orrs	r3, r1
 80048a2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fee5 	bl	800468e <LL_ADC_INJ_IsConversionOngoing>
 80048c4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d17f      	bne.n	80049cc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d17c      	bne.n	80049cc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80048d6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80048de:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80048e0:	4313      	orrs	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048ee:	f023 0302 	bic.w	r3, r3, #2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	69b9      	ldr	r1, [r7, #24]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d017      	beq.n	8004934 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004912:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800491c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004920:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6911      	ldr	r1, [r2, #16]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6812      	ldr	r2, [r2, #0]
 800492c:	430b      	orrs	r3, r1
 800492e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004932:	e013      	b.n	800495c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004942:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6812      	ldr	r2, [r2, #0]
 8004950:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004954:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004958:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004962:	2b01      	cmp	r3, #1
 8004964:	d12a      	bne.n	80049bc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004970:	f023 0304 	bic.w	r3, r3, #4
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800497c:	4311      	orrs	r1, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004982:	4311      	orrs	r1, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004988:	430a      	orrs	r2, r1
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0201 	orr.w	r2, r2, #1
 8004994:	611a      	str	r2, [r3, #16]
 8004996:	e019      	b.n	80049cc <HAL_ADC_Init+0x318>
 8004998:	20000024 	.word	0x20000024
 800499c:	053e2d63 	.word	0x053e2d63
 80049a0:	50000100 	.word	0x50000100
 80049a4:	50000400 	.word	0x50000400
 80049a8:	50000500 	.word	0x50000500
 80049ac:	50000600 	.word	0x50000600
 80049b0:	50000300 	.word	0x50000300
 80049b4:	50000700 	.word	0x50000700
 80049b8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0201 	bic.w	r2, r2, #1
 80049ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d10c      	bne.n	80049ee <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049da:	f023 010f 	bic.w	r1, r3, #15
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	1e5a      	subs	r2, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80049ec:	e007      	b.n	80049fe <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 020f 	bic.w	r2, r2, #15
 80049fc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a02:	f023 0303 	bic.w	r3, r3, #3
 8004a06:	f043 0201 	orr.w	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a0e:	e007      	b.n	8004a20 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a14:	f043 0210 	orr.w	r2, r3, #16
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3724      	adds	r7, #36	@ 0x24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd90      	pop	{r4, r7, pc}
 8004a2a:	bf00      	nop

08004a2c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a40:	d004      	beq.n	8004a4c <HAL_ADC_Start_DMA+0x20>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a5a      	ldr	r2, [pc, #360]	@ (8004bb0 <HAL_ADC_Start_DMA+0x184>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d101      	bne.n	8004a50 <HAL_ADC_Start_DMA+0x24>
 8004a4c:	4b59      	ldr	r3, [pc, #356]	@ (8004bb4 <HAL_ADC_Start_DMA+0x188>)
 8004a4e:	e000      	b.n	8004a52 <HAL_ADC_Start_DMA+0x26>
 8004a50:	4b59      	ldr	r3, [pc, #356]	@ (8004bb8 <HAL_ADC_Start_DMA+0x18c>)
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fd4a 	bl	80044ec <LL_ADC_GetMultimode>
 8004a58:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff fe02 	bl	8004668 <LL_ADC_REG_IsConversionOngoing>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f040 809b 	bne.w	8004ba2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_ADC_Start_DMA+0x4e>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e096      	b.n	8004ba8 <HAL_ADC_Start_DMA+0x17c>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a4d      	ldr	r2, [pc, #308]	@ (8004bbc <HAL_ADC_Start_DMA+0x190>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d008      	beq.n	8004a9e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d002      	beq.n	8004a9e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	2b09      	cmp	r3, #9
 8004a9c:	d17a      	bne.n	8004b94 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 fcec 	bl	800547c <ADC_Enable>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d16d      	bne.n	8004b8a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ab6:	f023 0301 	bic.w	r3, r3, #1
 8004aba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a3a      	ldr	r2, [pc, #232]	@ (8004bb0 <HAL_ADC_Start_DMA+0x184>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d009      	beq.n	8004ae0 <HAL_ADC_Start_DMA+0xb4>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a3b      	ldr	r2, [pc, #236]	@ (8004bc0 <HAL_ADC_Start_DMA+0x194>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d002      	beq.n	8004adc <HAL_ADC_Start_DMA+0xb0>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	e003      	b.n	8004ae4 <HAL_ADC_Start_DMA+0xb8>
 8004adc:	4b39      	ldr	r3, [pc, #228]	@ (8004bc4 <HAL_ADC_Start_DMA+0x198>)
 8004ade:	e001      	b.n	8004ae4 <HAL_ADC_Start_DMA+0xb8>
 8004ae0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d002      	beq.n	8004af2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d105      	bne.n	8004afe <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d006      	beq.n	8004b18 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b0e:	f023 0206 	bic.w	r2, r3, #6
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	661a      	str	r2, [r3, #96]	@ 0x60
 8004b16:	e002      	b.n	8004b1e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b22:	4a29      	ldr	r2, [pc, #164]	@ (8004bc8 <HAL_ADC_Start_DMA+0x19c>)
 8004b24:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2a:	4a28      	ldr	r2, [pc, #160]	@ (8004bcc <HAL_ADC_Start_DMA+0x1a0>)
 8004b2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b32:	4a27      	ldr	r2, [pc, #156]	@ (8004bd0 <HAL_ADC_Start_DMA+0x1a4>)
 8004b34:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	221c      	movs	r2, #28
 8004b3c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0210 	orr.w	r2, r2, #16
 8004b54:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 0201 	orr.w	r2, r2, #1
 8004b64:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3340      	adds	r3, #64	@ 0x40
 8004b70:	4619      	mov	r1, r3
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f001 fc8f 	bl	8006498 <HAL_DMA_Start_IT>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fd5c 	bl	8004640 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004b88:	e00d      	b.n	8004ba6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004b92:	e008      	b.n	8004ba6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004ba0:	e001      	b.n	8004ba6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	50000100 	.word	0x50000100
 8004bb4:	50000300 	.word	0x50000300
 8004bb8:	50000700 	.word	0x50000700
 8004bbc:	50000600 	.word	0x50000600
 8004bc0:	50000500 	.word	0x50000500
 8004bc4:	50000400 	.word	0x50000400
 8004bc8:	08005667 	.word	0x08005667
 8004bcc:	0800573f 	.word	0x0800573f
 8004bd0:	0800575b 	.word	0x0800575b

08004bd4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b0b6      	sub	sp, #216	@ 0xd8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d102      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x24>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	f000 bc13 	b.w	8005446 <HAL_ADC_ConfigChannel+0x84a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff fd1b 	bl	8004668 <LL_ADC_REG_IsConversionOngoing>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f040 83f3 	bne.w	8005420 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6859      	ldr	r1, [r3, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f7ff fbd5 	bl	80043f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fd09 	bl	8004668 <LL_ADC_REG_IsConversionOngoing>
 8004c56:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff fd15 	bl	800468e <LL_ADC_INJ_IsConversionOngoing>
 8004c64:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f040 81d9 	bne.w	8005024 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f040 81d4 	bne.w	8005024 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c84:	d10f      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	4619      	mov	r1, r3
 8004c92:	f7ff fbdc 	bl	800444e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff fb83 	bl	80043aa <LL_ADC_SetSamplingTimeCommonConfig>
 8004ca4:	e00e      	b.n	8004cc4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6819      	ldr	r1, [r3, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f7ff fbcb 	bl	800444e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fb73 	bl	80043aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	695a      	ldr	r2, [r3, #20]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	08db      	lsrs	r3, r3, #3
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d022      	beq.n	8004d2c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6919      	ldr	r1, [r3, #16]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004cf6:	f7ff facd 	bl	8004294 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6919      	ldr	r1, [r3, #16]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	461a      	mov	r2, r3
 8004d08:	f7ff fb19 	bl	800433e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d102      	bne.n	8004d22 <HAL_ADC_ConfigChannel+0x126>
 8004d1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d20:	e000      	b.n	8004d24 <HAL_ADC_ConfigChannel+0x128>
 8004d22:	2300      	movs	r3, #0
 8004d24:	461a      	mov	r2, r3
 8004d26:	f7ff fb25 	bl	8004374 <LL_ADC_SetOffsetSaturation>
 8004d2a:	e17b      	b.n	8005024 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2100      	movs	r1, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fad2 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10a      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x15c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2100      	movs	r1, #0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff fac7 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	0e9b      	lsrs	r3, r3, #26
 8004d52:	f003 021f 	and.w	r2, r3, #31
 8004d56:	e01e      	b.n	8004d96 <HAL_ADC_ConfigChannel+0x19a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fabc 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004d7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004d86:	2320      	movs	r3, #32
 8004d88:	e004      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004d8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d8e:	fab3 f383 	clz	r3, r3
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d105      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x1b2>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	0e9b      	lsrs	r3, r3, #26
 8004da8:	f003 031f 	and.w	r3, r3, #31
 8004dac:	e018      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x1e4>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004dba:	fa93 f3a3 	rbit	r3, r3
 8004dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004dca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004dd2:	2320      	movs	r3, #32
 8004dd4:	e004      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004dd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004dda:	fab3 f383 	clz	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d106      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2200      	movs	r2, #0
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff fa8b 	bl	8004308 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2101      	movs	r1, #1
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff fa6f 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x222>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fa64 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8004e14:	4603      	mov	r3, r0
 8004e16:	0e9b      	lsrs	r3, r3, #26
 8004e18:	f003 021f 	and.w	r2, r3, #31
 8004e1c:	e01e      	b.n	8004e5c <HAL_ADC_ConfigChannel+0x260>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2101      	movs	r1, #1
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff fa59 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e34:	fa93 f3a3 	rbit	r3, r3
 8004e38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004e3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	e004      	b.n	8004e5a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004e50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e54:	fab3 f383 	clz	r3, r3
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d105      	bne.n	8004e74 <HAL_ADC_ConfigChannel+0x278>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	0e9b      	lsrs	r3, r3, #26
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	e018      	b.n	8004ea6 <HAL_ADC_ConfigChannel+0x2aa>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e80:	fa93 f3a3 	rbit	r3, r3
 8004e84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004e88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004e98:	2320      	movs	r3, #32
 8004e9a:	e004      	b.n	8004ea6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ea0:	fab3 f383 	clz	r3, r3
 8004ea4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d106      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff fa28 	bl	8004308 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2102      	movs	r1, #2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff fa0c 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <HAL_ADC_ConfigChannel+0x2e8>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2102      	movs	r1, #2
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fa01 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8004eda:	4603      	mov	r3, r0
 8004edc:	0e9b      	lsrs	r3, r3, #26
 8004ede:	f003 021f 	and.w	r2, r3, #31
 8004ee2:	e01e      	b.n	8004f22 <HAL_ADC_ConfigChannel+0x326>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2102      	movs	r1, #2
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff f9f6 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004efa:	fa93 f3a3 	rbit	r3, r3
 8004efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004f12:	2320      	movs	r3, #32
 8004f14:	e004      	b.n	8004f20 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004f16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f1a:	fab3 f383 	clz	r3, r3
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d105      	bne.n	8004f3a <HAL_ADC_ConfigChannel+0x33e>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	0e9b      	lsrs	r3, r3, #26
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	e016      	b.n	8004f68 <HAL_ADC_ConfigChannel+0x36c>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f46:	fa93 f3a3 	rbit	r3, r3
 8004f4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004f4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004f5a:	2320      	movs	r3, #32
 8004f5c:	e004      	b.n	8004f68 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f62:	fab3 f383 	clz	r3, r3
 8004f66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d106      	bne.n	8004f7a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2200      	movs	r2, #0
 8004f72:	2102      	movs	r1, #2
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff f9c7 	bl	8004308 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2103      	movs	r1, #3
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff f9ab 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <HAL_ADC_ConfigChannel+0x3aa>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2103      	movs	r1, #3
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff f9a0 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	0e9b      	lsrs	r3, r3, #26
 8004fa0:	f003 021f 	and.w	r2, r3, #31
 8004fa4:	e017      	b.n	8004fd6 <HAL_ADC_ConfigChannel+0x3da>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2103      	movs	r1, #3
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff f995 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fb8:	fa93 f3a3 	rbit	r3, r3
 8004fbc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004fbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fc0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004fc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004fc8:	2320      	movs	r3, #32
 8004fca:	e003      	b.n	8004fd4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004fcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fce:	fab3 f383 	clz	r3, r3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d105      	bne.n	8004fee <HAL_ADC_ConfigChannel+0x3f2>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	0e9b      	lsrs	r3, r3, #26
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	e011      	b.n	8005012 <HAL_ADC_ConfigChannel+0x416>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ff6:	fa93 f3a3 	rbit	r3, r3
 8004ffa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004ffc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ffe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005006:	2320      	movs	r3, #32
 8005008:	e003      	b.n	8005012 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800500a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800500c:	fab3 f383 	clz	r3, r3
 8005010:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005012:	429a      	cmp	r2, r3
 8005014:	d106      	bne.n	8005024 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2200      	movs	r2, #0
 800501c:	2103      	movs	r1, #3
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff f972 	bl	8004308 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fae3 	bl	80045f4 <LL_ADC_IsEnabled>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	f040 813d 	bne.w	80052b0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6819      	ldr	r1, [r3, #0]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	461a      	mov	r2, r3
 8005044:	f7ff fa2e 	bl	80044a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	4aa2      	ldr	r2, [pc, #648]	@ (80052d8 <HAL_ADC_ConfigChannel+0x6dc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	f040 812e 	bne.w	80052b0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10b      	bne.n	800507c <HAL_ADC_ConfigChannel+0x480>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	0e9b      	lsrs	r3, r3, #26
 800506a:	3301      	adds	r3, #1
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	2b09      	cmp	r3, #9
 8005072:	bf94      	ite	ls
 8005074:	2301      	movls	r3, #1
 8005076:	2300      	movhi	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	e019      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x4b4>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005084:	fa93 f3a3 	rbit	r3, r3
 8005088:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800508a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800508c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800508e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005094:	2320      	movs	r3, #32
 8005096:	e003      	b.n	80050a0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005098:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800509a:	fab3 f383 	clz	r3, r3
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	3301      	adds	r3, #1
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	2b09      	cmp	r3, #9
 80050a8:	bf94      	ite	ls
 80050aa:	2301      	movls	r3, #1
 80050ac:	2300      	movhi	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d079      	beq.n	80051a8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d107      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x4d4>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	0e9b      	lsrs	r3, r3, #26
 80050c6:	3301      	adds	r3, #1
 80050c8:	069b      	lsls	r3, r3, #26
 80050ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050ce:	e015      	b.n	80050fc <HAL_ADC_ConfigChannel+0x500>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050d8:	fa93 f3a3 	rbit	r3, r3
 80050dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80050de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80050e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80050e8:	2320      	movs	r3, #32
 80050ea:	e003      	b.n	80050f4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80050ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ee:	fab3 f383 	clz	r3, r3
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	3301      	adds	r3, #1
 80050f6:	069b      	lsls	r3, r3, #26
 80050f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005104:	2b00      	cmp	r3, #0
 8005106:	d109      	bne.n	800511c <HAL_ADC_ConfigChannel+0x520>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	0e9b      	lsrs	r3, r3, #26
 800510e:	3301      	adds	r3, #1
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2101      	movs	r1, #1
 8005116:	fa01 f303 	lsl.w	r3, r1, r3
 800511a:	e017      	b.n	800514c <HAL_ADC_ConfigChannel+0x550>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005124:	fa93 f3a3 	rbit	r3, r3
 8005128:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800512a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800512c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800512e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005134:	2320      	movs	r3, #32
 8005136:	e003      	b.n	8005140 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800513a:	fab3 f383 	clz	r3, r3
 800513e:	b2db      	uxtb	r3, r3
 8005140:	3301      	adds	r3, #1
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	2101      	movs	r1, #1
 8005148:	fa01 f303 	lsl.w	r3, r1, r3
 800514c:	ea42 0103 	orr.w	r1, r2, r3
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <HAL_ADC_ConfigChannel+0x576>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	0e9b      	lsrs	r3, r3, #26
 8005162:	3301      	adds	r3, #1
 8005164:	f003 021f 	and.w	r2, r3, #31
 8005168:	4613      	mov	r3, r2
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	4413      	add	r3, r2
 800516e:	051b      	lsls	r3, r3, #20
 8005170:	e018      	b.n	80051a4 <HAL_ADC_ConfigChannel+0x5a8>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517a:	fa93 f3a3 	rbit	r3, r3
 800517e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005182:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800518a:	2320      	movs	r3, #32
 800518c:	e003      	b.n	8005196 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800518e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005190:	fab3 f383 	clz	r3, r3
 8005194:	b2db      	uxtb	r3, r3
 8005196:	3301      	adds	r3, #1
 8005198:	f003 021f 	and.w	r2, r3, #31
 800519c:	4613      	mov	r3, r2
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	4413      	add	r3, r2
 80051a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051a4:	430b      	orrs	r3, r1
 80051a6:	e07e      	b.n	80052a6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d107      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x5c8>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	0e9b      	lsrs	r3, r3, #26
 80051ba:	3301      	adds	r3, #1
 80051bc:	069b      	lsls	r3, r3, #26
 80051be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051c2:	e015      	b.n	80051f0 <HAL_ADC_ConfigChannel+0x5f4>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051cc:	fa93 f3a3 	rbit	r3, r3
 80051d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80051d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80051dc:	2320      	movs	r3, #32
 80051de:	e003      	b.n	80051e8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80051e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e2:	fab3 f383 	clz	r3, r3
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	3301      	adds	r3, #1
 80051ea:	069b      	lsls	r3, r3, #26
 80051ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d109      	bne.n	8005210 <HAL_ADC_ConfigChannel+0x614>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	0e9b      	lsrs	r3, r3, #26
 8005202:	3301      	adds	r3, #1
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	2101      	movs	r1, #1
 800520a:	fa01 f303 	lsl.w	r3, r1, r3
 800520e:	e017      	b.n	8005240 <HAL_ADC_ConfigChannel+0x644>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	fa93 f3a3 	rbit	r3, r3
 800521c:	61fb      	str	r3, [r7, #28]
  return result;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005228:	2320      	movs	r3, #32
 800522a:	e003      	b.n	8005234 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	fab3 f383 	clz	r3, r3
 8005232:	b2db      	uxtb	r3, r3
 8005234:	3301      	adds	r3, #1
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	2101      	movs	r1, #1
 800523c:	fa01 f303 	lsl.w	r3, r1, r3
 8005240:	ea42 0103 	orr.w	r1, r2, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10d      	bne.n	800526c <HAL_ADC_ConfigChannel+0x670>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	0e9b      	lsrs	r3, r3, #26
 8005256:	3301      	adds	r3, #1
 8005258:	f003 021f 	and.w	r2, r3, #31
 800525c:	4613      	mov	r3, r2
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	4413      	add	r3, r2
 8005262:	3b1e      	subs	r3, #30
 8005264:	051b      	lsls	r3, r3, #20
 8005266:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800526a:	e01b      	b.n	80052a4 <HAL_ADC_ConfigChannel+0x6a8>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	fa93 f3a3 	rbit	r3, r3
 8005278:	613b      	str	r3, [r7, #16]
  return result;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005284:	2320      	movs	r3, #32
 8005286:	e003      	b.n	8005290 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	fab3 f383 	clz	r3, r3
 800528e:	b2db      	uxtb	r3, r3
 8005290:	3301      	adds	r3, #1
 8005292:	f003 021f 	and.w	r2, r3, #31
 8005296:	4613      	mov	r3, r2
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	4413      	add	r3, r2
 800529c:	3b1e      	subs	r3, #30
 800529e:	051b      	lsls	r3, r3, #20
 80052a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052a4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052aa:	4619      	mov	r1, r3
 80052ac:	f7ff f8cf 	bl	800444e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4b09      	ldr	r3, [pc, #36]	@ (80052dc <HAL_ADC_ConfigChannel+0x6e0>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 80be 	beq.w	800543a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052c6:	d004      	beq.n	80052d2 <HAL_ADC_ConfigChannel+0x6d6>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a04      	ldr	r2, [pc, #16]	@ (80052e0 <HAL_ADC_ConfigChannel+0x6e4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d10a      	bne.n	80052e8 <HAL_ADC_ConfigChannel+0x6ec>
 80052d2:	4b04      	ldr	r3, [pc, #16]	@ (80052e4 <HAL_ADC_ConfigChannel+0x6e8>)
 80052d4:	e009      	b.n	80052ea <HAL_ADC_ConfigChannel+0x6ee>
 80052d6:	bf00      	nop
 80052d8:	407f0000 	.word	0x407f0000
 80052dc:	80080000 	.word	0x80080000
 80052e0:	50000100 	.word	0x50000100
 80052e4:	50000300 	.word	0x50000300
 80052e8:	4b59      	ldr	r3, [pc, #356]	@ (8005450 <HAL_ADC_ConfigChannel+0x854>)
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fe ffc4 	bl	8004278 <LL_ADC_GetCommonPathInternalCh>
 80052f0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a56      	ldr	r2, [pc, #344]	@ (8005454 <HAL_ADC_ConfigChannel+0x858>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_ADC_ConfigChannel+0x70c>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a55      	ldr	r2, [pc, #340]	@ (8005458 <HAL_ADC_ConfigChannel+0x85c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d13a      	bne.n	800537e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005308:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800530c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d134      	bne.n	800537e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800531c:	d005      	beq.n	800532a <HAL_ADC_ConfigChannel+0x72e>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a4e      	ldr	r2, [pc, #312]	@ (800545c <HAL_ADC_ConfigChannel+0x860>)
 8005324:	4293      	cmp	r3, r2
 8005326:	f040 8085 	bne.w	8005434 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005332:	d004      	beq.n	800533e <HAL_ADC_ConfigChannel+0x742>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a49      	ldr	r2, [pc, #292]	@ (8005460 <HAL_ADC_ConfigChannel+0x864>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d101      	bne.n	8005342 <HAL_ADC_ConfigChannel+0x746>
 800533e:	4a49      	ldr	r2, [pc, #292]	@ (8005464 <HAL_ADC_ConfigChannel+0x868>)
 8005340:	e000      	b.n	8005344 <HAL_ADC_ConfigChannel+0x748>
 8005342:	4a43      	ldr	r2, [pc, #268]	@ (8005450 <HAL_ADC_ConfigChannel+0x854>)
 8005344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005348:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f7fe ff7f 	bl	8004252 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005354:	4b44      	ldr	r3, [pc, #272]	@ (8005468 <HAL_ADC_ConfigChannel+0x86c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	099b      	lsrs	r3, r3, #6
 800535a:	4a44      	ldr	r2, [pc, #272]	@ (800546c <HAL_ADC_ConfigChannel+0x870>)
 800535c:	fba2 2303 	umull	r2, r3, r2, r3
 8005360:	099b      	lsrs	r3, r3, #6
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	4613      	mov	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800536e:	e002      	b.n	8005376 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3b01      	subs	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1f9      	bne.n	8005370 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800537c:	e05a      	b.n	8005434 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a3b      	ldr	r2, [pc, #236]	@ (8005470 <HAL_ADC_ConfigChannel+0x874>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d125      	bne.n	80053d4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005388:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800538c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d11f      	bne.n	80053d4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a31      	ldr	r2, [pc, #196]	@ (8005460 <HAL_ADC_ConfigChannel+0x864>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d104      	bne.n	80053a8 <HAL_ADC_ConfigChannel+0x7ac>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a34      	ldr	r2, [pc, #208]	@ (8005474 <HAL_ADC_ConfigChannel+0x878>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d047      	beq.n	8005438 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053b0:	d004      	beq.n	80053bc <HAL_ADC_ConfigChannel+0x7c0>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005460 <HAL_ADC_ConfigChannel+0x864>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d101      	bne.n	80053c0 <HAL_ADC_ConfigChannel+0x7c4>
 80053bc:	4a29      	ldr	r2, [pc, #164]	@ (8005464 <HAL_ADC_ConfigChannel+0x868>)
 80053be:	e000      	b.n	80053c2 <HAL_ADC_ConfigChannel+0x7c6>
 80053c0:	4a23      	ldr	r2, [pc, #140]	@ (8005450 <HAL_ADC_ConfigChannel+0x854>)
 80053c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f7fe ff40 	bl	8004252 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80053d2:	e031      	b.n	8005438 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a27      	ldr	r2, [pc, #156]	@ (8005478 <HAL_ADC_ConfigChannel+0x87c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d12d      	bne.n	800543a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80053de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d127      	bne.n	800543a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005460 <HAL_ADC_ConfigChannel+0x864>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d022      	beq.n	800543a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053fc:	d004      	beq.n	8005408 <HAL_ADC_ConfigChannel+0x80c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a17      	ldr	r2, [pc, #92]	@ (8005460 <HAL_ADC_ConfigChannel+0x864>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d101      	bne.n	800540c <HAL_ADC_ConfigChannel+0x810>
 8005408:	4a16      	ldr	r2, [pc, #88]	@ (8005464 <HAL_ADC_ConfigChannel+0x868>)
 800540a:	e000      	b.n	800540e <HAL_ADC_ConfigChannel+0x812>
 800540c:	4a10      	ldr	r2, [pc, #64]	@ (8005450 <HAL_ADC_ConfigChannel+0x854>)
 800540e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005412:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005416:	4619      	mov	r1, r3
 8005418:	4610      	mov	r0, r2
 800541a:	f7fe ff1a 	bl	8004252 <LL_ADC_SetCommonPathInternalCh>
 800541e:	e00c      	b.n	800543a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005424:	f043 0220 	orr.w	r2, r3, #32
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005432:	e002      	b.n	800543a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005434:	bf00      	nop
 8005436:	e000      	b.n	800543a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005438:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005442:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005446:	4618      	mov	r0, r3
 8005448:	37d8      	adds	r7, #216	@ 0xd8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	50000700 	.word	0x50000700
 8005454:	c3210000 	.word	0xc3210000
 8005458:	90c00010 	.word	0x90c00010
 800545c:	50000600 	.word	0x50000600
 8005460:	50000100 	.word	0x50000100
 8005464:	50000300 	.word	0x50000300
 8005468:	20000024 	.word	0x20000024
 800546c:	053e2d63 	.word	0x053e2d63
 8005470:	c7520000 	.word	0xc7520000
 8005474:	50000500 	.word	0x50000500
 8005478:	cb840000 	.word	0xcb840000

0800547c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005484:	2300      	movs	r3, #0
 8005486:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff f8b1 	bl	80045f4 <LL_ADC_IsEnabled>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d176      	bne.n	8005586 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	4b3c      	ldr	r3, [pc, #240]	@ (8005590 <ADC_Enable+0x114>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00d      	beq.n	80054c2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054aa:	f043 0210 	orr.w	r2, r3, #16
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054b6:	f043 0201 	orr.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e062      	b.n	8005588 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff f86c 	bl	80045a4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054d4:	d004      	beq.n	80054e0 <ADC_Enable+0x64>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a2e      	ldr	r2, [pc, #184]	@ (8005594 <ADC_Enable+0x118>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d101      	bne.n	80054e4 <ADC_Enable+0x68>
 80054e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005598 <ADC_Enable+0x11c>)
 80054e2:	e000      	b.n	80054e6 <ADC_Enable+0x6a>
 80054e4:	4b2d      	ldr	r3, [pc, #180]	@ (800559c <ADC_Enable+0x120>)
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fe fec6 	bl	8004278 <LL_ADC_GetCommonPathInternalCh>
 80054ec:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80054ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d013      	beq.n	800551e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054f6:	4b2a      	ldr	r3, [pc, #168]	@ (80055a0 <ADC_Enable+0x124>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	099b      	lsrs	r3, r3, #6
 80054fc:	4a29      	ldr	r2, [pc, #164]	@ (80055a4 <ADC_Enable+0x128>)
 80054fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005502:	099b      	lsrs	r3, r3, #6
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	4613      	mov	r3, r2
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005510:	e002      	b.n	8005518 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	3b01      	subs	r3, #1
 8005516:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f9      	bne.n	8005512 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800551e:	f7fe fe57 	bl	80041d0 <HAL_GetTick>
 8005522:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005524:	e028      	b.n	8005578 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff f862 	bl	80045f4 <LL_ADC_IsEnabled>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d104      	bne.n	8005540 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff f832 	bl	80045a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005540:	f7fe fe46 	bl	80041d0 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d914      	bls.n	8005578 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b01      	cmp	r3, #1
 800555a:	d00d      	beq.n	8005578 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005560:	f043 0210 	orr.w	r2, r3, #16
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800556c:	f043 0201 	orr.w	r2, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e007      	b.n	8005588 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b01      	cmp	r3, #1
 8005584:	d1cf      	bne.n	8005526 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	8000003f 	.word	0x8000003f
 8005594:	50000100 	.word	0x50000100
 8005598:	50000300 	.word	0x50000300
 800559c:	50000700 	.word	0x50000700
 80055a0:	20000024 	.word	0x20000024
 80055a4:	053e2d63 	.word	0x053e2d63

080055a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff f830 	bl	800461a <LL_ADC_IsDisableOngoing>
 80055ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff f817 	bl	80045f4 <LL_ADC_IsEnabled>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d047      	beq.n	800565c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d144      	bne.n	800565c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 030d 	and.w	r3, r3, #13
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d10c      	bne.n	80055fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fe fff1 	bl	80045cc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2203      	movs	r2, #3
 80055f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80055f2:	f7fe fded 	bl	80041d0 <HAL_GetTick>
 80055f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055f8:	e029      	b.n	800564e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055fe:	f043 0210 	orr.w	r2, r3, #16
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800560a:	f043 0201 	orr.w	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e023      	b.n	800565e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005616:	f7fe fddb 	bl	80041d0 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d914      	bls.n	800564e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00d      	beq.n	800564e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005636:	f043 0210 	orr.w	r2, r3, #16
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005642:	f043 0201 	orr.w	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e007      	b.n	800565e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1dc      	bne.n	8005616 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005672:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005678:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800567c:	2b00      	cmp	r3, #0
 800567e:	d14b      	bne.n	8005718 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005684:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d021      	beq.n	80056de <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fe fe96 	bl	80043d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d032      	beq.n	8005710 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d12b      	bne.n	8005710 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d11f      	bne.n	8005710 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d4:	f043 0201 	orr.w	r2, r3, #1
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80056dc:	e018      	b.n	8005710 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d111      	bne.n	8005710 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d105      	bne.n	8005710 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005708:	f043 0201 	orr.w	r2, r3, #1
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7fc fe49 	bl	80023a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005716:	e00e      	b.n	8005736 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7ff fa5f 	bl	8004be8 <HAL_ADC_ErrorCallback>
}
 800572a:	e004      	b.n	8005736 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
}
 8005736:	bf00      	nop
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7ff fa41 	bl	8004bd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005766:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800576c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005778:	f043 0204 	orr.w	r2, r3, #4
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff fa31 	bl	8004be8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <LL_ADC_IsEnabled>:
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <LL_ADC_IsEnabled+0x18>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <LL_ADC_IsEnabled+0x1a>
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <LL_ADC_StartCalibration>:
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80057c6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	609a      	str	r2, [r3, #8]
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <LL_ADC_IsCalibrationOnGoing>:
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057fa:	d101      	bne.n	8005800 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <LL_ADC_REG_IsConversionOngoing>:
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b04      	cmp	r3, #4
 8005820:	d101      	bne.n	8005826 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800583e:	2300      	movs	r3, #0
 8005840:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_ADCEx_Calibration_Start+0x1c>
 800584c:	2302      	movs	r3, #2
 800584e:	e04d      	b.n	80058ec <HAL_ADCEx_Calibration_Start+0xb8>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff fea5 	bl	80055a8 <ADC_Disable>
 800585e:	4603      	mov	r3, r0
 8005860:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005862:	7bfb      	ldrb	r3, [r7, #15]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d136      	bne.n	80058d6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800586c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005870:	f023 0302 	bic.w	r3, r3, #2
 8005874:	f043 0202 	orr.w	r2, r3, #2
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff ff96 	bl	80057b4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005888:	e014      	b.n	80058b4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	3301      	adds	r3, #1
 800588e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4a18      	ldr	r2, [pc, #96]	@ (80058f4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d90d      	bls.n	80058b4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800589c:	f023 0312 	bic.w	r3, r3, #18
 80058a0:	f043 0210 	orr.w	r2, r3, #16
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e01b      	b.n	80058ec <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff ff94 	bl	80057e6 <LL_ADC_IsCalibrationOnGoing>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e2      	bne.n	800588a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c8:	f023 0303 	bic.w	r3, r3, #3
 80058cc:	f043 0201 	orr.w	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80058d4:	e005      	b.n	80058e2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058da:	f043 0210 	orr.w	r2, r3, #16
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	0004de01 	.word	0x0004de01

080058f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80058f8:	b590      	push	{r4, r7, lr}
 80058fa:	b0a1      	sub	sp, #132	@ 0x84
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800590e:	2b01      	cmp	r3, #1
 8005910:	d101      	bne.n	8005916 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005912:	2302      	movs	r3, #2
 8005914:	e0e7      	b.n	8005ae6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800591e:	2300      	movs	r3, #0
 8005920:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005922:	2300      	movs	r3, #0
 8005924:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800592e:	d102      	bne.n	8005936 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005930:	4b6f      	ldr	r3, [pc, #444]	@ (8005af0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005932:	60bb      	str	r3, [r7, #8]
 8005934:	e009      	b.n	800594a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a6e      	ldr	r2, [pc, #440]	@ (8005af4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d102      	bne.n	8005946 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005940:	4b6d      	ldr	r3, [pc, #436]	@ (8005af8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005942:	60bb      	str	r3, [r7, #8]
 8005944:	e001      	b.n	800594a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005946:	2300      	movs	r3, #0
 8005948:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10b      	bne.n	8005968 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005954:	f043 0220 	orr.w	r2, r3, #32
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0be      	b.n	8005ae6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4618      	mov	r0, r3
 800596c:	f7ff ff4f 	bl	800580e <LL_ADC_REG_IsConversionOngoing>
 8005970:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff ff49 	bl	800580e <LL_ADC_REG_IsConversionOngoing>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	f040 80a0 	bne.w	8005ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005984:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005986:	2b00      	cmp	r3, #0
 8005988:	f040 809c 	bne.w	8005ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005994:	d004      	beq.n	80059a0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a55      	ldr	r2, [pc, #340]	@ (8005af0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d101      	bne.n	80059a4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80059a0:	4b56      	ldr	r3, [pc, #344]	@ (8005afc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80059a2:	e000      	b.n	80059a6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80059a4:	4b56      	ldr	r3, [pc, #344]	@ (8005b00 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80059a6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d04b      	beq.n	8005a48 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80059b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	6859      	ldr	r1, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80059c2:	035b      	lsls	r3, r3, #13
 80059c4:	430b      	orrs	r3, r1
 80059c6:	431a      	orrs	r2, r3
 80059c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059d4:	d004      	beq.n	80059e0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a45      	ldr	r2, [pc, #276]	@ (8005af0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d10f      	bne.n	8005a00 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80059e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80059e4:	f7ff fed3 	bl	800578e <LL_ADC_IsEnabled>
 80059e8:	4604      	mov	r4, r0
 80059ea:	4841      	ldr	r0, [pc, #260]	@ (8005af0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80059ec:	f7ff fecf 	bl	800578e <LL_ADC_IsEnabled>
 80059f0:	4603      	mov	r3, r0
 80059f2:	4323      	orrs	r3, r4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	bf0c      	ite	eq
 80059f8:	2301      	moveq	r3, #1
 80059fa:	2300      	movne	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	e012      	b.n	8005a26 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005a00:	483c      	ldr	r0, [pc, #240]	@ (8005af4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005a02:	f7ff fec4 	bl	800578e <LL_ADC_IsEnabled>
 8005a06:	4604      	mov	r4, r0
 8005a08:	483b      	ldr	r0, [pc, #236]	@ (8005af8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005a0a:	f7ff fec0 	bl	800578e <LL_ADC_IsEnabled>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	431c      	orrs	r4, r3
 8005a12:	483c      	ldr	r0, [pc, #240]	@ (8005b04 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005a14:	f7ff febb 	bl	800578e <LL_ADC_IsEnabled>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	4323      	orrs	r3, r4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	bf0c      	ite	eq
 8005a20:	2301      	moveq	r3, #1
 8005a22:	2300      	movne	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d056      	beq.n	8005ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005a2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005a32:	f023 030f 	bic.w	r3, r3, #15
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	6811      	ldr	r1, [r2, #0]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	6892      	ldr	r2, [r2, #8]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	431a      	orrs	r2, r3
 8005a42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a44:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a46:	e047      	b.n	8005ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005a48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a52:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a5c:	d004      	beq.n	8005a68 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a23      	ldr	r2, [pc, #140]	@ (8005af0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d10f      	bne.n	8005a88 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005a68:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005a6c:	f7ff fe8f 	bl	800578e <LL_ADC_IsEnabled>
 8005a70:	4604      	mov	r4, r0
 8005a72:	481f      	ldr	r0, [pc, #124]	@ (8005af0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005a74:	f7ff fe8b 	bl	800578e <LL_ADC_IsEnabled>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	4323      	orrs	r3, r4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bf0c      	ite	eq
 8005a80:	2301      	moveq	r3, #1
 8005a82:	2300      	movne	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	e012      	b.n	8005aae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005a88:	481a      	ldr	r0, [pc, #104]	@ (8005af4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005a8a:	f7ff fe80 	bl	800578e <LL_ADC_IsEnabled>
 8005a8e:	4604      	mov	r4, r0
 8005a90:	4819      	ldr	r0, [pc, #100]	@ (8005af8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005a92:	f7ff fe7c 	bl	800578e <LL_ADC_IsEnabled>
 8005a96:	4603      	mov	r3, r0
 8005a98:	431c      	orrs	r4, r3
 8005a9a:	481a      	ldr	r0, [pc, #104]	@ (8005b04 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005a9c:	f7ff fe77 	bl	800578e <LL_ADC_IsEnabled>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	4323      	orrs	r3, r4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	bf0c      	ite	eq
 8005aa8:	2301      	moveq	r3, #1
 8005aaa:	2300      	movne	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d012      	beq.n	8005ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005ab2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005aba:	f023 030f 	bic.w	r3, r3, #15
 8005abe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005ac0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ac2:	e009      	b.n	8005ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac8:	f043 0220 	orr.w	r2, r3, #32
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005ad6:	e000      	b.n	8005ada <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ad8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005ae2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3784      	adds	r7, #132	@ 0x84
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd90      	pop	{r4, r7, pc}
 8005aee:	bf00      	nop
 8005af0:	50000100 	.word	0x50000100
 8005af4:	50000400 	.word	0x50000400
 8005af8:	50000500 	.word	0x50000500
 8005afc:	50000300 	.word	0x50000300
 8005b00:	50000700 	.word	0x50000700
 8005b04:	50000600 	.word	0x50000600

08005b08 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e023      	b.n	8005b62 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fd fed8 	bl	80038e4 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b9e:	4a04      	ldr	r2, [pc, #16]	@ (8005bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	60d3      	str	r3, [r2, #12]
}
 8005ba4:	bf00      	nop
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	e000ed00 	.word	0xe000ed00

08005bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bb8:	4b04      	ldr	r3, [pc, #16]	@ (8005bcc <__NVIC_GetPriorityGrouping+0x18>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	0a1b      	lsrs	r3, r3, #8
 8005bbe:	f003 0307 	and.w	r3, r3, #7
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	e000ed00 	.word	0xe000ed00

08005bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	db0b      	blt.n	8005bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	f003 021f 	and.w	r2, r3, #31
 8005be8:	4907      	ldr	r1, [pc, #28]	@ (8005c08 <__NVIC_EnableIRQ+0x38>)
 8005bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8005bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	e000e100 	.word	0xe000e100

08005c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	6039      	str	r1, [r7, #0]
 8005c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	db0a      	blt.n	8005c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	490c      	ldr	r1, [pc, #48]	@ (8005c58 <__NVIC_SetPriority+0x4c>)
 8005c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c2a:	0112      	lsls	r2, r2, #4
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	440b      	add	r3, r1
 8005c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c34:	e00a      	b.n	8005c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	4908      	ldr	r1, [pc, #32]	@ (8005c5c <__NVIC_SetPriority+0x50>)
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	3b04      	subs	r3, #4
 8005c44:	0112      	lsls	r2, r2, #4
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	440b      	add	r3, r1
 8005c4a:	761a      	strb	r2, [r3, #24]
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	e000e100 	.word	0xe000e100
 8005c5c:	e000ed00 	.word	0xe000ed00

08005c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b089      	sub	sp, #36	@ 0x24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f1c3 0307 	rsb	r3, r3, #7
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	bf28      	it	cs
 8005c7e:	2304      	movcs	r3, #4
 8005c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	3304      	adds	r3, #4
 8005c86:	2b06      	cmp	r3, #6
 8005c88:	d902      	bls.n	8005c90 <NVIC_EncodePriority+0x30>
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	3b03      	subs	r3, #3
 8005c8e:	e000      	b.n	8005c92 <NVIC_EncodePriority+0x32>
 8005c90:	2300      	movs	r3, #0
 8005c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c94:	f04f 32ff 	mov.w	r2, #4294967295
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43da      	mvns	r2, r3
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	401a      	ands	r2, r3
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb2:	43d9      	mvns	r1, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cb8:	4313      	orrs	r3, r2
         );
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3724      	adds	r7, #36	@ 0x24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
	...

08005cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cd8:	d301      	bcc.n	8005cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e00f      	b.n	8005cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cde:	4a0a      	ldr	r2, [pc, #40]	@ (8005d08 <SysTick_Config+0x40>)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ce6:	210f      	movs	r1, #15
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cec:	f7ff ff8e 	bl	8005c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cf0:	4b05      	ldr	r3, [pc, #20]	@ (8005d08 <SysTick_Config+0x40>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cf6:	4b04      	ldr	r3, [pc, #16]	@ (8005d08 <SysTick_Config+0x40>)
 8005cf8:	2207      	movs	r2, #7
 8005cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	e000e010 	.word	0xe000e010

08005d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff ff29 	bl	8005b6c <__NVIC_SetPriorityGrouping>
}
 8005d1a:	bf00      	nop
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b086      	sub	sp, #24
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	4603      	mov	r3, r0
 8005d2a:	60b9      	str	r1, [r7, #8]
 8005d2c:	607a      	str	r2, [r7, #4]
 8005d2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d30:	f7ff ff40 	bl	8005bb4 <__NVIC_GetPriorityGrouping>
 8005d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	68b9      	ldr	r1, [r7, #8]
 8005d3a:	6978      	ldr	r0, [r7, #20]
 8005d3c:	f7ff ff90 	bl	8005c60 <NVIC_EncodePriority>
 8005d40:	4602      	mov	r2, r0
 8005d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d46:	4611      	mov	r1, r2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff ff5f 	bl	8005c0c <__NVIC_SetPriority>
}
 8005d4e:	bf00      	nop
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff ff33 	bl	8005bd0 <__NVIC_EnableIRQ>
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff ffa4 	bl	8005cc8 <SysTick_Config>
 8005d80:	4603      	mov	r3, r0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b082      	sub	sp, #8
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e014      	b.n	8005dc6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	791b      	ldrb	r3, [r3, #4]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d105      	bne.n	8005db2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7fd fdb9 	bl	8003924 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2202      	movs	r2, #2
 8005db6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e056      	b.n	8005e92 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	795b      	ldrb	r3, [r3, #5]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_DAC_Start+0x20>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e050      	b.n	8005e92 <HAL_DAC_Start+0xc2>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6819      	ldr	r1, [r3, #0]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2201      	movs	r2, #1
 8005e0a:	409a      	lsls	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e14:	4b22      	ldr	r3, [pc, #136]	@ (8005ea0 <HAL_DAC_Start+0xd0>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	099b      	lsrs	r3, r3, #6
 8005e1a:	4a22      	ldr	r2, [pc, #136]	@ (8005ea4 <HAL_DAC_Start+0xd4>)
 8005e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e20:	099b      	lsrs	r3, r3, #6
 8005e22:	3301      	adds	r3, #1
 8005e24:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005e26:	e002      	b.n	8005e2e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1f9      	bne.n	8005e28 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10f      	bne.n	8005e5a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d11d      	bne.n	8005e84 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	605a      	str	r2, [r3, #4]
 8005e58:	e014      	b.n	8005e84 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	f003 0310 	and.w	r3, r3, #16
 8005e6a:	2102      	movs	r1, #2
 8005e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d107      	bne.n	8005e84 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0202 	orr.w	r2, r2, #2
 8005e82:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	20000024 	.word	0x20000024
 8005ea4:	053e2d63 	.word	0x053e2d63

08005ea8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ebe:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01d      	beq.n	8005f06 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d018      	beq.n	8005f06 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2204      	movs	r2, #4
 8005ed8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f043 0201 	orr.w	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005eee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005efe:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f854 	bl	8005fae <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01d      	beq.n	8005f4c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d018      	beq.n	8005f4c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2204      	movs	r2, #4
 8005f1e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f043 0202 	orr.w	r2, r3, #2
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005f34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005f44:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9f4 	bl	8006334 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005f4c:	bf00      	nop
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e018      	b.n	8005fa2 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d105      	bne.n	8005f8e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4413      	add	r3, r2
 8005f88:	3308      	adds	r3, #8
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	e004      	b.n	8005f98 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4413      	add	r3, r2
 8005f94:	3314      	adds	r3, #20
 8005f96:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
	...

08005fc4 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	@ 0x28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <HAL_DAC_ConfigChannel+0x1c>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e19e      	b.n	8006322 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	795b      	ldrb	r3, [r3, #5]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_DAC_ConfigChannel+0x2c>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e198      	b.n	8006322 <HAL_DAC_ConfigChannel+0x35e>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2b04      	cmp	r3, #4
 8006002:	d17a      	bne.n	80060fa <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006004:	f7fe f8e4 	bl	80041d0 <HAL_GetTick>
 8006008:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d13d      	bne.n	800608c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006010:	e018      	b.n	8006044 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006012:	f7fe f8dd 	bl	80041d0 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	d911      	bls.n	8006044 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006026:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f043 0208 	orr.w	r2, r3, #8
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2203      	movs	r2, #3
 800603e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e16e      	b.n	8006322 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800604a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1df      	bne.n	8006012 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800605a:	641a      	str	r2, [r3, #64]	@ 0x40
 800605c:	e020      	b.n	80060a0 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800605e:	f7fe f8b7 	bl	80041d0 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b01      	cmp	r3, #1
 800606a:	d90f      	bls.n	800608c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006072:	2b00      	cmp	r3, #0
 8006074:	da0a      	bge.n	800608c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f043 0208 	orr.w	r2, r3, #8
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2203      	movs	r2, #3
 8006086:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e14a      	b.n	8006322 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006092:	2b00      	cmp	r3, #0
 8006094:	dbe3      	blt.n	800605e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800609e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f003 0310 	and.w	r3, r3, #16
 80060ac:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80060b0:	fa01 f303 	lsl.w	r3, r1, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	ea02 0103 	and.w	r1, r2, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	409a      	lsls	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f003 0310 	and.w	r3, r3, #16
 80060da:	21ff      	movs	r1, #255	@ 0xff
 80060dc:	fa01 f303 	lsl.w	r3, r1, r3
 80060e0:	43db      	mvns	r3, r3
 80060e2:	ea02 0103 	and.w	r1, r2, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	409a      	lsls	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d11d      	bne.n	800613e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006108:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	221f      	movs	r2, #31
 8006112:	fa02 f303 	lsl.w	r3, r2, r3
 8006116:	43db      	mvns	r3, r3
 8006118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800611a:	4013      	ands	r3, r2
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006132:	4313      	orrs	r3, r2
 8006134:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800613c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006144:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2207      	movs	r2, #7
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	43db      	mvns	r3, r3
 8006154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006156:	4013      	ands	r3, r2
 8006158:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d102      	bne.n	8006168 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8006162:	2300      	movs	r3, #0
 8006164:	623b      	str	r3, [r7, #32]
 8006166:	e00f      	b.n	8006188 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d102      	bne.n	8006176 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006170:	2301      	movs	r3, #1
 8006172:	623b      	str	r3, [r7, #32]
 8006174:	e008      	b.n	8006188 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d102      	bne.n	8006184 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800617e:	2301      	movs	r3, #1
 8006180:	623b      	str	r3, [r7, #32]
 8006182:	e001      	b.n	8006188 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006184:	2300      	movs	r3, #0
 8006186:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	6a3a      	ldr	r2, [r7, #32]
 8006194:	4313      	orrs	r3, r2
 8006196:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f003 0310 	and.w	r3, r3, #16
 800619e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	43db      	mvns	r3, r3
 80061a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061aa:	4013      	ands	r3, r2
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	791b      	ldrb	r3, [r3, #4]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d102      	bne.n	80061bc <HAL_DAC_ConfigChannel+0x1f8>
 80061b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061ba:	e000      	b.n	80061be <HAL_DAC_ConfigChannel+0x1fa>
 80061bc:	2300      	movs	r3, #0
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f003 0310 	and.w	r3, r3, #16
 80061ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061ce:	fa02 f303 	lsl.w	r3, r2, r3
 80061d2:	43db      	mvns	r3, r3
 80061d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d6:	4013      	ands	r3, r2
 80061d8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	795b      	ldrb	r3, [r3, #5]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d102      	bne.n	80061e8 <HAL_DAC_ConfigChannel+0x224>
 80061e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061e6:	e000      	b.n	80061ea <HAL_DAC_ConfigChannel+0x226>
 80061e8:	2300      	movs	r3, #0
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80061f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80061f6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d114      	bne.n	800622a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006200:	f002 ff7a 	bl	80090f8 <HAL_RCC_GetHCLKFreq>
 8006204:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	4a48      	ldr	r2, [pc, #288]	@ (800632c <HAL_DAC_ConfigChannel+0x368>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d904      	bls.n	8006218 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006214:	627b      	str	r3, [r7, #36]	@ 0x24
 8006216:	e00f      	b.n	8006238 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4a45      	ldr	r2, [pc, #276]	@ (8006330 <HAL_DAC_ConfigChannel+0x36c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d90a      	bls.n	8006236 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006222:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006226:	627b      	str	r3, [r7, #36]	@ 0x24
 8006228:	e006      	b.n	8006238 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006230:	4313      	orrs	r3, r2
 8006232:	627b      	str	r3, [r7, #36]	@ 0x24
 8006234:	e000      	b.n	8006238 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006236:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006246:	4313      	orrs	r3, r2
 8006248:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006250:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6819      	ldr	r1, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	43da      	mvns	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	400a      	ands	r2, r1
 800626e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f003 0310 	and.w	r3, r3, #16
 800627e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006282:	fa02 f303 	lsl.w	r3, r2, r3
 8006286:	43db      	mvns	r3, r3
 8006288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800628a:	4013      	ands	r3, r2
 800628c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	fa02 f303 	lsl.w	r3, r2, r3
 80062a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a2:	4313      	orrs	r3, r2
 80062a4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ac:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6819      	ldr	r1, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f003 0310 	and.w	r3, r3, #16
 80062ba:	22c0      	movs	r2, #192	@ 0xc0
 80062bc:	fa02 f303 	lsl.w	r3, r2, r3
 80062c0:	43da      	mvns	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	400a      	ands	r2, r1
 80062c8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	089b      	lsrs	r3, r3, #2
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	089b      	lsrs	r3, r3, #2
 80062dc:	021b      	lsls	r3, r3, #8
 80062de:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f003 0310 	and.w	r3, r3, #16
 80062f4:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80062f8:	fa01 f303 	lsl.w	r3, r1, r3
 80062fc:	43db      	mvns	r3, r3
 80062fe:	ea02 0103 	and.w	r1, r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	409a      	lsls	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2201      	movs	r2, #1
 8006318:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006320:	7ffb      	ldrb	r3, [r7, #31]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3728      	adds	r7, #40	@ 0x28
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	09896800 	.word	0x09896800
 8006330:	04c4b400 	.word	0x04c4b400

08006334 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e08d      	b.n	8006476 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	4b47      	ldr	r3, [pc, #284]	@ (8006480 <HAL_DMA_Init+0x138>)
 8006362:	429a      	cmp	r2, r3
 8006364:	d80f      	bhi.n	8006386 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	4b45      	ldr	r3, [pc, #276]	@ (8006484 <HAL_DMA_Init+0x13c>)
 800636e:	4413      	add	r3, r2
 8006370:	4a45      	ldr	r2, [pc, #276]	@ (8006488 <HAL_DMA_Init+0x140>)
 8006372:	fba2 2303 	umull	r2, r3, r2, r3
 8006376:	091b      	lsrs	r3, r3, #4
 8006378:	009a      	lsls	r2, r3, #2
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a42      	ldr	r2, [pc, #264]	@ (800648c <HAL_DMA_Init+0x144>)
 8006382:	641a      	str	r2, [r3, #64]	@ 0x40
 8006384:	e00e      	b.n	80063a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	4b40      	ldr	r3, [pc, #256]	@ (8006490 <HAL_DMA_Init+0x148>)
 800638e:	4413      	add	r3, r2
 8006390:	4a3d      	ldr	r2, [pc, #244]	@ (8006488 <HAL_DMA_Init+0x140>)
 8006392:	fba2 2303 	umull	r2, r3, r2, r3
 8006396:	091b      	lsrs	r3, r3, #4
 8006398:	009a      	lsls	r2, r3, #2
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a3c      	ldr	r2, [pc, #240]	@ (8006494 <HAL_DMA_Init+0x14c>)
 80063a2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80063ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80063c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f9b6 	bl	8006768 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006404:	d102      	bne.n	800640c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006420:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d010      	beq.n	800644c <HAL_DMA_Init+0x104>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b04      	cmp	r3, #4
 8006430:	d80c      	bhi.n	800644c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f9d6 	bl	80067e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006448:	605a      	str	r2, [r3, #4]
 800644a:	e008      	b.n	800645e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	40020407 	.word	0x40020407
 8006484:	bffdfff8 	.word	0xbffdfff8
 8006488:	cccccccd 	.word	0xcccccccd
 800648c:	40020000 	.word	0x40020000
 8006490:	bffdfbf8 	.word	0xbffdfbf8
 8006494:	40020400 	.word	0x40020400

08006498 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_DMA_Start_IT+0x20>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e066      	b.n	8006586 <HAL_DMA_Start_IT+0xee>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d155      	bne.n	8006578 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0201 	bic.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	68b9      	ldr	r1, [r7, #8]
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 f8fb 	bl	80066ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d008      	beq.n	8006510 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 020e 	orr.w	r2, r2, #14
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	e00f      	b.n	8006530 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0204 	bic.w	r2, r2, #4
 800651e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 020a 	orr.w	r2, r2, #10
 800652e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d007      	beq.n	800654e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006548:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800654c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006552:	2b00      	cmp	r3, #0
 8006554:	d007      	beq.n	8006566 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006560:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006564:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f042 0201 	orr.w	r2, r2, #1
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	e005      	b.n	8006584 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006580:	2302      	movs	r3, #2
 8006582:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006584:	7dfb      	ldrb	r3, [r7, #23]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065aa:	f003 031f 	and.w	r3, r3, #31
 80065ae:	2204      	movs	r2, #4
 80065b0:	409a      	lsls	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4013      	ands	r3, r2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d026      	beq.n	8006608 <HAL_DMA_IRQHandler+0x7a>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d021      	beq.n	8006608 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0320 	and.w	r3, r3, #32
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d107      	bne.n	80065e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0204 	bic.w	r2, r2, #4
 80065e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e6:	f003 021f 	and.w	r2, r3, #31
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ee:	2104      	movs	r1, #4
 80065f0:	fa01 f202 	lsl.w	r2, r1, r2
 80065f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d071      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006606:	e06c      	b.n	80066e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660c:	f003 031f 	and.w	r3, r3, #31
 8006610:	2202      	movs	r2, #2
 8006612:	409a      	lsls	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4013      	ands	r3, r2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d02e      	beq.n	800667a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d029      	beq.n	800667a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0320 	and.w	r3, r3, #32
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10b      	bne.n	800664c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 020a 	bic.w	r2, r2, #10
 8006642:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006650:	f003 021f 	and.w	r2, r3, #31
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006658:	2102      	movs	r1, #2
 800665a:	fa01 f202 	lsl.w	r2, r1, r2
 800665e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666c:	2b00      	cmp	r3, #0
 800666e:	d038      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006678:	e033      	b.n	80066e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800667e:	f003 031f 	and.w	r3, r3, #31
 8006682:	2208      	movs	r2, #8
 8006684:	409a      	lsls	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4013      	ands	r3, r2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d02a      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f003 0308 	and.w	r3, r3, #8
 8006694:	2b00      	cmp	r3, #0
 8006696:	d025      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 020e 	bic.w	r2, r2, #14
 80066a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ac:	f003 021f 	and.w	r2, r3, #31
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b4:	2101      	movs	r1, #1
 80066b6:	fa01 f202 	lsl.w	r2, r1, r2
 80066ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d004      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
}
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006702:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006714:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671a:	f003 021f 	and.w	r2, r3, #31
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006722:	2101      	movs	r1, #1
 8006724:	fa01 f202 	lsl.w	r2, r1, r2
 8006728:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	2b10      	cmp	r3, #16
 8006738:	d108      	bne.n	800674c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800674a:	e007      	b.n	800675c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	60da      	str	r2, [r3, #12]
}
 800675c:	bf00      	nop
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	461a      	mov	r2, r3
 8006776:	4b16      	ldr	r3, [pc, #88]	@ (80067d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006778:	429a      	cmp	r2, r3
 800677a:	d802      	bhi.n	8006782 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800677c:	4b15      	ldr	r3, [pc, #84]	@ (80067d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e001      	b.n	8006786 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006782:	4b15      	ldr	r3, [pc, #84]	@ (80067d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006784:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	b2db      	uxtb	r3, r3
 8006790:	3b08      	subs	r3, #8
 8006792:	4a12      	ldr	r2, [pc, #72]	@ (80067dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006794:	fba2 2303 	umull	r2, r3, r2, r3
 8006798:	091b      	lsrs	r3, r3, #4
 800679a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a0:	089b      	lsrs	r3, r3, #2
 80067a2:	009a      	lsls	r2, r3, #2
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4413      	add	r3, r2
 80067a8:	461a      	mov	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a0b      	ldr	r2, [pc, #44]	@ (80067e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80067b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f003 031f 	and.w	r3, r3, #31
 80067ba:	2201      	movs	r2, #1
 80067bc:	409a      	lsls	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80067c2:	bf00      	nop
 80067c4:	371c      	adds	r7, #28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	40020407 	.word	0x40020407
 80067d4:	40020800 	.word	0x40020800
 80067d8:	40020820 	.word	0x40020820
 80067dc:	cccccccd 	.word	0xcccccccd
 80067e0:	40020880 	.word	0x40020880

080067e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	461a      	mov	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a08      	ldr	r2, [pc, #32]	@ (8006828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006806:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3b01      	subs	r3, #1
 800680c:	f003 031f 	and.w	r3, r3, #31
 8006810:	2201      	movs	r2, #1
 8006812:	409a      	lsls	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006818:	bf00      	nop
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	1000823f 	.word	0x1000823f
 8006828:	40020940 	.word	0x40020940

0800682c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800683a:	e15a      	b.n	8006af2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	2101      	movs	r1, #1
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	fa01 f303 	lsl.w	r3, r1, r3
 8006848:	4013      	ands	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 814c 	beq.w	8006aec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f003 0303 	and.w	r3, r3, #3
 800685c:	2b01      	cmp	r3, #1
 800685e:	d005      	beq.n	800686c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006868:	2b02      	cmp	r3, #2
 800686a:	d130      	bne.n	80068ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	005b      	lsls	r3, r3, #1
 8006876:	2203      	movs	r2, #3
 8006878:	fa02 f303 	lsl.w	r3, r2, r3
 800687c:	43db      	mvns	r3, r3
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	4013      	ands	r3, r2
 8006882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	fa02 f303 	lsl.w	r3, r2, r3
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068a2:	2201      	movs	r2, #1
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	fa02 f303 	lsl.w	r3, r2, r3
 80068aa:	43db      	mvns	r3, r3
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	4013      	ands	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	091b      	lsrs	r3, r3, #4
 80068b8:	f003 0201 	and.w	r2, r3, #1
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	fa02 f303 	lsl.w	r3, r2, r3
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d017      	beq.n	800690a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	2203      	movs	r2, #3
 80068e6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ea:	43db      	mvns	r3, r3
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4013      	ands	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	fa02 f303 	lsl.w	r3, r2, r3
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	4313      	orrs	r3, r2
 8006902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f003 0303 	and.w	r3, r3, #3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d123      	bne.n	800695e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	08da      	lsrs	r2, r3, #3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3208      	adds	r2, #8
 800691e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	220f      	movs	r2, #15
 800692e:	fa02 f303 	lsl.w	r3, r2, r3
 8006932:	43db      	mvns	r3, r3
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	4013      	ands	r3, r2
 8006938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	691a      	ldr	r2, [r3, #16]
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f003 0307 	and.w	r3, r3, #7
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	fa02 f303 	lsl.w	r3, r2, r3
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	4313      	orrs	r3, r2
 800694e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	08da      	lsrs	r2, r3, #3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3208      	adds	r2, #8
 8006958:	6939      	ldr	r1, [r7, #16]
 800695a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	2203      	movs	r2, #3
 800696a:	fa02 f303 	lsl.w	r3, r2, r3
 800696e:	43db      	mvns	r3, r3
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	4013      	ands	r3, r2
 8006974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f003 0203 	and.w	r2, r3, #3
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	fa02 f303 	lsl.w	r3, r2, r3
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 80a6 	beq.w	8006aec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069a0:	4b5b      	ldr	r3, [pc, #364]	@ (8006b10 <HAL_GPIO_Init+0x2e4>)
 80069a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069a4:	4a5a      	ldr	r2, [pc, #360]	@ (8006b10 <HAL_GPIO_Init+0x2e4>)
 80069a6:	f043 0301 	orr.w	r3, r3, #1
 80069aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80069ac:	4b58      	ldr	r3, [pc, #352]	@ (8006b10 <HAL_GPIO_Init+0x2e4>)
 80069ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	60bb      	str	r3, [r7, #8]
 80069b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069b8:	4a56      	ldr	r2, [pc, #344]	@ (8006b14 <HAL_GPIO_Init+0x2e8>)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	089b      	lsrs	r3, r3, #2
 80069be:	3302      	adds	r3, #2
 80069c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	220f      	movs	r2, #15
 80069d0:	fa02 f303 	lsl.w	r3, r2, r3
 80069d4:	43db      	mvns	r3, r3
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4013      	ands	r3, r2
 80069da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80069e2:	d01f      	beq.n	8006a24 <HAL_GPIO_Init+0x1f8>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a4c      	ldr	r2, [pc, #304]	@ (8006b18 <HAL_GPIO_Init+0x2ec>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d019      	beq.n	8006a20 <HAL_GPIO_Init+0x1f4>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a4b      	ldr	r2, [pc, #300]	@ (8006b1c <HAL_GPIO_Init+0x2f0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d013      	beq.n	8006a1c <HAL_GPIO_Init+0x1f0>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a4a      	ldr	r2, [pc, #296]	@ (8006b20 <HAL_GPIO_Init+0x2f4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00d      	beq.n	8006a18 <HAL_GPIO_Init+0x1ec>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a49      	ldr	r2, [pc, #292]	@ (8006b24 <HAL_GPIO_Init+0x2f8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d007      	beq.n	8006a14 <HAL_GPIO_Init+0x1e8>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a48      	ldr	r2, [pc, #288]	@ (8006b28 <HAL_GPIO_Init+0x2fc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d101      	bne.n	8006a10 <HAL_GPIO_Init+0x1e4>
 8006a0c:	2305      	movs	r3, #5
 8006a0e:	e00a      	b.n	8006a26 <HAL_GPIO_Init+0x1fa>
 8006a10:	2306      	movs	r3, #6
 8006a12:	e008      	b.n	8006a26 <HAL_GPIO_Init+0x1fa>
 8006a14:	2304      	movs	r3, #4
 8006a16:	e006      	b.n	8006a26 <HAL_GPIO_Init+0x1fa>
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e004      	b.n	8006a26 <HAL_GPIO_Init+0x1fa>
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e002      	b.n	8006a26 <HAL_GPIO_Init+0x1fa>
 8006a20:	2301      	movs	r3, #1
 8006a22:	e000      	b.n	8006a26 <HAL_GPIO_Init+0x1fa>
 8006a24:	2300      	movs	r3, #0
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	f002 0203 	and.w	r2, r2, #3
 8006a2c:	0092      	lsls	r2, r2, #2
 8006a2e:	4093      	lsls	r3, r2
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a36:	4937      	ldr	r1, [pc, #220]	@ (8006b14 <HAL_GPIO_Init+0x2e8>)
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	089b      	lsrs	r3, r3, #2
 8006a3c:	3302      	adds	r3, #2
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a44:	4b39      	ldr	r3, [pc, #228]	@ (8006b2c <HAL_GPIO_Init+0x300>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4013      	ands	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006a68:	4a30      	ldr	r2, [pc, #192]	@ (8006b2c <HAL_GPIO_Init+0x300>)
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8006b2c <HAL_GPIO_Init+0x300>)
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	43db      	mvns	r3, r3
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a92:	4a26      	ldr	r2, [pc, #152]	@ (8006b2c <HAL_GPIO_Init+0x300>)
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006a98:	4b24      	ldr	r3, [pc, #144]	@ (8006b2c <HAL_GPIO_Init+0x300>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006abc:	4a1b      	ldr	r2, [pc, #108]	@ (8006b2c <HAL_GPIO_Init+0x300>)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8006b2c <HAL_GPIO_Init+0x300>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	43db      	mvns	r3, r3
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006ae6:	4a11      	ldr	r2, [pc, #68]	@ (8006b2c <HAL_GPIO_Init+0x300>)
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	3301      	adds	r3, #1
 8006af0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	fa22 f303 	lsr.w	r3, r2, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f47f ae9d 	bne.w	800683c <HAL_GPIO_Init+0x10>
  }
}
 8006b02:	bf00      	nop
 8006b04:	bf00      	nop
 8006b06:	371c      	adds	r7, #28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	40021000 	.word	0x40021000
 8006b14:	40010000 	.word	0x40010000
 8006b18:	48000400 	.word	0x48000400
 8006b1c:	48000800 	.word	0x48000800
 8006b20:	48000c00 	.word	0x48000c00
 8006b24:	48001000 	.word	0x48001000
 8006b28:	48001400 	.word	0x48001400
 8006b2c:	40010400 	.word	0x40010400

08006b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691a      	ldr	r2, [r3, #16]
 8006b40:	887b      	ldrh	r3, [r7, #2]
 8006b42:	4013      	ands	r3, r2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	73fb      	strb	r3, [r7, #15]
 8006b4c:	e001      	b.n	8006b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	807b      	strh	r3, [r7, #2]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b70:	787b      	ldrb	r3, [r7, #1]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b76:	887a      	ldrh	r2, [r7, #2]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006b7c:	e002      	b.n	8006b84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b7e:	887a      	ldrh	r2, [r7, #2]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ba2:	887a      	ldrh	r2, [r7, #2]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	041a      	lsls	r2, r3, #16
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	43d9      	mvns	r1, r3
 8006bae:	887b      	ldrh	r3, [r7, #2]
 8006bb0:	400b      	ands	r3, r1
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	619a      	str	r2, [r3, #24]
}
 8006bb8:	bf00      	nop
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e0c0      	b.n	8006d58 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f009 fa22 	bl	8010034 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2203      	movs	r2, #3
 8006bf4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f005 f856 	bl	800bcae <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c02:	2300      	movs	r3, #0
 8006c04:	73fb      	strb	r3, [r7, #15]
 8006c06:	e03e      	b.n	8006c86 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c08:	7bfa      	ldrb	r2, [r7, #15]
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	440b      	add	r3, r1
 8006c16:	3311      	adds	r3, #17
 8006c18:	2201      	movs	r2, #1
 8006c1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c1c:	7bfa      	ldrb	r2, [r7, #15]
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	440b      	add	r3, r1
 8006c2a:	3310      	adds	r3, #16
 8006c2c:	7bfa      	ldrb	r2, [r7, #15]
 8006c2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c30:	7bfa      	ldrb	r2, [r7, #15]
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	00db      	lsls	r3, r3, #3
 8006c3c:	440b      	add	r3, r1
 8006c3e:	3313      	adds	r3, #19
 8006c40:	2200      	movs	r2, #0
 8006c42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c44:	7bfa      	ldrb	r2, [r7, #15]
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	440b      	add	r3, r1
 8006c52:	3320      	adds	r3, #32
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c58:	7bfa      	ldrb	r2, [r7, #15]
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	440b      	add	r3, r1
 8006c66:	3324      	adds	r3, #36	@ 0x24
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	440b      	add	r3, r1
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	3301      	adds	r3, #1
 8006c84:	73fb      	strb	r3, [r7, #15]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	791b      	ldrb	r3, [r3, #4]
 8006c8a:	7bfa      	ldrb	r2, [r7, #15]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d3bb      	bcc.n	8006c08 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c90:	2300      	movs	r3, #0
 8006c92:	73fb      	strb	r3, [r7, #15]
 8006c94:	e044      	b.n	8006d20 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c96:	7bfa      	ldrb	r2, [r7, #15]
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	440b      	add	r3, r1
 8006ca4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006ca8:	2200      	movs	r2, #0
 8006caa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006cac:	7bfa      	ldrb	r2, [r7, #15]
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	440b      	add	r3, r1
 8006cba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cbe:	7bfa      	ldrb	r2, [r7, #15]
 8006cc0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006cc2:	7bfa      	ldrb	r2, [r7, #15]
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	440b      	add	r3, r1
 8006cd0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006cd8:	7bfa      	ldrb	r2, [r7, #15]
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	440b      	add	r3, r1
 8006ce6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006cee:	7bfa      	ldrb	r2, [r7, #15]
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	440b      	add	r3, r1
 8006cfc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d04:	7bfa      	ldrb	r2, [r7, #15]
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	440b      	add	r3, r1
 8006d12:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006d16:	2200      	movs	r2, #0
 8006d18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	73fb      	strb	r3, [r7, #15]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	791b      	ldrb	r3, [r3, #4]
 8006d24:	7bfa      	ldrb	r2, [r7, #15]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d3b5      	bcc.n	8006c96 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	3304      	adds	r3, #4
 8006d32:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006d36:	f004 ffd5 	bl	800bce4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	7a9b      	ldrb	r3, [r3, #10]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d102      	bne.n	8006d56 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 fc42 	bl	80085da <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d101      	bne.n	8006d76 <HAL_PCD_Start+0x16>
 8006d72:	2302      	movs	r3, #2
 8006d74:	e012      	b.n	8006d9c <HAL_PCD_Start+0x3c>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f004 ff7c 	bl	800bc80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f007 fa3d 	bl	800e20c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f007 fa42 	bl	800e23a <USB_ReadInterrupts>
 8006db6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fb06 	bl	80073d4 <PCD_EP_ISR_Handler>

    return;
 8006dc8:	e110      	b.n	8006fec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d013      	beq.n	8006dfc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006de6:	b292      	uxth	r2, r2
 8006de8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f009 f9b2 	bl	8010156 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006df2:	2100      	movs	r1, #0
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f8fc 	bl	8006ff2 <HAL_PCD_SetAddress>

    return;
 8006dfa:	e0f7      	b.n	8006fec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00c      	beq.n	8006e20 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e18:	b292      	uxth	r2, r2
 8006e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006e1e:	e0e5      	b.n	8006fec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00c      	beq.n	8006e44 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e3c:	b292      	uxth	r2, r2
 8006e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006e42:	e0d3      	b.n	8006fec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d034      	beq.n	8006eb8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0204 	bic.w	r2, r2, #4
 8006e60:	b292      	uxth	r2, r2
 8006e62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0208 	bic.w	r2, r2, #8
 8006e78:	b292      	uxth	r2, r2
 8006e7a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d107      	bne.n	8006e98 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006e90:	2100      	movs	r1, #0
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f009 fb52 	bl	801053c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f009 f995 	bl	80101c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006eb0:	b292      	uxth	r2, r2
 8006eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006eb6:	e099      	b.n	8006fec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d027      	beq.n	8006f12 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f042 0208 	orr.w	r2, r2, #8
 8006ed4:	b292      	uxth	r2, r2
 8006ed6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006eec:	b292      	uxth	r2, r2
 8006eee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f042 0204 	orr.w	r2, r2, #4
 8006f04:	b292      	uxth	r2, r2
 8006f06:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f009 f942 	bl	8010194 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006f10:	e06c      	b.n	8006fec <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d040      	beq.n	8006f9e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f2e:	b292      	uxth	r2, r2
 8006f30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d12b      	bne.n	8006f96 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f042 0204 	orr.w	r2, r2, #4
 8006f50:	b292      	uxth	r2, r2
 8006f52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f042 0208 	orr.w	r2, r2, #8
 8006f68:	b292      	uxth	r2, r2
 8006f6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	089b      	lsrs	r3, r3, #2
 8006f82:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f009 fad4 	bl	801053c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006f94:	e02a      	b.n	8006fec <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f009 f8fc 	bl	8010194 <HAL_PCD_SuspendCallback>
    return;
 8006f9c:	e026      	b.n	8006fec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00f      	beq.n	8006fc8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006fba:	b292      	uxth	r2, r2
 8006fbc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f009 f8ba 	bl	801013a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006fc6:	e011      	b.n	8006fec <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00c      	beq.n	8006fec <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fe4:	b292      	uxth	r2, r2
 8006fe6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006fea:	bf00      	nop
  }
}
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007004:	2b01      	cmp	r3, #1
 8007006:	d101      	bne.n	800700c <HAL_PCD_SetAddress+0x1a>
 8007008:	2302      	movs	r3, #2
 800700a:	e012      	b.n	8007032 <HAL_PCD_SetAddress+0x40>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	78fa      	ldrb	r2, [r7, #3]
 8007018:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	78fa      	ldrb	r2, [r7, #3]
 8007020:	4611      	mov	r1, r2
 8007022:	4618      	mov	r0, r3
 8007024:	f007 f8de 	bl	800e1e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	4608      	mov	r0, r1
 8007044:	4611      	mov	r1, r2
 8007046:	461a      	mov	r2, r3
 8007048:	4603      	mov	r3, r0
 800704a:	70fb      	strb	r3, [r7, #3]
 800704c:	460b      	mov	r3, r1
 800704e:	803b      	strh	r3, [r7, #0]
 8007050:	4613      	mov	r3, r2
 8007052:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800705c:	2b00      	cmp	r3, #0
 800705e:	da0e      	bge.n	800707e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	f003 0207 	and.w	r2, r3, #7
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	00db      	lsls	r3, r3, #3
 800706e:	3310      	adds	r3, #16
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	4413      	add	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	705a      	strb	r2, [r3, #1]
 800707c:	e00e      	b.n	800709c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800707e:	78fb      	ldrb	r3, [r7, #3]
 8007080:	f003 0207 	and.w	r2, r3, #7
 8007084:	4613      	mov	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	4413      	add	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800709c:	78fb      	ldrb	r3, [r7, #3]
 800709e:	f003 0307 	and.w	r3, r3, #7
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80070a8:	883b      	ldrh	r3, [r7, #0]
 80070aa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	78ba      	ldrb	r2, [r7, #2]
 80070b6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80070b8:	78bb      	ldrb	r3, [r7, #2]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d102      	bne.n	80070c4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <HAL_PCD_EP_Open+0x98>
 80070ce:	2302      	movs	r3, #2
 80070d0:	e00e      	b.n	80070f0 <HAL_PCD_EP_Open+0xb6>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68f9      	ldr	r1, [r7, #12]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f004 fe1d 	bl	800bd20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80070ee:	7afb      	ldrb	r3, [r7, #11]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007108:	2b00      	cmp	r3, #0
 800710a:	da0e      	bge.n	800712a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	f003 0207 	and.w	r2, r3, #7
 8007112:	4613      	mov	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	3310      	adds	r3, #16
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	4413      	add	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2201      	movs	r2, #1
 8007126:	705a      	strb	r2, [r3, #1]
 8007128:	e00e      	b.n	8007148 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	f003 0207 	and.w	r2, r3, #7
 8007130:	4613      	mov	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	4413      	add	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	b2da      	uxtb	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800715a:	2b01      	cmp	r3, #1
 800715c:	d101      	bne.n	8007162 <HAL_PCD_EP_Close+0x6a>
 800715e:	2302      	movs	r3, #2
 8007160:	e00e      	b.n	8007180 <HAL_PCD_EP_Close+0x88>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68f9      	ldr	r1, [r7, #12]
 8007170:	4618      	mov	r0, r3
 8007172:	f005 f999 	bl	800c4a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	460b      	mov	r3, r1
 8007196:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007198:	7afb      	ldrb	r3, [r7, #11]
 800719a:	f003 0207 	and.w	r2, r3, #7
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	00db      	lsls	r3, r3, #3
 80071a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4413      	add	r3, r2
 80071ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2200      	movs	r2, #0
 80071c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2200      	movs	r2, #0
 80071c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6979      	ldr	r1, [r7, #20]
 80071da:	4618      	mov	r0, r3
 80071dc:	f005 fb51 	bl	800c882 <USB_EPStartXfer>

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	460b      	mov	r3, r1
 80071f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80071f6:	78fb      	ldrb	r3, [r7, #3]
 80071f8:	f003 0207 	and.w	r2, r3, #7
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	440b      	add	r3, r1
 8007208:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800720c:	681b      	ldr	r3, [r3, #0]
}
 800720e:	4618      	mov	r0, r3
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b086      	sub	sp, #24
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	603b      	str	r3, [r7, #0]
 8007226:	460b      	mov	r3, r1
 8007228:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800722a:	7afb      	ldrb	r3, [r7, #11]
 800722c:	f003 0207 	and.w	r2, r3, #7
 8007230:	4613      	mov	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	3310      	adds	r3, #16
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4413      	add	r3, r2
 800723e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2200      	movs	r2, #0
 800725e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2201      	movs	r2, #1
 8007264:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007266:	7afb      	ldrb	r3, [r7, #11]
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	b2da      	uxtb	r2, r3
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6979      	ldr	r1, [r7, #20]
 8007278:	4618      	mov	r0, r3
 800727a:	f005 fb02 	bl	800c882 <USB_EPStartXfer>

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007294:	78fb      	ldrb	r3, [r7, #3]
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	7912      	ldrb	r2, [r2, #4]
 800729e:	4293      	cmp	r3, r2
 80072a0:	d901      	bls.n	80072a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e03e      	b.n	8007324 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80072a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	da0e      	bge.n	80072cc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072ae:	78fb      	ldrb	r3, [r7, #3]
 80072b0:	f003 0207 	and.w	r2, r3, #7
 80072b4:	4613      	mov	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	3310      	adds	r3, #16
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	4413      	add	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2201      	movs	r2, #1
 80072c8:	705a      	strb	r2, [r3, #1]
 80072ca:	e00c      	b.n	80072e6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80072cc:	78fa      	ldrb	r2, [r7, #3]
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	4413      	add	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2201      	movs	r2, #1
 80072ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072ec:	78fb      	ldrb	r3, [r7, #3]
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d101      	bne.n	8007306 <HAL_PCD_EP_SetStall+0x7e>
 8007302:	2302      	movs	r3, #2
 8007304:	e00e      	b.n	8007324 <HAL_PCD_EP_SetStall+0x9c>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68f9      	ldr	r1, [r7, #12]
 8007314:	4618      	mov	r0, r3
 8007316:	f006 fe66 	bl	800dfe6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	460b      	mov	r3, r1
 8007336:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	f003 030f 	and.w	r3, r3, #15
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	7912      	ldrb	r2, [r2, #4]
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e040      	b.n	80073cc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800734a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800734e:	2b00      	cmp	r3, #0
 8007350:	da0e      	bge.n	8007370 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	f003 0207 	and.w	r2, r3, #7
 8007358:	4613      	mov	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	3310      	adds	r3, #16
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	4413      	add	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2201      	movs	r2, #1
 800736c:	705a      	strb	r2, [r3, #1]
 800736e:	e00e      	b.n	800738e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	f003 0207 	and.w	r2, r3, #7
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	00db      	lsls	r3, r3, #3
 800737e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	4413      	add	r3, r2
 8007386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007394:	78fb      	ldrb	r3, [r7, #3]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	b2da      	uxtb	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d101      	bne.n	80073ae <HAL_PCD_EP_ClrStall+0x82>
 80073aa:	2302      	movs	r3, #2
 80073ac:	e00e      	b.n	80073cc <HAL_PCD_EP_ClrStall+0xa0>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68f9      	ldr	r1, [r7, #12]
 80073bc:	4618      	mov	r0, r3
 80073be:	f006 fe63 	bl	800e088 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b096      	sub	sp, #88	@ 0x58
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80073dc:	e3ad      	b.n	8007b3a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80073e6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80073ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 80073f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f040 816f 	bne.w	80076e0 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007402:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	2b00      	cmp	r3, #0
 800740c:	d14c      	bne.n	80074a8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	b29b      	uxth	r3, r3
 8007416:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800741a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800741e:	81fb      	strh	r3, [r7, #14]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	89fb      	ldrh	r3, [r7, #14]
 8007426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800742a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800742e:	b29b      	uxth	r3, r3
 8007430:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3310      	adds	r3, #16
 8007436:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007440:	b29b      	uxth	r3, r3
 8007442:	461a      	mov	r2, r3
 8007444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	4413      	add	r3, r2
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6812      	ldr	r2, [r2, #0]
 8007450:	4413      	add	r3, r2
 8007452:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800745c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800745e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007462:	695a      	ldr	r2, [r3, #20]
 8007464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	441a      	add	r2, r3
 800746a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800746c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800746e:	2100      	movs	r1, #0
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f008 fe48 	bl	8010106 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	7b1b      	ldrb	r3, [r3, #12]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 835c 	beq.w	8007b3a <PCD_EP_ISR_Handler+0x766>
 8007482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	2b00      	cmp	r3, #0
 8007488:	f040 8357 	bne.w	8007b3a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	7b1b      	ldrb	r3, [r3, #12]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007496:	b2da      	uxtb	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	731a      	strb	r2, [r3, #12]
 80074a6:	e348      	b.n	8007b3a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074ae:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80074ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80074be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d032      	beq.n	800752c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	461a      	mov	r2, r3
 80074d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	4413      	add	r3, r2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	6812      	ldr	r2, [r2, #0]
 80074de:	4413      	add	r3, r2
 80074e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80074ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80074f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80074fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007500:	b29b      	uxth	r3, r3
 8007502:	f006 feec 	bl	800e2de <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29a      	uxth	r2, r3
 800750e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007512:	4013      	ands	r3, r2
 8007514:	823b      	strh	r3, [r7, #16]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	8a3a      	ldrh	r2, [r7, #16]
 800751c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007520:	b292      	uxth	r2, r2
 8007522:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f008 fdc1 	bl	80100ac <HAL_PCD_SetupStageCallback>
 800752a:	e306      	b.n	8007b3a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800752c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007530:	2b00      	cmp	r3, #0
 8007532:	f280 8302 	bge.w	8007b3a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29a      	uxth	r2, r3
 800753e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007542:	4013      	ands	r3, r2
 8007544:	83fb      	strh	r3, [r7, #30]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	8bfa      	ldrh	r2, [r7, #30]
 800754c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007550:	b292      	uxth	r2, r2
 8007552:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800755c:	b29b      	uxth	r3, r3
 800755e:	461a      	mov	r2, r3
 8007560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	00db      	lsls	r3, r3, #3
 8007566:	4413      	add	r3, r2
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	6812      	ldr	r2, [r2, #0]
 800756c:	4413      	add	r3, r2
 800756e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800757a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800757c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d019      	beq.n	80075b8 <PCD_EP_ISR_Handler+0x1e4>
 8007584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d015      	beq.n	80075b8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007592:	6959      	ldr	r1, [r3, #20]
 8007594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007596:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800759a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800759c:	b29b      	uxth	r3, r3
 800759e:	f006 fe9e 	bl	800e2de <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80075a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075a4:	695a      	ldr	r2, [r3, #20]
 80075a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	441a      	add	r2, r3
 80075ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80075b0:	2100      	movs	r1, #0
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f008 fd8c 	bl	80100d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80075c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80075c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f040 82b5 	bne.w	8007b3a <PCD_EP_ISR_Handler+0x766>
 80075d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80075d4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80075d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075dc:	f000 82ad 	beq.w	8007b3a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	61bb      	str	r3, [r7, #24]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	461a      	mov	r2, r3
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	4413      	add	r3, r2
 80075f6:	61bb      	str	r3, [r7, #24]
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80075fe:	617b      	str	r3, [r7, #20]
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	b29b      	uxth	r3, r3
 8007606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800760a:	b29a      	uxth	r2, r3
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	801a      	strh	r2, [r3, #0]
 8007610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10a      	bne.n	800762e <PCD_EP_ISR_Handler+0x25a>
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	881b      	ldrh	r3, [r3, #0]
 800761c:	b29b      	uxth	r3, r3
 800761e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007626:	b29a      	uxth	r2, r3
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	801a      	strh	r2, [r3, #0]
 800762c:	e039      	b.n	80076a2 <PCD_EP_ISR_Handler+0x2ce>
 800762e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	2b3e      	cmp	r3, #62	@ 0x3e
 8007634:	d818      	bhi.n	8007668 <PCD_EP_ISR_Handler+0x294>
 8007636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	085b      	lsrs	r3, r3, #1
 800763c:	647b      	str	r3, [r7, #68]	@ 0x44
 800763e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <PCD_EP_ISR_Handler+0x27c>
 800764a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800764c:	3301      	adds	r3, #1
 800764e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29a      	uxth	r2, r3
 8007656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007658:	b29b      	uxth	r3, r3
 800765a:	029b      	lsls	r3, r3, #10
 800765c:	b29b      	uxth	r3, r3
 800765e:	4313      	orrs	r3, r2
 8007660:	b29a      	uxth	r2, r3
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	e01c      	b.n	80076a2 <PCD_EP_ISR_Handler+0x2ce>
 8007668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	095b      	lsrs	r3, r3, #5
 800766e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f003 031f 	and.w	r3, r3, #31
 8007678:	2b00      	cmp	r3, #0
 800767a:	d102      	bne.n	8007682 <PCD_EP_ISR_Handler+0x2ae>
 800767c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800767e:	3b01      	subs	r3, #1
 8007680:	647b      	str	r3, [r7, #68]	@ 0x44
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	b29a      	uxth	r2, r3
 8007688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800768a:	b29b      	uxth	r3, r3
 800768c:	029b      	lsls	r3, r3, #10
 800768e:	b29b      	uxth	r3, r3
 8007690:	4313      	orrs	r3, r2
 8007692:	b29b      	uxth	r3, r3
 8007694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800769c:	b29a      	uxth	r2, r3
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076b2:	827b      	strh	r3, [r7, #18]
 80076b4:	8a7b      	ldrh	r3, [r7, #18]
 80076b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80076ba:	827b      	strh	r3, [r7, #18]
 80076bc:	8a7b      	ldrh	r3, [r7, #18]
 80076be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80076c2:	827b      	strh	r3, [r7, #18]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	8a7b      	ldrh	r3, [r7, #18]
 80076ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076da:	b29b      	uxth	r3, r3
 80076dc:	8013      	strh	r3, [r2, #0]
 80076de:	e22c      	b.n	8007b3a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	461a      	mov	r2, r3
 80076e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80076f4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f280 80f6 	bge.w	80078ea <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	b29a      	uxth	r2, r3
 8007710:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007714:	4013      	ands	r3, r2
 8007716:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800772c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007730:	b292      	uxth	r2, r2
 8007732:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007734:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007738:	4613      	mov	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	4413      	add	r3, r2
 8007748:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800774a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800774c:	7b1b      	ldrb	r3, [r3, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d123      	bne.n	800779a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800775a:	b29b      	uxth	r3, r3
 800775c:	461a      	mov	r2, r3
 800775e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	4413      	add	r3, r2
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6812      	ldr	r2, [r2, #0]
 800776a:	4413      	add	r3, r2
 800776c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007776:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800777a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 808e 	beq.w	80078a0 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6818      	ldr	r0, [r3, #0]
 8007788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800778a:	6959      	ldr	r1, [r3, #20]
 800778c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800778e:	88da      	ldrh	r2, [r3, #6]
 8007790:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007794:	f006 fda3 	bl	800e2de <USB_ReadPMA>
 8007798:	e082      	b.n	80078a0 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800779a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800779c:	78db      	ldrb	r3, [r3, #3]
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d10a      	bne.n	80077b8 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80077a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80077a6:	461a      	mov	r2, r3
 80077a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f9d3 	bl	8007b56 <HAL_PCD_EP_DB_Receive>
 80077b0:	4603      	mov	r3, r0
 80077b2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80077b6:	e073      	b.n	80078a0 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	461a      	mov	r2, r3
 80077be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	881b      	ldrh	r3, [r3, #0]
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077d2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	441a      	add	r2, r3
 80077e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80077e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	461a      	mov	r2, r3
 8007802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	b29b      	uxth	r3, r3
 800780e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d022      	beq.n	800785c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800781e:	b29b      	uxth	r3, r3
 8007820:	461a      	mov	r2, r3
 8007822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	4413      	add	r3, r2
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6812      	ldr	r2, [r2, #0]
 800782e:	4413      	add	r3, r2
 8007830:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800783a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800783e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007842:	2b00      	cmp	r3, #0
 8007844:	d02c      	beq.n	80078a0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800784c:	6959      	ldr	r1, [r3, #20]
 800784e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007850:	891a      	ldrh	r2, [r3, #8]
 8007852:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007856:	f006 fd42 	bl	800e2de <USB_ReadPMA>
 800785a:	e021      	b.n	80078a0 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007864:	b29b      	uxth	r3, r3
 8007866:	461a      	mov	r2, r3
 8007868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	4413      	add	r3, r2
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6812      	ldr	r2, [r2, #0]
 8007874:	4413      	add	r3, r2
 8007876:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007880:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007884:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007888:	2b00      	cmp	r3, #0
 800788a:	d009      	beq.n	80078a0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6818      	ldr	r0, [r3, #0]
 8007890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007892:	6959      	ldr	r1, [r3, #20]
 8007894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007896:	895a      	ldrh	r2, [r3, #10]
 8007898:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800789c:	f006 fd1f 	bl	800e2de <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80078a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078a2:	69da      	ldr	r2, [r3, #28]
 80078a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80078a8:	441a      	add	r2, r3
 80078aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80078ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078b0:	695a      	ldr	r2, [r3, #20]
 80078b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80078b6:	441a      	add	r2, r3
 80078b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078ba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80078bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <PCD_EP_ISR_Handler+0x4fc>
 80078c4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80078c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d206      	bcs.n	80078de <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80078d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f008 fbfa 	bl	80100d0 <HAL_PCD_DataOutStageCallback>
 80078dc:	e005      	b.n	80078ea <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078e4:	4618      	mov	r0, r3
 80078e6:	f004 ffcc 	bl	800c882 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80078ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80078ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 8121 	beq.w	8007b3a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80078f8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80078fc:	4613      	mov	r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	00db      	lsls	r3, r3, #3
 8007904:	3310      	adds	r3, #16
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	4413      	add	r3, r2
 800790a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007926:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	441a      	add	r2, r3
 8007938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800793c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007944:	b29b      	uxth	r3, r3
 8007946:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800794a:	78db      	ldrb	r3, [r3, #3]
 800794c:	2b01      	cmp	r3, #1
 800794e:	f040 80a2 	bne.w	8007a96 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8007952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007954:	2200      	movs	r2, #0
 8007956:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800795a:	7b1b      	ldrb	r3, [r3, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 8093 	beq.w	8007a88 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007962:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800796a:	2b00      	cmp	r3, #0
 800796c:	d046      	beq.n	80079fc <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800796e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007970:	785b      	ldrb	r3, [r3, #1]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d126      	bne.n	80079c4 <PCD_EP_ISR_Handler+0x5f0>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	627b      	str	r3, [r7, #36]	@ 0x24
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007984:	b29b      	uxth	r3, r3
 8007986:	461a      	mov	r2, r3
 8007988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798a:	4413      	add	r3, r2
 800798c:	627b      	str	r3, [r7, #36]	@ 0x24
 800798e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	00da      	lsls	r2, r3, #3
 8007994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007996:	4413      	add	r3, r2
 8007998:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800799c:	623b      	str	r3, [r7, #32]
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	801a      	strh	r2, [r3, #0]
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079bc:	b29a      	uxth	r2, r3
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	801a      	strh	r2, [r3, #0]
 80079c2:	e061      	b.n	8007a88 <PCD_EP_ISR_Handler+0x6b4>
 80079c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079c6:	785b      	ldrb	r3, [r3, #1]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d15d      	bne.n	8007a88 <PCD_EP_ISR_Handler+0x6b4>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079da:	b29b      	uxth	r3, r3
 80079dc:	461a      	mov	r2, r3
 80079de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e0:	4413      	add	r3, r2
 80079e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	00da      	lsls	r2, r3, #3
 80079ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ec:	4413      	add	r3, r2
 80079ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f6:	2200      	movs	r2, #0
 80079f8:	801a      	strh	r2, [r3, #0]
 80079fa:	e045      	b.n	8007a88 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a04:	785b      	ldrb	r3, [r3, #1]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d126      	bne.n	8007a58 <PCD_EP_ISR_Handler+0x684>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a1e:	4413      	add	r3, r2
 8007a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	00da      	lsls	r2, r3, #3
 8007a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a30:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a40:	801a      	strh	r2, [r3, #0]
 8007a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	e017      	b.n	8007a88 <PCD_EP_ISR_Handler+0x6b4>
 8007a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a5a:	785b      	ldrb	r3, [r3, #1]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d113      	bne.n	8007a88 <PCD_EP_ISR_Handler+0x6b4>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a6e:	4413      	add	r3, r2
 8007a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	00da      	lsls	r2, r3, #3
 8007a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a84:	2200      	movs	r2, #0
 8007a86:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f008 fb39 	bl	8010106 <HAL_PCD_DataInStageCallback>
 8007a94:	e051      	b.n	8007b3a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007a96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d144      	bne.n	8007b2c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	461a      	mov	r2, r3
 8007aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	4413      	add	r3, r2
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	4413      	add	r3, r2
 8007abc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ac6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8007aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007acc:	699a      	ldr	r2, [r3, #24]
 8007ace:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d907      	bls.n	8007ae6 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8007ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ad8:	699a      	ldr	r2, [r3, #24]
 8007ada:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007ade:	1ad2      	subs	r2, r2, r3
 8007ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ae2:	619a      	str	r2, [r3, #24]
 8007ae4:	e002      	b.n	8007aec <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8007ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ae8:	2200      	movs	r2, #0
 8007aea:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d106      	bne.n	8007b02 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f008 fb03 	bl	8010106 <HAL_PCD_DataInStageCallback>
 8007b00:	e01b      	b.n	8007b3a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b04:	695a      	ldr	r2, [r3, #20]
 8007b06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007b0a:	441a      	add	r2, r3
 8007b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b0e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b12:	69da      	ldr	r2, [r3, #28]
 8007b14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007b18:	441a      	add	r2, r3
 8007b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b1c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b24:	4618      	mov	r0, r3
 8007b26:	f004 feac 	bl	800c882 <USB_EPStartXfer>
 8007b2a:	e006      	b.n	8007b3a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007b2c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007b30:	461a      	mov	r2, r3
 8007b32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f917 	bl	8007d68 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	b21b      	sxth	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f6ff ac49 	blt.w	80073de <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3758      	adds	r7, #88	@ 0x58
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b088      	sub	sp, #32
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	4613      	mov	r3, r2
 8007b62:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007b64:	88fb      	ldrh	r3, [r7, #6]
 8007b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d07c      	beq.n	8007c68 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	461a      	mov	r2, r3
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	4413      	add	r3, r2
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	4413      	add	r3, r2
 8007b88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b92:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	699a      	ldr	r2, [r3, #24]
 8007b98:	8b7b      	ldrh	r3, [r7, #26]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d306      	bcc.n	8007bac <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	699a      	ldr	r2, [r3, #24]
 8007ba2:	8b7b      	ldrh	r3, [r7, #26]
 8007ba4:	1ad2      	subs	r2, r2, r3
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	619a      	str	r2, [r3, #24]
 8007baa:	e002      	b.n	8007bb2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d123      	bne.n	8007c02 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd4:	833b      	strh	r3, [r7, #24]
 8007bd6:	8b3b      	ldrh	r3, [r7, #24]
 8007bd8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007bdc:	833b      	strh	r3, [r7, #24]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	441a      	add	r2, r3
 8007bec:	8b3b      	ldrh	r3, [r7, #24]
 8007bee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007c02:	88fb      	ldrh	r3, [r7, #6]
 8007c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d01f      	beq.n	8007c4c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	461a      	mov	r2, r3
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c26:	82fb      	strh	r3, [r7, #22]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	441a      	add	r2, r3
 8007c36:	8afb      	ldrh	r3, [r7, #22]
 8007c38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007c4c:	8b7b      	ldrh	r3, [r7, #26]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 8085 	beq.w	8007d5e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6818      	ldr	r0, [r3, #0]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	6959      	ldr	r1, [r3, #20]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	891a      	ldrh	r2, [r3, #8]
 8007c60:	8b7b      	ldrh	r3, [r7, #26]
 8007c62:	f006 fb3c 	bl	800e2de <USB_ReadPMA>
 8007c66:	e07a      	b.n	8007d5e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	461a      	mov	r2, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	4413      	add	r3, r2
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	6812      	ldr	r2, [r2, #0]
 8007c80:	4413      	add	r3, r2
 8007c82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c8c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	699a      	ldr	r2, [r3, #24]
 8007c92:	8b7b      	ldrh	r3, [r7, #26]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d306      	bcc.n	8007ca6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	699a      	ldr	r2, [r3, #24]
 8007c9c:	8b7b      	ldrh	r3, [r7, #26]
 8007c9e:	1ad2      	subs	r2, r2, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	619a      	str	r2, [r3, #24]
 8007ca4:	e002      	b.n	8007cac <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d123      	bne.n	8007cfc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cce:	83fb      	strh	r3, [r7, #30]
 8007cd0:	8bfb      	ldrh	r3, [r7, #30]
 8007cd2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007cd6:	83fb      	strh	r3, [r7, #30]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	441a      	add	r2, r3
 8007ce6:	8bfb      	ldrh	r3, [r7, #30]
 8007ce8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007cfc:	88fb      	ldrh	r3, [r7, #6]
 8007cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d11f      	bne.n	8007d46 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4413      	add	r3, r2
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d20:	83bb      	strh	r3, [r7, #28]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	441a      	add	r2, r3
 8007d30:	8bbb      	ldrh	r3, [r7, #28]
 8007d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007d46:	8b7b      	ldrh	r3, [r7, #26]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d008      	beq.n	8007d5e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6818      	ldr	r0, [r3, #0]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	6959      	ldr	r1, [r3, #20]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	895a      	ldrh	r2, [r3, #10]
 8007d58:	8b7b      	ldrh	r3, [r7, #26]
 8007d5a:	f006 fac0 	bl	800e2de <USB_ReadPMA>
    }
  }

  return count;
 8007d5e:	8b7b      	ldrh	r3, [r7, #26]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3720      	adds	r7, #32
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b0a4      	sub	sp, #144	@ 0x90
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	4613      	mov	r3, r2
 8007d74:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007d76:	88fb      	ldrh	r3, [r7, #6]
 8007d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 81db 	beq.w	8008138 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	4413      	add	r3, r2
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	6812      	ldr	r2, [r2, #0]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007da6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	699a      	ldr	r2, [r3, #24]
 8007dae:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d907      	bls.n	8007dc6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	699a      	ldr	r2, [r3, #24]
 8007dba:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007dbe:	1ad2      	subs	r2, r2, r3
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	619a      	str	r2, [r3, #24]
 8007dc4:	e002      	b.n	8007dcc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f040 80b9 	bne.w	8007f48 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	785b      	ldrb	r3, [r3, #1]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d126      	bne.n	8007e2c <HAL_PCD_EP_DB_Transmit+0xc4>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	461a      	mov	r2, r3
 8007df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df2:	4413      	add	r3, r2
 8007df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	00da      	lsls	r2, r3, #3
 8007dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfe:	4413      	add	r3, r2
 8007e00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e14:	801a      	strh	r2, [r3, #0]
 8007e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e28:	801a      	strh	r2, [r3, #0]
 8007e2a:	e01a      	b.n	8007e62 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	785b      	ldrb	r3, [r3, #1]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d116      	bne.n	8007e62 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	461a      	mov	r2, r3
 8007e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e48:	4413      	add	r3, r2
 8007e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	00da      	lsls	r2, r3, #3
 8007e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e54:	4413      	add	r3, r2
 8007e56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5e:	2200      	movs	r2, #0
 8007e60:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	785b      	ldrb	r3, [r3, #1]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d126      	bne.n	8007ebe <HAL_PCD_EP_DB_Transmit+0x156>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	61fb      	str	r3, [r7, #28]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	4413      	add	r3, r2
 8007e86:	61fb      	str	r3, [r7, #28]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	00da      	lsls	r2, r3, #3
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	4413      	add	r3, r2
 8007e92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e96:	61bb      	str	r3, [r7, #24]
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	801a      	strh	r2, [r3, #0]
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	801a      	strh	r2, [r3, #0]
 8007ebc:	e017      	b.n	8007eee <HAL_PCD_EP_DB_Transmit+0x186>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	785b      	ldrb	r3, [r3, #1]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d113      	bne.n	8007eee <HAL_PCD_EP_DB_Transmit+0x186>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed4:	4413      	add	r3, r2
 8007ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	00da      	lsls	r2, r3, #3
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ee6:	623b      	str	r3, [r7, #32]
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	2200      	movs	r2, #0
 8007eec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f008 f906 	bl	8010106 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 82fa 	beq.w	80084fa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f20:	82fb      	strh	r3, [r7, #22]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	461a      	mov	r2, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	441a      	add	r2, r3
 8007f30:	8afb      	ldrh	r3, [r7, #22]
 8007f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	8013      	strh	r3, [r2, #0]
 8007f46:	e2d8      	b.n	80084fa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007f48:	88fb      	ldrh	r3, [r7, #6]
 8007f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d021      	beq.n	8007f96 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f6c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	461a      	mov	r2, r3
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	441a      	add	r2, r3
 8007f7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	f040 82ac 	bne.w	80084fa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	695a      	ldr	r2, [r3, #20]
 8007fa6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007faa:	441a      	add	r2, r3
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	69da      	ldr	r2, [r3, #28]
 8007fb4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007fb8:	441a      	add	r2, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	6a1a      	ldr	r2, [r3, #32]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d30b      	bcc.n	8007fe2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	6a1a      	ldr	r2, [r3, #32]
 8007fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fda:	1ad2      	subs	r2, r2, r3
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	621a      	str	r2, [r3, #32]
 8007fe0:	e017      	b.n	8008012 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d108      	bne.n	8007ffc <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8007fea:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007fee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007ffa:	e00a      	b.n	8008012 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2200      	movs	r2, #0
 8008010:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	785b      	ldrb	r3, [r3, #1]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d165      	bne.n	80080e6 <HAL_PCD_EP_DB_Transmit+0x37e>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008028:	b29b      	uxth	r3, r3
 800802a:	461a      	mov	r2, r3
 800802c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800802e:	4413      	add	r3, r2
 8008030:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	00da      	lsls	r2, r3, #3
 8008038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800803a:	4413      	add	r3, r2
 800803c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008040:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	b29b      	uxth	r3, r3
 8008048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800804c:	b29a      	uxth	r2, r3
 800804e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008050:	801a      	strh	r2, [r3, #0]
 8008052:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10a      	bne.n	8008070 <HAL_PCD_EP_DB_Transmit+0x308>
 800805a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008068:	b29a      	uxth	r2, r3
 800806a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806c:	801a      	strh	r2, [r3, #0]
 800806e:	e057      	b.n	8008120 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008074:	2b3e      	cmp	r3, #62	@ 0x3e
 8008076:	d818      	bhi.n	80080aa <HAL_PCD_EP_DB_Transmit+0x342>
 8008078:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800807c:	085b      	lsrs	r3, r3, #1
 800807e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008080:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <HAL_PCD_EP_DB_Transmit+0x32a>
 800808c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800808e:	3301      	adds	r3, #1
 8008090:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	b29a      	uxth	r2, r3
 8008098:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800809a:	b29b      	uxth	r3, r3
 800809c:	029b      	lsls	r3, r3, #10
 800809e:	b29b      	uxth	r3, r3
 80080a0:	4313      	orrs	r3, r2
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a6:	801a      	strh	r2, [r3, #0]
 80080a8:	e03a      	b.n	8008120 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80080aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080ae:	095b      	lsrs	r3, r3, #5
 80080b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080b6:	f003 031f 	and.w	r3, r3, #31
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <HAL_PCD_EP_DB_Transmit+0x35c>
 80080be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080c0:	3b01      	subs	r3, #1
 80080c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	029b      	lsls	r3, r3, #10
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	4313      	orrs	r3, r2
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080de:	b29a      	uxth	r2, r3
 80080e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e2:	801a      	strh	r2, [r3, #0]
 80080e4:	e01c      	b.n	8008120 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	785b      	ldrb	r3, [r3, #1]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d118      	bne.n	8008120 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	461a      	mov	r2, r3
 8008100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008102:	4413      	add	r3, r2
 8008104:	647b      	str	r3, [r7, #68]	@ 0x44
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	00da      	lsls	r2, r3, #3
 800810c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800810e:	4413      	add	r3, r2
 8008110:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008114:	643b      	str	r3, [r7, #64]	@ 0x40
 8008116:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800811a:	b29a      	uxth	r2, r3
 800811c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800811e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6818      	ldr	r0, [r3, #0]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	6959      	ldr	r1, [r3, #20]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	891a      	ldrh	r2, [r3, #8]
 800812c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008130:	b29b      	uxth	r3, r3
 8008132:	f006 f892 	bl	800e25a <USB_WritePMA>
 8008136:	e1e0      	b.n	80084fa <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008140:	b29b      	uxth	r3, r3
 8008142:	461a      	mov	r2, r3
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	00db      	lsls	r3, r3, #3
 800814a:	4413      	add	r3, r2
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	6812      	ldr	r2, [r2, #0]
 8008150:	4413      	add	r3, r2
 8008152:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800815c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	699a      	ldr	r2, [r3, #24]
 8008164:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008168:	429a      	cmp	r2, r3
 800816a:	d307      	bcc.n	800817c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	699a      	ldr	r2, [r3, #24]
 8008170:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008174:	1ad2      	subs	r2, r2, r3
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	619a      	str	r2, [r3, #24]
 800817a:	e002      	b.n	8008182 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2200      	movs	r2, #0
 8008180:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	2b00      	cmp	r3, #0
 8008188:	f040 80c0 	bne.w	800830c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	785b      	ldrb	r3, [r3, #1]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d126      	bne.n	80081e2 <HAL_PCD_EP_DB_Transmit+0x47a>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	461a      	mov	r2, r3
 80081a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081a8:	4413      	add	r3, r2
 80081aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	00da      	lsls	r2, r3, #3
 80081b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081b4:	4413      	add	r3, r2
 80081b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081ca:	801a      	strh	r2, [r3, #0]
 80081cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081da:	b29a      	uxth	r2, r3
 80081dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081de:	801a      	strh	r2, [r3, #0]
 80081e0:	e01a      	b.n	8008218 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	785b      	ldrb	r3, [r3, #1]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d116      	bne.n	8008218 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	461a      	mov	r2, r3
 80081fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081fe:	4413      	add	r3, r2
 8008200:	667b      	str	r3, [r7, #100]	@ 0x64
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	00da      	lsls	r2, r3, #3
 8008208:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800820a:	4413      	add	r3, r2
 800820c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008210:	663b      	str	r3, [r7, #96]	@ 0x60
 8008212:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008214:	2200      	movs	r2, #0
 8008216:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	677b      	str	r3, [r7, #116]	@ 0x74
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	785b      	ldrb	r3, [r3, #1]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d12b      	bne.n	800827e <HAL_PCD_EP_DB_Transmit+0x516>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008234:	b29b      	uxth	r3, r3
 8008236:	461a      	mov	r2, r3
 8008238:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800823a:	4413      	add	r3, r2
 800823c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	00da      	lsls	r2, r3, #3
 8008244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008246:	4413      	add	r3, r2
 8008248:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800824c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008250:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	b29b      	uxth	r3, r3
 8008258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800825c:	b29a      	uxth	r2, r3
 800825e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008262:	801a      	strh	r2, [r3, #0]
 8008264:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	b29b      	uxth	r3, r3
 800826c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008274:	b29a      	uxth	r2, r3
 8008276:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800827a:	801a      	strh	r2, [r3, #0]
 800827c:	e017      	b.n	80082ae <HAL_PCD_EP_DB_Transmit+0x546>
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	785b      	ldrb	r3, [r3, #1]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d113      	bne.n	80082ae <HAL_PCD_EP_DB_Transmit+0x546>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800828e:	b29b      	uxth	r3, r3
 8008290:	461a      	mov	r2, r3
 8008292:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008294:	4413      	add	r3, r2
 8008296:	677b      	str	r3, [r7, #116]	@ 0x74
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	00da      	lsls	r2, r3, #3
 800829e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082a0:	4413      	add	r3, r2
 80082a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80082a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80082a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082aa:	2200      	movs	r2, #0
 80082ac:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	4619      	mov	r1, r3
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f007 ff26 	bl	8010106 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80082ba:	88fb      	ldrh	r3, [r7, #6]
 80082bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f040 811a 	bne.w	80084fa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082e0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	461a      	mov	r2, r3
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	441a      	add	r2, r3
 80082f2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80082f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008306:	b29b      	uxth	r3, r3
 8008308:	8013      	strh	r3, [r2, #0]
 800830a:	e0f6      	b.n	80084fa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800830c:	88fb      	ldrh	r3, [r7, #6]
 800830e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d121      	bne.n	800835a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	b29b      	uxth	r3, r3
 8008328:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800832c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008330:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	461a      	mov	r2, r3
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	441a      	add	r2, r3
 8008342:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800834a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800834e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008356:	b29b      	uxth	r3, r3
 8008358:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008360:	2b01      	cmp	r3, #1
 8008362:	f040 80ca 	bne.w	80084fa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	695a      	ldr	r2, [r3, #20]
 800836a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800836e:	441a      	add	r2, r3
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	69da      	ldr	r2, [r3, #28]
 8008378:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800837c:	441a      	add	r2, r3
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	6a1a      	ldr	r2, [r3, #32]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	429a      	cmp	r2, r3
 800838c:	d30b      	bcc.n	80083a6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	6a1a      	ldr	r2, [r3, #32]
 800839a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800839e:	1ad2      	subs	r2, r2, r3
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	621a      	str	r2, [r3, #32]
 80083a4:	e017      	b.n	80083d6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d108      	bne.n	80083c0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80083ae:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80083b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80083be:	e00a      	b.n	80083d6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2200      	movs	r2, #0
 80083cc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	657b      	str	r3, [r7, #84]	@ 0x54
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	785b      	ldrb	r3, [r3, #1]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d165      	bne.n	80084b0 <HAL_PCD_EP_DB_Transmit+0x748>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	461a      	mov	r2, r3
 80083f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083f8:	4413      	add	r3, r2
 80083fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	00da      	lsls	r2, r3, #3
 8008402:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008404:	4413      	add	r3, r2
 8008406:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800840a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800840c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	b29b      	uxth	r3, r3
 8008412:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008416:	b29a      	uxth	r2, r3
 8008418:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800841a:	801a      	strh	r2, [r3, #0]
 800841c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <HAL_PCD_EP_DB_Transmit+0x6d2>
 8008424:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	b29b      	uxth	r3, r3
 800842a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800842e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008432:	b29a      	uxth	r2, r3
 8008434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008436:	801a      	strh	r2, [r3, #0]
 8008438:	e054      	b.n	80084e4 <HAL_PCD_EP_DB_Transmit+0x77c>
 800843a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800843e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008440:	d818      	bhi.n	8008474 <HAL_PCD_EP_DB_Transmit+0x70c>
 8008442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008446:	085b      	lsrs	r3, r3, #1
 8008448:	66bb      	str	r3, [r7, #104]	@ 0x68
 800844a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800844e:	f003 0301 	and.w	r3, r3, #1
 8008452:	2b00      	cmp	r3, #0
 8008454:	d002      	beq.n	800845c <HAL_PCD_EP_DB_Transmit+0x6f4>
 8008456:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008458:	3301      	adds	r3, #1
 800845a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800845c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29a      	uxth	r2, r3
 8008462:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008464:	b29b      	uxth	r3, r3
 8008466:	029b      	lsls	r3, r3, #10
 8008468:	b29b      	uxth	r3, r3
 800846a:	4313      	orrs	r3, r2
 800846c:	b29a      	uxth	r2, r3
 800846e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008470:	801a      	strh	r2, [r3, #0]
 8008472:	e037      	b.n	80084e4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008474:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008478:	095b      	lsrs	r3, r3, #5
 800847a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800847c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008480:	f003 031f 	and.w	r3, r3, #31
 8008484:	2b00      	cmp	r3, #0
 8008486:	d102      	bne.n	800848e <HAL_PCD_EP_DB_Transmit+0x726>
 8008488:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800848a:	3b01      	subs	r3, #1
 800848c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800848e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	b29a      	uxth	r2, r3
 8008494:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008496:	b29b      	uxth	r3, r3
 8008498:	029b      	lsls	r3, r3, #10
 800849a:	b29b      	uxth	r3, r3
 800849c:	4313      	orrs	r3, r2
 800849e:	b29b      	uxth	r3, r3
 80084a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084ac:	801a      	strh	r2, [r3, #0]
 80084ae:	e019      	b.n	80084e4 <HAL_PCD_EP_DB_Transmit+0x77c>
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	785b      	ldrb	r3, [r3, #1]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d115      	bne.n	80084e4 <HAL_PCD_EP_DB_Transmit+0x77c>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	461a      	mov	r2, r3
 80084c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084c6:	4413      	add	r3, r2
 80084c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	00da      	lsls	r2, r3, #3
 80084d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084d2:	4413      	add	r3, r2
 80084d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80084da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084de:	b29a      	uxth	r2, r3
 80084e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084e2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6818      	ldr	r0, [r3, #0]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	6959      	ldr	r1, [r3, #20]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	895a      	ldrh	r2, [r3, #10]
 80084f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	f005 feb0 	bl	800e25a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	461a      	mov	r2, r3
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	b29b      	uxth	r3, r3
 800850c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008514:	82bb      	strh	r3, [r7, #20]
 8008516:	8abb      	ldrh	r3, [r7, #20]
 8008518:	f083 0310 	eor.w	r3, r3, #16
 800851c:	82bb      	strh	r3, [r7, #20]
 800851e:	8abb      	ldrh	r3, [r7, #20]
 8008520:	f083 0320 	eor.w	r3, r3, #32
 8008524:	82bb      	strh	r3, [r7, #20]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	441a      	add	r2, r3
 8008534:	8abb      	ldrh	r3, [r7, #20]
 8008536:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800853a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800853e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008546:	b29b      	uxth	r3, r3
 8008548:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3790      	adds	r7, #144	@ 0x90
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	607b      	str	r3, [r7, #4]
 800855e:	460b      	mov	r3, r1
 8008560:	817b      	strh	r3, [r7, #10]
 8008562:	4613      	mov	r3, r2
 8008564:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008566:	897b      	ldrh	r3, [r7, #10]
 8008568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800856c:	b29b      	uxth	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00b      	beq.n	800858a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008572:	897b      	ldrh	r3, [r7, #10]
 8008574:	f003 0207 	and.w	r2, r3, #7
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	3310      	adds	r3, #16
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	4413      	add	r3, r2
 8008586:	617b      	str	r3, [r7, #20]
 8008588:	e009      	b.n	800859e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800858a:	897a      	ldrh	r2, [r7, #10]
 800858c:	4613      	mov	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	00db      	lsls	r3, r3, #3
 8008594:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	4413      	add	r3, r2
 800859c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800859e:	893b      	ldrh	r3, [r7, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d107      	bne.n	80085b4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	2200      	movs	r2, #0
 80085a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	80da      	strh	r2, [r3, #6]
 80085b2:	e00b      	b.n	80085cc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2201      	movs	r2, #1
 80085b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	b29a      	uxth	r2, r3
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	0c1b      	lsrs	r3, r3, #16
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	371c      	adds	r7, #28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80085da:	b480      	push	{r7}
 80085dc:	b085      	sub	sp, #20
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80085fe:	b29b      	uxth	r3, r3
 8008600:	f043 0301 	orr.w	r3, r3, #1
 8008604:	b29a      	uxth	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008612:	b29b      	uxth	r3, r3
 8008614:	f043 0302 	orr.w	r3, r3, #2
 8008618:	b29a      	uxth	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
	...

08008630 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d141      	bne.n	80086c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800863e:	4b4b      	ldr	r3, [pc, #300]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800864a:	d131      	bne.n	80086b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800864c:	4b47      	ldr	r3, [pc, #284]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800864e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008652:	4a46      	ldr	r2, [pc, #280]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008658:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800865c:	4b43      	ldr	r3, [pc, #268]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008664:	4a41      	ldr	r2, [pc, #260]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008666:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800866a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800866c:	4b40      	ldr	r3, [pc, #256]	@ (8008770 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2232      	movs	r2, #50	@ 0x32
 8008672:	fb02 f303 	mul.w	r3, r2, r3
 8008676:	4a3f      	ldr	r2, [pc, #252]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008678:	fba2 2303 	umull	r2, r3, r2, r3
 800867c:	0c9b      	lsrs	r3, r3, #18
 800867e:	3301      	adds	r3, #1
 8008680:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008682:	e002      	b.n	800868a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	3b01      	subs	r3, #1
 8008688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800868a:	4b38      	ldr	r3, [pc, #224]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008696:	d102      	bne.n	800869e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1f2      	bne.n	8008684 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800869e:	4b33      	ldr	r3, [pc, #204]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086aa:	d158      	bne.n	800875e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e057      	b.n	8008760 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086b0:	4b2e      	ldr	r3, [pc, #184]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086b6:	4a2d      	ldr	r2, [pc, #180]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80086c0:	e04d      	b.n	800875e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086c8:	d141      	bne.n	800874e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80086ca:	4b28      	ldr	r3, [pc, #160]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80086d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086d6:	d131      	bne.n	800873c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086d8:	4b24      	ldr	r3, [pc, #144]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086de:	4a23      	ldr	r2, [pc, #140]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80086e8:	4b20      	ldr	r3, [pc, #128]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80086f0:	4a1e      	ldr	r2, [pc, #120]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80086f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80086f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008770 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2232      	movs	r2, #50	@ 0x32
 80086fe:	fb02 f303 	mul.w	r3, r2, r3
 8008702:	4a1c      	ldr	r2, [pc, #112]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008704:	fba2 2303 	umull	r2, r3, r2, r3
 8008708:	0c9b      	lsrs	r3, r3, #18
 800870a:	3301      	adds	r3, #1
 800870c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800870e:	e002      	b.n	8008716 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3b01      	subs	r3, #1
 8008714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008716:	4b15      	ldr	r3, [pc, #84]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800871e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008722:	d102      	bne.n	800872a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1f2      	bne.n	8008710 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800872a:	4b10      	ldr	r3, [pc, #64]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008736:	d112      	bne.n	800875e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e011      	b.n	8008760 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800873c:	4b0b      	ldr	r3, [pc, #44]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800873e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008742:	4a0a      	ldr	r2, [pc, #40]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008748:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800874c:	e007      	b.n	800875e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800874e:	4b07      	ldr	r3, [pc, #28]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008756:	4a05      	ldr	r2, [pc, #20]	@ (800876c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008758:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800875c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	40007000 	.word	0x40007000
 8008770:	20000024 	.word	0x20000024
 8008774:	431bde83 	.word	0x431bde83

08008778 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008778:	b480      	push	{r7}
 800877a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800877c:	4b05      	ldr	r3, [pc, #20]	@ (8008794 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	4a04      	ldr	r2, [pc, #16]	@ (8008794 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008786:	6093      	str	r3, [r2, #8]
}
 8008788:	bf00      	nop
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	40007000 	.word	0x40007000

08008798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b088      	sub	sp, #32
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e2fe      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d075      	beq.n	80088a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087b6:	4b97      	ldr	r3, [pc, #604]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f003 030c 	and.w	r3, r3, #12
 80087be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087c0:	4b94      	ldr	r3, [pc, #592]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	f003 0303 	and.w	r3, r3, #3
 80087c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	2b0c      	cmp	r3, #12
 80087ce:	d102      	bne.n	80087d6 <HAL_RCC_OscConfig+0x3e>
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d002      	beq.n	80087dc <HAL_RCC_OscConfig+0x44>
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	2b08      	cmp	r3, #8
 80087da:	d10b      	bne.n	80087f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087dc:	4b8d      	ldr	r3, [pc, #564]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d05b      	beq.n	80088a0 <HAL_RCC_OscConfig+0x108>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d157      	bne.n	80088a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e2d9      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087fc:	d106      	bne.n	800880c <HAL_RCC_OscConfig+0x74>
 80087fe:	4b85      	ldr	r3, [pc, #532]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a84      	ldr	r2, [pc, #528]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 8008804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008808:	6013      	str	r3, [r2, #0]
 800880a:	e01d      	b.n	8008848 <HAL_RCC_OscConfig+0xb0>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008814:	d10c      	bne.n	8008830 <HAL_RCC_OscConfig+0x98>
 8008816:	4b7f      	ldr	r3, [pc, #508]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a7e      	ldr	r2, [pc, #504]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 800881c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008820:	6013      	str	r3, [r2, #0]
 8008822:	4b7c      	ldr	r3, [pc, #496]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a7b      	ldr	r2, [pc, #492]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 8008828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800882c:	6013      	str	r3, [r2, #0]
 800882e:	e00b      	b.n	8008848 <HAL_RCC_OscConfig+0xb0>
 8008830:	4b78      	ldr	r3, [pc, #480]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a77      	ldr	r2, [pc, #476]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 8008836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	4b75      	ldr	r3, [pc, #468]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a74      	ldr	r2, [pc, #464]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 8008842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d013      	beq.n	8008878 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008850:	f7fb fcbe 	bl	80041d0 <HAL_GetTick>
 8008854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008856:	e008      	b.n	800886a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008858:	f7fb fcba 	bl	80041d0 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	2b64      	cmp	r3, #100	@ 0x64
 8008864:	d901      	bls.n	800886a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e29e      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800886a:	4b6a      	ldr	r3, [pc, #424]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d0f0      	beq.n	8008858 <HAL_RCC_OscConfig+0xc0>
 8008876:	e014      	b.n	80088a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008878:	f7fb fcaa 	bl	80041d0 <HAL_GetTick>
 800887c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800887e:	e008      	b.n	8008892 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008880:	f7fb fca6 	bl	80041d0 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	2b64      	cmp	r3, #100	@ 0x64
 800888c:	d901      	bls.n	8008892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e28a      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008892:	4b60      	ldr	r3, [pc, #384]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1f0      	bne.n	8008880 <HAL_RCC_OscConfig+0xe8>
 800889e:	e000      	b.n	80088a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0302 	and.w	r3, r3, #2
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d075      	beq.n	800899a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088ae:	4b59      	ldr	r3, [pc, #356]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f003 030c 	and.w	r3, r3, #12
 80088b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088b8:	4b56      	ldr	r3, [pc, #344]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f003 0303 	and.w	r3, r3, #3
 80088c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	2b0c      	cmp	r3, #12
 80088c6:	d102      	bne.n	80088ce <HAL_RCC_OscConfig+0x136>
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d002      	beq.n	80088d4 <HAL_RCC_OscConfig+0x13c>
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	2b04      	cmp	r3, #4
 80088d2:	d11f      	bne.n	8008914 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088d4:	4b4f      	ldr	r3, [pc, #316]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d005      	beq.n	80088ec <HAL_RCC_OscConfig+0x154>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e25d      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ec:	4b49      	ldr	r3, [pc, #292]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	061b      	lsls	r3, r3, #24
 80088fa:	4946      	ldr	r1, [pc, #280]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008900:	4b45      	ldr	r3, [pc, #276]	@ (8008a18 <HAL_RCC_OscConfig+0x280>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4618      	mov	r0, r3
 8008906:	f7fb fc17 	bl	8004138 <HAL_InitTick>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d043      	beq.n	8008998 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e249      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d023      	beq.n	8008964 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800891c:	4b3d      	ldr	r3, [pc, #244]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a3c      	ldr	r2, [pc, #240]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 8008922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008928:	f7fb fc52 	bl	80041d0 <HAL_GetTick>
 800892c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800892e:	e008      	b.n	8008942 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008930:	f7fb fc4e 	bl	80041d0 <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b02      	cmp	r3, #2
 800893c:	d901      	bls.n	8008942 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e232      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008942:	4b34      	ldr	r3, [pc, #208]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0f0      	beq.n	8008930 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800894e:	4b31      	ldr	r3, [pc, #196]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	061b      	lsls	r3, r3, #24
 800895c:	492d      	ldr	r1, [pc, #180]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 800895e:	4313      	orrs	r3, r2
 8008960:	604b      	str	r3, [r1, #4]
 8008962:	e01a      	b.n	800899a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008964:	4b2b      	ldr	r3, [pc, #172]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a2a      	ldr	r2, [pc, #168]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 800896a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800896e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008970:	f7fb fc2e 	bl	80041d0 <HAL_GetTick>
 8008974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008976:	e008      	b.n	800898a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008978:	f7fb fc2a 	bl	80041d0 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	2b02      	cmp	r3, #2
 8008984:	d901      	bls.n	800898a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e20e      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800898a:	4b22      	ldr	r3, [pc, #136]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1f0      	bne.n	8008978 <HAL_RCC_OscConfig+0x1e0>
 8008996:	e000      	b.n	800899a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008998:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0308 	and.w	r3, r3, #8
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d041      	beq.n	8008a2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d01c      	beq.n	80089e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089ae:	4b19      	ldr	r3, [pc, #100]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 80089b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089b4:	4a17      	ldr	r2, [pc, #92]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 80089b6:	f043 0301 	orr.w	r3, r3, #1
 80089ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089be:	f7fb fc07 	bl	80041d0 <HAL_GetTick>
 80089c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80089c4:	e008      	b.n	80089d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089c6:	f7fb fc03 	bl	80041d0 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d901      	bls.n	80089d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e1e7      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80089d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 80089da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d0ef      	beq.n	80089c6 <HAL_RCC_OscConfig+0x22e>
 80089e6:	e020      	b.n	8008a2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 80089ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089ee:	4a09      	ldr	r2, [pc, #36]	@ (8008a14 <HAL_RCC_OscConfig+0x27c>)
 80089f0:	f023 0301 	bic.w	r3, r3, #1
 80089f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089f8:	f7fb fbea 	bl	80041d0 <HAL_GetTick>
 80089fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80089fe:	e00d      	b.n	8008a1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a00:	f7fb fbe6 	bl	80041d0 <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d906      	bls.n	8008a1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e1ca      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
 8008a12:	bf00      	nop
 8008a14:	40021000 	.word	0x40021000
 8008a18:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a1c:	4b8c      	ldr	r3, [pc, #560]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a22:	f003 0302 	and.w	r3, r3, #2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1ea      	bne.n	8008a00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0304 	and.w	r3, r3, #4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 80a6 	beq.w	8008b84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008a3c:	4b84      	ldr	r3, [pc, #528]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <HAL_RCC_OscConfig+0x2b4>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e000      	b.n	8008a4e <HAL_RCC_OscConfig+0x2b6>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00d      	beq.n	8008a6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a52:	4b7f      	ldr	r3, [pc, #508]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a56:	4a7e      	ldr	r2, [pc, #504]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a6e:	4b79      	ldr	r3, [pc, #484]	@ (8008c54 <HAL_RCC_OscConfig+0x4bc>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d118      	bne.n	8008aac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a7a:	4b76      	ldr	r3, [pc, #472]	@ (8008c54 <HAL_RCC_OscConfig+0x4bc>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a75      	ldr	r2, [pc, #468]	@ (8008c54 <HAL_RCC_OscConfig+0x4bc>)
 8008a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a86:	f7fb fba3 	bl	80041d0 <HAL_GetTick>
 8008a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a8c:	e008      	b.n	8008aa0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a8e:	f7fb fb9f 	bl	80041d0 <HAL_GetTick>
 8008a92:	4602      	mov	r2, r0
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d901      	bls.n	8008aa0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e183      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008aa0:	4b6c      	ldr	r3, [pc, #432]	@ (8008c54 <HAL_RCC_OscConfig+0x4bc>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d0f0      	beq.n	8008a8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d108      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x32e>
 8008ab4:	4b66      	ldr	r3, [pc, #408]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aba:	4a65      	ldr	r2, [pc, #404]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008abc:	f043 0301 	orr.w	r3, r3, #1
 8008ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ac4:	e024      	b.n	8008b10 <HAL_RCC_OscConfig+0x378>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	2b05      	cmp	r3, #5
 8008acc:	d110      	bne.n	8008af0 <HAL_RCC_OscConfig+0x358>
 8008ace:	4b60      	ldr	r3, [pc, #384]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008ad6:	f043 0304 	orr.w	r3, r3, #4
 8008ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ade:	4b5c      	ldr	r3, [pc, #368]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ae4:	4a5a      	ldr	r2, [pc, #360]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008ae6:	f043 0301 	orr.w	r3, r3, #1
 8008aea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008aee:	e00f      	b.n	8008b10 <HAL_RCC_OscConfig+0x378>
 8008af0:	4b57      	ldr	r3, [pc, #348]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008af6:	4a56      	ldr	r2, [pc, #344]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008af8:	f023 0301 	bic.w	r3, r3, #1
 8008afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b00:	4b53      	ldr	r3, [pc, #332]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b06:	4a52      	ldr	r2, [pc, #328]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008b08:	f023 0304 	bic.w	r3, r3, #4
 8008b0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d016      	beq.n	8008b46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b18:	f7fb fb5a 	bl	80041d0 <HAL_GetTick>
 8008b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b1e:	e00a      	b.n	8008b36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b20:	f7fb fb56 	bl	80041d0 <HAL_GetTick>
 8008b24:	4602      	mov	r2, r0
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e138      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b36:	4b46      	ldr	r3, [pc, #280]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d0ed      	beq.n	8008b20 <HAL_RCC_OscConfig+0x388>
 8008b44:	e015      	b.n	8008b72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b46:	f7fb fb43 	bl	80041d0 <HAL_GetTick>
 8008b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b4c:	e00a      	b.n	8008b64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b4e:	f7fb fb3f 	bl	80041d0 <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d901      	bls.n	8008b64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e121      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b64:	4b3a      	ldr	r3, [pc, #232]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b6a:	f003 0302 	and.w	r3, r3, #2
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1ed      	bne.n	8008b4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008b72:	7ffb      	ldrb	r3, [r7, #31]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d105      	bne.n	8008b84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b78:	4b35      	ldr	r3, [pc, #212]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b7c:	4a34      	ldr	r2, [pc, #208]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008b7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b82:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0320 	and.w	r3, r3, #32
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d03c      	beq.n	8008c0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d01c      	beq.n	8008bd2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b98:	4b2d      	ldr	r3, [pc, #180]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008b9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008ba0:	f043 0301 	orr.w	r3, r3, #1
 8008ba4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ba8:	f7fb fb12 	bl	80041d0 <HAL_GetTick>
 8008bac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008bae:	e008      	b.n	8008bc2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bb0:	f7fb fb0e 	bl	80041d0 <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d901      	bls.n	8008bc2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e0f2      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008bc2:	4b23      	ldr	r3, [pc, #140]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bc8:	f003 0302 	and.w	r3, r3, #2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d0ef      	beq.n	8008bb0 <HAL_RCC_OscConfig+0x418>
 8008bd0:	e01b      	b.n	8008c0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008bda:	f023 0301 	bic.w	r3, r3, #1
 8008bde:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008be2:	f7fb faf5 	bl	80041d0 <HAL_GetTick>
 8008be6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008be8:	e008      	b.n	8008bfc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bea:	f7fb faf1 	bl	80041d0 <HAL_GetTick>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d901      	bls.n	8008bfc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e0d5      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008bfc:	4b14      	ldr	r3, [pc, #80]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1ef      	bne.n	8008bea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 80c9 	beq.w	8008da6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c14:	4b0e      	ldr	r3, [pc, #56]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f003 030c 	and.w	r3, r3, #12
 8008c1c:	2b0c      	cmp	r3, #12
 8008c1e:	f000 8083 	beq.w	8008d28 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d15e      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c2a:	4b09      	ldr	r3, [pc, #36]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a08      	ldr	r2, [pc, #32]	@ (8008c50 <HAL_RCC_OscConfig+0x4b8>)
 8008c30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c36:	f7fb facb 	bl	80041d0 <HAL_GetTick>
 8008c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c3c:	e00c      	b.n	8008c58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c3e:	f7fb fac7 	bl	80041d0 <HAL_GetTick>
 8008c42:	4602      	mov	r2, r0
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d905      	bls.n	8008c58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e0ab      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
 8008c50:	40021000 	.word	0x40021000
 8008c54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c58:	4b55      	ldr	r3, [pc, #340]	@ (8008db0 <HAL_RCC_OscConfig+0x618>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1ec      	bne.n	8008c3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c64:	4b52      	ldr	r3, [pc, #328]	@ (8008db0 <HAL_RCC_OscConfig+0x618>)
 8008c66:	68da      	ldr	r2, [r3, #12]
 8008c68:	4b52      	ldr	r3, [pc, #328]	@ (8008db4 <HAL_RCC_OscConfig+0x61c>)
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	6a11      	ldr	r1, [r2, #32]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008c74:	3a01      	subs	r2, #1
 8008c76:	0112      	lsls	r2, r2, #4
 8008c78:	4311      	orrs	r1, r2
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008c7e:	0212      	lsls	r2, r2, #8
 8008c80:	4311      	orrs	r1, r2
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008c86:	0852      	lsrs	r2, r2, #1
 8008c88:	3a01      	subs	r2, #1
 8008c8a:	0552      	lsls	r2, r2, #21
 8008c8c:	4311      	orrs	r1, r2
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008c92:	0852      	lsrs	r2, r2, #1
 8008c94:	3a01      	subs	r2, #1
 8008c96:	0652      	lsls	r2, r2, #25
 8008c98:	4311      	orrs	r1, r2
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008c9e:	06d2      	lsls	r2, r2, #27
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	4943      	ldr	r1, [pc, #268]	@ (8008db0 <HAL_RCC_OscConfig+0x618>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ca8:	4b41      	ldr	r3, [pc, #260]	@ (8008db0 <HAL_RCC_OscConfig+0x618>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a40      	ldr	r2, [pc, #256]	@ (8008db0 <HAL_RCC_OscConfig+0x618>)
 8008cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008cb4:	4b3e      	ldr	r3, [pc, #248]	@ (8008db0 <HAL_RCC_OscConfig+0x618>)
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	4a3d      	ldr	r2, [pc, #244]	@ (8008db0 <HAL_RCC_OscConfig+0x618>)
 8008cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc0:	f7fb fa86 	bl	80041d0 <HAL_GetTick>
 8008cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cc6:	e008      	b.n	8008cda <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cc8:	f7fb fa82 	bl	80041d0 <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d901      	bls.n	8008cda <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e066      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cda:	4b35      	ldr	r3, [pc, #212]	@ (8008db0 <HAL_RCC_OscConfig+0x618>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0f0      	beq.n	8008cc8 <HAL_RCC_OscConfig+0x530>
 8008ce6:	e05e      	b.n	8008da6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ce8:	4b31      	ldr	r3, [pc, #196]	@ (8008db0 <HAL_RCC_OscConfig+0x618>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a30      	ldr	r2, [pc, #192]	@ (8008db0 <HAL_RCC_OscConfig+0x618>)
 8008cee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf4:	f7fb fa6c 	bl	80041d0 <HAL_GetTick>
 8008cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cfa:	e008      	b.n	8008d0e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cfc:	f7fb fa68 	bl	80041d0 <HAL_GetTick>
 8008d00:	4602      	mov	r2, r0
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d901      	bls.n	8008d0e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	e04c      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d0e:	4b28      	ldr	r3, [pc, #160]	@ (8008db0 <HAL_RCC_OscConfig+0x618>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1f0      	bne.n	8008cfc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008d1a:	4b25      	ldr	r3, [pc, #148]	@ (8008db0 <HAL_RCC_OscConfig+0x618>)
 8008d1c:	68da      	ldr	r2, [r3, #12]
 8008d1e:	4924      	ldr	r1, [pc, #144]	@ (8008db0 <HAL_RCC_OscConfig+0x618>)
 8008d20:	4b25      	ldr	r3, [pc, #148]	@ (8008db8 <HAL_RCC_OscConfig+0x620>)
 8008d22:	4013      	ands	r3, r2
 8008d24:	60cb      	str	r3, [r1, #12]
 8008d26:	e03e      	b.n	8008da6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	69db      	ldr	r3, [r3, #28]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d101      	bne.n	8008d34 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e039      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008d34:	4b1e      	ldr	r3, [pc, #120]	@ (8008db0 <HAL_RCC_OscConfig+0x618>)
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f003 0203 	and.w	r2, r3, #3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d12c      	bne.n	8008da2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d52:	3b01      	subs	r3, #1
 8008d54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d123      	bne.n	8008da2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d64:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d11b      	bne.n	8008da2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d74:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d113      	bne.n	8008da2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d84:	085b      	lsrs	r3, r3, #1
 8008d86:	3b01      	subs	r3, #1
 8008d88:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d109      	bne.n	8008da2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d98:	085b      	lsrs	r3, r3, #1
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d001      	beq.n	8008da6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e000      	b.n	8008da8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3720      	adds	r7, #32
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	40021000 	.word	0x40021000
 8008db4:	019f800c 	.word	0x019f800c
 8008db8:	feeefffc 	.word	0xfeeefffc

08008dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e11e      	b.n	8009012 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008dd4:	4b91      	ldr	r3, [pc, #580]	@ (800901c <HAL_RCC_ClockConfig+0x260>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 030f 	and.w	r3, r3, #15
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d910      	bls.n	8008e04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008de2:	4b8e      	ldr	r3, [pc, #568]	@ (800901c <HAL_RCC_ClockConfig+0x260>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f023 020f 	bic.w	r2, r3, #15
 8008dea:	498c      	ldr	r1, [pc, #560]	@ (800901c <HAL_RCC_ClockConfig+0x260>)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008df2:	4b8a      	ldr	r3, [pc, #552]	@ (800901c <HAL_RCC_ClockConfig+0x260>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 030f 	and.w	r3, r3, #15
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d001      	beq.n	8008e04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e106      	b.n	8009012 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d073      	beq.n	8008ef8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	2b03      	cmp	r3, #3
 8008e16:	d129      	bne.n	8008e6c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e18:	4b81      	ldr	r3, [pc, #516]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e0f4      	b.n	8009012 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008e28:	f000 f99e 	bl	8009168 <RCC_GetSysClockFreqFromPLLSource>
 8008e2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	4a7c      	ldr	r2, [pc, #496]	@ (8009024 <HAL_RCC_ClockConfig+0x268>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d93f      	bls.n	8008eb6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008e36:	4b7a      	ldr	r3, [pc, #488]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d009      	beq.n	8008e56 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d033      	beq.n	8008eb6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d12f      	bne.n	8008eb6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008e56:	4b72      	ldr	r3, [pc, #456]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e5e:	4a70      	ldr	r2, [pc, #448]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008e66:	2380      	movs	r3, #128	@ 0x80
 8008e68:	617b      	str	r3, [r7, #20]
 8008e6a:	e024      	b.n	8008eb6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d107      	bne.n	8008e84 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e74:	4b6a      	ldr	r3, [pc, #424]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d109      	bne.n	8008e94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e0c6      	b.n	8009012 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e84:	4b66      	ldr	r3, [pc, #408]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d101      	bne.n	8008e94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e0be      	b.n	8009012 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008e94:	f000 f8ce 	bl	8009034 <HAL_RCC_GetSysClockFreq>
 8008e98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	4a61      	ldr	r2, [pc, #388]	@ (8009024 <HAL_RCC_ClockConfig+0x268>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d909      	bls.n	8008eb6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008ea2:	4b5f      	ldr	r3, [pc, #380]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008eaa:	4a5d      	ldr	r2, [pc, #372]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eb0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008eb2:	2380      	movs	r3, #128	@ 0x80
 8008eb4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008eb6:	4b5a      	ldr	r3, [pc, #360]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	f023 0203 	bic.w	r2, r3, #3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	4957      	ldr	r1, [pc, #348]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ec8:	f7fb f982 	bl	80041d0 <HAL_GetTick>
 8008ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ece:	e00a      	b.n	8008ee6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ed0:	f7fb f97e 	bl	80041d0 <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d901      	bls.n	8008ee6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e095      	b.n	8009012 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f003 020c 	and.w	r2, r3, #12
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d1eb      	bne.n	8008ed0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0302 	and.w	r3, r3, #2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d023      	beq.n	8008f4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0304 	and.w	r3, r3, #4
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d005      	beq.n	8008f1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f10:	4b43      	ldr	r3, [pc, #268]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	4a42      	ldr	r2, [pc, #264]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008f16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008f1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0308 	and.w	r3, r3, #8
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d007      	beq.n	8008f38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008f28:	4b3d      	ldr	r3, [pc, #244]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008f30:	4a3b      	ldr	r2, [pc, #236]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008f32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008f36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f38:	4b39      	ldr	r3, [pc, #228]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	4936      	ldr	r1, [pc, #216]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008f46:	4313      	orrs	r3, r2
 8008f48:	608b      	str	r3, [r1, #8]
 8008f4a:	e008      	b.n	8008f5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	2b80      	cmp	r3, #128	@ 0x80
 8008f50:	d105      	bne.n	8008f5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008f52:	4b33      	ldr	r3, [pc, #204]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	4a32      	ldr	r2, [pc, #200]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008f58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800901c <HAL_RCC_ClockConfig+0x260>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 030f 	and.w	r3, r3, #15
 8008f66:	683a      	ldr	r2, [r7, #0]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d21d      	bcs.n	8008fa8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800901c <HAL_RCC_ClockConfig+0x260>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f023 020f 	bic.w	r2, r3, #15
 8008f74:	4929      	ldr	r1, [pc, #164]	@ (800901c <HAL_RCC_ClockConfig+0x260>)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008f7c:	f7fb f928 	bl	80041d0 <HAL_GetTick>
 8008f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f82:	e00a      	b.n	8008f9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f84:	f7fb f924 	bl	80041d0 <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d901      	bls.n	8008f9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008f96:	2303      	movs	r3, #3
 8008f98:	e03b      	b.n	8009012 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f9a:	4b20      	ldr	r3, [pc, #128]	@ (800901c <HAL_RCC_ClockConfig+0x260>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 030f 	and.w	r3, r3, #15
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d1ed      	bne.n	8008f84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d008      	beq.n	8008fc6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	4917      	ldr	r1, [pc, #92]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 0308 	and.w	r3, r3, #8
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d009      	beq.n	8008fe6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008fd2:	4b13      	ldr	r3, [pc, #76]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	00db      	lsls	r3, r3, #3
 8008fe0:	490f      	ldr	r1, [pc, #60]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008fe6:	f000 f825 	bl	8009034 <HAL_RCC_GetSysClockFreq>
 8008fea:	4602      	mov	r2, r0
 8008fec:	4b0c      	ldr	r3, [pc, #48]	@ (8009020 <HAL_RCC_ClockConfig+0x264>)
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	091b      	lsrs	r3, r3, #4
 8008ff2:	f003 030f 	and.w	r3, r3, #15
 8008ff6:	490c      	ldr	r1, [pc, #48]	@ (8009028 <HAL_RCC_ClockConfig+0x26c>)
 8008ff8:	5ccb      	ldrb	r3, [r1, r3]
 8008ffa:	f003 031f 	and.w	r3, r3, #31
 8008ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8009002:	4a0a      	ldr	r2, [pc, #40]	@ (800902c <HAL_RCC_ClockConfig+0x270>)
 8009004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009006:	4b0a      	ldr	r3, [pc, #40]	@ (8009030 <HAL_RCC_ClockConfig+0x274>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4618      	mov	r0, r3
 800900c:	f7fb f894 	bl	8004138 <HAL_InitTick>
 8009010:	4603      	mov	r3, r0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	40022000 	.word	0x40022000
 8009020:	40021000 	.word	0x40021000
 8009024:	04c4b400 	.word	0x04c4b400
 8009028:	08016d28 	.word	0x08016d28
 800902c:	20000024 	.word	0x20000024
 8009030:	20000028 	.word	0x20000028

08009034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800903a:	4b2c      	ldr	r3, [pc, #176]	@ (80090ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f003 030c 	and.w	r3, r3, #12
 8009042:	2b04      	cmp	r3, #4
 8009044:	d102      	bne.n	800904c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009046:	4b2a      	ldr	r3, [pc, #168]	@ (80090f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009048:	613b      	str	r3, [r7, #16]
 800904a:	e047      	b.n	80090dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800904c:	4b27      	ldr	r3, [pc, #156]	@ (80090ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f003 030c 	and.w	r3, r3, #12
 8009054:	2b08      	cmp	r3, #8
 8009056:	d102      	bne.n	800905e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009058:	4b26      	ldr	r3, [pc, #152]	@ (80090f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800905a:	613b      	str	r3, [r7, #16]
 800905c:	e03e      	b.n	80090dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800905e:	4b23      	ldr	r3, [pc, #140]	@ (80090ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f003 030c 	and.w	r3, r3, #12
 8009066:	2b0c      	cmp	r3, #12
 8009068:	d136      	bne.n	80090d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800906a:	4b20      	ldr	r3, [pc, #128]	@ (80090ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	f003 0303 	and.w	r3, r3, #3
 8009072:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009074:	4b1d      	ldr	r3, [pc, #116]	@ (80090ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	091b      	lsrs	r3, r3, #4
 800907a:	f003 030f 	and.w	r3, r3, #15
 800907e:	3301      	adds	r3, #1
 8009080:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b03      	cmp	r3, #3
 8009086:	d10c      	bne.n	80090a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009088:	4a1a      	ldr	r2, [pc, #104]	@ (80090f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009090:	4a16      	ldr	r2, [pc, #88]	@ (80090ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8009092:	68d2      	ldr	r2, [r2, #12]
 8009094:	0a12      	lsrs	r2, r2, #8
 8009096:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800909a:	fb02 f303 	mul.w	r3, r2, r3
 800909e:	617b      	str	r3, [r7, #20]
      break;
 80090a0:	e00c      	b.n	80090bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80090a2:	4a13      	ldr	r2, [pc, #76]	@ (80090f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090aa:	4a10      	ldr	r2, [pc, #64]	@ (80090ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80090ac:	68d2      	ldr	r2, [r2, #12]
 80090ae:	0a12      	lsrs	r2, r2, #8
 80090b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80090b4:	fb02 f303 	mul.w	r3, r2, r3
 80090b8:	617b      	str	r3, [r7, #20]
      break;
 80090ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80090bc:	4b0b      	ldr	r3, [pc, #44]	@ (80090ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	0e5b      	lsrs	r3, r3, #25
 80090c2:	f003 0303 	and.w	r3, r3, #3
 80090c6:	3301      	adds	r3, #1
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d4:	613b      	str	r3, [r7, #16]
 80090d6:	e001      	b.n	80090dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80090dc:	693b      	ldr	r3, [r7, #16]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	371c      	adds	r7, #28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	40021000 	.word	0x40021000
 80090f0:	00f42400 	.word	0x00f42400
 80090f4:	016e3600 	.word	0x016e3600

080090f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090f8:	b480      	push	{r7}
 80090fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80090fc:	4b03      	ldr	r3, [pc, #12]	@ (800910c <HAL_RCC_GetHCLKFreq+0x14>)
 80090fe:	681b      	ldr	r3, [r3, #0]
}
 8009100:	4618      	mov	r0, r3
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	20000024 	.word	0x20000024

08009110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009114:	f7ff fff0 	bl	80090f8 <HAL_RCC_GetHCLKFreq>
 8009118:	4602      	mov	r2, r0
 800911a:	4b06      	ldr	r3, [pc, #24]	@ (8009134 <HAL_RCC_GetPCLK1Freq+0x24>)
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	0a1b      	lsrs	r3, r3, #8
 8009120:	f003 0307 	and.w	r3, r3, #7
 8009124:	4904      	ldr	r1, [pc, #16]	@ (8009138 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009126:	5ccb      	ldrb	r3, [r1, r3]
 8009128:	f003 031f 	and.w	r3, r3, #31
 800912c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009130:	4618      	mov	r0, r3
 8009132:	bd80      	pop	{r7, pc}
 8009134:	40021000 	.word	0x40021000
 8009138:	08016d38 	.word	0x08016d38

0800913c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009140:	f7ff ffda 	bl	80090f8 <HAL_RCC_GetHCLKFreq>
 8009144:	4602      	mov	r2, r0
 8009146:	4b06      	ldr	r3, [pc, #24]	@ (8009160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	0adb      	lsrs	r3, r3, #11
 800914c:	f003 0307 	and.w	r3, r3, #7
 8009150:	4904      	ldr	r1, [pc, #16]	@ (8009164 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009152:	5ccb      	ldrb	r3, [r1, r3]
 8009154:	f003 031f 	and.w	r3, r3, #31
 8009158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800915c:	4618      	mov	r0, r3
 800915e:	bd80      	pop	{r7, pc}
 8009160:	40021000 	.word	0x40021000
 8009164:	08016d38 	.word	0x08016d38

08009168 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009168:	b480      	push	{r7}
 800916a:	b087      	sub	sp, #28
 800916c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800916e:	4b1e      	ldr	r3, [pc, #120]	@ (80091e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	f003 0303 	and.w	r3, r3, #3
 8009176:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009178:	4b1b      	ldr	r3, [pc, #108]	@ (80091e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	091b      	lsrs	r3, r3, #4
 800917e:	f003 030f 	and.w	r3, r3, #15
 8009182:	3301      	adds	r3, #1
 8009184:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2b03      	cmp	r3, #3
 800918a:	d10c      	bne.n	80091a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800918c:	4a17      	ldr	r2, [pc, #92]	@ (80091ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	fbb2 f3f3 	udiv	r3, r2, r3
 8009194:	4a14      	ldr	r2, [pc, #80]	@ (80091e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009196:	68d2      	ldr	r2, [r2, #12]
 8009198:	0a12      	lsrs	r2, r2, #8
 800919a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800919e:	fb02 f303 	mul.w	r3, r2, r3
 80091a2:	617b      	str	r3, [r7, #20]
    break;
 80091a4:	e00c      	b.n	80091c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80091a6:	4a12      	ldr	r2, [pc, #72]	@ (80091f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ae:	4a0e      	ldr	r2, [pc, #56]	@ (80091e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80091b0:	68d2      	ldr	r2, [r2, #12]
 80091b2:	0a12      	lsrs	r2, r2, #8
 80091b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80091b8:	fb02 f303 	mul.w	r3, r2, r3
 80091bc:	617b      	str	r3, [r7, #20]
    break;
 80091be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80091c0:	4b09      	ldr	r3, [pc, #36]	@ (80091e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	0e5b      	lsrs	r3, r3, #25
 80091c6:	f003 0303 	and.w	r3, r3, #3
 80091ca:	3301      	adds	r3, #1
 80091cc:	005b      	lsls	r3, r3, #1
 80091ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80091da:	687b      	ldr	r3, [r7, #4]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	371c      	adds	r7, #28
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr
 80091e8:	40021000 	.word	0x40021000
 80091ec:	016e3600 	.word	0x016e3600
 80091f0:	00f42400 	.word	0x00f42400

080091f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80091fc:	2300      	movs	r3, #0
 80091fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009200:	2300      	movs	r3, #0
 8009202:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800920c:	2b00      	cmp	r3, #0
 800920e:	f000 8098 	beq.w	8009342 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009212:	2300      	movs	r3, #0
 8009214:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009216:	4b43      	ldr	r3, [pc, #268]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800921a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10d      	bne.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009222:	4b40      	ldr	r3, [pc, #256]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009226:	4a3f      	ldr	r2, [pc, #252]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800922c:	6593      	str	r3, [r2, #88]	@ 0x58
 800922e:	4b3d      	ldr	r3, [pc, #244]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009236:	60bb      	str	r3, [r7, #8]
 8009238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800923a:	2301      	movs	r3, #1
 800923c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800923e:	4b3a      	ldr	r3, [pc, #232]	@ (8009328 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a39      	ldr	r2, [pc, #228]	@ (8009328 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009248:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800924a:	f7fa ffc1 	bl	80041d0 <HAL_GetTick>
 800924e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009250:	e009      	b.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009252:	f7fa ffbd 	bl	80041d0 <HAL_GetTick>
 8009256:	4602      	mov	r2, r0
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	2b02      	cmp	r3, #2
 800925e:	d902      	bls.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	74fb      	strb	r3, [r7, #19]
        break;
 8009264:	e005      	b.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009266:	4b30      	ldr	r3, [pc, #192]	@ (8009328 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0ef      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009272:	7cfb      	ldrb	r3, [r7, #19]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d159      	bne.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009278:	4b2a      	ldr	r3, [pc, #168]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800927a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800927e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009282:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d01e      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	429a      	cmp	r2, r3
 8009292:	d019      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009294:	4b23      	ldr	r3, [pc, #140]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800929a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800929e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80092a0:	4b20      	ldr	r3, [pc, #128]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092a6:	4a1f      	ldr	r2, [pc, #124]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092b0:	4b1c      	ldr	r3, [pc, #112]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092b6:	4a1b      	ldr	r2, [pc, #108]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80092c0:	4a18      	ldr	r2, [pc, #96]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d016      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d2:	f7fa ff7d 	bl	80041d0 <HAL_GetTick>
 80092d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092d8:	e00b      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092da:	f7fa ff79 	bl	80041d0 <HAL_GetTick>
 80092de:	4602      	mov	r2, r0
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d902      	bls.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80092ec:	2303      	movs	r3, #3
 80092ee:	74fb      	strb	r3, [r7, #19]
            break;
 80092f0:	e006      	b.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092f8:	f003 0302 	and.w	r3, r3, #2
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d0ec      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009300:	7cfb      	ldrb	r3, [r7, #19]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10b      	bne.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009306:	4b07      	ldr	r3, [pc, #28]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800930c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009314:	4903      	ldr	r1, [pc, #12]	@ (8009324 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009316:	4313      	orrs	r3, r2
 8009318:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800931c:	e008      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800931e:	7cfb      	ldrb	r3, [r7, #19]
 8009320:	74bb      	strb	r3, [r7, #18]
 8009322:	e005      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009324:	40021000 	.word	0x40021000
 8009328:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800932c:	7cfb      	ldrb	r3, [r7, #19]
 800932e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009330:	7c7b      	ldrb	r3, [r7, #17]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d105      	bne.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009336:	4ba7      	ldr	r3, [pc, #668]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800933a:	4aa6      	ldr	r2, [pc, #664]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800933c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009340:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800934e:	4ba1      	ldr	r3, [pc, #644]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009354:	f023 0203 	bic.w	r2, r3, #3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	499d      	ldr	r1, [pc, #628]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800935e:	4313      	orrs	r3, r2
 8009360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0302 	and.w	r3, r3, #2
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00a      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009370:	4b98      	ldr	r3, [pc, #608]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009376:	f023 020c 	bic.w	r2, r3, #12
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	4995      	ldr	r1, [pc, #596]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009380:	4313      	orrs	r3, r2
 8009382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0304 	and.w	r3, r3, #4
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00a      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009392:	4b90      	ldr	r3, [pc, #576]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009398:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	498c      	ldr	r1, [pc, #560]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0308 	and.w	r3, r3, #8
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00a      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80093b4:	4b87      	ldr	r3, [pc, #540]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	4984      	ldr	r1, [pc, #528]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 0310 	and.w	r3, r3, #16
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00a      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80093d6:	4b7f      	ldr	r3, [pc, #508]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	497b      	ldr	r1, [pc, #492]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0320 	and.w	r3, r3, #32
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00a      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80093f8:	4b76      	ldr	r3, [pc, #472]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	4973      	ldr	r1, [pc, #460]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009408:	4313      	orrs	r3, r2
 800940a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800941a:	4b6e      	ldr	r3, [pc, #440]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800941c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009420:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	496a      	ldr	r1, [pc, #424]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800942a:	4313      	orrs	r3, r2
 800942c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00a      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800943c:	4b65      	ldr	r3, [pc, #404]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800943e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009442:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	4962      	ldr	r1, [pc, #392]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800944c:	4313      	orrs	r3, r2
 800944e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00a      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800945e:	4b5d      	ldr	r3, [pc, #372]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009464:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800946c:	4959      	ldr	r1, [pc, #356]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800946e:	4313      	orrs	r3, r2
 8009470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00a      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009480:	4b54      	ldr	r3, [pc, #336]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009482:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009486:	f023 0203 	bic.w	r2, r3, #3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800948e:	4951      	ldr	r1, [pc, #324]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009490:	4313      	orrs	r3, r2
 8009492:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00a      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094a2:	4b4c      	ldr	r3, [pc, #304]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b0:	4948      	ldr	r1, [pc, #288]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d015      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094c4:	4b43      	ldr	r3, [pc, #268]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d2:	4940      	ldr	r1, [pc, #256]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094e2:	d105      	bne.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094e4:	4b3b      	ldr	r3, [pc, #236]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	4a3a      	ldr	r2, [pc, #232]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094ee:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d015      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80094fc:	4b35      	ldr	r3, [pc, #212]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009502:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800950a:	4932      	ldr	r1, [pc, #200]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800950c:	4313      	orrs	r3, r2
 800950e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009516:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800951a:	d105      	bne.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800951c:	4b2d      	ldr	r3, [pc, #180]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	4a2c      	ldr	r2, [pc, #176]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009526:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d015      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009534:	4b27      	ldr	r3, [pc, #156]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800953a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009542:	4924      	ldr	r1, [pc, #144]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009544:	4313      	orrs	r3, r2
 8009546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800954e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009552:	d105      	bne.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009554:	4b1f      	ldr	r3, [pc, #124]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	4a1e      	ldr	r2, [pc, #120]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800955a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800955e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d015      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800956c:	4b19      	ldr	r3, [pc, #100]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800956e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009572:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800957a:	4916      	ldr	r1, [pc, #88]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800957c:	4313      	orrs	r3, r2
 800957e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800958a:	d105      	bne.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800958c:	4b11      	ldr	r3, [pc, #68]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	4a10      	ldr	r2, [pc, #64]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009596:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d019      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095a4:	4b0b      	ldr	r3, [pc, #44]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095b2:	4908      	ldr	r1, [pc, #32]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095c2:	d109      	bne.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095c4:	4b03      	ldr	r3, [pc, #12]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	4a02      	ldr	r2, [pc, #8]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095ce:	60d3      	str	r3, [r2, #12]
 80095d0:	e002      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80095d2:	bf00      	nop
 80095d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d015      	beq.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80095e4:	4b29      	ldr	r3, [pc, #164]	@ (800968c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80095e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095f2:	4926      	ldr	r1, [pc, #152]	@ (800968c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80095f4:	4313      	orrs	r3, r2
 80095f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009602:	d105      	bne.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009604:	4b21      	ldr	r3, [pc, #132]	@ (800968c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	4a20      	ldr	r2, [pc, #128]	@ (800968c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800960a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800960e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d015      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800961c:	4b1b      	ldr	r3, [pc, #108]	@ (800968c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800961e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009622:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800962a:	4918      	ldr	r1, [pc, #96]	@ (800968c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800962c:	4313      	orrs	r3, r2
 800962e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800963a:	d105      	bne.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800963c:	4b13      	ldr	r3, [pc, #76]	@ (800968c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	4a12      	ldr	r2, [pc, #72]	@ (800968c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009646:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d015      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009654:	4b0d      	ldr	r3, [pc, #52]	@ (800968c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009656:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800965a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009662:	490a      	ldr	r1, [pc, #40]	@ (800968c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009664:	4313      	orrs	r3, r2
 8009666:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800966e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009672:	d105      	bne.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009674:	4b05      	ldr	r3, [pc, #20]	@ (800968c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	4a04      	ldr	r2, [pc, #16]	@ (800968c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800967a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800967e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009680:	7cbb      	ldrb	r3, [r7, #18]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3718      	adds	r7, #24
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	40021000 	.word	0x40021000

08009690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e049      	b.n	8009736 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d106      	bne.n	80096bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7fa fa42 	bl	8003b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2202      	movs	r2, #2
 80096c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	3304      	adds	r3, #4
 80096cc:	4619      	mov	r1, r3
 80096ce:	4610      	mov	r0, r2
 80096d0:	f000 fe58 	bl	800a384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b01      	cmp	r3, #1
 8009752:	d001      	beq.n	8009758 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e04c      	b.n	80097f2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2202      	movs	r2, #2
 800975c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a26      	ldr	r2, [pc, #152]	@ (8009800 <HAL_TIM_Base_Start+0xc0>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d022      	beq.n	80097b0 <HAL_TIM_Base_Start+0x70>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009772:	d01d      	beq.n	80097b0 <HAL_TIM_Base_Start+0x70>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a22      	ldr	r2, [pc, #136]	@ (8009804 <HAL_TIM_Base_Start+0xc4>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d018      	beq.n	80097b0 <HAL_TIM_Base_Start+0x70>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a21      	ldr	r2, [pc, #132]	@ (8009808 <HAL_TIM_Base_Start+0xc8>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d013      	beq.n	80097b0 <HAL_TIM_Base_Start+0x70>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a1f      	ldr	r2, [pc, #124]	@ (800980c <HAL_TIM_Base_Start+0xcc>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d00e      	beq.n	80097b0 <HAL_TIM_Base_Start+0x70>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a1e      	ldr	r2, [pc, #120]	@ (8009810 <HAL_TIM_Base_Start+0xd0>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d009      	beq.n	80097b0 <HAL_TIM_Base_Start+0x70>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a1c      	ldr	r2, [pc, #112]	@ (8009814 <HAL_TIM_Base_Start+0xd4>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d004      	beq.n	80097b0 <HAL_TIM_Base_Start+0x70>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a1b      	ldr	r2, [pc, #108]	@ (8009818 <HAL_TIM_Base_Start+0xd8>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d115      	bne.n	80097dc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	689a      	ldr	r2, [r3, #8]
 80097b6:	4b19      	ldr	r3, [pc, #100]	@ (800981c <HAL_TIM_Base_Start+0xdc>)
 80097b8:	4013      	ands	r3, r2
 80097ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2b06      	cmp	r3, #6
 80097c0:	d015      	beq.n	80097ee <HAL_TIM_Base_Start+0xae>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097c8:	d011      	beq.n	80097ee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f042 0201 	orr.w	r2, r2, #1
 80097d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097da:	e008      	b.n	80097ee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f042 0201 	orr.w	r2, r2, #1
 80097ea:	601a      	str	r2, [r3, #0]
 80097ec:	e000      	b.n	80097f0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3714      	adds	r7, #20
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	40012c00 	.word	0x40012c00
 8009804:	40000400 	.word	0x40000400
 8009808:	40000800 	.word	0x40000800
 800980c:	40000c00 	.word	0x40000c00
 8009810:	40013400 	.word	0x40013400
 8009814:	40014000 	.word	0x40014000
 8009818:	40015000 	.word	0x40015000
 800981c:	00010007 	.word	0x00010007

08009820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b01      	cmp	r3, #1
 8009832:	d001      	beq.n	8009838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e054      	b.n	80098e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2202      	movs	r2, #2
 800983c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68da      	ldr	r2, [r3, #12]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f042 0201 	orr.w	r2, r2, #1
 800984e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a26      	ldr	r2, [pc, #152]	@ (80098f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d022      	beq.n	80098a0 <HAL_TIM_Base_Start_IT+0x80>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009862:	d01d      	beq.n	80098a0 <HAL_TIM_Base_Start_IT+0x80>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a22      	ldr	r2, [pc, #136]	@ (80098f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d018      	beq.n	80098a0 <HAL_TIM_Base_Start_IT+0x80>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a21      	ldr	r2, [pc, #132]	@ (80098f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d013      	beq.n	80098a0 <HAL_TIM_Base_Start_IT+0x80>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a1f      	ldr	r2, [pc, #124]	@ (80098fc <HAL_TIM_Base_Start_IT+0xdc>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d00e      	beq.n	80098a0 <HAL_TIM_Base_Start_IT+0x80>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a1e      	ldr	r2, [pc, #120]	@ (8009900 <HAL_TIM_Base_Start_IT+0xe0>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d009      	beq.n	80098a0 <HAL_TIM_Base_Start_IT+0x80>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a1c      	ldr	r2, [pc, #112]	@ (8009904 <HAL_TIM_Base_Start_IT+0xe4>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d004      	beq.n	80098a0 <HAL_TIM_Base_Start_IT+0x80>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a1b      	ldr	r2, [pc, #108]	@ (8009908 <HAL_TIM_Base_Start_IT+0xe8>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d115      	bne.n	80098cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	689a      	ldr	r2, [r3, #8]
 80098a6:	4b19      	ldr	r3, [pc, #100]	@ (800990c <HAL_TIM_Base_Start_IT+0xec>)
 80098a8:	4013      	ands	r3, r2
 80098aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b06      	cmp	r3, #6
 80098b0:	d015      	beq.n	80098de <HAL_TIM_Base_Start_IT+0xbe>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098b8:	d011      	beq.n	80098de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f042 0201 	orr.w	r2, r2, #1
 80098c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098ca:	e008      	b.n	80098de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f042 0201 	orr.w	r2, r2, #1
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	e000      	b.n	80098e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	40012c00 	.word	0x40012c00
 80098f4:	40000400 	.word	0x40000400
 80098f8:	40000800 	.word	0x40000800
 80098fc:	40000c00 	.word	0x40000c00
 8009900:	40013400 	.word	0x40013400
 8009904:	40014000 	.word	0x40014000
 8009908:	40015000 	.word	0x40015000
 800990c:	00010007 	.word	0x00010007

08009910 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68da      	ldr	r2, [r3, #12]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f022 0201 	bic.w	r2, r2, #1
 8009926:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6a1a      	ldr	r2, [r3, #32]
 800992e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009932:	4013      	ands	r3, r2
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10f      	bne.n	8009958 <HAL_TIM_Base_Stop_IT+0x48>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	6a1a      	ldr	r2, [r3, #32]
 800993e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009942:	4013      	ands	r3, r2
 8009944:	2b00      	cmp	r3, #0
 8009946:	d107      	bne.n	8009958 <HAL_TIM_Base_Stop_IT+0x48>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f022 0201 	bic.w	r2, r2, #1
 8009956:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b082      	sub	sp, #8
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d101      	bne.n	8009980 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e049      	b.n	8009a14 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b00      	cmp	r3, #0
 800998a:	d106      	bne.n	800999a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7fa f899 	bl	8003acc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2202      	movs	r2, #2
 800999e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	3304      	adds	r3, #4
 80099aa:	4619      	mov	r1, r3
 80099ac:	4610      	mov	r0, r2
 80099ae:	f000 fce9 	bl	800a384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d109      	bne.n	8009a40 <HAL_TIM_PWM_Start+0x24>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	bf14      	ite	ne
 8009a38:	2301      	movne	r3, #1
 8009a3a:	2300      	moveq	r3, #0
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	e03c      	b.n	8009aba <HAL_TIM_PWM_Start+0x9e>
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d109      	bne.n	8009a5a <HAL_TIM_PWM_Start+0x3e>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	bf14      	ite	ne
 8009a52:	2301      	movne	r3, #1
 8009a54:	2300      	moveq	r3, #0
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	e02f      	b.n	8009aba <HAL_TIM_PWM_Start+0x9e>
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b08      	cmp	r3, #8
 8009a5e:	d109      	bne.n	8009a74 <HAL_TIM_PWM_Start+0x58>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	bf14      	ite	ne
 8009a6c:	2301      	movne	r3, #1
 8009a6e:	2300      	moveq	r3, #0
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	e022      	b.n	8009aba <HAL_TIM_PWM_Start+0x9e>
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	2b0c      	cmp	r3, #12
 8009a78:	d109      	bne.n	8009a8e <HAL_TIM_PWM_Start+0x72>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	bf14      	ite	ne
 8009a86:	2301      	movne	r3, #1
 8009a88:	2300      	moveq	r3, #0
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	e015      	b.n	8009aba <HAL_TIM_PWM_Start+0x9e>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b10      	cmp	r3, #16
 8009a92:	d109      	bne.n	8009aa8 <HAL_TIM_PWM_Start+0x8c>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	bf14      	ite	ne
 8009aa0:	2301      	movne	r3, #1
 8009aa2:	2300      	moveq	r3, #0
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	e008      	b.n	8009aba <HAL_TIM_PWM_Start+0x9e>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	bf14      	ite	ne
 8009ab4:	2301      	movne	r3, #1
 8009ab6:	2300      	moveq	r3, #0
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e0a6      	b.n	8009c10 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d104      	bne.n	8009ad2 <HAL_TIM_PWM_Start+0xb6>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2202      	movs	r2, #2
 8009acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ad0:	e023      	b.n	8009b1a <HAL_TIM_PWM_Start+0xfe>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	d104      	bne.n	8009ae2 <HAL_TIM_PWM_Start+0xc6>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2202      	movs	r2, #2
 8009adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ae0:	e01b      	b.n	8009b1a <HAL_TIM_PWM_Start+0xfe>
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b08      	cmp	r3, #8
 8009ae6:	d104      	bne.n	8009af2 <HAL_TIM_PWM_Start+0xd6>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2202      	movs	r2, #2
 8009aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009af0:	e013      	b.n	8009b1a <HAL_TIM_PWM_Start+0xfe>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2b0c      	cmp	r3, #12
 8009af6:	d104      	bne.n	8009b02 <HAL_TIM_PWM_Start+0xe6>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2202      	movs	r2, #2
 8009afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b00:	e00b      	b.n	8009b1a <HAL_TIM_PWM_Start+0xfe>
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b10      	cmp	r3, #16
 8009b06:	d104      	bne.n	8009b12 <HAL_TIM_PWM_Start+0xf6>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b10:	e003      	b.n	8009b1a <HAL_TIM_PWM_Start+0xfe>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2202      	movs	r2, #2
 8009b16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f001 f8a8 	bl	800ac78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a3a      	ldr	r2, [pc, #232]	@ (8009c18 <HAL_TIM_PWM_Start+0x1fc>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d018      	beq.n	8009b64 <HAL_TIM_PWM_Start+0x148>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a39      	ldr	r2, [pc, #228]	@ (8009c1c <HAL_TIM_PWM_Start+0x200>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d013      	beq.n	8009b64 <HAL_TIM_PWM_Start+0x148>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a37      	ldr	r2, [pc, #220]	@ (8009c20 <HAL_TIM_PWM_Start+0x204>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d00e      	beq.n	8009b64 <HAL_TIM_PWM_Start+0x148>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a36      	ldr	r2, [pc, #216]	@ (8009c24 <HAL_TIM_PWM_Start+0x208>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d009      	beq.n	8009b64 <HAL_TIM_PWM_Start+0x148>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a34      	ldr	r2, [pc, #208]	@ (8009c28 <HAL_TIM_PWM_Start+0x20c>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d004      	beq.n	8009b64 <HAL_TIM_PWM_Start+0x148>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a33      	ldr	r2, [pc, #204]	@ (8009c2c <HAL_TIM_PWM_Start+0x210>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d101      	bne.n	8009b68 <HAL_TIM_PWM_Start+0x14c>
 8009b64:	2301      	movs	r3, #1
 8009b66:	e000      	b.n	8009b6a <HAL_TIM_PWM_Start+0x14e>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d007      	beq.n	8009b7e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a25      	ldr	r2, [pc, #148]	@ (8009c18 <HAL_TIM_PWM_Start+0x1fc>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d022      	beq.n	8009bce <HAL_TIM_PWM_Start+0x1b2>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b90:	d01d      	beq.n	8009bce <HAL_TIM_PWM_Start+0x1b2>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a26      	ldr	r2, [pc, #152]	@ (8009c30 <HAL_TIM_PWM_Start+0x214>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d018      	beq.n	8009bce <HAL_TIM_PWM_Start+0x1b2>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a24      	ldr	r2, [pc, #144]	@ (8009c34 <HAL_TIM_PWM_Start+0x218>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d013      	beq.n	8009bce <HAL_TIM_PWM_Start+0x1b2>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a23      	ldr	r2, [pc, #140]	@ (8009c38 <HAL_TIM_PWM_Start+0x21c>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d00e      	beq.n	8009bce <HAL_TIM_PWM_Start+0x1b2>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a19      	ldr	r2, [pc, #100]	@ (8009c1c <HAL_TIM_PWM_Start+0x200>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d009      	beq.n	8009bce <HAL_TIM_PWM_Start+0x1b2>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a18      	ldr	r2, [pc, #96]	@ (8009c20 <HAL_TIM_PWM_Start+0x204>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d004      	beq.n	8009bce <HAL_TIM_PWM_Start+0x1b2>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a18      	ldr	r2, [pc, #96]	@ (8009c2c <HAL_TIM_PWM_Start+0x210>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d115      	bne.n	8009bfa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	4b19      	ldr	r3, [pc, #100]	@ (8009c3c <HAL_TIM_PWM_Start+0x220>)
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2b06      	cmp	r3, #6
 8009bde:	d015      	beq.n	8009c0c <HAL_TIM_PWM_Start+0x1f0>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009be6:	d011      	beq.n	8009c0c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f042 0201 	orr.w	r2, r2, #1
 8009bf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bf8:	e008      	b.n	8009c0c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f042 0201 	orr.w	r2, r2, #1
 8009c08:	601a      	str	r2, [r3, #0]
 8009c0a:	e000      	b.n	8009c0e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	40012c00 	.word	0x40012c00
 8009c1c:	40013400 	.word	0x40013400
 8009c20:	40014000 	.word	0x40014000
 8009c24:	40014400 	.word	0x40014400
 8009c28:	40014800 	.word	0x40014800
 8009c2c:	40015000 	.word	0x40015000
 8009c30:	40000400 	.word	0x40000400
 8009c34:	40000800 	.word	0x40000800
 8009c38:	40000c00 	.word	0x40000c00
 8009c3c:	00010007 	.word	0x00010007

08009c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	f003 0302 	and.w	r3, r3, #2
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d020      	beq.n	8009ca4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f003 0302 	and.w	r3, r3, #2
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d01b      	beq.n	8009ca4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f06f 0202 	mvn.w	r2, #2
 8009c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	f003 0303 	and.w	r3, r3, #3
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d003      	beq.n	8009c92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fb5c 	bl	800a348 <HAL_TIM_IC_CaptureCallback>
 8009c90:	e005      	b.n	8009c9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fb4e 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fb5f 	bl	800a35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f003 0304 	and.w	r3, r3, #4
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d020      	beq.n	8009cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f003 0304 	and.w	r3, r3, #4
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d01b      	beq.n	8009cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f06f 0204 	mvn.w	r2, #4
 8009cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fb36 	bl	800a348 <HAL_TIM_IC_CaptureCallback>
 8009cdc:	e005      	b.n	8009cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fb28 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fb39 	bl	800a35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f003 0308 	and.w	r3, r3, #8
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d020      	beq.n	8009d3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f003 0308 	and.w	r3, r3, #8
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d01b      	beq.n	8009d3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f06f 0208 	mvn.w	r2, #8
 8009d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2204      	movs	r2, #4
 8009d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	69db      	ldr	r3, [r3, #28]
 8009d1a:	f003 0303 	and.w	r3, r3, #3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fb10 	bl	800a348 <HAL_TIM_IC_CaptureCallback>
 8009d28:	e005      	b.n	8009d36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fb02 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fb13 	bl	800a35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f003 0310 	and.w	r3, r3, #16
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d020      	beq.n	8009d88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f003 0310 	and.w	r3, r3, #16
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d01b      	beq.n	8009d88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f06f 0210 	mvn.w	r2, #16
 8009d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2208      	movs	r2, #8
 8009d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 faea 	bl	800a348 <HAL_TIM_IC_CaptureCallback>
 8009d74:	e005      	b.n	8009d82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fadc 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 faed 	bl	800a35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00c      	beq.n	8009dac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f003 0301 	and.w	r3, r3, #1
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d007      	beq.n	8009dac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f06f 0201 	mvn.w	r2, #1
 8009da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7f8 fc26 	bl	80025f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d104      	bne.n	8009dc0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00c      	beq.n	8009dda <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d007      	beq.n	8009dda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f001 f8a9 	bl	800af2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00c      	beq.n	8009dfe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d007      	beq.n	8009dfe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f001 f8a1 	bl	800af40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00c      	beq.n	8009e22 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d007      	beq.n	8009e22 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 faa7 	bl	800a370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	f003 0320 	and.w	r3, r3, #32
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00c      	beq.n	8009e46 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f003 0320 	and.w	r3, r3, #32
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d007      	beq.n	8009e46 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f06f 0220 	mvn.w	r2, #32
 8009e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f001 f869 	bl	800af18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00c      	beq.n	8009e6a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d007      	beq.n	8009e6a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f001 f875 	bl	800af54 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00c      	beq.n	8009e8e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d007      	beq.n	8009e8e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f001 f86d 	bl	800af68 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00c      	beq.n	8009eb2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d007      	beq.n	8009eb2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f001 f865 	bl	800af7c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00c      	beq.n	8009ed6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d007      	beq.n	8009ed6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f001 f85d 	bl	800af90 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ed6:	bf00      	nop
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
	...

08009ee0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009eec:	2300      	movs	r3, #0
 8009eee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d101      	bne.n	8009efe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009efa:	2302      	movs	r3, #2
 8009efc:	e0ff      	b.n	800a0fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2b14      	cmp	r3, #20
 8009f0a:	f200 80f0 	bhi.w	800a0ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f14:	08009f69 	.word	0x08009f69
 8009f18:	0800a0ef 	.word	0x0800a0ef
 8009f1c:	0800a0ef 	.word	0x0800a0ef
 8009f20:	0800a0ef 	.word	0x0800a0ef
 8009f24:	08009fa9 	.word	0x08009fa9
 8009f28:	0800a0ef 	.word	0x0800a0ef
 8009f2c:	0800a0ef 	.word	0x0800a0ef
 8009f30:	0800a0ef 	.word	0x0800a0ef
 8009f34:	08009feb 	.word	0x08009feb
 8009f38:	0800a0ef 	.word	0x0800a0ef
 8009f3c:	0800a0ef 	.word	0x0800a0ef
 8009f40:	0800a0ef 	.word	0x0800a0ef
 8009f44:	0800a02b 	.word	0x0800a02b
 8009f48:	0800a0ef 	.word	0x0800a0ef
 8009f4c:	0800a0ef 	.word	0x0800a0ef
 8009f50:	0800a0ef 	.word	0x0800a0ef
 8009f54:	0800a06d 	.word	0x0800a06d
 8009f58:	0800a0ef 	.word	0x0800a0ef
 8009f5c:	0800a0ef 	.word	0x0800a0ef
 8009f60:	0800a0ef 	.word	0x0800a0ef
 8009f64:	0800a0ad 	.word	0x0800a0ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68b9      	ldr	r1, [r7, #8]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 fabc 	bl	800a4ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	699a      	ldr	r2, [r3, #24]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f042 0208 	orr.w	r2, r2, #8
 8009f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	699a      	ldr	r2, [r3, #24]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f022 0204 	bic.w	r2, r2, #4
 8009f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6999      	ldr	r1, [r3, #24]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	691a      	ldr	r2, [r3, #16]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	619a      	str	r2, [r3, #24]
      break;
 8009fa6:	e0a5      	b.n	800a0f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68b9      	ldr	r1, [r7, #8]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 fb36 	bl	800a620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	699a      	ldr	r2, [r3, #24]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	699a      	ldr	r2, [r3, #24]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6999      	ldr	r1, [r3, #24]
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	021a      	lsls	r2, r3, #8
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	619a      	str	r2, [r3, #24]
      break;
 8009fe8:	e084      	b.n	800a0f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f000 fba9 	bl	800a748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	69da      	ldr	r2, [r3, #28]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f042 0208 	orr.w	r2, r2, #8
 800a004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	69da      	ldr	r2, [r3, #28]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f022 0204 	bic.w	r2, r2, #4
 800a014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	69d9      	ldr	r1, [r3, #28]
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	691a      	ldr	r2, [r3, #16]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	430a      	orrs	r2, r1
 800a026:	61da      	str	r2, [r3, #28]
      break;
 800a028:	e064      	b.n	800a0f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68b9      	ldr	r1, [r7, #8]
 800a030:	4618      	mov	r0, r3
 800a032:	f000 fc1b 	bl	800a86c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	69da      	ldr	r2, [r3, #28]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	69da      	ldr	r2, [r3, #28]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	69d9      	ldr	r1, [r3, #28]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	021a      	lsls	r2, r3, #8
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	430a      	orrs	r2, r1
 800a068:	61da      	str	r2, [r3, #28]
      break;
 800a06a:	e043      	b.n	800a0f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68b9      	ldr	r1, [r7, #8]
 800a072:	4618      	mov	r0, r3
 800a074:	f000 fc8e 	bl	800a994 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f042 0208 	orr.w	r2, r2, #8
 800a086:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f022 0204 	bic.w	r2, r2, #4
 800a096:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	691a      	ldr	r2, [r3, #16]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a0aa:	e023      	b.n	800a0f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68b9      	ldr	r1, [r7, #8]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 fcd8 	bl	800aa68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a0c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	021a      	lsls	r2, r3, #8
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	430a      	orrs	r2, r1
 800a0ea:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a0ec:	e002      	b.n	800a0f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	75fb      	strb	r3, [r7, #23]
      break;
 800a0f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a0fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3718      	adds	r7, #24
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop

0800a108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a112:	2300      	movs	r3, #0
 800a114:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d101      	bne.n	800a124 <HAL_TIM_ConfigClockSource+0x1c>
 800a120:	2302      	movs	r3, #2
 800a122:	e0f6      	b.n	800a312 <HAL_TIM_ConfigClockSource+0x20a>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2202      	movs	r2, #2
 800a130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a142:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a14e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a6f      	ldr	r2, [pc, #444]	@ (800a31c <HAL_TIM_ConfigClockSource+0x214>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	f000 80c1 	beq.w	800a2e6 <HAL_TIM_ConfigClockSource+0x1de>
 800a164:	4a6d      	ldr	r2, [pc, #436]	@ (800a31c <HAL_TIM_ConfigClockSource+0x214>)
 800a166:	4293      	cmp	r3, r2
 800a168:	f200 80c6 	bhi.w	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a16c:	4a6c      	ldr	r2, [pc, #432]	@ (800a320 <HAL_TIM_ConfigClockSource+0x218>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	f000 80b9 	beq.w	800a2e6 <HAL_TIM_ConfigClockSource+0x1de>
 800a174:	4a6a      	ldr	r2, [pc, #424]	@ (800a320 <HAL_TIM_ConfigClockSource+0x218>)
 800a176:	4293      	cmp	r3, r2
 800a178:	f200 80be 	bhi.w	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a17c:	4a69      	ldr	r2, [pc, #420]	@ (800a324 <HAL_TIM_ConfigClockSource+0x21c>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	f000 80b1 	beq.w	800a2e6 <HAL_TIM_ConfigClockSource+0x1de>
 800a184:	4a67      	ldr	r2, [pc, #412]	@ (800a324 <HAL_TIM_ConfigClockSource+0x21c>)
 800a186:	4293      	cmp	r3, r2
 800a188:	f200 80b6 	bhi.w	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a18c:	4a66      	ldr	r2, [pc, #408]	@ (800a328 <HAL_TIM_ConfigClockSource+0x220>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	f000 80a9 	beq.w	800a2e6 <HAL_TIM_ConfigClockSource+0x1de>
 800a194:	4a64      	ldr	r2, [pc, #400]	@ (800a328 <HAL_TIM_ConfigClockSource+0x220>)
 800a196:	4293      	cmp	r3, r2
 800a198:	f200 80ae 	bhi.w	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a19c:	4a63      	ldr	r2, [pc, #396]	@ (800a32c <HAL_TIM_ConfigClockSource+0x224>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	f000 80a1 	beq.w	800a2e6 <HAL_TIM_ConfigClockSource+0x1de>
 800a1a4:	4a61      	ldr	r2, [pc, #388]	@ (800a32c <HAL_TIM_ConfigClockSource+0x224>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	f200 80a6 	bhi.w	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1ac:	4a60      	ldr	r2, [pc, #384]	@ (800a330 <HAL_TIM_ConfigClockSource+0x228>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	f000 8099 	beq.w	800a2e6 <HAL_TIM_ConfigClockSource+0x1de>
 800a1b4:	4a5e      	ldr	r2, [pc, #376]	@ (800a330 <HAL_TIM_ConfigClockSource+0x228>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	f200 809e 	bhi.w	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a1c0:	f000 8091 	beq.w	800a2e6 <HAL_TIM_ConfigClockSource+0x1de>
 800a1c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a1c8:	f200 8096 	bhi.w	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1d0:	f000 8089 	beq.w	800a2e6 <HAL_TIM_ConfigClockSource+0x1de>
 800a1d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1d8:	f200 808e 	bhi.w	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1e0:	d03e      	beq.n	800a260 <HAL_TIM_ConfigClockSource+0x158>
 800a1e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1e6:	f200 8087 	bhi.w	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1ee:	f000 8086 	beq.w	800a2fe <HAL_TIM_ConfigClockSource+0x1f6>
 800a1f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1f6:	d87f      	bhi.n	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1f8:	2b70      	cmp	r3, #112	@ 0x70
 800a1fa:	d01a      	beq.n	800a232 <HAL_TIM_ConfigClockSource+0x12a>
 800a1fc:	2b70      	cmp	r3, #112	@ 0x70
 800a1fe:	d87b      	bhi.n	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a200:	2b60      	cmp	r3, #96	@ 0x60
 800a202:	d050      	beq.n	800a2a6 <HAL_TIM_ConfigClockSource+0x19e>
 800a204:	2b60      	cmp	r3, #96	@ 0x60
 800a206:	d877      	bhi.n	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a208:	2b50      	cmp	r3, #80	@ 0x50
 800a20a:	d03c      	beq.n	800a286 <HAL_TIM_ConfigClockSource+0x17e>
 800a20c:	2b50      	cmp	r3, #80	@ 0x50
 800a20e:	d873      	bhi.n	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a210:	2b40      	cmp	r3, #64	@ 0x40
 800a212:	d058      	beq.n	800a2c6 <HAL_TIM_ConfigClockSource+0x1be>
 800a214:	2b40      	cmp	r3, #64	@ 0x40
 800a216:	d86f      	bhi.n	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a218:	2b30      	cmp	r3, #48	@ 0x30
 800a21a:	d064      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x1de>
 800a21c:	2b30      	cmp	r3, #48	@ 0x30
 800a21e:	d86b      	bhi.n	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a220:	2b20      	cmp	r3, #32
 800a222:	d060      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x1de>
 800a224:	2b20      	cmp	r3, #32
 800a226:	d867      	bhi.n	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d05c      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x1de>
 800a22c:	2b10      	cmp	r3, #16
 800a22e:	d05a      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x1de>
 800a230:	e062      	b.n	800a2f8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a242:	f000 fcf9 	bl	800ac38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a254:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	609a      	str	r2, [r3, #8]
      break;
 800a25e:	e04f      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a270:	f000 fce2 	bl	800ac38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	689a      	ldr	r2, [r3, #8]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a282:	609a      	str	r2, [r3, #8]
      break;
 800a284:	e03c      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a292:	461a      	mov	r2, r3
 800a294:	f000 fc54 	bl	800ab40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2150      	movs	r1, #80	@ 0x50
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 fcad 	bl	800abfe <TIM_ITRx_SetConfig>
      break;
 800a2a4:	e02c      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	f000 fc73 	bl	800ab9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2160      	movs	r1, #96	@ 0x60
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f000 fc9d 	bl	800abfe <TIM_ITRx_SetConfig>
      break;
 800a2c4:	e01c      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f000 fc34 	bl	800ab40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2140      	movs	r1, #64	@ 0x40
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 fc8d 	bl	800abfe <TIM_ITRx_SetConfig>
      break;
 800a2e4:	e00c      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	f000 fc84 	bl	800abfe <TIM_ITRx_SetConfig>
      break;
 800a2f6:	e003      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	73fb      	strb	r3, [r7, #15]
      break;
 800a2fc:	e000      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a2fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a310:	7bfb      	ldrb	r3, [r7, #15]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	00100070 	.word	0x00100070
 800a320:	00100060 	.word	0x00100060
 800a324:	00100050 	.word	0x00100050
 800a328:	00100040 	.word	0x00100040
 800a32c:	00100030 	.word	0x00100030
 800a330:	00100020 	.word	0x00100020

0800a334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a4c      	ldr	r2, [pc, #304]	@ (800a4c8 <TIM_Base_SetConfig+0x144>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d017      	beq.n	800a3cc <TIM_Base_SetConfig+0x48>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3a2:	d013      	beq.n	800a3cc <TIM_Base_SetConfig+0x48>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a49      	ldr	r2, [pc, #292]	@ (800a4cc <TIM_Base_SetConfig+0x148>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d00f      	beq.n	800a3cc <TIM_Base_SetConfig+0x48>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a48      	ldr	r2, [pc, #288]	@ (800a4d0 <TIM_Base_SetConfig+0x14c>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d00b      	beq.n	800a3cc <TIM_Base_SetConfig+0x48>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a47      	ldr	r2, [pc, #284]	@ (800a4d4 <TIM_Base_SetConfig+0x150>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d007      	beq.n	800a3cc <TIM_Base_SetConfig+0x48>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a46      	ldr	r2, [pc, #280]	@ (800a4d8 <TIM_Base_SetConfig+0x154>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d003      	beq.n	800a3cc <TIM_Base_SetConfig+0x48>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a45      	ldr	r2, [pc, #276]	@ (800a4dc <TIM_Base_SetConfig+0x158>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d108      	bne.n	800a3de <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a39      	ldr	r2, [pc, #228]	@ (800a4c8 <TIM_Base_SetConfig+0x144>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d023      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3ec:	d01f      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a36      	ldr	r2, [pc, #216]	@ (800a4cc <TIM_Base_SetConfig+0x148>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d01b      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a35      	ldr	r2, [pc, #212]	@ (800a4d0 <TIM_Base_SetConfig+0x14c>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d017      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a34      	ldr	r2, [pc, #208]	@ (800a4d4 <TIM_Base_SetConfig+0x150>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d013      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a33      	ldr	r2, [pc, #204]	@ (800a4d8 <TIM_Base_SetConfig+0x154>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d00f      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a33      	ldr	r2, [pc, #204]	@ (800a4e0 <TIM_Base_SetConfig+0x15c>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d00b      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a32      	ldr	r2, [pc, #200]	@ (800a4e4 <TIM_Base_SetConfig+0x160>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d007      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a31      	ldr	r2, [pc, #196]	@ (800a4e8 <TIM_Base_SetConfig+0x164>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d003      	beq.n	800a42e <TIM_Base_SetConfig+0xaa>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a2c      	ldr	r2, [pc, #176]	@ (800a4dc <TIM_Base_SetConfig+0x158>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d108      	bne.n	800a440 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	689a      	ldr	r2, [r3, #8]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a18      	ldr	r2, [pc, #96]	@ (800a4c8 <TIM_Base_SetConfig+0x144>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d013      	beq.n	800a494 <TIM_Base_SetConfig+0x110>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a1a      	ldr	r2, [pc, #104]	@ (800a4d8 <TIM_Base_SetConfig+0x154>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d00f      	beq.n	800a494 <TIM_Base_SetConfig+0x110>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a1a      	ldr	r2, [pc, #104]	@ (800a4e0 <TIM_Base_SetConfig+0x15c>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d00b      	beq.n	800a494 <TIM_Base_SetConfig+0x110>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4a19      	ldr	r2, [pc, #100]	@ (800a4e4 <TIM_Base_SetConfig+0x160>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d007      	beq.n	800a494 <TIM_Base_SetConfig+0x110>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a18      	ldr	r2, [pc, #96]	@ (800a4e8 <TIM_Base_SetConfig+0x164>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d003      	beq.n	800a494 <TIM_Base_SetConfig+0x110>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a13      	ldr	r2, [pc, #76]	@ (800a4dc <TIM_Base_SetConfig+0x158>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d103      	bne.n	800a49c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	691a      	ldr	r2, [r3, #16]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d105      	bne.n	800a4ba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	f023 0201 	bic.w	r2, r3, #1
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	611a      	str	r2, [r3, #16]
  }
}
 800a4ba:	bf00      	nop
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	40012c00 	.word	0x40012c00
 800a4cc:	40000400 	.word	0x40000400
 800a4d0:	40000800 	.word	0x40000800
 800a4d4:	40000c00 	.word	0x40000c00
 800a4d8:	40013400 	.word	0x40013400
 800a4dc:	40015000 	.word	0x40015000
 800a4e0:	40014000 	.word	0x40014000
 800a4e4:	40014400 	.word	0x40014400
 800a4e8:	40014800 	.word	0x40014800

0800a4ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a1b      	ldr	r3, [r3, #32]
 800a500:	f023 0201 	bic.w	r2, r3, #1
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a51a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a51e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f023 0303 	bic.w	r3, r3, #3
 800a526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	4313      	orrs	r3, r2
 800a530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f023 0302 	bic.w	r3, r3, #2
 800a538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	4313      	orrs	r3, r2
 800a542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a30      	ldr	r2, [pc, #192]	@ (800a608 <TIM_OC1_SetConfig+0x11c>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d013      	beq.n	800a574 <TIM_OC1_SetConfig+0x88>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a2f      	ldr	r2, [pc, #188]	@ (800a60c <TIM_OC1_SetConfig+0x120>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d00f      	beq.n	800a574 <TIM_OC1_SetConfig+0x88>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a2e      	ldr	r2, [pc, #184]	@ (800a610 <TIM_OC1_SetConfig+0x124>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d00b      	beq.n	800a574 <TIM_OC1_SetConfig+0x88>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a2d      	ldr	r2, [pc, #180]	@ (800a614 <TIM_OC1_SetConfig+0x128>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d007      	beq.n	800a574 <TIM_OC1_SetConfig+0x88>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a2c      	ldr	r2, [pc, #176]	@ (800a618 <TIM_OC1_SetConfig+0x12c>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d003      	beq.n	800a574 <TIM_OC1_SetConfig+0x88>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a2b      	ldr	r2, [pc, #172]	@ (800a61c <TIM_OC1_SetConfig+0x130>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d10c      	bne.n	800a58e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	f023 0308 	bic.w	r3, r3, #8
 800a57a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	697a      	ldr	r2, [r7, #20]
 800a582:	4313      	orrs	r3, r2
 800a584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f023 0304 	bic.w	r3, r3, #4
 800a58c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a1d      	ldr	r2, [pc, #116]	@ (800a608 <TIM_OC1_SetConfig+0x11c>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d013      	beq.n	800a5be <TIM_OC1_SetConfig+0xd2>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a1c      	ldr	r2, [pc, #112]	@ (800a60c <TIM_OC1_SetConfig+0x120>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d00f      	beq.n	800a5be <TIM_OC1_SetConfig+0xd2>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a1b      	ldr	r2, [pc, #108]	@ (800a610 <TIM_OC1_SetConfig+0x124>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d00b      	beq.n	800a5be <TIM_OC1_SetConfig+0xd2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a1a      	ldr	r2, [pc, #104]	@ (800a614 <TIM_OC1_SetConfig+0x128>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d007      	beq.n	800a5be <TIM_OC1_SetConfig+0xd2>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a19      	ldr	r2, [pc, #100]	@ (800a618 <TIM_OC1_SetConfig+0x12c>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d003      	beq.n	800a5be <TIM_OC1_SetConfig+0xd2>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a18      	ldr	r2, [pc, #96]	@ (800a61c <TIM_OC1_SetConfig+0x130>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d111      	bne.n	800a5e2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a5cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	693a      	ldr	r2, [r7, #16]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	685a      	ldr	r2, [r3, #4]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	697a      	ldr	r2, [r7, #20]
 800a5fa:	621a      	str	r2, [r3, #32]
}
 800a5fc:	bf00      	nop
 800a5fe:	371c      	adds	r7, #28
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr
 800a608:	40012c00 	.word	0x40012c00
 800a60c:	40013400 	.word	0x40013400
 800a610:	40014000 	.word	0x40014000
 800a614:	40014400 	.word	0x40014400
 800a618:	40014800 	.word	0x40014800
 800a61c:	40015000 	.word	0x40015000

0800a620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a620:	b480      	push	{r7}
 800a622:	b087      	sub	sp, #28
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	f023 0210 	bic.w	r2, r3, #16
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a64e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	4313      	orrs	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f023 0320 	bic.w	r3, r3, #32
 800a66e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	011b      	lsls	r3, r3, #4
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	4313      	orrs	r3, r2
 800a67a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a2c      	ldr	r2, [pc, #176]	@ (800a730 <TIM_OC2_SetConfig+0x110>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d007      	beq.n	800a694 <TIM_OC2_SetConfig+0x74>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a2b      	ldr	r2, [pc, #172]	@ (800a734 <TIM_OC2_SetConfig+0x114>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d003      	beq.n	800a694 <TIM_OC2_SetConfig+0x74>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a2a      	ldr	r2, [pc, #168]	@ (800a738 <TIM_OC2_SetConfig+0x118>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d10d      	bne.n	800a6b0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a69a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	011b      	lsls	r3, r3, #4
 800a6a2:	697a      	ldr	r2, [r7, #20]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a1f      	ldr	r2, [pc, #124]	@ (800a730 <TIM_OC2_SetConfig+0x110>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d013      	beq.n	800a6e0 <TIM_OC2_SetConfig+0xc0>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a1e      	ldr	r2, [pc, #120]	@ (800a734 <TIM_OC2_SetConfig+0x114>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d00f      	beq.n	800a6e0 <TIM_OC2_SetConfig+0xc0>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a1e      	ldr	r2, [pc, #120]	@ (800a73c <TIM_OC2_SetConfig+0x11c>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d00b      	beq.n	800a6e0 <TIM_OC2_SetConfig+0xc0>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a1d      	ldr	r2, [pc, #116]	@ (800a740 <TIM_OC2_SetConfig+0x120>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d007      	beq.n	800a6e0 <TIM_OC2_SetConfig+0xc0>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a1c      	ldr	r2, [pc, #112]	@ (800a744 <TIM_OC2_SetConfig+0x124>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d003      	beq.n	800a6e0 <TIM_OC2_SetConfig+0xc0>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a17      	ldr	r2, [pc, #92]	@ (800a738 <TIM_OC2_SetConfig+0x118>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d113      	bne.n	800a708 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a6e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a6ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	695b      	ldr	r3, [r3, #20]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	4313      	orrs	r3, r2
 800a706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	693a      	ldr	r2, [r7, #16]
 800a70c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	621a      	str	r2, [r3, #32]
}
 800a722:	bf00      	nop
 800a724:	371c      	adds	r7, #28
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	40012c00 	.word	0x40012c00
 800a734:	40013400 	.word	0x40013400
 800a738:	40015000 	.word	0x40015000
 800a73c:	40014000 	.word	0x40014000
 800a740:	40014400 	.word	0x40014400
 800a744:	40014800 	.word	0x40014800

0800a748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a748:	b480      	push	{r7}
 800a74a:	b087      	sub	sp, #28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a1b      	ldr	r3, [r3, #32]
 800a75c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	69db      	ldr	r3, [r3, #28]
 800a76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a77a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f023 0303 	bic.w	r3, r3, #3
 800a782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	021b      	lsls	r3, r3, #8
 800a79c:	697a      	ldr	r2, [r7, #20]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a2b      	ldr	r2, [pc, #172]	@ (800a854 <TIM_OC3_SetConfig+0x10c>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d007      	beq.n	800a7ba <TIM_OC3_SetConfig+0x72>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a2a      	ldr	r2, [pc, #168]	@ (800a858 <TIM_OC3_SetConfig+0x110>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d003      	beq.n	800a7ba <TIM_OC3_SetConfig+0x72>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a29      	ldr	r2, [pc, #164]	@ (800a85c <TIM_OC3_SetConfig+0x114>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d10d      	bne.n	800a7d6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a7c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	021b      	lsls	r3, r3, #8
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a7d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4a1e      	ldr	r2, [pc, #120]	@ (800a854 <TIM_OC3_SetConfig+0x10c>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d013      	beq.n	800a806 <TIM_OC3_SetConfig+0xbe>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a858 <TIM_OC3_SetConfig+0x110>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d00f      	beq.n	800a806 <TIM_OC3_SetConfig+0xbe>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a860 <TIM_OC3_SetConfig+0x118>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d00b      	beq.n	800a806 <TIM_OC3_SetConfig+0xbe>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a1c      	ldr	r2, [pc, #112]	@ (800a864 <TIM_OC3_SetConfig+0x11c>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d007      	beq.n	800a806 <TIM_OC3_SetConfig+0xbe>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a1b      	ldr	r2, [pc, #108]	@ (800a868 <TIM_OC3_SetConfig+0x120>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d003      	beq.n	800a806 <TIM_OC3_SetConfig+0xbe>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a16      	ldr	r2, [pc, #88]	@ (800a85c <TIM_OC3_SetConfig+0x114>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d113      	bne.n	800a82e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a80c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	011b      	lsls	r3, r3, #4
 800a81c:	693a      	ldr	r2, [r7, #16]
 800a81e:	4313      	orrs	r3, r2
 800a820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	011b      	lsls	r3, r3, #4
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	685a      	ldr	r2, [r3, #4]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	621a      	str	r2, [r3, #32]
}
 800a848:	bf00      	nop
 800a84a:	371c      	adds	r7, #28
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	40012c00 	.word	0x40012c00
 800a858:	40013400 	.word	0x40013400
 800a85c:	40015000 	.word	0x40015000
 800a860:	40014000 	.word	0x40014000
 800a864:	40014400 	.word	0x40014400
 800a868:	40014800 	.word	0x40014800

0800a86c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b087      	sub	sp, #28
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a1b      	ldr	r3, [r3, #32]
 800a87a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a1b      	ldr	r3, [r3, #32]
 800a880:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	69db      	ldr	r3, [r3, #28]
 800a892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a89a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a89e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	021b      	lsls	r3, r3, #8
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a8ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	031b      	lsls	r3, r3, #12
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a2c      	ldr	r2, [pc, #176]	@ (800a97c <TIM_OC4_SetConfig+0x110>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d007      	beq.n	800a8e0 <TIM_OC4_SetConfig+0x74>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a2b      	ldr	r2, [pc, #172]	@ (800a980 <TIM_OC4_SetConfig+0x114>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d003      	beq.n	800a8e0 <TIM_OC4_SetConfig+0x74>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a2a      	ldr	r2, [pc, #168]	@ (800a984 <TIM_OC4_SetConfig+0x118>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d10d      	bne.n	800a8fc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a8e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	031b      	lsls	r3, r3, #12
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a8fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a1f      	ldr	r2, [pc, #124]	@ (800a97c <TIM_OC4_SetConfig+0x110>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d013      	beq.n	800a92c <TIM_OC4_SetConfig+0xc0>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a1e      	ldr	r2, [pc, #120]	@ (800a980 <TIM_OC4_SetConfig+0x114>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d00f      	beq.n	800a92c <TIM_OC4_SetConfig+0xc0>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a1e      	ldr	r2, [pc, #120]	@ (800a988 <TIM_OC4_SetConfig+0x11c>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d00b      	beq.n	800a92c <TIM_OC4_SetConfig+0xc0>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a1d      	ldr	r2, [pc, #116]	@ (800a98c <TIM_OC4_SetConfig+0x120>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d007      	beq.n	800a92c <TIM_OC4_SetConfig+0xc0>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a1c      	ldr	r2, [pc, #112]	@ (800a990 <TIM_OC4_SetConfig+0x124>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d003      	beq.n	800a92c <TIM_OC4_SetConfig+0xc0>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a17      	ldr	r2, [pc, #92]	@ (800a984 <TIM_OC4_SetConfig+0x118>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d113      	bne.n	800a954 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a932:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a93a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	019b      	lsls	r3, r3, #6
 800a942:	693a      	ldr	r2, [r7, #16]
 800a944:	4313      	orrs	r3, r2
 800a946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	019b      	lsls	r3, r3, #6
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	4313      	orrs	r3, r2
 800a952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	621a      	str	r2, [r3, #32]
}
 800a96e:	bf00      	nop
 800a970:	371c      	adds	r7, #28
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	40012c00 	.word	0x40012c00
 800a980:	40013400 	.word	0x40013400
 800a984:	40015000 	.word	0x40015000
 800a988:	40014000 	.word	0x40014000
 800a98c:	40014400 	.word	0x40014400
 800a990:	40014800 	.word	0x40014800

0800a994 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a994:	b480      	push	{r7}
 800a996:	b087      	sub	sp, #28
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a1b      	ldr	r3, [r3, #32]
 800a9a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a9d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	041b      	lsls	r3, r3, #16
 800a9e0:	693a      	ldr	r2, [r7, #16]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a19      	ldr	r2, [pc, #100]	@ (800aa50 <TIM_OC5_SetConfig+0xbc>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d013      	beq.n	800aa16 <TIM_OC5_SetConfig+0x82>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a18      	ldr	r2, [pc, #96]	@ (800aa54 <TIM_OC5_SetConfig+0xc0>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d00f      	beq.n	800aa16 <TIM_OC5_SetConfig+0x82>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a17      	ldr	r2, [pc, #92]	@ (800aa58 <TIM_OC5_SetConfig+0xc4>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d00b      	beq.n	800aa16 <TIM_OC5_SetConfig+0x82>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a16      	ldr	r2, [pc, #88]	@ (800aa5c <TIM_OC5_SetConfig+0xc8>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d007      	beq.n	800aa16 <TIM_OC5_SetConfig+0x82>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a15      	ldr	r2, [pc, #84]	@ (800aa60 <TIM_OC5_SetConfig+0xcc>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d003      	beq.n	800aa16 <TIM_OC5_SetConfig+0x82>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a14      	ldr	r2, [pc, #80]	@ (800aa64 <TIM_OC5_SetConfig+0xd0>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d109      	bne.n	800aa2a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	021b      	lsls	r3, r3, #8
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	685a      	ldr	r2, [r3, #4]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	621a      	str	r2, [r3, #32]
}
 800aa44:	bf00      	nop
 800aa46:	371c      	adds	r7, #28
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr
 800aa50:	40012c00 	.word	0x40012c00
 800aa54:	40013400 	.word	0x40013400
 800aa58:	40014000 	.word	0x40014000
 800aa5c:	40014400 	.word	0x40014400
 800aa60:	40014800 	.word	0x40014800
 800aa64:	40015000 	.word	0x40015000

0800aa68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b087      	sub	sp, #28
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a1b      	ldr	r3, [r3, #32]
 800aa7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	021b      	lsls	r3, r3, #8
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aaae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	051b      	lsls	r3, r3, #20
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a1a      	ldr	r2, [pc, #104]	@ (800ab28 <TIM_OC6_SetConfig+0xc0>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d013      	beq.n	800aaec <TIM_OC6_SetConfig+0x84>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a19      	ldr	r2, [pc, #100]	@ (800ab2c <TIM_OC6_SetConfig+0xc4>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d00f      	beq.n	800aaec <TIM_OC6_SetConfig+0x84>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a18      	ldr	r2, [pc, #96]	@ (800ab30 <TIM_OC6_SetConfig+0xc8>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d00b      	beq.n	800aaec <TIM_OC6_SetConfig+0x84>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a17      	ldr	r2, [pc, #92]	@ (800ab34 <TIM_OC6_SetConfig+0xcc>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d007      	beq.n	800aaec <TIM_OC6_SetConfig+0x84>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a16      	ldr	r2, [pc, #88]	@ (800ab38 <TIM_OC6_SetConfig+0xd0>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d003      	beq.n	800aaec <TIM_OC6_SetConfig+0x84>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a15      	ldr	r2, [pc, #84]	@ (800ab3c <TIM_OC6_SetConfig+0xd4>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d109      	bne.n	800ab00 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aaf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	695b      	ldr	r3, [r3, #20]
 800aaf8:	029b      	lsls	r3, r3, #10
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	697a      	ldr	r2, [r7, #20]
 800ab04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	685a      	ldr	r2, [r3, #4]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	693a      	ldr	r2, [r7, #16]
 800ab18:	621a      	str	r2, [r3, #32]
}
 800ab1a:	bf00      	nop
 800ab1c:	371c      	adds	r7, #28
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	40012c00 	.word	0x40012c00
 800ab2c:	40013400 	.word	0x40013400
 800ab30:	40014000 	.word	0x40014000
 800ab34:	40014400 	.word	0x40014400
 800ab38:	40014800 	.word	0x40014800
 800ab3c:	40015000 	.word	0x40015000

0800ab40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b087      	sub	sp, #28
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6a1b      	ldr	r3, [r3, #32]
 800ab50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	f023 0201 	bic.w	r2, r3, #1
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	011b      	lsls	r3, r3, #4
 800ab70:	693a      	ldr	r2, [r7, #16]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f023 030a 	bic.w	r3, r3, #10
 800ab7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	693a      	ldr	r2, [r7, #16]
 800ab8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	697a      	ldr	r2, [r7, #20]
 800ab90:	621a      	str	r2, [r3, #32]
}
 800ab92:	bf00      	nop
 800ab94:	371c      	adds	r7, #28
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab9e:	b480      	push	{r7}
 800aba0:	b087      	sub	sp, #28
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	60f8      	str	r0, [r7, #12]
 800aba6:	60b9      	str	r1, [r7, #8]
 800aba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6a1b      	ldr	r3, [r3, #32]
 800abb4:	f023 0210 	bic.w	r2, r3, #16
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800abc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	031b      	lsls	r3, r3, #12
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800abda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	011b      	lsls	r3, r3, #4
 800abe0:	697a      	ldr	r2, [r7, #20]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	693a      	ldr	r2, [r7, #16]
 800abea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	621a      	str	r2, [r3, #32]
}
 800abf2:	bf00      	nop
 800abf4:	371c      	adds	r7, #28
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800abfe:	b480      	push	{r7}
 800ac00:	b085      	sub	sp, #20
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
 800ac06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ac14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac1a:	683a      	ldr	r2, [r7, #0]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	f043 0307 	orr.w	r3, r3, #7
 800ac24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	609a      	str	r2, [r3, #8]
}
 800ac2c:	bf00      	nop
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
 800ac44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	021a      	lsls	r2, r3, #8
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	431a      	orrs	r2, r3
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	697a      	ldr	r2, [r7, #20]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	609a      	str	r2, [r3, #8]
}
 800ac6c:	bf00      	nop
 800ac6e:	371c      	adds	r7, #28
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b087      	sub	sp, #28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	f003 031f 	and.w	r3, r3, #31
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6a1a      	ldr	r2, [r3, #32]
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	43db      	mvns	r3, r3
 800ac9a:	401a      	ands	r2, r3
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6a1a      	ldr	r2, [r3, #32]
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	f003 031f 	and.w	r3, r3, #31
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	fa01 f303 	lsl.w	r3, r1, r3
 800acb0:	431a      	orrs	r2, r3
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	621a      	str	r2, [r3, #32]
}
 800acb6:	bf00      	nop
 800acb8:	371c      	adds	r7, #28
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr
	...

0800acc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d101      	bne.n	800acdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800acd8:	2302      	movs	r3, #2
 800acda:	e074      	b.n	800adc6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2202      	movs	r2, #2
 800ace8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a34      	ldr	r2, [pc, #208]	@ (800add4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d009      	beq.n	800ad1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a33      	ldr	r2, [pc, #204]	@ (800add8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d004      	beq.n	800ad1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a31      	ldr	r2, [pc, #196]	@ (800addc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d108      	bne.n	800ad2c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ad20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ad32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a21      	ldr	r2, [pc, #132]	@ (800add4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d022      	beq.n	800ad9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad5c:	d01d      	beq.n	800ad9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a1f      	ldr	r2, [pc, #124]	@ (800ade0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d018      	beq.n	800ad9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a1d      	ldr	r2, [pc, #116]	@ (800ade4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d013      	beq.n	800ad9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a1c      	ldr	r2, [pc, #112]	@ (800ade8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d00e      	beq.n	800ad9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a15      	ldr	r2, [pc, #84]	@ (800add8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d009      	beq.n	800ad9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a18      	ldr	r2, [pc, #96]	@ (800adec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d004      	beq.n	800ad9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a11      	ldr	r2, [pc, #68]	@ (800addc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d10c      	bne.n	800adb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ada0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	68ba      	ldr	r2, [r7, #8]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3714      	adds	r7, #20
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	40012c00 	.word	0x40012c00
 800add8:	40013400 	.word	0x40013400
 800addc:	40015000 	.word	0x40015000
 800ade0:	40000400 	.word	0x40000400
 800ade4:	40000800 	.word	0x40000800
 800ade8:	40000c00 	.word	0x40000c00
 800adec:	40014000 	.word	0x40014000

0800adf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800adfa:	2300      	movs	r3, #0
 800adfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d101      	bne.n	800ae0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ae08:	2302      	movs	r3, #2
 800ae0a:	e078      	b.n	800aefe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	695b      	ldr	r3, [r3, #20]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae72:	4313      	orrs	r3, r2
 800ae74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	041b      	lsls	r3, r3, #16
 800ae82:	4313      	orrs	r3, r2
 800ae84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	69db      	ldr	r3, [r3, #28]
 800ae90:	4313      	orrs	r3, r2
 800ae92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a1c      	ldr	r2, [pc, #112]	@ (800af0c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d009      	beq.n	800aeb2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a1b      	ldr	r2, [pc, #108]	@ (800af10 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d004      	beq.n	800aeb2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a19      	ldr	r2, [pc, #100]	@ (800af14 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d11c      	bne.n	800aeec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aebc:	051b      	lsls	r3, r3, #20
 800aebe:	4313      	orrs	r3, r2
 800aec0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	6a1b      	ldr	r3, [r3, #32]
 800aecc:	4313      	orrs	r3, r2
 800aece:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeda:	4313      	orrs	r3, r2
 800aedc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee8:	4313      	orrs	r3, r2
 800aeea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	40012c00 	.word	0x40012c00
 800af10:	40013400 	.word	0x40013400
 800af14:	40015000 	.word	0x40015000

0800af18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800af84:	bf00      	nop
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800af98:	bf00      	nop
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d101      	bne.n	800afb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e042      	b.n	800b03c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d106      	bne.n	800afce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7f8 feb9 	bl	8003d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2224      	movs	r2, #36	@ 0x24
 800afd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f022 0201 	bic.w	r2, r2, #1
 800afe4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afea:	2b00      	cmp	r3, #0
 800afec:	d002      	beq.n	800aff4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 fb24 	bl	800b63c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 f825 	bl	800b044 <UART_SetConfig>
 800affa:	4603      	mov	r3, r0
 800affc:	2b01      	cmp	r3, #1
 800affe:	d101      	bne.n	800b004 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e01b      	b.n	800b03c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b012:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	689a      	ldr	r2, [r3, #8]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b022:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f042 0201 	orr.w	r2, r2, #1
 800b032:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fba3 	bl	800b780 <UART_CheckIdleState>
 800b03a:	4603      	mov	r3, r0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b048:	b08c      	sub	sp, #48	@ 0x30
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b04e:	2300      	movs	r3, #0
 800b050:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	689a      	ldr	r2, [r3, #8]
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	431a      	orrs	r2, r3
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	695b      	ldr	r3, [r3, #20]
 800b062:	431a      	orrs	r2, r3
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	69db      	ldr	r3, [r3, #28]
 800b068:	4313      	orrs	r3, r2
 800b06a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	4baa      	ldr	r3, [pc, #680]	@ (800b31c <UART_SetConfig+0x2d8>)
 800b074:	4013      	ands	r3, r2
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	6812      	ldr	r2, [r2, #0]
 800b07a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b07c:	430b      	orrs	r3, r1
 800b07e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	68da      	ldr	r2, [r3, #12]
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	430a      	orrs	r2, r1
 800b094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a9f      	ldr	r2, [pc, #636]	@ (800b320 <UART_SetConfig+0x2dc>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d004      	beq.n	800b0b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	6a1b      	ldr	r3, [r3, #32]
 800b0aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b0ba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b0be:	697a      	ldr	r2, [r7, #20]
 800b0c0:	6812      	ldr	r2, [r2, #0]
 800b0c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0c4:	430b      	orrs	r3, r1
 800b0c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ce:	f023 010f 	bic.w	r1, r3, #15
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	430a      	orrs	r2, r1
 800b0dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a90      	ldr	r2, [pc, #576]	@ (800b324 <UART_SetConfig+0x2e0>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d125      	bne.n	800b134 <UART_SetConfig+0xf0>
 800b0e8:	4b8f      	ldr	r3, [pc, #572]	@ (800b328 <UART_SetConfig+0x2e4>)
 800b0ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0ee:	f003 0303 	and.w	r3, r3, #3
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	d81a      	bhi.n	800b12c <UART_SetConfig+0xe8>
 800b0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0fc <UART_SetConfig+0xb8>)
 800b0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fc:	0800b10d 	.word	0x0800b10d
 800b100:	0800b11d 	.word	0x0800b11d
 800b104:	0800b115 	.word	0x0800b115
 800b108:	0800b125 	.word	0x0800b125
 800b10c:	2301      	movs	r3, #1
 800b10e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b112:	e116      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b114:	2302      	movs	r3, #2
 800b116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b11a:	e112      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b11c:	2304      	movs	r3, #4
 800b11e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b122:	e10e      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b124:	2308      	movs	r3, #8
 800b126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b12a:	e10a      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b12c:	2310      	movs	r3, #16
 800b12e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b132:	e106      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a7c      	ldr	r2, [pc, #496]	@ (800b32c <UART_SetConfig+0x2e8>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d138      	bne.n	800b1b0 <UART_SetConfig+0x16c>
 800b13e:	4b7a      	ldr	r3, [pc, #488]	@ (800b328 <UART_SetConfig+0x2e4>)
 800b140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b144:	f003 030c 	and.w	r3, r3, #12
 800b148:	2b0c      	cmp	r3, #12
 800b14a:	d82d      	bhi.n	800b1a8 <UART_SetConfig+0x164>
 800b14c:	a201      	add	r2, pc, #4	@ (adr r2, 800b154 <UART_SetConfig+0x110>)
 800b14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b152:	bf00      	nop
 800b154:	0800b189 	.word	0x0800b189
 800b158:	0800b1a9 	.word	0x0800b1a9
 800b15c:	0800b1a9 	.word	0x0800b1a9
 800b160:	0800b1a9 	.word	0x0800b1a9
 800b164:	0800b199 	.word	0x0800b199
 800b168:	0800b1a9 	.word	0x0800b1a9
 800b16c:	0800b1a9 	.word	0x0800b1a9
 800b170:	0800b1a9 	.word	0x0800b1a9
 800b174:	0800b191 	.word	0x0800b191
 800b178:	0800b1a9 	.word	0x0800b1a9
 800b17c:	0800b1a9 	.word	0x0800b1a9
 800b180:	0800b1a9 	.word	0x0800b1a9
 800b184:	0800b1a1 	.word	0x0800b1a1
 800b188:	2300      	movs	r3, #0
 800b18a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b18e:	e0d8      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b190:	2302      	movs	r3, #2
 800b192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b196:	e0d4      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b198:	2304      	movs	r3, #4
 800b19a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b19e:	e0d0      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b1a0:	2308      	movs	r3, #8
 800b1a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1a6:	e0cc      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b1a8:	2310      	movs	r3, #16
 800b1aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1ae:	e0c8      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a5e      	ldr	r2, [pc, #376]	@ (800b330 <UART_SetConfig+0x2ec>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d125      	bne.n	800b206 <UART_SetConfig+0x1c2>
 800b1ba:	4b5b      	ldr	r3, [pc, #364]	@ (800b328 <UART_SetConfig+0x2e4>)
 800b1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b1c4:	2b30      	cmp	r3, #48	@ 0x30
 800b1c6:	d016      	beq.n	800b1f6 <UART_SetConfig+0x1b2>
 800b1c8:	2b30      	cmp	r3, #48	@ 0x30
 800b1ca:	d818      	bhi.n	800b1fe <UART_SetConfig+0x1ba>
 800b1cc:	2b20      	cmp	r3, #32
 800b1ce:	d00a      	beq.n	800b1e6 <UART_SetConfig+0x1a2>
 800b1d0:	2b20      	cmp	r3, #32
 800b1d2:	d814      	bhi.n	800b1fe <UART_SetConfig+0x1ba>
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d002      	beq.n	800b1de <UART_SetConfig+0x19a>
 800b1d8:	2b10      	cmp	r3, #16
 800b1da:	d008      	beq.n	800b1ee <UART_SetConfig+0x1aa>
 800b1dc:	e00f      	b.n	800b1fe <UART_SetConfig+0x1ba>
 800b1de:	2300      	movs	r3, #0
 800b1e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1e4:	e0ad      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1ec:	e0a9      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b1ee:	2304      	movs	r3, #4
 800b1f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1f4:	e0a5      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b1f6:	2308      	movs	r3, #8
 800b1f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1fc:	e0a1      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b1fe:	2310      	movs	r3, #16
 800b200:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b204:	e09d      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a4a      	ldr	r2, [pc, #296]	@ (800b334 <UART_SetConfig+0x2f0>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d125      	bne.n	800b25c <UART_SetConfig+0x218>
 800b210:	4b45      	ldr	r3, [pc, #276]	@ (800b328 <UART_SetConfig+0x2e4>)
 800b212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b216:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b21a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b21c:	d016      	beq.n	800b24c <UART_SetConfig+0x208>
 800b21e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b220:	d818      	bhi.n	800b254 <UART_SetConfig+0x210>
 800b222:	2b80      	cmp	r3, #128	@ 0x80
 800b224:	d00a      	beq.n	800b23c <UART_SetConfig+0x1f8>
 800b226:	2b80      	cmp	r3, #128	@ 0x80
 800b228:	d814      	bhi.n	800b254 <UART_SetConfig+0x210>
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d002      	beq.n	800b234 <UART_SetConfig+0x1f0>
 800b22e:	2b40      	cmp	r3, #64	@ 0x40
 800b230:	d008      	beq.n	800b244 <UART_SetConfig+0x200>
 800b232:	e00f      	b.n	800b254 <UART_SetConfig+0x210>
 800b234:	2300      	movs	r3, #0
 800b236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b23a:	e082      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b23c:	2302      	movs	r3, #2
 800b23e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b242:	e07e      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b244:	2304      	movs	r3, #4
 800b246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b24a:	e07a      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b24c:	2308      	movs	r3, #8
 800b24e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b252:	e076      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b254:	2310      	movs	r3, #16
 800b256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b25a:	e072      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a35      	ldr	r2, [pc, #212]	@ (800b338 <UART_SetConfig+0x2f4>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d12a      	bne.n	800b2bc <UART_SetConfig+0x278>
 800b266:	4b30      	ldr	r3, [pc, #192]	@ (800b328 <UART_SetConfig+0x2e4>)
 800b268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b26c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b270:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b274:	d01a      	beq.n	800b2ac <UART_SetConfig+0x268>
 800b276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b27a:	d81b      	bhi.n	800b2b4 <UART_SetConfig+0x270>
 800b27c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b280:	d00c      	beq.n	800b29c <UART_SetConfig+0x258>
 800b282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b286:	d815      	bhi.n	800b2b4 <UART_SetConfig+0x270>
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d003      	beq.n	800b294 <UART_SetConfig+0x250>
 800b28c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b290:	d008      	beq.n	800b2a4 <UART_SetConfig+0x260>
 800b292:	e00f      	b.n	800b2b4 <UART_SetConfig+0x270>
 800b294:	2300      	movs	r3, #0
 800b296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b29a:	e052      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b29c:	2302      	movs	r3, #2
 800b29e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2a2:	e04e      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b2a4:	2304      	movs	r3, #4
 800b2a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2aa:	e04a      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b2ac:	2308      	movs	r3, #8
 800b2ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2b2:	e046      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b2b4:	2310      	movs	r3, #16
 800b2b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2ba:	e042      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a17      	ldr	r2, [pc, #92]	@ (800b320 <UART_SetConfig+0x2dc>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d13a      	bne.n	800b33c <UART_SetConfig+0x2f8>
 800b2c6:	4b18      	ldr	r3, [pc, #96]	@ (800b328 <UART_SetConfig+0x2e4>)
 800b2c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b2d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b2d4:	d01a      	beq.n	800b30c <UART_SetConfig+0x2c8>
 800b2d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b2da:	d81b      	bhi.n	800b314 <UART_SetConfig+0x2d0>
 800b2dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2e0:	d00c      	beq.n	800b2fc <UART_SetConfig+0x2b8>
 800b2e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2e6:	d815      	bhi.n	800b314 <UART_SetConfig+0x2d0>
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d003      	beq.n	800b2f4 <UART_SetConfig+0x2b0>
 800b2ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2f0:	d008      	beq.n	800b304 <UART_SetConfig+0x2c0>
 800b2f2:	e00f      	b.n	800b314 <UART_SetConfig+0x2d0>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2fa:	e022      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b302:	e01e      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b304:	2304      	movs	r3, #4
 800b306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b30a:	e01a      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b30c:	2308      	movs	r3, #8
 800b30e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b312:	e016      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b314:	2310      	movs	r3, #16
 800b316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b31a:	e012      	b.n	800b342 <UART_SetConfig+0x2fe>
 800b31c:	cfff69f3 	.word	0xcfff69f3
 800b320:	40008000 	.word	0x40008000
 800b324:	40013800 	.word	0x40013800
 800b328:	40021000 	.word	0x40021000
 800b32c:	40004400 	.word	0x40004400
 800b330:	40004800 	.word	0x40004800
 800b334:	40004c00 	.word	0x40004c00
 800b338:	40005000 	.word	0x40005000
 800b33c:	2310      	movs	r3, #16
 800b33e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4aae      	ldr	r2, [pc, #696]	@ (800b600 <UART_SetConfig+0x5bc>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	f040 8097 	bne.w	800b47c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b34e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b352:	2b08      	cmp	r3, #8
 800b354:	d823      	bhi.n	800b39e <UART_SetConfig+0x35a>
 800b356:	a201      	add	r2, pc, #4	@ (adr r2, 800b35c <UART_SetConfig+0x318>)
 800b358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35c:	0800b381 	.word	0x0800b381
 800b360:	0800b39f 	.word	0x0800b39f
 800b364:	0800b389 	.word	0x0800b389
 800b368:	0800b39f 	.word	0x0800b39f
 800b36c:	0800b38f 	.word	0x0800b38f
 800b370:	0800b39f 	.word	0x0800b39f
 800b374:	0800b39f 	.word	0x0800b39f
 800b378:	0800b39f 	.word	0x0800b39f
 800b37c:	0800b397 	.word	0x0800b397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b380:	f7fd fec6 	bl	8009110 <HAL_RCC_GetPCLK1Freq>
 800b384:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b386:	e010      	b.n	800b3aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b388:	4b9e      	ldr	r3, [pc, #632]	@ (800b604 <UART_SetConfig+0x5c0>)
 800b38a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b38c:	e00d      	b.n	800b3aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b38e:	f7fd fe51 	bl	8009034 <HAL_RCC_GetSysClockFreq>
 800b392:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b394:	e009      	b.n	800b3aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b39a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b39c:	e005      	b.n	800b3aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b3a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f000 8130 	beq.w	800b612 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b6:	4a94      	ldr	r2, [pc, #592]	@ (800b608 <UART_SetConfig+0x5c4>)
 800b3b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3bc:	461a      	mov	r2, r3
 800b3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	685a      	ldr	r2, [r3, #4]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	005b      	lsls	r3, r3, #1
 800b3ce:	4413      	add	r3, r2
 800b3d0:	69ba      	ldr	r2, [r7, #24]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d305      	bcc.n	800b3e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3dc:	69ba      	ldr	r2, [r7, #24]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d903      	bls.n	800b3ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b3e8:	e113      	b.n	800b612 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	60bb      	str	r3, [r7, #8]
 800b3f0:	60fa      	str	r2, [r7, #12]
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3f6:	4a84      	ldr	r2, [pc, #528]	@ (800b608 <UART_SetConfig+0x5c4>)
 800b3f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	2200      	movs	r2, #0
 800b400:	603b      	str	r3, [r7, #0]
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b408:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b40c:	f7f5 fc64 	bl	8000cd8 <__aeabi_uldivmod>
 800b410:	4602      	mov	r2, r0
 800b412:	460b      	mov	r3, r1
 800b414:	4610      	mov	r0, r2
 800b416:	4619      	mov	r1, r3
 800b418:	f04f 0200 	mov.w	r2, #0
 800b41c:	f04f 0300 	mov.w	r3, #0
 800b420:	020b      	lsls	r3, r1, #8
 800b422:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b426:	0202      	lsls	r2, r0, #8
 800b428:	6979      	ldr	r1, [r7, #20]
 800b42a:	6849      	ldr	r1, [r1, #4]
 800b42c:	0849      	lsrs	r1, r1, #1
 800b42e:	2000      	movs	r0, #0
 800b430:	460c      	mov	r4, r1
 800b432:	4605      	mov	r5, r0
 800b434:	eb12 0804 	adds.w	r8, r2, r4
 800b438:	eb43 0905 	adc.w	r9, r3, r5
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	469a      	mov	sl, r3
 800b444:	4693      	mov	fp, r2
 800b446:	4652      	mov	r2, sl
 800b448:	465b      	mov	r3, fp
 800b44a:	4640      	mov	r0, r8
 800b44c:	4649      	mov	r1, r9
 800b44e:	f7f5 fc43 	bl	8000cd8 <__aeabi_uldivmod>
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	4613      	mov	r3, r2
 800b458:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b460:	d308      	bcc.n	800b474 <UART_SetConfig+0x430>
 800b462:	6a3b      	ldr	r3, [r7, #32]
 800b464:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b468:	d204      	bcs.n	800b474 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6a3a      	ldr	r2, [r7, #32]
 800b470:	60da      	str	r2, [r3, #12]
 800b472:	e0ce      	b.n	800b612 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b47a:	e0ca      	b.n	800b612 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	69db      	ldr	r3, [r3, #28]
 800b480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b484:	d166      	bne.n	800b554 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b486:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b48a:	2b08      	cmp	r3, #8
 800b48c:	d827      	bhi.n	800b4de <UART_SetConfig+0x49a>
 800b48e:	a201      	add	r2, pc, #4	@ (adr r2, 800b494 <UART_SetConfig+0x450>)
 800b490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b494:	0800b4b9 	.word	0x0800b4b9
 800b498:	0800b4c1 	.word	0x0800b4c1
 800b49c:	0800b4c9 	.word	0x0800b4c9
 800b4a0:	0800b4df 	.word	0x0800b4df
 800b4a4:	0800b4cf 	.word	0x0800b4cf
 800b4a8:	0800b4df 	.word	0x0800b4df
 800b4ac:	0800b4df 	.word	0x0800b4df
 800b4b0:	0800b4df 	.word	0x0800b4df
 800b4b4:	0800b4d7 	.word	0x0800b4d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4b8:	f7fd fe2a 	bl	8009110 <HAL_RCC_GetPCLK1Freq>
 800b4bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4be:	e014      	b.n	800b4ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4c0:	f7fd fe3c 	bl	800913c <HAL_RCC_GetPCLK2Freq>
 800b4c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4c6:	e010      	b.n	800b4ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4c8:	4b4e      	ldr	r3, [pc, #312]	@ (800b604 <UART_SetConfig+0x5c0>)
 800b4ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b4cc:	e00d      	b.n	800b4ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4ce:	f7fd fdb1 	bl	8009034 <HAL_RCC_GetSysClockFreq>
 800b4d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4d4:	e009      	b.n	800b4ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b4dc:	e005      	b.n	800b4ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b4e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f000 8090 	beq.w	800b612 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f6:	4a44      	ldr	r2, [pc, #272]	@ (800b608 <UART_SetConfig+0x5c4>)
 800b4f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b500:	fbb3 f3f2 	udiv	r3, r3, r2
 800b504:	005a      	lsls	r2, r3, #1
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	085b      	lsrs	r3, r3, #1
 800b50c:	441a      	add	r2, r3
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	fbb2 f3f3 	udiv	r3, r2, r3
 800b516:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b518:	6a3b      	ldr	r3, [r7, #32]
 800b51a:	2b0f      	cmp	r3, #15
 800b51c:	d916      	bls.n	800b54c <UART_SetConfig+0x508>
 800b51e:	6a3b      	ldr	r3, [r7, #32]
 800b520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b524:	d212      	bcs.n	800b54c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b526:	6a3b      	ldr	r3, [r7, #32]
 800b528:	b29b      	uxth	r3, r3
 800b52a:	f023 030f 	bic.w	r3, r3, #15
 800b52e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	085b      	lsrs	r3, r3, #1
 800b534:	b29b      	uxth	r3, r3
 800b536:	f003 0307 	and.w	r3, r3, #7
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	8bfb      	ldrh	r3, [r7, #30]
 800b53e:	4313      	orrs	r3, r2
 800b540:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	8bfa      	ldrh	r2, [r7, #30]
 800b548:	60da      	str	r2, [r3, #12]
 800b54a:	e062      	b.n	800b612 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b54c:	2301      	movs	r3, #1
 800b54e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b552:	e05e      	b.n	800b612 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b554:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b558:	2b08      	cmp	r3, #8
 800b55a:	d828      	bhi.n	800b5ae <UART_SetConfig+0x56a>
 800b55c:	a201      	add	r2, pc, #4	@ (adr r2, 800b564 <UART_SetConfig+0x520>)
 800b55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b562:	bf00      	nop
 800b564:	0800b589 	.word	0x0800b589
 800b568:	0800b591 	.word	0x0800b591
 800b56c:	0800b599 	.word	0x0800b599
 800b570:	0800b5af 	.word	0x0800b5af
 800b574:	0800b59f 	.word	0x0800b59f
 800b578:	0800b5af 	.word	0x0800b5af
 800b57c:	0800b5af 	.word	0x0800b5af
 800b580:	0800b5af 	.word	0x0800b5af
 800b584:	0800b5a7 	.word	0x0800b5a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b588:	f7fd fdc2 	bl	8009110 <HAL_RCC_GetPCLK1Freq>
 800b58c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b58e:	e014      	b.n	800b5ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b590:	f7fd fdd4 	bl	800913c <HAL_RCC_GetPCLK2Freq>
 800b594:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b596:	e010      	b.n	800b5ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b598:	4b1a      	ldr	r3, [pc, #104]	@ (800b604 <UART_SetConfig+0x5c0>)
 800b59a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b59c:	e00d      	b.n	800b5ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b59e:	f7fd fd49 	bl	8009034 <HAL_RCC_GetSysClockFreq>
 800b5a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b5a4:	e009      	b.n	800b5ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b5ac:	e005      	b.n	800b5ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b5b8:	bf00      	nop
    }

    if (pclk != 0U)
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d028      	beq.n	800b612 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5c4:	4a10      	ldr	r2, [pc, #64]	@ (800b608 <UART_SetConfig+0x5c4>)
 800b5c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ce:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	085b      	lsrs	r3, r3, #1
 800b5d8:	441a      	add	r2, r3
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	2b0f      	cmp	r3, #15
 800b5e8:	d910      	bls.n	800b60c <UART_SetConfig+0x5c8>
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5f0:	d20c      	bcs.n	800b60c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	60da      	str	r2, [r3, #12]
 800b5fc:	e009      	b.n	800b612 <UART_SetConfig+0x5ce>
 800b5fe:	bf00      	nop
 800b600:	40008000 	.word	0x40008000
 800b604:	00f42400 	.word	0x00f42400
 800b608:	08016d40 	.word	0x08016d40
      }
      else
      {
        ret = HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2201      	movs	r2, #1
 800b616:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	2200      	movs	r2, #0
 800b626:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	2200      	movs	r2, #0
 800b62c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b62e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b632:	4618      	mov	r0, r3
 800b634:	3730      	adds	r7, #48	@ 0x30
 800b636:	46bd      	mov	sp, r7
 800b638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b63c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b648:	f003 0308 	and.w	r3, r3, #8
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00a      	beq.n	800b666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	430a      	orrs	r2, r1
 800b664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b66a:	f003 0301 	and.w	r3, r3, #1
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00a      	beq.n	800b688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	430a      	orrs	r2, r1
 800b686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b68c:	f003 0302 	and.w	r3, r3, #2
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00a      	beq.n	800b6aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	430a      	orrs	r2, r1
 800b6a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ae:	f003 0304 	and.w	r3, r3, #4
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00a      	beq.n	800b6cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	430a      	orrs	r2, r1
 800b6ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d0:	f003 0310 	and.w	r3, r3, #16
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00a      	beq.n	800b6ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	430a      	orrs	r2, r1
 800b6ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f2:	f003 0320 	and.w	r3, r3, #32
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00a      	beq.n	800b710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	430a      	orrs	r2, r1
 800b70e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d01a      	beq.n	800b752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	430a      	orrs	r2, r1
 800b730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b73a:	d10a      	bne.n	800b752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	430a      	orrs	r2, r1
 800b750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00a      	beq.n	800b774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	430a      	orrs	r2, r1
 800b772:	605a      	str	r2, [r3, #4]
  }
}
 800b774:	bf00      	nop
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b098      	sub	sp, #96	@ 0x60
 800b784:	af02      	add	r7, sp, #8
 800b786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b790:	f7f8 fd1e 	bl	80041d0 <HAL_GetTick>
 800b794:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 0308 	and.w	r3, r3, #8
 800b7a0:	2b08      	cmp	r3, #8
 800b7a2:	d12f      	bne.n	800b804 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f88e 	bl	800b8d4 <UART_WaitOnFlagUntilTimeout>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d022      	beq.n	800b804 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c6:	e853 3f00 	ldrex	r3, [r3]
 800b7ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	461a      	mov	r2, r3
 800b7da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7e4:	e841 2300 	strex	r3, r2, [r1]
 800b7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1e6      	bne.n	800b7be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2220      	movs	r2, #32
 800b7f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b800:	2303      	movs	r3, #3
 800b802:	e063      	b.n	800b8cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f003 0304 	and.w	r3, r3, #4
 800b80e:	2b04      	cmp	r3, #4
 800b810:	d149      	bne.n	800b8a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b812:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b81a:	2200      	movs	r2, #0
 800b81c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 f857 	bl	800b8d4 <UART_WaitOnFlagUntilTimeout>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d03c      	beq.n	800b8a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b834:	e853 3f00 	ldrex	r3, [r3]
 800b838:	623b      	str	r3, [r7, #32]
   return(result);
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b840:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	461a      	mov	r2, r3
 800b848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b84a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b84c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b852:	e841 2300 	strex	r3, r2, [r1]
 800b856:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1e6      	bne.n	800b82c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	3308      	adds	r3, #8
 800b864:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	e853 3f00 	ldrex	r3, [r3]
 800b86c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f023 0301 	bic.w	r3, r3, #1
 800b874:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3308      	adds	r3, #8
 800b87c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b87e:	61fa      	str	r2, [r7, #28]
 800b880:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b882:	69b9      	ldr	r1, [r7, #24]
 800b884:	69fa      	ldr	r2, [r7, #28]
 800b886:	e841 2300 	strex	r3, r2, [r1]
 800b88a:	617b      	str	r3, [r7, #20]
   return(result);
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1e5      	bne.n	800b85e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2220      	movs	r2, #32
 800b896:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e012      	b.n	800b8cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2220      	movs	r2, #32
 800b8aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2220      	movs	r2, #32
 800b8b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3758      	adds	r7, #88	@ 0x58
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	603b      	str	r3, [r7, #0]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8e4:	e04f      	b.n	800b986 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ec:	d04b      	beq.n	800b986 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8ee:	f7f8 fc6f 	bl	80041d0 <HAL_GetTick>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	69ba      	ldr	r2, [r7, #24]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d302      	bcc.n	800b904 <UART_WaitOnFlagUntilTimeout+0x30>
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d101      	bne.n	800b908 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b904:	2303      	movs	r3, #3
 800b906:	e04e      	b.n	800b9a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f003 0304 	and.w	r3, r3, #4
 800b912:	2b00      	cmp	r3, #0
 800b914:	d037      	beq.n	800b986 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2b80      	cmp	r3, #128	@ 0x80
 800b91a:	d034      	beq.n	800b986 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	2b40      	cmp	r3, #64	@ 0x40
 800b920:	d031      	beq.n	800b986 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	69db      	ldr	r3, [r3, #28]
 800b928:	f003 0308 	and.w	r3, r3, #8
 800b92c:	2b08      	cmp	r3, #8
 800b92e:	d110      	bne.n	800b952 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2208      	movs	r2, #8
 800b936:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f000 f838 	bl	800b9ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2208      	movs	r2, #8
 800b942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e029      	b.n	800b9a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	69db      	ldr	r3, [r3, #28]
 800b958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b95c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b960:	d111      	bne.n	800b986 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b96a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f000 f81e 	bl	800b9ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2220      	movs	r2, #32
 800b976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b982:	2303      	movs	r3, #3
 800b984:	e00f      	b.n	800b9a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	69da      	ldr	r2, [r3, #28]
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	4013      	ands	r3, r2
 800b990:	68ba      	ldr	r2, [r7, #8]
 800b992:	429a      	cmp	r2, r3
 800b994:	bf0c      	ite	eq
 800b996:	2301      	moveq	r3, #1
 800b998:	2300      	movne	r3, #0
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	461a      	mov	r2, r3
 800b99e:	79fb      	ldrb	r3, [r7, #7]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d0a0      	beq.n	800b8e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	b095      	sub	sp, #84	@ 0x54
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9be:	e853 3f00 	ldrex	r3, [r3]
 800b9c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9dc:	e841 2300 	strex	r3, r2, [r1]
 800b9e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d1e6      	bne.n	800b9b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	3308      	adds	r3, #8
 800b9ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f0:	6a3b      	ldr	r3, [r7, #32]
 800b9f2:	e853 3f00 	ldrex	r3, [r3]
 800b9f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9fe:	f023 0301 	bic.w	r3, r3, #1
 800ba02:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3308      	adds	r3, #8
 800ba0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba14:	e841 2300 	strex	r3, r2, [r1]
 800ba18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1e3      	bne.n	800b9e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d118      	bne.n	800ba5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	e853 3f00 	ldrex	r3, [r3]
 800ba34:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	f023 0310 	bic.w	r3, r3, #16
 800ba3c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	461a      	mov	r2, r3
 800ba44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba46:	61bb      	str	r3, [r7, #24]
 800ba48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4a:	6979      	ldr	r1, [r7, #20]
 800ba4c:	69ba      	ldr	r2, [r7, #24]
 800ba4e:	e841 2300 	strex	r3, r2, [r1]
 800ba52:	613b      	str	r3, [r7, #16]
   return(result);
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1e6      	bne.n	800ba28 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2220      	movs	r2, #32
 800ba5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba6e:	bf00      	nop
 800ba70:	3754      	adds	r7, #84	@ 0x54
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba7a:	b480      	push	{r7}
 800ba7c:	b085      	sub	sp, #20
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d101      	bne.n	800ba90 <HAL_UARTEx_DisableFifoMode+0x16>
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	e027      	b.n	800bae0 <HAL_UARTEx_DisableFifoMode+0x66>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2224      	movs	r2, #36	@ 0x24
 800ba9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f022 0201 	bic.w	r2, r2, #1
 800bab6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800babe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68fa      	ldr	r2, [r7, #12]
 800bacc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2220      	movs	r2, #32
 800bad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3714      	adds	r7, #20
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d101      	bne.n	800bb04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb00:	2302      	movs	r3, #2
 800bb02:	e02d      	b.n	800bb60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2201      	movs	r2, #1
 800bb08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2224      	movs	r2, #36	@ 0x24
 800bb10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f022 0201 	bic.w	r2, r2, #1
 800bb2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	430a      	orrs	r2, r1
 800bb3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 f84f 	bl	800bbe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2220      	movs	r2, #32
 800bb52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d101      	bne.n	800bb80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb7c:	2302      	movs	r3, #2
 800bb7e:	e02d      	b.n	800bbdc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2224      	movs	r2, #36	@ 0x24
 800bb8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f022 0201 	bic.w	r2, r2, #1
 800bba6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	430a      	orrs	r2, r1
 800bbba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f811 	bl	800bbe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2220      	movs	r2, #32
 800bbce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3710      	adds	r7, #16
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d108      	bne.n	800bc06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc04:	e031      	b.n	800bc6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc06:	2308      	movs	r3, #8
 800bc08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc0a:	2308      	movs	r3, #8
 800bc0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	0e5b      	lsrs	r3, r3, #25
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	f003 0307 	and.w	r3, r3, #7
 800bc1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	0f5b      	lsrs	r3, r3, #29
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	f003 0307 	and.w	r3, r3, #7
 800bc2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc2e:	7bbb      	ldrb	r3, [r7, #14]
 800bc30:	7b3a      	ldrb	r2, [r7, #12]
 800bc32:	4911      	ldr	r1, [pc, #68]	@ (800bc78 <UARTEx_SetNbDataToProcess+0x94>)
 800bc34:	5c8a      	ldrb	r2, [r1, r2]
 800bc36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc3a:	7b3a      	ldrb	r2, [r7, #12]
 800bc3c:	490f      	ldr	r1, [pc, #60]	@ (800bc7c <UARTEx_SetNbDataToProcess+0x98>)
 800bc3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc40:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc4c:	7bfb      	ldrb	r3, [r7, #15]
 800bc4e:	7b7a      	ldrb	r2, [r7, #13]
 800bc50:	4909      	ldr	r1, [pc, #36]	@ (800bc78 <UARTEx_SetNbDataToProcess+0x94>)
 800bc52:	5c8a      	ldrb	r2, [r1, r2]
 800bc54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc58:	7b7a      	ldrb	r2, [r7, #13]
 800bc5a:	4908      	ldr	r1, [pc, #32]	@ (800bc7c <UARTEx_SetNbDataToProcess+0x98>)
 800bc5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc5e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bc6a:	bf00      	nop
 800bc6c:	3714      	adds	r7, #20
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	08016d58 	.word	0x08016d58
 800bc7c:	08016d60 	.word	0x08016d60

0800bc80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bc90:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bc94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bcae:	b480      	push	{r7}
 800bcb0:	b085      	sub	sp, #20
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bcb6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bcba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	43db      	mvns	r3, r3
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	4013      	ands	r3, r2
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3714      	adds	r7, #20
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	1d3b      	adds	r3, r7, #4
 800bcee:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b09d      	sub	sp, #116	@ 0x74
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4413      	add	r3, r2
 800bd3a:	881b      	ldrh	r3, [r3, #0]
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800bd42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd46:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	78db      	ldrb	r3, [r3, #3]
 800bd4e:	2b03      	cmp	r3, #3
 800bd50:	d81f      	bhi.n	800bd92 <USB_ActivateEndpoint+0x72>
 800bd52:	a201      	add	r2, pc, #4	@ (adr r2, 800bd58 <USB_ActivateEndpoint+0x38>)
 800bd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd58:	0800bd69 	.word	0x0800bd69
 800bd5c:	0800bd85 	.word	0x0800bd85
 800bd60:	0800bd9b 	.word	0x0800bd9b
 800bd64:	0800bd77 	.word	0x0800bd77
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bd68:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bd6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bd70:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bd74:	e012      	b.n	800bd9c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bd76:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bd7a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bd7e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bd82:	e00b      	b.n	800bd9c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bd84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bd88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bd8c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bd90:	e004      	b.n	800bd9c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800bd98:	e000      	b.n	800bd9c <USB_ActivateEndpoint+0x7c>
      break;
 800bd9a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	441a      	add	r2, r3
 800bda6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bdaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	4413      	add	r3, r2
 800bdc8:	881b      	ldrh	r3, [r3, #0]
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	b21b      	sxth	r3, r3
 800bdce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdd6:	b21a      	sxth	r2, r3
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	b21b      	sxth	r3, r3
 800bdde:	4313      	orrs	r3, r2
 800bde0:	b21b      	sxth	r3, r3
 800bde2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	441a      	add	r2, r3
 800bdf0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800bdf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be04:	b29b      	uxth	r3, r3
 800be06:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	7b1b      	ldrb	r3, [r3, #12]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f040 8178 	bne.w	800c102 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	785b      	ldrb	r3, [r3, #1]
 800be16:	2b00      	cmp	r3, #0
 800be18:	f000 8084 	beq.w	800bf24 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	61bb      	str	r3, [r7, #24]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be26:	b29b      	uxth	r3, r3
 800be28:	461a      	mov	r2, r3
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	4413      	add	r3, r2
 800be2e:	61bb      	str	r3, [r7, #24]
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	00da      	lsls	r2, r3, #3
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	4413      	add	r3, r2
 800be3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800be3e:	617b      	str	r3, [r7, #20]
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	88db      	ldrh	r3, [r3, #6]
 800be44:	085b      	lsrs	r3, r3, #1
 800be46:	b29b      	uxth	r3, r3
 800be48:	005b      	lsls	r3, r3, #1
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4413      	add	r3, r2
 800be5a:	881b      	ldrh	r3, [r3, #0]
 800be5c:	827b      	strh	r3, [r7, #18]
 800be5e:	8a7b      	ldrh	r3, [r7, #18]
 800be60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be64:	2b00      	cmp	r3, #0
 800be66:	d01b      	beq.n	800bea0 <USB_ActivateEndpoint+0x180>
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	4413      	add	r3, r2
 800be72:	881b      	ldrh	r3, [r3, #0]
 800be74:	b29b      	uxth	r3, r3
 800be76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be7e:	823b      	strh	r3, [r7, #16]
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	441a      	add	r2, r3
 800be8a:	8a3b      	ldrh	r3, [r7, #16]
 800be8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	78db      	ldrb	r3, [r3, #3]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d020      	beq.n	800beea <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	4413      	add	r3, r2
 800beb2:	881b      	ldrh	r3, [r3, #0]
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800beba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bebe:	81bb      	strh	r3, [r7, #12]
 800bec0:	89bb      	ldrh	r3, [r7, #12]
 800bec2:	f083 0320 	eor.w	r3, r3, #32
 800bec6:	81bb      	strh	r3, [r7, #12]
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	441a      	add	r2, r3
 800bed2:	89bb      	ldrh	r3, [r7, #12]
 800bed4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bed8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bedc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	8013      	strh	r3, [r2, #0]
 800bee8:	e2d5      	b.n	800c496 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	4413      	add	r3, r2
 800bef4:	881b      	ldrh	r3, [r3, #0]
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800befc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf00:	81fb      	strh	r3, [r7, #14]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	441a      	add	r2, r3
 800bf0c:	89fb      	ldrh	r3, [r7, #14]
 800bf0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	8013      	strh	r3, [r2, #0]
 800bf22:	e2b8      	b.n	800c496 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	461a      	mov	r2, r3
 800bf32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf34:	4413      	add	r3, r2
 800bf36:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	00da      	lsls	r2, r3, #3
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf40:	4413      	add	r3, r2
 800bf42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bf46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	88db      	ldrh	r3, [r3, #6]
 800bf4c:	085b      	lsrs	r3, r3, #1
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	005b      	lsls	r3, r3, #1
 800bf52:	b29a      	uxth	r2, r3
 800bf54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf56:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	461a      	mov	r2, r3
 800bf66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf68:	4413      	add	r3, r2
 800bf6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	00da      	lsls	r2, r3, #3
 800bf72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf74:	4413      	add	r3, r2
 800bf76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bf7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf7e:	881b      	ldrh	r3, [r3, #0]
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf86:	b29a      	uxth	r2, r3
 800bf88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf8a:	801a      	strh	r2, [r3, #0]
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	691b      	ldr	r3, [r3, #16]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10a      	bne.n	800bfaa <USB_ActivateEndpoint+0x28a>
 800bf94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf96:	881b      	ldrh	r3, [r3, #0]
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa6:	801a      	strh	r2, [r3, #0]
 800bfa8:	e039      	b.n	800c01e <USB_ActivateEndpoint+0x2fe>
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	691b      	ldr	r3, [r3, #16]
 800bfae:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfb0:	d818      	bhi.n	800bfe4 <USB_ActivateEndpoint+0x2c4>
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	085b      	lsrs	r3, r3, #1
 800bfb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	f003 0301 	and.w	r3, r3, #1
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d002      	beq.n	800bfcc <USB_ActivateEndpoint+0x2ac>
 800bfc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bfc8:	3301      	adds	r3, #1
 800bfca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	029b      	lsls	r3, r3, #10
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe0:	801a      	strh	r2, [r3, #0]
 800bfe2:	e01c      	b.n	800c01e <USB_ActivateEndpoint+0x2fe>
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	095b      	lsrs	r3, r3, #5
 800bfea:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	f003 031f 	and.w	r3, r3, #31
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d102      	bne.n	800bffe <USB_ActivateEndpoint+0x2de>
 800bff8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bffa:	3b01      	subs	r3, #1
 800bffc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c000:	881b      	ldrh	r3, [r3, #0]
 800c002:	b29a      	uxth	r2, r3
 800c004:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c006:	b29b      	uxth	r3, r3
 800c008:	029b      	lsls	r3, r3, #10
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	4313      	orrs	r3, r2
 800c00e:	b29b      	uxth	r3, r3
 800c010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c018:	b29a      	uxth	r2, r3
 800c01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c01c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	4413      	add	r3, r2
 800c028:	881b      	ldrh	r3, [r3, #0]
 800c02a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c02c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c02e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c032:	2b00      	cmp	r3, #0
 800c034:	d01b      	beq.n	800c06e <USB_ActivateEndpoint+0x34e>
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	4413      	add	r3, r2
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	b29b      	uxth	r3, r3
 800c044:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c04c:	843b      	strh	r3, [r7, #32]
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	441a      	add	r2, r3
 800c058:	8c3b      	ldrh	r3, [r7, #32]
 800c05a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c05e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c062:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d124      	bne.n	800c0c0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	4413      	add	r3, r2
 800c080:	881b      	ldrh	r3, [r3, #0]
 800c082:	b29b      	uxth	r3, r3
 800c084:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c08c:	83bb      	strh	r3, [r7, #28]
 800c08e:	8bbb      	ldrh	r3, [r7, #28]
 800c090:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c094:	83bb      	strh	r3, [r7, #28]
 800c096:	8bbb      	ldrh	r3, [r7, #28]
 800c098:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c09c:	83bb      	strh	r3, [r7, #28]
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	441a      	add	r2, r3
 800c0a8:	8bbb      	ldrh	r3, [r7, #28]
 800c0aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	8013      	strh	r3, [r2, #0]
 800c0be:	e1ea      	b.n	800c496 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	4413      	add	r3, r2
 800c0ca:	881b      	ldrh	r3, [r3, #0]
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c0d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0d6:	83fb      	strh	r3, [r7, #30]
 800c0d8:	8bfb      	ldrh	r3, [r7, #30]
 800c0da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c0de:	83fb      	strh	r3, [r7, #30]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	441a      	add	r2, r3
 800c0ea:	8bfb      	ldrh	r3, [r7, #30]
 800c0ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	8013      	strh	r3, [r2, #0]
 800c100:	e1c9      	b.n	800c496 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	78db      	ldrb	r3, [r3, #3]
 800c106:	2b02      	cmp	r3, #2
 800c108:	d11e      	bne.n	800c148 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	881b      	ldrh	r3, [r3, #0]
 800c116:	b29b      	uxth	r3, r3
 800c118:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c11c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c120:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	441a      	add	r2, r3
 800c12e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c132:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c136:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c13a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c13e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c142:	b29b      	uxth	r3, r3
 800c144:	8013      	strh	r3, [r2, #0]
 800c146:	e01d      	b.n	800c184 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	009b      	lsls	r3, r3, #2
 800c150:	4413      	add	r3, r2
 800c152:	881b      	ldrh	r3, [r3, #0]
 800c154:	b29b      	uxth	r3, r3
 800c156:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c15a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c15e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	441a      	add	r2, r3
 800c16c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c170:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c174:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c17c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c180:	b29b      	uxth	r3, r3
 800c182:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c18e:	b29b      	uxth	r3, r3
 800c190:	461a      	mov	r2, r3
 800c192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c194:	4413      	add	r3, r2
 800c196:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	00da      	lsls	r2, r3, #3
 800c19e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1a0:	4413      	add	r3, r2
 800c1a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c1a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	891b      	ldrh	r3, [r3, #8]
 800c1ac:	085b      	lsrs	r3, r3, #1
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	005b      	lsls	r3, r3, #1
 800c1b2:	b29a      	uxth	r2, r3
 800c1b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1b6:	801a      	strh	r2, [r3, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1c8:	4413      	add	r3, r2
 800c1ca:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	00da      	lsls	r2, r3, #3
 800c1d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1d4:	4413      	add	r3, r2
 800c1d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c1da:	653b      	str	r3, [r7, #80]	@ 0x50
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	895b      	ldrh	r3, [r3, #10]
 800c1e0:	085b      	lsrs	r3, r3, #1
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	005b      	lsls	r3, r3, #1
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1ea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	785b      	ldrb	r3, [r3, #1]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f040 8093 	bne.w	800c31c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	4413      	add	r3, r2
 800c200:	881b      	ldrh	r3, [r3, #0]
 800c202:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c206:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c20a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d01b      	beq.n	800c24a <USB_ActivateEndpoint+0x52a>
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	4413      	add	r3, r2
 800c21c:	881b      	ldrh	r3, [r3, #0]
 800c21e:	b29b      	uxth	r3, r3
 800c220:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c228:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	441a      	add	r2, r3
 800c234:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c236:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c23a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c23e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c246:	b29b      	uxth	r3, r3
 800c248:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	4413      	add	r3, r2
 800c254:	881b      	ldrh	r3, [r3, #0]
 800c256:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c258:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c25a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d01b      	beq.n	800c29a <USB_ActivateEndpoint+0x57a>
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	4413      	add	r3, r2
 800c26c:	881b      	ldrh	r3, [r3, #0]
 800c26e:	b29b      	uxth	r3, r3
 800c270:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c278:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	441a      	add	r2, r3
 800c284:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c286:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c28a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c28e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c292:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c296:	b29b      	uxth	r3, r3
 800c298:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	4413      	add	r3, r2
 800c2a4:	881b      	ldrh	r3, [r3, #0]
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2b0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c2b2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c2b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c2b8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c2ba:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c2bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c2c0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	441a      	add	r2, r3
 800c2cc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c2ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	4413      	add	r3, r2
 800c2ec:	881b      	ldrh	r3, [r3, #0]
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	441a      	add	r2, r3
 800c304:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c30a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c30e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c316:	b29b      	uxth	r3, r3
 800c318:	8013      	strh	r3, [r2, #0]
 800c31a:	e0bc      	b.n	800c496 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4413      	add	r3, r2
 800c326:	881b      	ldrh	r3, [r3, #0]
 800c328:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c32c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c334:	2b00      	cmp	r3, #0
 800c336:	d01d      	beq.n	800c374 <USB_ActivateEndpoint+0x654>
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4413      	add	r3, r2
 800c342:	881b      	ldrh	r3, [r3, #0]
 800c344:	b29b      	uxth	r3, r3
 800c346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c34a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c34e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	441a      	add	r2, r3
 800c35c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c368:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c36c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c370:	b29b      	uxth	r3, r3
 800c372:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4413      	add	r3, r2
 800c37e:	881b      	ldrh	r3, [r3, #0]
 800c380:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c384:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d01d      	beq.n	800c3cc <USB_ActivateEndpoint+0x6ac>
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	4413      	add	r3, r2
 800c39a:	881b      	ldrh	r3, [r3, #0]
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3a6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	441a      	add	r2, r3
 800c3b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c3b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	78db      	ldrb	r3, [r3, #3]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d024      	beq.n	800c41e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	4413      	add	r3, r2
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3ea:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c3ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c3f2:	f083 0320 	eor.w	r3, r3, #32
 800c3f6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	441a      	add	r2, r3
 800c404:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c408:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c40c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c410:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c418:	b29b      	uxth	r3, r3
 800c41a:	8013      	strh	r3, [r2, #0]
 800c41c:	e01d      	b.n	800c45a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	4413      	add	r3, r2
 800c428:	881b      	ldrh	r3, [r3, #0]
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c434:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	441a      	add	r2, r3
 800c442:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c446:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c44a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c44e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c456:	b29b      	uxth	r3, r3
 800c458:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	4413      	add	r3, r2
 800c464:	881b      	ldrh	r3, [r3, #0]
 800c466:	b29b      	uxth	r3, r3
 800c468:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c46c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c470:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	441a      	add	r2, r3
 800c47e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c48a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c48e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c492:	b29b      	uxth	r3, r3
 800c494:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c496:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3774      	adds	r7, #116	@ 0x74
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr
 800c4a6:	bf00      	nop

0800c4a8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b08d      	sub	sp, #52	@ 0x34
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	7b1b      	ldrb	r3, [r3, #12]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f040 808e 	bne.w	800c5d8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	785b      	ldrb	r3, [r3, #1]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d044      	beq.n	800c54e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	4413      	add	r3, r2
 800c4ce:	881b      	ldrh	r3, [r3, #0]
 800c4d0:	81bb      	strh	r3, [r7, #12]
 800c4d2:	89bb      	ldrh	r3, [r7, #12]
 800c4d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d01b      	beq.n	800c514 <USB_DeactivateEndpoint+0x6c>
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	4413      	add	r3, r2
 800c4e6:	881b      	ldrh	r3, [r3, #0]
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4f2:	817b      	strh	r3, [r7, #10]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	441a      	add	r2, r3
 800c4fe:	897b      	ldrh	r3, [r7, #10]
 800c500:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c504:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c50c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c510:	b29b      	uxth	r3, r3
 800c512:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	4413      	add	r3, r2
 800c51e:	881b      	ldrh	r3, [r3, #0]
 800c520:	b29b      	uxth	r3, r3
 800c522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c526:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c52a:	813b      	strh	r3, [r7, #8]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	441a      	add	r2, r3
 800c536:	893b      	ldrh	r3, [r7, #8]
 800c538:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c53c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c540:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c548:	b29b      	uxth	r3, r3
 800c54a:	8013      	strh	r3, [r2, #0]
 800c54c:	e192      	b.n	800c874 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	4413      	add	r3, r2
 800c558:	881b      	ldrh	r3, [r3, #0]
 800c55a:	827b      	strh	r3, [r7, #18]
 800c55c:	8a7b      	ldrh	r3, [r7, #18]
 800c55e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c562:	2b00      	cmp	r3, #0
 800c564:	d01b      	beq.n	800c59e <USB_DeactivateEndpoint+0xf6>
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	4413      	add	r3, r2
 800c570:	881b      	ldrh	r3, [r3, #0]
 800c572:	b29b      	uxth	r3, r3
 800c574:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c57c:	823b      	strh	r3, [r7, #16]
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	441a      	add	r2, r3
 800c588:	8a3b      	ldrh	r3, [r7, #16]
 800c58a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c58e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c592:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	4413      	add	r3, r2
 800c5a8:	881b      	ldrh	r3, [r3, #0]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c5b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5b4:	81fb      	strh	r3, [r7, #14]
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	441a      	add	r2, r3
 800c5c0:	89fb      	ldrh	r3, [r7, #14]
 800c5c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	8013      	strh	r3, [r2, #0]
 800c5d6:	e14d      	b.n	800c874 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	785b      	ldrb	r3, [r3, #1]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f040 80a5 	bne.w	800c72c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	4413      	add	r3, r2
 800c5ec:	881b      	ldrh	r3, [r3, #0]
 800c5ee:	843b      	strh	r3, [r7, #32]
 800c5f0:	8c3b      	ldrh	r3, [r7, #32]
 800c5f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d01b      	beq.n	800c632 <USB_DeactivateEndpoint+0x18a>
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	4413      	add	r3, r2
 800c604:	881b      	ldrh	r3, [r3, #0]
 800c606:	b29b      	uxth	r3, r3
 800c608:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c60c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c610:	83fb      	strh	r3, [r7, #30]
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	441a      	add	r2, r3
 800c61c:	8bfb      	ldrh	r3, [r7, #30]
 800c61e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c622:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c626:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c62a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c62e:	b29b      	uxth	r3, r3
 800c630:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	4413      	add	r3, r2
 800c63c:	881b      	ldrh	r3, [r3, #0]
 800c63e:	83bb      	strh	r3, [r7, #28]
 800c640:	8bbb      	ldrh	r3, [r7, #28]
 800c642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c646:	2b00      	cmp	r3, #0
 800c648:	d01b      	beq.n	800c682 <USB_DeactivateEndpoint+0x1da>
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	4413      	add	r3, r2
 800c654:	881b      	ldrh	r3, [r3, #0]
 800c656:	b29b      	uxth	r3, r3
 800c658:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c65c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c660:	837b      	strh	r3, [r7, #26]
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	441a      	add	r2, r3
 800c66c:	8b7b      	ldrh	r3, [r7, #26]
 800c66e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c672:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c67a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c67e:	b29b      	uxth	r3, r3
 800c680:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	4413      	add	r3, r2
 800c68c:	881b      	ldrh	r3, [r3, #0]
 800c68e:	b29b      	uxth	r3, r3
 800c690:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c698:	833b      	strh	r3, [r7, #24]
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	441a      	add	r2, r3
 800c6a4:	8b3b      	ldrh	r3, [r7, #24]
 800c6a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	4413      	add	r3, r2
 800c6c4:	881b      	ldrh	r3, [r3, #0]
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c6cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6d0:	82fb      	strh	r3, [r7, #22]
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	441a      	add	r2, r3
 800c6dc:	8afb      	ldrh	r3, [r7, #22]
 800c6de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	4413      	add	r3, r2
 800c6fc:	881b      	ldrh	r3, [r3, #0]
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c708:	82bb      	strh	r3, [r7, #20]
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	441a      	add	r2, r3
 800c714:	8abb      	ldrh	r3, [r7, #20]
 800c716:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c71a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c71e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c726:	b29b      	uxth	r3, r3
 800c728:	8013      	strh	r3, [r2, #0]
 800c72a:	e0a3      	b.n	800c874 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	4413      	add	r3, r2
 800c736:	881b      	ldrh	r3, [r3, #0]
 800c738:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c73a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c73c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c740:	2b00      	cmp	r3, #0
 800c742:	d01b      	beq.n	800c77c <USB_DeactivateEndpoint+0x2d4>
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	4413      	add	r3, r2
 800c74e:	881b      	ldrh	r3, [r3, #0]
 800c750:	b29b      	uxth	r3, r3
 800c752:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c75a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	441a      	add	r2, r3
 800c766:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c768:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c76c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c770:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c778:	b29b      	uxth	r3, r3
 800c77a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	4413      	add	r3, r2
 800c786:	881b      	ldrh	r3, [r3, #0]
 800c788:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c78a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c78c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c790:	2b00      	cmp	r3, #0
 800c792:	d01b      	beq.n	800c7cc <USB_DeactivateEndpoint+0x324>
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	4413      	add	r3, r2
 800c79e:	881b      	ldrh	r3, [r3, #0]
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	441a      	add	r2, r3
 800c7b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c7b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	4413      	add	r3, r2
 800c7d6:	881b      	ldrh	r3, [r3, #0]
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	441a      	add	r2, r3
 800c7ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c7f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c7fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c800:	b29b      	uxth	r3, r3
 800c802:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	4413      	add	r3, r2
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	b29b      	uxth	r3, r3
 800c812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c816:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c81a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	441a      	add	r2, r3
 800c826:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c828:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c82c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c830:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c838:	b29b      	uxth	r3, r3
 800c83a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	4413      	add	r3, r2
 800c846:	881b      	ldrh	r3, [r3, #0]
 800c848:	b29b      	uxth	r3, r3
 800c84a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c84e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c852:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	441a      	add	r2, r3
 800c85e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c860:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c864:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c868:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c86c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c870:	b29b      	uxth	r3, r3
 800c872:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3734      	adds	r7, #52	@ 0x34
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c882:	b580      	push	{r7, lr}
 800c884:	b0c2      	sub	sp, #264	@ 0x108
 800c886:	af00      	add	r7, sp, #0
 800c888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c88c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c890:	6018      	str	r0, [r3, #0]
 800c892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c89a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c89c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	785b      	ldrb	r3, [r3, #1]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	f040 86b7 	bne.w	800d61c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c8ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	699a      	ldr	r2, [r3, #24]
 800c8ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	691b      	ldr	r3, [r3, #16]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d908      	bls.n	800c8dc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800c8ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c8da:	e007      	b.n	800c8ec <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c8dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	699b      	ldr	r3, [r3, #24]
 800c8e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c8ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	7b1b      	ldrb	r3, [r3, #12]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d13a      	bne.n	800c972 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c8fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6959      	ldr	r1, [r3, #20]
 800c908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c90c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	88da      	ldrh	r2, [r3, #6]
 800c914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c918:	b29b      	uxth	r3, r3
 800c91a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c91e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c922:	6800      	ldr	r0, [r0, #0]
 800c924:	f001 fc99 	bl	800e25a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c92c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	613b      	str	r3, [r7, #16]
 800c934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c938:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c942:	b29b      	uxth	r3, r3
 800c944:	461a      	mov	r2, r3
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	4413      	add	r3, r2
 800c94a:	613b      	str	r3, [r7, #16]
 800c94c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	00da      	lsls	r2, r3, #3
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	4413      	add	r3, r2
 800c95e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c962:	60fb      	str	r3, [r7, #12]
 800c964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c968:	b29a      	uxth	r2, r3
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	801a      	strh	r2, [r3, #0]
 800c96e:	f000 be1f 	b.w	800d5b0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	78db      	ldrb	r3, [r3, #3]
 800c97e:	2b02      	cmp	r3, #2
 800c980:	f040 8462 	bne.w	800d248 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	6a1a      	ldr	r2, [r3, #32]
 800c990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	691b      	ldr	r3, [r3, #16]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	f240 83df 	bls.w	800d160 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c9a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	4413      	add	r3, r2
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9c8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c9cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	441a      	add	r2, r3
 800c9e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c9ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9f2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c9f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c9fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	6a1a      	ldr	r2, [r3, #32]
 800ca0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca0e:	1ad2      	subs	r2, r2, r3
 800ca10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ca1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	4413      	add	r3, r2
 800ca36:	881b      	ldrh	r3, [r3, #0]
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 81c7 	beq.w	800cdd2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ca44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	785b      	ldrb	r3, [r3, #1]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d177      	bne.n	800cb50 <USB_EPStartXfer+0x2ce>
 800ca60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca80:	4413      	add	r3, r2
 800ca82:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	00da      	lsls	r2, r3, #3
 800ca92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca94:	4413      	add	r3, r2
 800ca96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca9e:	881b      	ldrh	r3, [r3, #0]
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800caa6:	b29a      	uxth	r2, r3
 800caa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caaa:	801a      	strh	r2, [r3, #0]
 800caac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d10a      	bne.n	800caca <USB_EPStartXfer+0x248>
 800cab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab6:	881b      	ldrh	r3, [r3, #0]
 800cab8:	b29b      	uxth	r3, r3
 800caba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cabe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cac2:	b29a      	uxth	r2, r3
 800cac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac6:	801a      	strh	r2, [r3, #0]
 800cac8:	e067      	b.n	800cb9a <USB_EPStartXfer+0x318>
 800caca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cace:	2b3e      	cmp	r3, #62	@ 0x3e
 800cad0:	d81c      	bhi.n	800cb0c <USB_EPStartXfer+0x28a>
 800cad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cad6:	085b      	lsrs	r3, r3, #1
 800cad8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cadc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cae0:	f003 0301 	and.w	r3, r3, #1
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d004      	beq.n	800caf2 <USB_EPStartXfer+0x270>
 800cae8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800caec:	3301      	adds	r3, #1
 800caee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800caf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf4:	881b      	ldrh	r3, [r3, #0]
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	029b      	lsls	r3, r3, #10
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	4313      	orrs	r3, r2
 800cb04:	b29a      	uxth	r2, r3
 800cb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb08:	801a      	strh	r2, [r3, #0]
 800cb0a:	e046      	b.n	800cb9a <USB_EPStartXfer+0x318>
 800cb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb10:	095b      	lsrs	r3, r3, #5
 800cb12:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cb16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb1a:	f003 031f 	and.w	r3, r3, #31
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d104      	bne.n	800cb2c <USB_EPStartXfer+0x2aa>
 800cb22:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cb26:	3b01      	subs	r3, #1
 800cb28:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2e:	881b      	ldrh	r3, [r3, #0]
 800cb30:	b29a      	uxth	r2, r3
 800cb32:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	029b      	lsls	r3, r3, #10
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4c:	801a      	strh	r2, [r3, #0]
 800cb4e:	e024      	b.n	800cb9a <USB_EPStartXfer+0x318>
 800cb50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	785b      	ldrb	r3, [r3, #1]
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d11c      	bne.n	800cb9a <USB_EPStartXfer+0x318>
 800cb60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	461a      	mov	r2, r3
 800cb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb74:	4413      	add	r3, r2
 800cb76:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	00da      	lsls	r2, r3, #3
 800cb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb88:	4413      	add	r3, r2
 800cb8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cb9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	895b      	ldrh	r3, [r3, #10]
 800cba6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cbaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	6959      	ldr	r1, [r3, #20]
 800cbb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cbc0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cbc4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cbc8:	6800      	ldr	r0, [r0, #0]
 800cbca:	f001 fb46 	bl	800e25a <USB_WritePMA>
            ep->xfer_buff += len;
 800cbce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	695a      	ldr	r2, [r3, #20]
 800cbda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbde:	441a      	add	r2, r3
 800cbe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cbec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	6a1a      	ldr	r2, [r3, #32]
 800cbf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	691b      	ldr	r3, [r3, #16]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d90f      	bls.n	800cc28 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800cc08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	6a1a      	ldr	r2, [r3, #32]
 800cc14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc18:	1ad2      	subs	r2, r2, r3
 800cc1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	621a      	str	r2, [r3, #32]
 800cc26:	e00e      	b.n	800cc46 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800cc28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	6a1b      	ldr	r3, [r3, #32]
 800cc34:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800cc38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2200      	movs	r2, #0
 800cc44:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cc46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	785b      	ldrb	r3, [r3, #1]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d177      	bne.n	800cd46 <USB_EPStartXfer+0x4c4>
 800cc56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	61bb      	str	r3, [r7, #24]
 800cc62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	461a      	mov	r2, r3
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	4413      	add	r3, r2
 800cc78:	61bb      	str	r3, [r7, #24]
 800cc7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	00da      	lsls	r2, r3, #3
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cc90:	617b      	str	r3, [r7, #20]
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	881b      	ldrh	r3, [r3, #0]
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc9c:	b29a      	uxth	r2, r3
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	801a      	strh	r2, [r3, #0]
 800cca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d10a      	bne.n	800ccc0 <USB_EPStartXfer+0x43e>
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	881b      	ldrh	r3, [r3, #0]
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccb8:	b29a      	uxth	r2, r3
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	801a      	strh	r2, [r3, #0]
 800ccbe:	e06d      	b.n	800cd9c <USB_EPStartXfer+0x51a>
 800ccc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccc4:	2b3e      	cmp	r3, #62	@ 0x3e
 800ccc6:	d81c      	bhi.n	800cd02 <USB_EPStartXfer+0x480>
 800ccc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cccc:	085b      	lsrs	r3, r3, #1
 800ccce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ccd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccd6:	f003 0301 	and.w	r3, r3, #1
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d004      	beq.n	800cce8 <USB_EPStartXfer+0x466>
 800ccde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cce2:	3301      	adds	r3, #1
 800cce4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	881b      	ldrh	r3, [r3, #0]
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	029b      	lsls	r3, r3, #10
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	801a      	strh	r2, [r3, #0]
 800cd00:	e04c      	b.n	800cd9c <USB_EPStartXfer+0x51a>
 800cd02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd06:	095b      	lsrs	r3, r3, #5
 800cd08:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cd0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd10:	f003 031f 	and.w	r3, r3, #31
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d104      	bne.n	800cd22 <USB_EPStartXfer+0x4a0>
 800cd18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	881b      	ldrh	r3, [r3, #0]
 800cd26:	b29a      	uxth	r2, r3
 800cd28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	029b      	lsls	r3, r3, #10
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	4313      	orrs	r3, r2
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	801a      	strh	r2, [r3, #0]
 800cd44:	e02a      	b.n	800cd9c <USB_EPStartXfer+0x51a>
 800cd46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	785b      	ldrb	r3, [r3, #1]
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d122      	bne.n	800cd9c <USB_EPStartXfer+0x51a>
 800cd56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	623b      	str	r3, [r7, #32]
 800cd62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	461a      	mov	r2, r3
 800cd74:	6a3b      	ldr	r3, [r7, #32]
 800cd76:	4413      	add	r3, r2
 800cd78:	623b      	str	r3, [r7, #32]
 800cd7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	00da      	lsls	r2, r3, #3
 800cd88:	6a3b      	ldr	r3, [r7, #32]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd90:	61fb      	str	r3, [r7, #28]
 800cd92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd96:	b29a      	uxth	r2, r3
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cd9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cda0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	891b      	ldrh	r3, [r3, #8]
 800cda8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cdac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	6959      	ldr	r1, [r3, #20]
 800cdb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cdc2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cdc6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cdca:	6800      	ldr	r0, [r0, #0]
 800cdcc:	f001 fa45 	bl	800e25a <USB_WritePMA>
 800cdd0:	e3ee      	b.n	800d5b0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cdd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	785b      	ldrb	r3, [r3, #1]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d177      	bne.n	800ced2 <USB_EPStartXfer+0x650>
 800cde2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cde6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cdee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	461a      	mov	r2, r3
 800ce00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce02:	4413      	add	r3, r2
 800ce04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	00da      	lsls	r2, r3, #3
 800ce14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce16:	4413      	add	r3, r2
 800ce18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce20:	881b      	ldrh	r3, [r3, #0]
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce2c:	801a      	strh	r2, [r3, #0]
 800ce2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d10a      	bne.n	800ce4c <USB_EPStartXfer+0x5ca>
 800ce36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce38:	881b      	ldrh	r3, [r3, #0]
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce44:	b29a      	uxth	r2, r3
 800ce46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce48:	801a      	strh	r2, [r3, #0]
 800ce4a:	e06d      	b.n	800cf28 <USB_EPStartXfer+0x6a6>
 800ce4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce50:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce52:	d81c      	bhi.n	800ce8e <USB_EPStartXfer+0x60c>
 800ce54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce58:	085b      	lsrs	r3, r3, #1
 800ce5a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ce5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce62:	f003 0301 	and.w	r3, r3, #1
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d004      	beq.n	800ce74 <USB_EPStartXfer+0x5f2>
 800ce6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ce6e:	3301      	adds	r3, #1
 800ce70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ce74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce76:	881b      	ldrh	r3, [r3, #0]
 800ce78:	b29a      	uxth	r2, r3
 800ce7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	029b      	lsls	r3, r3, #10
 800ce82:	b29b      	uxth	r3, r3
 800ce84:	4313      	orrs	r3, r2
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce8a:	801a      	strh	r2, [r3, #0]
 800ce8c:	e04c      	b.n	800cf28 <USB_EPStartXfer+0x6a6>
 800ce8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce92:	095b      	lsrs	r3, r3, #5
 800ce94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ce98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce9c:	f003 031f 	and.w	r3, r3, #31
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d104      	bne.n	800ceae <USB_EPStartXfer+0x62c>
 800cea4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ceae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ceb0:	881b      	ldrh	r3, [r3, #0]
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	029b      	lsls	r3, r3, #10
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	4313      	orrs	r3, r2
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ceca:	b29a      	uxth	r2, r3
 800cecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cece:	801a      	strh	r2, [r3, #0]
 800ced0:	e02a      	b.n	800cf28 <USB_EPStartXfer+0x6a6>
 800ced2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ced6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	785b      	ldrb	r3, [r3, #1]
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d122      	bne.n	800cf28 <USB_EPStartXfer+0x6a6>
 800cee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cee6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	653b      	str	r3, [r7, #80]	@ 0x50
 800ceee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	461a      	mov	r2, r3
 800cf00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf02:	4413      	add	r3, r2
 800cf04:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	00da      	lsls	r2, r3, #3
 800cf14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf16:	4413      	add	r3, r2
 800cf18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cf1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf22:	b29a      	uxth	r2, r3
 800cf24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cf28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	891b      	ldrh	r3, [r3, #8]
 800cf34:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	6959      	ldr	r1, [r3, #20]
 800cf44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cf4e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cf52:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cf56:	6800      	ldr	r0, [r0, #0]
 800cf58:	f001 f97f 	bl	800e25a <USB_WritePMA>
            ep->xfer_buff += len;
 800cf5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	695a      	ldr	r2, [r3, #20]
 800cf68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf6c:	441a      	add	r2, r3
 800cf6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cf7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	6a1a      	ldr	r2, [r3, #32]
 800cf86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	691b      	ldr	r3, [r3, #16]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d90f      	bls.n	800cfb6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800cf96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	6a1a      	ldr	r2, [r3, #32]
 800cfa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfa6:	1ad2      	subs	r2, r2, r3
 800cfa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	621a      	str	r2, [r3, #32]
 800cfb4:	e00e      	b.n	800cfd4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800cfb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	6a1b      	ldr	r3, [r3, #32]
 800cfc2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800cfc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cfd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	785b      	ldrb	r3, [r3, #1]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d177      	bne.n	800d0e0 <USB_EPStartXfer+0x85e>
 800cff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	461a      	mov	r2, r3
 800d00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d010:	4413      	add	r3, r2
 800d012:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	00da      	lsls	r2, r3, #3
 800d022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d024:	4413      	add	r3, r2
 800d026:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d02a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d02e:	881b      	ldrh	r3, [r3, #0]
 800d030:	b29b      	uxth	r3, r3
 800d032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d036:	b29a      	uxth	r2, r3
 800d038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d03a:	801a      	strh	r2, [r3, #0]
 800d03c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d040:	2b00      	cmp	r3, #0
 800d042:	d10a      	bne.n	800d05a <USB_EPStartXfer+0x7d8>
 800d044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d046:	881b      	ldrh	r3, [r3, #0]
 800d048:	b29b      	uxth	r3, r3
 800d04a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d04e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d052:	b29a      	uxth	r2, r3
 800d054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d056:	801a      	strh	r2, [r3, #0]
 800d058:	e067      	b.n	800d12a <USB_EPStartXfer+0x8a8>
 800d05a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d05e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d060:	d81c      	bhi.n	800d09c <USB_EPStartXfer+0x81a>
 800d062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d066:	085b      	lsrs	r3, r3, #1
 800d068:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d070:	f003 0301 	and.w	r3, r3, #1
 800d074:	2b00      	cmp	r3, #0
 800d076:	d004      	beq.n	800d082 <USB_EPStartXfer+0x800>
 800d078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d07c:	3301      	adds	r3, #1
 800d07e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d084:	881b      	ldrh	r3, [r3, #0]
 800d086:	b29a      	uxth	r2, r3
 800d088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	029b      	lsls	r3, r3, #10
 800d090:	b29b      	uxth	r3, r3
 800d092:	4313      	orrs	r3, r2
 800d094:	b29a      	uxth	r2, r3
 800d096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d098:	801a      	strh	r2, [r3, #0]
 800d09a:	e046      	b.n	800d12a <USB_EPStartXfer+0x8a8>
 800d09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0a0:	095b      	lsrs	r3, r3, #5
 800d0a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0aa:	f003 031f 	and.w	r3, r3, #31
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d104      	bne.n	800d0bc <USB_EPStartXfer+0x83a>
 800d0b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0b6:	3b01      	subs	r3, #1
 800d0b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d0bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0be:	881b      	ldrh	r3, [r3, #0]
 800d0c0:	b29a      	uxth	r2, r3
 800d0c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	029b      	lsls	r3, r3, #10
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0dc:	801a      	strh	r2, [r3, #0]
 800d0de:	e024      	b.n	800d12a <USB_EPStartXfer+0x8a8>
 800d0e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	785b      	ldrb	r3, [r3, #1]
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d11c      	bne.n	800d12a <USB_EPStartXfer+0x8a8>
 800d0f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	461a      	mov	r2, r3
 800d102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d104:	4413      	add	r3, r2
 800d106:	643b      	str	r3, [r7, #64]	@ 0x40
 800d108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d10c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	00da      	lsls	r2, r3, #3
 800d116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d118:	4413      	add	r3, r2
 800d11a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d124:	b29a      	uxth	r2, r3
 800d126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d128:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d12a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d12e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	895b      	ldrh	r3, [r3, #10]
 800d136:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d13a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d13e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	6959      	ldr	r1, [r3, #20]
 800d146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d150:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d154:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d158:	6800      	ldr	r0, [r0, #0]
 800d15a:	f001 f87e 	bl	800e25a <USB_WritePMA>
 800d15e:	e227      	b.n	800d5b0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	6a1b      	ldr	r3, [r3, #32]
 800d16c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d17e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	4413      	add	r3, r2
 800d18a:	881b      	ldrh	r3, [r3, #0]
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d196:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d19a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d19e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	441a      	add	r2, r3
 800d1b4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d1b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1c8:	b29b      	uxth	r3, r3
 800d1ca:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d1cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d1d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1ec:	4413      	add	r3, r2
 800d1ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d1f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	00da      	lsls	r2, r3, #3
 800d1fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d200:	4413      	add	r3, r2
 800d202:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d206:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d210:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	891b      	ldrh	r3, [r3, #8]
 800d21e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6959      	ldr	r1, [r3, #20]
 800d22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d232:	b29b      	uxth	r3, r3
 800d234:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d238:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d23c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d240:	6800      	ldr	r0, [r0, #0]
 800d242:	f001 f80a 	bl	800e25a <USB_WritePMA>
 800d246:	e1b3      	b.n	800d5b0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d24c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	6a1a      	ldr	r2, [r3, #32]
 800d254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d258:	1ad2      	subs	r2, r2, r3
 800d25a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d25e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d26a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	4413      	add	r3, r2
 800d280:	881b      	ldrh	r3, [r3, #0]
 800d282:	b29b      	uxth	r3, r3
 800d284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d288:	2b00      	cmp	r3, #0
 800d28a:	f000 80c6 	beq.w	800d41a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d28e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	673b      	str	r3, [r7, #112]	@ 0x70
 800d29a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d29e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	785b      	ldrb	r3, [r3, #1]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d177      	bne.n	800d39a <USB_EPStartXfer+0xb18>
 800d2aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d2ca:	4413      	add	r3, r2
 800d2cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d2ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	00da      	lsls	r2, r3, #3
 800d2dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d2de:	4413      	add	r3, r2
 800d2e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d2e4:	667b      	str	r3, [r7, #100]	@ 0x64
 800d2e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2f0:	b29a      	uxth	r2, r3
 800d2f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2f4:	801a      	strh	r2, [r3, #0]
 800d2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d10a      	bne.n	800d314 <USB_EPStartXfer+0xa92>
 800d2fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d300:	881b      	ldrh	r3, [r3, #0]
 800d302:	b29b      	uxth	r3, r3
 800d304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d30c:	b29a      	uxth	r2, r3
 800d30e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d310:	801a      	strh	r2, [r3, #0]
 800d312:	e067      	b.n	800d3e4 <USB_EPStartXfer+0xb62>
 800d314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d318:	2b3e      	cmp	r3, #62	@ 0x3e
 800d31a:	d81c      	bhi.n	800d356 <USB_EPStartXfer+0xad4>
 800d31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d320:	085b      	lsrs	r3, r3, #1
 800d322:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d32a:	f003 0301 	and.w	r3, r3, #1
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d004      	beq.n	800d33c <USB_EPStartXfer+0xaba>
 800d332:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d336:	3301      	adds	r3, #1
 800d338:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d33c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d33e:	881b      	ldrh	r3, [r3, #0]
 800d340:	b29a      	uxth	r2, r3
 800d342:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d346:	b29b      	uxth	r3, r3
 800d348:	029b      	lsls	r3, r3, #10
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	4313      	orrs	r3, r2
 800d34e:	b29a      	uxth	r2, r3
 800d350:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d352:	801a      	strh	r2, [r3, #0]
 800d354:	e046      	b.n	800d3e4 <USB_EPStartXfer+0xb62>
 800d356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d35a:	095b      	lsrs	r3, r3, #5
 800d35c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d364:	f003 031f 	and.w	r3, r3, #31
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d104      	bne.n	800d376 <USB_EPStartXfer+0xaf4>
 800d36c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d370:	3b01      	subs	r3, #1
 800d372:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d376:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d378:	881b      	ldrh	r3, [r3, #0]
 800d37a:	b29a      	uxth	r2, r3
 800d37c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d380:	b29b      	uxth	r3, r3
 800d382:	029b      	lsls	r3, r3, #10
 800d384:	b29b      	uxth	r3, r3
 800d386:	4313      	orrs	r3, r2
 800d388:	b29b      	uxth	r3, r3
 800d38a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d38e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d392:	b29a      	uxth	r2, r3
 800d394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d396:	801a      	strh	r2, [r3, #0]
 800d398:	e024      	b.n	800d3e4 <USB_EPStartXfer+0xb62>
 800d39a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d39e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	785b      	ldrb	r3, [r3, #1]
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	d11c      	bne.n	800d3e4 <USB_EPStartXfer+0xb62>
 800d3aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d3be:	4413      	add	r3, r2
 800d3c0:	673b      	str	r3, [r7, #112]	@ 0x70
 800d3c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	00da      	lsls	r2, r3, #3
 800d3d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d3d2:	4413      	add	r3, r2
 800d3d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d3d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d3da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3de:	b29a      	uxth	r2, r3
 800d3e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d3e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	895b      	ldrh	r3, [r3, #10]
 800d3f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d3f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	6959      	ldr	r1, [r3, #20]
 800d400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d404:	b29b      	uxth	r3, r3
 800d406:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d40a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d40e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d412:	6800      	ldr	r0, [r0, #0]
 800d414:	f000 ff21 	bl	800e25a <USB_WritePMA>
 800d418:	e0ca      	b.n	800d5b0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d41a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d41e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	785b      	ldrb	r3, [r3, #1]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d177      	bne.n	800d51a <USB_EPStartXfer+0xc98>
 800d42a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d42e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d43a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d444:	b29b      	uxth	r3, r3
 800d446:	461a      	mov	r2, r3
 800d448:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d44a:	4413      	add	r3, r2
 800d44c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d44e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	00da      	lsls	r2, r3, #3
 800d45c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d45e:	4413      	add	r3, r2
 800d460:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d464:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d466:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d468:	881b      	ldrh	r3, [r3, #0]
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d470:	b29a      	uxth	r2, r3
 800d472:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d474:	801a      	strh	r2, [r3, #0]
 800d476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d10a      	bne.n	800d494 <USB_EPStartXfer+0xc12>
 800d47e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d480:	881b      	ldrh	r3, [r3, #0]
 800d482:	b29b      	uxth	r3, r3
 800d484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d48c:	b29a      	uxth	r2, r3
 800d48e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d490:	801a      	strh	r2, [r3, #0]
 800d492:	e073      	b.n	800d57c <USB_EPStartXfer+0xcfa>
 800d494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d498:	2b3e      	cmp	r3, #62	@ 0x3e
 800d49a:	d81c      	bhi.n	800d4d6 <USB_EPStartXfer+0xc54>
 800d49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4a0:	085b      	lsrs	r3, r3, #1
 800d4a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4aa:	f003 0301 	and.w	r3, r3, #1
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d004      	beq.n	800d4bc <USB_EPStartXfer+0xc3a>
 800d4b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d4bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4be:	881b      	ldrh	r3, [r3, #0]
 800d4c0:	b29a      	uxth	r2, r3
 800d4c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	029b      	lsls	r3, r3, #10
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4d2:	801a      	strh	r2, [r3, #0]
 800d4d4:	e052      	b.n	800d57c <USB_EPStartXfer+0xcfa>
 800d4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4da:	095b      	lsrs	r3, r3, #5
 800d4dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4e4:	f003 031f 	and.w	r3, r3, #31
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d104      	bne.n	800d4f6 <USB_EPStartXfer+0xc74>
 800d4ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d4f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4f8:	881b      	ldrh	r3, [r3, #0]
 800d4fa:	b29a      	uxth	r2, r3
 800d4fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d500:	b29b      	uxth	r3, r3
 800d502:	029b      	lsls	r3, r3, #10
 800d504:	b29b      	uxth	r3, r3
 800d506:	4313      	orrs	r3, r2
 800d508:	b29b      	uxth	r3, r3
 800d50a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d50e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d512:	b29a      	uxth	r2, r3
 800d514:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d516:	801a      	strh	r2, [r3, #0]
 800d518:	e030      	b.n	800d57c <USB_EPStartXfer+0xcfa>
 800d51a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d51e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	785b      	ldrb	r3, [r3, #1]
 800d526:	2b01      	cmp	r3, #1
 800d528:	d128      	bne.n	800d57c <USB_EPStartXfer+0xcfa>
 800d52a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d52e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d53c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d546:	b29b      	uxth	r3, r3
 800d548:	461a      	mov	r2, r3
 800d54a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d54e:	4413      	add	r3, r2
 800d550:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	00da      	lsls	r2, r3, #3
 800d562:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d566:	4413      	add	r3, r2
 800d568:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d56c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d574:	b29a      	uxth	r2, r3
 800d576:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d57a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d57c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	891b      	ldrh	r3, [r3, #8]
 800d588:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d58c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	6959      	ldr	r1, [r3, #20]
 800d598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d5a2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d5a6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d5aa:	6800      	ldr	r0, [r0, #0]
 800d5ac:	f000 fe55 	bl	800e25a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d5b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	4413      	add	r3, r2
 800d5ca:	881b      	ldrh	r3, [r3, #0]
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d5d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5d6:	817b      	strh	r3, [r7, #10]
 800d5d8:	897b      	ldrh	r3, [r7, #10]
 800d5da:	f083 0310 	eor.w	r3, r3, #16
 800d5de:	817b      	strh	r3, [r7, #10]
 800d5e0:	897b      	ldrh	r3, [r7, #10]
 800d5e2:	f083 0320 	eor.w	r3, r3, #32
 800d5e6:	817b      	strh	r3, [r7, #10]
 800d5e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	441a      	add	r2, r3
 800d602:	897b      	ldrh	r3, [r7, #10]
 800d604:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d608:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d60c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d614:	b29b      	uxth	r3, r3
 800d616:	8013      	strh	r3, [r2, #0]
 800d618:	f000 bcdf 	b.w	800dfda <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d61c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	7b1b      	ldrb	r3, [r3, #12]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	f040 80bc 	bne.w	800d7a6 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d62e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	699a      	ldr	r2, [r3, #24]
 800d63a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d63e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	691b      	ldr	r3, [r3, #16]
 800d646:	429a      	cmp	r2, r3
 800d648:	d917      	bls.n	800d67a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d64a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d64e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	691b      	ldr	r3, [r3, #16]
 800d656:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800d65a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d65e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	699a      	ldr	r2, [r3, #24]
 800d666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d66a:	1ad2      	subs	r2, r2, r3
 800d66c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	619a      	str	r2, [r3, #24]
 800d678:	e00e      	b.n	800d698 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d67a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d67e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	699b      	ldr	r3, [r3, #24]
 800d686:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800d68a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d68e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2200      	movs	r2, #0
 800d696:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d69c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d6a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d6bc:	4413      	add	r3, r2
 800d6be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d6c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	00da      	lsls	r2, r3, #3
 800d6d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d6d4:	4413      	add	r3, r2
 800d6d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d6da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d6de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6e2:	881b      	ldrh	r3, [r3, #0]
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6f0:	801a      	strh	r2, [r3, #0]
 800d6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d10d      	bne.n	800d716 <USB_EPStartXfer+0xe94>
 800d6fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6fe:	881b      	ldrh	r3, [r3, #0]
 800d700:	b29b      	uxth	r3, r3
 800d702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d70a:	b29a      	uxth	r2, r3
 800d70c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d710:	801a      	strh	r2, [r3, #0]
 800d712:	f000 bc28 	b.w	800df66 <USB_EPStartXfer+0x16e4>
 800d716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d71a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d71c:	d81f      	bhi.n	800d75e <USB_EPStartXfer+0xedc>
 800d71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d722:	085b      	lsrs	r3, r3, #1
 800d724:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d72c:	f003 0301 	and.w	r3, r3, #1
 800d730:	2b00      	cmp	r3, #0
 800d732:	d004      	beq.n	800d73e <USB_EPStartXfer+0xebc>
 800d734:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d738:	3301      	adds	r3, #1
 800d73a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d73e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d742:	881b      	ldrh	r3, [r3, #0]
 800d744:	b29a      	uxth	r2, r3
 800d746:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	029b      	lsls	r3, r3, #10
 800d74e:	b29b      	uxth	r3, r3
 800d750:	4313      	orrs	r3, r2
 800d752:	b29a      	uxth	r2, r3
 800d754:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d758:	801a      	strh	r2, [r3, #0]
 800d75a:	f000 bc04 	b.w	800df66 <USB_EPStartXfer+0x16e4>
 800d75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d762:	095b      	lsrs	r3, r3, #5
 800d764:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d76c:	f003 031f 	and.w	r3, r3, #31
 800d770:	2b00      	cmp	r3, #0
 800d772:	d104      	bne.n	800d77e <USB_EPStartXfer+0xefc>
 800d774:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d778:	3b01      	subs	r3, #1
 800d77a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d77e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d782:	881b      	ldrh	r3, [r3, #0]
 800d784:	b29a      	uxth	r2, r3
 800d786:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	029b      	lsls	r3, r3, #10
 800d78e:	b29b      	uxth	r3, r3
 800d790:	4313      	orrs	r3, r2
 800d792:	b29b      	uxth	r3, r3
 800d794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7a2:	801a      	strh	r2, [r3, #0]
 800d7a4:	e3df      	b.n	800df66 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d7a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	78db      	ldrb	r3, [r3, #3]
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	f040 8218 	bne.w	800dbe8 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d7b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	785b      	ldrb	r3, [r3, #1]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	f040 809d 	bne.w	800d904 <USB_EPStartXfer+0x1082>
 800d7ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d7d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7ee:	4413      	add	r3, r2
 800d7f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d7f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	00da      	lsls	r2, r3, #3
 800d802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d806:	4413      	add	r3, r2
 800d808:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d80c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d810:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d814:	881b      	ldrh	r3, [r3, #0]
 800d816:	b29b      	uxth	r3, r3
 800d818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d81c:	b29a      	uxth	r2, r3
 800d81e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d822:	801a      	strh	r2, [r3, #0]
 800d824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	691b      	ldr	r3, [r3, #16]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10c      	bne.n	800d84e <USB_EPStartXfer+0xfcc>
 800d834:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d838:	881b      	ldrh	r3, [r3, #0]
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d844:	b29a      	uxth	r2, r3
 800d846:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d84a:	801a      	strh	r2, [r3, #0]
 800d84c:	e08f      	b.n	800d96e <USB_EPStartXfer+0x10ec>
 800d84e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	691b      	ldr	r3, [r3, #16]
 800d85a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d85c:	d826      	bhi.n	800d8ac <USB_EPStartXfer+0x102a>
 800d85e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	085b      	lsrs	r3, r3, #1
 800d86c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	691b      	ldr	r3, [r3, #16]
 800d87c:	f003 0301 	and.w	r3, r3, #1
 800d880:	2b00      	cmp	r3, #0
 800d882:	d004      	beq.n	800d88e <USB_EPStartXfer+0x100c>
 800d884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d888:	3301      	adds	r3, #1
 800d88a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d88e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d892:	881b      	ldrh	r3, [r3, #0]
 800d894:	b29a      	uxth	r2, r3
 800d896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	029b      	lsls	r3, r3, #10
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8a8:	801a      	strh	r2, [r3, #0]
 800d8aa:	e060      	b.n	800d96e <USB_EPStartXfer+0x10ec>
 800d8ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	691b      	ldr	r3, [r3, #16]
 800d8b8:	095b      	lsrs	r3, r3, #5
 800d8ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d8be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	691b      	ldr	r3, [r3, #16]
 800d8ca:	f003 031f 	and.w	r3, r3, #31
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d104      	bne.n	800d8dc <USB_EPStartXfer+0x105a>
 800d8d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8d6:	3b01      	subs	r3, #1
 800d8d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d8dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8e0:	881b      	ldrh	r3, [r3, #0]
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	029b      	lsls	r3, r3, #10
 800d8ec:	b29b      	uxth	r3, r3
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d900:	801a      	strh	r2, [r3, #0]
 800d902:	e034      	b.n	800d96e <USB_EPStartXfer+0x10ec>
 800d904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	785b      	ldrb	r3, [r3, #1]
 800d910:	2b01      	cmp	r3, #1
 800d912:	d12c      	bne.n	800d96e <USB_EPStartXfer+0x10ec>
 800d914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d918:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d926:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d930:	b29b      	uxth	r3, r3
 800d932:	461a      	mov	r2, r3
 800d934:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d938:	4413      	add	r3, r2
 800d93a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d93e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	00da      	lsls	r2, r3, #3
 800d94c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d950:	4413      	add	r3, r2
 800d952:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d956:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d95a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d95e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	691b      	ldr	r3, [r3, #16]
 800d966:	b29a      	uxth	r2, r3
 800d968:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d96c:	801a      	strh	r2, [r3, #0]
 800d96e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d972:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d97c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	785b      	ldrb	r3, [r3, #1]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	f040 809d 	bne.w	800dac8 <USB_EPStartXfer+0x1246>
 800d98e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d992:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d99c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d9b2:	4413      	add	r3, r2
 800d9b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d9b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	00da      	lsls	r2, r3, #3
 800d9c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d9ca:	4413      	add	r3, r2
 800d9cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d9d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d9d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d9d8:	881b      	ldrh	r3, [r3, #0]
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d9e6:	801a      	strh	r2, [r3, #0]
 800d9e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	691b      	ldr	r3, [r3, #16]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d10c      	bne.n	800da12 <USB_EPStartXfer+0x1190>
 800d9f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d9fc:	881b      	ldrh	r3, [r3, #0]
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da08:	b29a      	uxth	r2, r3
 800da0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da0e:	801a      	strh	r2, [r3, #0]
 800da10:	e088      	b.n	800db24 <USB_EPStartXfer+0x12a2>
 800da12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	2b3e      	cmp	r3, #62	@ 0x3e
 800da20:	d826      	bhi.n	800da70 <USB_EPStartXfer+0x11ee>
 800da22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	691b      	ldr	r3, [r3, #16]
 800da2e:	085b      	lsrs	r3, r3, #1
 800da30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800da34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	691b      	ldr	r3, [r3, #16]
 800da40:	f003 0301 	and.w	r3, r3, #1
 800da44:	2b00      	cmp	r3, #0
 800da46:	d004      	beq.n	800da52 <USB_EPStartXfer+0x11d0>
 800da48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da4c:	3301      	adds	r3, #1
 800da4e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800da52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da56:	881b      	ldrh	r3, [r3, #0]
 800da58:	b29a      	uxth	r2, r3
 800da5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da5e:	b29b      	uxth	r3, r3
 800da60:	029b      	lsls	r3, r3, #10
 800da62:	b29b      	uxth	r3, r3
 800da64:	4313      	orrs	r3, r2
 800da66:	b29a      	uxth	r2, r3
 800da68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da6c:	801a      	strh	r2, [r3, #0]
 800da6e:	e059      	b.n	800db24 <USB_EPStartXfer+0x12a2>
 800da70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	691b      	ldr	r3, [r3, #16]
 800da7c:	095b      	lsrs	r3, r3, #5
 800da7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800da82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	691b      	ldr	r3, [r3, #16]
 800da8e:	f003 031f 	and.w	r3, r3, #31
 800da92:	2b00      	cmp	r3, #0
 800da94:	d104      	bne.n	800daa0 <USB_EPStartXfer+0x121e>
 800da96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da9a:	3b01      	subs	r3, #1
 800da9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800daa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800daa4:	881b      	ldrh	r3, [r3, #0]
 800daa6:	b29a      	uxth	r2, r3
 800daa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800daac:	b29b      	uxth	r3, r3
 800daae:	029b      	lsls	r3, r3, #10
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	4313      	orrs	r3, r2
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800daba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dac4:	801a      	strh	r2, [r3, #0]
 800dac6:	e02d      	b.n	800db24 <USB_EPStartXfer+0x12a2>
 800dac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dacc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	785b      	ldrb	r3, [r3, #1]
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d125      	bne.n	800db24 <USB_EPStartXfer+0x12a2>
 800dad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dadc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	461a      	mov	r2, r3
 800daea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800daee:	4413      	add	r3, r2
 800daf0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800daf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	00da      	lsls	r2, r3, #3
 800db02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800db06:	4413      	add	r3, r2
 800db08:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800db0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800db10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	691b      	ldr	r3, [r3, #16]
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800db22:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800db24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	69db      	ldr	r3, [r3, #28]
 800db30:	2b00      	cmp	r3, #0
 800db32:	f000 8218 	beq.w	800df66 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800db36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	4413      	add	r3, r2
 800db50:	881b      	ldrh	r3, [r3, #0]
 800db52:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800db56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800db5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d005      	beq.n	800db6e <USB_EPStartXfer+0x12ec>
 800db62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800db66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10d      	bne.n	800db8a <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800db6e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800db72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800db76:	2b00      	cmp	r3, #0
 800db78:	f040 81f5 	bne.w	800df66 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800db7c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800db80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db84:	2b00      	cmp	r3, #0
 800db86:	f040 81ee 	bne.w	800df66 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800db8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4413      	add	r3, r2
 800dba4:	881b      	ldrh	r3, [r3, #0]
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dbac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbb0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800dbb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	441a      	add	r2, r3
 800dbce:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800dbd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dbd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dbda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbde:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	8013      	strh	r3, [r2, #0]
 800dbe6:	e1be      	b.n	800df66 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800dbe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	78db      	ldrb	r3, [r3, #3]
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	f040 81b4 	bne.w	800df62 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800dbfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	699a      	ldr	r2, [r3, #24]
 800dc06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	691b      	ldr	r3, [r3, #16]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d917      	bls.n	800dc46 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800dc16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	691b      	ldr	r3, [r3, #16]
 800dc22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800dc26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	699a      	ldr	r2, [r3, #24]
 800dc32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc36:	1ad2      	subs	r2, r2, r3
 800dc38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	619a      	str	r2, [r3, #24]
 800dc44:	e00e      	b.n	800dc64 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800dc46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	699b      	ldr	r3, [r3, #24]
 800dc52:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800dc56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2200      	movs	r2, #0
 800dc62:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800dc64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	785b      	ldrb	r3, [r3, #1]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f040 8085 	bne.w	800dd80 <USB_EPStartXfer+0x14fe>
 800dc76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dc84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	461a      	mov	r2, r3
 800dc96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dc9a:	4413      	add	r3, r2
 800dc9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	00da      	lsls	r2, r3, #3
 800dcae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dcb2:	4413      	add	r3, r2
 800dcb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dcb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dcbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dcc0:	881b      	ldrh	r3, [r3, #0]
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dcce:	801a      	strh	r2, [r3, #0]
 800dcd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d10c      	bne.n	800dcf2 <USB_EPStartXfer+0x1470>
 800dcd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dcdc:	881b      	ldrh	r3, [r3, #0]
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dcee:	801a      	strh	r2, [r3, #0]
 800dcf0:	e077      	b.n	800dde2 <USB_EPStartXfer+0x1560>
 800dcf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcf6:	2b3e      	cmp	r3, #62	@ 0x3e
 800dcf8:	d81e      	bhi.n	800dd38 <USB_EPStartXfer+0x14b6>
 800dcfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcfe:	085b      	lsrs	r3, r3, #1
 800dd00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dd04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd08:	f003 0301 	and.w	r3, r3, #1
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d004      	beq.n	800dd1a <USB_EPStartXfer+0x1498>
 800dd10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd14:	3301      	adds	r3, #1
 800dd16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dd1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd1e:	881b      	ldrh	r3, [r3, #0]
 800dd20:	b29a      	uxth	r2, r3
 800dd22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	029b      	lsls	r3, r3, #10
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	b29a      	uxth	r2, r3
 800dd30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd34:	801a      	strh	r2, [r3, #0]
 800dd36:	e054      	b.n	800dde2 <USB_EPStartXfer+0x1560>
 800dd38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd3c:	095b      	lsrs	r3, r3, #5
 800dd3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dd42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd46:	f003 031f 	and.w	r3, r3, #31
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d104      	bne.n	800dd58 <USB_EPStartXfer+0x14d6>
 800dd4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd52:	3b01      	subs	r3, #1
 800dd54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dd58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd5c:	881b      	ldrh	r3, [r3, #0]
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	029b      	lsls	r3, r3, #10
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd7c:	801a      	strh	r2, [r3, #0]
 800dd7e:	e030      	b.n	800dde2 <USB_EPStartXfer+0x1560>
 800dd80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	785b      	ldrb	r3, [r3, #1]
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d128      	bne.n	800dde2 <USB_EPStartXfer+0x1560>
 800dd90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800dd9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dda2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	461a      	mov	r2, r3
 800ddb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ddb4:	4413      	add	r3, r2
 800ddb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ddba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	00da      	lsls	r2, r3, #3
 800ddc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ddcc:	4413      	add	r3, r2
 800ddce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ddd2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ddd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddda:	b29a      	uxth	r2, r3
 800dddc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800dde0:	801a      	strh	r2, [r3, #0]
 800dde2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dde6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ddf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	785b      	ldrb	r3, [r3, #1]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f040 8085 	bne.w	800df0c <USB_EPStartXfer+0x168a>
 800de02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800de10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de1e:	b29b      	uxth	r3, r3
 800de20:	461a      	mov	r2, r3
 800de22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800de26:	4413      	add	r3, r2
 800de28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800de2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	00da      	lsls	r2, r3, #3
 800de3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800de3e:	4413      	add	r3, r2
 800de40:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800de44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800de48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800de4c:	881b      	ldrh	r3, [r3, #0]
 800de4e:	b29b      	uxth	r3, r3
 800de50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de54:	b29a      	uxth	r2, r3
 800de56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800de5a:	801a      	strh	r2, [r3, #0]
 800de5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de60:	2b00      	cmp	r3, #0
 800de62:	d10c      	bne.n	800de7e <USB_EPStartXfer+0x15fc>
 800de64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800de68:	881b      	ldrh	r3, [r3, #0]
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de74:	b29a      	uxth	r2, r3
 800de76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800de7a:	801a      	strh	r2, [r3, #0]
 800de7c:	e073      	b.n	800df66 <USB_EPStartXfer+0x16e4>
 800de7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de82:	2b3e      	cmp	r3, #62	@ 0x3e
 800de84:	d81e      	bhi.n	800dec4 <USB_EPStartXfer+0x1642>
 800de86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de8a:	085b      	lsrs	r3, r3, #1
 800de8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800de90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de94:	f003 0301 	and.w	r3, r3, #1
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d004      	beq.n	800dea6 <USB_EPStartXfer+0x1624>
 800de9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dea0:	3301      	adds	r3, #1
 800dea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dea6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800deaa:	881b      	ldrh	r3, [r3, #0]
 800deac:	b29a      	uxth	r2, r3
 800deae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	029b      	lsls	r3, r3, #10
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	4313      	orrs	r3, r2
 800deba:	b29a      	uxth	r2, r3
 800debc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dec0:	801a      	strh	r2, [r3, #0]
 800dec2:	e050      	b.n	800df66 <USB_EPStartXfer+0x16e4>
 800dec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dec8:	095b      	lsrs	r3, r3, #5
 800deca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ded2:	f003 031f 	and.w	r3, r3, #31
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d104      	bne.n	800dee4 <USB_EPStartXfer+0x1662>
 800deda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dede:	3b01      	subs	r3, #1
 800dee0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dee4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dee8:	881b      	ldrh	r3, [r3, #0]
 800deea:	b29a      	uxth	r2, r3
 800deec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800def0:	b29b      	uxth	r3, r3
 800def2:	029b      	lsls	r3, r3, #10
 800def4:	b29b      	uxth	r3, r3
 800def6:	4313      	orrs	r3, r2
 800def8:	b29b      	uxth	r3, r3
 800defa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800defe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df02:	b29a      	uxth	r2, r3
 800df04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df08:	801a      	strh	r2, [r3, #0]
 800df0a:	e02c      	b.n	800df66 <USB_EPStartXfer+0x16e4>
 800df0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	785b      	ldrb	r3, [r3, #1]
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d124      	bne.n	800df66 <USB_EPStartXfer+0x16e4>
 800df1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	461a      	mov	r2, r3
 800df2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800df32:	4413      	add	r3, r2
 800df34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800df38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	00da      	lsls	r2, r3, #3
 800df46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800df4a:	4413      	add	r3, r2
 800df4c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800df50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800df54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df58:	b29a      	uxth	r2, r3
 800df5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800df5e:	801a      	strh	r2, [r3, #0]
 800df60:	e001      	b.n	800df66 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800df62:	2301      	movs	r3, #1
 800df64:	e03a      	b.n	800dfdc <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800df66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df6e:	681a      	ldr	r2, [r3, #0]
 800df70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	4413      	add	r3, r2
 800df80:	881b      	ldrh	r3, [r3, #0]
 800df82:	b29b      	uxth	r3, r3
 800df84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800df88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df8c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800df90:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800df94:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800df98:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800df9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dfa0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dfa4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800dfa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfb0:	681a      	ldr	r2, [r3, #0]
 800dfb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	441a      	add	r2, r3
 800dfc2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dfc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dfca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dfce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dfd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800dfda:	2300      	movs	r3, #0
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}

0800dfe6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dfe6:	b480      	push	{r7}
 800dfe8:	b085      	sub	sp, #20
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
 800dfee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	785b      	ldrb	r3, [r3, #1]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d020      	beq.n	800e03a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	4413      	add	r3, r2
 800e002:	881b      	ldrh	r3, [r3, #0]
 800e004:	b29b      	uxth	r3, r3
 800e006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e00a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e00e:	81bb      	strh	r3, [r7, #12]
 800e010:	89bb      	ldrh	r3, [r7, #12]
 800e012:	f083 0310 	eor.w	r3, r3, #16
 800e016:	81bb      	strh	r3, [r7, #12]
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	441a      	add	r2, r3
 800e022:	89bb      	ldrh	r3, [r7, #12]
 800e024:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e028:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e02c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e034:	b29b      	uxth	r3, r3
 800e036:	8013      	strh	r3, [r2, #0]
 800e038:	e01f      	b.n	800e07a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	4413      	add	r3, r2
 800e044:	881b      	ldrh	r3, [r3, #0]
 800e046:	b29b      	uxth	r3, r3
 800e048:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e04c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e050:	81fb      	strh	r3, [r7, #14]
 800e052:	89fb      	ldrh	r3, [r7, #14]
 800e054:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e058:	81fb      	strh	r3, [r7, #14]
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	009b      	lsls	r3, r3, #2
 800e062:	441a      	add	r2, r3
 800e064:	89fb      	ldrh	r3, [r7, #14]
 800e066:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e06a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e06e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e076:	b29b      	uxth	r3, r3
 800e078:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3714      	adds	r7, #20
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e088:	b480      	push	{r7}
 800e08a:	b087      	sub	sp, #28
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	7b1b      	ldrb	r3, [r3, #12]
 800e096:	2b00      	cmp	r3, #0
 800e098:	f040 809d 	bne.w	800e1d6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	785b      	ldrb	r3, [r3, #1]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d04c      	beq.n	800e13e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	4413      	add	r3, r2
 800e0ae:	881b      	ldrh	r3, [r3, #0]
 800e0b0:	823b      	strh	r3, [r7, #16]
 800e0b2:	8a3b      	ldrh	r3, [r7, #16]
 800e0b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d01b      	beq.n	800e0f4 <USB_EPClearStall+0x6c>
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	4413      	add	r3, r2
 800e0c6:	881b      	ldrh	r3, [r3, #0]
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e0ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e0d2:	81fb      	strh	r3, [r7, #14]
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	441a      	add	r2, r3
 800e0de:	89fb      	ldrh	r3, [r7, #14]
 800e0e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	78db      	ldrb	r3, [r3, #3]
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d06c      	beq.n	800e1d6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e0fc:	687a      	ldr	r2, [r7, #4]
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	4413      	add	r3, r2
 800e106:	881b      	ldrh	r3, [r3, #0]
 800e108:	b29b      	uxth	r3, r3
 800e10a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e10e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e112:	81bb      	strh	r3, [r7, #12]
 800e114:	89bb      	ldrh	r3, [r7, #12]
 800e116:	f083 0320 	eor.w	r3, r3, #32
 800e11a:	81bb      	strh	r3, [r7, #12]
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	441a      	add	r2, r3
 800e126:	89bb      	ldrh	r3, [r7, #12]
 800e128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e12c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e138:	b29b      	uxth	r3, r3
 800e13a:	8013      	strh	r3, [r2, #0]
 800e13c:	e04b      	b.n	800e1d6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	4413      	add	r3, r2
 800e148:	881b      	ldrh	r3, [r3, #0]
 800e14a:	82fb      	strh	r3, [r7, #22]
 800e14c:	8afb      	ldrh	r3, [r7, #22]
 800e14e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e152:	2b00      	cmp	r3, #0
 800e154:	d01b      	beq.n	800e18e <USB_EPClearStall+0x106>
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	4413      	add	r3, r2
 800e160:	881b      	ldrh	r3, [r3, #0]
 800e162:	b29b      	uxth	r3, r3
 800e164:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e16c:	82bb      	strh	r3, [r7, #20]
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	441a      	add	r2, r3
 800e178:	8abb      	ldrh	r3, [r7, #20]
 800e17a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e17e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e182:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4413      	add	r3, r2
 800e198:	881b      	ldrh	r3, [r3, #0]
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e1a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1a4:	827b      	strh	r3, [r7, #18]
 800e1a6:	8a7b      	ldrh	r3, [r7, #18]
 800e1a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e1ac:	827b      	strh	r3, [r7, #18]
 800e1ae:	8a7b      	ldrh	r3, [r7, #18]
 800e1b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e1b4:	827b      	strh	r3, [r7, #18]
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	009b      	lsls	r3, r3, #2
 800e1be:	441a      	add	r2, r3
 800e1c0:	8a7b      	ldrh	r3, [r7, #18]
 800e1c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e1d6:	2300      	movs	r3, #0
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	371c      	adds	r7, #28
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e1f0:	78fb      	ldrb	r3, [r7, #3]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d103      	bne.n	800e1fe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2280      	movs	r2, #128	@ 0x80
 800e1fa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e1fe:	2300      	movs	r3, #0
}
 800e200:	4618      	mov	r0, r3
 800e202:	370c      	adds	r7, #12
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr

0800e20c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e224:	b29a      	uxth	r2, r3
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	370c      	adds	r7, #12
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr

0800e23a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e23a:	b480      	push	{r7}
 800e23c:	b085      	sub	sp, #20
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e248:	b29b      	uxth	r3, r3
 800e24a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e24c:	68fb      	ldr	r3, [r7, #12]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3714      	adds	r7, #20
 800e252:	46bd      	mov	sp, r7
 800e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e258:	4770      	bx	lr

0800e25a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e25a:	b480      	push	{r7}
 800e25c:	b08b      	sub	sp, #44	@ 0x2c
 800e25e:	af00      	add	r7, sp, #0
 800e260:	60f8      	str	r0, [r7, #12]
 800e262:	60b9      	str	r1, [r7, #8]
 800e264:	4611      	mov	r1, r2
 800e266:	461a      	mov	r2, r3
 800e268:	460b      	mov	r3, r1
 800e26a:	80fb      	strh	r3, [r7, #6]
 800e26c:	4613      	mov	r3, r2
 800e26e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e270:	88bb      	ldrh	r3, [r7, #4]
 800e272:	3301      	adds	r3, #1
 800e274:	085b      	lsrs	r3, r3, #1
 800e276:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e280:	88fa      	ldrh	r2, [r7, #6]
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	4413      	add	r3, r2
 800e286:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e28a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e290:	e01b      	b.n	800e2ca <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e292:	69fb      	ldr	r3, [r7, #28]
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	3301      	adds	r3, #1
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	021b      	lsls	r3, r3, #8
 800e2a0:	b21a      	sxth	r2, r3
 800e2a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e2a6:	4313      	orrs	r3, r2
 800e2a8:	b21b      	sxth	r3, r3
 800e2aa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e2ac:	6a3b      	ldr	r3, [r7, #32]
 800e2ae:	8a7a      	ldrh	r2, [r7, #18]
 800e2b0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e2b2:	6a3b      	ldr	r3, [r7, #32]
 800e2b4:	3302      	adds	r3, #2
 800e2b6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d1e0      	bne.n	800e292 <USB_WritePMA+0x38>
  }
}
 800e2d0:	bf00      	nop
 800e2d2:	bf00      	nop
 800e2d4:	372c      	adds	r7, #44	@ 0x2c
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2dc:	4770      	bx	lr

0800e2de <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e2de:	b480      	push	{r7}
 800e2e0:	b08b      	sub	sp, #44	@ 0x2c
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	60f8      	str	r0, [r7, #12]
 800e2e6:	60b9      	str	r1, [r7, #8]
 800e2e8:	4611      	mov	r1, r2
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	80fb      	strh	r3, [r7, #6]
 800e2f0:	4613      	mov	r3, r2
 800e2f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e2f4:	88bb      	ldrh	r3, [r7, #4]
 800e2f6:	085b      	lsrs	r3, r3, #1
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e304:	88fa      	ldrh	r2, [r7, #6]
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	4413      	add	r3, r2
 800e30a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e30e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e310:	69bb      	ldr	r3, [r7, #24]
 800e312:	627b      	str	r3, [r7, #36]	@ 0x24
 800e314:	e018      	b.n	800e348 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e316:	6a3b      	ldr	r3, [r7, #32]
 800e318:	881b      	ldrh	r3, [r3, #0]
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e31e:	6a3b      	ldr	r3, [r7, #32]
 800e320:	3302      	adds	r3, #2
 800e322:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	b2da      	uxtb	r2, r3
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	3301      	adds	r3, #1
 800e330:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	0a1b      	lsrs	r3, r3, #8
 800e336:	b2da      	uxtb	r2, r3
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	3301      	adds	r3, #1
 800e340:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e344:	3b01      	subs	r3, #1
 800e346:	627b      	str	r3, [r7, #36]	@ 0x24
 800e348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d1e3      	bne.n	800e316 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e34e:	88bb      	ldrh	r3, [r7, #4]
 800e350:	f003 0301 	and.w	r3, r3, #1
 800e354:	b29b      	uxth	r3, r3
 800e356:	2b00      	cmp	r3, #0
 800e358:	d007      	beq.n	800e36a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e35a:	6a3b      	ldr	r3, [r7, #32]
 800e35c:	881b      	ldrh	r3, [r3, #0]
 800e35e:	b29b      	uxth	r3, r3
 800e360:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	b2da      	uxtb	r2, r3
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	701a      	strb	r2, [r3, #0]
  }
}
 800e36a:	bf00      	nop
 800e36c:	372c      	adds	r7, #44	@ 0x2c
 800e36e:	46bd      	mov	sp, r7
 800e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e374:	4770      	bx	lr

0800e376 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e376:	b580      	push	{r7, lr}
 800e378:	b084      	sub	sp, #16
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	6078      	str	r0, [r7, #4]
 800e37e:	460b      	mov	r3, r1
 800e380:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e382:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e386:	f002 f90f 	bl	80105a8 <USBD_static_malloc>
 800e38a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d105      	bne.n	800e39e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2200      	movs	r2, #0
 800e396:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800e39a:	2302      	movs	r3, #2
 800e39c:	e066      	b.n	800e46c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	7c1b      	ldrb	r3, [r3, #16]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d119      	bne.n	800e3e2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e3ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3b2:	2202      	movs	r2, #2
 800e3b4:	2181      	movs	r1, #129	@ 0x81
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f001 ff9d 	bl	80102f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2201      	movs	r2, #1
 800e3c0:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e3c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3c6:	2202      	movs	r2, #2
 800e3c8:	2101      	movs	r1, #1
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f001 ff93 	bl	80102f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2210      	movs	r2, #16
 800e3dc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800e3e0:	e016      	b.n	800e410 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e3e2:	2340      	movs	r3, #64	@ 0x40
 800e3e4:	2202      	movs	r2, #2
 800e3e6:	2181      	movs	r1, #129	@ 0x81
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f001 ff84 	bl	80102f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e3f4:	2340      	movs	r3, #64	@ 0x40
 800e3f6:	2202      	movs	r2, #2
 800e3f8:	2101      	movs	r1, #1
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f001 ff7b 	bl	80102f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2201      	movs	r2, #1
 800e404:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2210      	movs	r2, #16
 800e40c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e410:	2308      	movs	r3, #8
 800e412:	2203      	movs	r2, #3
 800e414:	2182      	movs	r1, #130	@ 0x82
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f001 ff6d 	bl	80102f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2201      	movs	r2, #1
 800e420:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2200      	movs	r2, #0
 800e432:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2200      	movs	r2, #0
 800e43a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	7c1b      	ldrb	r3, [r3, #16]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d109      	bne.n	800e45a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e44c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e450:	2101      	movs	r1, #1
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f002 f83e 	bl	80104d4 <USBD_LL_PrepareReceive>
 800e458:	e007      	b.n	800e46a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e460:	2340      	movs	r3, #64	@ 0x40
 800e462:	2101      	movs	r1, #1
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f002 f835 	bl	80104d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e46a:	2300      	movs	r3, #0
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	460b      	mov	r3, r1
 800e47e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e480:	2181      	movs	r1, #129	@ 0x81
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f001 ff5d 	bl	8010342 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2200      	movs	r2, #0
 800e48c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e48e:	2101      	movs	r1, #1
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f001 ff56 	bl	8010342 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2200      	movs	r2, #0
 800e49a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e49e:	2182      	movs	r1, #130	@ 0x82
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f001 ff4e 	bl	8010342 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00e      	beq.n	800e4de <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f002 f877 	bl	80105c4 <USBD_static_free>
    pdev->pClassData = NULL;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e4de:	2300      	movs	r3, #0
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3708      	adds	r7, #8
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b086      	sub	sp, #24
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e4f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e4fe:	2300      	movs	r3, #0
 800e500:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e502:	2300      	movs	r3, #0
 800e504:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d101      	bne.n	800e510 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e50c:	2303      	movs	r3, #3
 800e50e:	e0af      	b.n	800e670 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d03f      	beq.n	800e59c <USBD_CDC_Setup+0xb4>
 800e51c:	2b20      	cmp	r3, #32
 800e51e:	f040 809f 	bne.w	800e660 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	88db      	ldrh	r3, [r3, #6]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d02e      	beq.n	800e588 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	b25b      	sxtb	r3, r3
 800e530:	2b00      	cmp	r3, #0
 800e532:	da16      	bge.n	800e562 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e53a:	689b      	ldr	r3, [r3, #8]
 800e53c:	683a      	ldr	r2, [r7, #0]
 800e53e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e540:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e542:	683a      	ldr	r2, [r7, #0]
 800e544:	88d2      	ldrh	r2, [r2, #6]
 800e546:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	88db      	ldrh	r3, [r3, #6]
 800e54c:	2b07      	cmp	r3, #7
 800e54e:	bf28      	it	cs
 800e550:	2307      	movcs	r3, #7
 800e552:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	89fa      	ldrh	r2, [r7, #14]
 800e558:	4619      	mov	r1, r3
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f001 facd 	bl	800fafa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e560:	e085      	b.n	800e66e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	785a      	ldrb	r2, [r3, #1]
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	88db      	ldrh	r3, [r3, #6]
 800e570:	b2da      	uxtb	r2, r3
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e578:	6939      	ldr	r1, [r7, #16]
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	88db      	ldrh	r3, [r3, #6]
 800e57e:	461a      	mov	r2, r3
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f001 fae6 	bl	800fb52 <USBD_CtlPrepareRx>
      break;
 800e586:	e072      	b.n	800e66e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e58e:	689b      	ldr	r3, [r3, #8]
 800e590:	683a      	ldr	r2, [r7, #0]
 800e592:	7850      	ldrb	r0, [r2, #1]
 800e594:	2200      	movs	r2, #0
 800e596:	6839      	ldr	r1, [r7, #0]
 800e598:	4798      	blx	r3
      break;
 800e59a:	e068      	b.n	800e66e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	785b      	ldrb	r3, [r3, #1]
 800e5a0:	2b0b      	cmp	r3, #11
 800e5a2:	d852      	bhi.n	800e64a <USBD_CDC_Setup+0x162>
 800e5a4:	a201      	add	r2, pc, #4	@ (adr r2, 800e5ac <USBD_CDC_Setup+0xc4>)
 800e5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5aa:	bf00      	nop
 800e5ac:	0800e5dd 	.word	0x0800e5dd
 800e5b0:	0800e659 	.word	0x0800e659
 800e5b4:	0800e64b 	.word	0x0800e64b
 800e5b8:	0800e64b 	.word	0x0800e64b
 800e5bc:	0800e64b 	.word	0x0800e64b
 800e5c0:	0800e64b 	.word	0x0800e64b
 800e5c4:	0800e64b 	.word	0x0800e64b
 800e5c8:	0800e64b 	.word	0x0800e64b
 800e5cc:	0800e64b 	.word	0x0800e64b
 800e5d0:	0800e64b 	.word	0x0800e64b
 800e5d4:	0800e607 	.word	0x0800e607
 800e5d8:	0800e631 	.word	0x0800e631
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	2b03      	cmp	r3, #3
 800e5e6:	d107      	bne.n	800e5f8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e5e8:	f107 030a 	add.w	r3, r7, #10
 800e5ec:	2202      	movs	r2, #2
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f001 fa82 	bl	800fafa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e5f6:	e032      	b.n	800e65e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e5f8:	6839      	ldr	r1, [r7, #0]
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f001 fa0c 	bl	800fa18 <USBD_CtlError>
            ret = USBD_FAIL;
 800e600:	2303      	movs	r3, #3
 800e602:	75fb      	strb	r3, [r7, #23]
          break;
 800e604:	e02b      	b.n	800e65e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e60c:	b2db      	uxtb	r3, r3
 800e60e:	2b03      	cmp	r3, #3
 800e610:	d107      	bne.n	800e622 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e612:	f107 030d 	add.w	r3, r7, #13
 800e616:	2201      	movs	r2, #1
 800e618:	4619      	mov	r1, r3
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f001 fa6d 	bl	800fafa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e620:	e01d      	b.n	800e65e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e622:	6839      	ldr	r1, [r7, #0]
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f001 f9f7 	bl	800fa18 <USBD_CtlError>
            ret = USBD_FAIL;
 800e62a:	2303      	movs	r3, #3
 800e62c:	75fb      	strb	r3, [r7, #23]
          break;
 800e62e:	e016      	b.n	800e65e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e636:	b2db      	uxtb	r3, r3
 800e638:	2b03      	cmp	r3, #3
 800e63a:	d00f      	beq.n	800e65c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e63c:	6839      	ldr	r1, [r7, #0]
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f001 f9ea 	bl	800fa18 <USBD_CtlError>
            ret = USBD_FAIL;
 800e644:	2303      	movs	r3, #3
 800e646:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e648:	e008      	b.n	800e65c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e64a:	6839      	ldr	r1, [r7, #0]
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f001 f9e3 	bl	800fa18 <USBD_CtlError>
          ret = USBD_FAIL;
 800e652:	2303      	movs	r3, #3
 800e654:	75fb      	strb	r3, [r7, #23]
          break;
 800e656:	e002      	b.n	800e65e <USBD_CDC_Setup+0x176>
          break;
 800e658:	bf00      	nop
 800e65a:	e008      	b.n	800e66e <USBD_CDC_Setup+0x186>
          break;
 800e65c:	bf00      	nop
      }
      break;
 800e65e:	e006      	b.n	800e66e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e660:	6839      	ldr	r1, [r7, #0]
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f001 f9d8 	bl	800fa18 <USBD_CtlError>
      ret = USBD_FAIL;
 800e668:	2303      	movs	r3, #3
 800e66a:	75fb      	strb	r3, [r7, #23]
      break;
 800e66c:	bf00      	nop
  }

  return (uint8_t)ret;
 800e66e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3718      	adds	r7, #24
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	460b      	mov	r3, r1
 800e682:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e68a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e692:	2b00      	cmp	r3, #0
 800e694:	d101      	bne.n	800e69a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e696:	2303      	movs	r3, #3
 800e698:	e04f      	b.n	800e73a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e6a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e6a2:	78fa      	ldrb	r2, [r7, #3]
 800e6a4:	6879      	ldr	r1, [r7, #4]
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	4413      	add	r3, r2
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	440b      	add	r3, r1
 800e6b0:	3318      	adds	r3, #24
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d029      	beq.n	800e70c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e6b8:	78fa      	ldrb	r2, [r7, #3]
 800e6ba:	6879      	ldr	r1, [r7, #4]
 800e6bc:	4613      	mov	r3, r2
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	4413      	add	r3, r2
 800e6c2:	009b      	lsls	r3, r3, #2
 800e6c4:	440b      	add	r3, r1
 800e6c6:	3318      	adds	r3, #24
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	78f9      	ldrb	r1, [r7, #3]
 800e6cc:	68f8      	ldr	r0, [r7, #12]
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	009b      	lsls	r3, r3, #2
 800e6d2:	440b      	add	r3, r1
 800e6d4:	00db      	lsls	r3, r3, #3
 800e6d6:	4403      	add	r3, r0
 800e6d8:	3320      	adds	r3, #32
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800e6e0:	fb01 f303 	mul.w	r3, r1, r3
 800e6e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d110      	bne.n	800e70c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e6ea:	78fa      	ldrb	r2, [r7, #3]
 800e6ec:	6879      	ldr	r1, [r7, #4]
 800e6ee:	4613      	mov	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4413      	add	r3, r2
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	440b      	add	r3, r1
 800e6f8:	3318      	adds	r3, #24
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e6fe:	78f9      	ldrb	r1, [r7, #3]
 800e700:	2300      	movs	r3, #0
 800e702:	2200      	movs	r2, #0
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f001 fec4 	bl	8010492 <USBD_LL_Transmit>
 800e70a:	e015      	b.n	800e738 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	2200      	movs	r2, #0
 800e710:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e71a:	691b      	ldr	r3, [r3, #16]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00b      	beq.n	800e738 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e726:	691b      	ldr	r3, [r3, #16]
 800e728:	68ba      	ldr	r2, [r7, #8]
 800e72a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e72e:	68ba      	ldr	r2, [r7, #8]
 800e730:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e734:	78fa      	ldrb	r2, [r7, #3]
 800e736:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e738:	2300      	movs	r3, #0
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}

0800e742 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e742:	b580      	push	{r7, lr}
 800e744:	b084      	sub	sp, #16
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
 800e74a:	460b      	mov	r3, r1
 800e74c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e754:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d101      	bne.n	800e764 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e760:	2303      	movs	r3, #3
 800e762:	e015      	b.n	800e790 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e764:	78fb      	ldrb	r3, [r7, #3]
 800e766:	4619      	mov	r1, r3
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f001 fed4 	bl	8010516 <USBD_LL_GetRxDataSize>
 800e76e:	4602      	mov	r2, r0
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e784:	68fa      	ldr	r2, [r7, #12]
 800e786:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e78a:	4611      	mov	r1, r2
 800e78c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e78e:	2300      	movs	r3, #0
}
 800e790:	4618      	mov	r0, r3
 800e792:	3710      	adds	r7, #16
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e7a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d101      	bne.n	800e7b2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e7ae:	2303      	movs	r3, #3
 800e7b0:	e01a      	b.n	800e7e8 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d014      	beq.n	800e7e6 <USBD_CDC_EP0_RxReady+0x4e>
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e7c2:	2bff      	cmp	r3, #255	@ 0xff
 800e7c4:	d00f      	beq.n	800e7e6 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e7cc:	689b      	ldr	r3, [r3, #8]
 800e7ce:	68fa      	ldr	r2, [r7, #12]
 800e7d0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800e7d4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e7d6:	68fa      	ldr	r2, [r7, #12]
 800e7d8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e7dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	22ff      	movs	r2, #255	@ 0xff
 800e7e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e7e6:	2300      	movs	r3, #0
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3710      	adds	r7, #16
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2243      	movs	r2, #67	@ 0x43
 800e7fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e7fe:	4b03      	ldr	r3, [pc, #12]	@ (800e80c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e800:	4618      	mov	r0, r3
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr
 800e80c:	200000b8 	.word	0x200000b8

0800e810 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2243      	movs	r2, #67	@ 0x43
 800e81c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e81e:	4b03      	ldr	r3, [pc, #12]	@ (800e82c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e820:	4618      	mov	r0, r3
 800e822:	370c      	adds	r7, #12
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr
 800e82c:	20000074 	.word	0x20000074

0800e830 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e830:	b480      	push	{r7}
 800e832:	b083      	sub	sp, #12
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2243      	movs	r2, #67	@ 0x43
 800e83c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e83e:	4b03      	ldr	r3, [pc, #12]	@ (800e84c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e840:	4618      	mov	r0, r3
 800e842:	370c      	adds	r7, #12
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr
 800e84c:	200000fc 	.word	0x200000fc

0800e850 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e850:	b480      	push	{r7}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	220a      	movs	r2, #10
 800e85c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e85e:	4b03      	ldr	r3, [pc, #12]	@ (800e86c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e860:	4618      	mov	r0, r3
 800e862:	370c      	adds	r7, #12
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr
 800e86c:	20000030 	.word	0x20000030

0800e870 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d101      	bne.n	800e884 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e880:	2303      	movs	r3, #3
 800e882:	e004      	b.n	800e88e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	683a      	ldr	r2, [r7, #0]
 800e888:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800e88c:	2300      	movs	r3, #0
}
 800e88e:	4618      	mov	r0, r3
 800e890:	370c      	adds	r7, #12
 800e892:	46bd      	mov	sp, r7
 800e894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e898:	4770      	bx	lr

0800e89a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e89a:	b480      	push	{r7}
 800e89c:	b087      	sub	sp, #28
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	60f8      	str	r0, [r7, #12]
 800e8a2:	60b9      	str	r1, [r7, #8]
 800e8a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e8ac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d101      	bne.n	800e8b8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e8b4:	2303      	movs	r3, #3
 800e8b6:	e008      	b.n	800e8ca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	68ba      	ldr	r2, [r7, #8]
 800e8bc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	687a      	ldr	r2, [r7, #4]
 800e8c4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e8c8:	2300      	movs	r3, #0
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	371c      	adds	r7, #28
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr

0800e8d6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e8d6:	b480      	push	{r7}
 800e8d8:	b085      	sub	sp, #20
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
 800e8de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e8e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d101      	bne.n	800e8f2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e8ee:	2303      	movs	r3, #3
 800e8f0:	e004      	b.n	800e8fc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	683a      	ldr	r2, [r7, #0]
 800e8f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e8fa:	2300      	movs	r3, #0
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3714      	adds	r7, #20
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr

0800e908 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e916:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e918:	2301      	movs	r3, #1
 800e91a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e922:	2b00      	cmp	r3, #0
 800e924:	d101      	bne.n	800e92a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e926:	2303      	movs	r3, #3
 800e928:	e01a      	b.n	800e960 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e930:	2b00      	cmp	r3, #0
 800e932:	d114      	bne.n	800e95e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	2201      	movs	r2, #1
 800e938:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e952:	2181      	movs	r1, #129	@ 0x81
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f001 fd9c 	bl	8010492 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e95a:	2300      	movs	r3, #0
 800e95c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e960:	4618      	mov	r0, r3
 800e962:	3710      	adds	r7, #16
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b084      	sub	sp, #16
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e976:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d101      	bne.n	800e986 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e982:	2303      	movs	r3, #3
 800e984:	e016      	b.n	800e9b4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	7c1b      	ldrb	r3, [r3, #16]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d109      	bne.n	800e9a2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e994:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e998:	2101      	movs	r1, #1
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f001 fd9a 	bl	80104d4 <USBD_LL_PrepareReceive>
 800e9a0:	e007      	b.n	800e9b2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e9a8:	2340      	movs	r3, #64	@ 0x40
 800e9aa:	2101      	movs	r1, #1
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f001 fd91 	bl	80104d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e9b2:	2300      	movs	r3, #0
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3710      	adds	r7, #16
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b086      	sub	sp, #24
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	4613      	mov	r3, r2
 800e9c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d101      	bne.n	800e9d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e9d0:	2303      	movs	r3, #3
 800e9d2:	e01f      	b.n	800ea14 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d003      	beq.n	800e9fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	68ba      	ldr	r2, [r7, #8]
 800e9f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	79fa      	ldrb	r2, [r7, #7]
 800ea06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ea08:	68f8      	ldr	r0, [r7, #12]
 800ea0a:	f001 fbf9 	bl	8010200 <USBD_LL_Init>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ea12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3718      	adds	r7, #24
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ea26:	2300      	movs	r3, #0
 800ea28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d101      	bne.n	800ea34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ea30:	2303      	movs	r3, #3
 800ea32:	e016      	b.n	800ea62 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	683a      	ldr	r2, [r7, #0]
 800ea38:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d00b      	beq.n	800ea60 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea50:	f107 020e 	add.w	r2, r7, #14
 800ea54:	4610      	mov	r0, r2
 800ea56:	4798      	blx	r3
 800ea58:	4602      	mov	r2, r0
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3710      	adds	r7, #16
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b082      	sub	sp, #8
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f001 fc24 	bl	80102c0 <USBD_LL_Start>
 800ea78:	4603      	mov	r3, r0
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3708      	adds	r7, #8
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}

0800ea82 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ea82:	b480      	push	{r7}
 800ea84:	b083      	sub	sp, #12
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ea8a:	2300      	movs	r3, #0
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	370c      	adds	r7, #12
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr

0800ea98 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800eaa4:	2303      	movs	r3, #3
 800eaa6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d009      	beq.n	800eac6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	78fa      	ldrb	r2, [r7, #3]
 800eabc:	4611      	mov	r1, r2
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	4798      	blx	r3
 800eac2:	4603      	mov	r3, r0
 800eac4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800eac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3710      	adds	r7, #16
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	460b      	mov	r3, r1
 800eada:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d007      	beq.n	800eaf6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	78fa      	ldrb	r2, [r7, #3]
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	4798      	blx	r3
  }

  return USBD_OK;
 800eaf6:	2300      	movs	r3, #0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb10:	6839      	ldr	r1, [r7, #0]
 800eb12:	4618      	mov	r0, r3
 800eb14:	f000 ff46 	bl	800f9a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800eb26:	461a      	mov	r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eb34:	f003 031f 	and.w	r3, r3, #31
 800eb38:	2b02      	cmp	r3, #2
 800eb3a:	d01a      	beq.n	800eb72 <USBD_LL_SetupStage+0x72>
 800eb3c:	2b02      	cmp	r3, #2
 800eb3e:	d822      	bhi.n	800eb86 <USBD_LL_SetupStage+0x86>
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d002      	beq.n	800eb4a <USBD_LL_SetupStage+0x4a>
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d00a      	beq.n	800eb5e <USBD_LL_SetupStage+0x5e>
 800eb48:	e01d      	b.n	800eb86 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb50:	4619      	mov	r1, r3
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 f9ee 	bl	800ef34 <USBD_StdDevReq>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	73fb      	strb	r3, [r7, #15]
      break;
 800eb5c:	e020      	b.n	800eba0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb64:	4619      	mov	r1, r3
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 fa52 	bl	800f010 <USBD_StdItfReq>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	73fb      	strb	r3, [r7, #15]
      break;
 800eb70:	e016      	b.n	800eba0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb78:	4619      	mov	r1, r3
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f000 fa91 	bl	800f0a2 <USBD_StdEPReq>
 800eb80:	4603      	mov	r3, r0
 800eb82:	73fb      	strb	r3, [r7, #15]
      break;
 800eb84:	e00c      	b.n	800eba0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eb8c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	4619      	mov	r1, r3
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f001 fbf3 	bl	8010380 <USBD_LL_StallEP>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	73fb      	strb	r3, [r7, #15]
      break;
 800eb9e:	bf00      	nop
  }

  return ret;
 800eba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3710      	adds	r7, #16
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b086      	sub	sp, #24
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	60f8      	str	r0, [r7, #12]
 800ebb2:	460b      	mov	r3, r1
 800ebb4:	607a      	str	r2, [r7, #4]
 800ebb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ebb8:	7afb      	ldrb	r3, [r7, #11]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d138      	bne.n	800ec30 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ebc4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ebcc:	2b03      	cmp	r3, #3
 800ebce:	d14a      	bne.n	800ec66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	689a      	ldr	r2, [r3, #8]
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d913      	bls.n	800ec04 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	689a      	ldr	r2, [r3, #8]
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	68db      	ldr	r3, [r3, #12]
 800ebe4:	1ad2      	subs	r2, r2, r3
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	68da      	ldr	r2, [r3, #12]
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	bf28      	it	cs
 800ebf6:	4613      	movcs	r3, r2
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	6879      	ldr	r1, [r7, #4]
 800ebfc:	68f8      	ldr	r0, [r7, #12]
 800ebfe:	f000 ffc5 	bl	800fb8c <USBD_CtlContinueRx>
 800ec02:	e030      	b.n	800ec66 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec0a:	b2db      	uxtb	r3, r3
 800ec0c:	2b03      	cmp	r3, #3
 800ec0e:	d10b      	bne.n	800ec28 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec16:	691b      	ldr	r3, [r3, #16]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d005      	beq.n	800ec28 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec22:	691b      	ldr	r3, [r3, #16]
 800ec24:	68f8      	ldr	r0, [r7, #12]
 800ec26:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f000 ffc0 	bl	800fbae <USBD_CtlSendStatus>
 800ec2e:	e01a      	b.n	800ec66 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec36:	b2db      	uxtb	r3, r3
 800ec38:	2b03      	cmp	r3, #3
 800ec3a:	d114      	bne.n	800ec66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec42:	699b      	ldr	r3, [r3, #24]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d00e      	beq.n	800ec66 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec4e:	699b      	ldr	r3, [r3, #24]
 800ec50:	7afa      	ldrb	r2, [r7, #11]
 800ec52:	4611      	mov	r1, r2
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	4798      	blx	r3
 800ec58:	4603      	mov	r3, r0
 800ec5a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ec5c:	7dfb      	ldrb	r3, [r7, #23]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d001      	beq.n	800ec66 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ec62:	7dfb      	ldrb	r3, [r7, #23]
 800ec64:	e000      	b.n	800ec68 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ec66:	2300      	movs	r3, #0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3718      	adds	r7, #24
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b086      	sub	sp, #24
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	607a      	str	r2, [r7, #4]
 800ec7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ec7e:	7afb      	ldrb	r3, [r7, #11]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d16b      	bne.n	800ed5c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	3314      	adds	r3, #20
 800ec88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ec90:	2b02      	cmp	r3, #2
 800ec92:	d156      	bne.n	800ed42 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	689a      	ldr	r2, [r3, #8]
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	68db      	ldr	r3, [r3, #12]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d914      	bls.n	800ecca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	689a      	ldr	r2, [r3, #8]
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	68db      	ldr	r3, [r3, #12]
 800eca8:	1ad2      	subs	r2, r2, r3
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	689b      	ldr	r3, [r3, #8]
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	6879      	ldr	r1, [r7, #4]
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	f000 ff3a 	bl	800fb30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	2100      	movs	r1, #0
 800ecc2:	68f8      	ldr	r0, [r7, #12]
 800ecc4:	f001 fc06 	bl	80104d4 <USBD_LL_PrepareReceive>
 800ecc8:	e03b      	b.n	800ed42 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	68da      	ldr	r2, [r3, #12]
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	689b      	ldr	r3, [r3, #8]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d11c      	bne.n	800ed10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	685a      	ldr	r2, [r3, #4]
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d316      	bcc.n	800ed10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	685a      	ldr	r2, [r3, #4]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d20f      	bcs.n	800ed10 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	2100      	movs	r1, #0
 800ecf4:	68f8      	ldr	r0, [r7, #12]
 800ecf6:	f000 ff1b 	bl	800fb30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed02:	2300      	movs	r3, #0
 800ed04:	2200      	movs	r2, #0
 800ed06:	2100      	movs	r1, #0
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f001 fbe3 	bl	80104d4 <USBD_LL_PrepareReceive>
 800ed0e:	e018      	b.n	800ed42 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	2b03      	cmp	r3, #3
 800ed1a:	d10b      	bne.n	800ed34 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed22:	68db      	ldr	r3, [r3, #12]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d005      	beq.n	800ed34 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed2e:	68db      	ldr	r3, [r3, #12]
 800ed30:	68f8      	ldr	r0, [r7, #12]
 800ed32:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed34:	2180      	movs	r1, #128	@ 0x80
 800ed36:	68f8      	ldr	r0, [r7, #12]
 800ed38:	f001 fb22 	bl	8010380 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ed3c:	68f8      	ldr	r0, [r7, #12]
 800ed3e:	f000 ff49 	bl	800fbd4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d122      	bne.n	800ed92 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ed4c:	68f8      	ldr	r0, [r7, #12]
 800ed4e:	f7ff fe98 	bl	800ea82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2200      	movs	r2, #0
 800ed56:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ed5a:	e01a      	b.n	800ed92 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	2b03      	cmp	r3, #3
 800ed66:	d114      	bne.n	800ed92 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed6e:	695b      	ldr	r3, [r3, #20]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d00e      	beq.n	800ed92 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed7a:	695b      	ldr	r3, [r3, #20]
 800ed7c:	7afa      	ldrb	r2, [r7, #11]
 800ed7e:	4611      	mov	r1, r2
 800ed80:	68f8      	ldr	r0, [r7, #12]
 800ed82:	4798      	blx	r3
 800ed84:	4603      	mov	r3, r0
 800ed86:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ed88:	7dfb      	ldrb	r3, [r7, #23]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d001      	beq.n	800ed92 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ed8e:	7dfb      	ldrb	r3, [r7, #23]
 800ed90:	e000      	b.n	800ed94 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ed92:	2300      	movs	r3, #0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3718      	adds	r7, #24
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2201      	movs	r2, #1
 800eda8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2200      	movs	r2, #0
 800edbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d101      	bne.n	800edd0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800edcc:	2303      	movs	r3, #3
 800edce:	e02f      	b.n	800ee30 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d00f      	beq.n	800edfa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d009      	beq.n	800edfa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edec:	685b      	ldr	r3, [r3, #4]
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	6852      	ldr	r2, [r2, #4]
 800edf2:	b2d2      	uxtb	r2, r2
 800edf4:	4611      	mov	r1, r2
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800edfa:	2340      	movs	r3, #64	@ 0x40
 800edfc:	2200      	movs	r2, #0
 800edfe:	2100      	movs	r1, #0
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f001 fa78 	bl	80102f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2201      	movs	r2, #1
 800ee0a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2240      	movs	r2, #64	@ 0x40
 800ee12:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee16:	2340      	movs	r3, #64	@ 0x40
 800ee18:	2200      	movs	r2, #0
 800ee1a:	2180      	movs	r1, #128	@ 0x80
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f001 fa6a 	bl	80102f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2201      	movs	r2, #1
 800ee26:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2240      	movs	r2, #64	@ 0x40
 800ee2c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ee2e:	2300      	movs	r3, #0
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b083      	sub	sp, #12
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	460b      	mov	r3, r1
 800ee42:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	78fa      	ldrb	r2, [r7, #3]
 800ee48:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ee4a:	2300      	movs	r3, #0
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	370c      	adds	r7, #12
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr

0800ee58 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee66:	b2da      	uxtb	r2, r3
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2204      	movs	r2, #4
 800ee72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ee76:	2300      	movs	r3, #0
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr

0800ee84 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee92:	b2db      	uxtb	r3, r3
 800ee94:	2b04      	cmp	r3, #4
 800ee96:	d106      	bne.n	800eea6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ee9e:	b2da      	uxtb	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800eea6:	2300      	movs	r3, #0
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	370c      	adds	r7, #12
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr

0800eeb4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d101      	bne.n	800eeca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800eec6:	2303      	movs	r3, #3
 800eec8:	e012      	b.n	800eef0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	2b03      	cmp	r3, #3
 800eed4:	d10b      	bne.n	800eeee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eedc:	69db      	ldr	r3, [r3, #28]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d005      	beq.n	800eeee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eee8:	69db      	ldr	r3, [r3, #28]
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eeee:	2300      	movs	r3, #0
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b087      	sub	sp, #28
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	3301      	adds	r3, #1
 800ef0e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	781b      	ldrb	r3, [r3, #0]
 800ef14:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ef16:	8a3b      	ldrh	r3, [r7, #16]
 800ef18:	021b      	lsls	r3, r3, #8
 800ef1a:	b21a      	sxth	r2, r3
 800ef1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ef20:	4313      	orrs	r3, r2
 800ef22:	b21b      	sxth	r3, r3
 800ef24:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ef26:	89fb      	ldrh	r3, [r7, #14]
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	371c      	adds	r7, #28
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ef4a:	2b40      	cmp	r3, #64	@ 0x40
 800ef4c:	d005      	beq.n	800ef5a <USBD_StdDevReq+0x26>
 800ef4e:	2b40      	cmp	r3, #64	@ 0x40
 800ef50:	d853      	bhi.n	800effa <USBD_StdDevReq+0xc6>
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d00b      	beq.n	800ef6e <USBD_StdDevReq+0x3a>
 800ef56:	2b20      	cmp	r3, #32
 800ef58:	d14f      	bne.n	800effa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef60:	689b      	ldr	r3, [r3, #8]
 800ef62:	6839      	ldr	r1, [r7, #0]
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	4798      	blx	r3
 800ef68:	4603      	mov	r3, r0
 800ef6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ef6c:	e04a      	b.n	800f004 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	785b      	ldrb	r3, [r3, #1]
 800ef72:	2b09      	cmp	r3, #9
 800ef74:	d83b      	bhi.n	800efee <USBD_StdDevReq+0xba>
 800ef76:	a201      	add	r2, pc, #4	@ (adr r2, 800ef7c <USBD_StdDevReq+0x48>)
 800ef78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef7c:	0800efd1 	.word	0x0800efd1
 800ef80:	0800efe5 	.word	0x0800efe5
 800ef84:	0800efef 	.word	0x0800efef
 800ef88:	0800efdb 	.word	0x0800efdb
 800ef8c:	0800efef 	.word	0x0800efef
 800ef90:	0800efaf 	.word	0x0800efaf
 800ef94:	0800efa5 	.word	0x0800efa5
 800ef98:	0800efef 	.word	0x0800efef
 800ef9c:	0800efc7 	.word	0x0800efc7
 800efa0:	0800efb9 	.word	0x0800efb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800efa4:	6839      	ldr	r1, [r7, #0]
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 f9de 	bl	800f368 <USBD_GetDescriptor>
          break;
 800efac:	e024      	b.n	800eff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800efae:	6839      	ldr	r1, [r7, #0]
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 fb6d 	bl	800f690 <USBD_SetAddress>
          break;
 800efb6:	e01f      	b.n	800eff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800efb8:	6839      	ldr	r1, [r7, #0]
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f000 fbac 	bl	800f718 <USBD_SetConfig>
 800efc0:	4603      	mov	r3, r0
 800efc2:	73fb      	strb	r3, [r7, #15]
          break;
 800efc4:	e018      	b.n	800eff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800efc6:	6839      	ldr	r1, [r7, #0]
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f000 fc4b 	bl	800f864 <USBD_GetConfig>
          break;
 800efce:	e013      	b.n	800eff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800efd0:	6839      	ldr	r1, [r7, #0]
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 fc7c 	bl	800f8d0 <USBD_GetStatus>
          break;
 800efd8:	e00e      	b.n	800eff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800efda:	6839      	ldr	r1, [r7, #0]
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f000 fcab 	bl	800f938 <USBD_SetFeature>
          break;
 800efe2:	e009      	b.n	800eff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800efe4:	6839      	ldr	r1, [r7, #0]
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f000 fcba 	bl	800f960 <USBD_ClrFeature>
          break;
 800efec:	e004      	b.n	800eff8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800efee:	6839      	ldr	r1, [r7, #0]
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 fd11 	bl	800fa18 <USBD_CtlError>
          break;
 800eff6:	bf00      	nop
      }
      break;
 800eff8:	e004      	b.n	800f004 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800effa:	6839      	ldr	r1, [r7, #0]
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f000 fd0b 	bl	800fa18 <USBD_CtlError>
      break;
 800f002:	bf00      	nop
  }

  return ret;
 800f004:	7bfb      	ldrb	r3, [r7, #15]
}
 800f006:	4618      	mov	r0, r3
 800f008:	3710      	adds	r7, #16
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop

0800f010 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f01a:	2300      	movs	r3, #0
 800f01c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f026:	2b40      	cmp	r3, #64	@ 0x40
 800f028:	d005      	beq.n	800f036 <USBD_StdItfReq+0x26>
 800f02a:	2b40      	cmp	r3, #64	@ 0x40
 800f02c:	d82f      	bhi.n	800f08e <USBD_StdItfReq+0x7e>
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d001      	beq.n	800f036 <USBD_StdItfReq+0x26>
 800f032:	2b20      	cmp	r3, #32
 800f034:	d12b      	bne.n	800f08e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f03c:	b2db      	uxtb	r3, r3
 800f03e:	3b01      	subs	r3, #1
 800f040:	2b02      	cmp	r3, #2
 800f042:	d81d      	bhi.n	800f080 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	889b      	ldrh	r3, [r3, #4]
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d813      	bhi.n	800f076 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f054:	689b      	ldr	r3, [r3, #8]
 800f056:	6839      	ldr	r1, [r7, #0]
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	4798      	blx	r3
 800f05c:	4603      	mov	r3, r0
 800f05e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	88db      	ldrh	r3, [r3, #6]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d110      	bne.n	800f08a <USBD_StdItfReq+0x7a>
 800f068:	7bfb      	ldrb	r3, [r7, #15]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d10d      	bne.n	800f08a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f000 fd9d 	bl	800fbae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f074:	e009      	b.n	800f08a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f076:	6839      	ldr	r1, [r7, #0]
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f000 fccd 	bl	800fa18 <USBD_CtlError>
          break;
 800f07e:	e004      	b.n	800f08a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f080:	6839      	ldr	r1, [r7, #0]
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 fcc8 	bl	800fa18 <USBD_CtlError>
          break;
 800f088:	e000      	b.n	800f08c <USBD_StdItfReq+0x7c>
          break;
 800f08a:	bf00      	nop
      }
      break;
 800f08c:	e004      	b.n	800f098 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f08e:	6839      	ldr	r1, [r7, #0]
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 fcc1 	bl	800fa18 <USBD_CtlError>
      break;
 800f096:	bf00      	nop
  }

  return ret;
 800f098:	7bfb      	ldrb	r3, [r7, #15]
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b084      	sub	sp, #16
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	889b      	ldrh	r3, [r3, #4]
 800f0b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f0be:	2b40      	cmp	r3, #64	@ 0x40
 800f0c0:	d007      	beq.n	800f0d2 <USBD_StdEPReq+0x30>
 800f0c2:	2b40      	cmp	r3, #64	@ 0x40
 800f0c4:	f200 8145 	bhi.w	800f352 <USBD_StdEPReq+0x2b0>
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00c      	beq.n	800f0e6 <USBD_StdEPReq+0x44>
 800f0cc:	2b20      	cmp	r3, #32
 800f0ce:	f040 8140 	bne.w	800f352 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0d8:	689b      	ldr	r3, [r3, #8]
 800f0da:	6839      	ldr	r1, [r7, #0]
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	4798      	blx	r3
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	73fb      	strb	r3, [r7, #15]
      break;
 800f0e4:	e13a      	b.n	800f35c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	785b      	ldrb	r3, [r3, #1]
 800f0ea:	2b03      	cmp	r3, #3
 800f0ec:	d007      	beq.n	800f0fe <USBD_StdEPReq+0x5c>
 800f0ee:	2b03      	cmp	r3, #3
 800f0f0:	f300 8129 	bgt.w	800f346 <USBD_StdEPReq+0x2a4>
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d07f      	beq.n	800f1f8 <USBD_StdEPReq+0x156>
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d03c      	beq.n	800f176 <USBD_StdEPReq+0xd4>
 800f0fc:	e123      	b.n	800f346 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f104:	b2db      	uxtb	r3, r3
 800f106:	2b02      	cmp	r3, #2
 800f108:	d002      	beq.n	800f110 <USBD_StdEPReq+0x6e>
 800f10a:	2b03      	cmp	r3, #3
 800f10c:	d016      	beq.n	800f13c <USBD_StdEPReq+0x9a>
 800f10e:	e02c      	b.n	800f16a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f110:	7bbb      	ldrb	r3, [r7, #14]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d00d      	beq.n	800f132 <USBD_StdEPReq+0x90>
 800f116:	7bbb      	ldrb	r3, [r7, #14]
 800f118:	2b80      	cmp	r3, #128	@ 0x80
 800f11a:	d00a      	beq.n	800f132 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f11c:	7bbb      	ldrb	r3, [r7, #14]
 800f11e:	4619      	mov	r1, r3
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f001 f92d 	bl	8010380 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f126:	2180      	movs	r1, #128	@ 0x80
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f001 f929 	bl	8010380 <USBD_LL_StallEP>
 800f12e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f130:	e020      	b.n	800f174 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f132:	6839      	ldr	r1, [r7, #0]
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f000 fc6f 	bl	800fa18 <USBD_CtlError>
              break;
 800f13a:	e01b      	b.n	800f174 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	885b      	ldrh	r3, [r3, #2]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d10e      	bne.n	800f162 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f144:	7bbb      	ldrb	r3, [r7, #14]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d00b      	beq.n	800f162 <USBD_StdEPReq+0xc0>
 800f14a:	7bbb      	ldrb	r3, [r7, #14]
 800f14c:	2b80      	cmp	r3, #128	@ 0x80
 800f14e:	d008      	beq.n	800f162 <USBD_StdEPReq+0xc0>
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	88db      	ldrh	r3, [r3, #6]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d104      	bne.n	800f162 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f158:	7bbb      	ldrb	r3, [r7, #14]
 800f15a:	4619      	mov	r1, r3
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f001 f90f 	bl	8010380 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 fd23 	bl	800fbae <USBD_CtlSendStatus>

              break;
 800f168:	e004      	b.n	800f174 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f16a:	6839      	ldr	r1, [r7, #0]
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 fc53 	bl	800fa18 <USBD_CtlError>
              break;
 800f172:	bf00      	nop
          }
          break;
 800f174:	e0ec      	b.n	800f350 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f17c:	b2db      	uxtb	r3, r3
 800f17e:	2b02      	cmp	r3, #2
 800f180:	d002      	beq.n	800f188 <USBD_StdEPReq+0xe6>
 800f182:	2b03      	cmp	r3, #3
 800f184:	d016      	beq.n	800f1b4 <USBD_StdEPReq+0x112>
 800f186:	e030      	b.n	800f1ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f188:	7bbb      	ldrb	r3, [r7, #14]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00d      	beq.n	800f1aa <USBD_StdEPReq+0x108>
 800f18e:	7bbb      	ldrb	r3, [r7, #14]
 800f190:	2b80      	cmp	r3, #128	@ 0x80
 800f192:	d00a      	beq.n	800f1aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f194:	7bbb      	ldrb	r3, [r7, #14]
 800f196:	4619      	mov	r1, r3
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f001 f8f1 	bl	8010380 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f19e:	2180      	movs	r1, #128	@ 0x80
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f001 f8ed 	bl	8010380 <USBD_LL_StallEP>
 800f1a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f1a8:	e025      	b.n	800f1f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f1aa:	6839      	ldr	r1, [r7, #0]
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f000 fc33 	bl	800fa18 <USBD_CtlError>
              break;
 800f1b2:	e020      	b.n	800f1f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	885b      	ldrh	r3, [r3, #2]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d11b      	bne.n	800f1f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f1bc:	7bbb      	ldrb	r3, [r7, #14]
 800f1be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d004      	beq.n	800f1d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f1c6:	7bbb      	ldrb	r3, [r7, #14]
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f001 f8f7 	bl	80103be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f000 fcec 	bl	800fbae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1dc:	689b      	ldr	r3, [r3, #8]
 800f1de:	6839      	ldr	r1, [r7, #0]
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	4798      	blx	r3
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f1e8:	e004      	b.n	800f1f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f1ea:	6839      	ldr	r1, [r7, #0]
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f000 fc13 	bl	800fa18 <USBD_CtlError>
              break;
 800f1f2:	e000      	b.n	800f1f6 <USBD_StdEPReq+0x154>
              break;
 800f1f4:	bf00      	nop
          }
          break;
 800f1f6:	e0ab      	b.n	800f350 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	2b02      	cmp	r3, #2
 800f202:	d002      	beq.n	800f20a <USBD_StdEPReq+0x168>
 800f204:	2b03      	cmp	r3, #3
 800f206:	d032      	beq.n	800f26e <USBD_StdEPReq+0x1cc>
 800f208:	e097      	b.n	800f33a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f20a:	7bbb      	ldrb	r3, [r7, #14]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d007      	beq.n	800f220 <USBD_StdEPReq+0x17e>
 800f210:	7bbb      	ldrb	r3, [r7, #14]
 800f212:	2b80      	cmp	r3, #128	@ 0x80
 800f214:	d004      	beq.n	800f220 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f216:	6839      	ldr	r1, [r7, #0]
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f000 fbfd 	bl	800fa18 <USBD_CtlError>
                break;
 800f21e:	e091      	b.n	800f344 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f224:	2b00      	cmp	r3, #0
 800f226:	da0b      	bge.n	800f240 <USBD_StdEPReq+0x19e>
 800f228:	7bbb      	ldrb	r3, [r7, #14]
 800f22a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f22e:	4613      	mov	r3, r2
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	4413      	add	r3, r2
 800f234:	009b      	lsls	r3, r3, #2
 800f236:	3310      	adds	r3, #16
 800f238:	687a      	ldr	r2, [r7, #4]
 800f23a:	4413      	add	r3, r2
 800f23c:	3304      	adds	r3, #4
 800f23e:	e00b      	b.n	800f258 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f240:	7bbb      	ldrb	r3, [r7, #14]
 800f242:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f246:	4613      	mov	r3, r2
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	4413      	add	r3, r2
 800f24c:	009b      	lsls	r3, r3, #2
 800f24e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	4413      	add	r3, r2
 800f256:	3304      	adds	r3, #4
 800f258:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	2200      	movs	r2, #0
 800f25e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	2202      	movs	r2, #2
 800f264:	4619      	mov	r1, r3
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 fc47 	bl	800fafa <USBD_CtlSendData>
              break;
 800f26c:	e06a      	b.n	800f344 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f26e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f272:	2b00      	cmp	r3, #0
 800f274:	da11      	bge.n	800f29a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f276:	7bbb      	ldrb	r3, [r7, #14]
 800f278:	f003 020f 	and.w	r2, r3, #15
 800f27c:	6879      	ldr	r1, [r7, #4]
 800f27e:	4613      	mov	r3, r2
 800f280:	009b      	lsls	r3, r3, #2
 800f282:	4413      	add	r3, r2
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	440b      	add	r3, r1
 800f288:	3324      	adds	r3, #36	@ 0x24
 800f28a:	881b      	ldrh	r3, [r3, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d117      	bne.n	800f2c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f290:	6839      	ldr	r1, [r7, #0]
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 fbc0 	bl	800fa18 <USBD_CtlError>
                  break;
 800f298:	e054      	b.n	800f344 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f29a:	7bbb      	ldrb	r3, [r7, #14]
 800f29c:	f003 020f 	and.w	r2, r3, #15
 800f2a0:	6879      	ldr	r1, [r7, #4]
 800f2a2:	4613      	mov	r3, r2
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	4413      	add	r3, r2
 800f2a8:	009b      	lsls	r3, r3, #2
 800f2aa:	440b      	add	r3, r1
 800f2ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f2b0:	881b      	ldrh	r3, [r3, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d104      	bne.n	800f2c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f2b6:	6839      	ldr	r1, [r7, #0]
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 fbad 	bl	800fa18 <USBD_CtlError>
                  break;
 800f2be:	e041      	b.n	800f344 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	da0b      	bge.n	800f2e0 <USBD_StdEPReq+0x23e>
 800f2c8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f2ce:	4613      	mov	r3, r2
 800f2d0:	009b      	lsls	r3, r3, #2
 800f2d2:	4413      	add	r3, r2
 800f2d4:	009b      	lsls	r3, r3, #2
 800f2d6:	3310      	adds	r3, #16
 800f2d8:	687a      	ldr	r2, [r7, #4]
 800f2da:	4413      	add	r3, r2
 800f2dc:	3304      	adds	r3, #4
 800f2de:	e00b      	b.n	800f2f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f2e0:	7bbb      	ldrb	r3, [r7, #14]
 800f2e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2e6:	4613      	mov	r3, r2
 800f2e8:	009b      	lsls	r3, r3, #2
 800f2ea:	4413      	add	r3, r2
 800f2ec:	009b      	lsls	r3, r3, #2
 800f2ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	3304      	adds	r3, #4
 800f2f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f2fa:	7bbb      	ldrb	r3, [r7, #14]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d002      	beq.n	800f306 <USBD_StdEPReq+0x264>
 800f300:	7bbb      	ldrb	r3, [r7, #14]
 800f302:	2b80      	cmp	r3, #128	@ 0x80
 800f304:	d103      	bne.n	800f30e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	2200      	movs	r2, #0
 800f30a:	601a      	str	r2, [r3, #0]
 800f30c:	e00e      	b.n	800f32c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f30e:	7bbb      	ldrb	r3, [r7, #14]
 800f310:	4619      	mov	r1, r3
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f001 f872 	bl	80103fc <USBD_LL_IsStallEP>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d003      	beq.n	800f326 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	2201      	movs	r2, #1
 800f322:	601a      	str	r2, [r3, #0]
 800f324:	e002      	b.n	800f32c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	2200      	movs	r2, #0
 800f32a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	2202      	movs	r2, #2
 800f330:	4619      	mov	r1, r3
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f000 fbe1 	bl	800fafa <USBD_CtlSendData>
              break;
 800f338:	e004      	b.n	800f344 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f33a:	6839      	ldr	r1, [r7, #0]
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 fb6b 	bl	800fa18 <USBD_CtlError>
              break;
 800f342:	bf00      	nop
          }
          break;
 800f344:	e004      	b.n	800f350 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f346:	6839      	ldr	r1, [r7, #0]
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f000 fb65 	bl	800fa18 <USBD_CtlError>
          break;
 800f34e:	bf00      	nop
      }
      break;
 800f350:	e004      	b.n	800f35c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f352:	6839      	ldr	r1, [r7, #0]
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 fb5f 	bl	800fa18 <USBD_CtlError>
      break;
 800f35a:	bf00      	nop
  }

  return ret;
 800f35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3710      	adds	r7, #16
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}
	...

0800f368 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f372:	2300      	movs	r3, #0
 800f374:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f376:	2300      	movs	r3, #0
 800f378:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f37a:	2300      	movs	r3, #0
 800f37c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	885b      	ldrh	r3, [r3, #2]
 800f382:	0a1b      	lsrs	r3, r3, #8
 800f384:	b29b      	uxth	r3, r3
 800f386:	3b01      	subs	r3, #1
 800f388:	2b0e      	cmp	r3, #14
 800f38a:	f200 8152 	bhi.w	800f632 <USBD_GetDescriptor+0x2ca>
 800f38e:	a201      	add	r2, pc, #4	@ (adr r2, 800f394 <USBD_GetDescriptor+0x2c>)
 800f390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f394:	0800f405 	.word	0x0800f405
 800f398:	0800f41d 	.word	0x0800f41d
 800f39c:	0800f45d 	.word	0x0800f45d
 800f3a0:	0800f633 	.word	0x0800f633
 800f3a4:	0800f633 	.word	0x0800f633
 800f3a8:	0800f5d3 	.word	0x0800f5d3
 800f3ac:	0800f5ff 	.word	0x0800f5ff
 800f3b0:	0800f633 	.word	0x0800f633
 800f3b4:	0800f633 	.word	0x0800f633
 800f3b8:	0800f633 	.word	0x0800f633
 800f3bc:	0800f633 	.word	0x0800f633
 800f3c0:	0800f633 	.word	0x0800f633
 800f3c4:	0800f633 	.word	0x0800f633
 800f3c8:	0800f633 	.word	0x0800f633
 800f3cc:	0800f3d1 	.word	0x0800f3d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f3d6:	69db      	ldr	r3, [r3, #28]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d00b      	beq.n	800f3f4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f3e2:	69db      	ldr	r3, [r3, #28]
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	7c12      	ldrb	r2, [r2, #16]
 800f3e8:	f107 0108 	add.w	r1, r7, #8
 800f3ec:	4610      	mov	r0, r2
 800f3ee:	4798      	blx	r3
 800f3f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f3f2:	e126      	b.n	800f642 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f3f4:	6839      	ldr	r1, [r7, #0]
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 fb0e 	bl	800fa18 <USBD_CtlError>
        err++;
 800f3fc:	7afb      	ldrb	r3, [r7, #11]
 800f3fe:	3301      	adds	r3, #1
 800f400:	72fb      	strb	r3, [r7, #11]
      break;
 800f402:	e11e      	b.n	800f642 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	687a      	ldr	r2, [r7, #4]
 800f40e:	7c12      	ldrb	r2, [r2, #16]
 800f410:	f107 0108 	add.w	r1, r7, #8
 800f414:	4610      	mov	r0, r2
 800f416:	4798      	blx	r3
 800f418:	60f8      	str	r0, [r7, #12]
      break;
 800f41a:	e112      	b.n	800f642 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	7c1b      	ldrb	r3, [r3, #16]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d10d      	bne.n	800f440 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f42c:	f107 0208 	add.w	r2, r7, #8
 800f430:	4610      	mov	r0, r2
 800f432:	4798      	blx	r3
 800f434:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	3301      	adds	r3, #1
 800f43a:	2202      	movs	r2, #2
 800f43c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f43e:	e100      	b.n	800f642 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f448:	f107 0208 	add.w	r2, r7, #8
 800f44c:	4610      	mov	r0, r2
 800f44e:	4798      	blx	r3
 800f450:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	3301      	adds	r3, #1
 800f456:	2202      	movs	r2, #2
 800f458:	701a      	strb	r2, [r3, #0]
      break;
 800f45a:	e0f2      	b.n	800f642 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	885b      	ldrh	r3, [r3, #2]
 800f460:	b2db      	uxtb	r3, r3
 800f462:	2b05      	cmp	r3, #5
 800f464:	f200 80ac 	bhi.w	800f5c0 <USBD_GetDescriptor+0x258>
 800f468:	a201      	add	r2, pc, #4	@ (adr r2, 800f470 <USBD_GetDescriptor+0x108>)
 800f46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f46e:	bf00      	nop
 800f470:	0800f489 	.word	0x0800f489
 800f474:	0800f4bd 	.word	0x0800f4bd
 800f478:	0800f4f1 	.word	0x0800f4f1
 800f47c:	0800f525 	.word	0x0800f525
 800f480:	0800f559 	.word	0x0800f559
 800f484:	0800f58d 	.word	0x0800f58d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d00b      	beq.n	800f4ac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	7c12      	ldrb	r2, [r2, #16]
 800f4a0:	f107 0108 	add.w	r1, r7, #8
 800f4a4:	4610      	mov	r0, r2
 800f4a6:	4798      	blx	r3
 800f4a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4aa:	e091      	b.n	800f5d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f4ac:	6839      	ldr	r1, [r7, #0]
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 fab2 	bl	800fa18 <USBD_CtlError>
            err++;
 800f4b4:	7afb      	ldrb	r3, [r7, #11]
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	72fb      	strb	r3, [r7, #11]
          break;
 800f4ba:	e089      	b.n	800f5d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4c2:	689b      	ldr	r3, [r3, #8]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d00b      	beq.n	800f4e0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4ce:	689b      	ldr	r3, [r3, #8]
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	7c12      	ldrb	r2, [r2, #16]
 800f4d4:	f107 0108 	add.w	r1, r7, #8
 800f4d8:	4610      	mov	r0, r2
 800f4da:	4798      	blx	r3
 800f4dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4de:	e077      	b.n	800f5d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f4e0:	6839      	ldr	r1, [r7, #0]
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 fa98 	bl	800fa18 <USBD_CtlError>
            err++;
 800f4e8:	7afb      	ldrb	r3, [r7, #11]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	72fb      	strb	r3, [r7, #11]
          break;
 800f4ee:	e06f      	b.n	800f5d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4f6:	68db      	ldr	r3, [r3, #12]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d00b      	beq.n	800f514 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f502:	68db      	ldr	r3, [r3, #12]
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	7c12      	ldrb	r2, [r2, #16]
 800f508:	f107 0108 	add.w	r1, r7, #8
 800f50c:	4610      	mov	r0, r2
 800f50e:	4798      	blx	r3
 800f510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f512:	e05d      	b.n	800f5d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f514:	6839      	ldr	r1, [r7, #0]
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f000 fa7e 	bl	800fa18 <USBD_CtlError>
            err++;
 800f51c:	7afb      	ldrb	r3, [r7, #11]
 800f51e:	3301      	adds	r3, #1
 800f520:	72fb      	strb	r3, [r7, #11]
          break;
 800f522:	e055      	b.n	800f5d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00b      	beq.n	800f548 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f536:	691b      	ldr	r3, [r3, #16]
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	7c12      	ldrb	r2, [r2, #16]
 800f53c:	f107 0108 	add.w	r1, r7, #8
 800f540:	4610      	mov	r0, r2
 800f542:	4798      	blx	r3
 800f544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f546:	e043      	b.n	800f5d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f548:	6839      	ldr	r1, [r7, #0]
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f000 fa64 	bl	800fa18 <USBD_CtlError>
            err++;
 800f550:	7afb      	ldrb	r3, [r7, #11]
 800f552:	3301      	adds	r3, #1
 800f554:	72fb      	strb	r3, [r7, #11]
          break;
 800f556:	e03b      	b.n	800f5d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f55e:	695b      	ldr	r3, [r3, #20]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d00b      	beq.n	800f57c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f56a:	695b      	ldr	r3, [r3, #20]
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	7c12      	ldrb	r2, [r2, #16]
 800f570:	f107 0108 	add.w	r1, r7, #8
 800f574:	4610      	mov	r0, r2
 800f576:	4798      	blx	r3
 800f578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f57a:	e029      	b.n	800f5d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f57c:	6839      	ldr	r1, [r7, #0]
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f000 fa4a 	bl	800fa18 <USBD_CtlError>
            err++;
 800f584:	7afb      	ldrb	r3, [r7, #11]
 800f586:	3301      	adds	r3, #1
 800f588:	72fb      	strb	r3, [r7, #11]
          break;
 800f58a:	e021      	b.n	800f5d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f592:	699b      	ldr	r3, [r3, #24]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d00b      	beq.n	800f5b0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f59e:	699b      	ldr	r3, [r3, #24]
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	7c12      	ldrb	r2, [r2, #16]
 800f5a4:	f107 0108 	add.w	r1, r7, #8
 800f5a8:	4610      	mov	r0, r2
 800f5aa:	4798      	blx	r3
 800f5ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5ae:	e00f      	b.n	800f5d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f5b0:	6839      	ldr	r1, [r7, #0]
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 fa30 	bl	800fa18 <USBD_CtlError>
            err++;
 800f5b8:	7afb      	ldrb	r3, [r7, #11]
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	72fb      	strb	r3, [r7, #11]
          break;
 800f5be:	e007      	b.n	800f5d0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f5c0:	6839      	ldr	r1, [r7, #0]
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 fa28 	bl	800fa18 <USBD_CtlError>
          err++;
 800f5c8:	7afb      	ldrb	r3, [r7, #11]
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f5ce:	bf00      	nop
      }
      break;
 800f5d0:	e037      	b.n	800f642 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	7c1b      	ldrb	r3, [r3, #16]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d109      	bne.n	800f5ee <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5e2:	f107 0208 	add.w	r2, r7, #8
 800f5e6:	4610      	mov	r0, r2
 800f5e8:	4798      	blx	r3
 800f5ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f5ec:	e029      	b.n	800f642 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f5ee:	6839      	ldr	r1, [r7, #0]
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f000 fa11 	bl	800fa18 <USBD_CtlError>
        err++;
 800f5f6:	7afb      	ldrb	r3, [r7, #11]
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	72fb      	strb	r3, [r7, #11]
      break;
 800f5fc:	e021      	b.n	800f642 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	7c1b      	ldrb	r3, [r3, #16]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d10d      	bne.n	800f622 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f60c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f60e:	f107 0208 	add.w	r2, r7, #8
 800f612:	4610      	mov	r0, r2
 800f614:	4798      	blx	r3
 800f616:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	3301      	adds	r3, #1
 800f61c:	2207      	movs	r2, #7
 800f61e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f620:	e00f      	b.n	800f642 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f622:	6839      	ldr	r1, [r7, #0]
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f000 f9f7 	bl	800fa18 <USBD_CtlError>
        err++;
 800f62a:	7afb      	ldrb	r3, [r7, #11]
 800f62c:	3301      	adds	r3, #1
 800f62e:	72fb      	strb	r3, [r7, #11]
      break;
 800f630:	e007      	b.n	800f642 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f632:	6839      	ldr	r1, [r7, #0]
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f000 f9ef 	bl	800fa18 <USBD_CtlError>
      err++;
 800f63a:	7afb      	ldrb	r3, [r7, #11]
 800f63c:	3301      	adds	r3, #1
 800f63e:	72fb      	strb	r3, [r7, #11]
      break;
 800f640:	bf00      	nop
  }

  if (err != 0U)
 800f642:	7afb      	ldrb	r3, [r7, #11]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d11e      	bne.n	800f686 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	88db      	ldrh	r3, [r3, #6]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d016      	beq.n	800f67e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f650:	893b      	ldrh	r3, [r7, #8]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d00e      	beq.n	800f674 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	88da      	ldrh	r2, [r3, #6]
 800f65a:	893b      	ldrh	r3, [r7, #8]
 800f65c:	4293      	cmp	r3, r2
 800f65e:	bf28      	it	cs
 800f660:	4613      	movcs	r3, r2
 800f662:	b29b      	uxth	r3, r3
 800f664:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f666:	893b      	ldrh	r3, [r7, #8]
 800f668:	461a      	mov	r2, r3
 800f66a:	68f9      	ldr	r1, [r7, #12]
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 fa44 	bl	800fafa <USBD_CtlSendData>
 800f672:	e009      	b.n	800f688 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f674:	6839      	ldr	r1, [r7, #0]
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f000 f9ce 	bl	800fa18 <USBD_CtlError>
 800f67c:	e004      	b.n	800f688 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f000 fa95 	bl	800fbae <USBD_CtlSendStatus>
 800f684:	e000      	b.n	800f688 <USBD_GetDescriptor+0x320>
    return;
 800f686:	bf00      	nop
  }
}
 800f688:	3710      	adds	r7, #16
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop

0800f690 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	889b      	ldrh	r3, [r3, #4]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d131      	bne.n	800f706 <USBD_SetAddress+0x76>
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	88db      	ldrh	r3, [r3, #6]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d12d      	bne.n	800f706 <USBD_SetAddress+0x76>
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	885b      	ldrh	r3, [r3, #2]
 800f6ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800f6b0:	d829      	bhi.n	800f706 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	885b      	ldrh	r3, [r3, #2]
 800f6b6:	b2db      	uxtb	r3, r3
 800f6b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b03      	cmp	r3, #3
 800f6c8:	d104      	bne.n	800f6d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f6ca:	6839      	ldr	r1, [r7, #0]
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f000 f9a3 	bl	800fa18 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6d2:	e01d      	b.n	800f710 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	7bfa      	ldrb	r2, [r7, #15]
 800f6d8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f6dc:	7bfb      	ldrb	r3, [r7, #15]
 800f6de:	4619      	mov	r1, r3
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f000 feb7 	bl	8010454 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f000 fa61 	bl	800fbae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f6ec:	7bfb      	ldrb	r3, [r7, #15]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d004      	beq.n	800f6fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2202      	movs	r2, #2
 800f6f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6fa:	e009      	b.n	800f710 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2201      	movs	r2, #1
 800f700:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f704:	e004      	b.n	800f710 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f706:	6839      	ldr	r1, [r7, #0]
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f000 f985 	bl	800fa18 <USBD_CtlError>
  }
}
 800f70e:	bf00      	nop
 800f710:	bf00      	nop
 800f712:	3710      	adds	r7, #16
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}

0800f718 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b084      	sub	sp, #16
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f722:	2300      	movs	r3, #0
 800f724:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	885b      	ldrh	r3, [r3, #2]
 800f72a:	b2da      	uxtb	r2, r3
 800f72c:	4b4c      	ldr	r3, [pc, #304]	@ (800f860 <USBD_SetConfig+0x148>)
 800f72e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f730:	4b4b      	ldr	r3, [pc, #300]	@ (800f860 <USBD_SetConfig+0x148>)
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	2b01      	cmp	r3, #1
 800f736:	d905      	bls.n	800f744 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f738:	6839      	ldr	r1, [r7, #0]
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 f96c 	bl	800fa18 <USBD_CtlError>
    return USBD_FAIL;
 800f740:	2303      	movs	r3, #3
 800f742:	e088      	b.n	800f856 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	2b02      	cmp	r3, #2
 800f74e:	d002      	beq.n	800f756 <USBD_SetConfig+0x3e>
 800f750:	2b03      	cmp	r3, #3
 800f752:	d025      	beq.n	800f7a0 <USBD_SetConfig+0x88>
 800f754:	e071      	b.n	800f83a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f756:	4b42      	ldr	r3, [pc, #264]	@ (800f860 <USBD_SetConfig+0x148>)
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d01c      	beq.n	800f798 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f75e:	4b40      	ldr	r3, [pc, #256]	@ (800f860 <USBD_SetConfig+0x148>)
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	461a      	mov	r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f768:	4b3d      	ldr	r3, [pc, #244]	@ (800f860 <USBD_SetConfig+0x148>)
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	4619      	mov	r1, r3
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f7ff f992 	bl	800ea98 <USBD_SetClassConfig>
 800f774:	4603      	mov	r3, r0
 800f776:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f778:	7bfb      	ldrb	r3, [r7, #15]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d004      	beq.n	800f788 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f77e:	6839      	ldr	r1, [r7, #0]
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f000 f949 	bl	800fa18 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f786:	e065      	b.n	800f854 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f000 fa10 	bl	800fbae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2203      	movs	r2, #3
 800f792:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f796:	e05d      	b.n	800f854 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f000 fa08 	bl	800fbae <USBD_CtlSendStatus>
      break;
 800f79e:	e059      	b.n	800f854 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f7a0:	4b2f      	ldr	r3, [pc, #188]	@ (800f860 <USBD_SetConfig+0x148>)
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d112      	bne.n	800f7ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2202      	movs	r2, #2
 800f7ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f7b0:	4b2b      	ldr	r3, [pc, #172]	@ (800f860 <USBD_SetConfig+0x148>)
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f7ba:	4b29      	ldr	r3, [pc, #164]	@ (800f860 <USBD_SetConfig+0x148>)
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	4619      	mov	r1, r3
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f7ff f985 	bl	800ead0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 f9f1 	bl	800fbae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f7cc:	e042      	b.n	800f854 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f7ce:	4b24      	ldr	r3, [pc, #144]	@ (800f860 <USBD_SetConfig+0x148>)
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d02a      	beq.n	800f832 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f7ff f973 	bl	800ead0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f7ea:	4b1d      	ldr	r3, [pc, #116]	@ (800f860 <USBD_SetConfig+0x148>)
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f7f4:	4b1a      	ldr	r3, [pc, #104]	@ (800f860 <USBD_SetConfig+0x148>)
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	4619      	mov	r1, r3
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7ff f94c 	bl	800ea98 <USBD_SetClassConfig>
 800f800:	4603      	mov	r3, r0
 800f802:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f804:	7bfb      	ldrb	r3, [r7, #15]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d00f      	beq.n	800f82a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f80a:	6839      	ldr	r1, [r7, #0]
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 f903 	bl	800fa18 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	b2db      	uxtb	r3, r3
 800f818:	4619      	mov	r1, r3
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f7ff f958 	bl	800ead0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2202      	movs	r2, #2
 800f824:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f828:	e014      	b.n	800f854 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f000 f9bf 	bl	800fbae <USBD_CtlSendStatus>
      break;
 800f830:	e010      	b.n	800f854 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f000 f9bb 	bl	800fbae <USBD_CtlSendStatus>
      break;
 800f838:	e00c      	b.n	800f854 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f83a:	6839      	ldr	r1, [r7, #0]
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f000 f8eb 	bl	800fa18 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f842:	4b07      	ldr	r3, [pc, #28]	@ (800f860 <USBD_SetConfig+0x148>)
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	4619      	mov	r1, r3
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f7ff f941 	bl	800ead0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f84e:	2303      	movs	r3, #3
 800f850:	73fb      	strb	r3, [r7, #15]
      break;
 800f852:	bf00      	nop
  }

  return ret;
 800f854:	7bfb      	ldrb	r3, [r7, #15]
}
 800f856:	4618      	mov	r0, r3
 800f858:	3710      	adds	r7, #16
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	20000b70 	.word	0x20000b70

0800f864 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	88db      	ldrh	r3, [r3, #6]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d004      	beq.n	800f880 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f876:	6839      	ldr	r1, [r7, #0]
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 f8cd 	bl	800fa18 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f87e:	e023      	b.n	800f8c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f886:	b2db      	uxtb	r3, r3
 800f888:	2b02      	cmp	r3, #2
 800f88a:	dc02      	bgt.n	800f892 <USBD_GetConfig+0x2e>
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	dc03      	bgt.n	800f898 <USBD_GetConfig+0x34>
 800f890:	e015      	b.n	800f8be <USBD_GetConfig+0x5a>
 800f892:	2b03      	cmp	r3, #3
 800f894:	d00b      	beq.n	800f8ae <USBD_GetConfig+0x4a>
 800f896:	e012      	b.n	800f8be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2200      	movs	r2, #0
 800f89c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	3308      	adds	r3, #8
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f000 f927 	bl	800fafa <USBD_CtlSendData>
        break;
 800f8ac:	e00c      	b.n	800f8c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	3304      	adds	r3, #4
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 f91f 	bl	800fafa <USBD_CtlSendData>
        break;
 800f8bc:	e004      	b.n	800f8c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f8be:	6839      	ldr	r1, [r7, #0]
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 f8a9 	bl	800fa18 <USBD_CtlError>
        break;
 800f8c6:	bf00      	nop
}
 800f8c8:	bf00      	nop
 800f8ca:	3708      	adds	r7, #8
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b082      	sub	sp, #8
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	3b01      	subs	r3, #1
 800f8e4:	2b02      	cmp	r3, #2
 800f8e6:	d81e      	bhi.n	800f926 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	88db      	ldrh	r3, [r3, #6]
 800f8ec:	2b02      	cmp	r3, #2
 800f8ee:	d004      	beq.n	800f8fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f8f0:	6839      	ldr	r1, [r7, #0]
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f000 f890 	bl	800fa18 <USBD_CtlError>
        break;
 800f8f8:	e01a      	b.n	800f930 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f906:	2b00      	cmp	r3, #0
 800f908:	d005      	beq.n	800f916 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	68db      	ldr	r3, [r3, #12]
 800f90e:	f043 0202 	orr.w	r2, r3, #2
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	330c      	adds	r3, #12
 800f91a:	2202      	movs	r2, #2
 800f91c:	4619      	mov	r1, r3
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 f8eb 	bl	800fafa <USBD_CtlSendData>
      break;
 800f924:	e004      	b.n	800f930 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f926:	6839      	ldr	r1, [r7, #0]
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 f875 	bl	800fa18 <USBD_CtlError>
      break;
 800f92e:	bf00      	nop
  }
}
 800f930:	bf00      	nop
 800f932:	3708      	adds	r7, #8
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	885b      	ldrh	r3, [r3, #2]
 800f946:	2b01      	cmp	r3, #1
 800f948:	d106      	bne.n	800f958 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2201      	movs	r2, #1
 800f94e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 f92b 	bl	800fbae <USBD_CtlSendStatus>
  }
}
 800f958:	bf00      	nop
 800f95a:	3708      	adds	r7, #8
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f970:	b2db      	uxtb	r3, r3
 800f972:	3b01      	subs	r3, #1
 800f974:	2b02      	cmp	r3, #2
 800f976:	d80b      	bhi.n	800f990 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	885b      	ldrh	r3, [r3, #2]
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d10c      	bne.n	800f99a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2200      	movs	r2, #0
 800f984:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f000 f910 	bl	800fbae <USBD_CtlSendStatus>
      }
      break;
 800f98e:	e004      	b.n	800f99a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f990:	6839      	ldr	r1, [r7, #0]
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 f840 	bl	800fa18 <USBD_CtlError>
      break;
 800f998:	e000      	b.n	800f99c <USBD_ClrFeature+0x3c>
      break;
 800f99a:	bf00      	nop
  }
}
 800f99c:	bf00      	nop
 800f99e:	3708      	adds	r7, #8
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	781a      	ldrb	r2, [r3, #0]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	3301      	adds	r3, #1
 800f9be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	781a      	ldrb	r2, [r3, #0]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f9ce:	68f8      	ldr	r0, [r7, #12]
 800f9d0:	f7ff fa92 	bl	800eef8 <SWAPBYTE>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	461a      	mov	r2, r3
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	3301      	adds	r3, #1
 800f9e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f9e8:	68f8      	ldr	r0, [r7, #12]
 800f9ea:	f7ff fa85 	bl	800eef8 <SWAPBYTE>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	461a      	mov	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	3301      	adds	r3, #1
 800fa00:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fa02:	68f8      	ldr	r0, [r7, #12]
 800fa04:	f7ff fa78 	bl	800eef8 <SWAPBYTE>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	461a      	mov	r2, r3
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	80da      	strh	r2, [r3, #6]
}
 800fa10:	bf00      	nop
 800fa12:	3710      	adds	r7, #16
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa22:	2180      	movs	r1, #128	@ 0x80
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f000 fcab 	bl	8010380 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fa2a:	2100      	movs	r1, #0
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f000 fca7 	bl	8010380 <USBD_LL_StallEP>
}
 800fa32:	bf00      	nop
 800fa34:	3708      	adds	r7, #8
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	b086      	sub	sp, #24
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	60f8      	str	r0, [r7, #12]
 800fa42:	60b9      	str	r1, [r7, #8]
 800fa44:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fa46:	2300      	movs	r3, #0
 800fa48:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d036      	beq.n	800fabe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fa54:	6938      	ldr	r0, [r7, #16]
 800fa56:	f000 f836 	bl	800fac6 <USBD_GetLen>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	005b      	lsls	r3, r3, #1
 800fa62:	b29a      	uxth	r2, r3
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fa68:	7dfb      	ldrb	r3, [r7, #23]
 800fa6a:	68ba      	ldr	r2, [r7, #8]
 800fa6c:	4413      	add	r3, r2
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	7812      	ldrb	r2, [r2, #0]
 800fa72:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa74:	7dfb      	ldrb	r3, [r7, #23]
 800fa76:	3301      	adds	r3, #1
 800fa78:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fa7a:	7dfb      	ldrb	r3, [r7, #23]
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	4413      	add	r3, r2
 800fa80:	2203      	movs	r2, #3
 800fa82:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa84:	7dfb      	ldrb	r3, [r7, #23]
 800fa86:	3301      	adds	r3, #1
 800fa88:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fa8a:	e013      	b.n	800fab4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fa8c:	7dfb      	ldrb	r3, [r7, #23]
 800fa8e:	68ba      	ldr	r2, [r7, #8]
 800fa90:	4413      	add	r3, r2
 800fa92:	693a      	ldr	r2, [r7, #16]
 800fa94:	7812      	ldrb	r2, [r2, #0]
 800fa96:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	613b      	str	r3, [r7, #16]
    idx++;
 800fa9e:	7dfb      	ldrb	r3, [r7, #23]
 800faa0:	3301      	adds	r3, #1
 800faa2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800faa4:	7dfb      	ldrb	r3, [r7, #23]
 800faa6:	68ba      	ldr	r2, [r7, #8]
 800faa8:	4413      	add	r3, r2
 800faaa:	2200      	movs	r2, #0
 800faac:	701a      	strb	r2, [r3, #0]
    idx++;
 800faae:	7dfb      	ldrb	r3, [r7, #23]
 800fab0:	3301      	adds	r3, #1
 800fab2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d1e7      	bne.n	800fa8c <USBD_GetString+0x52>
 800fabc:	e000      	b.n	800fac0 <USBD_GetString+0x86>
    return;
 800fabe:	bf00      	nop
  }
}
 800fac0:	3718      	adds	r7, #24
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}

0800fac6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fac6:	b480      	push	{r7}
 800fac8:	b085      	sub	sp, #20
 800faca:	af00      	add	r7, sp, #0
 800facc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800face:	2300      	movs	r3, #0
 800fad0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fad6:	e005      	b.n	800fae4 <USBD_GetLen+0x1e>
  {
    len++;
 800fad8:	7bfb      	ldrb	r3, [r7, #15]
 800fada:	3301      	adds	r3, #1
 800fadc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	3301      	adds	r3, #1
 800fae2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d1f5      	bne.n	800fad8 <USBD_GetLen+0x12>
  }

  return len;
 800faec:	7bfb      	ldrb	r3, [r7, #15]
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3714      	adds	r7, #20
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr

0800fafa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b084      	sub	sp, #16
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	60f8      	str	r0, [r7, #12]
 800fb02:	60b9      	str	r1, [r7, #8]
 800fb04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2202      	movs	r2, #2
 800fb0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	68ba      	ldr	r2, [r7, #8]
 800fb1e:	2100      	movs	r1, #0
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f000 fcb6 	bl	8010492 <USBD_LL_Transmit>

  return USBD_OK;
 800fb26:	2300      	movs	r3, #0
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3710      	adds	r7, #16
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	68ba      	ldr	r2, [r7, #8]
 800fb40:	2100      	movs	r1, #0
 800fb42:	68f8      	ldr	r0, [r7, #12]
 800fb44:	f000 fca5 	bl	8010492 <USBD_LL_Transmit>

  return USBD_OK;
 800fb48:	2300      	movs	r3, #0
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3710      	adds	r7, #16
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}

0800fb52 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fb52:	b580      	push	{r7, lr}
 800fb54:	b084      	sub	sp, #16
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	60f8      	str	r0, [r7, #12]
 800fb5a:	60b9      	str	r1, [r7, #8]
 800fb5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	2203      	movs	r2, #3
 800fb62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	687a      	ldr	r2, [r7, #4]
 800fb72:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	68ba      	ldr	r2, [r7, #8]
 800fb7a:	2100      	movs	r1, #0
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f000 fca9 	bl	80104d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb82:	2300      	movs	r3, #0
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3710      	adds	r7, #16
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b084      	sub	sp, #16
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	68ba      	ldr	r2, [r7, #8]
 800fb9c:	2100      	movs	r1, #0
 800fb9e:	68f8      	ldr	r0, [r7, #12]
 800fba0:	f000 fc98 	bl	80104d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fba4:	2300      	movs	r3, #0
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3710      	adds	r7, #16
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fbae:	b580      	push	{r7, lr}
 800fbb0:	b082      	sub	sp, #8
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2204      	movs	r2, #4
 800fbba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	2100      	movs	r1, #0
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f000 fc64 	bl	8010492 <USBD_LL_Transmit>

  return USBD_OK;
 800fbca:	2300      	movs	r3, #0
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3708      	adds	r7, #8
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2205      	movs	r2, #5
 800fbe0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	2100      	movs	r1, #0
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f000 fc72 	bl	80104d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbf0:	2300      	movs	r3, #0
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	3708      	adds	r7, #8
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}
	...

0800fbfc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800fc00:	2200      	movs	r2, #0
 800fc02:	4912      	ldr	r1, [pc, #72]	@ (800fc4c <MX_USB_Device_Init+0x50>)
 800fc04:	4812      	ldr	r0, [pc, #72]	@ (800fc50 <MX_USB_Device_Init+0x54>)
 800fc06:	f7fe fed9 	bl	800e9bc <USBD_Init>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d001      	beq.n	800fc14 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800fc10:	f7f3 fc76 	bl	8003500 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800fc14:	490f      	ldr	r1, [pc, #60]	@ (800fc54 <MX_USB_Device_Init+0x58>)
 800fc16:	480e      	ldr	r0, [pc, #56]	@ (800fc50 <MX_USB_Device_Init+0x54>)
 800fc18:	f7fe ff00 	bl	800ea1c <USBD_RegisterClass>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d001      	beq.n	800fc26 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800fc22:	f7f3 fc6d 	bl	8003500 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800fc26:	490c      	ldr	r1, [pc, #48]	@ (800fc58 <MX_USB_Device_Init+0x5c>)
 800fc28:	4809      	ldr	r0, [pc, #36]	@ (800fc50 <MX_USB_Device_Init+0x54>)
 800fc2a:	f7fe fe21 	bl	800e870 <USBD_CDC_RegisterInterface>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d001      	beq.n	800fc38 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800fc34:	f7f3 fc64 	bl	8003500 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800fc38:	4805      	ldr	r0, [pc, #20]	@ (800fc50 <MX_USB_Device_Init+0x54>)
 800fc3a:	f7fe ff16 	bl	800ea6a <USBD_Start>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d001      	beq.n	800fc48 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800fc44:	f7f3 fc5c 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800fc48:	bf00      	nop
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	20000154 	.word	0x20000154
 800fc50:	20000b74 	.word	0x20000b74
 800fc54:	2000003c 	.word	0x2000003c
 800fc58:	20000140 	.word	0x20000140

0800fc5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fc60:	2200      	movs	r2, #0
 800fc62:	4905      	ldr	r1, [pc, #20]	@ (800fc78 <CDC_Init_FS+0x1c>)
 800fc64:	4805      	ldr	r0, [pc, #20]	@ (800fc7c <CDC_Init_FS+0x20>)
 800fc66:	f7fe fe18 	bl	800e89a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fc6a:	4905      	ldr	r1, [pc, #20]	@ (800fc80 <CDC_Init_FS+0x24>)
 800fc6c:	4803      	ldr	r0, [pc, #12]	@ (800fc7c <CDC_Init_FS+0x20>)
 800fc6e:	f7fe fe32 	bl	800e8d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fc72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	20001644 	.word	0x20001644
 800fc7c:	20000b74 	.word	0x20000b74
 800fc80:	20000e44 	.word	0x20000e44

0800fc84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fc84:	b480      	push	{r7}
 800fc86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fc88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc92:	4770      	bx	lr

0800fc94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fc94:	b480      	push	{r7}
 800fc96:	b083      	sub	sp, #12
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	6039      	str	r1, [r7, #0]
 800fc9e:	71fb      	strb	r3, [r7, #7]
 800fca0:	4613      	mov	r3, r2
 800fca2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fca4:	79fb      	ldrb	r3, [r7, #7]
 800fca6:	2b23      	cmp	r3, #35	@ 0x23
 800fca8:	d84a      	bhi.n	800fd40 <CDC_Control_FS+0xac>
 800fcaa:	a201      	add	r2, pc, #4	@ (adr r2, 800fcb0 <CDC_Control_FS+0x1c>)
 800fcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb0:	0800fd41 	.word	0x0800fd41
 800fcb4:	0800fd41 	.word	0x0800fd41
 800fcb8:	0800fd41 	.word	0x0800fd41
 800fcbc:	0800fd41 	.word	0x0800fd41
 800fcc0:	0800fd41 	.word	0x0800fd41
 800fcc4:	0800fd41 	.word	0x0800fd41
 800fcc8:	0800fd41 	.word	0x0800fd41
 800fccc:	0800fd41 	.word	0x0800fd41
 800fcd0:	0800fd41 	.word	0x0800fd41
 800fcd4:	0800fd41 	.word	0x0800fd41
 800fcd8:	0800fd41 	.word	0x0800fd41
 800fcdc:	0800fd41 	.word	0x0800fd41
 800fce0:	0800fd41 	.word	0x0800fd41
 800fce4:	0800fd41 	.word	0x0800fd41
 800fce8:	0800fd41 	.word	0x0800fd41
 800fcec:	0800fd41 	.word	0x0800fd41
 800fcf0:	0800fd41 	.word	0x0800fd41
 800fcf4:	0800fd41 	.word	0x0800fd41
 800fcf8:	0800fd41 	.word	0x0800fd41
 800fcfc:	0800fd41 	.word	0x0800fd41
 800fd00:	0800fd41 	.word	0x0800fd41
 800fd04:	0800fd41 	.word	0x0800fd41
 800fd08:	0800fd41 	.word	0x0800fd41
 800fd0c:	0800fd41 	.word	0x0800fd41
 800fd10:	0800fd41 	.word	0x0800fd41
 800fd14:	0800fd41 	.word	0x0800fd41
 800fd18:	0800fd41 	.word	0x0800fd41
 800fd1c:	0800fd41 	.word	0x0800fd41
 800fd20:	0800fd41 	.word	0x0800fd41
 800fd24:	0800fd41 	.word	0x0800fd41
 800fd28:	0800fd41 	.word	0x0800fd41
 800fd2c:	0800fd41 	.word	0x0800fd41
 800fd30:	0800fd41 	.word	0x0800fd41
 800fd34:	0800fd41 	.word	0x0800fd41
 800fd38:	0800fd41 	.word	0x0800fd41
 800fd3c:	0800fd41 	.word	0x0800fd41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fd40:	bf00      	nop
  }

  return (USBD_OK);
 800fd42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	370c      	adds	r7, #12
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr

0800fd50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > sizeof(USB_RX_Buffer)) {
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fd62:	d903      	bls.n	800fd6c <CDC_Receive_FS+0x1c>
	          *Len = sizeof(USB_RX_Buffer);  // Prevent buffer overflow
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fd6a:	601a      	str	r2, [r3, #0]
	      }
	      memcpy(USB_RX_Buffer, Buf, *Len);
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	461a      	mov	r2, r3
 800fd72:	6879      	ldr	r1, [r7, #4]
 800fd74:	4808      	ldr	r0, [pc, #32]	@ (800fd98 <CDC_Receive_FS+0x48>)
 800fd76:	f001 fcb0 	bl	80116da <memcpy>

	      dataReceivedFlag = 1;
 800fd7a:	4b08      	ldr	r3, [pc, #32]	@ (800fd9c <CDC_Receive_FS+0x4c>)
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	601a      	str	r2, [r3, #0]

	      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fd80:	6879      	ldr	r1, [r7, #4]
 800fd82:	4807      	ldr	r0, [pc, #28]	@ (800fda0 <CDC_Receive_FS+0x50>)
 800fd84:	f7fe fda7 	bl	800e8d6 <USBD_CDC_SetRxBuffer>
	      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fd88:	4805      	ldr	r0, [pc, #20]	@ (800fda0 <CDC_Receive_FS+0x50>)
 800fd8a:	f7fe fded 	bl	800e968 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fd8e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	3708      	adds	r7, #8
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}
 800fd98:	20000a80 	.word	0x20000a80
 800fd9c:	20000b40 	.word	0x20000b40
 800fda0:	20000b74 	.word	0x20000b74

0800fda4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	460b      	mov	r3, r1
 800fdae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fdb4:	4b0d      	ldr	r3, [pc, #52]	@ (800fdec <CDC_Transmit_FS+0x48>)
 800fdb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fdba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d001      	beq.n	800fdca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	e00b      	b.n	800fde2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fdca:	887b      	ldrh	r3, [r7, #2]
 800fdcc:	461a      	mov	r2, r3
 800fdce:	6879      	ldr	r1, [r7, #4]
 800fdd0:	4806      	ldr	r0, [pc, #24]	@ (800fdec <CDC_Transmit_FS+0x48>)
 800fdd2:	f7fe fd62 	bl	800e89a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fdd6:	4805      	ldr	r0, [pc, #20]	@ (800fdec <CDC_Transmit_FS+0x48>)
 800fdd8:	f7fe fd96 	bl	800e908 <USBD_CDC_TransmitPacket>
 800fddc:	4603      	mov	r3, r0
 800fdde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fde0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3710      	adds	r7, #16
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}
 800fdea:	bf00      	nop
 800fdec:	20000b74 	.word	0x20000b74

0800fdf0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	b087      	sub	sp, #28
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	60f8      	str	r0, [r7, #12]
 800fdf8:	60b9      	str	r1, [r7, #8]
 800fdfa:	4613      	mov	r3, r2
 800fdfc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fe02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	371c      	adds	r7, #28
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr
	...

0800fe14 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe14:	b480      	push	{r7}
 800fe16:	b083      	sub	sp, #12
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	6039      	str	r1, [r7, #0]
 800fe1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	2212      	movs	r2, #18
 800fe24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800fe26:	4b03      	ldr	r3, [pc, #12]	@ (800fe34 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	370c      	adds	r7, #12
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr
 800fe34:	20000174 	.word	0x20000174

0800fe38 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b083      	sub	sp, #12
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	4603      	mov	r3, r0
 800fe40:	6039      	str	r1, [r7, #0]
 800fe42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	2204      	movs	r2, #4
 800fe48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fe4a:	4b03      	ldr	r3, [pc, #12]	@ (800fe58 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	370c      	adds	r7, #12
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr
 800fe58:	20000188 	.word	0x20000188

0800fe5c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	4603      	mov	r3, r0
 800fe64:	6039      	str	r1, [r7, #0]
 800fe66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fe68:	79fb      	ldrb	r3, [r7, #7]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d105      	bne.n	800fe7a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800fe6e:	683a      	ldr	r2, [r7, #0]
 800fe70:	4907      	ldr	r1, [pc, #28]	@ (800fe90 <USBD_CDC_ProductStrDescriptor+0x34>)
 800fe72:	4808      	ldr	r0, [pc, #32]	@ (800fe94 <USBD_CDC_ProductStrDescriptor+0x38>)
 800fe74:	f7ff fde1 	bl	800fa3a <USBD_GetString>
 800fe78:	e004      	b.n	800fe84 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800fe7a:	683a      	ldr	r2, [r7, #0]
 800fe7c:	4904      	ldr	r1, [pc, #16]	@ (800fe90 <USBD_CDC_ProductStrDescriptor+0x34>)
 800fe7e:	4805      	ldr	r0, [pc, #20]	@ (800fe94 <USBD_CDC_ProductStrDescriptor+0x38>)
 800fe80:	f7ff fddb 	bl	800fa3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe84:	4b02      	ldr	r3, [pc, #8]	@ (800fe90 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3708      	adds	r7, #8
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	20001e44 	.word	0x20001e44
 800fe94:	08016cd4 	.word	0x08016cd4

0800fe98 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	4603      	mov	r3, r0
 800fea0:	6039      	str	r1, [r7, #0]
 800fea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fea4:	683a      	ldr	r2, [r7, #0]
 800fea6:	4904      	ldr	r1, [pc, #16]	@ (800feb8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800fea8:	4804      	ldr	r0, [pc, #16]	@ (800febc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800feaa:	f7ff fdc6 	bl	800fa3a <USBD_GetString>
  return USBD_StrDesc;
 800feae:	4b02      	ldr	r3, [pc, #8]	@ (800feb8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	3708      	adds	r7, #8
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}
 800feb8:	20001e44 	.word	0x20001e44
 800febc:	08016cec 	.word	0x08016cec

0800fec0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	4603      	mov	r3, r0
 800fec8:	6039      	str	r1, [r7, #0]
 800feca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	221a      	movs	r2, #26
 800fed0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fed2:	f000 f843 	bl	800ff5c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800fed6:	4b02      	ldr	r3, [pc, #8]	@ (800fee0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3708      	adds	r7, #8
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}
 800fee0:	2000018c 	.word	0x2000018c

0800fee4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	4603      	mov	r3, r0
 800feec:	6039      	str	r1, [r7, #0]
 800feee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fef0:	79fb      	ldrb	r3, [r7, #7]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d105      	bne.n	800ff02 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800fef6:	683a      	ldr	r2, [r7, #0]
 800fef8:	4907      	ldr	r1, [pc, #28]	@ (800ff18 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800fefa:	4808      	ldr	r0, [pc, #32]	@ (800ff1c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800fefc:	f7ff fd9d 	bl	800fa3a <USBD_GetString>
 800ff00:	e004      	b.n	800ff0c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ff02:	683a      	ldr	r2, [r7, #0]
 800ff04:	4904      	ldr	r1, [pc, #16]	@ (800ff18 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ff06:	4805      	ldr	r0, [pc, #20]	@ (800ff1c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ff08:	f7ff fd97 	bl	800fa3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff0c:	4b02      	ldr	r3, [pc, #8]	@ (800ff18 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3708      	adds	r7, #8
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	20001e44 	.word	0x20001e44
 800ff1c:	08016d00 	.word	0x08016d00

0800ff20 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b082      	sub	sp, #8
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	4603      	mov	r3, r0
 800ff28:	6039      	str	r1, [r7, #0]
 800ff2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff2c:	79fb      	ldrb	r3, [r7, #7]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d105      	bne.n	800ff3e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ff32:	683a      	ldr	r2, [r7, #0]
 800ff34:	4907      	ldr	r1, [pc, #28]	@ (800ff54 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ff36:	4808      	ldr	r0, [pc, #32]	@ (800ff58 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ff38:	f7ff fd7f 	bl	800fa3a <USBD_GetString>
 800ff3c:	e004      	b.n	800ff48 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ff3e:	683a      	ldr	r2, [r7, #0]
 800ff40:	4904      	ldr	r1, [pc, #16]	@ (800ff54 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ff42:	4805      	ldr	r0, [pc, #20]	@ (800ff58 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ff44:	f7ff fd79 	bl	800fa3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff48:	4b02      	ldr	r3, [pc, #8]	@ (800ff54 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3708      	adds	r7, #8
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop
 800ff54:	20001e44 	.word	0x20001e44
 800ff58:	08016d0c 	.word	0x08016d0c

0800ff5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b084      	sub	sp, #16
 800ff60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ff62:	4b0f      	ldr	r3, [pc, #60]	@ (800ffa0 <Get_SerialNum+0x44>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ff68:	4b0e      	ldr	r3, [pc, #56]	@ (800ffa4 <Get_SerialNum+0x48>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ff6e:	4b0e      	ldr	r3, [pc, #56]	@ (800ffa8 <Get_SerialNum+0x4c>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ff74:	68fa      	ldr	r2, [r7, #12]
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	4413      	add	r3, r2
 800ff7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d009      	beq.n	800ff96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ff82:	2208      	movs	r2, #8
 800ff84:	4909      	ldr	r1, [pc, #36]	@ (800ffac <Get_SerialNum+0x50>)
 800ff86:	68f8      	ldr	r0, [r7, #12]
 800ff88:	f000 f814 	bl	800ffb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ff8c:	2204      	movs	r2, #4
 800ff8e:	4908      	ldr	r1, [pc, #32]	@ (800ffb0 <Get_SerialNum+0x54>)
 800ff90:	68b8      	ldr	r0, [r7, #8]
 800ff92:	f000 f80f 	bl	800ffb4 <IntToUnicode>
  }
}
 800ff96:	bf00      	nop
 800ff98:	3710      	adds	r7, #16
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	1fff7590 	.word	0x1fff7590
 800ffa4:	1fff7594 	.word	0x1fff7594
 800ffa8:	1fff7598 	.word	0x1fff7598
 800ffac:	2000018e 	.word	0x2000018e
 800ffb0:	2000019e 	.word	0x2000019e

0800ffb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b087      	sub	sp, #28
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	60f8      	str	r0, [r7, #12]
 800ffbc:	60b9      	str	r1, [r7, #8]
 800ffbe:	4613      	mov	r3, r2
 800ffc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	75fb      	strb	r3, [r7, #23]
 800ffca:	e027      	b.n	801001c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	0f1b      	lsrs	r3, r3, #28
 800ffd0:	2b09      	cmp	r3, #9
 800ffd2:	d80b      	bhi.n	800ffec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	0f1b      	lsrs	r3, r3, #28
 800ffd8:	b2da      	uxtb	r2, r3
 800ffda:	7dfb      	ldrb	r3, [r7, #23]
 800ffdc:	005b      	lsls	r3, r3, #1
 800ffde:	4619      	mov	r1, r3
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	440b      	add	r3, r1
 800ffe4:	3230      	adds	r2, #48	@ 0x30
 800ffe6:	b2d2      	uxtb	r2, r2
 800ffe8:	701a      	strb	r2, [r3, #0]
 800ffea:	e00a      	b.n	8010002 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	0f1b      	lsrs	r3, r3, #28
 800fff0:	b2da      	uxtb	r2, r3
 800fff2:	7dfb      	ldrb	r3, [r7, #23]
 800fff4:	005b      	lsls	r3, r3, #1
 800fff6:	4619      	mov	r1, r3
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	440b      	add	r3, r1
 800fffc:	3237      	adds	r2, #55	@ 0x37
 800fffe:	b2d2      	uxtb	r2, r2
 8010000:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	011b      	lsls	r3, r3, #4
 8010006:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010008:	7dfb      	ldrb	r3, [r7, #23]
 801000a:	005b      	lsls	r3, r3, #1
 801000c:	3301      	adds	r3, #1
 801000e:	68ba      	ldr	r2, [r7, #8]
 8010010:	4413      	add	r3, r2
 8010012:	2200      	movs	r2, #0
 8010014:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010016:	7dfb      	ldrb	r3, [r7, #23]
 8010018:	3301      	adds	r3, #1
 801001a:	75fb      	strb	r3, [r7, #23]
 801001c:	7dfa      	ldrb	r2, [r7, #23]
 801001e:	79fb      	ldrb	r3, [r7, #7]
 8010020:	429a      	cmp	r2, r3
 8010022:	d3d3      	bcc.n	800ffcc <IntToUnicode+0x18>
  }
}
 8010024:	bf00      	nop
 8010026:	bf00      	nop
 8010028:	371c      	adds	r7, #28
 801002a:	46bd      	mov	sp, r7
 801002c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010030:	4770      	bx	lr
	...

08010034 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b098      	sub	sp, #96	@ 0x60
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801003c:	f107 030c 	add.w	r3, r7, #12
 8010040:	2254      	movs	r2, #84	@ 0x54
 8010042:	2100      	movs	r1, #0
 8010044:	4618      	mov	r0, r3
 8010046:	f001 fab6 	bl	80115b6 <memset>
  if(pcdHandle->Instance==USB)
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	4a15      	ldr	r2, [pc, #84]	@ (80100a4 <HAL_PCD_MspInit+0x70>)
 8010050:	4293      	cmp	r3, r2
 8010052:	d122      	bne.n	801009a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010054:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010058:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801005a:	2300      	movs	r3, #0
 801005c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801005e:	f107 030c 	add.w	r3, r7, #12
 8010062:	4618      	mov	r0, r3
 8010064:	f7f9 f8c6 	bl	80091f4 <HAL_RCCEx_PeriphCLKConfig>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d001      	beq.n	8010072 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801006e:	f7f3 fa47 	bl	8003500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010072:	4b0d      	ldr	r3, [pc, #52]	@ (80100a8 <HAL_PCD_MspInit+0x74>)
 8010074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010076:	4a0c      	ldr	r2, [pc, #48]	@ (80100a8 <HAL_PCD_MspInit+0x74>)
 8010078:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801007c:	6593      	str	r3, [r2, #88]	@ 0x58
 801007e:	4b0a      	ldr	r3, [pc, #40]	@ (80100a8 <HAL_PCD_MspInit+0x74>)
 8010080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010082:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010086:	60bb      	str	r3, [r7, #8]
 8010088:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801008a:	2200      	movs	r2, #0
 801008c:	2100      	movs	r1, #0
 801008e:	2014      	movs	r0, #20
 8010090:	f7f5 fe47 	bl	8005d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010094:	2014      	movs	r0, #20
 8010096:	f7f5 fe5e 	bl	8005d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801009a:	bf00      	nop
 801009c:	3760      	adds	r7, #96	@ 0x60
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	40005c00 	.word	0x40005c00
 80100a8:	40021000 	.word	0x40021000

080100ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b082      	sub	sp, #8
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80100c0:	4619      	mov	r1, r3
 80100c2:	4610      	mov	r0, r2
 80100c4:	f7fe fd1c 	bl	800eb00 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80100c8:	bf00      	nop
 80100ca:	3708      	adds	r7, #8
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b082      	sub	sp, #8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	460b      	mov	r3, r1
 80100da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80100e2:	78fa      	ldrb	r2, [r7, #3]
 80100e4:	6879      	ldr	r1, [r7, #4]
 80100e6:	4613      	mov	r3, r2
 80100e8:	009b      	lsls	r3, r3, #2
 80100ea:	4413      	add	r3, r2
 80100ec:	00db      	lsls	r3, r3, #3
 80100ee:	440b      	add	r3, r1
 80100f0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80100f4:	681a      	ldr	r2, [r3, #0]
 80100f6:	78fb      	ldrb	r3, [r7, #3]
 80100f8:	4619      	mov	r1, r3
 80100fa:	f7fe fd56 	bl	800ebaa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80100fe:	bf00      	nop
 8010100:	3708      	adds	r7, #8
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010106:	b580      	push	{r7, lr}
 8010108:	b082      	sub	sp, #8
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
 801010e:	460b      	mov	r3, r1
 8010110:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010118:	78fa      	ldrb	r2, [r7, #3]
 801011a:	6879      	ldr	r1, [r7, #4]
 801011c:	4613      	mov	r3, r2
 801011e:	009b      	lsls	r3, r3, #2
 8010120:	4413      	add	r3, r2
 8010122:	00db      	lsls	r3, r3, #3
 8010124:	440b      	add	r3, r1
 8010126:	3324      	adds	r3, #36	@ 0x24
 8010128:	681a      	ldr	r2, [r3, #0]
 801012a:	78fb      	ldrb	r3, [r7, #3]
 801012c:	4619      	mov	r1, r3
 801012e:	f7fe fd9f 	bl	800ec70 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8010132:	bf00      	nop
 8010134:	3708      	adds	r7, #8
 8010136:	46bd      	mov	sp, r7
 8010138:	bd80      	pop	{r7, pc}

0801013a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801013a:	b580      	push	{r7, lr}
 801013c:	b082      	sub	sp, #8
 801013e:	af00      	add	r7, sp, #0
 8010140:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010148:	4618      	mov	r0, r3
 801014a:	f7fe feb3 	bl	800eeb4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801014e:	bf00      	nop
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010156:	b580      	push	{r7, lr}
 8010158:	b084      	sub	sp, #16
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801015e:	2301      	movs	r3, #1
 8010160:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	795b      	ldrb	r3, [r3, #5]
 8010166:	2b02      	cmp	r3, #2
 8010168:	d001      	beq.n	801016e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801016a:	f7f3 f9c9 	bl	8003500 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010174:	7bfa      	ldrb	r2, [r7, #15]
 8010176:	4611      	mov	r1, r2
 8010178:	4618      	mov	r0, r3
 801017a:	f7fe fe5d 	bl	800ee38 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010184:	4618      	mov	r0, r3
 8010186:	f7fe fe09 	bl	800ed9c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801018a:	bf00      	nop
 801018c:	3710      	adds	r7, #16
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
	...

08010194 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7fe fe58 	bl	800ee58 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	7a5b      	ldrb	r3, [r3, #9]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d005      	beq.n	80101bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80101b0:	4b04      	ldr	r3, [pc, #16]	@ (80101c4 <HAL_PCD_SuspendCallback+0x30>)
 80101b2:	691b      	ldr	r3, [r3, #16]
 80101b4:	4a03      	ldr	r2, [pc, #12]	@ (80101c4 <HAL_PCD_SuspendCallback+0x30>)
 80101b6:	f043 0306 	orr.w	r3, r3, #6
 80101ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80101bc:	bf00      	nop
 80101be:	3708      	adds	r7, #8
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	e000ed00 	.word	0xe000ed00

080101c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	7a5b      	ldrb	r3, [r3, #9]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d007      	beq.n	80101e8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80101d8:	4b08      	ldr	r3, [pc, #32]	@ (80101fc <HAL_PCD_ResumeCallback+0x34>)
 80101da:	691b      	ldr	r3, [r3, #16]
 80101dc:	4a07      	ldr	r2, [pc, #28]	@ (80101fc <HAL_PCD_ResumeCallback+0x34>)
 80101de:	f023 0306 	bic.w	r3, r3, #6
 80101e2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80101e4:	f000 f9f8 	bl	80105d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7fe fe48 	bl	800ee84 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80101f4:	bf00      	nop
 80101f6:	3708      	adds	r7, #8
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	e000ed00 	.word	0xe000ed00

08010200 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010208:	4a2b      	ldr	r2, [pc, #172]	@ (80102b8 <USBD_LL_Init+0xb8>)
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	4a29      	ldr	r2, [pc, #164]	@ (80102b8 <USBD_LL_Init+0xb8>)
 8010214:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010218:	4b27      	ldr	r3, [pc, #156]	@ (80102b8 <USBD_LL_Init+0xb8>)
 801021a:	4a28      	ldr	r2, [pc, #160]	@ (80102bc <USBD_LL_Init+0xbc>)
 801021c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801021e:	4b26      	ldr	r3, [pc, #152]	@ (80102b8 <USBD_LL_Init+0xb8>)
 8010220:	2208      	movs	r2, #8
 8010222:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010224:	4b24      	ldr	r3, [pc, #144]	@ (80102b8 <USBD_LL_Init+0xb8>)
 8010226:	2202      	movs	r2, #2
 8010228:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801022a:	4b23      	ldr	r3, [pc, #140]	@ (80102b8 <USBD_LL_Init+0xb8>)
 801022c:	2202      	movs	r2, #2
 801022e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010230:	4b21      	ldr	r3, [pc, #132]	@ (80102b8 <USBD_LL_Init+0xb8>)
 8010232:	2200      	movs	r2, #0
 8010234:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010236:	4b20      	ldr	r3, [pc, #128]	@ (80102b8 <USBD_LL_Init+0xb8>)
 8010238:	2200      	movs	r2, #0
 801023a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801023c:	4b1e      	ldr	r3, [pc, #120]	@ (80102b8 <USBD_LL_Init+0xb8>)
 801023e:	2200      	movs	r2, #0
 8010240:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010242:	4b1d      	ldr	r3, [pc, #116]	@ (80102b8 <USBD_LL_Init+0xb8>)
 8010244:	2200      	movs	r2, #0
 8010246:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010248:	481b      	ldr	r0, [pc, #108]	@ (80102b8 <USBD_LL_Init+0xb8>)
 801024a:	f7f6 fcbb 	bl	8006bc4 <HAL_PCD_Init>
 801024e:	4603      	mov	r3, r0
 8010250:	2b00      	cmp	r3, #0
 8010252:	d001      	beq.n	8010258 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8010254:	f7f3 f954 	bl	8003500 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801025e:	2318      	movs	r3, #24
 8010260:	2200      	movs	r2, #0
 8010262:	2100      	movs	r1, #0
 8010264:	f7f8 f976 	bl	8008554 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801026e:	2358      	movs	r3, #88	@ 0x58
 8010270:	2200      	movs	r2, #0
 8010272:	2180      	movs	r1, #128	@ 0x80
 8010274:	f7f8 f96e 	bl	8008554 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801027e:	23c0      	movs	r3, #192	@ 0xc0
 8010280:	2200      	movs	r2, #0
 8010282:	2181      	movs	r1, #129	@ 0x81
 8010284:	f7f8 f966 	bl	8008554 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801028e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8010292:	2200      	movs	r2, #0
 8010294:	2101      	movs	r1, #1
 8010296:	f7f8 f95d 	bl	8008554 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80102a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102a4:	2200      	movs	r2, #0
 80102a6:	2182      	movs	r1, #130	@ 0x82
 80102a8:	f7f8 f954 	bl	8008554 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80102ac:	2300      	movs	r3, #0
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3708      	adds	r7, #8
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	20002044 	.word	0x20002044
 80102bc:	40005c00 	.word	0x40005c00

080102c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b084      	sub	sp, #16
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102c8:	2300      	movs	r3, #0
 80102ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102cc:	2300      	movs	r3, #0
 80102ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7f6 fd42 	bl	8006d60 <HAL_PCD_Start>
 80102dc:	4603      	mov	r3, r0
 80102de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102e0:	7bfb      	ldrb	r3, [r7, #15]
 80102e2:	4618      	mov	r0, r3
 80102e4:	f000 f97e 	bl	80105e4 <USBD_Get_USB_Status>
 80102e8:	4603      	mov	r3, r0
 80102ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3710      	adds	r7, #16
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}

080102f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80102f6:	b580      	push	{r7, lr}
 80102f8:	b084      	sub	sp, #16
 80102fa:	af00      	add	r7, sp, #0
 80102fc:	6078      	str	r0, [r7, #4]
 80102fe:	4608      	mov	r0, r1
 8010300:	4611      	mov	r1, r2
 8010302:	461a      	mov	r2, r3
 8010304:	4603      	mov	r3, r0
 8010306:	70fb      	strb	r3, [r7, #3]
 8010308:	460b      	mov	r3, r1
 801030a:	70bb      	strb	r3, [r7, #2]
 801030c:	4613      	mov	r3, r2
 801030e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010310:	2300      	movs	r3, #0
 8010312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010314:	2300      	movs	r3, #0
 8010316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801031e:	78bb      	ldrb	r3, [r7, #2]
 8010320:	883a      	ldrh	r2, [r7, #0]
 8010322:	78f9      	ldrb	r1, [r7, #3]
 8010324:	f7f6 fe89 	bl	800703a <HAL_PCD_EP_Open>
 8010328:	4603      	mov	r3, r0
 801032a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801032c:	7bfb      	ldrb	r3, [r7, #15]
 801032e:	4618      	mov	r0, r3
 8010330:	f000 f958 	bl	80105e4 <USBD_Get_USB_Status>
 8010334:	4603      	mov	r3, r0
 8010336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010338:	7bbb      	ldrb	r3, [r7, #14]
}
 801033a:	4618      	mov	r0, r3
 801033c:	3710      	adds	r7, #16
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}

08010342 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010342:	b580      	push	{r7, lr}
 8010344:	b084      	sub	sp, #16
 8010346:	af00      	add	r7, sp, #0
 8010348:	6078      	str	r0, [r7, #4]
 801034a:	460b      	mov	r3, r1
 801034c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801034e:	2300      	movs	r3, #0
 8010350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010352:	2300      	movs	r3, #0
 8010354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801035c:	78fa      	ldrb	r2, [r7, #3]
 801035e:	4611      	mov	r1, r2
 8010360:	4618      	mov	r0, r3
 8010362:	f7f6 fec9 	bl	80070f8 <HAL_PCD_EP_Close>
 8010366:	4603      	mov	r3, r0
 8010368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801036a:	7bfb      	ldrb	r3, [r7, #15]
 801036c:	4618      	mov	r0, r3
 801036e:	f000 f939 	bl	80105e4 <USBD_Get_USB_Status>
 8010372:	4603      	mov	r3, r0
 8010374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010376:	7bbb      	ldrb	r3, [r7, #14]
}
 8010378:	4618      	mov	r0, r3
 801037a:	3710      	adds	r7, #16
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}

08010380 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b084      	sub	sp, #16
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	460b      	mov	r3, r1
 801038a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801038c:	2300      	movs	r3, #0
 801038e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010390:	2300      	movs	r3, #0
 8010392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801039a:	78fa      	ldrb	r2, [r7, #3]
 801039c:	4611      	mov	r1, r2
 801039e:	4618      	mov	r0, r3
 80103a0:	f7f6 ff72 	bl	8007288 <HAL_PCD_EP_SetStall>
 80103a4:	4603      	mov	r3, r0
 80103a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103a8:	7bfb      	ldrb	r3, [r7, #15]
 80103aa:	4618      	mov	r0, r3
 80103ac:	f000 f91a 	bl	80105e4 <USBD_Get_USB_Status>
 80103b0:	4603      	mov	r3, r0
 80103b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	3710      	adds	r7, #16
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103be:	b580      	push	{r7, lr}
 80103c0:	b084      	sub	sp, #16
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
 80103c6:	460b      	mov	r3, r1
 80103c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103ca:	2300      	movs	r3, #0
 80103cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103ce:	2300      	movs	r3, #0
 80103d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80103d8:	78fa      	ldrb	r2, [r7, #3]
 80103da:	4611      	mov	r1, r2
 80103dc:	4618      	mov	r0, r3
 80103de:	f7f6 ffa5 	bl	800732c <HAL_PCD_EP_ClrStall>
 80103e2:	4603      	mov	r3, r0
 80103e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103e6:	7bfb      	ldrb	r3, [r7, #15]
 80103e8:	4618      	mov	r0, r3
 80103ea:	f000 f8fb 	bl	80105e4 <USBD_Get_USB_Status>
 80103ee:	4603      	mov	r3, r0
 80103f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3710      	adds	r7, #16
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103fc:	b480      	push	{r7}
 80103fe:	b085      	sub	sp, #20
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	460b      	mov	r3, r1
 8010406:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801040e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010414:	2b00      	cmp	r3, #0
 8010416:	da0b      	bge.n	8010430 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010418:	78fb      	ldrb	r3, [r7, #3]
 801041a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801041e:	68f9      	ldr	r1, [r7, #12]
 8010420:	4613      	mov	r3, r2
 8010422:	009b      	lsls	r3, r3, #2
 8010424:	4413      	add	r3, r2
 8010426:	00db      	lsls	r3, r3, #3
 8010428:	440b      	add	r3, r1
 801042a:	3312      	adds	r3, #18
 801042c:	781b      	ldrb	r3, [r3, #0]
 801042e:	e00b      	b.n	8010448 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010430:	78fb      	ldrb	r3, [r7, #3]
 8010432:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010436:	68f9      	ldr	r1, [r7, #12]
 8010438:	4613      	mov	r3, r2
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	4413      	add	r3, r2
 801043e:	00db      	lsls	r3, r3, #3
 8010440:	440b      	add	r3, r1
 8010442:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010446:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010448:	4618      	mov	r0, r3
 801044a:	3714      	adds	r7, #20
 801044c:	46bd      	mov	sp, r7
 801044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010452:	4770      	bx	lr

08010454 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b084      	sub	sp, #16
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	460b      	mov	r3, r1
 801045e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010460:	2300      	movs	r3, #0
 8010462:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010464:	2300      	movs	r3, #0
 8010466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801046e:	78fa      	ldrb	r2, [r7, #3]
 8010470:	4611      	mov	r1, r2
 8010472:	4618      	mov	r0, r3
 8010474:	f7f6 fdbd 	bl	8006ff2 <HAL_PCD_SetAddress>
 8010478:	4603      	mov	r3, r0
 801047a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801047c:	7bfb      	ldrb	r3, [r7, #15]
 801047e:	4618      	mov	r0, r3
 8010480:	f000 f8b0 	bl	80105e4 <USBD_Get_USB_Status>
 8010484:	4603      	mov	r3, r0
 8010486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010488:	7bbb      	ldrb	r3, [r7, #14]
}
 801048a:	4618      	mov	r0, r3
 801048c:	3710      	adds	r7, #16
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}

08010492 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010492:	b580      	push	{r7, lr}
 8010494:	b086      	sub	sp, #24
 8010496:	af00      	add	r7, sp, #0
 8010498:	60f8      	str	r0, [r7, #12]
 801049a:	607a      	str	r2, [r7, #4]
 801049c:	603b      	str	r3, [r7, #0]
 801049e:	460b      	mov	r3, r1
 80104a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104a2:	2300      	movs	r3, #0
 80104a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104a6:	2300      	movs	r3, #0
 80104a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80104b0:	7af9      	ldrb	r1, [r7, #11]
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	f7f6 feb0 	bl	800721a <HAL_PCD_EP_Transmit>
 80104ba:	4603      	mov	r3, r0
 80104bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104be:	7dfb      	ldrb	r3, [r7, #23]
 80104c0:	4618      	mov	r0, r3
 80104c2:	f000 f88f 	bl	80105e4 <USBD_Get_USB_Status>
 80104c6:	4603      	mov	r3, r0
 80104c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80104ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3718      	adds	r7, #24
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}

080104d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b086      	sub	sp, #24
 80104d8:	af00      	add	r7, sp, #0
 80104da:	60f8      	str	r0, [r7, #12]
 80104dc:	607a      	str	r2, [r7, #4]
 80104de:	603b      	str	r3, [r7, #0]
 80104e0:	460b      	mov	r3, r1
 80104e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104e4:	2300      	movs	r3, #0
 80104e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104e8:	2300      	movs	r3, #0
 80104ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80104f2:	7af9      	ldrb	r1, [r7, #11]
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	f7f6 fe46 	bl	8007188 <HAL_PCD_EP_Receive>
 80104fc:	4603      	mov	r3, r0
 80104fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010500:	7dfb      	ldrb	r3, [r7, #23]
 8010502:	4618      	mov	r0, r3
 8010504:	f000 f86e 	bl	80105e4 <USBD_Get_USB_Status>
 8010508:	4603      	mov	r3, r0
 801050a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801050c:	7dbb      	ldrb	r3, [r7, #22]
}
 801050e:	4618      	mov	r0, r3
 8010510:	3718      	adds	r7, #24
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}

08010516 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010516:	b580      	push	{r7, lr}
 8010518:	b082      	sub	sp, #8
 801051a:	af00      	add	r7, sp, #0
 801051c:	6078      	str	r0, [r7, #4]
 801051e:	460b      	mov	r3, r1
 8010520:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010528:	78fa      	ldrb	r2, [r7, #3]
 801052a:	4611      	mov	r1, r2
 801052c:	4618      	mov	r0, r3
 801052e:	f7f6 fe5c 	bl	80071ea <HAL_PCD_EP_GetRxCount>
 8010532:	4603      	mov	r3, r0
}
 8010534:	4618      	mov	r0, r3
 8010536:	3708      	adds	r7, #8
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	460b      	mov	r3, r1
 8010546:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010548:	78fb      	ldrb	r3, [r7, #3]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d002      	beq.n	8010554 <HAL_PCDEx_LPM_Callback+0x18>
 801054e:	2b01      	cmp	r3, #1
 8010550:	d013      	beq.n	801057a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010552:	e023      	b.n	801059c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	7a5b      	ldrb	r3, [r3, #9]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d007      	beq.n	801056c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801055c:	f000 f83c 	bl	80105d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010560:	4b10      	ldr	r3, [pc, #64]	@ (80105a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010562:	691b      	ldr	r3, [r3, #16]
 8010564:	4a0f      	ldr	r2, [pc, #60]	@ (80105a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010566:	f023 0306 	bic.w	r3, r3, #6
 801056a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010572:	4618      	mov	r0, r3
 8010574:	f7fe fc86 	bl	800ee84 <USBD_LL_Resume>
    break;
 8010578:	e010      	b.n	801059c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010580:	4618      	mov	r0, r3
 8010582:	f7fe fc69 	bl	800ee58 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	7a5b      	ldrb	r3, [r3, #9]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d005      	beq.n	801059a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801058e:	4b05      	ldr	r3, [pc, #20]	@ (80105a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010590:	691b      	ldr	r3, [r3, #16]
 8010592:	4a04      	ldr	r2, [pc, #16]	@ (80105a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010594:	f043 0306 	orr.w	r3, r3, #6
 8010598:	6113      	str	r3, [r2, #16]
    break;
 801059a:	bf00      	nop
}
 801059c:	bf00      	nop
 801059e:	3708      	adds	r7, #8
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}
 80105a4:	e000ed00 	.word	0xe000ed00

080105a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80105a8:	b480      	push	{r7}
 80105aa:	b083      	sub	sp, #12
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80105b0:	4b03      	ldr	r3, [pc, #12]	@ (80105c0 <USBD_static_malloc+0x18>)
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	370c      	adds	r7, #12
 80105b6:	46bd      	mov	sp, r7
 80105b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105bc:	4770      	bx	lr
 80105be:	bf00      	nop
 80105c0:	20002320 	.word	0x20002320

080105c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80105c4:	b480      	push	{r7}
 80105c6:	b083      	sub	sp, #12
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]

}
 80105cc:	bf00      	nop
 80105ce:	370c      	adds	r7, #12
 80105d0:	46bd      	mov	sp, r7
 80105d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d6:	4770      	bx	lr

080105d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80105dc:	f7f0 fed8 	bl	8001390 <SystemClock_Config>
}
 80105e0:	bf00      	nop
 80105e2:	bd80      	pop	{r7, pc}

080105e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b085      	sub	sp, #20
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	4603      	mov	r3, r0
 80105ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105ee:	2300      	movs	r3, #0
 80105f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80105f2:	79fb      	ldrb	r3, [r7, #7]
 80105f4:	2b03      	cmp	r3, #3
 80105f6:	d817      	bhi.n	8010628 <USBD_Get_USB_Status+0x44>
 80105f8:	a201      	add	r2, pc, #4	@ (adr r2, 8010600 <USBD_Get_USB_Status+0x1c>)
 80105fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105fe:	bf00      	nop
 8010600:	08010611 	.word	0x08010611
 8010604:	08010617 	.word	0x08010617
 8010608:	0801061d 	.word	0x0801061d
 801060c:	08010623 	.word	0x08010623
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010610:	2300      	movs	r3, #0
 8010612:	73fb      	strb	r3, [r7, #15]
    break;
 8010614:	e00b      	b.n	801062e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010616:	2303      	movs	r3, #3
 8010618:	73fb      	strb	r3, [r7, #15]
    break;
 801061a:	e008      	b.n	801062e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801061c:	2301      	movs	r3, #1
 801061e:	73fb      	strb	r3, [r7, #15]
    break;
 8010620:	e005      	b.n	801062e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010622:	2303      	movs	r3, #3
 8010624:	73fb      	strb	r3, [r7, #15]
    break;
 8010626:	e002      	b.n	801062e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010628:	2303      	movs	r3, #3
 801062a:	73fb      	strb	r3, [r7, #15]
    break;
 801062c:	bf00      	nop
  }
  return usb_status;
 801062e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010630:	4618      	mov	r0, r3
 8010632:	3714      	adds	r7, #20
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr

0801063c <__cvt>:
 801063c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010640:	ec57 6b10 	vmov	r6, r7, d0
 8010644:	2f00      	cmp	r7, #0
 8010646:	460c      	mov	r4, r1
 8010648:	4619      	mov	r1, r3
 801064a:	463b      	mov	r3, r7
 801064c:	bfbb      	ittet	lt
 801064e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010652:	461f      	movlt	r7, r3
 8010654:	2300      	movge	r3, #0
 8010656:	232d      	movlt	r3, #45	@ 0x2d
 8010658:	700b      	strb	r3, [r1, #0]
 801065a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801065c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010660:	4691      	mov	r9, r2
 8010662:	f023 0820 	bic.w	r8, r3, #32
 8010666:	bfbc      	itt	lt
 8010668:	4632      	movlt	r2, r6
 801066a:	4616      	movlt	r6, r2
 801066c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010670:	d005      	beq.n	801067e <__cvt+0x42>
 8010672:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010676:	d100      	bne.n	801067a <__cvt+0x3e>
 8010678:	3401      	adds	r4, #1
 801067a:	2102      	movs	r1, #2
 801067c:	e000      	b.n	8010680 <__cvt+0x44>
 801067e:	2103      	movs	r1, #3
 8010680:	ab03      	add	r3, sp, #12
 8010682:	9301      	str	r3, [sp, #4]
 8010684:	ab02      	add	r3, sp, #8
 8010686:	9300      	str	r3, [sp, #0]
 8010688:	ec47 6b10 	vmov	d0, r6, r7
 801068c:	4653      	mov	r3, sl
 801068e:	4622      	mov	r2, r4
 8010690:	f001 f8c2 	bl	8011818 <_dtoa_r>
 8010694:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010698:	4605      	mov	r5, r0
 801069a:	d119      	bne.n	80106d0 <__cvt+0x94>
 801069c:	f019 0f01 	tst.w	r9, #1
 80106a0:	d00e      	beq.n	80106c0 <__cvt+0x84>
 80106a2:	eb00 0904 	add.w	r9, r0, r4
 80106a6:	2200      	movs	r2, #0
 80106a8:	2300      	movs	r3, #0
 80106aa:	4630      	mov	r0, r6
 80106ac:	4639      	mov	r1, r7
 80106ae:	f7f0 fa33 	bl	8000b18 <__aeabi_dcmpeq>
 80106b2:	b108      	cbz	r0, 80106b8 <__cvt+0x7c>
 80106b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80106b8:	2230      	movs	r2, #48	@ 0x30
 80106ba:	9b03      	ldr	r3, [sp, #12]
 80106bc:	454b      	cmp	r3, r9
 80106be:	d31e      	bcc.n	80106fe <__cvt+0xc2>
 80106c0:	9b03      	ldr	r3, [sp, #12]
 80106c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80106c4:	1b5b      	subs	r3, r3, r5
 80106c6:	4628      	mov	r0, r5
 80106c8:	6013      	str	r3, [r2, #0]
 80106ca:	b004      	add	sp, #16
 80106cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80106d4:	eb00 0904 	add.w	r9, r0, r4
 80106d8:	d1e5      	bne.n	80106a6 <__cvt+0x6a>
 80106da:	7803      	ldrb	r3, [r0, #0]
 80106dc:	2b30      	cmp	r3, #48	@ 0x30
 80106de:	d10a      	bne.n	80106f6 <__cvt+0xba>
 80106e0:	2200      	movs	r2, #0
 80106e2:	2300      	movs	r3, #0
 80106e4:	4630      	mov	r0, r6
 80106e6:	4639      	mov	r1, r7
 80106e8:	f7f0 fa16 	bl	8000b18 <__aeabi_dcmpeq>
 80106ec:	b918      	cbnz	r0, 80106f6 <__cvt+0xba>
 80106ee:	f1c4 0401 	rsb	r4, r4, #1
 80106f2:	f8ca 4000 	str.w	r4, [sl]
 80106f6:	f8da 3000 	ldr.w	r3, [sl]
 80106fa:	4499      	add	r9, r3
 80106fc:	e7d3      	b.n	80106a6 <__cvt+0x6a>
 80106fe:	1c59      	adds	r1, r3, #1
 8010700:	9103      	str	r1, [sp, #12]
 8010702:	701a      	strb	r2, [r3, #0]
 8010704:	e7d9      	b.n	80106ba <__cvt+0x7e>

08010706 <__exponent>:
 8010706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010708:	2900      	cmp	r1, #0
 801070a:	bfba      	itte	lt
 801070c:	4249      	neglt	r1, r1
 801070e:	232d      	movlt	r3, #45	@ 0x2d
 8010710:	232b      	movge	r3, #43	@ 0x2b
 8010712:	2909      	cmp	r1, #9
 8010714:	7002      	strb	r2, [r0, #0]
 8010716:	7043      	strb	r3, [r0, #1]
 8010718:	dd29      	ble.n	801076e <__exponent+0x68>
 801071a:	f10d 0307 	add.w	r3, sp, #7
 801071e:	461d      	mov	r5, r3
 8010720:	270a      	movs	r7, #10
 8010722:	461a      	mov	r2, r3
 8010724:	fbb1 f6f7 	udiv	r6, r1, r7
 8010728:	fb07 1416 	mls	r4, r7, r6, r1
 801072c:	3430      	adds	r4, #48	@ 0x30
 801072e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010732:	460c      	mov	r4, r1
 8010734:	2c63      	cmp	r4, #99	@ 0x63
 8010736:	f103 33ff 	add.w	r3, r3, #4294967295
 801073a:	4631      	mov	r1, r6
 801073c:	dcf1      	bgt.n	8010722 <__exponent+0x1c>
 801073e:	3130      	adds	r1, #48	@ 0x30
 8010740:	1e94      	subs	r4, r2, #2
 8010742:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010746:	1c41      	adds	r1, r0, #1
 8010748:	4623      	mov	r3, r4
 801074a:	42ab      	cmp	r3, r5
 801074c:	d30a      	bcc.n	8010764 <__exponent+0x5e>
 801074e:	f10d 0309 	add.w	r3, sp, #9
 8010752:	1a9b      	subs	r3, r3, r2
 8010754:	42ac      	cmp	r4, r5
 8010756:	bf88      	it	hi
 8010758:	2300      	movhi	r3, #0
 801075a:	3302      	adds	r3, #2
 801075c:	4403      	add	r3, r0
 801075e:	1a18      	subs	r0, r3, r0
 8010760:	b003      	add	sp, #12
 8010762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010764:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010768:	f801 6f01 	strb.w	r6, [r1, #1]!
 801076c:	e7ed      	b.n	801074a <__exponent+0x44>
 801076e:	2330      	movs	r3, #48	@ 0x30
 8010770:	3130      	adds	r1, #48	@ 0x30
 8010772:	7083      	strb	r3, [r0, #2]
 8010774:	70c1      	strb	r1, [r0, #3]
 8010776:	1d03      	adds	r3, r0, #4
 8010778:	e7f1      	b.n	801075e <__exponent+0x58>
	...

0801077c <_printf_float>:
 801077c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010780:	b08d      	sub	sp, #52	@ 0x34
 8010782:	460c      	mov	r4, r1
 8010784:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010788:	4616      	mov	r6, r2
 801078a:	461f      	mov	r7, r3
 801078c:	4605      	mov	r5, r0
 801078e:	f000 ff2d 	bl	80115ec <_localeconv_r>
 8010792:	6803      	ldr	r3, [r0, #0]
 8010794:	9304      	str	r3, [sp, #16]
 8010796:	4618      	mov	r0, r3
 8010798:	f7ef fd92 	bl	80002c0 <strlen>
 801079c:	2300      	movs	r3, #0
 801079e:	930a      	str	r3, [sp, #40]	@ 0x28
 80107a0:	f8d8 3000 	ldr.w	r3, [r8]
 80107a4:	9005      	str	r0, [sp, #20]
 80107a6:	3307      	adds	r3, #7
 80107a8:	f023 0307 	bic.w	r3, r3, #7
 80107ac:	f103 0208 	add.w	r2, r3, #8
 80107b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80107b4:	f8d4 b000 	ldr.w	fp, [r4]
 80107b8:	f8c8 2000 	str.w	r2, [r8]
 80107bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80107c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80107c4:	9307      	str	r3, [sp, #28]
 80107c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80107ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80107ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80107d2:	4b9c      	ldr	r3, [pc, #624]	@ (8010a44 <_printf_float+0x2c8>)
 80107d4:	f04f 32ff 	mov.w	r2, #4294967295
 80107d8:	f7f0 f9d0 	bl	8000b7c <__aeabi_dcmpun>
 80107dc:	bb70      	cbnz	r0, 801083c <_printf_float+0xc0>
 80107de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80107e2:	4b98      	ldr	r3, [pc, #608]	@ (8010a44 <_printf_float+0x2c8>)
 80107e4:	f04f 32ff 	mov.w	r2, #4294967295
 80107e8:	f7f0 f9aa 	bl	8000b40 <__aeabi_dcmple>
 80107ec:	bb30      	cbnz	r0, 801083c <_printf_float+0xc0>
 80107ee:	2200      	movs	r2, #0
 80107f0:	2300      	movs	r3, #0
 80107f2:	4640      	mov	r0, r8
 80107f4:	4649      	mov	r1, r9
 80107f6:	f7f0 f999 	bl	8000b2c <__aeabi_dcmplt>
 80107fa:	b110      	cbz	r0, 8010802 <_printf_float+0x86>
 80107fc:	232d      	movs	r3, #45	@ 0x2d
 80107fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010802:	4a91      	ldr	r2, [pc, #580]	@ (8010a48 <_printf_float+0x2cc>)
 8010804:	4b91      	ldr	r3, [pc, #580]	@ (8010a4c <_printf_float+0x2d0>)
 8010806:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801080a:	bf94      	ite	ls
 801080c:	4690      	movls	r8, r2
 801080e:	4698      	movhi	r8, r3
 8010810:	2303      	movs	r3, #3
 8010812:	6123      	str	r3, [r4, #16]
 8010814:	f02b 0304 	bic.w	r3, fp, #4
 8010818:	6023      	str	r3, [r4, #0]
 801081a:	f04f 0900 	mov.w	r9, #0
 801081e:	9700      	str	r7, [sp, #0]
 8010820:	4633      	mov	r3, r6
 8010822:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010824:	4621      	mov	r1, r4
 8010826:	4628      	mov	r0, r5
 8010828:	f000 f9d2 	bl	8010bd0 <_printf_common>
 801082c:	3001      	adds	r0, #1
 801082e:	f040 808d 	bne.w	801094c <_printf_float+0x1d0>
 8010832:	f04f 30ff 	mov.w	r0, #4294967295
 8010836:	b00d      	add	sp, #52	@ 0x34
 8010838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801083c:	4642      	mov	r2, r8
 801083e:	464b      	mov	r3, r9
 8010840:	4640      	mov	r0, r8
 8010842:	4649      	mov	r1, r9
 8010844:	f7f0 f99a 	bl	8000b7c <__aeabi_dcmpun>
 8010848:	b140      	cbz	r0, 801085c <_printf_float+0xe0>
 801084a:	464b      	mov	r3, r9
 801084c:	2b00      	cmp	r3, #0
 801084e:	bfbc      	itt	lt
 8010850:	232d      	movlt	r3, #45	@ 0x2d
 8010852:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010856:	4a7e      	ldr	r2, [pc, #504]	@ (8010a50 <_printf_float+0x2d4>)
 8010858:	4b7e      	ldr	r3, [pc, #504]	@ (8010a54 <_printf_float+0x2d8>)
 801085a:	e7d4      	b.n	8010806 <_printf_float+0x8a>
 801085c:	6863      	ldr	r3, [r4, #4]
 801085e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010862:	9206      	str	r2, [sp, #24]
 8010864:	1c5a      	adds	r2, r3, #1
 8010866:	d13b      	bne.n	80108e0 <_printf_float+0x164>
 8010868:	2306      	movs	r3, #6
 801086a:	6063      	str	r3, [r4, #4]
 801086c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010870:	2300      	movs	r3, #0
 8010872:	6022      	str	r2, [r4, #0]
 8010874:	9303      	str	r3, [sp, #12]
 8010876:	ab0a      	add	r3, sp, #40	@ 0x28
 8010878:	e9cd a301 	strd	sl, r3, [sp, #4]
 801087c:	ab09      	add	r3, sp, #36	@ 0x24
 801087e:	9300      	str	r3, [sp, #0]
 8010880:	6861      	ldr	r1, [r4, #4]
 8010882:	ec49 8b10 	vmov	d0, r8, r9
 8010886:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801088a:	4628      	mov	r0, r5
 801088c:	f7ff fed6 	bl	801063c <__cvt>
 8010890:	9b06      	ldr	r3, [sp, #24]
 8010892:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010894:	2b47      	cmp	r3, #71	@ 0x47
 8010896:	4680      	mov	r8, r0
 8010898:	d129      	bne.n	80108ee <_printf_float+0x172>
 801089a:	1cc8      	adds	r0, r1, #3
 801089c:	db02      	blt.n	80108a4 <_printf_float+0x128>
 801089e:	6863      	ldr	r3, [r4, #4]
 80108a0:	4299      	cmp	r1, r3
 80108a2:	dd41      	ble.n	8010928 <_printf_float+0x1ac>
 80108a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80108a8:	fa5f fa8a 	uxtb.w	sl, sl
 80108ac:	3901      	subs	r1, #1
 80108ae:	4652      	mov	r2, sl
 80108b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80108b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80108b6:	f7ff ff26 	bl	8010706 <__exponent>
 80108ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80108bc:	1813      	adds	r3, r2, r0
 80108be:	2a01      	cmp	r2, #1
 80108c0:	4681      	mov	r9, r0
 80108c2:	6123      	str	r3, [r4, #16]
 80108c4:	dc02      	bgt.n	80108cc <_printf_float+0x150>
 80108c6:	6822      	ldr	r2, [r4, #0]
 80108c8:	07d2      	lsls	r2, r2, #31
 80108ca:	d501      	bpl.n	80108d0 <_printf_float+0x154>
 80108cc:	3301      	adds	r3, #1
 80108ce:	6123      	str	r3, [r4, #16]
 80108d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d0a2      	beq.n	801081e <_printf_float+0xa2>
 80108d8:	232d      	movs	r3, #45	@ 0x2d
 80108da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80108de:	e79e      	b.n	801081e <_printf_float+0xa2>
 80108e0:	9a06      	ldr	r2, [sp, #24]
 80108e2:	2a47      	cmp	r2, #71	@ 0x47
 80108e4:	d1c2      	bne.n	801086c <_printf_float+0xf0>
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d1c0      	bne.n	801086c <_printf_float+0xf0>
 80108ea:	2301      	movs	r3, #1
 80108ec:	e7bd      	b.n	801086a <_printf_float+0xee>
 80108ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80108f2:	d9db      	bls.n	80108ac <_printf_float+0x130>
 80108f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80108f8:	d118      	bne.n	801092c <_printf_float+0x1b0>
 80108fa:	2900      	cmp	r1, #0
 80108fc:	6863      	ldr	r3, [r4, #4]
 80108fe:	dd0b      	ble.n	8010918 <_printf_float+0x19c>
 8010900:	6121      	str	r1, [r4, #16]
 8010902:	b913      	cbnz	r3, 801090a <_printf_float+0x18e>
 8010904:	6822      	ldr	r2, [r4, #0]
 8010906:	07d0      	lsls	r0, r2, #31
 8010908:	d502      	bpl.n	8010910 <_printf_float+0x194>
 801090a:	3301      	adds	r3, #1
 801090c:	440b      	add	r3, r1
 801090e:	6123      	str	r3, [r4, #16]
 8010910:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010912:	f04f 0900 	mov.w	r9, #0
 8010916:	e7db      	b.n	80108d0 <_printf_float+0x154>
 8010918:	b913      	cbnz	r3, 8010920 <_printf_float+0x1a4>
 801091a:	6822      	ldr	r2, [r4, #0]
 801091c:	07d2      	lsls	r2, r2, #31
 801091e:	d501      	bpl.n	8010924 <_printf_float+0x1a8>
 8010920:	3302      	adds	r3, #2
 8010922:	e7f4      	b.n	801090e <_printf_float+0x192>
 8010924:	2301      	movs	r3, #1
 8010926:	e7f2      	b.n	801090e <_printf_float+0x192>
 8010928:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801092c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801092e:	4299      	cmp	r1, r3
 8010930:	db05      	blt.n	801093e <_printf_float+0x1c2>
 8010932:	6823      	ldr	r3, [r4, #0]
 8010934:	6121      	str	r1, [r4, #16]
 8010936:	07d8      	lsls	r0, r3, #31
 8010938:	d5ea      	bpl.n	8010910 <_printf_float+0x194>
 801093a:	1c4b      	adds	r3, r1, #1
 801093c:	e7e7      	b.n	801090e <_printf_float+0x192>
 801093e:	2900      	cmp	r1, #0
 8010940:	bfd4      	ite	le
 8010942:	f1c1 0202 	rsble	r2, r1, #2
 8010946:	2201      	movgt	r2, #1
 8010948:	4413      	add	r3, r2
 801094a:	e7e0      	b.n	801090e <_printf_float+0x192>
 801094c:	6823      	ldr	r3, [r4, #0]
 801094e:	055a      	lsls	r2, r3, #21
 8010950:	d407      	bmi.n	8010962 <_printf_float+0x1e6>
 8010952:	6923      	ldr	r3, [r4, #16]
 8010954:	4642      	mov	r2, r8
 8010956:	4631      	mov	r1, r6
 8010958:	4628      	mov	r0, r5
 801095a:	47b8      	blx	r7
 801095c:	3001      	adds	r0, #1
 801095e:	d12b      	bne.n	80109b8 <_printf_float+0x23c>
 8010960:	e767      	b.n	8010832 <_printf_float+0xb6>
 8010962:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010966:	f240 80dd 	bls.w	8010b24 <_printf_float+0x3a8>
 801096a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801096e:	2200      	movs	r2, #0
 8010970:	2300      	movs	r3, #0
 8010972:	f7f0 f8d1 	bl	8000b18 <__aeabi_dcmpeq>
 8010976:	2800      	cmp	r0, #0
 8010978:	d033      	beq.n	80109e2 <_printf_float+0x266>
 801097a:	4a37      	ldr	r2, [pc, #220]	@ (8010a58 <_printf_float+0x2dc>)
 801097c:	2301      	movs	r3, #1
 801097e:	4631      	mov	r1, r6
 8010980:	4628      	mov	r0, r5
 8010982:	47b8      	blx	r7
 8010984:	3001      	adds	r0, #1
 8010986:	f43f af54 	beq.w	8010832 <_printf_float+0xb6>
 801098a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801098e:	4543      	cmp	r3, r8
 8010990:	db02      	blt.n	8010998 <_printf_float+0x21c>
 8010992:	6823      	ldr	r3, [r4, #0]
 8010994:	07d8      	lsls	r0, r3, #31
 8010996:	d50f      	bpl.n	80109b8 <_printf_float+0x23c>
 8010998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801099c:	4631      	mov	r1, r6
 801099e:	4628      	mov	r0, r5
 80109a0:	47b8      	blx	r7
 80109a2:	3001      	adds	r0, #1
 80109a4:	f43f af45 	beq.w	8010832 <_printf_float+0xb6>
 80109a8:	f04f 0900 	mov.w	r9, #0
 80109ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80109b0:	f104 0a1a 	add.w	sl, r4, #26
 80109b4:	45c8      	cmp	r8, r9
 80109b6:	dc09      	bgt.n	80109cc <_printf_float+0x250>
 80109b8:	6823      	ldr	r3, [r4, #0]
 80109ba:	079b      	lsls	r3, r3, #30
 80109bc:	f100 8103 	bmi.w	8010bc6 <_printf_float+0x44a>
 80109c0:	68e0      	ldr	r0, [r4, #12]
 80109c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109c4:	4298      	cmp	r0, r3
 80109c6:	bfb8      	it	lt
 80109c8:	4618      	movlt	r0, r3
 80109ca:	e734      	b.n	8010836 <_printf_float+0xba>
 80109cc:	2301      	movs	r3, #1
 80109ce:	4652      	mov	r2, sl
 80109d0:	4631      	mov	r1, r6
 80109d2:	4628      	mov	r0, r5
 80109d4:	47b8      	blx	r7
 80109d6:	3001      	adds	r0, #1
 80109d8:	f43f af2b 	beq.w	8010832 <_printf_float+0xb6>
 80109dc:	f109 0901 	add.w	r9, r9, #1
 80109e0:	e7e8      	b.n	80109b4 <_printf_float+0x238>
 80109e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	dc39      	bgt.n	8010a5c <_printf_float+0x2e0>
 80109e8:	4a1b      	ldr	r2, [pc, #108]	@ (8010a58 <_printf_float+0x2dc>)
 80109ea:	2301      	movs	r3, #1
 80109ec:	4631      	mov	r1, r6
 80109ee:	4628      	mov	r0, r5
 80109f0:	47b8      	blx	r7
 80109f2:	3001      	adds	r0, #1
 80109f4:	f43f af1d 	beq.w	8010832 <_printf_float+0xb6>
 80109f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80109fc:	ea59 0303 	orrs.w	r3, r9, r3
 8010a00:	d102      	bne.n	8010a08 <_printf_float+0x28c>
 8010a02:	6823      	ldr	r3, [r4, #0]
 8010a04:	07d9      	lsls	r1, r3, #31
 8010a06:	d5d7      	bpl.n	80109b8 <_printf_float+0x23c>
 8010a08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a0c:	4631      	mov	r1, r6
 8010a0e:	4628      	mov	r0, r5
 8010a10:	47b8      	blx	r7
 8010a12:	3001      	adds	r0, #1
 8010a14:	f43f af0d 	beq.w	8010832 <_printf_float+0xb6>
 8010a18:	f04f 0a00 	mov.w	sl, #0
 8010a1c:	f104 0b1a 	add.w	fp, r4, #26
 8010a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a22:	425b      	negs	r3, r3
 8010a24:	4553      	cmp	r3, sl
 8010a26:	dc01      	bgt.n	8010a2c <_printf_float+0x2b0>
 8010a28:	464b      	mov	r3, r9
 8010a2a:	e793      	b.n	8010954 <_printf_float+0x1d8>
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	465a      	mov	r2, fp
 8010a30:	4631      	mov	r1, r6
 8010a32:	4628      	mov	r0, r5
 8010a34:	47b8      	blx	r7
 8010a36:	3001      	adds	r0, #1
 8010a38:	f43f aefb 	beq.w	8010832 <_printf_float+0xb6>
 8010a3c:	f10a 0a01 	add.w	sl, sl, #1
 8010a40:	e7ee      	b.n	8010a20 <_printf_float+0x2a4>
 8010a42:	bf00      	nop
 8010a44:	7fefffff 	.word	0x7fefffff
 8010a48:	08016d68 	.word	0x08016d68
 8010a4c:	08016d6c 	.word	0x08016d6c
 8010a50:	08016d70 	.word	0x08016d70
 8010a54:	08016d74 	.word	0x08016d74
 8010a58:	08017108 	.word	0x08017108
 8010a5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010a5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010a62:	4553      	cmp	r3, sl
 8010a64:	bfa8      	it	ge
 8010a66:	4653      	movge	r3, sl
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	4699      	mov	r9, r3
 8010a6c:	dc36      	bgt.n	8010adc <_printf_float+0x360>
 8010a6e:	f04f 0b00 	mov.w	fp, #0
 8010a72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010a76:	f104 021a 	add.w	r2, r4, #26
 8010a7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010a7c:	9306      	str	r3, [sp, #24]
 8010a7e:	eba3 0309 	sub.w	r3, r3, r9
 8010a82:	455b      	cmp	r3, fp
 8010a84:	dc31      	bgt.n	8010aea <_printf_float+0x36e>
 8010a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a88:	459a      	cmp	sl, r3
 8010a8a:	dc3a      	bgt.n	8010b02 <_printf_float+0x386>
 8010a8c:	6823      	ldr	r3, [r4, #0]
 8010a8e:	07da      	lsls	r2, r3, #31
 8010a90:	d437      	bmi.n	8010b02 <_printf_float+0x386>
 8010a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a94:	ebaa 0903 	sub.w	r9, sl, r3
 8010a98:	9b06      	ldr	r3, [sp, #24]
 8010a9a:	ebaa 0303 	sub.w	r3, sl, r3
 8010a9e:	4599      	cmp	r9, r3
 8010aa0:	bfa8      	it	ge
 8010aa2:	4699      	movge	r9, r3
 8010aa4:	f1b9 0f00 	cmp.w	r9, #0
 8010aa8:	dc33      	bgt.n	8010b12 <_printf_float+0x396>
 8010aaa:	f04f 0800 	mov.w	r8, #0
 8010aae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ab2:	f104 0b1a 	add.w	fp, r4, #26
 8010ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ab8:	ebaa 0303 	sub.w	r3, sl, r3
 8010abc:	eba3 0309 	sub.w	r3, r3, r9
 8010ac0:	4543      	cmp	r3, r8
 8010ac2:	f77f af79 	ble.w	80109b8 <_printf_float+0x23c>
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	465a      	mov	r2, fp
 8010aca:	4631      	mov	r1, r6
 8010acc:	4628      	mov	r0, r5
 8010ace:	47b8      	blx	r7
 8010ad0:	3001      	adds	r0, #1
 8010ad2:	f43f aeae 	beq.w	8010832 <_printf_float+0xb6>
 8010ad6:	f108 0801 	add.w	r8, r8, #1
 8010ada:	e7ec      	b.n	8010ab6 <_printf_float+0x33a>
 8010adc:	4642      	mov	r2, r8
 8010ade:	4631      	mov	r1, r6
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	47b8      	blx	r7
 8010ae4:	3001      	adds	r0, #1
 8010ae6:	d1c2      	bne.n	8010a6e <_printf_float+0x2f2>
 8010ae8:	e6a3      	b.n	8010832 <_printf_float+0xb6>
 8010aea:	2301      	movs	r3, #1
 8010aec:	4631      	mov	r1, r6
 8010aee:	4628      	mov	r0, r5
 8010af0:	9206      	str	r2, [sp, #24]
 8010af2:	47b8      	blx	r7
 8010af4:	3001      	adds	r0, #1
 8010af6:	f43f ae9c 	beq.w	8010832 <_printf_float+0xb6>
 8010afa:	9a06      	ldr	r2, [sp, #24]
 8010afc:	f10b 0b01 	add.w	fp, fp, #1
 8010b00:	e7bb      	b.n	8010a7a <_printf_float+0x2fe>
 8010b02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b06:	4631      	mov	r1, r6
 8010b08:	4628      	mov	r0, r5
 8010b0a:	47b8      	blx	r7
 8010b0c:	3001      	adds	r0, #1
 8010b0e:	d1c0      	bne.n	8010a92 <_printf_float+0x316>
 8010b10:	e68f      	b.n	8010832 <_printf_float+0xb6>
 8010b12:	9a06      	ldr	r2, [sp, #24]
 8010b14:	464b      	mov	r3, r9
 8010b16:	4442      	add	r2, r8
 8010b18:	4631      	mov	r1, r6
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	47b8      	blx	r7
 8010b1e:	3001      	adds	r0, #1
 8010b20:	d1c3      	bne.n	8010aaa <_printf_float+0x32e>
 8010b22:	e686      	b.n	8010832 <_printf_float+0xb6>
 8010b24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010b28:	f1ba 0f01 	cmp.w	sl, #1
 8010b2c:	dc01      	bgt.n	8010b32 <_printf_float+0x3b6>
 8010b2e:	07db      	lsls	r3, r3, #31
 8010b30:	d536      	bpl.n	8010ba0 <_printf_float+0x424>
 8010b32:	2301      	movs	r3, #1
 8010b34:	4642      	mov	r2, r8
 8010b36:	4631      	mov	r1, r6
 8010b38:	4628      	mov	r0, r5
 8010b3a:	47b8      	blx	r7
 8010b3c:	3001      	adds	r0, #1
 8010b3e:	f43f ae78 	beq.w	8010832 <_printf_float+0xb6>
 8010b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b46:	4631      	mov	r1, r6
 8010b48:	4628      	mov	r0, r5
 8010b4a:	47b8      	blx	r7
 8010b4c:	3001      	adds	r0, #1
 8010b4e:	f43f ae70 	beq.w	8010832 <_printf_float+0xb6>
 8010b52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010b56:	2200      	movs	r2, #0
 8010b58:	2300      	movs	r3, #0
 8010b5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010b5e:	f7ef ffdb 	bl	8000b18 <__aeabi_dcmpeq>
 8010b62:	b9c0      	cbnz	r0, 8010b96 <_printf_float+0x41a>
 8010b64:	4653      	mov	r3, sl
 8010b66:	f108 0201 	add.w	r2, r8, #1
 8010b6a:	4631      	mov	r1, r6
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	47b8      	blx	r7
 8010b70:	3001      	adds	r0, #1
 8010b72:	d10c      	bne.n	8010b8e <_printf_float+0x412>
 8010b74:	e65d      	b.n	8010832 <_printf_float+0xb6>
 8010b76:	2301      	movs	r3, #1
 8010b78:	465a      	mov	r2, fp
 8010b7a:	4631      	mov	r1, r6
 8010b7c:	4628      	mov	r0, r5
 8010b7e:	47b8      	blx	r7
 8010b80:	3001      	adds	r0, #1
 8010b82:	f43f ae56 	beq.w	8010832 <_printf_float+0xb6>
 8010b86:	f108 0801 	add.w	r8, r8, #1
 8010b8a:	45d0      	cmp	r8, sl
 8010b8c:	dbf3      	blt.n	8010b76 <_printf_float+0x3fa>
 8010b8e:	464b      	mov	r3, r9
 8010b90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010b94:	e6df      	b.n	8010956 <_printf_float+0x1da>
 8010b96:	f04f 0800 	mov.w	r8, #0
 8010b9a:	f104 0b1a 	add.w	fp, r4, #26
 8010b9e:	e7f4      	b.n	8010b8a <_printf_float+0x40e>
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	4642      	mov	r2, r8
 8010ba4:	e7e1      	b.n	8010b6a <_printf_float+0x3ee>
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	464a      	mov	r2, r9
 8010baa:	4631      	mov	r1, r6
 8010bac:	4628      	mov	r0, r5
 8010bae:	47b8      	blx	r7
 8010bb0:	3001      	adds	r0, #1
 8010bb2:	f43f ae3e 	beq.w	8010832 <_printf_float+0xb6>
 8010bb6:	f108 0801 	add.w	r8, r8, #1
 8010bba:	68e3      	ldr	r3, [r4, #12]
 8010bbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010bbe:	1a5b      	subs	r3, r3, r1
 8010bc0:	4543      	cmp	r3, r8
 8010bc2:	dcf0      	bgt.n	8010ba6 <_printf_float+0x42a>
 8010bc4:	e6fc      	b.n	80109c0 <_printf_float+0x244>
 8010bc6:	f04f 0800 	mov.w	r8, #0
 8010bca:	f104 0919 	add.w	r9, r4, #25
 8010bce:	e7f4      	b.n	8010bba <_printf_float+0x43e>

08010bd0 <_printf_common>:
 8010bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bd4:	4616      	mov	r6, r2
 8010bd6:	4698      	mov	r8, r3
 8010bd8:	688a      	ldr	r2, [r1, #8]
 8010bda:	690b      	ldr	r3, [r1, #16]
 8010bdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010be0:	4293      	cmp	r3, r2
 8010be2:	bfb8      	it	lt
 8010be4:	4613      	movlt	r3, r2
 8010be6:	6033      	str	r3, [r6, #0]
 8010be8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010bec:	4607      	mov	r7, r0
 8010bee:	460c      	mov	r4, r1
 8010bf0:	b10a      	cbz	r2, 8010bf6 <_printf_common+0x26>
 8010bf2:	3301      	adds	r3, #1
 8010bf4:	6033      	str	r3, [r6, #0]
 8010bf6:	6823      	ldr	r3, [r4, #0]
 8010bf8:	0699      	lsls	r1, r3, #26
 8010bfa:	bf42      	ittt	mi
 8010bfc:	6833      	ldrmi	r3, [r6, #0]
 8010bfe:	3302      	addmi	r3, #2
 8010c00:	6033      	strmi	r3, [r6, #0]
 8010c02:	6825      	ldr	r5, [r4, #0]
 8010c04:	f015 0506 	ands.w	r5, r5, #6
 8010c08:	d106      	bne.n	8010c18 <_printf_common+0x48>
 8010c0a:	f104 0a19 	add.w	sl, r4, #25
 8010c0e:	68e3      	ldr	r3, [r4, #12]
 8010c10:	6832      	ldr	r2, [r6, #0]
 8010c12:	1a9b      	subs	r3, r3, r2
 8010c14:	42ab      	cmp	r3, r5
 8010c16:	dc26      	bgt.n	8010c66 <_printf_common+0x96>
 8010c18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010c1c:	6822      	ldr	r2, [r4, #0]
 8010c1e:	3b00      	subs	r3, #0
 8010c20:	bf18      	it	ne
 8010c22:	2301      	movne	r3, #1
 8010c24:	0692      	lsls	r2, r2, #26
 8010c26:	d42b      	bmi.n	8010c80 <_printf_common+0xb0>
 8010c28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010c2c:	4641      	mov	r1, r8
 8010c2e:	4638      	mov	r0, r7
 8010c30:	47c8      	blx	r9
 8010c32:	3001      	adds	r0, #1
 8010c34:	d01e      	beq.n	8010c74 <_printf_common+0xa4>
 8010c36:	6823      	ldr	r3, [r4, #0]
 8010c38:	6922      	ldr	r2, [r4, #16]
 8010c3a:	f003 0306 	and.w	r3, r3, #6
 8010c3e:	2b04      	cmp	r3, #4
 8010c40:	bf02      	ittt	eq
 8010c42:	68e5      	ldreq	r5, [r4, #12]
 8010c44:	6833      	ldreq	r3, [r6, #0]
 8010c46:	1aed      	subeq	r5, r5, r3
 8010c48:	68a3      	ldr	r3, [r4, #8]
 8010c4a:	bf0c      	ite	eq
 8010c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c50:	2500      	movne	r5, #0
 8010c52:	4293      	cmp	r3, r2
 8010c54:	bfc4      	itt	gt
 8010c56:	1a9b      	subgt	r3, r3, r2
 8010c58:	18ed      	addgt	r5, r5, r3
 8010c5a:	2600      	movs	r6, #0
 8010c5c:	341a      	adds	r4, #26
 8010c5e:	42b5      	cmp	r5, r6
 8010c60:	d11a      	bne.n	8010c98 <_printf_common+0xc8>
 8010c62:	2000      	movs	r0, #0
 8010c64:	e008      	b.n	8010c78 <_printf_common+0xa8>
 8010c66:	2301      	movs	r3, #1
 8010c68:	4652      	mov	r2, sl
 8010c6a:	4641      	mov	r1, r8
 8010c6c:	4638      	mov	r0, r7
 8010c6e:	47c8      	blx	r9
 8010c70:	3001      	adds	r0, #1
 8010c72:	d103      	bne.n	8010c7c <_printf_common+0xac>
 8010c74:	f04f 30ff 	mov.w	r0, #4294967295
 8010c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c7c:	3501      	adds	r5, #1
 8010c7e:	e7c6      	b.n	8010c0e <_printf_common+0x3e>
 8010c80:	18e1      	adds	r1, r4, r3
 8010c82:	1c5a      	adds	r2, r3, #1
 8010c84:	2030      	movs	r0, #48	@ 0x30
 8010c86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010c8a:	4422      	add	r2, r4
 8010c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010c90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010c94:	3302      	adds	r3, #2
 8010c96:	e7c7      	b.n	8010c28 <_printf_common+0x58>
 8010c98:	2301      	movs	r3, #1
 8010c9a:	4622      	mov	r2, r4
 8010c9c:	4641      	mov	r1, r8
 8010c9e:	4638      	mov	r0, r7
 8010ca0:	47c8      	blx	r9
 8010ca2:	3001      	adds	r0, #1
 8010ca4:	d0e6      	beq.n	8010c74 <_printf_common+0xa4>
 8010ca6:	3601      	adds	r6, #1
 8010ca8:	e7d9      	b.n	8010c5e <_printf_common+0x8e>
	...

08010cac <_printf_i>:
 8010cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010cb0:	7e0f      	ldrb	r7, [r1, #24]
 8010cb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010cb4:	2f78      	cmp	r7, #120	@ 0x78
 8010cb6:	4691      	mov	r9, r2
 8010cb8:	4680      	mov	r8, r0
 8010cba:	460c      	mov	r4, r1
 8010cbc:	469a      	mov	sl, r3
 8010cbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010cc2:	d807      	bhi.n	8010cd4 <_printf_i+0x28>
 8010cc4:	2f62      	cmp	r7, #98	@ 0x62
 8010cc6:	d80a      	bhi.n	8010cde <_printf_i+0x32>
 8010cc8:	2f00      	cmp	r7, #0
 8010cca:	f000 80d2 	beq.w	8010e72 <_printf_i+0x1c6>
 8010cce:	2f58      	cmp	r7, #88	@ 0x58
 8010cd0:	f000 80b9 	beq.w	8010e46 <_printf_i+0x19a>
 8010cd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010cd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010cdc:	e03a      	b.n	8010d54 <_printf_i+0xa8>
 8010cde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010ce2:	2b15      	cmp	r3, #21
 8010ce4:	d8f6      	bhi.n	8010cd4 <_printf_i+0x28>
 8010ce6:	a101      	add	r1, pc, #4	@ (adr r1, 8010cec <_printf_i+0x40>)
 8010ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010cec:	08010d45 	.word	0x08010d45
 8010cf0:	08010d59 	.word	0x08010d59
 8010cf4:	08010cd5 	.word	0x08010cd5
 8010cf8:	08010cd5 	.word	0x08010cd5
 8010cfc:	08010cd5 	.word	0x08010cd5
 8010d00:	08010cd5 	.word	0x08010cd5
 8010d04:	08010d59 	.word	0x08010d59
 8010d08:	08010cd5 	.word	0x08010cd5
 8010d0c:	08010cd5 	.word	0x08010cd5
 8010d10:	08010cd5 	.word	0x08010cd5
 8010d14:	08010cd5 	.word	0x08010cd5
 8010d18:	08010e59 	.word	0x08010e59
 8010d1c:	08010d83 	.word	0x08010d83
 8010d20:	08010e13 	.word	0x08010e13
 8010d24:	08010cd5 	.word	0x08010cd5
 8010d28:	08010cd5 	.word	0x08010cd5
 8010d2c:	08010e7b 	.word	0x08010e7b
 8010d30:	08010cd5 	.word	0x08010cd5
 8010d34:	08010d83 	.word	0x08010d83
 8010d38:	08010cd5 	.word	0x08010cd5
 8010d3c:	08010cd5 	.word	0x08010cd5
 8010d40:	08010e1b 	.word	0x08010e1b
 8010d44:	6833      	ldr	r3, [r6, #0]
 8010d46:	1d1a      	adds	r2, r3, #4
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	6032      	str	r2, [r6, #0]
 8010d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010d50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010d54:	2301      	movs	r3, #1
 8010d56:	e09d      	b.n	8010e94 <_printf_i+0x1e8>
 8010d58:	6833      	ldr	r3, [r6, #0]
 8010d5a:	6820      	ldr	r0, [r4, #0]
 8010d5c:	1d19      	adds	r1, r3, #4
 8010d5e:	6031      	str	r1, [r6, #0]
 8010d60:	0606      	lsls	r6, r0, #24
 8010d62:	d501      	bpl.n	8010d68 <_printf_i+0xbc>
 8010d64:	681d      	ldr	r5, [r3, #0]
 8010d66:	e003      	b.n	8010d70 <_printf_i+0xc4>
 8010d68:	0645      	lsls	r5, r0, #25
 8010d6a:	d5fb      	bpl.n	8010d64 <_printf_i+0xb8>
 8010d6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010d70:	2d00      	cmp	r5, #0
 8010d72:	da03      	bge.n	8010d7c <_printf_i+0xd0>
 8010d74:	232d      	movs	r3, #45	@ 0x2d
 8010d76:	426d      	negs	r5, r5
 8010d78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010d7c:	4859      	ldr	r0, [pc, #356]	@ (8010ee4 <_printf_i+0x238>)
 8010d7e:	230a      	movs	r3, #10
 8010d80:	e011      	b.n	8010da6 <_printf_i+0xfa>
 8010d82:	6821      	ldr	r1, [r4, #0]
 8010d84:	6833      	ldr	r3, [r6, #0]
 8010d86:	0608      	lsls	r0, r1, #24
 8010d88:	f853 5b04 	ldr.w	r5, [r3], #4
 8010d8c:	d402      	bmi.n	8010d94 <_printf_i+0xe8>
 8010d8e:	0649      	lsls	r1, r1, #25
 8010d90:	bf48      	it	mi
 8010d92:	b2ad      	uxthmi	r5, r5
 8010d94:	2f6f      	cmp	r7, #111	@ 0x6f
 8010d96:	4853      	ldr	r0, [pc, #332]	@ (8010ee4 <_printf_i+0x238>)
 8010d98:	6033      	str	r3, [r6, #0]
 8010d9a:	bf14      	ite	ne
 8010d9c:	230a      	movne	r3, #10
 8010d9e:	2308      	moveq	r3, #8
 8010da0:	2100      	movs	r1, #0
 8010da2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010da6:	6866      	ldr	r6, [r4, #4]
 8010da8:	60a6      	str	r6, [r4, #8]
 8010daa:	2e00      	cmp	r6, #0
 8010dac:	bfa2      	ittt	ge
 8010dae:	6821      	ldrge	r1, [r4, #0]
 8010db0:	f021 0104 	bicge.w	r1, r1, #4
 8010db4:	6021      	strge	r1, [r4, #0]
 8010db6:	b90d      	cbnz	r5, 8010dbc <_printf_i+0x110>
 8010db8:	2e00      	cmp	r6, #0
 8010dba:	d04b      	beq.n	8010e54 <_printf_i+0x1a8>
 8010dbc:	4616      	mov	r6, r2
 8010dbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8010dc2:	fb03 5711 	mls	r7, r3, r1, r5
 8010dc6:	5dc7      	ldrb	r7, [r0, r7]
 8010dc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010dcc:	462f      	mov	r7, r5
 8010dce:	42bb      	cmp	r3, r7
 8010dd0:	460d      	mov	r5, r1
 8010dd2:	d9f4      	bls.n	8010dbe <_printf_i+0x112>
 8010dd4:	2b08      	cmp	r3, #8
 8010dd6:	d10b      	bne.n	8010df0 <_printf_i+0x144>
 8010dd8:	6823      	ldr	r3, [r4, #0]
 8010dda:	07df      	lsls	r7, r3, #31
 8010ddc:	d508      	bpl.n	8010df0 <_printf_i+0x144>
 8010dde:	6923      	ldr	r3, [r4, #16]
 8010de0:	6861      	ldr	r1, [r4, #4]
 8010de2:	4299      	cmp	r1, r3
 8010de4:	bfde      	ittt	le
 8010de6:	2330      	movle	r3, #48	@ 0x30
 8010de8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010dec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010df0:	1b92      	subs	r2, r2, r6
 8010df2:	6122      	str	r2, [r4, #16]
 8010df4:	f8cd a000 	str.w	sl, [sp]
 8010df8:	464b      	mov	r3, r9
 8010dfa:	aa03      	add	r2, sp, #12
 8010dfc:	4621      	mov	r1, r4
 8010dfe:	4640      	mov	r0, r8
 8010e00:	f7ff fee6 	bl	8010bd0 <_printf_common>
 8010e04:	3001      	adds	r0, #1
 8010e06:	d14a      	bne.n	8010e9e <_printf_i+0x1f2>
 8010e08:	f04f 30ff 	mov.w	r0, #4294967295
 8010e0c:	b004      	add	sp, #16
 8010e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e12:	6823      	ldr	r3, [r4, #0]
 8010e14:	f043 0320 	orr.w	r3, r3, #32
 8010e18:	6023      	str	r3, [r4, #0]
 8010e1a:	4833      	ldr	r0, [pc, #204]	@ (8010ee8 <_printf_i+0x23c>)
 8010e1c:	2778      	movs	r7, #120	@ 0x78
 8010e1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010e22:	6823      	ldr	r3, [r4, #0]
 8010e24:	6831      	ldr	r1, [r6, #0]
 8010e26:	061f      	lsls	r7, r3, #24
 8010e28:	f851 5b04 	ldr.w	r5, [r1], #4
 8010e2c:	d402      	bmi.n	8010e34 <_printf_i+0x188>
 8010e2e:	065f      	lsls	r7, r3, #25
 8010e30:	bf48      	it	mi
 8010e32:	b2ad      	uxthmi	r5, r5
 8010e34:	6031      	str	r1, [r6, #0]
 8010e36:	07d9      	lsls	r1, r3, #31
 8010e38:	bf44      	itt	mi
 8010e3a:	f043 0320 	orrmi.w	r3, r3, #32
 8010e3e:	6023      	strmi	r3, [r4, #0]
 8010e40:	b11d      	cbz	r5, 8010e4a <_printf_i+0x19e>
 8010e42:	2310      	movs	r3, #16
 8010e44:	e7ac      	b.n	8010da0 <_printf_i+0xf4>
 8010e46:	4827      	ldr	r0, [pc, #156]	@ (8010ee4 <_printf_i+0x238>)
 8010e48:	e7e9      	b.n	8010e1e <_printf_i+0x172>
 8010e4a:	6823      	ldr	r3, [r4, #0]
 8010e4c:	f023 0320 	bic.w	r3, r3, #32
 8010e50:	6023      	str	r3, [r4, #0]
 8010e52:	e7f6      	b.n	8010e42 <_printf_i+0x196>
 8010e54:	4616      	mov	r6, r2
 8010e56:	e7bd      	b.n	8010dd4 <_printf_i+0x128>
 8010e58:	6833      	ldr	r3, [r6, #0]
 8010e5a:	6825      	ldr	r5, [r4, #0]
 8010e5c:	6961      	ldr	r1, [r4, #20]
 8010e5e:	1d18      	adds	r0, r3, #4
 8010e60:	6030      	str	r0, [r6, #0]
 8010e62:	062e      	lsls	r6, r5, #24
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	d501      	bpl.n	8010e6c <_printf_i+0x1c0>
 8010e68:	6019      	str	r1, [r3, #0]
 8010e6a:	e002      	b.n	8010e72 <_printf_i+0x1c6>
 8010e6c:	0668      	lsls	r0, r5, #25
 8010e6e:	d5fb      	bpl.n	8010e68 <_printf_i+0x1bc>
 8010e70:	8019      	strh	r1, [r3, #0]
 8010e72:	2300      	movs	r3, #0
 8010e74:	6123      	str	r3, [r4, #16]
 8010e76:	4616      	mov	r6, r2
 8010e78:	e7bc      	b.n	8010df4 <_printf_i+0x148>
 8010e7a:	6833      	ldr	r3, [r6, #0]
 8010e7c:	1d1a      	adds	r2, r3, #4
 8010e7e:	6032      	str	r2, [r6, #0]
 8010e80:	681e      	ldr	r6, [r3, #0]
 8010e82:	6862      	ldr	r2, [r4, #4]
 8010e84:	2100      	movs	r1, #0
 8010e86:	4630      	mov	r0, r6
 8010e88:	f7ef f9ca 	bl	8000220 <memchr>
 8010e8c:	b108      	cbz	r0, 8010e92 <_printf_i+0x1e6>
 8010e8e:	1b80      	subs	r0, r0, r6
 8010e90:	6060      	str	r0, [r4, #4]
 8010e92:	6863      	ldr	r3, [r4, #4]
 8010e94:	6123      	str	r3, [r4, #16]
 8010e96:	2300      	movs	r3, #0
 8010e98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010e9c:	e7aa      	b.n	8010df4 <_printf_i+0x148>
 8010e9e:	6923      	ldr	r3, [r4, #16]
 8010ea0:	4632      	mov	r2, r6
 8010ea2:	4649      	mov	r1, r9
 8010ea4:	4640      	mov	r0, r8
 8010ea6:	47d0      	blx	sl
 8010ea8:	3001      	adds	r0, #1
 8010eaa:	d0ad      	beq.n	8010e08 <_printf_i+0x15c>
 8010eac:	6823      	ldr	r3, [r4, #0]
 8010eae:	079b      	lsls	r3, r3, #30
 8010eb0:	d413      	bmi.n	8010eda <_printf_i+0x22e>
 8010eb2:	68e0      	ldr	r0, [r4, #12]
 8010eb4:	9b03      	ldr	r3, [sp, #12]
 8010eb6:	4298      	cmp	r0, r3
 8010eb8:	bfb8      	it	lt
 8010eba:	4618      	movlt	r0, r3
 8010ebc:	e7a6      	b.n	8010e0c <_printf_i+0x160>
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	4632      	mov	r2, r6
 8010ec2:	4649      	mov	r1, r9
 8010ec4:	4640      	mov	r0, r8
 8010ec6:	47d0      	blx	sl
 8010ec8:	3001      	adds	r0, #1
 8010eca:	d09d      	beq.n	8010e08 <_printf_i+0x15c>
 8010ecc:	3501      	adds	r5, #1
 8010ece:	68e3      	ldr	r3, [r4, #12]
 8010ed0:	9903      	ldr	r1, [sp, #12]
 8010ed2:	1a5b      	subs	r3, r3, r1
 8010ed4:	42ab      	cmp	r3, r5
 8010ed6:	dcf2      	bgt.n	8010ebe <_printf_i+0x212>
 8010ed8:	e7eb      	b.n	8010eb2 <_printf_i+0x206>
 8010eda:	2500      	movs	r5, #0
 8010edc:	f104 0619 	add.w	r6, r4, #25
 8010ee0:	e7f5      	b.n	8010ece <_printf_i+0x222>
 8010ee2:	bf00      	nop
 8010ee4:	08016d78 	.word	0x08016d78
 8010ee8:	08016d89 	.word	0x08016d89

08010eec <_scanf_float>:
 8010eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef0:	b087      	sub	sp, #28
 8010ef2:	4617      	mov	r7, r2
 8010ef4:	9303      	str	r3, [sp, #12]
 8010ef6:	688b      	ldr	r3, [r1, #8]
 8010ef8:	1e5a      	subs	r2, r3, #1
 8010efa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010efe:	bf81      	itttt	hi
 8010f00:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010f04:	eb03 0b05 	addhi.w	fp, r3, r5
 8010f08:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010f0c:	608b      	strhi	r3, [r1, #8]
 8010f0e:	680b      	ldr	r3, [r1, #0]
 8010f10:	460a      	mov	r2, r1
 8010f12:	f04f 0500 	mov.w	r5, #0
 8010f16:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8010f1a:	f842 3b1c 	str.w	r3, [r2], #28
 8010f1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010f22:	4680      	mov	r8, r0
 8010f24:	460c      	mov	r4, r1
 8010f26:	bf98      	it	ls
 8010f28:	f04f 0b00 	movls.w	fp, #0
 8010f2c:	9201      	str	r2, [sp, #4]
 8010f2e:	4616      	mov	r6, r2
 8010f30:	46aa      	mov	sl, r5
 8010f32:	46a9      	mov	r9, r5
 8010f34:	9502      	str	r5, [sp, #8]
 8010f36:	68a2      	ldr	r2, [r4, #8]
 8010f38:	b152      	cbz	r2, 8010f50 <_scanf_float+0x64>
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	2b4e      	cmp	r3, #78	@ 0x4e
 8010f40:	d864      	bhi.n	801100c <_scanf_float+0x120>
 8010f42:	2b40      	cmp	r3, #64	@ 0x40
 8010f44:	d83c      	bhi.n	8010fc0 <_scanf_float+0xd4>
 8010f46:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010f4a:	b2c8      	uxtb	r0, r1
 8010f4c:	280e      	cmp	r0, #14
 8010f4e:	d93a      	bls.n	8010fc6 <_scanf_float+0xda>
 8010f50:	f1b9 0f00 	cmp.w	r9, #0
 8010f54:	d003      	beq.n	8010f5e <_scanf_float+0x72>
 8010f56:	6823      	ldr	r3, [r4, #0]
 8010f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010f5c:	6023      	str	r3, [r4, #0]
 8010f5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f62:	f1ba 0f01 	cmp.w	sl, #1
 8010f66:	f200 8117 	bhi.w	8011198 <_scanf_float+0x2ac>
 8010f6a:	9b01      	ldr	r3, [sp, #4]
 8010f6c:	429e      	cmp	r6, r3
 8010f6e:	f200 8108 	bhi.w	8011182 <_scanf_float+0x296>
 8010f72:	2001      	movs	r0, #1
 8010f74:	b007      	add	sp, #28
 8010f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f7a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010f7e:	2a0d      	cmp	r2, #13
 8010f80:	d8e6      	bhi.n	8010f50 <_scanf_float+0x64>
 8010f82:	a101      	add	r1, pc, #4	@ (adr r1, 8010f88 <_scanf_float+0x9c>)
 8010f84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010f88:	080110cf 	.word	0x080110cf
 8010f8c:	08010f51 	.word	0x08010f51
 8010f90:	08010f51 	.word	0x08010f51
 8010f94:	08010f51 	.word	0x08010f51
 8010f98:	0801112f 	.word	0x0801112f
 8010f9c:	08011107 	.word	0x08011107
 8010fa0:	08010f51 	.word	0x08010f51
 8010fa4:	08010f51 	.word	0x08010f51
 8010fa8:	080110dd 	.word	0x080110dd
 8010fac:	08010f51 	.word	0x08010f51
 8010fb0:	08010f51 	.word	0x08010f51
 8010fb4:	08010f51 	.word	0x08010f51
 8010fb8:	08010f51 	.word	0x08010f51
 8010fbc:	08011095 	.word	0x08011095
 8010fc0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010fc4:	e7db      	b.n	8010f7e <_scanf_float+0x92>
 8010fc6:	290e      	cmp	r1, #14
 8010fc8:	d8c2      	bhi.n	8010f50 <_scanf_float+0x64>
 8010fca:	a001      	add	r0, pc, #4	@ (adr r0, 8010fd0 <_scanf_float+0xe4>)
 8010fcc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010fd0:	08011085 	.word	0x08011085
 8010fd4:	08010f51 	.word	0x08010f51
 8010fd8:	08011085 	.word	0x08011085
 8010fdc:	0801111b 	.word	0x0801111b
 8010fe0:	08010f51 	.word	0x08010f51
 8010fe4:	0801102d 	.word	0x0801102d
 8010fe8:	0801106b 	.word	0x0801106b
 8010fec:	0801106b 	.word	0x0801106b
 8010ff0:	0801106b 	.word	0x0801106b
 8010ff4:	0801106b 	.word	0x0801106b
 8010ff8:	0801106b 	.word	0x0801106b
 8010ffc:	0801106b 	.word	0x0801106b
 8011000:	0801106b 	.word	0x0801106b
 8011004:	0801106b 	.word	0x0801106b
 8011008:	0801106b 	.word	0x0801106b
 801100c:	2b6e      	cmp	r3, #110	@ 0x6e
 801100e:	d809      	bhi.n	8011024 <_scanf_float+0x138>
 8011010:	2b60      	cmp	r3, #96	@ 0x60
 8011012:	d8b2      	bhi.n	8010f7a <_scanf_float+0x8e>
 8011014:	2b54      	cmp	r3, #84	@ 0x54
 8011016:	d07b      	beq.n	8011110 <_scanf_float+0x224>
 8011018:	2b59      	cmp	r3, #89	@ 0x59
 801101a:	d199      	bne.n	8010f50 <_scanf_float+0x64>
 801101c:	2d07      	cmp	r5, #7
 801101e:	d197      	bne.n	8010f50 <_scanf_float+0x64>
 8011020:	2508      	movs	r5, #8
 8011022:	e02c      	b.n	801107e <_scanf_float+0x192>
 8011024:	2b74      	cmp	r3, #116	@ 0x74
 8011026:	d073      	beq.n	8011110 <_scanf_float+0x224>
 8011028:	2b79      	cmp	r3, #121	@ 0x79
 801102a:	e7f6      	b.n	801101a <_scanf_float+0x12e>
 801102c:	6821      	ldr	r1, [r4, #0]
 801102e:	05c8      	lsls	r0, r1, #23
 8011030:	d51b      	bpl.n	801106a <_scanf_float+0x17e>
 8011032:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011036:	6021      	str	r1, [r4, #0]
 8011038:	f109 0901 	add.w	r9, r9, #1
 801103c:	f1bb 0f00 	cmp.w	fp, #0
 8011040:	d003      	beq.n	801104a <_scanf_float+0x15e>
 8011042:	3201      	adds	r2, #1
 8011044:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011048:	60a2      	str	r2, [r4, #8]
 801104a:	68a3      	ldr	r3, [r4, #8]
 801104c:	3b01      	subs	r3, #1
 801104e:	60a3      	str	r3, [r4, #8]
 8011050:	6923      	ldr	r3, [r4, #16]
 8011052:	3301      	adds	r3, #1
 8011054:	6123      	str	r3, [r4, #16]
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	3b01      	subs	r3, #1
 801105a:	2b00      	cmp	r3, #0
 801105c:	607b      	str	r3, [r7, #4]
 801105e:	f340 8087 	ble.w	8011170 <_scanf_float+0x284>
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	3301      	adds	r3, #1
 8011066:	603b      	str	r3, [r7, #0]
 8011068:	e765      	b.n	8010f36 <_scanf_float+0x4a>
 801106a:	eb1a 0105 	adds.w	r1, sl, r5
 801106e:	f47f af6f 	bne.w	8010f50 <_scanf_float+0x64>
 8011072:	6822      	ldr	r2, [r4, #0]
 8011074:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011078:	6022      	str	r2, [r4, #0]
 801107a:	460d      	mov	r5, r1
 801107c:	468a      	mov	sl, r1
 801107e:	f806 3b01 	strb.w	r3, [r6], #1
 8011082:	e7e2      	b.n	801104a <_scanf_float+0x15e>
 8011084:	6822      	ldr	r2, [r4, #0]
 8011086:	0610      	lsls	r0, r2, #24
 8011088:	f57f af62 	bpl.w	8010f50 <_scanf_float+0x64>
 801108c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011090:	6022      	str	r2, [r4, #0]
 8011092:	e7f4      	b.n	801107e <_scanf_float+0x192>
 8011094:	f1ba 0f00 	cmp.w	sl, #0
 8011098:	d10e      	bne.n	80110b8 <_scanf_float+0x1cc>
 801109a:	f1b9 0f00 	cmp.w	r9, #0
 801109e:	d10e      	bne.n	80110be <_scanf_float+0x1d2>
 80110a0:	6822      	ldr	r2, [r4, #0]
 80110a2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80110a6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80110aa:	d108      	bne.n	80110be <_scanf_float+0x1d2>
 80110ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80110b0:	6022      	str	r2, [r4, #0]
 80110b2:	f04f 0a01 	mov.w	sl, #1
 80110b6:	e7e2      	b.n	801107e <_scanf_float+0x192>
 80110b8:	f1ba 0f02 	cmp.w	sl, #2
 80110bc:	d055      	beq.n	801116a <_scanf_float+0x27e>
 80110be:	2d01      	cmp	r5, #1
 80110c0:	d002      	beq.n	80110c8 <_scanf_float+0x1dc>
 80110c2:	2d04      	cmp	r5, #4
 80110c4:	f47f af44 	bne.w	8010f50 <_scanf_float+0x64>
 80110c8:	3501      	adds	r5, #1
 80110ca:	b2ed      	uxtb	r5, r5
 80110cc:	e7d7      	b.n	801107e <_scanf_float+0x192>
 80110ce:	f1ba 0f01 	cmp.w	sl, #1
 80110d2:	f47f af3d 	bne.w	8010f50 <_scanf_float+0x64>
 80110d6:	f04f 0a02 	mov.w	sl, #2
 80110da:	e7d0      	b.n	801107e <_scanf_float+0x192>
 80110dc:	b97d      	cbnz	r5, 80110fe <_scanf_float+0x212>
 80110de:	f1b9 0f00 	cmp.w	r9, #0
 80110e2:	f47f af38 	bne.w	8010f56 <_scanf_float+0x6a>
 80110e6:	6822      	ldr	r2, [r4, #0]
 80110e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80110ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80110f0:	f040 8108 	bne.w	8011304 <_scanf_float+0x418>
 80110f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80110f8:	6022      	str	r2, [r4, #0]
 80110fa:	2501      	movs	r5, #1
 80110fc:	e7bf      	b.n	801107e <_scanf_float+0x192>
 80110fe:	2d03      	cmp	r5, #3
 8011100:	d0e2      	beq.n	80110c8 <_scanf_float+0x1dc>
 8011102:	2d05      	cmp	r5, #5
 8011104:	e7de      	b.n	80110c4 <_scanf_float+0x1d8>
 8011106:	2d02      	cmp	r5, #2
 8011108:	f47f af22 	bne.w	8010f50 <_scanf_float+0x64>
 801110c:	2503      	movs	r5, #3
 801110e:	e7b6      	b.n	801107e <_scanf_float+0x192>
 8011110:	2d06      	cmp	r5, #6
 8011112:	f47f af1d 	bne.w	8010f50 <_scanf_float+0x64>
 8011116:	2507      	movs	r5, #7
 8011118:	e7b1      	b.n	801107e <_scanf_float+0x192>
 801111a:	6822      	ldr	r2, [r4, #0]
 801111c:	0591      	lsls	r1, r2, #22
 801111e:	f57f af17 	bpl.w	8010f50 <_scanf_float+0x64>
 8011122:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011126:	6022      	str	r2, [r4, #0]
 8011128:	f8cd 9008 	str.w	r9, [sp, #8]
 801112c:	e7a7      	b.n	801107e <_scanf_float+0x192>
 801112e:	6822      	ldr	r2, [r4, #0]
 8011130:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011134:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011138:	d006      	beq.n	8011148 <_scanf_float+0x25c>
 801113a:	0550      	lsls	r0, r2, #21
 801113c:	f57f af08 	bpl.w	8010f50 <_scanf_float+0x64>
 8011140:	f1b9 0f00 	cmp.w	r9, #0
 8011144:	f000 80de 	beq.w	8011304 <_scanf_float+0x418>
 8011148:	0591      	lsls	r1, r2, #22
 801114a:	bf58      	it	pl
 801114c:	9902      	ldrpl	r1, [sp, #8]
 801114e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011152:	bf58      	it	pl
 8011154:	eba9 0101 	subpl.w	r1, r9, r1
 8011158:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801115c:	bf58      	it	pl
 801115e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011162:	6022      	str	r2, [r4, #0]
 8011164:	f04f 0900 	mov.w	r9, #0
 8011168:	e789      	b.n	801107e <_scanf_float+0x192>
 801116a:	f04f 0a03 	mov.w	sl, #3
 801116e:	e786      	b.n	801107e <_scanf_float+0x192>
 8011170:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011174:	4639      	mov	r1, r7
 8011176:	4640      	mov	r0, r8
 8011178:	4798      	blx	r3
 801117a:	2800      	cmp	r0, #0
 801117c:	f43f aedb 	beq.w	8010f36 <_scanf_float+0x4a>
 8011180:	e6e6      	b.n	8010f50 <_scanf_float+0x64>
 8011182:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011186:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801118a:	463a      	mov	r2, r7
 801118c:	4640      	mov	r0, r8
 801118e:	4798      	blx	r3
 8011190:	6923      	ldr	r3, [r4, #16]
 8011192:	3b01      	subs	r3, #1
 8011194:	6123      	str	r3, [r4, #16]
 8011196:	e6e8      	b.n	8010f6a <_scanf_float+0x7e>
 8011198:	1e6b      	subs	r3, r5, #1
 801119a:	2b06      	cmp	r3, #6
 801119c:	d824      	bhi.n	80111e8 <_scanf_float+0x2fc>
 801119e:	2d02      	cmp	r5, #2
 80111a0:	d836      	bhi.n	8011210 <_scanf_float+0x324>
 80111a2:	9b01      	ldr	r3, [sp, #4]
 80111a4:	429e      	cmp	r6, r3
 80111a6:	f67f aee4 	bls.w	8010f72 <_scanf_float+0x86>
 80111aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80111ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80111b2:	463a      	mov	r2, r7
 80111b4:	4640      	mov	r0, r8
 80111b6:	4798      	blx	r3
 80111b8:	6923      	ldr	r3, [r4, #16]
 80111ba:	3b01      	subs	r3, #1
 80111bc:	6123      	str	r3, [r4, #16]
 80111be:	e7f0      	b.n	80111a2 <_scanf_float+0x2b6>
 80111c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80111c4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80111c8:	463a      	mov	r2, r7
 80111ca:	4640      	mov	r0, r8
 80111cc:	4798      	blx	r3
 80111ce:	6923      	ldr	r3, [r4, #16]
 80111d0:	3b01      	subs	r3, #1
 80111d2:	6123      	str	r3, [r4, #16]
 80111d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80111d8:	fa5f fa8a 	uxtb.w	sl, sl
 80111dc:	f1ba 0f02 	cmp.w	sl, #2
 80111e0:	d1ee      	bne.n	80111c0 <_scanf_float+0x2d4>
 80111e2:	3d03      	subs	r5, #3
 80111e4:	b2ed      	uxtb	r5, r5
 80111e6:	1b76      	subs	r6, r6, r5
 80111e8:	6823      	ldr	r3, [r4, #0]
 80111ea:	05da      	lsls	r2, r3, #23
 80111ec:	d530      	bpl.n	8011250 <_scanf_float+0x364>
 80111ee:	055b      	lsls	r3, r3, #21
 80111f0:	d511      	bpl.n	8011216 <_scanf_float+0x32a>
 80111f2:	9b01      	ldr	r3, [sp, #4]
 80111f4:	429e      	cmp	r6, r3
 80111f6:	f67f aebc 	bls.w	8010f72 <_scanf_float+0x86>
 80111fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80111fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011202:	463a      	mov	r2, r7
 8011204:	4640      	mov	r0, r8
 8011206:	4798      	blx	r3
 8011208:	6923      	ldr	r3, [r4, #16]
 801120a:	3b01      	subs	r3, #1
 801120c:	6123      	str	r3, [r4, #16]
 801120e:	e7f0      	b.n	80111f2 <_scanf_float+0x306>
 8011210:	46aa      	mov	sl, r5
 8011212:	46b3      	mov	fp, r6
 8011214:	e7de      	b.n	80111d4 <_scanf_float+0x2e8>
 8011216:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801121a:	6923      	ldr	r3, [r4, #16]
 801121c:	2965      	cmp	r1, #101	@ 0x65
 801121e:	f103 33ff 	add.w	r3, r3, #4294967295
 8011222:	f106 35ff 	add.w	r5, r6, #4294967295
 8011226:	6123      	str	r3, [r4, #16]
 8011228:	d00c      	beq.n	8011244 <_scanf_float+0x358>
 801122a:	2945      	cmp	r1, #69	@ 0x45
 801122c:	d00a      	beq.n	8011244 <_scanf_float+0x358>
 801122e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011232:	463a      	mov	r2, r7
 8011234:	4640      	mov	r0, r8
 8011236:	4798      	blx	r3
 8011238:	6923      	ldr	r3, [r4, #16]
 801123a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801123e:	3b01      	subs	r3, #1
 8011240:	1eb5      	subs	r5, r6, #2
 8011242:	6123      	str	r3, [r4, #16]
 8011244:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011248:	463a      	mov	r2, r7
 801124a:	4640      	mov	r0, r8
 801124c:	4798      	blx	r3
 801124e:	462e      	mov	r6, r5
 8011250:	6822      	ldr	r2, [r4, #0]
 8011252:	f012 0210 	ands.w	r2, r2, #16
 8011256:	d001      	beq.n	801125c <_scanf_float+0x370>
 8011258:	2000      	movs	r0, #0
 801125a:	e68b      	b.n	8010f74 <_scanf_float+0x88>
 801125c:	7032      	strb	r2, [r6, #0]
 801125e:	6823      	ldr	r3, [r4, #0]
 8011260:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011264:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011268:	d11c      	bne.n	80112a4 <_scanf_float+0x3b8>
 801126a:	9b02      	ldr	r3, [sp, #8]
 801126c:	454b      	cmp	r3, r9
 801126e:	eba3 0209 	sub.w	r2, r3, r9
 8011272:	d123      	bne.n	80112bc <_scanf_float+0x3d0>
 8011274:	9901      	ldr	r1, [sp, #4]
 8011276:	2200      	movs	r2, #0
 8011278:	4640      	mov	r0, r8
 801127a:	f002 fc45 	bl	8013b08 <_strtod_r>
 801127e:	9b03      	ldr	r3, [sp, #12]
 8011280:	6821      	ldr	r1, [r4, #0]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	f011 0f02 	tst.w	r1, #2
 8011288:	ec57 6b10 	vmov	r6, r7, d0
 801128c:	f103 0204 	add.w	r2, r3, #4
 8011290:	d01f      	beq.n	80112d2 <_scanf_float+0x3e6>
 8011292:	9903      	ldr	r1, [sp, #12]
 8011294:	600a      	str	r2, [r1, #0]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	e9c3 6700 	strd	r6, r7, [r3]
 801129c:	68e3      	ldr	r3, [r4, #12]
 801129e:	3301      	adds	r3, #1
 80112a0:	60e3      	str	r3, [r4, #12]
 80112a2:	e7d9      	b.n	8011258 <_scanf_float+0x36c>
 80112a4:	9b04      	ldr	r3, [sp, #16]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d0e4      	beq.n	8011274 <_scanf_float+0x388>
 80112aa:	9905      	ldr	r1, [sp, #20]
 80112ac:	230a      	movs	r3, #10
 80112ae:	3101      	adds	r1, #1
 80112b0:	4640      	mov	r0, r8
 80112b2:	f002 fca9 	bl	8013c08 <_strtol_r>
 80112b6:	9b04      	ldr	r3, [sp, #16]
 80112b8:	9e05      	ldr	r6, [sp, #20]
 80112ba:	1ac2      	subs	r2, r0, r3
 80112bc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80112c0:	429e      	cmp	r6, r3
 80112c2:	bf28      	it	cs
 80112c4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80112c8:	4910      	ldr	r1, [pc, #64]	@ (801130c <_scanf_float+0x420>)
 80112ca:	4630      	mov	r0, r6
 80112cc:	f000 f8e4 	bl	8011498 <siprintf>
 80112d0:	e7d0      	b.n	8011274 <_scanf_float+0x388>
 80112d2:	f011 0f04 	tst.w	r1, #4
 80112d6:	9903      	ldr	r1, [sp, #12]
 80112d8:	600a      	str	r2, [r1, #0]
 80112da:	d1dc      	bne.n	8011296 <_scanf_float+0x3aa>
 80112dc:	681d      	ldr	r5, [r3, #0]
 80112de:	4632      	mov	r2, r6
 80112e0:	463b      	mov	r3, r7
 80112e2:	4630      	mov	r0, r6
 80112e4:	4639      	mov	r1, r7
 80112e6:	f7ef fc49 	bl	8000b7c <__aeabi_dcmpun>
 80112ea:	b128      	cbz	r0, 80112f8 <_scanf_float+0x40c>
 80112ec:	4808      	ldr	r0, [pc, #32]	@ (8011310 <_scanf_float+0x424>)
 80112ee:	f000 fa03 	bl	80116f8 <nanf>
 80112f2:	ed85 0a00 	vstr	s0, [r5]
 80112f6:	e7d1      	b.n	801129c <_scanf_float+0x3b0>
 80112f8:	4630      	mov	r0, r6
 80112fa:	4639      	mov	r1, r7
 80112fc:	f7ef fc9c 	bl	8000c38 <__aeabi_d2f>
 8011300:	6028      	str	r0, [r5, #0]
 8011302:	e7cb      	b.n	801129c <_scanf_float+0x3b0>
 8011304:	f04f 0900 	mov.w	r9, #0
 8011308:	e629      	b.n	8010f5e <_scanf_float+0x72>
 801130a:	bf00      	nop
 801130c:	08016d9a 	.word	0x08016d9a
 8011310:	08017150 	.word	0x08017150

08011314 <std>:
 8011314:	2300      	movs	r3, #0
 8011316:	b510      	push	{r4, lr}
 8011318:	4604      	mov	r4, r0
 801131a:	e9c0 3300 	strd	r3, r3, [r0]
 801131e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011322:	6083      	str	r3, [r0, #8]
 8011324:	8181      	strh	r1, [r0, #12]
 8011326:	6643      	str	r3, [r0, #100]	@ 0x64
 8011328:	81c2      	strh	r2, [r0, #14]
 801132a:	6183      	str	r3, [r0, #24]
 801132c:	4619      	mov	r1, r3
 801132e:	2208      	movs	r2, #8
 8011330:	305c      	adds	r0, #92	@ 0x5c
 8011332:	f000 f940 	bl	80115b6 <memset>
 8011336:	4b0d      	ldr	r3, [pc, #52]	@ (801136c <std+0x58>)
 8011338:	6263      	str	r3, [r4, #36]	@ 0x24
 801133a:	4b0d      	ldr	r3, [pc, #52]	@ (8011370 <std+0x5c>)
 801133c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801133e:	4b0d      	ldr	r3, [pc, #52]	@ (8011374 <std+0x60>)
 8011340:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011342:	4b0d      	ldr	r3, [pc, #52]	@ (8011378 <std+0x64>)
 8011344:	6323      	str	r3, [r4, #48]	@ 0x30
 8011346:	4b0d      	ldr	r3, [pc, #52]	@ (801137c <std+0x68>)
 8011348:	6224      	str	r4, [r4, #32]
 801134a:	429c      	cmp	r4, r3
 801134c:	d006      	beq.n	801135c <std+0x48>
 801134e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011352:	4294      	cmp	r4, r2
 8011354:	d002      	beq.n	801135c <std+0x48>
 8011356:	33d0      	adds	r3, #208	@ 0xd0
 8011358:	429c      	cmp	r4, r3
 801135a:	d105      	bne.n	8011368 <std+0x54>
 801135c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011364:	f000 b9b6 	b.w	80116d4 <__retarget_lock_init_recursive>
 8011368:	bd10      	pop	{r4, pc}
 801136a:	bf00      	nop
 801136c:	0801152d 	.word	0x0801152d
 8011370:	08011553 	.word	0x08011553
 8011374:	0801158b 	.word	0x0801158b
 8011378:	080115af 	.word	0x080115af
 801137c:	20002540 	.word	0x20002540

08011380 <stdio_exit_handler>:
 8011380:	4a02      	ldr	r2, [pc, #8]	@ (801138c <stdio_exit_handler+0xc>)
 8011382:	4903      	ldr	r1, [pc, #12]	@ (8011390 <stdio_exit_handler+0x10>)
 8011384:	4803      	ldr	r0, [pc, #12]	@ (8011394 <stdio_exit_handler+0x14>)
 8011386:	f000 b869 	b.w	801145c <_fwalk_sglue>
 801138a:	bf00      	nop
 801138c:	200001a8 	.word	0x200001a8
 8011390:	080145f9 	.word	0x080145f9
 8011394:	200001b8 	.word	0x200001b8

08011398 <cleanup_stdio>:
 8011398:	6841      	ldr	r1, [r0, #4]
 801139a:	4b0c      	ldr	r3, [pc, #48]	@ (80113cc <cleanup_stdio+0x34>)
 801139c:	4299      	cmp	r1, r3
 801139e:	b510      	push	{r4, lr}
 80113a0:	4604      	mov	r4, r0
 80113a2:	d001      	beq.n	80113a8 <cleanup_stdio+0x10>
 80113a4:	f003 f928 	bl	80145f8 <_fflush_r>
 80113a8:	68a1      	ldr	r1, [r4, #8]
 80113aa:	4b09      	ldr	r3, [pc, #36]	@ (80113d0 <cleanup_stdio+0x38>)
 80113ac:	4299      	cmp	r1, r3
 80113ae:	d002      	beq.n	80113b6 <cleanup_stdio+0x1e>
 80113b0:	4620      	mov	r0, r4
 80113b2:	f003 f921 	bl	80145f8 <_fflush_r>
 80113b6:	68e1      	ldr	r1, [r4, #12]
 80113b8:	4b06      	ldr	r3, [pc, #24]	@ (80113d4 <cleanup_stdio+0x3c>)
 80113ba:	4299      	cmp	r1, r3
 80113bc:	d004      	beq.n	80113c8 <cleanup_stdio+0x30>
 80113be:	4620      	mov	r0, r4
 80113c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113c4:	f003 b918 	b.w	80145f8 <_fflush_r>
 80113c8:	bd10      	pop	{r4, pc}
 80113ca:	bf00      	nop
 80113cc:	20002540 	.word	0x20002540
 80113d0:	200025a8 	.word	0x200025a8
 80113d4:	20002610 	.word	0x20002610

080113d8 <global_stdio_init.part.0>:
 80113d8:	b510      	push	{r4, lr}
 80113da:	4b0b      	ldr	r3, [pc, #44]	@ (8011408 <global_stdio_init.part.0+0x30>)
 80113dc:	4c0b      	ldr	r4, [pc, #44]	@ (801140c <global_stdio_init.part.0+0x34>)
 80113de:	4a0c      	ldr	r2, [pc, #48]	@ (8011410 <global_stdio_init.part.0+0x38>)
 80113e0:	601a      	str	r2, [r3, #0]
 80113e2:	4620      	mov	r0, r4
 80113e4:	2200      	movs	r2, #0
 80113e6:	2104      	movs	r1, #4
 80113e8:	f7ff ff94 	bl	8011314 <std>
 80113ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80113f0:	2201      	movs	r2, #1
 80113f2:	2109      	movs	r1, #9
 80113f4:	f7ff ff8e 	bl	8011314 <std>
 80113f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80113fc:	2202      	movs	r2, #2
 80113fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011402:	2112      	movs	r1, #18
 8011404:	f7ff bf86 	b.w	8011314 <std>
 8011408:	20002678 	.word	0x20002678
 801140c:	20002540 	.word	0x20002540
 8011410:	08011381 	.word	0x08011381

08011414 <__sfp_lock_acquire>:
 8011414:	4801      	ldr	r0, [pc, #4]	@ (801141c <__sfp_lock_acquire+0x8>)
 8011416:	f000 b95e 	b.w	80116d6 <__retarget_lock_acquire_recursive>
 801141a:	bf00      	nop
 801141c:	20002681 	.word	0x20002681

08011420 <__sfp_lock_release>:
 8011420:	4801      	ldr	r0, [pc, #4]	@ (8011428 <__sfp_lock_release+0x8>)
 8011422:	f000 b959 	b.w	80116d8 <__retarget_lock_release_recursive>
 8011426:	bf00      	nop
 8011428:	20002681 	.word	0x20002681

0801142c <__sinit>:
 801142c:	b510      	push	{r4, lr}
 801142e:	4604      	mov	r4, r0
 8011430:	f7ff fff0 	bl	8011414 <__sfp_lock_acquire>
 8011434:	6a23      	ldr	r3, [r4, #32]
 8011436:	b11b      	cbz	r3, 8011440 <__sinit+0x14>
 8011438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801143c:	f7ff bff0 	b.w	8011420 <__sfp_lock_release>
 8011440:	4b04      	ldr	r3, [pc, #16]	@ (8011454 <__sinit+0x28>)
 8011442:	6223      	str	r3, [r4, #32]
 8011444:	4b04      	ldr	r3, [pc, #16]	@ (8011458 <__sinit+0x2c>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d1f5      	bne.n	8011438 <__sinit+0xc>
 801144c:	f7ff ffc4 	bl	80113d8 <global_stdio_init.part.0>
 8011450:	e7f2      	b.n	8011438 <__sinit+0xc>
 8011452:	bf00      	nop
 8011454:	08011399 	.word	0x08011399
 8011458:	20002678 	.word	0x20002678

0801145c <_fwalk_sglue>:
 801145c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011460:	4607      	mov	r7, r0
 8011462:	4688      	mov	r8, r1
 8011464:	4614      	mov	r4, r2
 8011466:	2600      	movs	r6, #0
 8011468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801146c:	f1b9 0901 	subs.w	r9, r9, #1
 8011470:	d505      	bpl.n	801147e <_fwalk_sglue+0x22>
 8011472:	6824      	ldr	r4, [r4, #0]
 8011474:	2c00      	cmp	r4, #0
 8011476:	d1f7      	bne.n	8011468 <_fwalk_sglue+0xc>
 8011478:	4630      	mov	r0, r6
 801147a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801147e:	89ab      	ldrh	r3, [r5, #12]
 8011480:	2b01      	cmp	r3, #1
 8011482:	d907      	bls.n	8011494 <_fwalk_sglue+0x38>
 8011484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011488:	3301      	adds	r3, #1
 801148a:	d003      	beq.n	8011494 <_fwalk_sglue+0x38>
 801148c:	4629      	mov	r1, r5
 801148e:	4638      	mov	r0, r7
 8011490:	47c0      	blx	r8
 8011492:	4306      	orrs	r6, r0
 8011494:	3568      	adds	r5, #104	@ 0x68
 8011496:	e7e9      	b.n	801146c <_fwalk_sglue+0x10>

08011498 <siprintf>:
 8011498:	b40e      	push	{r1, r2, r3}
 801149a:	b500      	push	{lr}
 801149c:	b09c      	sub	sp, #112	@ 0x70
 801149e:	ab1d      	add	r3, sp, #116	@ 0x74
 80114a0:	9002      	str	r0, [sp, #8]
 80114a2:	9006      	str	r0, [sp, #24]
 80114a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80114a8:	4809      	ldr	r0, [pc, #36]	@ (80114d0 <siprintf+0x38>)
 80114aa:	9107      	str	r1, [sp, #28]
 80114ac:	9104      	str	r1, [sp, #16]
 80114ae:	4909      	ldr	r1, [pc, #36]	@ (80114d4 <siprintf+0x3c>)
 80114b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80114b4:	9105      	str	r1, [sp, #20]
 80114b6:	6800      	ldr	r0, [r0, #0]
 80114b8:	9301      	str	r3, [sp, #4]
 80114ba:	a902      	add	r1, sp, #8
 80114bc:	f002 fc02 	bl	8013cc4 <_svfiprintf_r>
 80114c0:	9b02      	ldr	r3, [sp, #8]
 80114c2:	2200      	movs	r2, #0
 80114c4:	701a      	strb	r2, [r3, #0]
 80114c6:	b01c      	add	sp, #112	@ 0x70
 80114c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80114cc:	b003      	add	sp, #12
 80114ce:	4770      	bx	lr
 80114d0:	200001b4 	.word	0x200001b4
 80114d4:	ffff0208 	.word	0xffff0208

080114d8 <siscanf>:
 80114d8:	b40e      	push	{r1, r2, r3}
 80114da:	b530      	push	{r4, r5, lr}
 80114dc:	b09c      	sub	sp, #112	@ 0x70
 80114de:	ac1f      	add	r4, sp, #124	@ 0x7c
 80114e0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80114e4:	f854 5b04 	ldr.w	r5, [r4], #4
 80114e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80114ec:	9002      	str	r0, [sp, #8]
 80114ee:	9006      	str	r0, [sp, #24]
 80114f0:	f7ee fee6 	bl	80002c0 <strlen>
 80114f4:	4b0b      	ldr	r3, [pc, #44]	@ (8011524 <siscanf+0x4c>)
 80114f6:	9003      	str	r0, [sp, #12]
 80114f8:	9007      	str	r0, [sp, #28]
 80114fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80114fc:	480a      	ldr	r0, [pc, #40]	@ (8011528 <siscanf+0x50>)
 80114fe:	9401      	str	r4, [sp, #4]
 8011500:	2300      	movs	r3, #0
 8011502:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011504:	9314      	str	r3, [sp, #80]	@ 0x50
 8011506:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801150a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801150e:	462a      	mov	r2, r5
 8011510:	4623      	mov	r3, r4
 8011512:	a902      	add	r1, sp, #8
 8011514:	6800      	ldr	r0, [r0, #0]
 8011516:	f002 fd29 	bl	8013f6c <__ssvfiscanf_r>
 801151a:	b01c      	add	sp, #112	@ 0x70
 801151c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011520:	b003      	add	sp, #12
 8011522:	4770      	bx	lr
 8011524:	0801154f 	.word	0x0801154f
 8011528:	200001b4 	.word	0x200001b4

0801152c <__sread>:
 801152c:	b510      	push	{r4, lr}
 801152e:	460c      	mov	r4, r1
 8011530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011534:	f000 f880 	bl	8011638 <_read_r>
 8011538:	2800      	cmp	r0, #0
 801153a:	bfab      	itete	ge
 801153c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801153e:	89a3      	ldrhlt	r3, [r4, #12]
 8011540:	181b      	addge	r3, r3, r0
 8011542:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011546:	bfac      	ite	ge
 8011548:	6563      	strge	r3, [r4, #84]	@ 0x54
 801154a:	81a3      	strhlt	r3, [r4, #12]
 801154c:	bd10      	pop	{r4, pc}

0801154e <__seofread>:
 801154e:	2000      	movs	r0, #0
 8011550:	4770      	bx	lr

08011552 <__swrite>:
 8011552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011556:	461f      	mov	r7, r3
 8011558:	898b      	ldrh	r3, [r1, #12]
 801155a:	05db      	lsls	r3, r3, #23
 801155c:	4605      	mov	r5, r0
 801155e:	460c      	mov	r4, r1
 8011560:	4616      	mov	r6, r2
 8011562:	d505      	bpl.n	8011570 <__swrite+0x1e>
 8011564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011568:	2302      	movs	r3, #2
 801156a:	2200      	movs	r2, #0
 801156c:	f000 f852 	bl	8011614 <_lseek_r>
 8011570:	89a3      	ldrh	r3, [r4, #12]
 8011572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011576:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801157a:	81a3      	strh	r3, [r4, #12]
 801157c:	4632      	mov	r2, r6
 801157e:	463b      	mov	r3, r7
 8011580:	4628      	mov	r0, r5
 8011582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011586:	f000 b869 	b.w	801165c <_write_r>

0801158a <__sseek>:
 801158a:	b510      	push	{r4, lr}
 801158c:	460c      	mov	r4, r1
 801158e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011592:	f000 f83f 	bl	8011614 <_lseek_r>
 8011596:	1c43      	adds	r3, r0, #1
 8011598:	89a3      	ldrh	r3, [r4, #12]
 801159a:	bf15      	itete	ne
 801159c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801159e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80115a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80115a6:	81a3      	strheq	r3, [r4, #12]
 80115a8:	bf18      	it	ne
 80115aa:	81a3      	strhne	r3, [r4, #12]
 80115ac:	bd10      	pop	{r4, pc}

080115ae <__sclose>:
 80115ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115b2:	f000 b81f 	b.w	80115f4 <_close_r>

080115b6 <memset>:
 80115b6:	4402      	add	r2, r0
 80115b8:	4603      	mov	r3, r0
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d100      	bne.n	80115c0 <memset+0xa>
 80115be:	4770      	bx	lr
 80115c0:	f803 1b01 	strb.w	r1, [r3], #1
 80115c4:	e7f9      	b.n	80115ba <memset+0x4>

080115c6 <strncmp>:
 80115c6:	b510      	push	{r4, lr}
 80115c8:	b16a      	cbz	r2, 80115e6 <strncmp+0x20>
 80115ca:	3901      	subs	r1, #1
 80115cc:	1884      	adds	r4, r0, r2
 80115ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80115d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d103      	bne.n	80115e2 <strncmp+0x1c>
 80115da:	42a0      	cmp	r0, r4
 80115dc:	d001      	beq.n	80115e2 <strncmp+0x1c>
 80115de:	2a00      	cmp	r2, #0
 80115e0:	d1f5      	bne.n	80115ce <strncmp+0x8>
 80115e2:	1ad0      	subs	r0, r2, r3
 80115e4:	bd10      	pop	{r4, pc}
 80115e6:	4610      	mov	r0, r2
 80115e8:	e7fc      	b.n	80115e4 <strncmp+0x1e>
	...

080115ec <_localeconv_r>:
 80115ec:	4800      	ldr	r0, [pc, #0]	@ (80115f0 <_localeconv_r+0x4>)
 80115ee:	4770      	bx	lr
 80115f0:	200002f4 	.word	0x200002f4

080115f4 <_close_r>:
 80115f4:	b538      	push	{r3, r4, r5, lr}
 80115f6:	4d06      	ldr	r5, [pc, #24]	@ (8011610 <_close_r+0x1c>)
 80115f8:	2300      	movs	r3, #0
 80115fa:	4604      	mov	r4, r0
 80115fc:	4608      	mov	r0, r1
 80115fe:	602b      	str	r3, [r5, #0]
 8011600:	f7f2 fcdc 	bl	8003fbc <_close>
 8011604:	1c43      	adds	r3, r0, #1
 8011606:	d102      	bne.n	801160e <_close_r+0x1a>
 8011608:	682b      	ldr	r3, [r5, #0]
 801160a:	b103      	cbz	r3, 801160e <_close_r+0x1a>
 801160c:	6023      	str	r3, [r4, #0]
 801160e:	bd38      	pop	{r3, r4, r5, pc}
 8011610:	2000267c 	.word	0x2000267c

08011614 <_lseek_r>:
 8011614:	b538      	push	{r3, r4, r5, lr}
 8011616:	4d07      	ldr	r5, [pc, #28]	@ (8011634 <_lseek_r+0x20>)
 8011618:	4604      	mov	r4, r0
 801161a:	4608      	mov	r0, r1
 801161c:	4611      	mov	r1, r2
 801161e:	2200      	movs	r2, #0
 8011620:	602a      	str	r2, [r5, #0]
 8011622:	461a      	mov	r2, r3
 8011624:	f7f2 fcf1 	bl	800400a <_lseek>
 8011628:	1c43      	adds	r3, r0, #1
 801162a:	d102      	bne.n	8011632 <_lseek_r+0x1e>
 801162c:	682b      	ldr	r3, [r5, #0]
 801162e:	b103      	cbz	r3, 8011632 <_lseek_r+0x1e>
 8011630:	6023      	str	r3, [r4, #0]
 8011632:	bd38      	pop	{r3, r4, r5, pc}
 8011634:	2000267c 	.word	0x2000267c

08011638 <_read_r>:
 8011638:	b538      	push	{r3, r4, r5, lr}
 801163a:	4d07      	ldr	r5, [pc, #28]	@ (8011658 <_read_r+0x20>)
 801163c:	4604      	mov	r4, r0
 801163e:	4608      	mov	r0, r1
 8011640:	4611      	mov	r1, r2
 8011642:	2200      	movs	r2, #0
 8011644:	602a      	str	r2, [r5, #0]
 8011646:	461a      	mov	r2, r3
 8011648:	f7f2 fc7f 	bl	8003f4a <_read>
 801164c:	1c43      	adds	r3, r0, #1
 801164e:	d102      	bne.n	8011656 <_read_r+0x1e>
 8011650:	682b      	ldr	r3, [r5, #0]
 8011652:	b103      	cbz	r3, 8011656 <_read_r+0x1e>
 8011654:	6023      	str	r3, [r4, #0]
 8011656:	bd38      	pop	{r3, r4, r5, pc}
 8011658:	2000267c 	.word	0x2000267c

0801165c <_write_r>:
 801165c:	b538      	push	{r3, r4, r5, lr}
 801165e:	4d07      	ldr	r5, [pc, #28]	@ (801167c <_write_r+0x20>)
 8011660:	4604      	mov	r4, r0
 8011662:	4608      	mov	r0, r1
 8011664:	4611      	mov	r1, r2
 8011666:	2200      	movs	r2, #0
 8011668:	602a      	str	r2, [r5, #0]
 801166a:	461a      	mov	r2, r3
 801166c:	f7f2 fc8a 	bl	8003f84 <_write>
 8011670:	1c43      	adds	r3, r0, #1
 8011672:	d102      	bne.n	801167a <_write_r+0x1e>
 8011674:	682b      	ldr	r3, [r5, #0]
 8011676:	b103      	cbz	r3, 801167a <_write_r+0x1e>
 8011678:	6023      	str	r3, [r4, #0]
 801167a:	bd38      	pop	{r3, r4, r5, pc}
 801167c:	2000267c 	.word	0x2000267c

08011680 <__errno>:
 8011680:	4b01      	ldr	r3, [pc, #4]	@ (8011688 <__errno+0x8>)
 8011682:	6818      	ldr	r0, [r3, #0]
 8011684:	4770      	bx	lr
 8011686:	bf00      	nop
 8011688:	200001b4 	.word	0x200001b4

0801168c <__libc_init_array>:
 801168c:	b570      	push	{r4, r5, r6, lr}
 801168e:	4d0d      	ldr	r5, [pc, #52]	@ (80116c4 <__libc_init_array+0x38>)
 8011690:	4c0d      	ldr	r4, [pc, #52]	@ (80116c8 <__libc_init_array+0x3c>)
 8011692:	1b64      	subs	r4, r4, r5
 8011694:	10a4      	asrs	r4, r4, #2
 8011696:	2600      	movs	r6, #0
 8011698:	42a6      	cmp	r6, r4
 801169a:	d109      	bne.n	80116b0 <__libc_init_array+0x24>
 801169c:	4d0b      	ldr	r5, [pc, #44]	@ (80116cc <__libc_init_array+0x40>)
 801169e:	4c0c      	ldr	r4, [pc, #48]	@ (80116d0 <__libc_init_array+0x44>)
 80116a0:	f005 f97e 	bl	80169a0 <_init>
 80116a4:	1b64      	subs	r4, r4, r5
 80116a6:	10a4      	asrs	r4, r4, #2
 80116a8:	2600      	movs	r6, #0
 80116aa:	42a6      	cmp	r6, r4
 80116ac:	d105      	bne.n	80116ba <__libc_init_array+0x2e>
 80116ae:	bd70      	pop	{r4, r5, r6, pc}
 80116b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80116b4:	4798      	blx	r3
 80116b6:	3601      	adds	r6, #1
 80116b8:	e7ee      	b.n	8011698 <__libc_init_array+0xc>
 80116ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80116be:	4798      	blx	r3
 80116c0:	3601      	adds	r6, #1
 80116c2:	e7f2      	b.n	80116aa <__libc_init_array+0x1e>
 80116c4:	080171f0 	.word	0x080171f0
 80116c8:	080171f0 	.word	0x080171f0
 80116cc:	080171f0 	.word	0x080171f0
 80116d0:	080171f4 	.word	0x080171f4

080116d4 <__retarget_lock_init_recursive>:
 80116d4:	4770      	bx	lr

080116d6 <__retarget_lock_acquire_recursive>:
 80116d6:	4770      	bx	lr

080116d8 <__retarget_lock_release_recursive>:
 80116d8:	4770      	bx	lr

080116da <memcpy>:
 80116da:	440a      	add	r2, r1
 80116dc:	4291      	cmp	r1, r2
 80116de:	f100 33ff 	add.w	r3, r0, #4294967295
 80116e2:	d100      	bne.n	80116e6 <memcpy+0xc>
 80116e4:	4770      	bx	lr
 80116e6:	b510      	push	{r4, lr}
 80116e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80116f0:	4291      	cmp	r1, r2
 80116f2:	d1f9      	bne.n	80116e8 <memcpy+0xe>
 80116f4:	bd10      	pop	{r4, pc}
	...

080116f8 <nanf>:
 80116f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011700 <nanf+0x8>
 80116fc:	4770      	bx	lr
 80116fe:	bf00      	nop
 8011700:	7fc00000 	.word	0x7fc00000

08011704 <quorem>:
 8011704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011708:	6903      	ldr	r3, [r0, #16]
 801170a:	690c      	ldr	r4, [r1, #16]
 801170c:	42a3      	cmp	r3, r4
 801170e:	4607      	mov	r7, r0
 8011710:	db7e      	blt.n	8011810 <quorem+0x10c>
 8011712:	3c01      	subs	r4, #1
 8011714:	f101 0814 	add.w	r8, r1, #20
 8011718:	00a3      	lsls	r3, r4, #2
 801171a:	f100 0514 	add.w	r5, r0, #20
 801171e:	9300      	str	r3, [sp, #0]
 8011720:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011724:	9301      	str	r3, [sp, #4]
 8011726:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801172a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801172e:	3301      	adds	r3, #1
 8011730:	429a      	cmp	r2, r3
 8011732:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011736:	fbb2 f6f3 	udiv	r6, r2, r3
 801173a:	d32e      	bcc.n	801179a <quorem+0x96>
 801173c:	f04f 0a00 	mov.w	sl, #0
 8011740:	46c4      	mov	ip, r8
 8011742:	46ae      	mov	lr, r5
 8011744:	46d3      	mov	fp, sl
 8011746:	f85c 3b04 	ldr.w	r3, [ip], #4
 801174a:	b298      	uxth	r0, r3
 801174c:	fb06 a000 	mla	r0, r6, r0, sl
 8011750:	0c02      	lsrs	r2, r0, #16
 8011752:	0c1b      	lsrs	r3, r3, #16
 8011754:	fb06 2303 	mla	r3, r6, r3, r2
 8011758:	f8de 2000 	ldr.w	r2, [lr]
 801175c:	b280      	uxth	r0, r0
 801175e:	b292      	uxth	r2, r2
 8011760:	1a12      	subs	r2, r2, r0
 8011762:	445a      	add	r2, fp
 8011764:	f8de 0000 	ldr.w	r0, [lr]
 8011768:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801176c:	b29b      	uxth	r3, r3
 801176e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011772:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011776:	b292      	uxth	r2, r2
 8011778:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801177c:	45e1      	cmp	r9, ip
 801177e:	f84e 2b04 	str.w	r2, [lr], #4
 8011782:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011786:	d2de      	bcs.n	8011746 <quorem+0x42>
 8011788:	9b00      	ldr	r3, [sp, #0]
 801178a:	58eb      	ldr	r3, [r5, r3]
 801178c:	b92b      	cbnz	r3, 801179a <quorem+0x96>
 801178e:	9b01      	ldr	r3, [sp, #4]
 8011790:	3b04      	subs	r3, #4
 8011792:	429d      	cmp	r5, r3
 8011794:	461a      	mov	r2, r3
 8011796:	d32f      	bcc.n	80117f8 <quorem+0xf4>
 8011798:	613c      	str	r4, [r7, #16]
 801179a:	4638      	mov	r0, r7
 801179c:	f001 f9c4 	bl	8012b28 <__mcmp>
 80117a0:	2800      	cmp	r0, #0
 80117a2:	db25      	blt.n	80117f0 <quorem+0xec>
 80117a4:	4629      	mov	r1, r5
 80117a6:	2000      	movs	r0, #0
 80117a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80117ac:	f8d1 c000 	ldr.w	ip, [r1]
 80117b0:	fa1f fe82 	uxth.w	lr, r2
 80117b4:	fa1f f38c 	uxth.w	r3, ip
 80117b8:	eba3 030e 	sub.w	r3, r3, lr
 80117bc:	4403      	add	r3, r0
 80117be:	0c12      	lsrs	r2, r2, #16
 80117c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80117c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80117ce:	45c1      	cmp	r9, r8
 80117d0:	f841 3b04 	str.w	r3, [r1], #4
 80117d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80117d8:	d2e6      	bcs.n	80117a8 <quorem+0xa4>
 80117da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80117de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80117e2:	b922      	cbnz	r2, 80117ee <quorem+0xea>
 80117e4:	3b04      	subs	r3, #4
 80117e6:	429d      	cmp	r5, r3
 80117e8:	461a      	mov	r2, r3
 80117ea:	d30b      	bcc.n	8011804 <quorem+0x100>
 80117ec:	613c      	str	r4, [r7, #16]
 80117ee:	3601      	adds	r6, #1
 80117f0:	4630      	mov	r0, r6
 80117f2:	b003      	add	sp, #12
 80117f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117f8:	6812      	ldr	r2, [r2, #0]
 80117fa:	3b04      	subs	r3, #4
 80117fc:	2a00      	cmp	r2, #0
 80117fe:	d1cb      	bne.n	8011798 <quorem+0x94>
 8011800:	3c01      	subs	r4, #1
 8011802:	e7c6      	b.n	8011792 <quorem+0x8e>
 8011804:	6812      	ldr	r2, [r2, #0]
 8011806:	3b04      	subs	r3, #4
 8011808:	2a00      	cmp	r2, #0
 801180a:	d1ef      	bne.n	80117ec <quorem+0xe8>
 801180c:	3c01      	subs	r4, #1
 801180e:	e7ea      	b.n	80117e6 <quorem+0xe2>
 8011810:	2000      	movs	r0, #0
 8011812:	e7ee      	b.n	80117f2 <quorem+0xee>
 8011814:	0000      	movs	r0, r0
	...

08011818 <_dtoa_r>:
 8011818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801181c:	69c7      	ldr	r7, [r0, #28]
 801181e:	b099      	sub	sp, #100	@ 0x64
 8011820:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011824:	ec55 4b10 	vmov	r4, r5, d0
 8011828:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801182a:	9109      	str	r1, [sp, #36]	@ 0x24
 801182c:	4683      	mov	fp, r0
 801182e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011830:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011832:	b97f      	cbnz	r7, 8011854 <_dtoa_r+0x3c>
 8011834:	2010      	movs	r0, #16
 8011836:	f000 fdfd 	bl	8012434 <malloc>
 801183a:	4602      	mov	r2, r0
 801183c:	f8cb 001c 	str.w	r0, [fp, #28]
 8011840:	b920      	cbnz	r0, 801184c <_dtoa_r+0x34>
 8011842:	4ba7      	ldr	r3, [pc, #668]	@ (8011ae0 <_dtoa_r+0x2c8>)
 8011844:	21ef      	movs	r1, #239	@ 0xef
 8011846:	48a7      	ldr	r0, [pc, #668]	@ (8011ae4 <_dtoa_r+0x2cc>)
 8011848:	f002 ffa6 	bl	8014798 <__assert_func>
 801184c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011850:	6007      	str	r7, [r0, #0]
 8011852:	60c7      	str	r7, [r0, #12]
 8011854:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011858:	6819      	ldr	r1, [r3, #0]
 801185a:	b159      	cbz	r1, 8011874 <_dtoa_r+0x5c>
 801185c:	685a      	ldr	r2, [r3, #4]
 801185e:	604a      	str	r2, [r1, #4]
 8011860:	2301      	movs	r3, #1
 8011862:	4093      	lsls	r3, r2
 8011864:	608b      	str	r3, [r1, #8]
 8011866:	4658      	mov	r0, fp
 8011868:	f000 feda 	bl	8012620 <_Bfree>
 801186c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011870:	2200      	movs	r2, #0
 8011872:	601a      	str	r2, [r3, #0]
 8011874:	1e2b      	subs	r3, r5, #0
 8011876:	bfb9      	ittee	lt
 8011878:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801187c:	9303      	strlt	r3, [sp, #12]
 801187e:	2300      	movge	r3, #0
 8011880:	6033      	strge	r3, [r6, #0]
 8011882:	9f03      	ldr	r7, [sp, #12]
 8011884:	4b98      	ldr	r3, [pc, #608]	@ (8011ae8 <_dtoa_r+0x2d0>)
 8011886:	bfbc      	itt	lt
 8011888:	2201      	movlt	r2, #1
 801188a:	6032      	strlt	r2, [r6, #0]
 801188c:	43bb      	bics	r3, r7
 801188e:	d112      	bne.n	80118b6 <_dtoa_r+0x9e>
 8011890:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011892:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011896:	6013      	str	r3, [r2, #0]
 8011898:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801189c:	4323      	orrs	r3, r4
 801189e:	f000 854d 	beq.w	801233c <_dtoa_r+0xb24>
 80118a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80118a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011afc <_dtoa_r+0x2e4>
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	f000 854f 	beq.w	801234c <_dtoa_r+0xb34>
 80118ae:	f10a 0303 	add.w	r3, sl, #3
 80118b2:	f000 bd49 	b.w	8012348 <_dtoa_r+0xb30>
 80118b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80118ba:	2200      	movs	r2, #0
 80118bc:	ec51 0b17 	vmov	r0, r1, d7
 80118c0:	2300      	movs	r3, #0
 80118c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80118c6:	f7ef f927 	bl	8000b18 <__aeabi_dcmpeq>
 80118ca:	4680      	mov	r8, r0
 80118cc:	b158      	cbz	r0, 80118e6 <_dtoa_r+0xce>
 80118ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80118d0:	2301      	movs	r3, #1
 80118d2:	6013      	str	r3, [r2, #0]
 80118d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80118d6:	b113      	cbz	r3, 80118de <_dtoa_r+0xc6>
 80118d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80118da:	4b84      	ldr	r3, [pc, #528]	@ (8011aec <_dtoa_r+0x2d4>)
 80118dc:	6013      	str	r3, [r2, #0]
 80118de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011b00 <_dtoa_r+0x2e8>
 80118e2:	f000 bd33 	b.w	801234c <_dtoa_r+0xb34>
 80118e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80118ea:	aa16      	add	r2, sp, #88	@ 0x58
 80118ec:	a917      	add	r1, sp, #92	@ 0x5c
 80118ee:	4658      	mov	r0, fp
 80118f0:	f001 fa3a 	bl	8012d68 <__d2b>
 80118f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80118f8:	4681      	mov	r9, r0
 80118fa:	2e00      	cmp	r6, #0
 80118fc:	d077      	beq.n	80119ee <_dtoa_r+0x1d6>
 80118fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011900:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801190c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011910:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011914:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011918:	4619      	mov	r1, r3
 801191a:	2200      	movs	r2, #0
 801191c:	4b74      	ldr	r3, [pc, #464]	@ (8011af0 <_dtoa_r+0x2d8>)
 801191e:	f7ee fcdb 	bl	80002d8 <__aeabi_dsub>
 8011922:	a369      	add	r3, pc, #420	@ (adr r3, 8011ac8 <_dtoa_r+0x2b0>)
 8011924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011928:	f7ee fe8e 	bl	8000648 <__aeabi_dmul>
 801192c:	a368      	add	r3, pc, #416	@ (adr r3, 8011ad0 <_dtoa_r+0x2b8>)
 801192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011932:	f7ee fcd3 	bl	80002dc <__adddf3>
 8011936:	4604      	mov	r4, r0
 8011938:	4630      	mov	r0, r6
 801193a:	460d      	mov	r5, r1
 801193c:	f7ee fe1a 	bl	8000574 <__aeabi_i2d>
 8011940:	a365      	add	r3, pc, #404	@ (adr r3, 8011ad8 <_dtoa_r+0x2c0>)
 8011942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011946:	f7ee fe7f 	bl	8000648 <__aeabi_dmul>
 801194a:	4602      	mov	r2, r0
 801194c:	460b      	mov	r3, r1
 801194e:	4620      	mov	r0, r4
 8011950:	4629      	mov	r1, r5
 8011952:	f7ee fcc3 	bl	80002dc <__adddf3>
 8011956:	4604      	mov	r4, r0
 8011958:	460d      	mov	r5, r1
 801195a:	f7ef f925 	bl	8000ba8 <__aeabi_d2iz>
 801195e:	2200      	movs	r2, #0
 8011960:	4607      	mov	r7, r0
 8011962:	2300      	movs	r3, #0
 8011964:	4620      	mov	r0, r4
 8011966:	4629      	mov	r1, r5
 8011968:	f7ef f8e0 	bl	8000b2c <__aeabi_dcmplt>
 801196c:	b140      	cbz	r0, 8011980 <_dtoa_r+0x168>
 801196e:	4638      	mov	r0, r7
 8011970:	f7ee fe00 	bl	8000574 <__aeabi_i2d>
 8011974:	4622      	mov	r2, r4
 8011976:	462b      	mov	r3, r5
 8011978:	f7ef f8ce 	bl	8000b18 <__aeabi_dcmpeq>
 801197c:	b900      	cbnz	r0, 8011980 <_dtoa_r+0x168>
 801197e:	3f01      	subs	r7, #1
 8011980:	2f16      	cmp	r7, #22
 8011982:	d851      	bhi.n	8011a28 <_dtoa_r+0x210>
 8011984:	4b5b      	ldr	r3, [pc, #364]	@ (8011af4 <_dtoa_r+0x2dc>)
 8011986:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801198e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011992:	f7ef f8cb 	bl	8000b2c <__aeabi_dcmplt>
 8011996:	2800      	cmp	r0, #0
 8011998:	d048      	beq.n	8011a2c <_dtoa_r+0x214>
 801199a:	3f01      	subs	r7, #1
 801199c:	2300      	movs	r3, #0
 801199e:	9312      	str	r3, [sp, #72]	@ 0x48
 80119a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80119a2:	1b9b      	subs	r3, r3, r6
 80119a4:	1e5a      	subs	r2, r3, #1
 80119a6:	bf44      	itt	mi
 80119a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80119ac:	2300      	movmi	r3, #0
 80119ae:	9208      	str	r2, [sp, #32]
 80119b0:	bf54      	ite	pl
 80119b2:	f04f 0800 	movpl.w	r8, #0
 80119b6:	9308      	strmi	r3, [sp, #32]
 80119b8:	2f00      	cmp	r7, #0
 80119ba:	db39      	blt.n	8011a30 <_dtoa_r+0x218>
 80119bc:	9b08      	ldr	r3, [sp, #32]
 80119be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80119c0:	443b      	add	r3, r7
 80119c2:	9308      	str	r3, [sp, #32]
 80119c4:	2300      	movs	r3, #0
 80119c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80119c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119ca:	2b09      	cmp	r3, #9
 80119cc:	d864      	bhi.n	8011a98 <_dtoa_r+0x280>
 80119ce:	2b05      	cmp	r3, #5
 80119d0:	bfc4      	itt	gt
 80119d2:	3b04      	subgt	r3, #4
 80119d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80119d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119d8:	f1a3 0302 	sub.w	r3, r3, #2
 80119dc:	bfcc      	ite	gt
 80119de:	2400      	movgt	r4, #0
 80119e0:	2401      	movle	r4, #1
 80119e2:	2b03      	cmp	r3, #3
 80119e4:	d863      	bhi.n	8011aae <_dtoa_r+0x296>
 80119e6:	e8df f003 	tbb	[pc, r3]
 80119ea:	372a      	.short	0x372a
 80119ec:	5535      	.short	0x5535
 80119ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80119f2:	441e      	add	r6, r3
 80119f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80119f8:	2b20      	cmp	r3, #32
 80119fa:	bfc1      	itttt	gt
 80119fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011a00:	409f      	lslgt	r7, r3
 8011a02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011a06:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011a0a:	bfd6      	itet	le
 8011a0c:	f1c3 0320 	rsble	r3, r3, #32
 8011a10:	ea47 0003 	orrgt.w	r0, r7, r3
 8011a14:	fa04 f003 	lslle.w	r0, r4, r3
 8011a18:	f7ee fd9c 	bl	8000554 <__aeabi_ui2d>
 8011a1c:	2201      	movs	r2, #1
 8011a1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011a22:	3e01      	subs	r6, #1
 8011a24:	9214      	str	r2, [sp, #80]	@ 0x50
 8011a26:	e777      	b.n	8011918 <_dtoa_r+0x100>
 8011a28:	2301      	movs	r3, #1
 8011a2a:	e7b8      	b.n	801199e <_dtoa_r+0x186>
 8011a2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8011a2e:	e7b7      	b.n	80119a0 <_dtoa_r+0x188>
 8011a30:	427b      	negs	r3, r7
 8011a32:	930a      	str	r3, [sp, #40]	@ 0x28
 8011a34:	2300      	movs	r3, #0
 8011a36:	eba8 0807 	sub.w	r8, r8, r7
 8011a3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011a3c:	e7c4      	b.n	80119c8 <_dtoa_r+0x1b0>
 8011a3e:	2300      	movs	r3, #0
 8011a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	dc35      	bgt.n	8011ab4 <_dtoa_r+0x29c>
 8011a48:	2301      	movs	r3, #1
 8011a4a:	9300      	str	r3, [sp, #0]
 8011a4c:	9307      	str	r3, [sp, #28]
 8011a4e:	461a      	mov	r2, r3
 8011a50:	920e      	str	r2, [sp, #56]	@ 0x38
 8011a52:	e00b      	b.n	8011a6c <_dtoa_r+0x254>
 8011a54:	2301      	movs	r3, #1
 8011a56:	e7f3      	b.n	8011a40 <_dtoa_r+0x228>
 8011a58:	2300      	movs	r3, #0
 8011a5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a5e:	18fb      	adds	r3, r7, r3
 8011a60:	9300      	str	r3, [sp, #0]
 8011a62:	3301      	adds	r3, #1
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	9307      	str	r3, [sp, #28]
 8011a68:	bfb8      	it	lt
 8011a6a:	2301      	movlt	r3, #1
 8011a6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011a70:	2100      	movs	r1, #0
 8011a72:	2204      	movs	r2, #4
 8011a74:	f102 0514 	add.w	r5, r2, #20
 8011a78:	429d      	cmp	r5, r3
 8011a7a:	d91f      	bls.n	8011abc <_dtoa_r+0x2a4>
 8011a7c:	6041      	str	r1, [r0, #4]
 8011a7e:	4658      	mov	r0, fp
 8011a80:	f000 fd8e 	bl	80125a0 <_Balloc>
 8011a84:	4682      	mov	sl, r0
 8011a86:	2800      	cmp	r0, #0
 8011a88:	d13c      	bne.n	8011b04 <_dtoa_r+0x2ec>
 8011a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8011af8 <_dtoa_r+0x2e0>)
 8011a8c:	4602      	mov	r2, r0
 8011a8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8011a92:	e6d8      	b.n	8011846 <_dtoa_r+0x2e>
 8011a94:	2301      	movs	r3, #1
 8011a96:	e7e0      	b.n	8011a5a <_dtoa_r+0x242>
 8011a98:	2401      	movs	r4, #1
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8011aa4:	9300      	str	r3, [sp, #0]
 8011aa6:	9307      	str	r3, [sp, #28]
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	2312      	movs	r3, #18
 8011aac:	e7d0      	b.n	8011a50 <_dtoa_r+0x238>
 8011aae:	2301      	movs	r3, #1
 8011ab0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ab2:	e7f5      	b.n	8011aa0 <_dtoa_r+0x288>
 8011ab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ab6:	9300      	str	r3, [sp, #0]
 8011ab8:	9307      	str	r3, [sp, #28]
 8011aba:	e7d7      	b.n	8011a6c <_dtoa_r+0x254>
 8011abc:	3101      	adds	r1, #1
 8011abe:	0052      	lsls	r2, r2, #1
 8011ac0:	e7d8      	b.n	8011a74 <_dtoa_r+0x25c>
 8011ac2:	bf00      	nop
 8011ac4:	f3af 8000 	nop.w
 8011ac8:	636f4361 	.word	0x636f4361
 8011acc:	3fd287a7 	.word	0x3fd287a7
 8011ad0:	8b60c8b3 	.word	0x8b60c8b3
 8011ad4:	3fc68a28 	.word	0x3fc68a28
 8011ad8:	509f79fb 	.word	0x509f79fb
 8011adc:	3fd34413 	.word	0x3fd34413
 8011ae0:	08016dac 	.word	0x08016dac
 8011ae4:	08016dc3 	.word	0x08016dc3
 8011ae8:	7ff00000 	.word	0x7ff00000
 8011aec:	08017109 	.word	0x08017109
 8011af0:	3ff80000 	.word	0x3ff80000
 8011af4:	08016ec0 	.word	0x08016ec0
 8011af8:	08016e1b 	.word	0x08016e1b
 8011afc:	08016da8 	.word	0x08016da8
 8011b00:	08017108 	.word	0x08017108
 8011b04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011b08:	6018      	str	r0, [r3, #0]
 8011b0a:	9b07      	ldr	r3, [sp, #28]
 8011b0c:	2b0e      	cmp	r3, #14
 8011b0e:	f200 80a4 	bhi.w	8011c5a <_dtoa_r+0x442>
 8011b12:	2c00      	cmp	r4, #0
 8011b14:	f000 80a1 	beq.w	8011c5a <_dtoa_r+0x442>
 8011b18:	2f00      	cmp	r7, #0
 8011b1a:	dd33      	ble.n	8011b84 <_dtoa_r+0x36c>
 8011b1c:	4bad      	ldr	r3, [pc, #692]	@ (8011dd4 <_dtoa_r+0x5bc>)
 8011b1e:	f007 020f 	and.w	r2, r7, #15
 8011b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b26:	ed93 7b00 	vldr	d7, [r3]
 8011b2a:	05f8      	lsls	r0, r7, #23
 8011b2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011b30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011b34:	d516      	bpl.n	8011b64 <_dtoa_r+0x34c>
 8011b36:	4ba8      	ldr	r3, [pc, #672]	@ (8011dd8 <_dtoa_r+0x5c0>)
 8011b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011b40:	f7ee feac 	bl	800089c <__aeabi_ddiv>
 8011b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b48:	f004 040f 	and.w	r4, r4, #15
 8011b4c:	2603      	movs	r6, #3
 8011b4e:	4da2      	ldr	r5, [pc, #648]	@ (8011dd8 <_dtoa_r+0x5c0>)
 8011b50:	b954      	cbnz	r4, 8011b68 <_dtoa_r+0x350>
 8011b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b5a:	f7ee fe9f 	bl	800089c <__aeabi_ddiv>
 8011b5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b62:	e028      	b.n	8011bb6 <_dtoa_r+0x39e>
 8011b64:	2602      	movs	r6, #2
 8011b66:	e7f2      	b.n	8011b4e <_dtoa_r+0x336>
 8011b68:	07e1      	lsls	r1, r4, #31
 8011b6a:	d508      	bpl.n	8011b7e <_dtoa_r+0x366>
 8011b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011b70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011b74:	f7ee fd68 	bl	8000648 <__aeabi_dmul>
 8011b78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011b7c:	3601      	adds	r6, #1
 8011b7e:	1064      	asrs	r4, r4, #1
 8011b80:	3508      	adds	r5, #8
 8011b82:	e7e5      	b.n	8011b50 <_dtoa_r+0x338>
 8011b84:	f000 80d2 	beq.w	8011d2c <_dtoa_r+0x514>
 8011b88:	427c      	negs	r4, r7
 8011b8a:	4b92      	ldr	r3, [pc, #584]	@ (8011dd4 <_dtoa_r+0x5bc>)
 8011b8c:	4d92      	ldr	r5, [pc, #584]	@ (8011dd8 <_dtoa_r+0x5c0>)
 8011b8e:	f004 020f 	and.w	r2, r4, #15
 8011b92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b9e:	f7ee fd53 	bl	8000648 <__aeabi_dmul>
 8011ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ba6:	1124      	asrs	r4, r4, #4
 8011ba8:	2300      	movs	r3, #0
 8011baa:	2602      	movs	r6, #2
 8011bac:	2c00      	cmp	r4, #0
 8011bae:	f040 80b2 	bne.w	8011d16 <_dtoa_r+0x4fe>
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d1d3      	bne.n	8011b5e <_dtoa_r+0x346>
 8011bb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011bb8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	f000 80b7 	beq.w	8011d30 <_dtoa_r+0x518>
 8011bc2:	4b86      	ldr	r3, [pc, #536]	@ (8011ddc <_dtoa_r+0x5c4>)
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	4629      	mov	r1, r5
 8011bca:	f7ee ffaf 	bl	8000b2c <__aeabi_dcmplt>
 8011bce:	2800      	cmp	r0, #0
 8011bd0:	f000 80ae 	beq.w	8011d30 <_dtoa_r+0x518>
 8011bd4:	9b07      	ldr	r3, [sp, #28]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	f000 80aa 	beq.w	8011d30 <_dtoa_r+0x518>
 8011bdc:	9b00      	ldr	r3, [sp, #0]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	dd37      	ble.n	8011c52 <_dtoa_r+0x43a>
 8011be2:	1e7b      	subs	r3, r7, #1
 8011be4:	9304      	str	r3, [sp, #16]
 8011be6:	4620      	mov	r0, r4
 8011be8:	4b7d      	ldr	r3, [pc, #500]	@ (8011de0 <_dtoa_r+0x5c8>)
 8011bea:	2200      	movs	r2, #0
 8011bec:	4629      	mov	r1, r5
 8011bee:	f7ee fd2b 	bl	8000648 <__aeabi_dmul>
 8011bf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011bf6:	9c00      	ldr	r4, [sp, #0]
 8011bf8:	3601      	adds	r6, #1
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	f7ee fcba 	bl	8000574 <__aeabi_i2d>
 8011c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011c04:	f7ee fd20 	bl	8000648 <__aeabi_dmul>
 8011c08:	4b76      	ldr	r3, [pc, #472]	@ (8011de4 <_dtoa_r+0x5cc>)
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	f7ee fb66 	bl	80002dc <__adddf3>
 8011c10:	4605      	mov	r5, r0
 8011c12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011c16:	2c00      	cmp	r4, #0
 8011c18:	f040 808d 	bne.w	8011d36 <_dtoa_r+0x51e>
 8011c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c20:	4b71      	ldr	r3, [pc, #452]	@ (8011de8 <_dtoa_r+0x5d0>)
 8011c22:	2200      	movs	r2, #0
 8011c24:	f7ee fb58 	bl	80002d8 <__aeabi_dsub>
 8011c28:	4602      	mov	r2, r0
 8011c2a:	460b      	mov	r3, r1
 8011c2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011c30:	462a      	mov	r2, r5
 8011c32:	4633      	mov	r3, r6
 8011c34:	f7ee ff98 	bl	8000b68 <__aeabi_dcmpgt>
 8011c38:	2800      	cmp	r0, #0
 8011c3a:	f040 828b 	bne.w	8012154 <_dtoa_r+0x93c>
 8011c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c42:	462a      	mov	r2, r5
 8011c44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011c48:	f7ee ff70 	bl	8000b2c <__aeabi_dcmplt>
 8011c4c:	2800      	cmp	r0, #0
 8011c4e:	f040 8128 	bne.w	8011ea2 <_dtoa_r+0x68a>
 8011c52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011c56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011c5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	f2c0 815a 	blt.w	8011f16 <_dtoa_r+0x6fe>
 8011c62:	2f0e      	cmp	r7, #14
 8011c64:	f300 8157 	bgt.w	8011f16 <_dtoa_r+0x6fe>
 8011c68:	4b5a      	ldr	r3, [pc, #360]	@ (8011dd4 <_dtoa_r+0x5bc>)
 8011c6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011c6e:	ed93 7b00 	vldr	d7, [r3]
 8011c72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	ed8d 7b00 	vstr	d7, [sp]
 8011c7a:	da03      	bge.n	8011c84 <_dtoa_r+0x46c>
 8011c7c:	9b07      	ldr	r3, [sp, #28]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	f340 8101 	ble.w	8011e86 <_dtoa_r+0x66e>
 8011c84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011c88:	4656      	mov	r6, sl
 8011c8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c8e:	4620      	mov	r0, r4
 8011c90:	4629      	mov	r1, r5
 8011c92:	f7ee fe03 	bl	800089c <__aeabi_ddiv>
 8011c96:	f7ee ff87 	bl	8000ba8 <__aeabi_d2iz>
 8011c9a:	4680      	mov	r8, r0
 8011c9c:	f7ee fc6a 	bl	8000574 <__aeabi_i2d>
 8011ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ca4:	f7ee fcd0 	bl	8000648 <__aeabi_dmul>
 8011ca8:	4602      	mov	r2, r0
 8011caa:	460b      	mov	r3, r1
 8011cac:	4620      	mov	r0, r4
 8011cae:	4629      	mov	r1, r5
 8011cb0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011cb4:	f7ee fb10 	bl	80002d8 <__aeabi_dsub>
 8011cb8:	f806 4b01 	strb.w	r4, [r6], #1
 8011cbc:	9d07      	ldr	r5, [sp, #28]
 8011cbe:	eba6 040a 	sub.w	r4, r6, sl
 8011cc2:	42a5      	cmp	r5, r4
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	460b      	mov	r3, r1
 8011cc8:	f040 8117 	bne.w	8011efa <_dtoa_r+0x6e2>
 8011ccc:	f7ee fb06 	bl	80002dc <__adddf3>
 8011cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cd4:	4604      	mov	r4, r0
 8011cd6:	460d      	mov	r5, r1
 8011cd8:	f7ee ff46 	bl	8000b68 <__aeabi_dcmpgt>
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	f040 80f9 	bne.w	8011ed4 <_dtoa_r+0x6bc>
 8011ce2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	4629      	mov	r1, r5
 8011cea:	f7ee ff15 	bl	8000b18 <__aeabi_dcmpeq>
 8011cee:	b118      	cbz	r0, 8011cf8 <_dtoa_r+0x4e0>
 8011cf0:	f018 0f01 	tst.w	r8, #1
 8011cf4:	f040 80ee 	bne.w	8011ed4 <_dtoa_r+0x6bc>
 8011cf8:	4649      	mov	r1, r9
 8011cfa:	4658      	mov	r0, fp
 8011cfc:	f000 fc90 	bl	8012620 <_Bfree>
 8011d00:	2300      	movs	r3, #0
 8011d02:	7033      	strb	r3, [r6, #0]
 8011d04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011d06:	3701      	adds	r7, #1
 8011d08:	601f      	str	r7, [r3, #0]
 8011d0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	f000 831d 	beq.w	801234c <_dtoa_r+0xb34>
 8011d12:	601e      	str	r6, [r3, #0]
 8011d14:	e31a      	b.n	801234c <_dtoa_r+0xb34>
 8011d16:	07e2      	lsls	r2, r4, #31
 8011d18:	d505      	bpl.n	8011d26 <_dtoa_r+0x50e>
 8011d1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d1e:	f7ee fc93 	bl	8000648 <__aeabi_dmul>
 8011d22:	3601      	adds	r6, #1
 8011d24:	2301      	movs	r3, #1
 8011d26:	1064      	asrs	r4, r4, #1
 8011d28:	3508      	adds	r5, #8
 8011d2a:	e73f      	b.n	8011bac <_dtoa_r+0x394>
 8011d2c:	2602      	movs	r6, #2
 8011d2e:	e742      	b.n	8011bb6 <_dtoa_r+0x39e>
 8011d30:	9c07      	ldr	r4, [sp, #28]
 8011d32:	9704      	str	r7, [sp, #16]
 8011d34:	e761      	b.n	8011bfa <_dtoa_r+0x3e2>
 8011d36:	4b27      	ldr	r3, [pc, #156]	@ (8011dd4 <_dtoa_r+0x5bc>)
 8011d38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011d3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011d3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011d42:	4454      	add	r4, sl
 8011d44:	2900      	cmp	r1, #0
 8011d46:	d053      	beq.n	8011df0 <_dtoa_r+0x5d8>
 8011d48:	4928      	ldr	r1, [pc, #160]	@ (8011dec <_dtoa_r+0x5d4>)
 8011d4a:	2000      	movs	r0, #0
 8011d4c:	f7ee fda6 	bl	800089c <__aeabi_ddiv>
 8011d50:	4633      	mov	r3, r6
 8011d52:	462a      	mov	r2, r5
 8011d54:	f7ee fac0 	bl	80002d8 <__aeabi_dsub>
 8011d58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011d5c:	4656      	mov	r6, sl
 8011d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d62:	f7ee ff21 	bl	8000ba8 <__aeabi_d2iz>
 8011d66:	4605      	mov	r5, r0
 8011d68:	f7ee fc04 	bl	8000574 <__aeabi_i2d>
 8011d6c:	4602      	mov	r2, r0
 8011d6e:	460b      	mov	r3, r1
 8011d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d74:	f7ee fab0 	bl	80002d8 <__aeabi_dsub>
 8011d78:	3530      	adds	r5, #48	@ 0x30
 8011d7a:	4602      	mov	r2, r0
 8011d7c:	460b      	mov	r3, r1
 8011d7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011d82:	f806 5b01 	strb.w	r5, [r6], #1
 8011d86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011d8a:	f7ee fecf 	bl	8000b2c <__aeabi_dcmplt>
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	d171      	bne.n	8011e76 <_dtoa_r+0x65e>
 8011d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011d96:	4911      	ldr	r1, [pc, #68]	@ (8011ddc <_dtoa_r+0x5c4>)
 8011d98:	2000      	movs	r0, #0
 8011d9a:	f7ee fa9d 	bl	80002d8 <__aeabi_dsub>
 8011d9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011da2:	f7ee fec3 	bl	8000b2c <__aeabi_dcmplt>
 8011da6:	2800      	cmp	r0, #0
 8011da8:	f040 8095 	bne.w	8011ed6 <_dtoa_r+0x6be>
 8011dac:	42a6      	cmp	r6, r4
 8011dae:	f43f af50 	beq.w	8011c52 <_dtoa_r+0x43a>
 8011db2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011db6:	4b0a      	ldr	r3, [pc, #40]	@ (8011de0 <_dtoa_r+0x5c8>)
 8011db8:	2200      	movs	r2, #0
 8011dba:	f7ee fc45 	bl	8000648 <__aeabi_dmul>
 8011dbe:	4b08      	ldr	r3, [pc, #32]	@ (8011de0 <_dtoa_r+0x5c8>)
 8011dc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011dca:	f7ee fc3d 	bl	8000648 <__aeabi_dmul>
 8011dce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011dd2:	e7c4      	b.n	8011d5e <_dtoa_r+0x546>
 8011dd4:	08016ec0 	.word	0x08016ec0
 8011dd8:	08016e98 	.word	0x08016e98
 8011ddc:	3ff00000 	.word	0x3ff00000
 8011de0:	40240000 	.word	0x40240000
 8011de4:	401c0000 	.word	0x401c0000
 8011de8:	40140000 	.word	0x40140000
 8011dec:	3fe00000 	.word	0x3fe00000
 8011df0:	4631      	mov	r1, r6
 8011df2:	4628      	mov	r0, r5
 8011df4:	f7ee fc28 	bl	8000648 <__aeabi_dmul>
 8011df8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011dfc:	9415      	str	r4, [sp, #84]	@ 0x54
 8011dfe:	4656      	mov	r6, sl
 8011e00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e04:	f7ee fed0 	bl	8000ba8 <__aeabi_d2iz>
 8011e08:	4605      	mov	r5, r0
 8011e0a:	f7ee fbb3 	bl	8000574 <__aeabi_i2d>
 8011e0e:	4602      	mov	r2, r0
 8011e10:	460b      	mov	r3, r1
 8011e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e16:	f7ee fa5f 	bl	80002d8 <__aeabi_dsub>
 8011e1a:	3530      	adds	r5, #48	@ 0x30
 8011e1c:	f806 5b01 	strb.w	r5, [r6], #1
 8011e20:	4602      	mov	r2, r0
 8011e22:	460b      	mov	r3, r1
 8011e24:	42a6      	cmp	r6, r4
 8011e26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011e2a:	f04f 0200 	mov.w	r2, #0
 8011e2e:	d124      	bne.n	8011e7a <_dtoa_r+0x662>
 8011e30:	4bac      	ldr	r3, [pc, #688]	@ (80120e4 <_dtoa_r+0x8cc>)
 8011e32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011e36:	f7ee fa51 	bl	80002dc <__adddf3>
 8011e3a:	4602      	mov	r2, r0
 8011e3c:	460b      	mov	r3, r1
 8011e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e42:	f7ee fe91 	bl	8000b68 <__aeabi_dcmpgt>
 8011e46:	2800      	cmp	r0, #0
 8011e48:	d145      	bne.n	8011ed6 <_dtoa_r+0x6be>
 8011e4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011e4e:	49a5      	ldr	r1, [pc, #660]	@ (80120e4 <_dtoa_r+0x8cc>)
 8011e50:	2000      	movs	r0, #0
 8011e52:	f7ee fa41 	bl	80002d8 <__aeabi_dsub>
 8011e56:	4602      	mov	r2, r0
 8011e58:	460b      	mov	r3, r1
 8011e5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e5e:	f7ee fe65 	bl	8000b2c <__aeabi_dcmplt>
 8011e62:	2800      	cmp	r0, #0
 8011e64:	f43f aef5 	beq.w	8011c52 <_dtoa_r+0x43a>
 8011e68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011e6a:	1e73      	subs	r3, r6, #1
 8011e6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8011e6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011e72:	2b30      	cmp	r3, #48	@ 0x30
 8011e74:	d0f8      	beq.n	8011e68 <_dtoa_r+0x650>
 8011e76:	9f04      	ldr	r7, [sp, #16]
 8011e78:	e73e      	b.n	8011cf8 <_dtoa_r+0x4e0>
 8011e7a:	4b9b      	ldr	r3, [pc, #620]	@ (80120e8 <_dtoa_r+0x8d0>)
 8011e7c:	f7ee fbe4 	bl	8000648 <__aeabi_dmul>
 8011e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e84:	e7bc      	b.n	8011e00 <_dtoa_r+0x5e8>
 8011e86:	d10c      	bne.n	8011ea2 <_dtoa_r+0x68a>
 8011e88:	4b98      	ldr	r3, [pc, #608]	@ (80120ec <_dtoa_r+0x8d4>)
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e90:	f7ee fbda 	bl	8000648 <__aeabi_dmul>
 8011e94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e98:	f7ee fe5c 	bl	8000b54 <__aeabi_dcmpge>
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	f000 8157 	beq.w	8012150 <_dtoa_r+0x938>
 8011ea2:	2400      	movs	r4, #0
 8011ea4:	4625      	mov	r5, r4
 8011ea6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ea8:	43db      	mvns	r3, r3
 8011eaa:	9304      	str	r3, [sp, #16]
 8011eac:	4656      	mov	r6, sl
 8011eae:	2700      	movs	r7, #0
 8011eb0:	4621      	mov	r1, r4
 8011eb2:	4658      	mov	r0, fp
 8011eb4:	f000 fbb4 	bl	8012620 <_Bfree>
 8011eb8:	2d00      	cmp	r5, #0
 8011eba:	d0dc      	beq.n	8011e76 <_dtoa_r+0x65e>
 8011ebc:	b12f      	cbz	r7, 8011eca <_dtoa_r+0x6b2>
 8011ebe:	42af      	cmp	r7, r5
 8011ec0:	d003      	beq.n	8011eca <_dtoa_r+0x6b2>
 8011ec2:	4639      	mov	r1, r7
 8011ec4:	4658      	mov	r0, fp
 8011ec6:	f000 fbab 	bl	8012620 <_Bfree>
 8011eca:	4629      	mov	r1, r5
 8011ecc:	4658      	mov	r0, fp
 8011ece:	f000 fba7 	bl	8012620 <_Bfree>
 8011ed2:	e7d0      	b.n	8011e76 <_dtoa_r+0x65e>
 8011ed4:	9704      	str	r7, [sp, #16]
 8011ed6:	4633      	mov	r3, r6
 8011ed8:	461e      	mov	r6, r3
 8011eda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011ede:	2a39      	cmp	r2, #57	@ 0x39
 8011ee0:	d107      	bne.n	8011ef2 <_dtoa_r+0x6da>
 8011ee2:	459a      	cmp	sl, r3
 8011ee4:	d1f8      	bne.n	8011ed8 <_dtoa_r+0x6c0>
 8011ee6:	9a04      	ldr	r2, [sp, #16]
 8011ee8:	3201      	adds	r2, #1
 8011eea:	9204      	str	r2, [sp, #16]
 8011eec:	2230      	movs	r2, #48	@ 0x30
 8011eee:	f88a 2000 	strb.w	r2, [sl]
 8011ef2:	781a      	ldrb	r2, [r3, #0]
 8011ef4:	3201      	adds	r2, #1
 8011ef6:	701a      	strb	r2, [r3, #0]
 8011ef8:	e7bd      	b.n	8011e76 <_dtoa_r+0x65e>
 8011efa:	4b7b      	ldr	r3, [pc, #492]	@ (80120e8 <_dtoa_r+0x8d0>)
 8011efc:	2200      	movs	r2, #0
 8011efe:	f7ee fba3 	bl	8000648 <__aeabi_dmul>
 8011f02:	2200      	movs	r2, #0
 8011f04:	2300      	movs	r3, #0
 8011f06:	4604      	mov	r4, r0
 8011f08:	460d      	mov	r5, r1
 8011f0a:	f7ee fe05 	bl	8000b18 <__aeabi_dcmpeq>
 8011f0e:	2800      	cmp	r0, #0
 8011f10:	f43f aebb 	beq.w	8011c8a <_dtoa_r+0x472>
 8011f14:	e6f0      	b.n	8011cf8 <_dtoa_r+0x4e0>
 8011f16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011f18:	2a00      	cmp	r2, #0
 8011f1a:	f000 80db 	beq.w	80120d4 <_dtoa_r+0x8bc>
 8011f1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f20:	2a01      	cmp	r2, #1
 8011f22:	f300 80bf 	bgt.w	80120a4 <_dtoa_r+0x88c>
 8011f26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011f28:	2a00      	cmp	r2, #0
 8011f2a:	f000 80b7 	beq.w	801209c <_dtoa_r+0x884>
 8011f2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011f32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011f34:	4646      	mov	r6, r8
 8011f36:	9a08      	ldr	r2, [sp, #32]
 8011f38:	2101      	movs	r1, #1
 8011f3a:	441a      	add	r2, r3
 8011f3c:	4658      	mov	r0, fp
 8011f3e:	4498      	add	r8, r3
 8011f40:	9208      	str	r2, [sp, #32]
 8011f42:	f000 fc6b 	bl	801281c <__i2b>
 8011f46:	4605      	mov	r5, r0
 8011f48:	b15e      	cbz	r6, 8011f62 <_dtoa_r+0x74a>
 8011f4a:	9b08      	ldr	r3, [sp, #32]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	dd08      	ble.n	8011f62 <_dtoa_r+0x74a>
 8011f50:	42b3      	cmp	r3, r6
 8011f52:	9a08      	ldr	r2, [sp, #32]
 8011f54:	bfa8      	it	ge
 8011f56:	4633      	movge	r3, r6
 8011f58:	eba8 0803 	sub.w	r8, r8, r3
 8011f5c:	1af6      	subs	r6, r6, r3
 8011f5e:	1ad3      	subs	r3, r2, r3
 8011f60:	9308      	str	r3, [sp, #32]
 8011f62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f64:	b1f3      	cbz	r3, 8011fa4 <_dtoa_r+0x78c>
 8011f66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	f000 80b7 	beq.w	80120dc <_dtoa_r+0x8c4>
 8011f6e:	b18c      	cbz	r4, 8011f94 <_dtoa_r+0x77c>
 8011f70:	4629      	mov	r1, r5
 8011f72:	4622      	mov	r2, r4
 8011f74:	4658      	mov	r0, fp
 8011f76:	f000 fd11 	bl	801299c <__pow5mult>
 8011f7a:	464a      	mov	r2, r9
 8011f7c:	4601      	mov	r1, r0
 8011f7e:	4605      	mov	r5, r0
 8011f80:	4658      	mov	r0, fp
 8011f82:	f000 fc61 	bl	8012848 <__multiply>
 8011f86:	4649      	mov	r1, r9
 8011f88:	9004      	str	r0, [sp, #16]
 8011f8a:	4658      	mov	r0, fp
 8011f8c:	f000 fb48 	bl	8012620 <_Bfree>
 8011f90:	9b04      	ldr	r3, [sp, #16]
 8011f92:	4699      	mov	r9, r3
 8011f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f96:	1b1a      	subs	r2, r3, r4
 8011f98:	d004      	beq.n	8011fa4 <_dtoa_r+0x78c>
 8011f9a:	4649      	mov	r1, r9
 8011f9c:	4658      	mov	r0, fp
 8011f9e:	f000 fcfd 	bl	801299c <__pow5mult>
 8011fa2:	4681      	mov	r9, r0
 8011fa4:	2101      	movs	r1, #1
 8011fa6:	4658      	mov	r0, fp
 8011fa8:	f000 fc38 	bl	801281c <__i2b>
 8011fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011fae:	4604      	mov	r4, r0
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	f000 81cf 	beq.w	8012354 <_dtoa_r+0xb3c>
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	4601      	mov	r1, r0
 8011fba:	4658      	mov	r0, fp
 8011fbc:	f000 fcee 	bl	801299c <__pow5mult>
 8011fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fc2:	2b01      	cmp	r3, #1
 8011fc4:	4604      	mov	r4, r0
 8011fc6:	f300 8095 	bgt.w	80120f4 <_dtoa_r+0x8dc>
 8011fca:	9b02      	ldr	r3, [sp, #8]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	f040 8087 	bne.w	80120e0 <_dtoa_r+0x8c8>
 8011fd2:	9b03      	ldr	r3, [sp, #12]
 8011fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	f040 8089 	bne.w	80120f0 <_dtoa_r+0x8d8>
 8011fde:	9b03      	ldr	r3, [sp, #12]
 8011fe0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011fe4:	0d1b      	lsrs	r3, r3, #20
 8011fe6:	051b      	lsls	r3, r3, #20
 8011fe8:	b12b      	cbz	r3, 8011ff6 <_dtoa_r+0x7de>
 8011fea:	9b08      	ldr	r3, [sp, #32]
 8011fec:	3301      	adds	r3, #1
 8011fee:	9308      	str	r3, [sp, #32]
 8011ff0:	f108 0801 	add.w	r8, r8, #1
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ff8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	f000 81b0 	beq.w	8012360 <_dtoa_r+0xb48>
 8012000:	6923      	ldr	r3, [r4, #16]
 8012002:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012006:	6918      	ldr	r0, [r3, #16]
 8012008:	f000 fbbc 	bl	8012784 <__hi0bits>
 801200c:	f1c0 0020 	rsb	r0, r0, #32
 8012010:	9b08      	ldr	r3, [sp, #32]
 8012012:	4418      	add	r0, r3
 8012014:	f010 001f 	ands.w	r0, r0, #31
 8012018:	d077      	beq.n	801210a <_dtoa_r+0x8f2>
 801201a:	f1c0 0320 	rsb	r3, r0, #32
 801201e:	2b04      	cmp	r3, #4
 8012020:	dd6b      	ble.n	80120fa <_dtoa_r+0x8e2>
 8012022:	9b08      	ldr	r3, [sp, #32]
 8012024:	f1c0 001c 	rsb	r0, r0, #28
 8012028:	4403      	add	r3, r0
 801202a:	4480      	add	r8, r0
 801202c:	4406      	add	r6, r0
 801202e:	9308      	str	r3, [sp, #32]
 8012030:	f1b8 0f00 	cmp.w	r8, #0
 8012034:	dd05      	ble.n	8012042 <_dtoa_r+0x82a>
 8012036:	4649      	mov	r1, r9
 8012038:	4642      	mov	r2, r8
 801203a:	4658      	mov	r0, fp
 801203c:	f000 fd08 	bl	8012a50 <__lshift>
 8012040:	4681      	mov	r9, r0
 8012042:	9b08      	ldr	r3, [sp, #32]
 8012044:	2b00      	cmp	r3, #0
 8012046:	dd05      	ble.n	8012054 <_dtoa_r+0x83c>
 8012048:	4621      	mov	r1, r4
 801204a:	461a      	mov	r2, r3
 801204c:	4658      	mov	r0, fp
 801204e:	f000 fcff 	bl	8012a50 <__lshift>
 8012052:	4604      	mov	r4, r0
 8012054:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012056:	2b00      	cmp	r3, #0
 8012058:	d059      	beq.n	801210e <_dtoa_r+0x8f6>
 801205a:	4621      	mov	r1, r4
 801205c:	4648      	mov	r0, r9
 801205e:	f000 fd63 	bl	8012b28 <__mcmp>
 8012062:	2800      	cmp	r0, #0
 8012064:	da53      	bge.n	801210e <_dtoa_r+0x8f6>
 8012066:	1e7b      	subs	r3, r7, #1
 8012068:	9304      	str	r3, [sp, #16]
 801206a:	4649      	mov	r1, r9
 801206c:	2300      	movs	r3, #0
 801206e:	220a      	movs	r2, #10
 8012070:	4658      	mov	r0, fp
 8012072:	f000 faf7 	bl	8012664 <__multadd>
 8012076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012078:	4681      	mov	r9, r0
 801207a:	2b00      	cmp	r3, #0
 801207c:	f000 8172 	beq.w	8012364 <_dtoa_r+0xb4c>
 8012080:	2300      	movs	r3, #0
 8012082:	4629      	mov	r1, r5
 8012084:	220a      	movs	r2, #10
 8012086:	4658      	mov	r0, fp
 8012088:	f000 faec 	bl	8012664 <__multadd>
 801208c:	9b00      	ldr	r3, [sp, #0]
 801208e:	2b00      	cmp	r3, #0
 8012090:	4605      	mov	r5, r0
 8012092:	dc67      	bgt.n	8012164 <_dtoa_r+0x94c>
 8012094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012096:	2b02      	cmp	r3, #2
 8012098:	dc41      	bgt.n	801211e <_dtoa_r+0x906>
 801209a:	e063      	b.n	8012164 <_dtoa_r+0x94c>
 801209c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801209e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80120a2:	e746      	b.n	8011f32 <_dtoa_r+0x71a>
 80120a4:	9b07      	ldr	r3, [sp, #28]
 80120a6:	1e5c      	subs	r4, r3, #1
 80120a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120aa:	42a3      	cmp	r3, r4
 80120ac:	bfbf      	itttt	lt
 80120ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80120b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80120b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80120b4:	1ae3      	sublt	r3, r4, r3
 80120b6:	bfb4      	ite	lt
 80120b8:	18d2      	addlt	r2, r2, r3
 80120ba:	1b1c      	subge	r4, r3, r4
 80120bc:	9b07      	ldr	r3, [sp, #28]
 80120be:	bfbc      	itt	lt
 80120c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80120c2:	2400      	movlt	r4, #0
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	bfb5      	itete	lt
 80120c8:	eba8 0603 	sublt.w	r6, r8, r3
 80120cc:	9b07      	ldrge	r3, [sp, #28]
 80120ce:	2300      	movlt	r3, #0
 80120d0:	4646      	movge	r6, r8
 80120d2:	e730      	b.n	8011f36 <_dtoa_r+0x71e>
 80120d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80120d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80120d8:	4646      	mov	r6, r8
 80120da:	e735      	b.n	8011f48 <_dtoa_r+0x730>
 80120dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80120de:	e75c      	b.n	8011f9a <_dtoa_r+0x782>
 80120e0:	2300      	movs	r3, #0
 80120e2:	e788      	b.n	8011ff6 <_dtoa_r+0x7de>
 80120e4:	3fe00000 	.word	0x3fe00000
 80120e8:	40240000 	.word	0x40240000
 80120ec:	40140000 	.word	0x40140000
 80120f0:	9b02      	ldr	r3, [sp, #8]
 80120f2:	e780      	b.n	8011ff6 <_dtoa_r+0x7de>
 80120f4:	2300      	movs	r3, #0
 80120f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80120f8:	e782      	b.n	8012000 <_dtoa_r+0x7e8>
 80120fa:	d099      	beq.n	8012030 <_dtoa_r+0x818>
 80120fc:	9a08      	ldr	r2, [sp, #32]
 80120fe:	331c      	adds	r3, #28
 8012100:	441a      	add	r2, r3
 8012102:	4498      	add	r8, r3
 8012104:	441e      	add	r6, r3
 8012106:	9208      	str	r2, [sp, #32]
 8012108:	e792      	b.n	8012030 <_dtoa_r+0x818>
 801210a:	4603      	mov	r3, r0
 801210c:	e7f6      	b.n	80120fc <_dtoa_r+0x8e4>
 801210e:	9b07      	ldr	r3, [sp, #28]
 8012110:	9704      	str	r7, [sp, #16]
 8012112:	2b00      	cmp	r3, #0
 8012114:	dc20      	bgt.n	8012158 <_dtoa_r+0x940>
 8012116:	9300      	str	r3, [sp, #0]
 8012118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801211a:	2b02      	cmp	r3, #2
 801211c:	dd1e      	ble.n	801215c <_dtoa_r+0x944>
 801211e:	9b00      	ldr	r3, [sp, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	f47f aec0 	bne.w	8011ea6 <_dtoa_r+0x68e>
 8012126:	4621      	mov	r1, r4
 8012128:	2205      	movs	r2, #5
 801212a:	4658      	mov	r0, fp
 801212c:	f000 fa9a 	bl	8012664 <__multadd>
 8012130:	4601      	mov	r1, r0
 8012132:	4604      	mov	r4, r0
 8012134:	4648      	mov	r0, r9
 8012136:	f000 fcf7 	bl	8012b28 <__mcmp>
 801213a:	2800      	cmp	r0, #0
 801213c:	f77f aeb3 	ble.w	8011ea6 <_dtoa_r+0x68e>
 8012140:	4656      	mov	r6, sl
 8012142:	2331      	movs	r3, #49	@ 0x31
 8012144:	f806 3b01 	strb.w	r3, [r6], #1
 8012148:	9b04      	ldr	r3, [sp, #16]
 801214a:	3301      	adds	r3, #1
 801214c:	9304      	str	r3, [sp, #16]
 801214e:	e6ae      	b.n	8011eae <_dtoa_r+0x696>
 8012150:	9c07      	ldr	r4, [sp, #28]
 8012152:	9704      	str	r7, [sp, #16]
 8012154:	4625      	mov	r5, r4
 8012156:	e7f3      	b.n	8012140 <_dtoa_r+0x928>
 8012158:	9b07      	ldr	r3, [sp, #28]
 801215a:	9300      	str	r3, [sp, #0]
 801215c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801215e:	2b00      	cmp	r3, #0
 8012160:	f000 8104 	beq.w	801236c <_dtoa_r+0xb54>
 8012164:	2e00      	cmp	r6, #0
 8012166:	dd05      	ble.n	8012174 <_dtoa_r+0x95c>
 8012168:	4629      	mov	r1, r5
 801216a:	4632      	mov	r2, r6
 801216c:	4658      	mov	r0, fp
 801216e:	f000 fc6f 	bl	8012a50 <__lshift>
 8012172:	4605      	mov	r5, r0
 8012174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012176:	2b00      	cmp	r3, #0
 8012178:	d05a      	beq.n	8012230 <_dtoa_r+0xa18>
 801217a:	6869      	ldr	r1, [r5, #4]
 801217c:	4658      	mov	r0, fp
 801217e:	f000 fa0f 	bl	80125a0 <_Balloc>
 8012182:	4606      	mov	r6, r0
 8012184:	b928      	cbnz	r0, 8012192 <_dtoa_r+0x97a>
 8012186:	4b84      	ldr	r3, [pc, #528]	@ (8012398 <_dtoa_r+0xb80>)
 8012188:	4602      	mov	r2, r0
 801218a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801218e:	f7ff bb5a 	b.w	8011846 <_dtoa_r+0x2e>
 8012192:	692a      	ldr	r2, [r5, #16]
 8012194:	3202      	adds	r2, #2
 8012196:	0092      	lsls	r2, r2, #2
 8012198:	f105 010c 	add.w	r1, r5, #12
 801219c:	300c      	adds	r0, #12
 801219e:	f7ff fa9c 	bl	80116da <memcpy>
 80121a2:	2201      	movs	r2, #1
 80121a4:	4631      	mov	r1, r6
 80121a6:	4658      	mov	r0, fp
 80121a8:	f000 fc52 	bl	8012a50 <__lshift>
 80121ac:	f10a 0301 	add.w	r3, sl, #1
 80121b0:	9307      	str	r3, [sp, #28]
 80121b2:	9b00      	ldr	r3, [sp, #0]
 80121b4:	4453      	add	r3, sl
 80121b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121b8:	9b02      	ldr	r3, [sp, #8]
 80121ba:	f003 0301 	and.w	r3, r3, #1
 80121be:	462f      	mov	r7, r5
 80121c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80121c2:	4605      	mov	r5, r0
 80121c4:	9b07      	ldr	r3, [sp, #28]
 80121c6:	4621      	mov	r1, r4
 80121c8:	3b01      	subs	r3, #1
 80121ca:	4648      	mov	r0, r9
 80121cc:	9300      	str	r3, [sp, #0]
 80121ce:	f7ff fa99 	bl	8011704 <quorem>
 80121d2:	4639      	mov	r1, r7
 80121d4:	9002      	str	r0, [sp, #8]
 80121d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80121da:	4648      	mov	r0, r9
 80121dc:	f000 fca4 	bl	8012b28 <__mcmp>
 80121e0:	462a      	mov	r2, r5
 80121e2:	9008      	str	r0, [sp, #32]
 80121e4:	4621      	mov	r1, r4
 80121e6:	4658      	mov	r0, fp
 80121e8:	f000 fcba 	bl	8012b60 <__mdiff>
 80121ec:	68c2      	ldr	r2, [r0, #12]
 80121ee:	4606      	mov	r6, r0
 80121f0:	bb02      	cbnz	r2, 8012234 <_dtoa_r+0xa1c>
 80121f2:	4601      	mov	r1, r0
 80121f4:	4648      	mov	r0, r9
 80121f6:	f000 fc97 	bl	8012b28 <__mcmp>
 80121fa:	4602      	mov	r2, r0
 80121fc:	4631      	mov	r1, r6
 80121fe:	4658      	mov	r0, fp
 8012200:	920e      	str	r2, [sp, #56]	@ 0x38
 8012202:	f000 fa0d 	bl	8012620 <_Bfree>
 8012206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012208:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801220a:	9e07      	ldr	r6, [sp, #28]
 801220c:	ea43 0102 	orr.w	r1, r3, r2
 8012210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012212:	4319      	orrs	r1, r3
 8012214:	d110      	bne.n	8012238 <_dtoa_r+0xa20>
 8012216:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801221a:	d029      	beq.n	8012270 <_dtoa_r+0xa58>
 801221c:	9b08      	ldr	r3, [sp, #32]
 801221e:	2b00      	cmp	r3, #0
 8012220:	dd02      	ble.n	8012228 <_dtoa_r+0xa10>
 8012222:	9b02      	ldr	r3, [sp, #8]
 8012224:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012228:	9b00      	ldr	r3, [sp, #0]
 801222a:	f883 8000 	strb.w	r8, [r3]
 801222e:	e63f      	b.n	8011eb0 <_dtoa_r+0x698>
 8012230:	4628      	mov	r0, r5
 8012232:	e7bb      	b.n	80121ac <_dtoa_r+0x994>
 8012234:	2201      	movs	r2, #1
 8012236:	e7e1      	b.n	80121fc <_dtoa_r+0x9e4>
 8012238:	9b08      	ldr	r3, [sp, #32]
 801223a:	2b00      	cmp	r3, #0
 801223c:	db04      	blt.n	8012248 <_dtoa_r+0xa30>
 801223e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012240:	430b      	orrs	r3, r1
 8012242:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012244:	430b      	orrs	r3, r1
 8012246:	d120      	bne.n	801228a <_dtoa_r+0xa72>
 8012248:	2a00      	cmp	r2, #0
 801224a:	dded      	ble.n	8012228 <_dtoa_r+0xa10>
 801224c:	4649      	mov	r1, r9
 801224e:	2201      	movs	r2, #1
 8012250:	4658      	mov	r0, fp
 8012252:	f000 fbfd 	bl	8012a50 <__lshift>
 8012256:	4621      	mov	r1, r4
 8012258:	4681      	mov	r9, r0
 801225a:	f000 fc65 	bl	8012b28 <__mcmp>
 801225e:	2800      	cmp	r0, #0
 8012260:	dc03      	bgt.n	801226a <_dtoa_r+0xa52>
 8012262:	d1e1      	bne.n	8012228 <_dtoa_r+0xa10>
 8012264:	f018 0f01 	tst.w	r8, #1
 8012268:	d0de      	beq.n	8012228 <_dtoa_r+0xa10>
 801226a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801226e:	d1d8      	bne.n	8012222 <_dtoa_r+0xa0a>
 8012270:	9a00      	ldr	r2, [sp, #0]
 8012272:	2339      	movs	r3, #57	@ 0x39
 8012274:	7013      	strb	r3, [r2, #0]
 8012276:	4633      	mov	r3, r6
 8012278:	461e      	mov	r6, r3
 801227a:	3b01      	subs	r3, #1
 801227c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012280:	2a39      	cmp	r2, #57	@ 0x39
 8012282:	d052      	beq.n	801232a <_dtoa_r+0xb12>
 8012284:	3201      	adds	r2, #1
 8012286:	701a      	strb	r2, [r3, #0]
 8012288:	e612      	b.n	8011eb0 <_dtoa_r+0x698>
 801228a:	2a00      	cmp	r2, #0
 801228c:	dd07      	ble.n	801229e <_dtoa_r+0xa86>
 801228e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012292:	d0ed      	beq.n	8012270 <_dtoa_r+0xa58>
 8012294:	9a00      	ldr	r2, [sp, #0]
 8012296:	f108 0301 	add.w	r3, r8, #1
 801229a:	7013      	strb	r3, [r2, #0]
 801229c:	e608      	b.n	8011eb0 <_dtoa_r+0x698>
 801229e:	9b07      	ldr	r3, [sp, #28]
 80122a0:	9a07      	ldr	r2, [sp, #28]
 80122a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80122a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122a8:	4293      	cmp	r3, r2
 80122aa:	d028      	beq.n	80122fe <_dtoa_r+0xae6>
 80122ac:	4649      	mov	r1, r9
 80122ae:	2300      	movs	r3, #0
 80122b0:	220a      	movs	r2, #10
 80122b2:	4658      	mov	r0, fp
 80122b4:	f000 f9d6 	bl	8012664 <__multadd>
 80122b8:	42af      	cmp	r7, r5
 80122ba:	4681      	mov	r9, r0
 80122bc:	f04f 0300 	mov.w	r3, #0
 80122c0:	f04f 020a 	mov.w	r2, #10
 80122c4:	4639      	mov	r1, r7
 80122c6:	4658      	mov	r0, fp
 80122c8:	d107      	bne.n	80122da <_dtoa_r+0xac2>
 80122ca:	f000 f9cb 	bl	8012664 <__multadd>
 80122ce:	4607      	mov	r7, r0
 80122d0:	4605      	mov	r5, r0
 80122d2:	9b07      	ldr	r3, [sp, #28]
 80122d4:	3301      	adds	r3, #1
 80122d6:	9307      	str	r3, [sp, #28]
 80122d8:	e774      	b.n	80121c4 <_dtoa_r+0x9ac>
 80122da:	f000 f9c3 	bl	8012664 <__multadd>
 80122de:	4629      	mov	r1, r5
 80122e0:	4607      	mov	r7, r0
 80122e2:	2300      	movs	r3, #0
 80122e4:	220a      	movs	r2, #10
 80122e6:	4658      	mov	r0, fp
 80122e8:	f000 f9bc 	bl	8012664 <__multadd>
 80122ec:	4605      	mov	r5, r0
 80122ee:	e7f0      	b.n	80122d2 <_dtoa_r+0xaba>
 80122f0:	9b00      	ldr	r3, [sp, #0]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	bfcc      	ite	gt
 80122f6:	461e      	movgt	r6, r3
 80122f8:	2601      	movle	r6, #1
 80122fa:	4456      	add	r6, sl
 80122fc:	2700      	movs	r7, #0
 80122fe:	4649      	mov	r1, r9
 8012300:	2201      	movs	r2, #1
 8012302:	4658      	mov	r0, fp
 8012304:	f000 fba4 	bl	8012a50 <__lshift>
 8012308:	4621      	mov	r1, r4
 801230a:	4681      	mov	r9, r0
 801230c:	f000 fc0c 	bl	8012b28 <__mcmp>
 8012310:	2800      	cmp	r0, #0
 8012312:	dcb0      	bgt.n	8012276 <_dtoa_r+0xa5e>
 8012314:	d102      	bne.n	801231c <_dtoa_r+0xb04>
 8012316:	f018 0f01 	tst.w	r8, #1
 801231a:	d1ac      	bne.n	8012276 <_dtoa_r+0xa5e>
 801231c:	4633      	mov	r3, r6
 801231e:	461e      	mov	r6, r3
 8012320:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012324:	2a30      	cmp	r2, #48	@ 0x30
 8012326:	d0fa      	beq.n	801231e <_dtoa_r+0xb06>
 8012328:	e5c2      	b.n	8011eb0 <_dtoa_r+0x698>
 801232a:	459a      	cmp	sl, r3
 801232c:	d1a4      	bne.n	8012278 <_dtoa_r+0xa60>
 801232e:	9b04      	ldr	r3, [sp, #16]
 8012330:	3301      	adds	r3, #1
 8012332:	9304      	str	r3, [sp, #16]
 8012334:	2331      	movs	r3, #49	@ 0x31
 8012336:	f88a 3000 	strb.w	r3, [sl]
 801233a:	e5b9      	b.n	8011eb0 <_dtoa_r+0x698>
 801233c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801233e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801239c <_dtoa_r+0xb84>
 8012342:	b11b      	cbz	r3, 801234c <_dtoa_r+0xb34>
 8012344:	f10a 0308 	add.w	r3, sl, #8
 8012348:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801234a:	6013      	str	r3, [r2, #0]
 801234c:	4650      	mov	r0, sl
 801234e:	b019      	add	sp, #100	@ 0x64
 8012350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012356:	2b01      	cmp	r3, #1
 8012358:	f77f ae37 	ble.w	8011fca <_dtoa_r+0x7b2>
 801235c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801235e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012360:	2001      	movs	r0, #1
 8012362:	e655      	b.n	8012010 <_dtoa_r+0x7f8>
 8012364:	9b00      	ldr	r3, [sp, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	f77f aed6 	ble.w	8012118 <_dtoa_r+0x900>
 801236c:	4656      	mov	r6, sl
 801236e:	4621      	mov	r1, r4
 8012370:	4648      	mov	r0, r9
 8012372:	f7ff f9c7 	bl	8011704 <quorem>
 8012376:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801237a:	f806 8b01 	strb.w	r8, [r6], #1
 801237e:	9b00      	ldr	r3, [sp, #0]
 8012380:	eba6 020a 	sub.w	r2, r6, sl
 8012384:	4293      	cmp	r3, r2
 8012386:	ddb3      	ble.n	80122f0 <_dtoa_r+0xad8>
 8012388:	4649      	mov	r1, r9
 801238a:	2300      	movs	r3, #0
 801238c:	220a      	movs	r2, #10
 801238e:	4658      	mov	r0, fp
 8012390:	f000 f968 	bl	8012664 <__multadd>
 8012394:	4681      	mov	r9, r0
 8012396:	e7ea      	b.n	801236e <_dtoa_r+0xb56>
 8012398:	08016e1b 	.word	0x08016e1b
 801239c:	08016d9f 	.word	0x08016d9f

080123a0 <_free_r>:
 80123a0:	b538      	push	{r3, r4, r5, lr}
 80123a2:	4605      	mov	r5, r0
 80123a4:	2900      	cmp	r1, #0
 80123a6:	d041      	beq.n	801242c <_free_r+0x8c>
 80123a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123ac:	1f0c      	subs	r4, r1, #4
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	bfb8      	it	lt
 80123b2:	18e4      	addlt	r4, r4, r3
 80123b4:	f000 f8e8 	bl	8012588 <__malloc_lock>
 80123b8:	4a1d      	ldr	r2, [pc, #116]	@ (8012430 <_free_r+0x90>)
 80123ba:	6813      	ldr	r3, [r2, #0]
 80123bc:	b933      	cbnz	r3, 80123cc <_free_r+0x2c>
 80123be:	6063      	str	r3, [r4, #4]
 80123c0:	6014      	str	r4, [r2, #0]
 80123c2:	4628      	mov	r0, r5
 80123c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123c8:	f000 b8e4 	b.w	8012594 <__malloc_unlock>
 80123cc:	42a3      	cmp	r3, r4
 80123ce:	d908      	bls.n	80123e2 <_free_r+0x42>
 80123d0:	6820      	ldr	r0, [r4, #0]
 80123d2:	1821      	adds	r1, r4, r0
 80123d4:	428b      	cmp	r3, r1
 80123d6:	bf01      	itttt	eq
 80123d8:	6819      	ldreq	r1, [r3, #0]
 80123da:	685b      	ldreq	r3, [r3, #4]
 80123dc:	1809      	addeq	r1, r1, r0
 80123de:	6021      	streq	r1, [r4, #0]
 80123e0:	e7ed      	b.n	80123be <_free_r+0x1e>
 80123e2:	461a      	mov	r2, r3
 80123e4:	685b      	ldr	r3, [r3, #4]
 80123e6:	b10b      	cbz	r3, 80123ec <_free_r+0x4c>
 80123e8:	42a3      	cmp	r3, r4
 80123ea:	d9fa      	bls.n	80123e2 <_free_r+0x42>
 80123ec:	6811      	ldr	r1, [r2, #0]
 80123ee:	1850      	adds	r0, r2, r1
 80123f0:	42a0      	cmp	r0, r4
 80123f2:	d10b      	bne.n	801240c <_free_r+0x6c>
 80123f4:	6820      	ldr	r0, [r4, #0]
 80123f6:	4401      	add	r1, r0
 80123f8:	1850      	adds	r0, r2, r1
 80123fa:	4283      	cmp	r3, r0
 80123fc:	6011      	str	r1, [r2, #0]
 80123fe:	d1e0      	bne.n	80123c2 <_free_r+0x22>
 8012400:	6818      	ldr	r0, [r3, #0]
 8012402:	685b      	ldr	r3, [r3, #4]
 8012404:	6053      	str	r3, [r2, #4]
 8012406:	4408      	add	r0, r1
 8012408:	6010      	str	r0, [r2, #0]
 801240a:	e7da      	b.n	80123c2 <_free_r+0x22>
 801240c:	d902      	bls.n	8012414 <_free_r+0x74>
 801240e:	230c      	movs	r3, #12
 8012410:	602b      	str	r3, [r5, #0]
 8012412:	e7d6      	b.n	80123c2 <_free_r+0x22>
 8012414:	6820      	ldr	r0, [r4, #0]
 8012416:	1821      	adds	r1, r4, r0
 8012418:	428b      	cmp	r3, r1
 801241a:	bf04      	itt	eq
 801241c:	6819      	ldreq	r1, [r3, #0]
 801241e:	685b      	ldreq	r3, [r3, #4]
 8012420:	6063      	str	r3, [r4, #4]
 8012422:	bf04      	itt	eq
 8012424:	1809      	addeq	r1, r1, r0
 8012426:	6021      	streq	r1, [r4, #0]
 8012428:	6054      	str	r4, [r2, #4]
 801242a:	e7ca      	b.n	80123c2 <_free_r+0x22>
 801242c:	bd38      	pop	{r3, r4, r5, pc}
 801242e:	bf00      	nop
 8012430:	20002688 	.word	0x20002688

08012434 <malloc>:
 8012434:	4b02      	ldr	r3, [pc, #8]	@ (8012440 <malloc+0xc>)
 8012436:	4601      	mov	r1, r0
 8012438:	6818      	ldr	r0, [r3, #0]
 801243a:	f000 b825 	b.w	8012488 <_malloc_r>
 801243e:	bf00      	nop
 8012440:	200001b4 	.word	0x200001b4

08012444 <sbrk_aligned>:
 8012444:	b570      	push	{r4, r5, r6, lr}
 8012446:	4e0f      	ldr	r6, [pc, #60]	@ (8012484 <sbrk_aligned+0x40>)
 8012448:	460c      	mov	r4, r1
 801244a:	6831      	ldr	r1, [r6, #0]
 801244c:	4605      	mov	r5, r0
 801244e:	b911      	cbnz	r1, 8012456 <sbrk_aligned+0x12>
 8012450:	f002 f988 	bl	8014764 <_sbrk_r>
 8012454:	6030      	str	r0, [r6, #0]
 8012456:	4621      	mov	r1, r4
 8012458:	4628      	mov	r0, r5
 801245a:	f002 f983 	bl	8014764 <_sbrk_r>
 801245e:	1c43      	adds	r3, r0, #1
 8012460:	d103      	bne.n	801246a <sbrk_aligned+0x26>
 8012462:	f04f 34ff 	mov.w	r4, #4294967295
 8012466:	4620      	mov	r0, r4
 8012468:	bd70      	pop	{r4, r5, r6, pc}
 801246a:	1cc4      	adds	r4, r0, #3
 801246c:	f024 0403 	bic.w	r4, r4, #3
 8012470:	42a0      	cmp	r0, r4
 8012472:	d0f8      	beq.n	8012466 <sbrk_aligned+0x22>
 8012474:	1a21      	subs	r1, r4, r0
 8012476:	4628      	mov	r0, r5
 8012478:	f002 f974 	bl	8014764 <_sbrk_r>
 801247c:	3001      	adds	r0, #1
 801247e:	d1f2      	bne.n	8012466 <sbrk_aligned+0x22>
 8012480:	e7ef      	b.n	8012462 <sbrk_aligned+0x1e>
 8012482:	bf00      	nop
 8012484:	20002684 	.word	0x20002684

08012488 <_malloc_r>:
 8012488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801248c:	1ccd      	adds	r5, r1, #3
 801248e:	f025 0503 	bic.w	r5, r5, #3
 8012492:	3508      	adds	r5, #8
 8012494:	2d0c      	cmp	r5, #12
 8012496:	bf38      	it	cc
 8012498:	250c      	movcc	r5, #12
 801249a:	2d00      	cmp	r5, #0
 801249c:	4606      	mov	r6, r0
 801249e:	db01      	blt.n	80124a4 <_malloc_r+0x1c>
 80124a0:	42a9      	cmp	r1, r5
 80124a2:	d904      	bls.n	80124ae <_malloc_r+0x26>
 80124a4:	230c      	movs	r3, #12
 80124a6:	6033      	str	r3, [r6, #0]
 80124a8:	2000      	movs	r0, #0
 80124aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012584 <_malloc_r+0xfc>
 80124b2:	f000 f869 	bl	8012588 <__malloc_lock>
 80124b6:	f8d8 3000 	ldr.w	r3, [r8]
 80124ba:	461c      	mov	r4, r3
 80124bc:	bb44      	cbnz	r4, 8012510 <_malloc_r+0x88>
 80124be:	4629      	mov	r1, r5
 80124c0:	4630      	mov	r0, r6
 80124c2:	f7ff ffbf 	bl	8012444 <sbrk_aligned>
 80124c6:	1c43      	adds	r3, r0, #1
 80124c8:	4604      	mov	r4, r0
 80124ca:	d158      	bne.n	801257e <_malloc_r+0xf6>
 80124cc:	f8d8 4000 	ldr.w	r4, [r8]
 80124d0:	4627      	mov	r7, r4
 80124d2:	2f00      	cmp	r7, #0
 80124d4:	d143      	bne.n	801255e <_malloc_r+0xd6>
 80124d6:	2c00      	cmp	r4, #0
 80124d8:	d04b      	beq.n	8012572 <_malloc_r+0xea>
 80124da:	6823      	ldr	r3, [r4, #0]
 80124dc:	4639      	mov	r1, r7
 80124de:	4630      	mov	r0, r6
 80124e0:	eb04 0903 	add.w	r9, r4, r3
 80124e4:	f002 f93e 	bl	8014764 <_sbrk_r>
 80124e8:	4581      	cmp	r9, r0
 80124ea:	d142      	bne.n	8012572 <_malloc_r+0xea>
 80124ec:	6821      	ldr	r1, [r4, #0]
 80124ee:	1a6d      	subs	r5, r5, r1
 80124f0:	4629      	mov	r1, r5
 80124f2:	4630      	mov	r0, r6
 80124f4:	f7ff ffa6 	bl	8012444 <sbrk_aligned>
 80124f8:	3001      	adds	r0, #1
 80124fa:	d03a      	beq.n	8012572 <_malloc_r+0xea>
 80124fc:	6823      	ldr	r3, [r4, #0]
 80124fe:	442b      	add	r3, r5
 8012500:	6023      	str	r3, [r4, #0]
 8012502:	f8d8 3000 	ldr.w	r3, [r8]
 8012506:	685a      	ldr	r2, [r3, #4]
 8012508:	bb62      	cbnz	r2, 8012564 <_malloc_r+0xdc>
 801250a:	f8c8 7000 	str.w	r7, [r8]
 801250e:	e00f      	b.n	8012530 <_malloc_r+0xa8>
 8012510:	6822      	ldr	r2, [r4, #0]
 8012512:	1b52      	subs	r2, r2, r5
 8012514:	d420      	bmi.n	8012558 <_malloc_r+0xd0>
 8012516:	2a0b      	cmp	r2, #11
 8012518:	d917      	bls.n	801254a <_malloc_r+0xc2>
 801251a:	1961      	adds	r1, r4, r5
 801251c:	42a3      	cmp	r3, r4
 801251e:	6025      	str	r5, [r4, #0]
 8012520:	bf18      	it	ne
 8012522:	6059      	strne	r1, [r3, #4]
 8012524:	6863      	ldr	r3, [r4, #4]
 8012526:	bf08      	it	eq
 8012528:	f8c8 1000 	streq.w	r1, [r8]
 801252c:	5162      	str	r2, [r4, r5]
 801252e:	604b      	str	r3, [r1, #4]
 8012530:	4630      	mov	r0, r6
 8012532:	f000 f82f 	bl	8012594 <__malloc_unlock>
 8012536:	f104 000b 	add.w	r0, r4, #11
 801253a:	1d23      	adds	r3, r4, #4
 801253c:	f020 0007 	bic.w	r0, r0, #7
 8012540:	1ac2      	subs	r2, r0, r3
 8012542:	bf1c      	itt	ne
 8012544:	1a1b      	subne	r3, r3, r0
 8012546:	50a3      	strne	r3, [r4, r2]
 8012548:	e7af      	b.n	80124aa <_malloc_r+0x22>
 801254a:	6862      	ldr	r2, [r4, #4]
 801254c:	42a3      	cmp	r3, r4
 801254e:	bf0c      	ite	eq
 8012550:	f8c8 2000 	streq.w	r2, [r8]
 8012554:	605a      	strne	r2, [r3, #4]
 8012556:	e7eb      	b.n	8012530 <_malloc_r+0xa8>
 8012558:	4623      	mov	r3, r4
 801255a:	6864      	ldr	r4, [r4, #4]
 801255c:	e7ae      	b.n	80124bc <_malloc_r+0x34>
 801255e:	463c      	mov	r4, r7
 8012560:	687f      	ldr	r7, [r7, #4]
 8012562:	e7b6      	b.n	80124d2 <_malloc_r+0x4a>
 8012564:	461a      	mov	r2, r3
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	42a3      	cmp	r3, r4
 801256a:	d1fb      	bne.n	8012564 <_malloc_r+0xdc>
 801256c:	2300      	movs	r3, #0
 801256e:	6053      	str	r3, [r2, #4]
 8012570:	e7de      	b.n	8012530 <_malloc_r+0xa8>
 8012572:	230c      	movs	r3, #12
 8012574:	6033      	str	r3, [r6, #0]
 8012576:	4630      	mov	r0, r6
 8012578:	f000 f80c 	bl	8012594 <__malloc_unlock>
 801257c:	e794      	b.n	80124a8 <_malloc_r+0x20>
 801257e:	6005      	str	r5, [r0, #0]
 8012580:	e7d6      	b.n	8012530 <_malloc_r+0xa8>
 8012582:	bf00      	nop
 8012584:	20002688 	.word	0x20002688

08012588 <__malloc_lock>:
 8012588:	4801      	ldr	r0, [pc, #4]	@ (8012590 <__malloc_lock+0x8>)
 801258a:	f7ff b8a4 	b.w	80116d6 <__retarget_lock_acquire_recursive>
 801258e:	bf00      	nop
 8012590:	20002680 	.word	0x20002680

08012594 <__malloc_unlock>:
 8012594:	4801      	ldr	r0, [pc, #4]	@ (801259c <__malloc_unlock+0x8>)
 8012596:	f7ff b89f 	b.w	80116d8 <__retarget_lock_release_recursive>
 801259a:	bf00      	nop
 801259c:	20002680 	.word	0x20002680

080125a0 <_Balloc>:
 80125a0:	b570      	push	{r4, r5, r6, lr}
 80125a2:	69c6      	ldr	r6, [r0, #28]
 80125a4:	4604      	mov	r4, r0
 80125a6:	460d      	mov	r5, r1
 80125a8:	b976      	cbnz	r6, 80125c8 <_Balloc+0x28>
 80125aa:	2010      	movs	r0, #16
 80125ac:	f7ff ff42 	bl	8012434 <malloc>
 80125b0:	4602      	mov	r2, r0
 80125b2:	61e0      	str	r0, [r4, #28]
 80125b4:	b920      	cbnz	r0, 80125c0 <_Balloc+0x20>
 80125b6:	4b18      	ldr	r3, [pc, #96]	@ (8012618 <_Balloc+0x78>)
 80125b8:	4818      	ldr	r0, [pc, #96]	@ (801261c <_Balloc+0x7c>)
 80125ba:	216b      	movs	r1, #107	@ 0x6b
 80125bc:	f002 f8ec 	bl	8014798 <__assert_func>
 80125c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80125c4:	6006      	str	r6, [r0, #0]
 80125c6:	60c6      	str	r6, [r0, #12]
 80125c8:	69e6      	ldr	r6, [r4, #28]
 80125ca:	68f3      	ldr	r3, [r6, #12]
 80125cc:	b183      	cbz	r3, 80125f0 <_Balloc+0x50>
 80125ce:	69e3      	ldr	r3, [r4, #28]
 80125d0:	68db      	ldr	r3, [r3, #12]
 80125d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80125d6:	b9b8      	cbnz	r0, 8012608 <_Balloc+0x68>
 80125d8:	2101      	movs	r1, #1
 80125da:	fa01 f605 	lsl.w	r6, r1, r5
 80125de:	1d72      	adds	r2, r6, #5
 80125e0:	0092      	lsls	r2, r2, #2
 80125e2:	4620      	mov	r0, r4
 80125e4:	f002 f8f6 	bl	80147d4 <_calloc_r>
 80125e8:	b160      	cbz	r0, 8012604 <_Balloc+0x64>
 80125ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80125ee:	e00e      	b.n	801260e <_Balloc+0x6e>
 80125f0:	2221      	movs	r2, #33	@ 0x21
 80125f2:	2104      	movs	r1, #4
 80125f4:	4620      	mov	r0, r4
 80125f6:	f002 f8ed 	bl	80147d4 <_calloc_r>
 80125fa:	69e3      	ldr	r3, [r4, #28]
 80125fc:	60f0      	str	r0, [r6, #12]
 80125fe:	68db      	ldr	r3, [r3, #12]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d1e4      	bne.n	80125ce <_Balloc+0x2e>
 8012604:	2000      	movs	r0, #0
 8012606:	bd70      	pop	{r4, r5, r6, pc}
 8012608:	6802      	ldr	r2, [r0, #0]
 801260a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801260e:	2300      	movs	r3, #0
 8012610:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012614:	e7f7      	b.n	8012606 <_Balloc+0x66>
 8012616:	bf00      	nop
 8012618:	08016dac 	.word	0x08016dac
 801261c:	08016e2c 	.word	0x08016e2c

08012620 <_Bfree>:
 8012620:	b570      	push	{r4, r5, r6, lr}
 8012622:	69c6      	ldr	r6, [r0, #28]
 8012624:	4605      	mov	r5, r0
 8012626:	460c      	mov	r4, r1
 8012628:	b976      	cbnz	r6, 8012648 <_Bfree+0x28>
 801262a:	2010      	movs	r0, #16
 801262c:	f7ff ff02 	bl	8012434 <malloc>
 8012630:	4602      	mov	r2, r0
 8012632:	61e8      	str	r0, [r5, #28]
 8012634:	b920      	cbnz	r0, 8012640 <_Bfree+0x20>
 8012636:	4b09      	ldr	r3, [pc, #36]	@ (801265c <_Bfree+0x3c>)
 8012638:	4809      	ldr	r0, [pc, #36]	@ (8012660 <_Bfree+0x40>)
 801263a:	218f      	movs	r1, #143	@ 0x8f
 801263c:	f002 f8ac 	bl	8014798 <__assert_func>
 8012640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012644:	6006      	str	r6, [r0, #0]
 8012646:	60c6      	str	r6, [r0, #12]
 8012648:	b13c      	cbz	r4, 801265a <_Bfree+0x3a>
 801264a:	69eb      	ldr	r3, [r5, #28]
 801264c:	6862      	ldr	r2, [r4, #4]
 801264e:	68db      	ldr	r3, [r3, #12]
 8012650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012654:	6021      	str	r1, [r4, #0]
 8012656:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801265a:	bd70      	pop	{r4, r5, r6, pc}
 801265c:	08016dac 	.word	0x08016dac
 8012660:	08016e2c 	.word	0x08016e2c

08012664 <__multadd>:
 8012664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012668:	690d      	ldr	r5, [r1, #16]
 801266a:	4607      	mov	r7, r0
 801266c:	460c      	mov	r4, r1
 801266e:	461e      	mov	r6, r3
 8012670:	f101 0c14 	add.w	ip, r1, #20
 8012674:	2000      	movs	r0, #0
 8012676:	f8dc 3000 	ldr.w	r3, [ip]
 801267a:	b299      	uxth	r1, r3
 801267c:	fb02 6101 	mla	r1, r2, r1, r6
 8012680:	0c1e      	lsrs	r6, r3, #16
 8012682:	0c0b      	lsrs	r3, r1, #16
 8012684:	fb02 3306 	mla	r3, r2, r6, r3
 8012688:	b289      	uxth	r1, r1
 801268a:	3001      	adds	r0, #1
 801268c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012690:	4285      	cmp	r5, r0
 8012692:	f84c 1b04 	str.w	r1, [ip], #4
 8012696:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801269a:	dcec      	bgt.n	8012676 <__multadd+0x12>
 801269c:	b30e      	cbz	r6, 80126e2 <__multadd+0x7e>
 801269e:	68a3      	ldr	r3, [r4, #8]
 80126a0:	42ab      	cmp	r3, r5
 80126a2:	dc19      	bgt.n	80126d8 <__multadd+0x74>
 80126a4:	6861      	ldr	r1, [r4, #4]
 80126a6:	4638      	mov	r0, r7
 80126a8:	3101      	adds	r1, #1
 80126aa:	f7ff ff79 	bl	80125a0 <_Balloc>
 80126ae:	4680      	mov	r8, r0
 80126b0:	b928      	cbnz	r0, 80126be <__multadd+0x5a>
 80126b2:	4602      	mov	r2, r0
 80126b4:	4b0c      	ldr	r3, [pc, #48]	@ (80126e8 <__multadd+0x84>)
 80126b6:	480d      	ldr	r0, [pc, #52]	@ (80126ec <__multadd+0x88>)
 80126b8:	21ba      	movs	r1, #186	@ 0xba
 80126ba:	f002 f86d 	bl	8014798 <__assert_func>
 80126be:	6922      	ldr	r2, [r4, #16]
 80126c0:	3202      	adds	r2, #2
 80126c2:	f104 010c 	add.w	r1, r4, #12
 80126c6:	0092      	lsls	r2, r2, #2
 80126c8:	300c      	adds	r0, #12
 80126ca:	f7ff f806 	bl	80116da <memcpy>
 80126ce:	4621      	mov	r1, r4
 80126d0:	4638      	mov	r0, r7
 80126d2:	f7ff ffa5 	bl	8012620 <_Bfree>
 80126d6:	4644      	mov	r4, r8
 80126d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80126dc:	3501      	adds	r5, #1
 80126de:	615e      	str	r6, [r3, #20]
 80126e0:	6125      	str	r5, [r4, #16]
 80126e2:	4620      	mov	r0, r4
 80126e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126e8:	08016e1b 	.word	0x08016e1b
 80126ec:	08016e2c 	.word	0x08016e2c

080126f0 <__s2b>:
 80126f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126f4:	460c      	mov	r4, r1
 80126f6:	4615      	mov	r5, r2
 80126f8:	461f      	mov	r7, r3
 80126fa:	2209      	movs	r2, #9
 80126fc:	3308      	adds	r3, #8
 80126fe:	4606      	mov	r6, r0
 8012700:	fb93 f3f2 	sdiv	r3, r3, r2
 8012704:	2100      	movs	r1, #0
 8012706:	2201      	movs	r2, #1
 8012708:	429a      	cmp	r2, r3
 801270a:	db09      	blt.n	8012720 <__s2b+0x30>
 801270c:	4630      	mov	r0, r6
 801270e:	f7ff ff47 	bl	80125a0 <_Balloc>
 8012712:	b940      	cbnz	r0, 8012726 <__s2b+0x36>
 8012714:	4602      	mov	r2, r0
 8012716:	4b19      	ldr	r3, [pc, #100]	@ (801277c <__s2b+0x8c>)
 8012718:	4819      	ldr	r0, [pc, #100]	@ (8012780 <__s2b+0x90>)
 801271a:	21d3      	movs	r1, #211	@ 0xd3
 801271c:	f002 f83c 	bl	8014798 <__assert_func>
 8012720:	0052      	lsls	r2, r2, #1
 8012722:	3101      	adds	r1, #1
 8012724:	e7f0      	b.n	8012708 <__s2b+0x18>
 8012726:	9b08      	ldr	r3, [sp, #32]
 8012728:	6143      	str	r3, [r0, #20]
 801272a:	2d09      	cmp	r5, #9
 801272c:	f04f 0301 	mov.w	r3, #1
 8012730:	6103      	str	r3, [r0, #16]
 8012732:	dd16      	ble.n	8012762 <__s2b+0x72>
 8012734:	f104 0909 	add.w	r9, r4, #9
 8012738:	46c8      	mov	r8, r9
 801273a:	442c      	add	r4, r5
 801273c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012740:	4601      	mov	r1, r0
 8012742:	3b30      	subs	r3, #48	@ 0x30
 8012744:	220a      	movs	r2, #10
 8012746:	4630      	mov	r0, r6
 8012748:	f7ff ff8c 	bl	8012664 <__multadd>
 801274c:	45a0      	cmp	r8, r4
 801274e:	d1f5      	bne.n	801273c <__s2b+0x4c>
 8012750:	f1a5 0408 	sub.w	r4, r5, #8
 8012754:	444c      	add	r4, r9
 8012756:	1b2d      	subs	r5, r5, r4
 8012758:	1963      	adds	r3, r4, r5
 801275a:	42bb      	cmp	r3, r7
 801275c:	db04      	blt.n	8012768 <__s2b+0x78>
 801275e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012762:	340a      	adds	r4, #10
 8012764:	2509      	movs	r5, #9
 8012766:	e7f6      	b.n	8012756 <__s2b+0x66>
 8012768:	f814 3b01 	ldrb.w	r3, [r4], #1
 801276c:	4601      	mov	r1, r0
 801276e:	3b30      	subs	r3, #48	@ 0x30
 8012770:	220a      	movs	r2, #10
 8012772:	4630      	mov	r0, r6
 8012774:	f7ff ff76 	bl	8012664 <__multadd>
 8012778:	e7ee      	b.n	8012758 <__s2b+0x68>
 801277a:	bf00      	nop
 801277c:	08016e1b 	.word	0x08016e1b
 8012780:	08016e2c 	.word	0x08016e2c

08012784 <__hi0bits>:
 8012784:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012788:	4603      	mov	r3, r0
 801278a:	bf36      	itet	cc
 801278c:	0403      	lslcc	r3, r0, #16
 801278e:	2000      	movcs	r0, #0
 8012790:	2010      	movcc	r0, #16
 8012792:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012796:	bf3c      	itt	cc
 8012798:	021b      	lslcc	r3, r3, #8
 801279a:	3008      	addcc	r0, #8
 801279c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80127a0:	bf3c      	itt	cc
 80127a2:	011b      	lslcc	r3, r3, #4
 80127a4:	3004      	addcc	r0, #4
 80127a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80127aa:	bf3c      	itt	cc
 80127ac:	009b      	lslcc	r3, r3, #2
 80127ae:	3002      	addcc	r0, #2
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	db05      	blt.n	80127c0 <__hi0bits+0x3c>
 80127b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80127b8:	f100 0001 	add.w	r0, r0, #1
 80127bc:	bf08      	it	eq
 80127be:	2020      	moveq	r0, #32
 80127c0:	4770      	bx	lr

080127c2 <__lo0bits>:
 80127c2:	6803      	ldr	r3, [r0, #0]
 80127c4:	4602      	mov	r2, r0
 80127c6:	f013 0007 	ands.w	r0, r3, #7
 80127ca:	d00b      	beq.n	80127e4 <__lo0bits+0x22>
 80127cc:	07d9      	lsls	r1, r3, #31
 80127ce:	d421      	bmi.n	8012814 <__lo0bits+0x52>
 80127d0:	0798      	lsls	r0, r3, #30
 80127d2:	bf49      	itett	mi
 80127d4:	085b      	lsrmi	r3, r3, #1
 80127d6:	089b      	lsrpl	r3, r3, #2
 80127d8:	2001      	movmi	r0, #1
 80127da:	6013      	strmi	r3, [r2, #0]
 80127dc:	bf5c      	itt	pl
 80127de:	6013      	strpl	r3, [r2, #0]
 80127e0:	2002      	movpl	r0, #2
 80127e2:	4770      	bx	lr
 80127e4:	b299      	uxth	r1, r3
 80127e6:	b909      	cbnz	r1, 80127ec <__lo0bits+0x2a>
 80127e8:	0c1b      	lsrs	r3, r3, #16
 80127ea:	2010      	movs	r0, #16
 80127ec:	b2d9      	uxtb	r1, r3
 80127ee:	b909      	cbnz	r1, 80127f4 <__lo0bits+0x32>
 80127f0:	3008      	adds	r0, #8
 80127f2:	0a1b      	lsrs	r3, r3, #8
 80127f4:	0719      	lsls	r1, r3, #28
 80127f6:	bf04      	itt	eq
 80127f8:	091b      	lsreq	r3, r3, #4
 80127fa:	3004      	addeq	r0, #4
 80127fc:	0799      	lsls	r1, r3, #30
 80127fe:	bf04      	itt	eq
 8012800:	089b      	lsreq	r3, r3, #2
 8012802:	3002      	addeq	r0, #2
 8012804:	07d9      	lsls	r1, r3, #31
 8012806:	d403      	bmi.n	8012810 <__lo0bits+0x4e>
 8012808:	085b      	lsrs	r3, r3, #1
 801280a:	f100 0001 	add.w	r0, r0, #1
 801280e:	d003      	beq.n	8012818 <__lo0bits+0x56>
 8012810:	6013      	str	r3, [r2, #0]
 8012812:	4770      	bx	lr
 8012814:	2000      	movs	r0, #0
 8012816:	4770      	bx	lr
 8012818:	2020      	movs	r0, #32
 801281a:	4770      	bx	lr

0801281c <__i2b>:
 801281c:	b510      	push	{r4, lr}
 801281e:	460c      	mov	r4, r1
 8012820:	2101      	movs	r1, #1
 8012822:	f7ff febd 	bl	80125a0 <_Balloc>
 8012826:	4602      	mov	r2, r0
 8012828:	b928      	cbnz	r0, 8012836 <__i2b+0x1a>
 801282a:	4b05      	ldr	r3, [pc, #20]	@ (8012840 <__i2b+0x24>)
 801282c:	4805      	ldr	r0, [pc, #20]	@ (8012844 <__i2b+0x28>)
 801282e:	f240 1145 	movw	r1, #325	@ 0x145
 8012832:	f001 ffb1 	bl	8014798 <__assert_func>
 8012836:	2301      	movs	r3, #1
 8012838:	6144      	str	r4, [r0, #20]
 801283a:	6103      	str	r3, [r0, #16]
 801283c:	bd10      	pop	{r4, pc}
 801283e:	bf00      	nop
 8012840:	08016e1b 	.word	0x08016e1b
 8012844:	08016e2c 	.word	0x08016e2c

08012848 <__multiply>:
 8012848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801284c:	4614      	mov	r4, r2
 801284e:	690a      	ldr	r2, [r1, #16]
 8012850:	6923      	ldr	r3, [r4, #16]
 8012852:	429a      	cmp	r2, r3
 8012854:	bfa8      	it	ge
 8012856:	4623      	movge	r3, r4
 8012858:	460f      	mov	r7, r1
 801285a:	bfa4      	itt	ge
 801285c:	460c      	movge	r4, r1
 801285e:	461f      	movge	r7, r3
 8012860:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012864:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012868:	68a3      	ldr	r3, [r4, #8]
 801286a:	6861      	ldr	r1, [r4, #4]
 801286c:	eb0a 0609 	add.w	r6, sl, r9
 8012870:	42b3      	cmp	r3, r6
 8012872:	b085      	sub	sp, #20
 8012874:	bfb8      	it	lt
 8012876:	3101      	addlt	r1, #1
 8012878:	f7ff fe92 	bl	80125a0 <_Balloc>
 801287c:	b930      	cbnz	r0, 801288c <__multiply+0x44>
 801287e:	4602      	mov	r2, r0
 8012880:	4b44      	ldr	r3, [pc, #272]	@ (8012994 <__multiply+0x14c>)
 8012882:	4845      	ldr	r0, [pc, #276]	@ (8012998 <__multiply+0x150>)
 8012884:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012888:	f001 ff86 	bl	8014798 <__assert_func>
 801288c:	f100 0514 	add.w	r5, r0, #20
 8012890:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012894:	462b      	mov	r3, r5
 8012896:	2200      	movs	r2, #0
 8012898:	4543      	cmp	r3, r8
 801289a:	d321      	bcc.n	80128e0 <__multiply+0x98>
 801289c:	f107 0114 	add.w	r1, r7, #20
 80128a0:	f104 0214 	add.w	r2, r4, #20
 80128a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80128a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80128ac:	9302      	str	r3, [sp, #8]
 80128ae:	1b13      	subs	r3, r2, r4
 80128b0:	3b15      	subs	r3, #21
 80128b2:	f023 0303 	bic.w	r3, r3, #3
 80128b6:	3304      	adds	r3, #4
 80128b8:	f104 0715 	add.w	r7, r4, #21
 80128bc:	42ba      	cmp	r2, r7
 80128be:	bf38      	it	cc
 80128c0:	2304      	movcc	r3, #4
 80128c2:	9301      	str	r3, [sp, #4]
 80128c4:	9b02      	ldr	r3, [sp, #8]
 80128c6:	9103      	str	r1, [sp, #12]
 80128c8:	428b      	cmp	r3, r1
 80128ca:	d80c      	bhi.n	80128e6 <__multiply+0x9e>
 80128cc:	2e00      	cmp	r6, #0
 80128ce:	dd03      	ble.n	80128d8 <__multiply+0x90>
 80128d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d05b      	beq.n	8012990 <__multiply+0x148>
 80128d8:	6106      	str	r6, [r0, #16]
 80128da:	b005      	add	sp, #20
 80128dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e0:	f843 2b04 	str.w	r2, [r3], #4
 80128e4:	e7d8      	b.n	8012898 <__multiply+0x50>
 80128e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80128ea:	f1ba 0f00 	cmp.w	sl, #0
 80128ee:	d024      	beq.n	801293a <__multiply+0xf2>
 80128f0:	f104 0e14 	add.w	lr, r4, #20
 80128f4:	46a9      	mov	r9, r5
 80128f6:	f04f 0c00 	mov.w	ip, #0
 80128fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80128fe:	f8d9 3000 	ldr.w	r3, [r9]
 8012902:	fa1f fb87 	uxth.w	fp, r7
 8012906:	b29b      	uxth	r3, r3
 8012908:	fb0a 330b 	mla	r3, sl, fp, r3
 801290c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012910:	f8d9 7000 	ldr.w	r7, [r9]
 8012914:	4463      	add	r3, ip
 8012916:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801291a:	fb0a c70b 	mla	r7, sl, fp, ip
 801291e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012922:	b29b      	uxth	r3, r3
 8012924:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012928:	4572      	cmp	r2, lr
 801292a:	f849 3b04 	str.w	r3, [r9], #4
 801292e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012932:	d8e2      	bhi.n	80128fa <__multiply+0xb2>
 8012934:	9b01      	ldr	r3, [sp, #4]
 8012936:	f845 c003 	str.w	ip, [r5, r3]
 801293a:	9b03      	ldr	r3, [sp, #12]
 801293c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012940:	3104      	adds	r1, #4
 8012942:	f1b9 0f00 	cmp.w	r9, #0
 8012946:	d021      	beq.n	801298c <__multiply+0x144>
 8012948:	682b      	ldr	r3, [r5, #0]
 801294a:	f104 0c14 	add.w	ip, r4, #20
 801294e:	46ae      	mov	lr, r5
 8012950:	f04f 0a00 	mov.w	sl, #0
 8012954:	f8bc b000 	ldrh.w	fp, [ip]
 8012958:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801295c:	fb09 770b 	mla	r7, r9, fp, r7
 8012960:	4457      	add	r7, sl
 8012962:	b29b      	uxth	r3, r3
 8012964:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012968:	f84e 3b04 	str.w	r3, [lr], #4
 801296c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012970:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012974:	f8be 3000 	ldrh.w	r3, [lr]
 8012978:	fb09 330a 	mla	r3, r9, sl, r3
 801297c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012980:	4562      	cmp	r2, ip
 8012982:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012986:	d8e5      	bhi.n	8012954 <__multiply+0x10c>
 8012988:	9f01      	ldr	r7, [sp, #4]
 801298a:	51eb      	str	r3, [r5, r7]
 801298c:	3504      	adds	r5, #4
 801298e:	e799      	b.n	80128c4 <__multiply+0x7c>
 8012990:	3e01      	subs	r6, #1
 8012992:	e79b      	b.n	80128cc <__multiply+0x84>
 8012994:	08016e1b 	.word	0x08016e1b
 8012998:	08016e2c 	.word	0x08016e2c

0801299c <__pow5mult>:
 801299c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129a0:	4615      	mov	r5, r2
 80129a2:	f012 0203 	ands.w	r2, r2, #3
 80129a6:	4607      	mov	r7, r0
 80129a8:	460e      	mov	r6, r1
 80129aa:	d007      	beq.n	80129bc <__pow5mult+0x20>
 80129ac:	4c25      	ldr	r4, [pc, #148]	@ (8012a44 <__pow5mult+0xa8>)
 80129ae:	3a01      	subs	r2, #1
 80129b0:	2300      	movs	r3, #0
 80129b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80129b6:	f7ff fe55 	bl	8012664 <__multadd>
 80129ba:	4606      	mov	r6, r0
 80129bc:	10ad      	asrs	r5, r5, #2
 80129be:	d03d      	beq.n	8012a3c <__pow5mult+0xa0>
 80129c0:	69fc      	ldr	r4, [r7, #28]
 80129c2:	b97c      	cbnz	r4, 80129e4 <__pow5mult+0x48>
 80129c4:	2010      	movs	r0, #16
 80129c6:	f7ff fd35 	bl	8012434 <malloc>
 80129ca:	4602      	mov	r2, r0
 80129cc:	61f8      	str	r0, [r7, #28]
 80129ce:	b928      	cbnz	r0, 80129dc <__pow5mult+0x40>
 80129d0:	4b1d      	ldr	r3, [pc, #116]	@ (8012a48 <__pow5mult+0xac>)
 80129d2:	481e      	ldr	r0, [pc, #120]	@ (8012a4c <__pow5mult+0xb0>)
 80129d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80129d8:	f001 fede 	bl	8014798 <__assert_func>
 80129dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80129e0:	6004      	str	r4, [r0, #0]
 80129e2:	60c4      	str	r4, [r0, #12]
 80129e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80129e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80129ec:	b94c      	cbnz	r4, 8012a02 <__pow5mult+0x66>
 80129ee:	f240 2171 	movw	r1, #625	@ 0x271
 80129f2:	4638      	mov	r0, r7
 80129f4:	f7ff ff12 	bl	801281c <__i2b>
 80129f8:	2300      	movs	r3, #0
 80129fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80129fe:	4604      	mov	r4, r0
 8012a00:	6003      	str	r3, [r0, #0]
 8012a02:	f04f 0900 	mov.w	r9, #0
 8012a06:	07eb      	lsls	r3, r5, #31
 8012a08:	d50a      	bpl.n	8012a20 <__pow5mult+0x84>
 8012a0a:	4631      	mov	r1, r6
 8012a0c:	4622      	mov	r2, r4
 8012a0e:	4638      	mov	r0, r7
 8012a10:	f7ff ff1a 	bl	8012848 <__multiply>
 8012a14:	4631      	mov	r1, r6
 8012a16:	4680      	mov	r8, r0
 8012a18:	4638      	mov	r0, r7
 8012a1a:	f7ff fe01 	bl	8012620 <_Bfree>
 8012a1e:	4646      	mov	r6, r8
 8012a20:	106d      	asrs	r5, r5, #1
 8012a22:	d00b      	beq.n	8012a3c <__pow5mult+0xa0>
 8012a24:	6820      	ldr	r0, [r4, #0]
 8012a26:	b938      	cbnz	r0, 8012a38 <__pow5mult+0x9c>
 8012a28:	4622      	mov	r2, r4
 8012a2a:	4621      	mov	r1, r4
 8012a2c:	4638      	mov	r0, r7
 8012a2e:	f7ff ff0b 	bl	8012848 <__multiply>
 8012a32:	6020      	str	r0, [r4, #0]
 8012a34:	f8c0 9000 	str.w	r9, [r0]
 8012a38:	4604      	mov	r4, r0
 8012a3a:	e7e4      	b.n	8012a06 <__pow5mult+0x6a>
 8012a3c:	4630      	mov	r0, r6
 8012a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a42:	bf00      	nop
 8012a44:	08016e88 	.word	0x08016e88
 8012a48:	08016dac 	.word	0x08016dac
 8012a4c:	08016e2c 	.word	0x08016e2c

08012a50 <__lshift>:
 8012a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a54:	460c      	mov	r4, r1
 8012a56:	6849      	ldr	r1, [r1, #4]
 8012a58:	6923      	ldr	r3, [r4, #16]
 8012a5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012a5e:	68a3      	ldr	r3, [r4, #8]
 8012a60:	4607      	mov	r7, r0
 8012a62:	4691      	mov	r9, r2
 8012a64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012a68:	f108 0601 	add.w	r6, r8, #1
 8012a6c:	42b3      	cmp	r3, r6
 8012a6e:	db0b      	blt.n	8012a88 <__lshift+0x38>
 8012a70:	4638      	mov	r0, r7
 8012a72:	f7ff fd95 	bl	80125a0 <_Balloc>
 8012a76:	4605      	mov	r5, r0
 8012a78:	b948      	cbnz	r0, 8012a8e <__lshift+0x3e>
 8012a7a:	4602      	mov	r2, r0
 8012a7c:	4b28      	ldr	r3, [pc, #160]	@ (8012b20 <__lshift+0xd0>)
 8012a7e:	4829      	ldr	r0, [pc, #164]	@ (8012b24 <__lshift+0xd4>)
 8012a80:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012a84:	f001 fe88 	bl	8014798 <__assert_func>
 8012a88:	3101      	adds	r1, #1
 8012a8a:	005b      	lsls	r3, r3, #1
 8012a8c:	e7ee      	b.n	8012a6c <__lshift+0x1c>
 8012a8e:	2300      	movs	r3, #0
 8012a90:	f100 0114 	add.w	r1, r0, #20
 8012a94:	f100 0210 	add.w	r2, r0, #16
 8012a98:	4618      	mov	r0, r3
 8012a9a:	4553      	cmp	r3, sl
 8012a9c:	db33      	blt.n	8012b06 <__lshift+0xb6>
 8012a9e:	6920      	ldr	r0, [r4, #16]
 8012aa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012aa4:	f104 0314 	add.w	r3, r4, #20
 8012aa8:	f019 091f 	ands.w	r9, r9, #31
 8012aac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012ab0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012ab4:	d02b      	beq.n	8012b0e <__lshift+0xbe>
 8012ab6:	f1c9 0e20 	rsb	lr, r9, #32
 8012aba:	468a      	mov	sl, r1
 8012abc:	2200      	movs	r2, #0
 8012abe:	6818      	ldr	r0, [r3, #0]
 8012ac0:	fa00 f009 	lsl.w	r0, r0, r9
 8012ac4:	4310      	orrs	r0, r2
 8012ac6:	f84a 0b04 	str.w	r0, [sl], #4
 8012aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ace:	459c      	cmp	ip, r3
 8012ad0:	fa22 f20e 	lsr.w	r2, r2, lr
 8012ad4:	d8f3      	bhi.n	8012abe <__lshift+0x6e>
 8012ad6:	ebac 0304 	sub.w	r3, ip, r4
 8012ada:	3b15      	subs	r3, #21
 8012adc:	f023 0303 	bic.w	r3, r3, #3
 8012ae0:	3304      	adds	r3, #4
 8012ae2:	f104 0015 	add.w	r0, r4, #21
 8012ae6:	4584      	cmp	ip, r0
 8012ae8:	bf38      	it	cc
 8012aea:	2304      	movcc	r3, #4
 8012aec:	50ca      	str	r2, [r1, r3]
 8012aee:	b10a      	cbz	r2, 8012af4 <__lshift+0xa4>
 8012af0:	f108 0602 	add.w	r6, r8, #2
 8012af4:	3e01      	subs	r6, #1
 8012af6:	4638      	mov	r0, r7
 8012af8:	612e      	str	r6, [r5, #16]
 8012afa:	4621      	mov	r1, r4
 8012afc:	f7ff fd90 	bl	8012620 <_Bfree>
 8012b00:	4628      	mov	r0, r5
 8012b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b06:	f842 0f04 	str.w	r0, [r2, #4]!
 8012b0a:	3301      	adds	r3, #1
 8012b0c:	e7c5      	b.n	8012a9a <__lshift+0x4a>
 8012b0e:	3904      	subs	r1, #4
 8012b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b14:	f841 2f04 	str.w	r2, [r1, #4]!
 8012b18:	459c      	cmp	ip, r3
 8012b1a:	d8f9      	bhi.n	8012b10 <__lshift+0xc0>
 8012b1c:	e7ea      	b.n	8012af4 <__lshift+0xa4>
 8012b1e:	bf00      	nop
 8012b20:	08016e1b 	.word	0x08016e1b
 8012b24:	08016e2c 	.word	0x08016e2c

08012b28 <__mcmp>:
 8012b28:	690a      	ldr	r2, [r1, #16]
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	6900      	ldr	r0, [r0, #16]
 8012b2e:	1a80      	subs	r0, r0, r2
 8012b30:	b530      	push	{r4, r5, lr}
 8012b32:	d10e      	bne.n	8012b52 <__mcmp+0x2a>
 8012b34:	3314      	adds	r3, #20
 8012b36:	3114      	adds	r1, #20
 8012b38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012b3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012b40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012b44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012b48:	4295      	cmp	r5, r2
 8012b4a:	d003      	beq.n	8012b54 <__mcmp+0x2c>
 8012b4c:	d205      	bcs.n	8012b5a <__mcmp+0x32>
 8012b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8012b52:	bd30      	pop	{r4, r5, pc}
 8012b54:	42a3      	cmp	r3, r4
 8012b56:	d3f3      	bcc.n	8012b40 <__mcmp+0x18>
 8012b58:	e7fb      	b.n	8012b52 <__mcmp+0x2a>
 8012b5a:	2001      	movs	r0, #1
 8012b5c:	e7f9      	b.n	8012b52 <__mcmp+0x2a>
	...

08012b60 <__mdiff>:
 8012b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b64:	4689      	mov	r9, r1
 8012b66:	4606      	mov	r6, r0
 8012b68:	4611      	mov	r1, r2
 8012b6a:	4648      	mov	r0, r9
 8012b6c:	4614      	mov	r4, r2
 8012b6e:	f7ff ffdb 	bl	8012b28 <__mcmp>
 8012b72:	1e05      	subs	r5, r0, #0
 8012b74:	d112      	bne.n	8012b9c <__mdiff+0x3c>
 8012b76:	4629      	mov	r1, r5
 8012b78:	4630      	mov	r0, r6
 8012b7a:	f7ff fd11 	bl	80125a0 <_Balloc>
 8012b7e:	4602      	mov	r2, r0
 8012b80:	b928      	cbnz	r0, 8012b8e <__mdiff+0x2e>
 8012b82:	4b3f      	ldr	r3, [pc, #252]	@ (8012c80 <__mdiff+0x120>)
 8012b84:	f240 2137 	movw	r1, #567	@ 0x237
 8012b88:	483e      	ldr	r0, [pc, #248]	@ (8012c84 <__mdiff+0x124>)
 8012b8a:	f001 fe05 	bl	8014798 <__assert_func>
 8012b8e:	2301      	movs	r3, #1
 8012b90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012b94:	4610      	mov	r0, r2
 8012b96:	b003      	add	sp, #12
 8012b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b9c:	bfbc      	itt	lt
 8012b9e:	464b      	movlt	r3, r9
 8012ba0:	46a1      	movlt	r9, r4
 8012ba2:	4630      	mov	r0, r6
 8012ba4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012ba8:	bfba      	itte	lt
 8012baa:	461c      	movlt	r4, r3
 8012bac:	2501      	movlt	r5, #1
 8012bae:	2500      	movge	r5, #0
 8012bb0:	f7ff fcf6 	bl	80125a0 <_Balloc>
 8012bb4:	4602      	mov	r2, r0
 8012bb6:	b918      	cbnz	r0, 8012bc0 <__mdiff+0x60>
 8012bb8:	4b31      	ldr	r3, [pc, #196]	@ (8012c80 <__mdiff+0x120>)
 8012bba:	f240 2145 	movw	r1, #581	@ 0x245
 8012bbe:	e7e3      	b.n	8012b88 <__mdiff+0x28>
 8012bc0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012bc4:	6926      	ldr	r6, [r4, #16]
 8012bc6:	60c5      	str	r5, [r0, #12]
 8012bc8:	f109 0310 	add.w	r3, r9, #16
 8012bcc:	f109 0514 	add.w	r5, r9, #20
 8012bd0:	f104 0e14 	add.w	lr, r4, #20
 8012bd4:	f100 0b14 	add.w	fp, r0, #20
 8012bd8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012bdc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012be0:	9301      	str	r3, [sp, #4]
 8012be2:	46d9      	mov	r9, fp
 8012be4:	f04f 0c00 	mov.w	ip, #0
 8012be8:	9b01      	ldr	r3, [sp, #4]
 8012bea:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012bee:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012bf2:	9301      	str	r3, [sp, #4]
 8012bf4:	fa1f f38a 	uxth.w	r3, sl
 8012bf8:	4619      	mov	r1, r3
 8012bfa:	b283      	uxth	r3, r0
 8012bfc:	1acb      	subs	r3, r1, r3
 8012bfe:	0c00      	lsrs	r0, r0, #16
 8012c00:	4463      	add	r3, ip
 8012c02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012c06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012c10:	4576      	cmp	r6, lr
 8012c12:	f849 3b04 	str.w	r3, [r9], #4
 8012c16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012c1a:	d8e5      	bhi.n	8012be8 <__mdiff+0x88>
 8012c1c:	1b33      	subs	r3, r6, r4
 8012c1e:	3b15      	subs	r3, #21
 8012c20:	f023 0303 	bic.w	r3, r3, #3
 8012c24:	3415      	adds	r4, #21
 8012c26:	3304      	adds	r3, #4
 8012c28:	42a6      	cmp	r6, r4
 8012c2a:	bf38      	it	cc
 8012c2c:	2304      	movcc	r3, #4
 8012c2e:	441d      	add	r5, r3
 8012c30:	445b      	add	r3, fp
 8012c32:	461e      	mov	r6, r3
 8012c34:	462c      	mov	r4, r5
 8012c36:	4544      	cmp	r4, r8
 8012c38:	d30e      	bcc.n	8012c58 <__mdiff+0xf8>
 8012c3a:	f108 0103 	add.w	r1, r8, #3
 8012c3e:	1b49      	subs	r1, r1, r5
 8012c40:	f021 0103 	bic.w	r1, r1, #3
 8012c44:	3d03      	subs	r5, #3
 8012c46:	45a8      	cmp	r8, r5
 8012c48:	bf38      	it	cc
 8012c4a:	2100      	movcc	r1, #0
 8012c4c:	440b      	add	r3, r1
 8012c4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012c52:	b191      	cbz	r1, 8012c7a <__mdiff+0x11a>
 8012c54:	6117      	str	r7, [r2, #16]
 8012c56:	e79d      	b.n	8012b94 <__mdiff+0x34>
 8012c58:	f854 1b04 	ldr.w	r1, [r4], #4
 8012c5c:	46e6      	mov	lr, ip
 8012c5e:	0c08      	lsrs	r0, r1, #16
 8012c60:	fa1c fc81 	uxtah	ip, ip, r1
 8012c64:	4471      	add	r1, lr
 8012c66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012c6a:	b289      	uxth	r1, r1
 8012c6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012c70:	f846 1b04 	str.w	r1, [r6], #4
 8012c74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012c78:	e7dd      	b.n	8012c36 <__mdiff+0xd6>
 8012c7a:	3f01      	subs	r7, #1
 8012c7c:	e7e7      	b.n	8012c4e <__mdiff+0xee>
 8012c7e:	bf00      	nop
 8012c80:	08016e1b 	.word	0x08016e1b
 8012c84:	08016e2c 	.word	0x08016e2c

08012c88 <__ulp>:
 8012c88:	b082      	sub	sp, #8
 8012c8a:	ed8d 0b00 	vstr	d0, [sp]
 8012c8e:	9a01      	ldr	r2, [sp, #4]
 8012c90:	4b0f      	ldr	r3, [pc, #60]	@ (8012cd0 <__ulp+0x48>)
 8012c92:	4013      	ands	r3, r2
 8012c94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	dc08      	bgt.n	8012cae <__ulp+0x26>
 8012c9c:	425b      	negs	r3, r3
 8012c9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012ca2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012ca6:	da04      	bge.n	8012cb2 <__ulp+0x2a>
 8012ca8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012cac:	4113      	asrs	r3, r2
 8012cae:	2200      	movs	r2, #0
 8012cb0:	e008      	b.n	8012cc4 <__ulp+0x3c>
 8012cb2:	f1a2 0314 	sub.w	r3, r2, #20
 8012cb6:	2b1e      	cmp	r3, #30
 8012cb8:	bfda      	itte	le
 8012cba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012cbe:	40da      	lsrle	r2, r3
 8012cc0:	2201      	movgt	r2, #1
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	4619      	mov	r1, r3
 8012cc6:	4610      	mov	r0, r2
 8012cc8:	ec41 0b10 	vmov	d0, r0, r1
 8012ccc:	b002      	add	sp, #8
 8012cce:	4770      	bx	lr
 8012cd0:	7ff00000 	.word	0x7ff00000

08012cd4 <__b2d>:
 8012cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cd8:	6906      	ldr	r6, [r0, #16]
 8012cda:	f100 0814 	add.w	r8, r0, #20
 8012cde:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012ce2:	1f37      	subs	r7, r6, #4
 8012ce4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012ce8:	4610      	mov	r0, r2
 8012cea:	f7ff fd4b 	bl	8012784 <__hi0bits>
 8012cee:	f1c0 0320 	rsb	r3, r0, #32
 8012cf2:	280a      	cmp	r0, #10
 8012cf4:	600b      	str	r3, [r1, #0]
 8012cf6:	491b      	ldr	r1, [pc, #108]	@ (8012d64 <__b2d+0x90>)
 8012cf8:	dc15      	bgt.n	8012d26 <__b2d+0x52>
 8012cfa:	f1c0 0c0b 	rsb	ip, r0, #11
 8012cfe:	fa22 f30c 	lsr.w	r3, r2, ip
 8012d02:	45b8      	cmp	r8, r7
 8012d04:	ea43 0501 	orr.w	r5, r3, r1
 8012d08:	bf34      	ite	cc
 8012d0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012d0e:	2300      	movcs	r3, #0
 8012d10:	3015      	adds	r0, #21
 8012d12:	fa02 f000 	lsl.w	r0, r2, r0
 8012d16:	fa23 f30c 	lsr.w	r3, r3, ip
 8012d1a:	4303      	orrs	r3, r0
 8012d1c:	461c      	mov	r4, r3
 8012d1e:	ec45 4b10 	vmov	d0, r4, r5
 8012d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d26:	45b8      	cmp	r8, r7
 8012d28:	bf3a      	itte	cc
 8012d2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012d2e:	f1a6 0708 	subcc.w	r7, r6, #8
 8012d32:	2300      	movcs	r3, #0
 8012d34:	380b      	subs	r0, #11
 8012d36:	d012      	beq.n	8012d5e <__b2d+0x8a>
 8012d38:	f1c0 0120 	rsb	r1, r0, #32
 8012d3c:	fa23 f401 	lsr.w	r4, r3, r1
 8012d40:	4082      	lsls	r2, r0
 8012d42:	4322      	orrs	r2, r4
 8012d44:	4547      	cmp	r7, r8
 8012d46:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012d4a:	bf8c      	ite	hi
 8012d4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012d50:	2200      	movls	r2, #0
 8012d52:	4083      	lsls	r3, r0
 8012d54:	40ca      	lsrs	r2, r1
 8012d56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012d5a:	4313      	orrs	r3, r2
 8012d5c:	e7de      	b.n	8012d1c <__b2d+0x48>
 8012d5e:	ea42 0501 	orr.w	r5, r2, r1
 8012d62:	e7db      	b.n	8012d1c <__b2d+0x48>
 8012d64:	3ff00000 	.word	0x3ff00000

08012d68 <__d2b>:
 8012d68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012d6c:	460f      	mov	r7, r1
 8012d6e:	2101      	movs	r1, #1
 8012d70:	ec59 8b10 	vmov	r8, r9, d0
 8012d74:	4616      	mov	r6, r2
 8012d76:	f7ff fc13 	bl	80125a0 <_Balloc>
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	b930      	cbnz	r0, 8012d8c <__d2b+0x24>
 8012d7e:	4602      	mov	r2, r0
 8012d80:	4b23      	ldr	r3, [pc, #140]	@ (8012e10 <__d2b+0xa8>)
 8012d82:	4824      	ldr	r0, [pc, #144]	@ (8012e14 <__d2b+0xac>)
 8012d84:	f240 310f 	movw	r1, #783	@ 0x30f
 8012d88:	f001 fd06 	bl	8014798 <__assert_func>
 8012d8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012d90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012d94:	b10d      	cbz	r5, 8012d9a <__d2b+0x32>
 8012d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012d9a:	9301      	str	r3, [sp, #4]
 8012d9c:	f1b8 0300 	subs.w	r3, r8, #0
 8012da0:	d023      	beq.n	8012dea <__d2b+0x82>
 8012da2:	4668      	mov	r0, sp
 8012da4:	9300      	str	r3, [sp, #0]
 8012da6:	f7ff fd0c 	bl	80127c2 <__lo0bits>
 8012daa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012dae:	b1d0      	cbz	r0, 8012de6 <__d2b+0x7e>
 8012db0:	f1c0 0320 	rsb	r3, r0, #32
 8012db4:	fa02 f303 	lsl.w	r3, r2, r3
 8012db8:	430b      	orrs	r3, r1
 8012dba:	40c2      	lsrs	r2, r0
 8012dbc:	6163      	str	r3, [r4, #20]
 8012dbe:	9201      	str	r2, [sp, #4]
 8012dc0:	9b01      	ldr	r3, [sp, #4]
 8012dc2:	61a3      	str	r3, [r4, #24]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	bf0c      	ite	eq
 8012dc8:	2201      	moveq	r2, #1
 8012dca:	2202      	movne	r2, #2
 8012dcc:	6122      	str	r2, [r4, #16]
 8012dce:	b1a5      	cbz	r5, 8012dfa <__d2b+0x92>
 8012dd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012dd4:	4405      	add	r5, r0
 8012dd6:	603d      	str	r5, [r7, #0]
 8012dd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012ddc:	6030      	str	r0, [r6, #0]
 8012dde:	4620      	mov	r0, r4
 8012de0:	b003      	add	sp, #12
 8012de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012de6:	6161      	str	r1, [r4, #20]
 8012de8:	e7ea      	b.n	8012dc0 <__d2b+0x58>
 8012dea:	a801      	add	r0, sp, #4
 8012dec:	f7ff fce9 	bl	80127c2 <__lo0bits>
 8012df0:	9b01      	ldr	r3, [sp, #4]
 8012df2:	6163      	str	r3, [r4, #20]
 8012df4:	3020      	adds	r0, #32
 8012df6:	2201      	movs	r2, #1
 8012df8:	e7e8      	b.n	8012dcc <__d2b+0x64>
 8012dfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012dfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012e02:	6038      	str	r0, [r7, #0]
 8012e04:	6918      	ldr	r0, [r3, #16]
 8012e06:	f7ff fcbd 	bl	8012784 <__hi0bits>
 8012e0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012e0e:	e7e5      	b.n	8012ddc <__d2b+0x74>
 8012e10:	08016e1b 	.word	0x08016e1b
 8012e14:	08016e2c 	.word	0x08016e2c

08012e18 <__ratio>:
 8012e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e1c:	b085      	sub	sp, #20
 8012e1e:	e9cd 1000 	strd	r1, r0, [sp]
 8012e22:	a902      	add	r1, sp, #8
 8012e24:	f7ff ff56 	bl	8012cd4 <__b2d>
 8012e28:	9800      	ldr	r0, [sp, #0]
 8012e2a:	a903      	add	r1, sp, #12
 8012e2c:	ec55 4b10 	vmov	r4, r5, d0
 8012e30:	f7ff ff50 	bl	8012cd4 <__b2d>
 8012e34:	9b01      	ldr	r3, [sp, #4]
 8012e36:	6919      	ldr	r1, [r3, #16]
 8012e38:	9b00      	ldr	r3, [sp, #0]
 8012e3a:	691b      	ldr	r3, [r3, #16]
 8012e3c:	1ac9      	subs	r1, r1, r3
 8012e3e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012e42:	1a9b      	subs	r3, r3, r2
 8012e44:	ec5b ab10 	vmov	sl, fp, d0
 8012e48:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	bfce      	itee	gt
 8012e50:	462a      	movgt	r2, r5
 8012e52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012e56:	465a      	movle	r2, fp
 8012e58:	462f      	mov	r7, r5
 8012e5a:	46d9      	mov	r9, fp
 8012e5c:	bfcc      	ite	gt
 8012e5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012e62:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012e66:	464b      	mov	r3, r9
 8012e68:	4652      	mov	r2, sl
 8012e6a:	4620      	mov	r0, r4
 8012e6c:	4639      	mov	r1, r7
 8012e6e:	f7ed fd15 	bl	800089c <__aeabi_ddiv>
 8012e72:	ec41 0b10 	vmov	d0, r0, r1
 8012e76:	b005      	add	sp, #20
 8012e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e7c <__copybits>:
 8012e7c:	3901      	subs	r1, #1
 8012e7e:	b570      	push	{r4, r5, r6, lr}
 8012e80:	1149      	asrs	r1, r1, #5
 8012e82:	6914      	ldr	r4, [r2, #16]
 8012e84:	3101      	adds	r1, #1
 8012e86:	f102 0314 	add.w	r3, r2, #20
 8012e8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012e8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012e92:	1f05      	subs	r5, r0, #4
 8012e94:	42a3      	cmp	r3, r4
 8012e96:	d30c      	bcc.n	8012eb2 <__copybits+0x36>
 8012e98:	1aa3      	subs	r3, r4, r2
 8012e9a:	3b11      	subs	r3, #17
 8012e9c:	f023 0303 	bic.w	r3, r3, #3
 8012ea0:	3211      	adds	r2, #17
 8012ea2:	42a2      	cmp	r2, r4
 8012ea4:	bf88      	it	hi
 8012ea6:	2300      	movhi	r3, #0
 8012ea8:	4418      	add	r0, r3
 8012eaa:	2300      	movs	r3, #0
 8012eac:	4288      	cmp	r0, r1
 8012eae:	d305      	bcc.n	8012ebc <__copybits+0x40>
 8012eb0:	bd70      	pop	{r4, r5, r6, pc}
 8012eb2:	f853 6b04 	ldr.w	r6, [r3], #4
 8012eb6:	f845 6f04 	str.w	r6, [r5, #4]!
 8012eba:	e7eb      	b.n	8012e94 <__copybits+0x18>
 8012ebc:	f840 3b04 	str.w	r3, [r0], #4
 8012ec0:	e7f4      	b.n	8012eac <__copybits+0x30>

08012ec2 <__any_on>:
 8012ec2:	f100 0214 	add.w	r2, r0, #20
 8012ec6:	6900      	ldr	r0, [r0, #16]
 8012ec8:	114b      	asrs	r3, r1, #5
 8012eca:	4298      	cmp	r0, r3
 8012ecc:	b510      	push	{r4, lr}
 8012ece:	db11      	blt.n	8012ef4 <__any_on+0x32>
 8012ed0:	dd0a      	ble.n	8012ee8 <__any_on+0x26>
 8012ed2:	f011 011f 	ands.w	r1, r1, #31
 8012ed6:	d007      	beq.n	8012ee8 <__any_on+0x26>
 8012ed8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012edc:	fa24 f001 	lsr.w	r0, r4, r1
 8012ee0:	fa00 f101 	lsl.w	r1, r0, r1
 8012ee4:	428c      	cmp	r4, r1
 8012ee6:	d10b      	bne.n	8012f00 <__any_on+0x3e>
 8012ee8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012eec:	4293      	cmp	r3, r2
 8012eee:	d803      	bhi.n	8012ef8 <__any_on+0x36>
 8012ef0:	2000      	movs	r0, #0
 8012ef2:	bd10      	pop	{r4, pc}
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	e7f7      	b.n	8012ee8 <__any_on+0x26>
 8012ef8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012efc:	2900      	cmp	r1, #0
 8012efe:	d0f5      	beq.n	8012eec <__any_on+0x2a>
 8012f00:	2001      	movs	r0, #1
 8012f02:	e7f6      	b.n	8012ef2 <__any_on+0x30>

08012f04 <sulp>:
 8012f04:	b570      	push	{r4, r5, r6, lr}
 8012f06:	4604      	mov	r4, r0
 8012f08:	460d      	mov	r5, r1
 8012f0a:	ec45 4b10 	vmov	d0, r4, r5
 8012f0e:	4616      	mov	r6, r2
 8012f10:	f7ff feba 	bl	8012c88 <__ulp>
 8012f14:	ec51 0b10 	vmov	r0, r1, d0
 8012f18:	b17e      	cbz	r6, 8012f3a <sulp+0x36>
 8012f1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012f1e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	dd09      	ble.n	8012f3a <sulp+0x36>
 8012f26:	051b      	lsls	r3, r3, #20
 8012f28:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012f2c:	2400      	movs	r4, #0
 8012f2e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8012f32:	4622      	mov	r2, r4
 8012f34:	462b      	mov	r3, r5
 8012f36:	f7ed fb87 	bl	8000648 <__aeabi_dmul>
 8012f3a:	ec41 0b10 	vmov	d0, r0, r1
 8012f3e:	bd70      	pop	{r4, r5, r6, pc}

08012f40 <_strtod_l>:
 8012f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f44:	b09f      	sub	sp, #124	@ 0x7c
 8012f46:	460c      	mov	r4, r1
 8012f48:	9217      	str	r2, [sp, #92]	@ 0x5c
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	921a      	str	r2, [sp, #104]	@ 0x68
 8012f4e:	9005      	str	r0, [sp, #20]
 8012f50:	f04f 0a00 	mov.w	sl, #0
 8012f54:	f04f 0b00 	mov.w	fp, #0
 8012f58:	460a      	mov	r2, r1
 8012f5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8012f5c:	7811      	ldrb	r1, [r2, #0]
 8012f5e:	292b      	cmp	r1, #43	@ 0x2b
 8012f60:	d04a      	beq.n	8012ff8 <_strtod_l+0xb8>
 8012f62:	d838      	bhi.n	8012fd6 <_strtod_l+0x96>
 8012f64:	290d      	cmp	r1, #13
 8012f66:	d832      	bhi.n	8012fce <_strtod_l+0x8e>
 8012f68:	2908      	cmp	r1, #8
 8012f6a:	d832      	bhi.n	8012fd2 <_strtod_l+0x92>
 8012f6c:	2900      	cmp	r1, #0
 8012f6e:	d03b      	beq.n	8012fe8 <_strtod_l+0xa8>
 8012f70:	2200      	movs	r2, #0
 8012f72:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012f74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8012f76:	782a      	ldrb	r2, [r5, #0]
 8012f78:	2a30      	cmp	r2, #48	@ 0x30
 8012f7a:	f040 80b3 	bne.w	80130e4 <_strtod_l+0x1a4>
 8012f7e:	786a      	ldrb	r2, [r5, #1]
 8012f80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012f84:	2a58      	cmp	r2, #88	@ 0x58
 8012f86:	d16e      	bne.n	8013066 <_strtod_l+0x126>
 8012f88:	9302      	str	r3, [sp, #8]
 8012f8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012f8c:	9301      	str	r3, [sp, #4]
 8012f8e:	ab1a      	add	r3, sp, #104	@ 0x68
 8012f90:	9300      	str	r3, [sp, #0]
 8012f92:	4a8e      	ldr	r2, [pc, #568]	@ (80131cc <_strtod_l+0x28c>)
 8012f94:	9805      	ldr	r0, [sp, #20]
 8012f96:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012f98:	a919      	add	r1, sp, #100	@ 0x64
 8012f9a:	f001 fc97 	bl	80148cc <__gethex>
 8012f9e:	f010 060f 	ands.w	r6, r0, #15
 8012fa2:	4604      	mov	r4, r0
 8012fa4:	d005      	beq.n	8012fb2 <_strtod_l+0x72>
 8012fa6:	2e06      	cmp	r6, #6
 8012fa8:	d128      	bne.n	8012ffc <_strtod_l+0xbc>
 8012faa:	3501      	adds	r5, #1
 8012fac:	2300      	movs	r3, #0
 8012fae:	9519      	str	r5, [sp, #100]	@ 0x64
 8012fb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012fb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	f040 858e 	bne.w	8013ad6 <_strtod_l+0xb96>
 8012fba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012fbc:	b1cb      	cbz	r3, 8012ff2 <_strtod_l+0xb2>
 8012fbe:	4652      	mov	r2, sl
 8012fc0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8012fc4:	ec43 2b10 	vmov	d0, r2, r3
 8012fc8:	b01f      	add	sp, #124	@ 0x7c
 8012fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fce:	2920      	cmp	r1, #32
 8012fd0:	d1ce      	bne.n	8012f70 <_strtod_l+0x30>
 8012fd2:	3201      	adds	r2, #1
 8012fd4:	e7c1      	b.n	8012f5a <_strtod_l+0x1a>
 8012fd6:	292d      	cmp	r1, #45	@ 0x2d
 8012fd8:	d1ca      	bne.n	8012f70 <_strtod_l+0x30>
 8012fda:	2101      	movs	r1, #1
 8012fdc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012fde:	1c51      	adds	r1, r2, #1
 8012fe0:	9119      	str	r1, [sp, #100]	@ 0x64
 8012fe2:	7852      	ldrb	r2, [r2, #1]
 8012fe4:	2a00      	cmp	r2, #0
 8012fe6:	d1c5      	bne.n	8012f74 <_strtod_l+0x34>
 8012fe8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012fea:	9419      	str	r4, [sp, #100]	@ 0x64
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	f040 8570 	bne.w	8013ad2 <_strtod_l+0xb92>
 8012ff2:	4652      	mov	r2, sl
 8012ff4:	465b      	mov	r3, fp
 8012ff6:	e7e5      	b.n	8012fc4 <_strtod_l+0x84>
 8012ff8:	2100      	movs	r1, #0
 8012ffa:	e7ef      	b.n	8012fdc <_strtod_l+0x9c>
 8012ffc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012ffe:	b13a      	cbz	r2, 8013010 <_strtod_l+0xd0>
 8013000:	2135      	movs	r1, #53	@ 0x35
 8013002:	a81c      	add	r0, sp, #112	@ 0x70
 8013004:	f7ff ff3a 	bl	8012e7c <__copybits>
 8013008:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801300a:	9805      	ldr	r0, [sp, #20]
 801300c:	f7ff fb08 	bl	8012620 <_Bfree>
 8013010:	3e01      	subs	r6, #1
 8013012:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013014:	2e04      	cmp	r6, #4
 8013016:	d806      	bhi.n	8013026 <_strtod_l+0xe6>
 8013018:	e8df f006 	tbb	[pc, r6]
 801301c:	201d0314 	.word	0x201d0314
 8013020:	14          	.byte	0x14
 8013021:	00          	.byte	0x00
 8013022:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8013026:	05e1      	lsls	r1, r4, #23
 8013028:	bf48      	it	mi
 801302a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801302e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013032:	0d1b      	lsrs	r3, r3, #20
 8013034:	051b      	lsls	r3, r3, #20
 8013036:	2b00      	cmp	r3, #0
 8013038:	d1bb      	bne.n	8012fb2 <_strtod_l+0x72>
 801303a:	f7fe fb21 	bl	8011680 <__errno>
 801303e:	2322      	movs	r3, #34	@ 0x22
 8013040:	6003      	str	r3, [r0, #0]
 8013042:	e7b6      	b.n	8012fb2 <_strtod_l+0x72>
 8013044:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013048:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801304c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013050:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013054:	e7e7      	b.n	8013026 <_strtod_l+0xe6>
 8013056:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80131d4 <_strtod_l+0x294>
 801305a:	e7e4      	b.n	8013026 <_strtod_l+0xe6>
 801305c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013060:	f04f 3aff 	mov.w	sl, #4294967295
 8013064:	e7df      	b.n	8013026 <_strtod_l+0xe6>
 8013066:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013068:	1c5a      	adds	r2, r3, #1
 801306a:	9219      	str	r2, [sp, #100]	@ 0x64
 801306c:	785b      	ldrb	r3, [r3, #1]
 801306e:	2b30      	cmp	r3, #48	@ 0x30
 8013070:	d0f9      	beq.n	8013066 <_strtod_l+0x126>
 8013072:	2b00      	cmp	r3, #0
 8013074:	d09d      	beq.n	8012fb2 <_strtod_l+0x72>
 8013076:	2301      	movs	r3, #1
 8013078:	9309      	str	r3, [sp, #36]	@ 0x24
 801307a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801307c:	930c      	str	r3, [sp, #48]	@ 0x30
 801307e:	2300      	movs	r3, #0
 8013080:	9308      	str	r3, [sp, #32]
 8013082:	930a      	str	r3, [sp, #40]	@ 0x28
 8013084:	461f      	mov	r7, r3
 8013086:	220a      	movs	r2, #10
 8013088:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801308a:	7805      	ldrb	r5, [r0, #0]
 801308c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013090:	b2d9      	uxtb	r1, r3
 8013092:	2909      	cmp	r1, #9
 8013094:	d928      	bls.n	80130e8 <_strtod_l+0x1a8>
 8013096:	494e      	ldr	r1, [pc, #312]	@ (80131d0 <_strtod_l+0x290>)
 8013098:	2201      	movs	r2, #1
 801309a:	f7fe fa94 	bl	80115c6 <strncmp>
 801309e:	2800      	cmp	r0, #0
 80130a0:	d032      	beq.n	8013108 <_strtod_l+0x1c8>
 80130a2:	2000      	movs	r0, #0
 80130a4:	462a      	mov	r2, r5
 80130a6:	4681      	mov	r9, r0
 80130a8:	463d      	mov	r5, r7
 80130aa:	4603      	mov	r3, r0
 80130ac:	2a65      	cmp	r2, #101	@ 0x65
 80130ae:	d001      	beq.n	80130b4 <_strtod_l+0x174>
 80130b0:	2a45      	cmp	r2, #69	@ 0x45
 80130b2:	d114      	bne.n	80130de <_strtod_l+0x19e>
 80130b4:	b91d      	cbnz	r5, 80130be <_strtod_l+0x17e>
 80130b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80130b8:	4302      	orrs	r2, r0
 80130ba:	d095      	beq.n	8012fe8 <_strtod_l+0xa8>
 80130bc:	2500      	movs	r5, #0
 80130be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80130c0:	1c62      	adds	r2, r4, #1
 80130c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80130c4:	7862      	ldrb	r2, [r4, #1]
 80130c6:	2a2b      	cmp	r2, #43	@ 0x2b
 80130c8:	d077      	beq.n	80131ba <_strtod_l+0x27a>
 80130ca:	2a2d      	cmp	r2, #45	@ 0x2d
 80130cc:	d07b      	beq.n	80131c6 <_strtod_l+0x286>
 80130ce:	f04f 0c00 	mov.w	ip, #0
 80130d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80130d6:	2909      	cmp	r1, #9
 80130d8:	f240 8082 	bls.w	80131e0 <_strtod_l+0x2a0>
 80130dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80130de:	f04f 0800 	mov.w	r8, #0
 80130e2:	e0a2      	b.n	801322a <_strtod_l+0x2ea>
 80130e4:	2300      	movs	r3, #0
 80130e6:	e7c7      	b.n	8013078 <_strtod_l+0x138>
 80130e8:	2f08      	cmp	r7, #8
 80130ea:	bfd5      	itete	le
 80130ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80130ee:	9908      	ldrgt	r1, [sp, #32]
 80130f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80130f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80130f8:	f100 0001 	add.w	r0, r0, #1
 80130fc:	bfd4      	ite	le
 80130fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8013100:	9308      	strgt	r3, [sp, #32]
 8013102:	3701      	adds	r7, #1
 8013104:	9019      	str	r0, [sp, #100]	@ 0x64
 8013106:	e7bf      	b.n	8013088 <_strtod_l+0x148>
 8013108:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801310a:	1c5a      	adds	r2, r3, #1
 801310c:	9219      	str	r2, [sp, #100]	@ 0x64
 801310e:	785a      	ldrb	r2, [r3, #1]
 8013110:	b37f      	cbz	r7, 8013172 <_strtod_l+0x232>
 8013112:	4681      	mov	r9, r0
 8013114:	463d      	mov	r5, r7
 8013116:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801311a:	2b09      	cmp	r3, #9
 801311c:	d912      	bls.n	8013144 <_strtod_l+0x204>
 801311e:	2301      	movs	r3, #1
 8013120:	e7c4      	b.n	80130ac <_strtod_l+0x16c>
 8013122:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013124:	1c5a      	adds	r2, r3, #1
 8013126:	9219      	str	r2, [sp, #100]	@ 0x64
 8013128:	785a      	ldrb	r2, [r3, #1]
 801312a:	3001      	adds	r0, #1
 801312c:	2a30      	cmp	r2, #48	@ 0x30
 801312e:	d0f8      	beq.n	8013122 <_strtod_l+0x1e2>
 8013130:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013134:	2b08      	cmp	r3, #8
 8013136:	f200 84d3 	bhi.w	8013ae0 <_strtod_l+0xba0>
 801313a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801313c:	930c      	str	r3, [sp, #48]	@ 0x30
 801313e:	4681      	mov	r9, r0
 8013140:	2000      	movs	r0, #0
 8013142:	4605      	mov	r5, r0
 8013144:	3a30      	subs	r2, #48	@ 0x30
 8013146:	f100 0301 	add.w	r3, r0, #1
 801314a:	d02a      	beq.n	80131a2 <_strtod_l+0x262>
 801314c:	4499      	add	r9, r3
 801314e:	eb00 0c05 	add.w	ip, r0, r5
 8013152:	462b      	mov	r3, r5
 8013154:	210a      	movs	r1, #10
 8013156:	4563      	cmp	r3, ip
 8013158:	d10d      	bne.n	8013176 <_strtod_l+0x236>
 801315a:	1c69      	adds	r1, r5, #1
 801315c:	4401      	add	r1, r0
 801315e:	4428      	add	r0, r5
 8013160:	2808      	cmp	r0, #8
 8013162:	dc16      	bgt.n	8013192 <_strtod_l+0x252>
 8013164:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013166:	230a      	movs	r3, #10
 8013168:	fb03 2300 	mla	r3, r3, r0, r2
 801316c:	930a      	str	r3, [sp, #40]	@ 0x28
 801316e:	2300      	movs	r3, #0
 8013170:	e018      	b.n	80131a4 <_strtod_l+0x264>
 8013172:	4638      	mov	r0, r7
 8013174:	e7da      	b.n	801312c <_strtod_l+0x1ec>
 8013176:	2b08      	cmp	r3, #8
 8013178:	f103 0301 	add.w	r3, r3, #1
 801317c:	dc03      	bgt.n	8013186 <_strtod_l+0x246>
 801317e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013180:	434e      	muls	r6, r1
 8013182:	960a      	str	r6, [sp, #40]	@ 0x28
 8013184:	e7e7      	b.n	8013156 <_strtod_l+0x216>
 8013186:	2b10      	cmp	r3, #16
 8013188:	bfde      	ittt	le
 801318a:	9e08      	ldrle	r6, [sp, #32]
 801318c:	434e      	mulle	r6, r1
 801318e:	9608      	strle	r6, [sp, #32]
 8013190:	e7e1      	b.n	8013156 <_strtod_l+0x216>
 8013192:	280f      	cmp	r0, #15
 8013194:	dceb      	bgt.n	801316e <_strtod_l+0x22e>
 8013196:	9808      	ldr	r0, [sp, #32]
 8013198:	230a      	movs	r3, #10
 801319a:	fb03 2300 	mla	r3, r3, r0, r2
 801319e:	9308      	str	r3, [sp, #32]
 80131a0:	e7e5      	b.n	801316e <_strtod_l+0x22e>
 80131a2:	4629      	mov	r1, r5
 80131a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80131a6:	1c50      	adds	r0, r2, #1
 80131a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80131aa:	7852      	ldrb	r2, [r2, #1]
 80131ac:	4618      	mov	r0, r3
 80131ae:	460d      	mov	r5, r1
 80131b0:	e7b1      	b.n	8013116 <_strtod_l+0x1d6>
 80131b2:	f04f 0900 	mov.w	r9, #0
 80131b6:	2301      	movs	r3, #1
 80131b8:	e77d      	b.n	80130b6 <_strtod_l+0x176>
 80131ba:	f04f 0c00 	mov.w	ip, #0
 80131be:	1ca2      	adds	r2, r4, #2
 80131c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80131c2:	78a2      	ldrb	r2, [r4, #2]
 80131c4:	e785      	b.n	80130d2 <_strtod_l+0x192>
 80131c6:	f04f 0c01 	mov.w	ip, #1
 80131ca:	e7f8      	b.n	80131be <_strtod_l+0x27e>
 80131cc:	08016fa0 	.word	0x08016fa0
 80131d0:	08016f88 	.word	0x08016f88
 80131d4:	7ff00000 	.word	0x7ff00000
 80131d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80131da:	1c51      	adds	r1, r2, #1
 80131dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80131de:	7852      	ldrb	r2, [r2, #1]
 80131e0:	2a30      	cmp	r2, #48	@ 0x30
 80131e2:	d0f9      	beq.n	80131d8 <_strtod_l+0x298>
 80131e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80131e8:	2908      	cmp	r1, #8
 80131ea:	f63f af78 	bhi.w	80130de <_strtod_l+0x19e>
 80131ee:	3a30      	subs	r2, #48	@ 0x30
 80131f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80131f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80131f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80131f6:	f04f 080a 	mov.w	r8, #10
 80131fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80131fc:	1c56      	adds	r6, r2, #1
 80131fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8013200:	7852      	ldrb	r2, [r2, #1]
 8013202:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013206:	f1be 0f09 	cmp.w	lr, #9
 801320a:	d939      	bls.n	8013280 <_strtod_l+0x340>
 801320c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801320e:	1a76      	subs	r6, r6, r1
 8013210:	2e08      	cmp	r6, #8
 8013212:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013216:	dc03      	bgt.n	8013220 <_strtod_l+0x2e0>
 8013218:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801321a:	4588      	cmp	r8, r1
 801321c:	bfa8      	it	ge
 801321e:	4688      	movge	r8, r1
 8013220:	f1bc 0f00 	cmp.w	ip, #0
 8013224:	d001      	beq.n	801322a <_strtod_l+0x2ea>
 8013226:	f1c8 0800 	rsb	r8, r8, #0
 801322a:	2d00      	cmp	r5, #0
 801322c:	d14e      	bne.n	80132cc <_strtod_l+0x38c>
 801322e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013230:	4308      	orrs	r0, r1
 8013232:	f47f aebe 	bne.w	8012fb2 <_strtod_l+0x72>
 8013236:	2b00      	cmp	r3, #0
 8013238:	f47f aed6 	bne.w	8012fe8 <_strtod_l+0xa8>
 801323c:	2a69      	cmp	r2, #105	@ 0x69
 801323e:	d028      	beq.n	8013292 <_strtod_l+0x352>
 8013240:	dc25      	bgt.n	801328e <_strtod_l+0x34e>
 8013242:	2a49      	cmp	r2, #73	@ 0x49
 8013244:	d025      	beq.n	8013292 <_strtod_l+0x352>
 8013246:	2a4e      	cmp	r2, #78	@ 0x4e
 8013248:	f47f aece 	bne.w	8012fe8 <_strtod_l+0xa8>
 801324c:	499b      	ldr	r1, [pc, #620]	@ (80134bc <_strtod_l+0x57c>)
 801324e:	a819      	add	r0, sp, #100	@ 0x64
 8013250:	f001 fd5e 	bl	8014d10 <__match>
 8013254:	2800      	cmp	r0, #0
 8013256:	f43f aec7 	beq.w	8012fe8 <_strtod_l+0xa8>
 801325a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801325c:	781b      	ldrb	r3, [r3, #0]
 801325e:	2b28      	cmp	r3, #40	@ 0x28
 8013260:	d12e      	bne.n	80132c0 <_strtod_l+0x380>
 8013262:	4997      	ldr	r1, [pc, #604]	@ (80134c0 <_strtod_l+0x580>)
 8013264:	aa1c      	add	r2, sp, #112	@ 0x70
 8013266:	a819      	add	r0, sp, #100	@ 0x64
 8013268:	f001 fd66 	bl	8014d38 <__hexnan>
 801326c:	2805      	cmp	r0, #5
 801326e:	d127      	bne.n	80132c0 <_strtod_l+0x380>
 8013270:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013272:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013276:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801327a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801327e:	e698      	b.n	8012fb2 <_strtod_l+0x72>
 8013280:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013282:	fb08 2101 	mla	r1, r8, r1, r2
 8013286:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801328a:	920e      	str	r2, [sp, #56]	@ 0x38
 801328c:	e7b5      	b.n	80131fa <_strtod_l+0x2ba>
 801328e:	2a6e      	cmp	r2, #110	@ 0x6e
 8013290:	e7da      	b.n	8013248 <_strtod_l+0x308>
 8013292:	498c      	ldr	r1, [pc, #560]	@ (80134c4 <_strtod_l+0x584>)
 8013294:	a819      	add	r0, sp, #100	@ 0x64
 8013296:	f001 fd3b 	bl	8014d10 <__match>
 801329a:	2800      	cmp	r0, #0
 801329c:	f43f aea4 	beq.w	8012fe8 <_strtod_l+0xa8>
 80132a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132a2:	4989      	ldr	r1, [pc, #548]	@ (80134c8 <_strtod_l+0x588>)
 80132a4:	3b01      	subs	r3, #1
 80132a6:	a819      	add	r0, sp, #100	@ 0x64
 80132a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80132aa:	f001 fd31 	bl	8014d10 <__match>
 80132ae:	b910      	cbnz	r0, 80132b6 <_strtod_l+0x376>
 80132b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132b2:	3301      	adds	r3, #1
 80132b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80132b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80134d8 <_strtod_l+0x598>
 80132ba:	f04f 0a00 	mov.w	sl, #0
 80132be:	e678      	b.n	8012fb2 <_strtod_l+0x72>
 80132c0:	4882      	ldr	r0, [pc, #520]	@ (80134cc <_strtod_l+0x58c>)
 80132c2:	f001 fa61 	bl	8014788 <nan>
 80132c6:	ec5b ab10 	vmov	sl, fp, d0
 80132ca:	e672      	b.n	8012fb2 <_strtod_l+0x72>
 80132cc:	eba8 0309 	sub.w	r3, r8, r9
 80132d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80132d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80132d4:	2f00      	cmp	r7, #0
 80132d6:	bf08      	it	eq
 80132d8:	462f      	moveq	r7, r5
 80132da:	2d10      	cmp	r5, #16
 80132dc:	462c      	mov	r4, r5
 80132de:	bfa8      	it	ge
 80132e0:	2410      	movge	r4, #16
 80132e2:	f7ed f937 	bl	8000554 <__aeabi_ui2d>
 80132e6:	2d09      	cmp	r5, #9
 80132e8:	4682      	mov	sl, r0
 80132ea:	468b      	mov	fp, r1
 80132ec:	dc13      	bgt.n	8013316 <_strtod_l+0x3d6>
 80132ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	f43f ae5e 	beq.w	8012fb2 <_strtod_l+0x72>
 80132f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132f8:	dd78      	ble.n	80133ec <_strtod_l+0x4ac>
 80132fa:	2b16      	cmp	r3, #22
 80132fc:	dc5f      	bgt.n	80133be <_strtod_l+0x47e>
 80132fe:	4974      	ldr	r1, [pc, #464]	@ (80134d0 <_strtod_l+0x590>)
 8013300:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013308:	4652      	mov	r2, sl
 801330a:	465b      	mov	r3, fp
 801330c:	f7ed f99c 	bl	8000648 <__aeabi_dmul>
 8013310:	4682      	mov	sl, r0
 8013312:	468b      	mov	fp, r1
 8013314:	e64d      	b.n	8012fb2 <_strtod_l+0x72>
 8013316:	4b6e      	ldr	r3, [pc, #440]	@ (80134d0 <_strtod_l+0x590>)
 8013318:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801331c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013320:	f7ed f992 	bl	8000648 <__aeabi_dmul>
 8013324:	4682      	mov	sl, r0
 8013326:	9808      	ldr	r0, [sp, #32]
 8013328:	468b      	mov	fp, r1
 801332a:	f7ed f913 	bl	8000554 <__aeabi_ui2d>
 801332e:	4602      	mov	r2, r0
 8013330:	460b      	mov	r3, r1
 8013332:	4650      	mov	r0, sl
 8013334:	4659      	mov	r1, fp
 8013336:	f7ec ffd1 	bl	80002dc <__adddf3>
 801333a:	2d0f      	cmp	r5, #15
 801333c:	4682      	mov	sl, r0
 801333e:	468b      	mov	fp, r1
 8013340:	ddd5      	ble.n	80132ee <_strtod_l+0x3ae>
 8013342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013344:	1b2c      	subs	r4, r5, r4
 8013346:	441c      	add	r4, r3
 8013348:	2c00      	cmp	r4, #0
 801334a:	f340 8096 	ble.w	801347a <_strtod_l+0x53a>
 801334e:	f014 030f 	ands.w	r3, r4, #15
 8013352:	d00a      	beq.n	801336a <_strtod_l+0x42a>
 8013354:	495e      	ldr	r1, [pc, #376]	@ (80134d0 <_strtod_l+0x590>)
 8013356:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801335a:	4652      	mov	r2, sl
 801335c:	465b      	mov	r3, fp
 801335e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013362:	f7ed f971 	bl	8000648 <__aeabi_dmul>
 8013366:	4682      	mov	sl, r0
 8013368:	468b      	mov	fp, r1
 801336a:	f034 040f 	bics.w	r4, r4, #15
 801336e:	d073      	beq.n	8013458 <_strtod_l+0x518>
 8013370:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013374:	dd48      	ble.n	8013408 <_strtod_l+0x4c8>
 8013376:	2400      	movs	r4, #0
 8013378:	46a0      	mov	r8, r4
 801337a:	940a      	str	r4, [sp, #40]	@ 0x28
 801337c:	46a1      	mov	r9, r4
 801337e:	9a05      	ldr	r2, [sp, #20]
 8013380:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80134d8 <_strtod_l+0x598>
 8013384:	2322      	movs	r3, #34	@ 0x22
 8013386:	6013      	str	r3, [r2, #0]
 8013388:	f04f 0a00 	mov.w	sl, #0
 801338c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801338e:	2b00      	cmp	r3, #0
 8013390:	f43f ae0f 	beq.w	8012fb2 <_strtod_l+0x72>
 8013394:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013396:	9805      	ldr	r0, [sp, #20]
 8013398:	f7ff f942 	bl	8012620 <_Bfree>
 801339c:	9805      	ldr	r0, [sp, #20]
 801339e:	4649      	mov	r1, r9
 80133a0:	f7ff f93e 	bl	8012620 <_Bfree>
 80133a4:	9805      	ldr	r0, [sp, #20]
 80133a6:	4641      	mov	r1, r8
 80133a8:	f7ff f93a 	bl	8012620 <_Bfree>
 80133ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80133ae:	9805      	ldr	r0, [sp, #20]
 80133b0:	f7ff f936 	bl	8012620 <_Bfree>
 80133b4:	9805      	ldr	r0, [sp, #20]
 80133b6:	4621      	mov	r1, r4
 80133b8:	f7ff f932 	bl	8012620 <_Bfree>
 80133bc:	e5f9      	b.n	8012fb2 <_strtod_l+0x72>
 80133be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80133c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80133c4:	4293      	cmp	r3, r2
 80133c6:	dbbc      	blt.n	8013342 <_strtod_l+0x402>
 80133c8:	4c41      	ldr	r4, [pc, #260]	@ (80134d0 <_strtod_l+0x590>)
 80133ca:	f1c5 050f 	rsb	r5, r5, #15
 80133ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80133d2:	4652      	mov	r2, sl
 80133d4:	465b      	mov	r3, fp
 80133d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133da:	f7ed f935 	bl	8000648 <__aeabi_dmul>
 80133de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133e0:	1b5d      	subs	r5, r3, r5
 80133e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80133e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80133ea:	e78f      	b.n	801330c <_strtod_l+0x3cc>
 80133ec:	3316      	adds	r3, #22
 80133ee:	dba8      	blt.n	8013342 <_strtod_l+0x402>
 80133f0:	4b37      	ldr	r3, [pc, #220]	@ (80134d0 <_strtod_l+0x590>)
 80133f2:	eba9 0808 	sub.w	r8, r9, r8
 80133f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80133fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80133fe:	4650      	mov	r0, sl
 8013400:	4659      	mov	r1, fp
 8013402:	f7ed fa4b 	bl	800089c <__aeabi_ddiv>
 8013406:	e783      	b.n	8013310 <_strtod_l+0x3d0>
 8013408:	4b32      	ldr	r3, [pc, #200]	@ (80134d4 <_strtod_l+0x594>)
 801340a:	9308      	str	r3, [sp, #32]
 801340c:	2300      	movs	r3, #0
 801340e:	1124      	asrs	r4, r4, #4
 8013410:	4650      	mov	r0, sl
 8013412:	4659      	mov	r1, fp
 8013414:	461e      	mov	r6, r3
 8013416:	2c01      	cmp	r4, #1
 8013418:	dc21      	bgt.n	801345e <_strtod_l+0x51e>
 801341a:	b10b      	cbz	r3, 8013420 <_strtod_l+0x4e0>
 801341c:	4682      	mov	sl, r0
 801341e:	468b      	mov	fp, r1
 8013420:	492c      	ldr	r1, [pc, #176]	@ (80134d4 <_strtod_l+0x594>)
 8013422:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013426:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801342a:	4652      	mov	r2, sl
 801342c:	465b      	mov	r3, fp
 801342e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013432:	f7ed f909 	bl	8000648 <__aeabi_dmul>
 8013436:	4b28      	ldr	r3, [pc, #160]	@ (80134d8 <_strtod_l+0x598>)
 8013438:	460a      	mov	r2, r1
 801343a:	400b      	ands	r3, r1
 801343c:	4927      	ldr	r1, [pc, #156]	@ (80134dc <_strtod_l+0x59c>)
 801343e:	428b      	cmp	r3, r1
 8013440:	4682      	mov	sl, r0
 8013442:	d898      	bhi.n	8013376 <_strtod_l+0x436>
 8013444:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013448:	428b      	cmp	r3, r1
 801344a:	bf86      	itte	hi
 801344c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80134e0 <_strtod_l+0x5a0>
 8013450:	f04f 3aff 	movhi.w	sl, #4294967295
 8013454:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013458:	2300      	movs	r3, #0
 801345a:	9308      	str	r3, [sp, #32]
 801345c:	e07a      	b.n	8013554 <_strtod_l+0x614>
 801345e:	07e2      	lsls	r2, r4, #31
 8013460:	d505      	bpl.n	801346e <_strtod_l+0x52e>
 8013462:	9b08      	ldr	r3, [sp, #32]
 8013464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013468:	f7ed f8ee 	bl	8000648 <__aeabi_dmul>
 801346c:	2301      	movs	r3, #1
 801346e:	9a08      	ldr	r2, [sp, #32]
 8013470:	3208      	adds	r2, #8
 8013472:	3601      	adds	r6, #1
 8013474:	1064      	asrs	r4, r4, #1
 8013476:	9208      	str	r2, [sp, #32]
 8013478:	e7cd      	b.n	8013416 <_strtod_l+0x4d6>
 801347a:	d0ed      	beq.n	8013458 <_strtod_l+0x518>
 801347c:	4264      	negs	r4, r4
 801347e:	f014 020f 	ands.w	r2, r4, #15
 8013482:	d00a      	beq.n	801349a <_strtod_l+0x55a>
 8013484:	4b12      	ldr	r3, [pc, #72]	@ (80134d0 <_strtod_l+0x590>)
 8013486:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801348a:	4650      	mov	r0, sl
 801348c:	4659      	mov	r1, fp
 801348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013492:	f7ed fa03 	bl	800089c <__aeabi_ddiv>
 8013496:	4682      	mov	sl, r0
 8013498:	468b      	mov	fp, r1
 801349a:	1124      	asrs	r4, r4, #4
 801349c:	d0dc      	beq.n	8013458 <_strtod_l+0x518>
 801349e:	2c1f      	cmp	r4, #31
 80134a0:	dd20      	ble.n	80134e4 <_strtod_l+0x5a4>
 80134a2:	2400      	movs	r4, #0
 80134a4:	46a0      	mov	r8, r4
 80134a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80134a8:	46a1      	mov	r9, r4
 80134aa:	9a05      	ldr	r2, [sp, #20]
 80134ac:	2322      	movs	r3, #34	@ 0x22
 80134ae:	f04f 0a00 	mov.w	sl, #0
 80134b2:	f04f 0b00 	mov.w	fp, #0
 80134b6:	6013      	str	r3, [r2, #0]
 80134b8:	e768      	b.n	801338c <_strtod_l+0x44c>
 80134ba:	bf00      	nop
 80134bc:	08016d75 	.word	0x08016d75
 80134c0:	08016f8c 	.word	0x08016f8c
 80134c4:	08016d6d 	.word	0x08016d6d
 80134c8:	08016da2 	.word	0x08016da2
 80134cc:	08017150 	.word	0x08017150
 80134d0:	08016ec0 	.word	0x08016ec0
 80134d4:	08016e98 	.word	0x08016e98
 80134d8:	7ff00000 	.word	0x7ff00000
 80134dc:	7ca00000 	.word	0x7ca00000
 80134e0:	7fefffff 	.word	0x7fefffff
 80134e4:	f014 0310 	ands.w	r3, r4, #16
 80134e8:	bf18      	it	ne
 80134ea:	236a      	movne	r3, #106	@ 0x6a
 80134ec:	4ea9      	ldr	r6, [pc, #676]	@ (8013794 <_strtod_l+0x854>)
 80134ee:	9308      	str	r3, [sp, #32]
 80134f0:	4650      	mov	r0, sl
 80134f2:	4659      	mov	r1, fp
 80134f4:	2300      	movs	r3, #0
 80134f6:	07e2      	lsls	r2, r4, #31
 80134f8:	d504      	bpl.n	8013504 <_strtod_l+0x5c4>
 80134fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80134fe:	f7ed f8a3 	bl	8000648 <__aeabi_dmul>
 8013502:	2301      	movs	r3, #1
 8013504:	1064      	asrs	r4, r4, #1
 8013506:	f106 0608 	add.w	r6, r6, #8
 801350a:	d1f4      	bne.n	80134f6 <_strtod_l+0x5b6>
 801350c:	b10b      	cbz	r3, 8013512 <_strtod_l+0x5d2>
 801350e:	4682      	mov	sl, r0
 8013510:	468b      	mov	fp, r1
 8013512:	9b08      	ldr	r3, [sp, #32]
 8013514:	b1b3      	cbz	r3, 8013544 <_strtod_l+0x604>
 8013516:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801351a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801351e:	2b00      	cmp	r3, #0
 8013520:	4659      	mov	r1, fp
 8013522:	dd0f      	ble.n	8013544 <_strtod_l+0x604>
 8013524:	2b1f      	cmp	r3, #31
 8013526:	dd55      	ble.n	80135d4 <_strtod_l+0x694>
 8013528:	2b34      	cmp	r3, #52	@ 0x34
 801352a:	bfde      	ittt	le
 801352c:	f04f 33ff 	movle.w	r3, #4294967295
 8013530:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013534:	4093      	lslle	r3, r2
 8013536:	f04f 0a00 	mov.w	sl, #0
 801353a:	bfcc      	ite	gt
 801353c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013540:	ea03 0b01 	andle.w	fp, r3, r1
 8013544:	2200      	movs	r2, #0
 8013546:	2300      	movs	r3, #0
 8013548:	4650      	mov	r0, sl
 801354a:	4659      	mov	r1, fp
 801354c:	f7ed fae4 	bl	8000b18 <__aeabi_dcmpeq>
 8013550:	2800      	cmp	r0, #0
 8013552:	d1a6      	bne.n	80134a2 <_strtod_l+0x562>
 8013554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013556:	9300      	str	r3, [sp, #0]
 8013558:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801355a:	9805      	ldr	r0, [sp, #20]
 801355c:	462b      	mov	r3, r5
 801355e:	463a      	mov	r2, r7
 8013560:	f7ff f8c6 	bl	80126f0 <__s2b>
 8013564:	900a      	str	r0, [sp, #40]	@ 0x28
 8013566:	2800      	cmp	r0, #0
 8013568:	f43f af05 	beq.w	8013376 <_strtod_l+0x436>
 801356c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801356e:	2a00      	cmp	r2, #0
 8013570:	eba9 0308 	sub.w	r3, r9, r8
 8013574:	bfa8      	it	ge
 8013576:	2300      	movge	r3, #0
 8013578:	9312      	str	r3, [sp, #72]	@ 0x48
 801357a:	2400      	movs	r4, #0
 801357c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013580:	9316      	str	r3, [sp, #88]	@ 0x58
 8013582:	46a0      	mov	r8, r4
 8013584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013586:	9805      	ldr	r0, [sp, #20]
 8013588:	6859      	ldr	r1, [r3, #4]
 801358a:	f7ff f809 	bl	80125a0 <_Balloc>
 801358e:	4681      	mov	r9, r0
 8013590:	2800      	cmp	r0, #0
 8013592:	f43f aef4 	beq.w	801337e <_strtod_l+0x43e>
 8013596:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013598:	691a      	ldr	r2, [r3, #16]
 801359a:	3202      	adds	r2, #2
 801359c:	f103 010c 	add.w	r1, r3, #12
 80135a0:	0092      	lsls	r2, r2, #2
 80135a2:	300c      	adds	r0, #12
 80135a4:	f7fe f899 	bl	80116da <memcpy>
 80135a8:	ec4b ab10 	vmov	d0, sl, fp
 80135ac:	9805      	ldr	r0, [sp, #20]
 80135ae:	aa1c      	add	r2, sp, #112	@ 0x70
 80135b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80135b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80135b6:	f7ff fbd7 	bl	8012d68 <__d2b>
 80135ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80135bc:	2800      	cmp	r0, #0
 80135be:	f43f aede 	beq.w	801337e <_strtod_l+0x43e>
 80135c2:	9805      	ldr	r0, [sp, #20]
 80135c4:	2101      	movs	r1, #1
 80135c6:	f7ff f929 	bl	801281c <__i2b>
 80135ca:	4680      	mov	r8, r0
 80135cc:	b948      	cbnz	r0, 80135e2 <_strtod_l+0x6a2>
 80135ce:	f04f 0800 	mov.w	r8, #0
 80135d2:	e6d4      	b.n	801337e <_strtod_l+0x43e>
 80135d4:	f04f 32ff 	mov.w	r2, #4294967295
 80135d8:	fa02 f303 	lsl.w	r3, r2, r3
 80135dc:	ea03 0a0a 	and.w	sl, r3, sl
 80135e0:	e7b0      	b.n	8013544 <_strtod_l+0x604>
 80135e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80135e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80135e6:	2d00      	cmp	r5, #0
 80135e8:	bfab      	itete	ge
 80135ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80135ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80135ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80135f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80135f2:	bfac      	ite	ge
 80135f4:	18ef      	addge	r7, r5, r3
 80135f6:	1b5e      	sublt	r6, r3, r5
 80135f8:	9b08      	ldr	r3, [sp, #32]
 80135fa:	1aed      	subs	r5, r5, r3
 80135fc:	4415      	add	r5, r2
 80135fe:	4b66      	ldr	r3, [pc, #408]	@ (8013798 <_strtod_l+0x858>)
 8013600:	3d01      	subs	r5, #1
 8013602:	429d      	cmp	r5, r3
 8013604:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013608:	da50      	bge.n	80136ac <_strtod_l+0x76c>
 801360a:	1b5b      	subs	r3, r3, r5
 801360c:	2b1f      	cmp	r3, #31
 801360e:	eba2 0203 	sub.w	r2, r2, r3
 8013612:	f04f 0101 	mov.w	r1, #1
 8013616:	dc3d      	bgt.n	8013694 <_strtod_l+0x754>
 8013618:	fa01 f303 	lsl.w	r3, r1, r3
 801361c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801361e:	2300      	movs	r3, #0
 8013620:	9310      	str	r3, [sp, #64]	@ 0x40
 8013622:	18bd      	adds	r5, r7, r2
 8013624:	9b08      	ldr	r3, [sp, #32]
 8013626:	42af      	cmp	r7, r5
 8013628:	4416      	add	r6, r2
 801362a:	441e      	add	r6, r3
 801362c:	463b      	mov	r3, r7
 801362e:	bfa8      	it	ge
 8013630:	462b      	movge	r3, r5
 8013632:	42b3      	cmp	r3, r6
 8013634:	bfa8      	it	ge
 8013636:	4633      	movge	r3, r6
 8013638:	2b00      	cmp	r3, #0
 801363a:	bfc2      	ittt	gt
 801363c:	1aed      	subgt	r5, r5, r3
 801363e:	1af6      	subgt	r6, r6, r3
 8013640:	1aff      	subgt	r7, r7, r3
 8013642:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013644:	2b00      	cmp	r3, #0
 8013646:	dd16      	ble.n	8013676 <_strtod_l+0x736>
 8013648:	4641      	mov	r1, r8
 801364a:	9805      	ldr	r0, [sp, #20]
 801364c:	461a      	mov	r2, r3
 801364e:	f7ff f9a5 	bl	801299c <__pow5mult>
 8013652:	4680      	mov	r8, r0
 8013654:	2800      	cmp	r0, #0
 8013656:	d0ba      	beq.n	80135ce <_strtod_l+0x68e>
 8013658:	4601      	mov	r1, r0
 801365a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801365c:	9805      	ldr	r0, [sp, #20]
 801365e:	f7ff f8f3 	bl	8012848 <__multiply>
 8013662:	900e      	str	r0, [sp, #56]	@ 0x38
 8013664:	2800      	cmp	r0, #0
 8013666:	f43f ae8a 	beq.w	801337e <_strtod_l+0x43e>
 801366a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801366c:	9805      	ldr	r0, [sp, #20]
 801366e:	f7fe ffd7 	bl	8012620 <_Bfree>
 8013672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013674:	931a      	str	r3, [sp, #104]	@ 0x68
 8013676:	2d00      	cmp	r5, #0
 8013678:	dc1d      	bgt.n	80136b6 <_strtod_l+0x776>
 801367a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801367c:	2b00      	cmp	r3, #0
 801367e:	dd23      	ble.n	80136c8 <_strtod_l+0x788>
 8013680:	4649      	mov	r1, r9
 8013682:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013684:	9805      	ldr	r0, [sp, #20]
 8013686:	f7ff f989 	bl	801299c <__pow5mult>
 801368a:	4681      	mov	r9, r0
 801368c:	b9e0      	cbnz	r0, 80136c8 <_strtod_l+0x788>
 801368e:	f04f 0900 	mov.w	r9, #0
 8013692:	e674      	b.n	801337e <_strtod_l+0x43e>
 8013694:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013698:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801369c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80136a0:	35e2      	adds	r5, #226	@ 0xe2
 80136a2:	fa01 f305 	lsl.w	r3, r1, r5
 80136a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80136a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80136aa:	e7ba      	b.n	8013622 <_strtod_l+0x6e2>
 80136ac:	2300      	movs	r3, #0
 80136ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80136b0:	2301      	movs	r3, #1
 80136b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80136b4:	e7b5      	b.n	8013622 <_strtod_l+0x6e2>
 80136b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80136b8:	9805      	ldr	r0, [sp, #20]
 80136ba:	462a      	mov	r2, r5
 80136bc:	f7ff f9c8 	bl	8012a50 <__lshift>
 80136c0:	901a      	str	r0, [sp, #104]	@ 0x68
 80136c2:	2800      	cmp	r0, #0
 80136c4:	d1d9      	bne.n	801367a <_strtod_l+0x73a>
 80136c6:	e65a      	b.n	801337e <_strtod_l+0x43e>
 80136c8:	2e00      	cmp	r6, #0
 80136ca:	dd07      	ble.n	80136dc <_strtod_l+0x79c>
 80136cc:	4649      	mov	r1, r9
 80136ce:	9805      	ldr	r0, [sp, #20]
 80136d0:	4632      	mov	r2, r6
 80136d2:	f7ff f9bd 	bl	8012a50 <__lshift>
 80136d6:	4681      	mov	r9, r0
 80136d8:	2800      	cmp	r0, #0
 80136da:	d0d8      	beq.n	801368e <_strtod_l+0x74e>
 80136dc:	2f00      	cmp	r7, #0
 80136de:	dd08      	ble.n	80136f2 <_strtod_l+0x7b2>
 80136e0:	4641      	mov	r1, r8
 80136e2:	9805      	ldr	r0, [sp, #20]
 80136e4:	463a      	mov	r2, r7
 80136e6:	f7ff f9b3 	bl	8012a50 <__lshift>
 80136ea:	4680      	mov	r8, r0
 80136ec:	2800      	cmp	r0, #0
 80136ee:	f43f ae46 	beq.w	801337e <_strtod_l+0x43e>
 80136f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80136f4:	9805      	ldr	r0, [sp, #20]
 80136f6:	464a      	mov	r2, r9
 80136f8:	f7ff fa32 	bl	8012b60 <__mdiff>
 80136fc:	4604      	mov	r4, r0
 80136fe:	2800      	cmp	r0, #0
 8013700:	f43f ae3d 	beq.w	801337e <_strtod_l+0x43e>
 8013704:	68c3      	ldr	r3, [r0, #12]
 8013706:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013708:	2300      	movs	r3, #0
 801370a:	60c3      	str	r3, [r0, #12]
 801370c:	4641      	mov	r1, r8
 801370e:	f7ff fa0b 	bl	8012b28 <__mcmp>
 8013712:	2800      	cmp	r0, #0
 8013714:	da46      	bge.n	80137a4 <_strtod_l+0x864>
 8013716:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013718:	ea53 030a 	orrs.w	r3, r3, sl
 801371c:	d16c      	bne.n	80137f8 <_strtod_l+0x8b8>
 801371e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013722:	2b00      	cmp	r3, #0
 8013724:	d168      	bne.n	80137f8 <_strtod_l+0x8b8>
 8013726:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801372a:	0d1b      	lsrs	r3, r3, #20
 801372c:	051b      	lsls	r3, r3, #20
 801372e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013732:	d961      	bls.n	80137f8 <_strtod_l+0x8b8>
 8013734:	6963      	ldr	r3, [r4, #20]
 8013736:	b913      	cbnz	r3, 801373e <_strtod_l+0x7fe>
 8013738:	6923      	ldr	r3, [r4, #16]
 801373a:	2b01      	cmp	r3, #1
 801373c:	dd5c      	ble.n	80137f8 <_strtod_l+0x8b8>
 801373e:	4621      	mov	r1, r4
 8013740:	2201      	movs	r2, #1
 8013742:	9805      	ldr	r0, [sp, #20]
 8013744:	f7ff f984 	bl	8012a50 <__lshift>
 8013748:	4641      	mov	r1, r8
 801374a:	4604      	mov	r4, r0
 801374c:	f7ff f9ec 	bl	8012b28 <__mcmp>
 8013750:	2800      	cmp	r0, #0
 8013752:	dd51      	ble.n	80137f8 <_strtod_l+0x8b8>
 8013754:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013758:	9a08      	ldr	r2, [sp, #32]
 801375a:	0d1b      	lsrs	r3, r3, #20
 801375c:	051b      	lsls	r3, r3, #20
 801375e:	2a00      	cmp	r2, #0
 8013760:	d06b      	beq.n	801383a <_strtod_l+0x8fa>
 8013762:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013766:	d868      	bhi.n	801383a <_strtod_l+0x8fa>
 8013768:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801376c:	f67f ae9d 	bls.w	80134aa <_strtod_l+0x56a>
 8013770:	4b0a      	ldr	r3, [pc, #40]	@ (801379c <_strtod_l+0x85c>)
 8013772:	4650      	mov	r0, sl
 8013774:	4659      	mov	r1, fp
 8013776:	2200      	movs	r2, #0
 8013778:	f7ec ff66 	bl	8000648 <__aeabi_dmul>
 801377c:	4b08      	ldr	r3, [pc, #32]	@ (80137a0 <_strtod_l+0x860>)
 801377e:	400b      	ands	r3, r1
 8013780:	4682      	mov	sl, r0
 8013782:	468b      	mov	fp, r1
 8013784:	2b00      	cmp	r3, #0
 8013786:	f47f ae05 	bne.w	8013394 <_strtod_l+0x454>
 801378a:	9a05      	ldr	r2, [sp, #20]
 801378c:	2322      	movs	r3, #34	@ 0x22
 801378e:	6013      	str	r3, [r2, #0]
 8013790:	e600      	b.n	8013394 <_strtod_l+0x454>
 8013792:	bf00      	nop
 8013794:	08016fb8 	.word	0x08016fb8
 8013798:	fffffc02 	.word	0xfffffc02
 801379c:	39500000 	.word	0x39500000
 80137a0:	7ff00000 	.word	0x7ff00000
 80137a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80137a8:	d165      	bne.n	8013876 <_strtod_l+0x936>
 80137aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80137ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80137b0:	b35a      	cbz	r2, 801380a <_strtod_l+0x8ca>
 80137b2:	4a9f      	ldr	r2, [pc, #636]	@ (8013a30 <_strtod_l+0xaf0>)
 80137b4:	4293      	cmp	r3, r2
 80137b6:	d12b      	bne.n	8013810 <_strtod_l+0x8d0>
 80137b8:	9b08      	ldr	r3, [sp, #32]
 80137ba:	4651      	mov	r1, sl
 80137bc:	b303      	cbz	r3, 8013800 <_strtod_l+0x8c0>
 80137be:	4b9d      	ldr	r3, [pc, #628]	@ (8013a34 <_strtod_l+0xaf4>)
 80137c0:	465a      	mov	r2, fp
 80137c2:	4013      	ands	r3, r2
 80137c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80137c8:	f04f 32ff 	mov.w	r2, #4294967295
 80137cc:	d81b      	bhi.n	8013806 <_strtod_l+0x8c6>
 80137ce:	0d1b      	lsrs	r3, r3, #20
 80137d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80137d4:	fa02 f303 	lsl.w	r3, r2, r3
 80137d8:	4299      	cmp	r1, r3
 80137da:	d119      	bne.n	8013810 <_strtod_l+0x8d0>
 80137dc:	4b96      	ldr	r3, [pc, #600]	@ (8013a38 <_strtod_l+0xaf8>)
 80137de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80137e0:	429a      	cmp	r2, r3
 80137e2:	d102      	bne.n	80137ea <_strtod_l+0x8aa>
 80137e4:	3101      	adds	r1, #1
 80137e6:	f43f adca 	beq.w	801337e <_strtod_l+0x43e>
 80137ea:	4b92      	ldr	r3, [pc, #584]	@ (8013a34 <_strtod_l+0xaf4>)
 80137ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80137ee:	401a      	ands	r2, r3
 80137f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80137f4:	f04f 0a00 	mov.w	sl, #0
 80137f8:	9b08      	ldr	r3, [sp, #32]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d1b8      	bne.n	8013770 <_strtod_l+0x830>
 80137fe:	e5c9      	b.n	8013394 <_strtod_l+0x454>
 8013800:	f04f 33ff 	mov.w	r3, #4294967295
 8013804:	e7e8      	b.n	80137d8 <_strtod_l+0x898>
 8013806:	4613      	mov	r3, r2
 8013808:	e7e6      	b.n	80137d8 <_strtod_l+0x898>
 801380a:	ea53 030a 	orrs.w	r3, r3, sl
 801380e:	d0a1      	beq.n	8013754 <_strtod_l+0x814>
 8013810:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013812:	b1db      	cbz	r3, 801384c <_strtod_l+0x90c>
 8013814:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013816:	4213      	tst	r3, r2
 8013818:	d0ee      	beq.n	80137f8 <_strtod_l+0x8b8>
 801381a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801381c:	9a08      	ldr	r2, [sp, #32]
 801381e:	4650      	mov	r0, sl
 8013820:	4659      	mov	r1, fp
 8013822:	b1bb      	cbz	r3, 8013854 <_strtod_l+0x914>
 8013824:	f7ff fb6e 	bl	8012f04 <sulp>
 8013828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801382c:	ec53 2b10 	vmov	r2, r3, d0
 8013830:	f7ec fd54 	bl	80002dc <__adddf3>
 8013834:	4682      	mov	sl, r0
 8013836:	468b      	mov	fp, r1
 8013838:	e7de      	b.n	80137f8 <_strtod_l+0x8b8>
 801383a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801383e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013842:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013846:	f04f 3aff 	mov.w	sl, #4294967295
 801384a:	e7d5      	b.n	80137f8 <_strtod_l+0x8b8>
 801384c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801384e:	ea13 0f0a 	tst.w	r3, sl
 8013852:	e7e1      	b.n	8013818 <_strtod_l+0x8d8>
 8013854:	f7ff fb56 	bl	8012f04 <sulp>
 8013858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801385c:	ec53 2b10 	vmov	r2, r3, d0
 8013860:	f7ec fd3a 	bl	80002d8 <__aeabi_dsub>
 8013864:	2200      	movs	r2, #0
 8013866:	2300      	movs	r3, #0
 8013868:	4682      	mov	sl, r0
 801386a:	468b      	mov	fp, r1
 801386c:	f7ed f954 	bl	8000b18 <__aeabi_dcmpeq>
 8013870:	2800      	cmp	r0, #0
 8013872:	d0c1      	beq.n	80137f8 <_strtod_l+0x8b8>
 8013874:	e619      	b.n	80134aa <_strtod_l+0x56a>
 8013876:	4641      	mov	r1, r8
 8013878:	4620      	mov	r0, r4
 801387a:	f7ff facd 	bl	8012e18 <__ratio>
 801387e:	ec57 6b10 	vmov	r6, r7, d0
 8013882:	2200      	movs	r2, #0
 8013884:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013888:	4630      	mov	r0, r6
 801388a:	4639      	mov	r1, r7
 801388c:	f7ed f958 	bl	8000b40 <__aeabi_dcmple>
 8013890:	2800      	cmp	r0, #0
 8013892:	d06f      	beq.n	8013974 <_strtod_l+0xa34>
 8013894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013896:	2b00      	cmp	r3, #0
 8013898:	d17a      	bne.n	8013990 <_strtod_l+0xa50>
 801389a:	f1ba 0f00 	cmp.w	sl, #0
 801389e:	d158      	bne.n	8013952 <_strtod_l+0xa12>
 80138a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d15a      	bne.n	8013960 <_strtod_l+0xa20>
 80138aa:	4b64      	ldr	r3, [pc, #400]	@ (8013a3c <_strtod_l+0xafc>)
 80138ac:	2200      	movs	r2, #0
 80138ae:	4630      	mov	r0, r6
 80138b0:	4639      	mov	r1, r7
 80138b2:	f7ed f93b 	bl	8000b2c <__aeabi_dcmplt>
 80138b6:	2800      	cmp	r0, #0
 80138b8:	d159      	bne.n	801396e <_strtod_l+0xa2e>
 80138ba:	4630      	mov	r0, r6
 80138bc:	4639      	mov	r1, r7
 80138be:	4b60      	ldr	r3, [pc, #384]	@ (8013a40 <_strtod_l+0xb00>)
 80138c0:	2200      	movs	r2, #0
 80138c2:	f7ec fec1 	bl	8000648 <__aeabi_dmul>
 80138c6:	4606      	mov	r6, r0
 80138c8:	460f      	mov	r7, r1
 80138ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80138ce:	9606      	str	r6, [sp, #24]
 80138d0:	9307      	str	r3, [sp, #28]
 80138d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80138d6:	4d57      	ldr	r5, [pc, #348]	@ (8013a34 <_strtod_l+0xaf4>)
 80138d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80138dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138de:	401d      	ands	r5, r3
 80138e0:	4b58      	ldr	r3, [pc, #352]	@ (8013a44 <_strtod_l+0xb04>)
 80138e2:	429d      	cmp	r5, r3
 80138e4:	f040 80b2 	bne.w	8013a4c <_strtod_l+0xb0c>
 80138e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80138ee:	ec4b ab10 	vmov	d0, sl, fp
 80138f2:	f7ff f9c9 	bl	8012c88 <__ulp>
 80138f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80138fa:	ec51 0b10 	vmov	r0, r1, d0
 80138fe:	f7ec fea3 	bl	8000648 <__aeabi_dmul>
 8013902:	4652      	mov	r2, sl
 8013904:	465b      	mov	r3, fp
 8013906:	f7ec fce9 	bl	80002dc <__adddf3>
 801390a:	460b      	mov	r3, r1
 801390c:	4949      	ldr	r1, [pc, #292]	@ (8013a34 <_strtod_l+0xaf4>)
 801390e:	4a4e      	ldr	r2, [pc, #312]	@ (8013a48 <_strtod_l+0xb08>)
 8013910:	4019      	ands	r1, r3
 8013912:	4291      	cmp	r1, r2
 8013914:	4682      	mov	sl, r0
 8013916:	d942      	bls.n	801399e <_strtod_l+0xa5e>
 8013918:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801391a:	4b47      	ldr	r3, [pc, #284]	@ (8013a38 <_strtod_l+0xaf8>)
 801391c:	429a      	cmp	r2, r3
 801391e:	d103      	bne.n	8013928 <_strtod_l+0x9e8>
 8013920:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013922:	3301      	adds	r3, #1
 8013924:	f43f ad2b 	beq.w	801337e <_strtod_l+0x43e>
 8013928:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013a38 <_strtod_l+0xaf8>
 801392c:	f04f 3aff 	mov.w	sl, #4294967295
 8013930:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013932:	9805      	ldr	r0, [sp, #20]
 8013934:	f7fe fe74 	bl	8012620 <_Bfree>
 8013938:	9805      	ldr	r0, [sp, #20]
 801393a:	4649      	mov	r1, r9
 801393c:	f7fe fe70 	bl	8012620 <_Bfree>
 8013940:	9805      	ldr	r0, [sp, #20]
 8013942:	4641      	mov	r1, r8
 8013944:	f7fe fe6c 	bl	8012620 <_Bfree>
 8013948:	9805      	ldr	r0, [sp, #20]
 801394a:	4621      	mov	r1, r4
 801394c:	f7fe fe68 	bl	8012620 <_Bfree>
 8013950:	e618      	b.n	8013584 <_strtod_l+0x644>
 8013952:	f1ba 0f01 	cmp.w	sl, #1
 8013956:	d103      	bne.n	8013960 <_strtod_l+0xa20>
 8013958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801395a:	2b00      	cmp	r3, #0
 801395c:	f43f ada5 	beq.w	80134aa <_strtod_l+0x56a>
 8013960:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8013a10 <_strtod_l+0xad0>
 8013964:	4f35      	ldr	r7, [pc, #212]	@ (8013a3c <_strtod_l+0xafc>)
 8013966:	ed8d 7b06 	vstr	d7, [sp, #24]
 801396a:	2600      	movs	r6, #0
 801396c:	e7b1      	b.n	80138d2 <_strtod_l+0x992>
 801396e:	4f34      	ldr	r7, [pc, #208]	@ (8013a40 <_strtod_l+0xb00>)
 8013970:	2600      	movs	r6, #0
 8013972:	e7aa      	b.n	80138ca <_strtod_l+0x98a>
 8013974:	4b32      	ldr	r3, [pc, #200]	@ (8013a40 <_strtod_l+0xb00>)
 8013976:	4630      	mov	r0, r6
 8013978:	4639      	mov	r1, r7
 801397a:	2200      	movs	r2, #0
 801397c:	f7ec fe64 	bl	8000648 <__aeabi_dmul>
 8013980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013982:	4606      	mov	r6, r0
 8013984:	460f      	mov	r7, r1
 8013986:	2b00      	cmp	r3, #0
 8013988:	d09f      	beq.n	80138ca <_strtod_l+0x98a>
 801398a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801398e:	e7a0      	b.n	80138d2 <_strtod_l+0x992>
 8013990:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013a18 <_strtod_l+0xad8>
 8013994:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013998:	ec57 6b17 	vmov	r6, r7, d7
 801399c:	e799      	b.n	80138d2 <_strtod_l+0x992>
 801399e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80139a2:	9b08      	ldr	r3, [sp, #32]
 80139a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d1c1      	bne.n	8013930 <_strtod_l+0x9f0>
 80139ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80139b0:	0d1b      	lsrs	r3, r3, #20
 80139b2:	051b      	lsls	r3, r3, #20
 80139b4:	429d      	cmp	r5, r3
 80139b6:	d1bb      	bne.n	8013930 <_strtod_l+0x9f0>
 80139b8:	4630      	mov	r0, r6
 80139ba:	4639      	mov	r1, r7
 80139bc:	f7ed f9a4 	bl	8000d08 <__aeabi_d2lz>
 80139c0:	f7ec fe14 	bl	80005ec <__aeabi_l2d>
 80139c4:	4602      	mov	r2, r0
 80139c6:	460b      	mov	r3, r1
 80139c8:	4630      	mov	r0, r6
 80139ca:	4639      	mov	r1, r7
 80139cc:	f7ec fc84 	bl	80002d8 <__aeabi_dsub>
 80139d0:	460b      	mov	r3, r1
 80139d2:	4602      	mov	r2, r0
 80139d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80139d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80139dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139de:	ea46 060a 	orr.w	r6, r6, sl
 80139e2:	431e      	orrs	r6, r3
 80139e4:	d06f      	beq.n	8013ac6 <_strtod_l+0xb86>
 80139e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8013a20 <_strtod_l+0xae0>)
 80139e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ec:	f7ed f89e 	bl	8000b2c <__aeabi_dcmplt>
 80139f0:	2800      	cmp	r0, #0
 80139f2:	f47f accf 	bne.w	8013394 <_strtod_l+0x454>
 80139f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8013a28 <_strtod_l+0xae8>)
 80139f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013a00:	f7ed f8b2 	bl	8000b68 <__aeabi_dcmpgt>
 8013a04:	2800      	cmp	r0, #0
 8013a06:	d093      	beq.n	8013930 <_strtod_l+0x9f0>
 8013a08:	e4c4      	b.n	8013394 <_strtod_l+0x454>
 8013a0a:	bf00      	nop
 8013a0c:	f3af 8000 	nop.w
 8013a10:	00000000 	.word	0x00000000
 8013a14:	bff00000 	.word	0xbff00000
 8013a18:	00000000 	.word	0x00000000
 8013a1c:	3ff00000 	.word	0x3ff00000
 8013a20:	94a03595 	.word	0x94a03595
 8013a24:	3fdfffff 	.word	0x3fdfffff
 8013a28:	35afe535 	.word	0x35afe535
 8013a2c:	3fe00000 	.word	0x3fe00000
 8013a30:	000fffff 	.word	0x000fffff
 8013a34:	7ff00000 	.word	0x7ff00000
 8013a38:	7fefffff 	.word	0x7fefffff
 8013a3c:	3ff00000 	.word	0x3ff00000
 8013a40:	3fe00000 	.word	0x3fe00000
 8013a44:	7fe00000 	.word	0x7fe00000
 8013a48:	7c9fffff 	.word	0x7c9fffff
 8013a4c:	9b08      	ldr	r3, [sp, #32]
 8013a4e:	b323      	cbz	r3, 8013a9a <_strtod_l+0xb5a>
 8013a50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013a54:	d821      	bhi.n	8013a9a <_strtod_l+0xb5a>
 8013a56:	a328      	add	r3, pc, #160	@ (adr r3, 8013af8 <_strtod_l+0xbb8>)
 8013a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a5c:	4630      	mov	r0, r6
 8013a5e:	4639      	mov	r1, r7
 8013a60:	f7ed f86e 	bl	8000b40 <__aeabi_dcmple>
 8013a64:	b1a0      	cbz	r0, 8013a90 <_strtod_l+0xb50>
 8013a66:	4639      	mov	r1, r7
 8013a68:	4630      	mov	r0, r6
 8013a6a:	f7ed f8c5 	bl	8000bf8 <__aeabi_d2uiz>
 8013a6e:	2801      	cmp	r0, #1
 8013a70:	bf38      	it	cc
 8013a72:	2001      	movcc	r0, #1
 8013a74:	f7ec fd6e 	bl	8000554 <__aeabi_ui2d>
 8013a78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a7a:	4606      	mov	r6, r0
 8013a7c:	460f      	mov	r7, r1
 8013a7e:	b9fb      	cbnz	r3, 8013ac0 <_strtod_l+0xb80>
 8013a80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013a84:	9014      	str	r0, [sp, #80]	@ 0x50
 8013a86:	9315      	str	r3, [sp, #84]	@ 0x54
 8013a88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013a8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013a90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013a92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013a96:	1b5b      	subs	r3, r3, r5
 8013a98:	9311      	str	r3, [sp, #68]	@ 0x44
 8013a9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013a9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013aa2:	f7ff f8f1 	bl	8012c88 <__ulp>
 8013aa6:	4650      	mov	r0, sl
 8013aa8:	ec53 2b10 	vmov	r2, r3, d0
 8013aac:	4659      	mov	r1, fp
 8013aae:	f7ec fdcb 	bl	8000648 <__aeabi_dmul>
 8013ab2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013ab6:	f7ec fc11 	bl	80002dc <__adddf3>
 8013aba:	4682      	mov	sl, r0
 8013abc:	468b      	mov	fp, r1
 8013abe:	e770      	b.n	80139a2 <_strtod_l+0xa62>
 8013ac0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013ac4:	e7e0      	b.n	8013a88 <_strtod_l+0xb48>
 8013ac6:	a30e      	add	r3, pc, #56	@ (adr r3, 8013b00 <_strtod_l+0xbc0>)
 8013ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013acc:	f7ed f82e 	bl	8000b2c <__aeabi_dcmplt>
 8013ad0:	e798      	b.n	8013a04 <_strtod_l+0xac4>
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ad6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013ad8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013ada:	6013      	str	r3, [r2, #0]
 8013adc:	f7ff ba6d 	b.w	8012fba <_strtod_l+0x7a>
 8013ae0:	2a65      	cmp	r2, #101	@ 0x65
 8013ae2:	f43f ab66 	beq.w	80131b2 <_strtod_l+0x272>
 8013ae6:	2a45      	cmp	r2, #69	@ 0x45
 8013ae8:	f43f ab63 	beq.w	80131b2 <_strtod_l+0x272>
 8013aec:	2301      	movs	r3, #1
 8013aee:	f7ff bb9e 	b.w	801322e <_strtod_l+0x2ee>
 8013af2:	bf00      	nop
 8013af4:	f3af 8000 	nop.w
 8013af8:	ffc00000 	.word	0xffc00000
 8013afc:	41dfffff 	.word	0x41dfffff
 8013b00:	94a03595 	.word	0x94a03595
 8013b04:	3fcfffff 	.word	0x3fcfffff

08013b08 <_strtod_r>:
 8013b08:	4b01      	ldr	r3, [pc, #4]	@ (8013b10 <_strtod_r+0x8>)
 8013b0a:	f7ff ba19 	b.w	8012f40 <_strtod_l>
 8013b0e:	bf00      	nop
 8013b10:	20000204 	.word	0x20000204

08013b14 <_strtol_l.constprop.0>:
 8013b14:	2b24      	cmp	r3, #36	@ 0x24
 8013b16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b1a:	4686      	mov	lr, r0
 8013b1c:	4690      	mov	r8, r2
 8013b1e:	d801      	bhi.n	8013b24 <_strtol_l.constprop.0+0x10>
 8013b20:	2b01      	cmp	r3, #1
 8013b22:	d106      	bne.n	8013b32 <_strtol_l.constprop.0+0x1e>
 8013b24:	f7fd fdac 	bl	8011680 <__errno>
 8013b28:	2316      	movs	r3, #22
 8013b2a:	6003      	str	r3, [r0, #0]
 8013b2c:	2000      	movs	r0, #0
 8013b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b32:	4834      	ldr	r0, [pc, #208]	@ (8013c04 <_strtol_l.constprop.0+0xf0>)
 8013b34:	460d      	mov	r5, r1
 8013b36:	462a      	mov	r2, r5
 8013b38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013b3c:	5d06      	ldrb	r6, [r0, r4]
 8013b3e:	f016 0608 	ands.w	r6, r6, #8
 8013b42:	d1f8      	bne.n	8013b36 <_strtol_l.constprop.0+0x22>
 8013b44:	2c2d      	cmp	r4, #45	@ 0x2d
 8013b46:	d12d      	bne.n	8013ba4 <_strtol_l.constprop.0+0x90>
 8013b48:	782c      	ldrb	r4, [r5, #0]
 8013b4a:	2601      	movs	r6, #1
 8013b4c:	1c95      	adds	r5, r2, #2
 8013b4e:	f033 0210 	bics.w	r2, r3, #16
 8013b52:	d109      	bne.n	8013b68 <_strtol_l.constprop.0+0x54>
 8013b54:	2c30      	cmp	r4, #48	@ 0x30
 8013b56:	d12a      	bne.n	8013bae <_strtol_l.constprop.0+0x9a>
 8013b58:	782a      	ldrb	r2, [r5, #0]
 8013b5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013b5e:	2a58      	cmp	r2, #88	@ 0x58
 8013b60:	d125      	bne.n	8013bae <_strtol_l.constprop.0+0x9a>
 8013b62:	786c      	ldrb	r4, [r5, #1]
 8013b64:	2310      	movs	r3, #16
 8013b66:	3502      	adds	r5, #2
 8013b68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013b6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013b70:	2200      	movs	r2, #0
 8013b72:	fbbc f9f3 	udiv	r9, ip, r3
 8013b76:	4610      	mov	r0, r2
 8013b78:	fb03 ca19 	mls	sl, r3, r9, ip
 8013b7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013b80:	2f09      	cmp	r7, #9
 8013b82:	d81b      	bhi.n	8013bbc <_strtol_l.constprop.0+0xa8>
 8013b84:	463c      	mov	r4, r7
 8013b86:	42a3      	cmp	r3, r4
 8013b88:	dd27      	ble.n	8013bda <_strtol_l.constprop.0+0xc6>
 8013b8a:	1c57      	adds	r7, r2, #1
 8013b8c:	d007      	beq.n	8013b9e <_strtol_l.constprop.0+0x8a>
 8013b8e:	4581      	cmp	r9, r0
 8013b90:	d320      	bcc.n	8013bd4 <_strtol_l.constprop.0+0xc0>
 8013b92:	d101      	bne.n	8013b98 <_strtol_l.constprop.0+0x84>
 8013b94:	45a2      	cmp	sl, r4
 8013b96:	db1d      	blt.n	8013bd4 <_strtol_l.constprop.0+0xc0>
 8013b98:	fb00 4003 	mla	r0, r0, r3, r4
 8013b9c:	2201      	movs	r2, #1
 8013b9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013ba2:	e7eb      	b.n	8013b7c <_strtol_l.constprop.0+0x68>
 8013ba4:	2c2b      	cmp	r4, #43	@ 0x2b
 8013ba6:	bf04      	itt	eq
 8013ba8:	782c      	ldrbeq	r4, [r5, #0]
 8013baa:	1c95      	addeq	r5, r2, #2
 8013bac:	e7cf      	b.n	8013b4e <_strtol_l.constprop.0+0x3a>
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d1da      	bne.n	8013b68 <_strtol_l.constprop.0+0x54>
 8013bb2:	2c30      	cmp	r4, #48	@ 0x30
 8013bb4:	bf0c      	ite	eq
 8013bb6:	2308      	moveq	r3, #8
 8013bb8:	230a      	movne	r3, #10
 8013bba:	e7d5      	b.n	8013b68 <_strtol_l.constprop.0+0x54>
 8013bbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013bc0:	2f19      	cmp	r7, #25
 8013bc2:	d801      	bhi.n	8013bc8 <_strtol_l.constprop.0+0xb4>
 8013bc4:	3c37      	subs	r4, #55	@ 0x37
 8013bc6:	e7de      	b.n	8013b86 <_strtol_l.constprop.0+0x72>
 8013bc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013bcc:	2f19      	cmp	r7, #25
 8013bce:	d804      	bhi.n	8013bda <_strtol_l.constprop.0+0xc6>
 8013bd0:	3c57      	subs	r4, #87	@ 0x57
 8013bd2:	e7d8      	b.n	8013b86 <_strtol_l.constprop.0+0x72>
 8013bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8013bd8:	e7e1      	b.n	8013b9e <_strtol_l.constprop.0+0x8a>
 8013bda:	1c53      	adds	r3, r2, #1
 8013bdc:	d108      	bne.n	8013bf0 <_strtol_l.constprop.0+0xdc>
 8013bde:	2322      	movs	r3, #34	@ 0x22
 8013be0:	f8ce 3000 	str.w	r3, [lr]
 8013be4:	4660      	mov	r0, ip
 8013be6:	f1b8 0f00 	cmp.w	r8, #0
 8013bea:	d0a0      	beq.n	8013b2e <_strtol_l.constprop.0+0x1a>
 8013bec:	1e69      	subs	r1, r5, #1
 8013bee:	e006      	b.n	8013bfe <_strtol_l.constprop.0+0xea>
 8013bf0:	b106      	cbz	r6, 8013bf4 <_strtol_l.constprop.0+0xe0>
 8013bf2:	4240      	negs	r0, r0
 8013bf4:	f1b8 0f00 	cmp.w	r8, #0
 8013bf8:	d099      	beq.n	8013b2e <_strtol_l.constprop.0+0x1a>
 8013bfa:	2a00      	cmp	r2, #0
 8013bfc:	d1f6      	bne.n	8013bec <_strtol_l.constprop.0+0xd8>
 8013bfe:	f8c8 1000 	str.w	r1, [r8]
 8013c02:	e794      	b.n	8013b2e <_strtol_l.constprop.0+0x1a>
 8013c04:	08016fe1 	.word	0x08016fe1

08013c08 <_strtol_r>:
 8013c08:	f7ff bf84 	b.w	8013b14 <_strtol_l.constprop.0>

08013c0c <__ssputs_r>:
 8013c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c10:	688e      	ldr	r6, [r1, #8]
 8013c12:	461f      	mov	r7, r3
 8013c14:	42be      	cmp	r6, r7
 8013c16:	680b      	ldr	r3, [r1, #0]
 8013c18:	4682      	mov	sl, r0
 8013c1a:	460c      	mov	r4, r1
 8013c1c:	4690      	mov	r8, r2
 8013c1e:	d82d      	bhi.n	8013c7c <__ssputs_r+0x70>
 8013c20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013c24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013c28:	d026      	beq.n	8013c78 <__ssputs_r+0x6c>
 8013c2a:	6965      	ldr	r5, [r4, #20]
 8013c2c:	6909      	ldr	r1, [r1, #16]
 8013c2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c32:	eba3 0901 	sub.w	r9, r3, r1
 8013c36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013c3a:	1c7b      	adds	r3, r7, #1
 8013c3c:	444b      	add	r3, r9
 8013c3e:	106d      	asrs	r5, r5, #1
 8013c40:	429d      	cmp	r5, r3
 8013c42:	bf38      	it	cc
 8013c44:	461d      	movcc	r5, r3
 8013c46:	0553      	lsls	r3, r2, #21
 8013c48:	d527      	bpl.n	8013c9a <__ssputs_r+0x8e>
 8013c4a:	4629      	mov	r1, r5
 8013c4c:	f7fe fc1c 	bl	8012488 <_malloc_r>
 8013c50:	4606      	mov	r6, r0
 8013c52:	b360      	cbz	r0, 8013cae <__ssputs_r+0xa2>
 8013c54:	6921      	ldr	r1, [r4, #16]
 8013c56:	464a      	mov	r2, r9
 8013c58:	f7fd fd3f 	bl	80116da <memcpy>
 8013c5c:	89a3      	ldrh	r3, [r4, #12]
 8013c5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c66:	81a3      	strh	r3, [r4, #12]
 8013c68:	6126      	str	r6, [r4, #16]
 8013c6a:	6165      	str	r5, [r4, #20]
 8013c6c:	444e      	add	r6, r9
 8013c6e:	eba5 0509 	sub.w	r5, r5, r9
 8013c72:	6026      	str	r6, [r4, #0]
 8013c74:	60a5      	str	r5, [r4, #8]
 8013c76:	463e      	mov	r6, r7
 8013c78:	42be      	cmp	r6, r7
 8013c7a:	d900      	bls.n	8013c7e <__ssputs_r+0x72>
 8013c7c:	463e      	mov	r6, r7
 8013c7e:	6820      	ldr	r0, [r4, #0]
 8013c80:	4632      	mov	r2, r6
 8013c82:	4641      	mov	r1, r8
 8013c84:	f000 fd53 	bl	801472e <memmove>
 8013c88:	68a3      	ldr	r3, [r4, #8]
 8013c8a:	1b9b      	subs	r3, r3, r6
 8013c8c:	60a3      	str	r3, [r4, #8]
 8013c8e:	6823      	ldr	r3, [r4, #0]
 8013c90:	4433      	add	r3, r6
 8013c92:	6023      	str	r3, [r4, #0]
 8013c94:	2000      	movs	r0, #0
 8013c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c9a:	462a      	mov	r2, r5
 8013c9c:	f001 f8f9 	bl	8014e92 <_realloc_r>
 8013ca0:	4606      	mov	r6, r0
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	d1e0      	bne.n	8013c68 <__ssputs_r+0x5c>
 8013ca6:	6921      	ldr	r1, [r4, #16]
 8013ca8:	4650      	mov	r0, sl
 8013caa:	f7fe fb79 	bl	80123a0 <_free_r>
 8013cae:	230c      	movs	r3, #12
 8013cb0:	f8ca 3000 	str.w	r3, [sl]
 8013cb4:	89a3      	ldrh	r3, [r4, #12]
 8013cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cba:	81a3      	strh	r3, [r4, #12]
 8013cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8013cc0:	e7e9      	b.n	8013c96 <__ssputs_r+0x8a>
	...

08013cc4 <_svfiprintf_r>:
 8013cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cc8:	4698      	mov	r8, r3
 8013cca:	898b      	ldrh	r3, [r1, #12]
 8013ccc:	061b      	lsls	r3, r3, #24
 8013cce:	b09d      	sub	sp, #116	@ 0x74
 8013cd0:	4607      	mov	r7, r0
 8013cd2:	460d      	mov	r5, r1
 8013cd4:	4614      	mov	r4, r2
 8013cd6:	d510      	bpl.n	8013cfa <_svfiprintf_r+0x36>
 8013cd8:	690b      	ldr	r3, [r1, #16]
 8013cda:	b973      	cbnz	r3, 8013cfa <_svfiprintf_r+0x36>
 8013cdc:	2140      	movs	r1, #64	@ 0x40
 8013cde:	f7fe fbd3 	bl	8012488 <_malloc_r>
 8013ce2:	6028      	str	r0, [r5, #0]
 8013ce4:	6128      	str	r0, [r5, #16]
 8013ce6:	b930      	cbnz	r0, 8013cf6 <_svfiprintf_r+0x32>
 8013ce8:	230c      	movs	r3, #12
 8013cea:	603b      	str	r3, [r7, #0]
 8013cec:	f04f 30ff 	mov.w	r0, #4294967295
 8013cf0:	b01d      	add	sp, #116	@ 0x74
 8013cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cf6:	2340      	movs	r3, #64	@ 0x40
 8013cf8:	616b      	str	r3, [r5, #20]
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8013cfe:	2320      	movs	r3, #32
 8013d00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d08:	2330      	movs	r3, #48	@ 0x30
 8013d0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013ea8 <_svfiprintf_r+0x1e4>
 8013d0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013d12:	f04f 0901 	mov.w	r9, #1
 8013d16:	4623      	mov	r3, r4
 8013d18:	469a      	mov	sl, r3
 8013d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d1e:	b10a      	cbz	r2, 8013d24 <_svfiprintf_r+0x60>
 8013d20:	2a25      	cmp	r2, #37	@ 0x25
 8013d22:	d1f9      	bne.n	8013d18 <_svfiprintf_r+0x54>
 8013d24:	ebba 0b04 	subs.w	fp, sl, r4
 8013d28:	d00b      	beq.n	8013d42 <_svfiprintf_r+0x7e>
 8013d2a:	465b      	mov	r3, fp
 8013d2c:	4622      	mov	r2, r4
 8013d2e:	4629      	mov	r1, r5
 8013d30:	4638      	mov	r0, r7
 8013d32:	f7ff ff6b 	bl	8013c0c <__ssputs_r>
 8013d36:	3001      	adds	r0, #1
 8013d38:	f000 80a7 	beq.w	8013e8a <_svfiprintf_r+0x1c6>
 8013d3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d3e:	445a      	add	r2, fp
 8013d40:	9209      	str	r2, [sp, #36]	@ 0x24
 8013d42:	f89a 3000 	ldrb.w	r3, [sl]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	f000 809f 	beq.w	8013e8a <_svfiprintf_r+0x1c6>
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8013d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d56:	f10a 0a01 	add.w	sl, sl, #1
 8013d5a:	9304      	str	r3, [sp, #16]
 8013d5c:	9307      	str	r3, [sp, #28]
 8013d5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013d62:	931a      	str	r3, [sp, #104]	@ 0x68
 8013d64:	4654      	mov	r4, sl
 8013d66:	2205      	movs	r2, #5
 8013d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d6c:	484e      	ldr	r0, [pc, #312]	@ (8013ea8 <_svfiprintf_r+0x1e4>)
 8013d6e:	f7ec fa57 	bl	8000220 <memchr>
 8013d72:	9a04      	ldr	r2, [sp, #16]
 8013d74:	b9d8      	cbnz	r0, 8013dae <_svfiprintf_r+0xea>
 8013d76:	06d0      	lsls	r0, r2, #27
 8013d78:	bf44      	itt	mi
 8013d7a:	2320      	movmi	r3, #32
 8013d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013d80:	0711      	lsls	r1, r2, #28
 8013d82:	bf44      	itt	mi
 8013d84:	232b      	movmi	r3, #43	@ 0x2b
 8013d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8013d8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013d90:	d015      	beq.n	8013dbe <_svfiprintf_r+0xfa>
 8013d92:	9a07      	ldr	r2, [sp, #28]
 8013d94:	4654      	mov	r4, sl
 8013d96:	2000      	movs	r0, #0
 8013d98:	f04f 0c0a 	mov.w	ip, #10
 8013d9c:	4621      	mov	r1, r4
 8013d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013da2:	3b30      	subs	r3, #48	@ 0x30
 8013da4:	2b09      	cmp	r3, #9
 8013da6:	d94b      	bls.n	8013e40 <_svfiprintf_r+0x17c>
 8013da8:	b1b0      	cbz	r0, 8013dd8 <_svfiprintf_r+0x114>
 8013daa:	9207      	str	r2, [sp, #28]
 8013dac:	e014      	b.n	8013dd8 <_svfiprintf_r+0x114>
 8013dae:	eba0 0308 	sub.w	r3, r0, r8
 8013db2:	fa09 f303 	lsl.w	r3, r9, r3
 8013db6:	4313      	orrs	r3, r2
 8013db8:	9304      	str	r3, [sp, #16]
 8013dba:	46a2      	mov	sl, r4
 8013dbc:	e7d2      	b.n	8013d64 <_svfiprintf_r+0xa0>
 8013dbe:	9b03      	ldr	r3, [sp, #12]
 8013dc0:	1d19      	adds	r1, r3, #4
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	9103      	str	r1, [sp, #12]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	bfbb      	ittet	lt
 8013dca:	425b      	neglt	r3, r3
 8013dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8013dd0:	9307      	strge	r3, [sp, #28]
 8013dd2:	9307      	strlt	r3, [sp, #28]
 8013dd4:	bfb8      	it	lt
 8013dd6:	9204      	strlt	r2, [sp, #16]
 8013dd8:	7823      	ldrb	r3, [r4, #0]
 8013dda:	2b2e      	cmp	r3, #46	@ 0x2e
 8013ddc:	d10a      	bne.n	8013df4 <_svfiprintf_r+0x130>
 8013dde:	7863      	ldrb	r3, [r4, #1]
 8013de0:	2b2a      	cmp	r3, #42	@ 0x2a
 8013de2:	d132      	bne.n	8013e4a <_svfiprintf_r+0x186>
 8013de4:	9b03      	ldr	r3, [sp, #12]
 8013de6:	1d1a      	adds	r2, r3, #4
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	9203      	str	r2, [sp, #12]
 8013dec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013df0:	3402      	adds	r4, #2
 8013df2:	9305      	str	r3, [sp, #20]
 8013df4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013eb8 <_svfiprintf_r+0x1f4>
 8013df8:	7821      	ldrb	r1, [r4, #0]
 8013dfa:	2203      	movs	r2, #3
 8013dfc:	4650      	mov	r0, sl
 8013dfe:	f7ec fa0f 	bl	8000220 <memchr>
 8013e02:	b138      	cbz	r0, 8013e14 <_svfiprintf_r+0x150>
 8013e04:	9b04      	ldr	r3, [sp, #16]
 8013e06:	eba0 000a 	sub.w	r0, r0, sl
 8013e0a:	2240      	movs	r2, #64	@ 0x40
 8013e0c:	4082      	lsls	r2, r0
 8013e0e:	4313      	orrs	r3, r2
 8013e10:	3401      	adds	r4, #1
 8013e12:	9304      	str	r3, [sp, #16]
 8013e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e18:	4824      	ldr	r0, [pc, #144]	@ (8013eac <_svfiprintf_r+0x1e8>)
 8013e1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013e1e:	2206      	movs	r2, #6
 8013e20:	f7ec f9fe 	bl	8000220 <memchr>
 8013e24:	2800      	cmp	r0, #0
 8013e26:	d036      	beq.n	8013e96 <_svfiprintf_r+0x1d2>
 8013e28:	4b21      	ldr	r3, [pc, #132]	@ (8013eb0 <_svfiprintf_r+0x1ec>)
 8013e2a:	bb1b      	cbnz	r3, 8013e74 <_svfiprintf_r+0x1b0>
 8013e2c:	9b03      	ldr	r3, [sp, #12]
 8013e2e:	3307      	adds	r3, #7
 8013e30:	f023 0307 	bic.w	r3, r3, #7
 8013e34:	3308      	adds	r3, #8
 8013e36:	9303      	str	r3, [sp, #12]
 8013e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e3a:	4433      	add	r3, r6
 8013e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e3e:	e76a      	b.n	8013d16 <_svfiprintf_r+0x52>
 8013e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e44:	460c      	mov	r4, r1
 8013e46:	2001      	movs	r0, #1
 8013e48:	e7a8      	b.n	8013d9c <_svfiprintf_r+0xd8>
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	3401      	adds	r4, #1
 8013e4e:	9305      	str	r3, [sp, #20]
 8013e50:	4619      	mov	r1, r3
 8013e52:	f04f 0c0a 	mov.w	ip, #10
 8013e56:	4620      	mov	r0, r4
 8013e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e5c:	3a30      	subs	r2, #48	@ 0x30
 8013e5e:	2a09      	cmp	r2, #9
 8013e60:	d903      	bls.n	8013e6a <_svfiprintf_r+0x1a6>
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d0c6      	beq.n	8013df4 <_svfiprintf_r+0x130>
 8013e66:	9105      	str	r1, [sp, #20]
 8013e68:	e7c4      	b.n	8013df4 <_svfiprintf_r+0x130>
 8013e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013e6e:	4604      	mov	r4, r0
 8013e70:	2301      	movs	r3, #1
 8013e72:	e7f0      	b.n	8013e56 <_svfiprintf_r+0x192>
 8013e74:	ab03      	add	r3, sp, #12
 8013e76:	9300      	str	r3, [sp, #0]
 8013e78:	462a      	mov	r2, r5
 8013e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8013eb4 <_svfiprintf_r+0x1f0>)
 8013e7c:	a904      	add	r1, sp, #16
 8013e7e:	4638      	mov	r0, r7
 8013e80:	f7fc fc7c 	bl	801077c <_printf_float>
 8013e84:	1c42      	adds	r2, r0, #1
 8013e86:	4606      	mov	r6, r0
 8013e88:	d1d6      	bne.n	8013e38 <_svfiprintf_r+0x174>
 8013e8a:	89ab      	ldrh	r3, [r5, #12]
 8013e8c:	065b      	lsls	r3, r3, #25
 8013e8e:	f53f af2d 	bmi.w	8013cec <_svfiprintf_r+0x28>
 8013e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013e94:	e72c      	b.n	8013cf0 <_svfiprintf_r+0x2c>
 8013e96:	ab03      	add	r3, sp, #12
 8013e98:	9300      	str	r3, [sp, #0]
 8013e9a:	462a      	mov	r2, r5
 8013e9c:	4b05      	ldr	r3, [pc, #20]	@ (8013eb4 <_svfiprintf_r+0x1f0>)
 8013e9e:	a904      	add	r1, sp, #16
 8013ea0:	4638      	mov	r0, r7
 8013ea2:	f7fc ff03 	bl	8010cac <_printf_i>
 8013ea6:	e7ed      	b.n	8013e84 <_svfiprintf_r+0x1c0>
 8013ea8:	080170e1 	.word	0x080170e1
 8013eac:	080170eb 	.word	0x080170eb
 8013eb0:	0801077d 	.word	0x0801077d
 8013eb4:	08013c0d 	.word	0x08013c0d
 8013eb8:	080170e7 	.word	0x080170e7

08013ebc <_sungetc_r>:
 8013ebc:	b538      	push	{r3, r4, r5, lr}
 8013ebe:	1c4b      	adds	r3, r1, #1
 8013ec0:	4614      	mov	r4, r2
 8013ec2:	d103      	bne.n	8013ecc <_sungetc_r+0x10>
 8013ec4:	f04f 35ff 	mov.w	r5, #4294967295
 8013ec8:	4628      	mov	r0, r5
 8013eca:	bd38      	pop	{r3, r4, r5, pc}
 8013ecc:	8993      	ldrh	r3, [r2, #12]
 8013ece:	f023 0320 	bic.w	r3, r3, #32
 8013ed2:	8193      	strh	r3, [r2, #12]
 8013ed4:	6853      	ldr	r3, [r2, #4]
 8013ed6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8013ed8:	b2cd      	uxtb	r5, r1
 8013eda:	b18a      	cbz	r2, 8013f00 <_sungetc_r+0x44>
 8013edc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	dd08      	ble.n	8013ef4 <_sungetc_r+0x38>
 8013ee2:	6823      	ldr	r3, [r4, #0]
 8013ee4:	1e5a      	subs	r2, r3, #1
 8013ee6:	6022      	str	r2, [r4, #0]
 8013ee8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013eec:	6863      	ldr	r3, [r4, #4]
 8013eee:	3301      	adds	r3, #1
 8013ef0:	6063      	str	r3, [r4, #4]
 8013ef2:	e7e9      	b.n	8013ec8 <_sungetc_r+0xc>
 8013ef4:	4621      	mov	r1, r4
 8013ef6:	f000 fbe0 	bl	80146ba <__submore>
 8013efa:	2800      	cmp	r0, #0
 8013efc:	d0f1      	beq.n	8013ee2 <_sungetc_r+0x26>
 8013efe:	e7e1      	b.n	8013ec4 <_sungetc_r+0x8>
 8013f00:	6921      	ldr	r1, [r4, #16]
 8013f02:	6822      	ldr	r2, [r4, #0]
 8013f04:	b141      	cbz	r1, 8013f18 <_sungetc_r+0x5c>
 8013f06:	4291      	cmp	r1, r2
 8013f08:	d206      	bcs.n	8013f18 <_sungetc_r+0x5c>
 8013f0a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8013f0e:	42a9      	cmp	r1, r5
 8013f10:	d102      	bne.n	8013f18 <_sungetc_r+0x5c>
 8013f12:	3a01      	subs	r2, #1
 8013f14:	6022      	str	r2, [r4, #0]
 8013f16:	e7ea      	b.n	8013eee <_sungetc_r+0x32>
 8013f18:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8013f1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013f20:	6363      	str	r3, [r4, #52]	@ 0x34
 8013f22:	2303      	movs	r3, #3
 8013f24:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013f26:	4623      	mov	r3, r4
 8013f28:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013f2c:	6023      	str	r3, [r4, #0]
 8013f2e:	2301      	movs	r3, #1
 8013f30:	e7de      	b.n	8013ef0 <_sungetc_r+0x34>

08013f32 <__ssrefill_r>:
 8013f32:	b510      	push	{r4, lr}
 8013f34:	460c      	mov	r4, r1
 8013f36:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013f38:	b169      	cbz	r1, 8013f56 <__ssrefill_r+0x24>
 8013f3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013f3e:	4299      	cmp	r1, r3
 8013f40:	d001      	beq.n	8013f46 <__ssrefill_r+0x14>
 8013f42:	f7fe fa2d 	bl	80123a0 <_free_r>
 8013f46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013f48:	6063      	str	r3, [r4, #4]
 8013f4a:	2000      	movs	r0, #0
 8013f4c:	6360      	str	r0, [r4, #52]	@ 0x34
 8013f4e:	b113      	cbz	r3, 8013f56 <__ssrefill_r+0x24>
 8013f50:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8013f52:	6023      	str	r3, [r4, #0]
 8013f54:	bd10      	pop	{r4, pc}
 8013f56:	6923      	ldr	r3, [r4, #16]
 8013f58:	6023      	str	r3, [r4, #0]
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	6063      	str	r3, [r4, #4]
 8013f5e:	89a3      	ldrh	r3, [r4, #12]
 8013f60:	f043 0320 	orr.w	r3, r3, #32
 8013f64:	81a3      	strh	r3, [r4, #12]
 8013f66:	f04f 30ff 	mov.w	r0, #4294967295
 8013f6a:	e7f3      	b.n	8013f54 <__ssrefill_r+0x22>

08013f6c <__ssvfiscanf_r>:
 8013f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f70:	460c      	mov	r4, r1
 8013f72:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8013f76:	2100      	movs	r1, #0
 8013f78:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8013f7c:	49a5      	ldr	r1, [pc, #660]	@ (8014214 <__ssvfiscanf_r+0x2a8>)
 8013f7e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8013f80:	f10d 0804 	add.w	r8, sp, #4
 8013f84:	49a4      	ldr	r1, [pc, #656]	@ (8014218 <__ssvfiscanf_r+0x2ac>)
 8013f86:	4fa5      	ldr	r7, [pc, #660]	@ (801421c <__ssvfiscanf_r+0x2b0>)
 8013f88:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8013f8c:	4606      	mov	r6, r0
 8013f8e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8013f90:	9300      	str	r3, [sp, #0]
 8013f92:	7813      	ldrb	r3, [r2, #0]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	f000 8158 	beq.w	801424a <__ssvfiscanf_r+0x2de>
 8013f9a:	5cf9      	ldrb	r1, [r7, r3]
 8013f9c:	f011 0108 	ands.w	r1, r1, #8
 8013fa0:	f102 0501 	add.w	r5, r2, #1
 8013fa4:	d019      	beq.n	8013fda <__ssvfiscanf_r+0x6e>
 8013fa6:	6863      	ldr	r3, [r4, #4]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	dd0f      	ble.n	8013fcc <__ssvfiscanf_r+0x60>
 8013fac:	6823      	ldr	r3, [r4, #0]
 8013fae:	781a      	ldrb	r2, [r3, #0]
 8013fb0:	5cba      	ldrb	r2, [r7, r2]
 8013fb2:	0712      	lsls	r2, r2, #28
 8013fb4:	d401      	bmi.n	8013fba <__ssvfiscanf_r+0x4e>
 8013fb6:	462a      	mov	r2, r5
 8013fb8:	e7eb      	b.n	8013f92 <__ssvfiscanf_r+0x26>
 8013fba:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013fbc:	3201      	adds	r2, #1
 8013fbe:	9245      	str	r2, [sp, #276]	@ 0x114
 8013fc0:	6862      	ldr	r2, [r4, #4]
 8013fc2:	3301      	adds	r3, #1
 8013fc4:	3a01      	subs	r2, #1
 8013fc6:	6062      	str	r2, [r4, #4]
 8013fc8:	6023      	str	r3, [r4, #0]
 8013fca:	e7ec      	b.n	8013fa6 <__ssvfiscanf_r+0x3a>
 8013fcc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013fce:	4621      	mov	r1, r4
 8013fd0:	4630      	mov	r0, r6
 8013fd2:	4798      	blx	r3
 8013fd4:	2800      	cmp	r0, #0
 8013fd6:	d0e9      	beq.n	8013fac <__ssvfiscanf_r+0x40>
 8013fd8:	e7ed      	b.n	8013fb6 <__ssvfiscanf_r+0x4a>
 8013fda:	2b25      	cmp	r3, #37	@ 0x25
 8013fdc:	d012      	beq.n	8014004 <__ssvfiscanf_r+0x98>
 8013fde:	4699      	mov	r9, r3
 8013fe0:	6863      	ldr	r3, [r4, #4]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	f340 8093 	ble.w	801410e <__ssvfiscanf_r+0x1a2>
 8013fe8:	6822      	ldr	r2, [r4, #0]
 8013fea:	7813      	ldrb	r3, [r2, #0]
 8013fec:	454b      	cmp	r3, r9
 8013fee:	f040 812c 	bne.w	801424a <__ssvfiscanf_r+0x2de>
 8013ff2:	6863      	ldr	r3, [r4, #4]
 8013ff4:	3b01      	subs	r3, #1
 8013ff6:	6063      	str	r3, [r4, #4]
 8013ff8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8013ffa:	3201      	adds	r2, #1
 8013ffc:	3301      	adds	r3, #1
 8013ffe:	6022      	str	r2, [r4, #0]
 8014000:	9345      	str	r3, [sp, #276]	@ 0x114
 8014002:	e7d8      	b.n	8013fb6 <__ssvfiscanf_r+0x4a>
 8014004:	9141      	str	r1, [sp, #260]	@ 0x104
 8014006:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014008:	7853      	ldrb	r3, [r2, #1]
 801400a:	2b2a      	cmp	r3, #42	@ 0x2a
 801400c:	bf02      	ittt	eq
 801400e:	2310      	moveq	r3, #16
 8014010:	1c95      	addeq	r5, r2, #2
 8014012:	9341      	streq	r3, [sp, #260]	@ 0x104
 8014014:	220a      	movs	r2, #10
 8014016:	46a9      	mov	r9, r5
 8014018:	f819 1b01 	ldrb.w	r1, [r9], #1
 801401c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8014020:	2b09      	cmp	r3, #9
 8014022:	d91e      	bls.n	8014062 <__ssvfiscanf_r+0xf6>
 8014024:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8014220 <__ssvfiscanf_r+0x2b4>
 8014028:	2203      	movs	r2, #3
 801402a:	4650      	mov	r0, sl
 801402c:	f7ec f8f8 	bl	8000220 <memchr>
 8014030:	b138      	cbz	r0, 8014042 <__ssvfiscanf_r+0xd6>
 8014032:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014034:	eba0 000a 	sub.w	r0, r0, sl
 8014038:	2301      	movs	r3, #1
 801403a:	4083      	lsls	r3, r0
 801403c:	4313      	orrs	r3, r2
 801403e:	9341      	str	r3, [sp, #260]	@ 0x104
 8014040:	464d      	mov	r5, r9
 8014042:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014046:	2b78      	cmp	r3, #120	@ 0x78
 8014048:	d806      	bhi.n	8014058 <__ssvfiscanf_r+0xec>
 801404a:	2b57      	cmp	r3, #87	@ 0x57
 801404c:	d810      	bhi.n	8014070 <__ssvfiscanf_r+0x104>
 801404e:	2b25      	cmp	r3, #37	@ 0x25
 8014050:	d0c5      	beq.n	8013fde <__ssvfiscanf_r+0x72>
 8014052:	d857      	bhi.n	8014104 <__ssvfiscanf_r+0x198>
 8014054:	2b00      	cmp	r3, #0
 8014056:	d065      	beq.n	8014124 <__ssvfiscanf_r+0x1b8>
 8014058:	2303      	movs	r3, #3
 801405a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801405c:	230a      	movs	r3, #10
 801405e:	9342      	str	r3, [sp, #264]	@ 0x108
 8014060:	e078      	b.n	8014154 <__ssvfiscanf_r+0x1e8>
 8014062:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8014064:	fb02 1103 	mla	r1, r2, r3, r1
 8014068:	3930      	subs	r1, #48	@ 0x30
 801406a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801406c:	464d      	mov	r5, r9
 801406e:	e7d2      	b.n	8014016 <__ssvfiscanf_r+0xaa>
 8014070:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8014074:	2a20      	cmp	r2, #32
 8014076:	d8ef      	bhi.n	8014058 <__ssvfiscanf_r+0xec>
 8014078:	a101      	add	r1, pc, #4	@ (adr r1, 8014080 <__ssvfiscanf_r+0x114>)
 801407a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801407e:	bf00      	nop
 8014080:	08014133 	.word	0x08014133
 8014084:	08014059 	.word	0x08014059
 8014088:	08014059 	.word	0x08014059
 801408c:	0801418d 	.word	0x0801418d
 8014090:	08014059 	.word	0x08014059
 8014094:	08014059 	.word	0x08014059
 8014098:	08014059 	.word	0x08014059
 801409c:	08014059 	.word	0x08014059
 80140a0:	08014059 	.word	0x08014059
 80140a4:	08014059 	.word	0x08014059
 80140a8:	08014059 	.word	0x08014059
 80140ac:	080141a3 	.word	0x080141a3
 80140b0:	08014189 	.word	0x08014189
 80140b4:	0801410b 	.word	0x0801410b
 80140b8:	0801410b 	.word	0x0801410b
 80140bc:	0801410b 	.word	0x0801410b
 80140c0:	08014059 	.word	0x08014059
 80140c4:	08014145 	.word	0x08014145
 80140c8:	08014059 	.word	0x08014059
 80140cc:	08014059 	.word	0x08014059
 80140d0:	08014059 	.word	0x08014059
 80140d4:	08014059 	.word	0x08014059
 80140d8:	080141b3 	.word	0x080141b3
 80140dc:	0801414d 	.word	0x0801414d
 80140e0:	0801412b 	.word	0x0801412b
 80140e4:	08014059 	.word	0x08014059
 80140e8:	08014059 	.word	0x08014059
 80140ec:	080141af 	.word	0x080141af
 80140f0:	08014059 	.word	0x08014059
 80140f4:	08014189 	.word	0x08014189
 80140f8:	08014059 	.word	0x08014059
 80140fc:	08014059 	.word	0x08014059
 8014100:	08014133 	.word	0x08014133
 8014104:	3b45      	subs	r3, #69	@ 0x45
 8014106:	2b02      	cmp	r3, #2
 8014108:	d8a6      	bhi.n	8014058 <__ssvfiscanf_r+0xec>
 801410a:	2305      	movs	r3, #5
 801410c:	e021      	b.n	8014152 <__ssvfiscanf_r+0x1e6>
 801410e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014110:	4621      	mov	r1, r4
 8014112:	4630      	mov	r0, r6
 8014114:	4798      	blx	r3
 8014116:	2800      	cmp	r0, #0
 8014118:	f43f af66 	beq.w	8013fe8 <__ssvfiscanf_r+0x7c>
 801411c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801411e:	2800      	cmp	r0, #0
 8014120:	f040 808b 	bne.w	801423a <__ssvfiscanf_r+0x2ce>
 8014124:	f04f 30ff 	mov.w	r0, #4294967295
 8014128:	e08b      	b.n	8014242 <__ssvfiscanf_r+0x2d6>
 801412a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801412c:	f042 0220 	orr.w	r2, r2, #32
 8014130:	9241      	str	r2, [sp, #260]	@ 0x104
 8014132:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014134:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014138:	9241      	str	r2, [sp, #260]	@ 0x104
 801413a:	2210      	movs	r2, #16
 801413c:	2b6e      	cmp	r3, #110	@ 0x6e
 801413e:	9242      	str	r2, [sp, #264]	@ 0x108
 8014140:	d902      	bls.n	8014148 <__ssvfiscanf_r+0x1dc>
 8014142:	e005      	b.n	8014150 <__ssvfiscanf_r+0x1e4>
 8014144:	2300      	movs	r3, #0
 8014146:	9342      	str	r3, [sp, #264]	@ 0x108
 8014148:	2303      	movs	r3, #3
 801414a:	e002      	b.n	8014152 <__ssvfiscanf_r+0x1e6>
 801414c:	2308      	movs	r3, #8
 801414e:	9342      	str	r3, [sp, #264]	@ 0x108
 8014150:	2304      	movs	r3, #4
 8014152:	9347      	str	r3, [sp, #284]	@ 0x11c
 8014154:	6863      	ldr	r3, [r4, #4]
 8014156:	2b00      	cmp	r3, #0
 8014158:	dd39      	ble.n	80141ce <__ssvfiscanf_r+0x262>
 801415a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801415c:	0659      	lsls	r1, r3, #25
 801415e:	d404      	bmi.n	801416a <__ssvfiscanf_r+0x1fe>
 8014160:	6823      	ldr	r3, [r4, #0]
 8014162:	781a      	ldrb	r2, [r3, #0]
 8014164:	5cba      	ldrb	r2, [r7, r2]
 8014166:	0712      	lsls	r2, r2, #28
 8014168:	d438      	bmi.n	80141dc <__ssvfiscanf_r+0x270>
 801416a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801416c:	2b02      	cmp	r3, #2
 801416e:	dc47      	bgt.n	8014200 <__ssvfiscanf_r+0x294>
 8014170:	466b      	mov	r3, sp
 8014172:	4622      	mov	r2, r4
 8014174:	a941      	add	r1, sp, #260	@ 0x104
 8014176:	4630      	mov	r0, r6
 8014178:	f000 f86c 	bl	8014254 <_scanf_chars>
 801417c:	2801      	cmp	r0, #1
 801417e:	d064      	beq.n	801424a <__ssvfiscanf_r+0x2de>
 8014180:	2802      	cmp	r0, #2
 8014182:	f47f af18 	bne.w	8013fb6 <__ssvfiscanf_r+0x4a>
 8014186:	e7c9      	b.n	801411c <__ssvfiscanf_r+0x1b0>
 8014188:	220a      	movs	r2, #10
 801418a:	e7d7      	b.n	801413c <__ssvfiscanf_r+0x1d0>
 801418c:	4629      	mov	r1, r5
 801418e:	4640      	mov	r0, r8
 8014190:	f000 fa5a 	bl	8014648 <__sccl>
 8014194:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801419a:	9341      	str	r3, [sp, #260]	@ 0x104
 801419c:	4605      	mov	r5, r0
 801419e:	2301      	movs	r3, #1
 80141a0:	e7d7      	b.n	8014152 <__ssvfiscanf_r+0x1e6>
 80141a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80141a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141a8:	9341      	str	r3, [sp, #260]	@ 0x104
 80141aa:	2300      	movs	r3, #0
 80141ac:	e7d1      	b.n	8014152 <__ssvfiscanf_r+0x1e6>
 80141ae:	2302      	movs	r3, #2
 80141b0:	e7cf      	b.n	8014152 <__ssvfiscanf_r+0x1e6>
 80141b2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80141b4:	06c3      	lsls	r3, r0, #27
 80141b6:	f53f aefe 	bmi.w	8013fb6 <__ssvfiscanf_r+0x4a>
 80141ba:	9b00      	ldr	r3, [sp, #0]
 80141bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80141be:	1d19      	adds	r1, r3, #4
 80141c0:	9100      	str	r1, [sp, #0]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	07c0      	lsls	r0, r0, #31
 80141c6:	bf4c      	ite	mi
 80141c8:	801a      	strhmi	r2, [r3, #0]
 80141ca:	601a      	strpl	r2, [r3, #0]
 80141cc:	e6f3      	b.n	8013fb6 <__ssvfiscanf_r+0x4a>
 80141ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80141d0:	4621      	mov	r1, r4
 80141d2:	4630      	mov	r0, r6
 80141d4:	4798      	blx	r3
 80141d6:	2800      	cmp	r0, #0
 80141d8:	d0bf      	beq.n	801415a <__ssvfiscanf_r+0x1ee>
 80141da:	e79f      	b.n	801411c <__ssvfiscanf_r+0x1b0>
 80141dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80141de:	3201      	adds	r2, #1
 80141e0:	9245      	str	r2, [sp, #276]	@ 0x114
 80141e2:	6862      	ldr	r2, [r4, #4]
 80141e4:	3a01      	subs	r2, #1
 80141e6:	2a00      	cmp	r2, #0
 80141e8:	6062      	str	r2, [r4, #4]
 80141ea:	dd02      	ble.n	80141f2 <__ssvfiscanf_r+0x286>
 80141ec:	3301      	adds	r3, #1
 80141ee:	6023      	str	r3, [r4, #0]
 80141f0:	e7b6      	b.n	8014160 <__ssvfiscanf_r+0x1f4>
 80141f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80141f4:	4621      	mov	r1, r4
 80141f6:	4630      	mov	r0, r6
 80141f8:	4798      	blx	r3
 80141fa:	2800      	cmp	r0, #0
 80141fc:	d0b0      	beq.n	8014160 <__ssvfiscanf_r+0x1f4>
 80141fe:	e78d      	b.n	801411c <__ssvfiscanf_r+0x1b0>
 8014200:	2b04      	cmp	r3, #4
 8014202:	dc0f      	bgt.n	8014224 <__ssvfiscanf_r+0x2b8>
 8014204:	466b      	mov	r3, sp
 8014206:	4622      	mov	r2, r4
 8014208:	a941      	add	r1, sp, #260	@ 0x104
 801420a:	4630      	mov	r0, r6
 801420c:	f000 f87c 	bl	8014308 <_scanf_i>
 8014210:	e7b4      	b.n	801417c <__ssvfiscanf_r+0x210>
 8014212:	bf00      	nop
 8014214:	08013ebd 	.word	0x08013ebd
 8014218:	08013f33 	.word	0x08013f33
 801421c:	08016fe1 	.word	0x08016fe1
 8014220:	080170e7 	.word	0x080170e7
 8014224:	4b0a      	ldr	r3, [pc, #40]	@ (8014250 <__ssvfiscanf_r+0x2e4>)
 8014226:	2b00      	cmp	r3, #0
 8014228:	f43f aec5 	beq.w	8013fb6 <__ssvfiscanf_r+0x4a>
 801422c:	466b      	mov	r3, sp
 801422e:	4622      	mov	r2, r4
 8014230:	a941      	add	r1, sp, #260	@ 0x104
 8014232:	4630      	mov	r0, r6
 8014234:	f7fc fe5a 	bl	8010eec <_scanf_float>
 8014238:	e7a0      	b.n	801417c <__ssvfiscanf_r+0x210>
 801423a:	89a3      	ldrh	r3, [r4, #12]
 801423c:	065b      	lsls	r3, r3, #25
 801423e:	f53f af71 	bmi.w	8014124 <__ssvfiscanf_r+0x1b8>
 8014242:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8014246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801424a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801424c:	e7f9      	b.n	8014242 <__ssvfiscanf_r+0x2d6>
 801424e:	bf00      	nop
 8014250:	08010eed 	.word	0x08010eed

08014254 <_scanf_chars>:
 8014254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014258:	4615      	mov	r5, r2
 801425a:	688a      	ldr	r2, [r1, #8]
 801425c:	4680      	mov	r8, r0
 801425e:	460c      	mov	r4, r1
 8014260:	b932      	cbnz	r2, 8014270 <_scanf_chars+0x1c>
 8014262:	698a      	ldr	r2, [r1, #24]
 8014264:	2a00      	cmp	r2, #0
 8014266:	bf14      	ite	ne
 8014268:	f04f 32ff 	movne.w	r2, #4294967295
 801426c:	2201      	moveq	r2, #1
 801426e:	608a      	str	r2, [r1, #8]
 8014270:	6822      	ldr	r2, [r4, #0]
 8014272:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8014304 <_scanf_chars+0xb0>
 8014276:	06d1      	lsls	r1, r2, #27
 8014278:	bf5f      	itttt	pl
 801427a:	681a      	ldrpl	r2, [r3, #0]
 801427c:	1d11      	addpl	r1, r2, #4
 801427e:	6019      	strpl	r1, [r3, #0]
 8014280:	6816      	ldrpl	r6, [r2, #0]
 8014282:	2700      	movs	r7, #0
 8014284:	69a0      	ldr	r0, [r4, #24]
 8014286:	b188      	cbz	r0, 80142ac <_scanf_chars+0x58>
 8014288:	2801      	cmp	r0, #1
 801428a:	d107      	bne.n	801429c <_scanf_chars+0x48>
 801428c:	682b      	ldr	r3, [r5, #0]
 801428e:	781a      	ldrb	r2, [r3, #0]
 8014290:	6963      	ldr	r3, [r4, #20]
 8014292:	5c9b      	ldrb	r3, [r3, r2]
 8014294:	b953      	cbnz	r3, 80142ac <_scanf_chars+0x58>
 8014296:	2f00      	cmp	r7, #0
 8014298:	d031      	beq.n	80142fe <_scanf_chars+0xaa>
 801429a:	e022      	b.n	80142e2 <_scanf_chars+0x8e>
 801429c:	2802      	cmp	r0, #2
 801429e:	d120      	bne.n	80142e2 <_scanf_chars+0x8e>
 80142a0:	682b      	ldr	r3, [r5, #0]
 80142a2:	781b      	ldrb	r3, [r3, #0]
 80142a4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80142a8:	071b      	lsls	r3, r3, #28
 80142aa:	d41a      	bmi.n	80142e2 <_scanf_chars+0x8e>
 80142ac:	6823      	ldr	r3, [r4, #0]
 80142ae:	06da      	lsls	r2, r3, #27
 80142b0:	bf5e      	ittt	pl
 80142b2:	682b      	ldrpl	r3, [r5, #0]
 80142b4:	781b      	ldrbpl	r3, [r3, #0]
 80142b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80142ba:	682a      	ldr	r2, [r5, #0]
 80142bc:	686b      	ldr	r3, [r5, #4]
 80142be:	3201      	adds	r2, #1
 80142c0:	602a      	str	r2, [r5, #0]
 80142c2:	68a2      	ldr	r2, [r4, #8]
 80142c4:	3b01      	subs	r3, #1
 80142c6:	3a01      	subs	r2, #1
 80142c8:	606b      	str	r3, [r5, #4]
 80142ca:	3701      	adds	r7, #1
 80142cc:	60a2      	str	r2, [r4, #8]
 80142ce:	b142      	cbz	r2, 80142e2 <_scanf_chars+0x8e>
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	dcd7      	bgt.n	8014284 <_scanf_chars+0x30>
 80142d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80142d8:	4629      	mov	r1, r5
 80142da:	4640      	mov	r0, r8
 80142dc:	4798      	blx	r3
 80142de:	2800      	cmp	r0, #0
 80142e0:	d0d0      	beq.n	8014284 <_scanf_chars+0x30>
 80142e2:	6823      	ldr	r3, [r4, #0]
 80142e4:	f013 0310 	ands.w	r3, r3, #16
 80142e8:	d105      	bne.n	80142f6 <_scanf_chars+0xa2>
 80142ea:	68e2      	ldr	r2, [r4, #12]
 80142ec:	3201      	adds	r2, #1
 80142ee:	60e2      	str	r2, [r4, #12]
 80142f0:	69a2      	ldr	r2, [r4, #24]
 80142f2:	b102      	cbz	r2, 80142f6 <_scanf_chars+0xa2>
 80142f4:	7033      	strb	r3, [r6, #0]
 80142f6:	6923      	ldr	r3, [r4, #16]
 80142f8:	443b      	add	r3, r7
 80142fa:	6123      	str	r3, [r4, #16]
 80142fc:	2000      	movs	r0, #0
 80142fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014302:	bf00      	nop
 8014304:	08016fe1 	.word	0x08016fe1

08014308 <_scanf_i>:
 8014308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801430c:	4698      	mov	r8, r3
 801430e:	4b74      	ldr	r3, [pc, #464]	@ (80144e0 <_scanf_i+0x1d8>)
 8014310:	460c      	mov	r4, r1
 8014312:	4682      	mov	sl, r0
 8014314:	4616      	mov	r6, r2
 8014316:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801431a:	b087      	sub	sp, #28
 801431c:	ab03      	add	r3, sp, #12
 801431e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014322:	4b70      	ldr	r3, [pc, #448]	@ (80144e4 <_scanf_i+0x1dc>)
 8014324:	69a1      	ldr	r1, [r4, #24]
 8014326:	4a70      	ldr	r2, [pc, #448]	@ (80144e8 <_scanf_i+0x1e0>)
 8014328:	2903      	cmp	r1, #3
 801432a:	bf08      	it	eq
 801432c:	461a      	moveq	r2, r3
 801432e:	68a3      	ldr	r3, [r4, #8]
 8014330:	9201      	str	r2, [sp, #4]
 8014332:	1e5a      	subs	r2, r3, #1
 8014334:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014338:	bf88      	it	hi
 801433a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801433e:	4627      	mov	r7, r4
 8014340:	bf82      	ittt	hi
 8014342:	eb03 0905 	addhi.w	r9, r3, r5
 8014346:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801434a:	60a3      	strhi	r3, [r4, #8]
 801434c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014350:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8014354:	bf98      	it	ls
 8014356:	f04f 0900 	movls.w	r9, #0
 801435a:	6023      	str	r3, [r4, #0]
 801435c:	463d      	mov	r5, r7
 801435e:	f04f 0b00 	mov.w	fp, #0
 8014362:	6831      	ldr	r1, [r6, #0]
 8014364:	ab03      	add	r3, sp, #12
 8014366:	7809      	ldrb	r1, [r1, #0]
 8014368:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801436c:	2202      	movs	r2, #2
 801436e:	f7eb ff57 	bl	8000220 <memchr>
 8014372:	b328      	cbz	r0, 80143c0 <_scanf_i+0xb8>
 8014374:	f1bb 0f01 	cmp.w	fp, #1
 8014378:	d159      	bne.n	801442e <_scanf_i+0x126>
 801437a:	6862      	ldr	r2, [r4, #4]
 801437c:	b92a      	cbnz	r2, 801438a <_scanf_i+0x82>
 801437e:	6822      	ldr	r2, [r4, #0]
 8014380:	2108      	movs	r1, #8
 8014382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014386:	6061      	str	r1, [r4, #4]
 8014388:	6022      	str	r2, [r4, #0]
 801438a:	6822      	ldr	r2, [r4, #0]
 801438c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8014390:	6022      	str	r2, [r4, #0]
 8014392:	68a2      	ldr	r2, [r4, #8]
 8014394:	1e51      	subs	r1, r2, #1
 8014396:	60a1      	str	r1, [r4, #8]
 8014398:	b192      	cbz	r2, 80143c0 <_scanf_i+0xb8>
 801439a:	6832      	ldr	r2, [r6, #0]
 801439c:	1c51      	adds	r1, r2, #1
 801439e:	6031      	str	r1, [r6, #0]
 80143a0:	7812      	ldrb	r2, [r2, #0]
 80143a2:	f805 2b01 	strb.w	r2, [r5], #1
 80143a6:	6872      	ldr	r2, [r6, #4]
 80143a8:	3a01      	subs	r2, #1
 80143aa:	2a00      	cmp	r2, #0
 80143ac:	6072      	str	r2, [r6, #4]
 80143ae:	dc07      	bgt.n	80143c0 <_scanf_i+0xb8>
 80143b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80143b4:	4631      	mov	r1, r6
 80143b6:	4650      	mov	r0, sl
 80143b8:	4790      	blx	r2
 80143ba:	2800      	cmp	r0, #0
 80143bc:	f040 8085 	bne.w	80144ca <_scanf_i+0x1c2>
 80143c0:	f10b 0b01 	add.w	fp, fp, #1
 80143c4:	f1bb 0f03 	cmp.w	fp, #3
 80143c8:	d1cb      	bne.n	8014362 <_scanf_i+0x5a>
 80143ca:	6863      	ldr	r3, [r4, #4]
 80143cc:	b90b      	cbnz	r3, 80143d2 <_scanf_i+0xca>
 80143ce:	230a      	movs	r3, #10
 80143d0:	6063      	str	r3, [r4, #4]
 80143d2:	6863      	ldr	r3, [r4, #4]
 80143d4:	4945      	ldr	r1, [pc, #276]	@ (80144ec <_scanf_i+0x1e4>)
 80143d6:	6960      	ldr	r0, [r4, #20]
 80143d8:	1ac9      	subs	r1, r1, r3
 80143da:	f000 f935 	bl	8014648 <__sccl>
 80143de:	f04f 0b00 	mov.w	fp, #0
 80143e2:	68a3      	ldr	r3, [r4, #8]
 80143e4:	6822      	ldr	r2, [r4, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d03d      	beq.n	8014466 <_scanf_i+0x15e>
 80143ea:	6831      	ldr	r1, [r6, #0]
 80143ec:	6960      	ldr	r0, [r4, #20]
 80143ee:	f891 c000 	ldrb.w	ip, [r1]
 80143f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80143f6:	2800      	cmp	r0, #0
 80143f8:	d035      	beq.n	8014466 <_scanf_i+0x15e>
 80143fa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80143fe:	d124      	bne.n	801444a <_scanf_i+0x142>
 8014400:	0510      	lsls	r0, r2, #20
 8014402:	d522      	bpl.n	801444a <_scanf_i+0x142>
 8014404:	f10b 0b01 	add.w	fp, fp, #1
 8014408:	f1b9 0f00 	cmp.w	r9, #0
 801440c:	d003      	beq.n	8014416 <_scanf_i+0x10e>
 801440e:	3301      	adds	r3, #1
 8014410:	f109 39ff 	add.w	r9, r9, #4294967295
 8014414:	60a3      	str	r3, [r4, #8]
 8014416:	6873      	ldr	r3, [r6, #4]
 8014418:	3b01      	subs	r3, #1
 801441a:	2b00      	cmp	r3, #0
 801441c:	6073      	str	r3, [r6, #4]
 801441e:	dd1b      	ble.n	8014458 <_scanf_i+0x150>
 8014420:	6833      	ldr	r3, [r6, #0]
 8014422:	3301      	adds	r3, #1
 8014424:	6033      	str	r3, [r6, #0]
 8014426:	68a3      	ldr	r3, [r4, #8]
 8014428:	3b01      	subs	r3, #1
 801442a:	60a3      	str	r3, [r4, #8]
 801442c:	e7d9      	b.n	80143e2 <_scanf_i+0xda>
 801442e:	f1bb 0f02 	cmp.w	fp, #2
 8014432:	d1ae      	bne.n	8014392 <_scanf_i+0x8a>
 8014434:	6822      	ldr	r2, [r4, #0]
 8014436:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801443a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801443e:	d1bf      	bne.n	80143c0 <_scanf_i+0xb8>
 8014440:	2110      	movs	r1, #16
 8014442:	6061      	str	r1, [r4, #4]
 8014444:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014448:	e7a2      	b.n	8014390 <_scanf_i+0x88>
 801444a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801444e:	6022      	str	r2, [r4, #0]
 8014450:	780b      	ldrb	r3, [r1, #0]
 8014452:	f805 3b01 	strb.w	r3, [r5], #1
 8014456:	e7de      	b.n	8014416 <_scanf_i+0x10e>
 8014458:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801445c:	4631      	mov	r1, r6
 801445e:	4650      	mov	r0, sl
 8014460:	4798      	blx	r3
 8014462:	2800      	cmp	r0, #0
 8014464:	d0df      	beq.n	8014426 <_scanf_i+0x11e>
 8014466:	6823      	ldr	r3, [r4, #0]
 8014468:	05d9      	lsls	r1, r3, #23
 801446a:	d50d      	bpl.n	8014488 <_scanf_i+0x180>
 801446c:	42bd      	cmp	r5, r7
 801446e:	d909      	bls.n	8014484 <_scanf_i+0x17c>
 8014470:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014474:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014478:	4632      	mov	r2, r6
 801447a:	4650      	mov	r0, sl
 801447c:	4798      	blx	r3
 801447e:	f105 39ff 	add.w	r9, r5, #4294967295
 8014482:	464d      	mov	r5, r9
 8014484:	42bd      	cmp	r5, r7
 8014486:	d028      	beq.n	80144da <_scanf_i+0x1d2>
 8014488:	6822      	ldr	r2, [r4, #0]
 801448a:	f012 0210 	ands.w	r2, r2, #16
 801448e:	d113      	bne.n	80144b8 <_scanf_i+0x1b0>
 8014490:	702a      	strb	r2, [r5, #0]
 8014492:	6863      	ldr	r3, [r4, #4]
 8014494:	9e01      	ldr	r6, [sp, #4]
 8014496:	4639      	mov	r1, r7
 8014498:	4650      	mov	r0, sl
 801449a:	47b0      	blx	r6
 801449c:	f8d8 3000 	ldr.w	r3, [r8]
 80144a0:	6821      	ldr	r1, [r4, #0]
 80144a2:	1d1a      	adds	r2, r3, #4
 80144a4:	f8c8 2000 	str.w	r2, [r8]
 80144a8:	f011 0f20 	tst.w	r1, #32
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	d00f      	beq.n	80144d0 <_scanf_i+0x1c8>
 80144b0:	6018      	str	r0, [r3, #0]
 80144b2:	68e3      	ldr	r3, [r4, #12]
 80144b4:	3301      	adds	r3, #1
 80144b6:	60e3      	str	r3, [r4, #12]
 80144b8:	6923      	ldr	r3, [r4, #16]
 80144ba:	1bed      	subs	r5, r5, r7
 80144bc:	445d      	add	r5, fp
 80144be:	442b      	add	r3, r5
 80144c0:	6123      	str	r3, [r4, #16]
 80144c2:	2000      	movs	r0, #0
 80144c4:	b007      	add	sp, #28
 80144c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ca:	f04f 0b00 	mov.w	fp, #0
 80144ce:	e7ca      	b.n	8014466 <_scanf_i+0x15e>
 80144d0:	07ca      	lsls	r2, r1, #31
 80144d2:	bf4c      	ite	mi
 80144d4:	8018      	strhmi	r0, [r3, #0]
 80144d6:	6018      	strpl	r0, [r3, #0]
 80144d8:	e7eb      	b.n	80144b2 <_scanf_i+0x1aa>
 80144da:	2001      	movs	r0, #1
 80144dc:	e7f2      	b.n	80144c4 <_scanf_i+0x1bc>
 80144de:	bf00      	nop
 80144e0:	08016d1c 	.word	0x08016d1c
 80144e4:	08013c09 	.word	0x08013c09
 80144e8:	08014fcd 	.word	0x08014fcd
 80144ec:	08017102 	.word	0x08017102

080144f0 <__sflush_r>:
 80144f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80144f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144f8:	0716      	lsls	r6, r2, #28
 80144fa:	4605      	mov	r5, r0
 80144fc:	460c      	mov	r4, r1
 80144fe:	d454      	bmi.n	80145aa <__sflush_r+0xba>
 8014500:	684b      	ldr	r3, [r1, #4]
 8014502:	2b00      	cmp	r3, #0
 8014504:	dc02      	bgt.n	801450c <__sflush_r+0x1c>
 8014506:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014508:	2b00      	cmp	r3, #0
 801450a:	dd48      	ble.n	801459e <__sflush_r+0xae>
 801450c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801450e:	2e00      	cmp	r6, #0
 8014510:	d045      	beq.n	801459e <__sflush_r+0xae>
 8014512:	2300      	movs	r3, #0
 8014514:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014518:	682f      	ldr	r7, [r5, #0]
 801451a:	6a21      	ldr	r1, [r4, #32]
 801451c:	602b      	str	r3, [r5, #0]
 801451e:	d030      	beq.n	8014582 <__sflush_r+0x92>
 8014520:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014522:	89a3      	ldrh	r3, [r4, #12]
 8014524:	0759      	lsls	r1, r3, #29
 8014526:	d505      	bpl.n	8014534 <__sflush_r+0x44>
 8014528:	6863      	ldr	r3, [r4, #4]
 801452a:	1ad2      	subs	r2, r2, r3
 801452c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801452e:	b10b      	cbz	r3, 8014534 <__sflush_r+0x44>
 8014530:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014532:	1ad2      	subs	r2, r2, r3
 8014534:	2300      	movs	r3, #0
 8014536:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014538:	6a21      	ldr	r1, [r4, #32]
 801453a:	4628      	mov	r0, r5
 801453c:	47b0      	blx	r6
 801453e:	1c43      	adds	r3, r0, #1
 8014540:	89a3      	ldrh	r3, [r4, #12]
 8014542:	d106      	bne.n	8014552 <__sflush_r+0x62>
 8014544:	6829      	ldr	r1, [r5, #0]
 8014546:	291d      	cmp	r1, #29
 8014548:	d82b      	bhi.n	80145a2 <__sflush_r+0xb2>
 801454a:	4a2a      	ldr	r2, [pc, #168]	@ (80145f4 <__sflush_r+0x104>)
 801454c:	410a      	asrs	r2, r1
 801454e:	07d6      	lsls	r6, r2, #31
 8014550:	d427      	bmi.n	80145a2 <__sflush_r+0xb2>
 8014552:	2200      	movs	r2, #0
 8014554:	6062      	str	r2, [r4, #4]
 8014556:	04d9      	lsls	r1, r3, #19
 8014558:	6922      	ldr	r2, [r4, #16]
 801455a:	6022      	str	r2, [r4, #0]
 801455c:	d504      	bpl.n	8014568 <__sflush_r+0x78>
 801455e:	1c42      	adds	r2, r0, #1
 8014560:	d101      	bne.n	8014566 <__sflush_r+0x76>
 8014562:	682b      	ldr	r3, [r5, #0]
 8014564:	b903      	cbnz	r3, 8014568 <__sflush_r+0x78>
 8014566:	6560      	str	r0, [r4, #84]	@ 0x54
 8014568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801456a:	602f      	str	r7, [r5, #0]
 801456c:	b1b9      	cbz	r1, 801459e <__sflush_r+0xae>
 801456e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014572:	4299      	cmp	r1, r3
 8014574:	d002      	beq.n	801457c <__sflush_r+0x8c>
 8014576:	4628      	mov	r0, r5
 8014578:	f7fd ff12 	bl	80123a0 <_free_r>
 801457c:	2300      	movs	r3, #0
 801457e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014580:	e00d      	b.n	801459e <__sflush_r+0xae>
 8014582:	2301      	movs	r3, #1
 8014584:	4628      	mov	r0, r5
 8014586:	47b0      	blx	r6
 8014588:	4602      	mov	r2, r0
 801458a:	1c50      	adds	r0, r2, #1
 801458c:	d1c9      	bne.n	8014522 <__sflush_r+0x32>
 801458e:	682b      	ldr	r3, [r5, #0]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d0c6      	beq.n	8014522 <__sflush_r+0x32>
 8014594:	2b1d      	cmp	r3, #29
 8014596:	d001      	beq.n	801459c <__sflush_r+0xac>
 8014598:	2b16      	cmp	r3, #22
 801459a:	d11e      	bne.n	80145da <__sflush_r+0xea>
 801459c:	602f      	str	r7, [r5, #0]
 801459e:	2000      	movs	r0, #0
 80145a0:	e022      	b.n	80145e8 <__sflush_r+0xf8>
 80145a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80145a6:	b21b      	sxth	r3, r3
 80145a8:	e01b      	b.n	80145e2 <__sflush_r+0xf2>
 80145aa:	690f      	ldr	r7, [r1, #16]
 80145ac:	2f00      	cmp	r7, #0
 80145ae:	d0f6      	beq.n	801459e <__sflush_r+0xae>
 80145b0:	0793      	lsls	r3, r2, #30
 80145b2:	680e      	ldr	r6, [r1, #0]
 80145b4:	bf08      	it	eq
 80145b6:	694b      	ldreq	r3, [r1, #20]
 80145b8:	600f      	str	r7, [r1, #0]
 80145ba:	bf18      	it	ne
 80145bc:	2300      	movne	r3, #0
 80145be:	eba6 0807 	sub.w	r8, r6, r7
 80145c2:	608b      	str	r3, [r1, #8]
 80145c4:	f1b8 0f00 	cmp.w	r8, #0
 80145c8:	dde9      	ble.n	801459e <__sflush_r+0xae>
 80145ca:	6a21      	ldr	r1, [r4, #32]
 80145cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80145ce:	4643      	mov	r3, r8
 80145d0:	463a      	mov	r2, r7
 80145d2:	4628      	mov	r0, r5
 80145d4:	47b0      	blx	r6
 80145d6:	2800      	cmp	r0, #0
 80145d8:	dc08      	bgt.n	80145ec <__sflush_r+0xfc>
 80145da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80145e2:	81a3      	strh	r3, [r4, #12]
 80145e4:	f04f 30ff 	mov.w	r0, #4294967295
 80145e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145ec:	4407      	add	r7, r0
 80145ee:	eba8 0800 	sub.w	r8, r8, r0
 80145f2:	e7e7      	b.n	80145c4 <__sflush_r+0xd4>
 80145f4:	dfbffffe 	.word	0xdfbffffe

080145f8 <_fflush_r>:
 80145f8:	b538      	push	{r3, r4, r5, lr}
 80145fa:	690b      	ldr	r3, [r1, #16]
 80145fc:	4605      	mov	r5, r0
 80145fe:	460c      	mov	r4, r1
 8014600:	b913      	cbnz	r3, 8014608 <_fflush_r+0x10>
 8014602:	2500      	movs	r5, #0
 8014604:	4628      	mov	r0, r5
 8014606:	bd38      	pop	{r3, r4, r5, pc}
 8014608:	b118      	cbz	r0, 8014612 <_fflush_r+0x1a>
 801460a:	6a03      	ldr	r3, [r0, #32]
 801460c:	b90b      	cbnz	r3, 8014612 <_fflush_r+0x1a>
 801460e:	f7fc ff0d 	bl	801142c <__sinit>
 8014612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d0f3      	beq.n	8014602 <_fflush_r+0xa>
 801461a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801461c:	07d0      	lsls	r0, r2, #31
 801461e:	d404      	bmi.n	801462a <_fflush_r+0x32>
 8014620:	0599      	lsls	r1, r3, #22
 8014622:	d402      	bmi.n	801462a <_fflush_r+0x32>
 8014624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014626:	f7fd f856 	bl	80116d6 <__retarget_lock_acquire_recursive>
 801462a:	4628      	mov	r0, r5
 801462c:	4621      	mov	r1, r4
 801462e:	f7ff ff5f 	bl	80144f0 <__sflush_r>
 8014632:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014634:	07da      	lsls	r2, r3, #31
 8014636:	4605      	mov	r5, r0
 8014638:	d4e4      	bmi.n	8014604 <_fflush_r+0xc>
 801463a:	89a3      	ldrh	r3, [r4, #12]
 801463c:	059b      	lsls	r3, r3, #22
 801463e:	d4e1      	bmi.n	8014604 <_fflush_r+0xc>
 8014640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014642:	f7fd f849 	bl	80116d8 <__retarget_lock_release_recursive>
 8014646:	e7dd      	b.n	8014604 <_fflush_r+0xc>

08014648 <__sccl>:
 8014648:	b570      	push	{r4, r5, r6, lr}
 801464a:	780b      	ldrb	r3, [r1, #0]
 801464c:	4604      	mov	r4, r0
 801464e:	2b5e      	cmp	r3, #94	@ 0x5e
 8014650:	bf0b      	itete	eq
 8014652:	784b      	ldrbeq	r3, [r1, #1]
 8014654:	1c4a      	addne	r2, r1, #1
 8014656:	1c8a      	addeq	r2, r1, #2
 8014658:	2100      	movne	r1, #0
 801465a:	bf08      	it	eq
 801465c:	2101      	moveq	r1, #1
 801465e:	3801      	subs	r0, #1
 8014660:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8014664:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014668:	42a8      	cmp	r0, r5
 801466a:	d1fb      	bne.n	8014664 <__sccl+0x1c>
 801466c:	b90b      	cbnz	r3, 8014672 <__sccl+0x2a>
 801466e:	1e50      	subs	r0, r2, #1
 8014670:	bd70      	pop	{r4, r5, r6, pc}
 8014672:	f081 0101 	eor.w	r1, r1, #1
 8014676:	54e1      	strb	r1, [r4, r3]
 8014678:	4610      	mov	r0, r2
 801467a:	4602      	mov	r2, r0
 801467c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014680:	2d2d      	cmp	r5, #45	@ 0x2d
 8014682:	d005      	beq.n	8014690 <__sccl+0x48>
 8014684:	2d5d      	cmp	r5, #93	@ 0x5d
 8014686:	d016      	beq.n	80146b6 <__sccl+0x6e>
 8014688:	2d00      	cmp	r5, #0
 801468a:	d0f1      	beq.n	8014670 <__sccl+0x28>
 801468c:	462b      	mov	r3, r5
 801468e:	e7f2      	b.n	8014676 <__sccl+0x2e>
 8014690:	7846      	ldrb	r6, [r0, #1]
 8014692:	2e5d      	cmp	r6, #93	@ 0x5d
 8014694:	d0fa      	beq.n	801468c <__sccl+0x44>
 8014696:	42b3      	cmp	r3, r6
 8014698:	dcf8      	bgt.n	801468c <__sccl+0x44>
 801469a:	3002      	adds	r0, #2
 801469c:	461a      	mov	r2, r3
 801469e:	3201      	adds	r2, #1
 80146a0:	4296      	cmp	r6, r2
 80146a2:	54a1      	strb	r1, [r4, r2]
 80146a4:	dcfb      	bgt.n	801469e <__sccl+0x56>
 80146a6:	1af2      	subs	r2, r6, r3
 80146a8:	3a01      	subs	r2, #1
 80146aa:	1c5d      	adds	r5, r3, #1
 80146ac:	42b3      	cmp	r3, r6
 80146ae:	bfa8      	it	ge
 80146b0:	2200      	movge	r2, #0
 80146b2:	18ab      	adds	r3, r5, r2
 80146b4:	e7e1      	b.n	801467a <__sccl+0x32>
 80146b6:	4610      	mov	r0, r2
 80146b8:	e7da      	b.n	8014670 <__sccl+0x28>

080146ba <__submore>:
 80146ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146be:	460c      	mov	r4, r1
 80146c0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80146c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146c6:	4299      	cmp	r1, r3
 80146c8:	d11d      	bne.n	8014706 <__submore+0x4c>
 80146ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80146ce:	f7fd fedb 	bl	8012488 <_malloc_r>
 80146d2:	b918      	cbnz	r0, 80146dc <__submore+0x22>
 80146d4:	f04f 30ff 	mov.w	r0, #4294967295
 80146d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80146e0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80146e2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80146e6:	6360      	str	r0, [r4, #52]	@ 0x34
 80146e8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80146ec:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80146f0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80146f4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80146f8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80146fc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8014700:	6020      	str	r0, [r4, #0]
 8014702:	2000      	movs	r0, #0
 8014704:	e7e8      	b.n	80146d8 <__submore+0x1e>
 8014706:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8014708:	0077      	lsls	r7, r6, #1
 801470a:	463a      	mov	r2, r7
 801470c:	f000 fbc1 	bl	8014e92 <_realloc_r>
 8014710:	4605      	mov	r5, r0
 8014712:	2800      	cmp	r0, #0
 8014714:	d0de      	beq.n	80146d4 <__submore+0x1a>
 8014716:	eb00 0806 	add.w	r8, r0, r6
 801471a:	4601      	mov	r1, r0
 801471c:	4632      	mov	r2, r6
 801471e:	4640      	mov	r0, r8
 8014720:	f7fc ffdb 	bl	80116da <memcpy>
 8014724:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8014728:	f8c4 8000 	str.w	r8, [r4]
 801472c:	e7e9      	b.n	8014702 <__submore+0x48>

0801472e <memmove>:
 801472e:	4288      	cmp	r0, r1
 8014730:	b510      	push	{r4, lr}
 8014732:	eb01 0402 	add.w	r4, r1, r2
 8014736:	d902      	bls.n	801473e <memmove+0x10>
 8014738:	4284      	cmp	r4, r0
 801473a:	4623      	mov	r3, r4
 801473c:	d807      	bhi.n	801474e <memmove+0x20>
 801473e:	1e43      	subs	r3, r0, #1
 8014740:	42a1      	cmp	r1, r4
 8014742:	d008      	beq.n	8014756 <memmove+0x28>
 8014744:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014748:	f803 2f01 	strb.w	r2, [r3, #1]!
 801474c:	e7f8      	b.n	8014740 <memmove+0x12>
 801474e:	4402      	add	r2, r0
 8014750:	4601      	mov	r1, r0
 8014752:	428a      	cmp	r2, r1
 8014754:	d100      	bne.n	8014758 <memmove+0x2a>
 8014756:	bd10      	pop	{r4, pc}
 8014758:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801475c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014760:	e7f7      	b.n	8014752 <memmove+0x24>
	...

08014764 <_sbrk_r>:
 8014764:	b538      	push	{r3, r4, r5, lr}
 8014766:	4d06      	ldr	r5, [pc, #24]	@ (8014780 <_sbrk_r+0x1c>)
 8014768:	2300      	movs	r3, #0
 801476a:	4604      	mov	r4, r0
 801476c:	4608      	mov	r0, r1
 801476e:	602b      	str	r3, [r5, #0]
 8014770:	f7ef fc58 	bl	8004024 <_sbrk>
 8014774:	1c43      	adds	r3, r0, #1
 8014776:	d102      	bne.n	801477e <_sbrk_r+0x1a>
 8014778:	682b      	ldr	r3, [r5, #0]
 801477a:	b103      	cbz	r3, 801477e <_sbrk_r+0x1a>
 801477c:	6023      	str	r3, [r4, #0]
 801477e:	bd38      	pop	{r3, r4, r5, pc}
 8014780:	2000267c 	.word	0x2000267c
 8014784:	00000000 	.word	0x00000000

08014788 <nan>:
 8014788:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014790 <nan+0x8>
 801478c:	4770      	bx	lr
 801478e:	bf00      	nop
 8014790:	00000000 	.word	0x00000000
 8014794:	7ff80000 	.word	0x7ff80000

08014798 <__assert_func>:
 8014798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801479a:	4614      	mov	r4, r2
 801479c:	461a      	mov	r2, r3
 801479e:	4b09      	ldr	r3, [pc, #36]	@ (80147c4 <__assert_func+0x2c>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	4605      	mov	r5, r0
 80147a4:	68d8      	ldr	r0, [r3, #12]
 80147a6:	b954      	cbnz	r4, 80147be <__assert_func+0x26>
 80147a8:	4b07      	ldr	r3, [pc, #28]	@ (80147c8 <__assert_func+0x30>)
 80147aa:	461c      	mov	r4, r3
 80147ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80147b0:	9100      	str	r1, [sp, #0]
 80147b2:	462b      	mov	r3, r5
 80147b4:	4905      	ldr	r1, [pc, #20]	@ (80147cc <__assert_func+0x34>)
 80147b6:	f000 fc19 	bl	8014fec <fiprintf>
 80147ba:	f000 fc29 	bl	8015010 <abort>
 80147be:	4b04      	ldr	r3, [pc, #16]	@ (80147d0 <__assert_func+0x38>)
 80147c0:	e7f4      	b.n	80147ac <__assert_func+0x14>
 80147c2:	bf00      	nop
 80147c4:	200001b4 	.word	0x200001b4
 80147c8:	08017150 	.word	0x08017150
 80147cc:	08017122 	.word	0x08017122
 80147d0:	08017115 	.word	0x08017115

080147d4 <_calloc_r>:
 80147d4:	b570      	push	{r4, r5, r6, lr}
 80147d6:	fba1 5402 	umull	r5, r4, r1, r2
 80147da:	b93c      	cbnz	r4, 80147ec <_calloc_r+0x18>
 80147dc:	4629      	mov	r1, r5
 80147de:	f7fd fe53 	bl	8012488 <_malloc_r>
 80147e2:	4606      	mov	r6, r0
 80147e4:	b928      	cbnz	r0, 80147f2 <_calloc_r+0x1e>
 80147e6:	2600      	movs	r6, #0
 80147e8:	4630      	mov	r0, r6
 80147ea:	bd70      	pop	{r4, r5, r6, pc}
 80147ec:	220c      	movs	r2, #12
 80147ee:	6002      	str	r2, [r0, #0]
 80147f0:	e7f9      	b.n	80147e6 <_calloc_r+0x12>
 80147f2:	462a      	mov	r2, r5
 80147f4:	4621      	mov	r1, r4
 80147f6:	f7fc fede 	bl	80115b6 <memset>
 80147fa:	e7f5      	b.n	80147e8 <_calloc_r+0x14>

080147fc <rshift>:
 80147fc:	6903      	ldr	r3, [r0, #16]
 80147fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014802:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014806:	ea4f 1261 	mov.w	r2, r1, asr #5
 801480a:	f100 0414 	add.w	r4, r0, #20
 801480e:	dd45      	ble.n	801489c <rshift+0xa0>
 8014810:	f011 011f 	ands.w	r1, r1, #31
 8014814:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014818:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801481c:	d10c      	bne.n	8014838 <rshift+0x3c>
 801481e:	f100 0710 	add.w	r7, r0, #16
 8014822:	4629      	mov	r1, r5
 8014824:	42b1      	cmp	r1, r6
 8014826:	d334      	bcc.n	8014892 <rshift+0x96>
 8014828:	1a9b      	subs	r3, r3, r2
 801482a:	009b      	lsls	r3, r3, #2
 801482c:	1eea      	subs	r2, r5, #3
 801482e:	4296      	cmp	r6, r2
 8014830:	bf38      	it	cc
 8014832:	2300      	movcc	r3, #0
 8014834:	4423      	add	r3, r4
 8014836:	e015      	b.n	8014864 <rshift+0x68>
 8014838:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801483c:	f1c1 0820 	rsb	r8, r1, #32
 8014840:	40cf      	lsrs	r7, r1
 8014842:	f105 0e04 	add.w	lr, r5, #4
 8014846:	46a1      	mov	r9, r4
 8014848:	4576      	cmp	r6, lr
 801484a:	46f4      	mov	ip, lr
 801484c:	d815      	bhi.n	801487a <rshift+0x7e>
 801484e:	1a9a      	subs	r2, r3, r2
 8014850:	0092      	lsls	r2, r2, #2
 8014852:	3a04      	subs	r2, #4
 8014854:	3501      	adds	r5, #1
 8014856:	42ae      	cmp	r6, r5
 8014858:	bf38      	it	cc
 801485a:	2200      	movcc	r2, #0
 801485c:	18a3      	adds	r3, r4, r2
 801485e:	50a7      	str	r7, [r4, r2]
 8014860:	b107      	cbz	r7, 8014864 <rshift+0x68>
 8014862:	3304      	adds	r3, #4
 8014864:	1b1a      	subs	r2, r3, r4
 8014866:	42a3      	cmp	r3, r4
 8014868:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801486c:	bf08      	it	eq
 801486e:	2300      	moveq	r3, #0
 8014870:	6102      	str	r2, [r0, #16]
 8014872:	bf08      	it	eq
 8014874:	6143      	streq	r3, [r0, #20]
 8014876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801487a:	f8dc c000 	ldr.w	ip, [ip]
 801487e:	fa0c fc08 	lsl.w	ip, ip, r8
 8014882:	ea4c 0707 	orr.w	r7, ip, r7
 8014886:	f849 7b04 	str.w	r7, [r9], #4
 801488a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801488e:	40cf      	lsrs	r7, r1
 8014890:	e7da      	b.n	8014848 <rshift+0x4c>
 8014892:	f851 cb04 	ldr.w	ip, [r1], #4
 8014896:	f847 cf04 	str.w	ip, [r7, #4]!
 801489a:	e7c3      	b.n	8014824 <rshift+0x28>
 801489c:	4623      	mov	r3, r4
 801489e:	e7e1      	b.n	8014864 <rshift+0x68>

080148a0 <__hexdig_fun>:
 80148a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80148a4:	2b09      	cmp	r3, #9
 80148a6:	d802      	bhi.n	80148ae <__hexdig_fun+0xe>
 80148a8:	3820      	subs	r0, #32
 80148aa:	b2c0      	uxtb	r0, r0
 80148ac:	4770      	bx	lr
 80148ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80148b2:	2b05      	cmp	r3, #5
 80148b4:	d801      	bhi.n	80148ba <__hexdig_fun+0x1a>
 80148b6:	3847      	subs	r0, #71	@ 0x47
 80148b8:	e7f7      	b.n	80148aa <__hexdig_fun+0xa>
 80148ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80148be:	2b05      	cmp	r3, #5
 80148c0:	d801      	bhi.n	80148c6 <__hexdig_fun+0x26>
 80148c2:	3827      	subs	r0, #39	@ 0x27
 80148c4:	e7f1      	b.n	80148aa <__hexdig_fun+0xa>
 80148c6:	2000      	movs	r0, #0
 80148c8:	4770      	bx	lr
	...

080148cc <__gethex>:
 80148cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148d0:	b085      	sub	sp, #20
 80148d2:	468a      	mov	sl, r1
 80148d4:	9302      	str	r3, [sp, #8]
 80148d6:	680b      	ldr	r3, [r1, #0]
 80148d8:	9001      	str	r0, [sp, #4]
 80148da:	4690      	mov	r8, r2
 80148dc:	1c9c      	adds	r4, r3, #2
 80148de:	46a1      	mov	r9, r4
 80148e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80148e4:	2830      	cmp	r0, #48	@ 0x30
 80148e6:	d0fa      	beq.n	80148de <__gethex+0x12>
 80148e8:	eba9 0303 	sub.w	r3, r9, r3
 80148ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80148f0:	f7ff ffd6 	bl	80148a0 <__hexdig_fun>
 80148f4:	4605      	mov	r5, r0
 80148f6:	2800      	cmp	r0, #0
 80148f8:	d168      	bne.n	80149cc <__gethex+0x100>
 80148fa:	49a0      	ldr	r1, [pc, #640]	@ (8014b7c <__gethex+0x2b0>)
 80148fc:	2201      	movs	r2, #1
 80148fe:	4648      	mov	r0, r9
 8014900:	f7fc fe61 	bl	80115c6 <strncmp>
 8014904:	4607      	mov	r7, r0
 8014906:	2800      	cmp	r0, #0
 8014908:	d167      	bne.n	80149da <__gethex+0x10e>
 801490a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801490e:	4626      	mov	r6, r4
 8014910:	f7ff ffc6 	bl	80148a0 <__hexdig_fun>
 8014914:	2800      	cmp	r0, #0
 8014916:	d062      	beq.n	80149de <__gethex+0x112>
 8014918:	4623      	mov	r3, r4
 801491a:	7818      	ldrb	r0, [r3, #0]
 801491c:	2830      	cmp	r0, #48	@ 0x30
 801491e:	4699      	mov	r9, r3
 8014920:	f103 0301 	add.w	r3, r3, #1
 8014924:	d0f9      	beq.n	801491a <__gethex+0x4e>
 8014926:	f7ff ffbb 	bl	80148a0 <__hexdig_fun>
 801492a:	fab0 f580 	clz	r5, r0
 801492e:	096d      	lsrs	r5, r5, #5
 8014930:	f04f 0b01 	mov.w	fp, #1
 8014934:	464a      	mov	r2, r9
 8014936:	4616      	mov	r6, r2
 8014938:	3201      	adds	r2, #1
 801493a:	7830      	ldrb	r0, [r6, #0]
 801493c:	f7ff ffb0 	bl	80148a0 <__hexdig_fun>
 8014940:	2800      	cmp	r0, #0
 8014942:	d1f8      	bne.n	8014936 <__gethex+0x6a>
 8014944:	498d      	ldr	r1, [pc, #564]	@ (8014b7c <__gethex+0x2b0>)
 8014946:	2201      	movs	r2, #1
 8014948:	4630      	mov	r0, r6
 801494a:	f7fc fe3c 	bl	80115c6 <strncmp>
 801494e:	2800      	cmp	r0, #0
 8014950:	d13f      	bne.n	80149d2 <__gethex+0x106>
 8014952:	b944      	cbnz	r4, 8014966 <__gethex+0x9a>
 8014954:	1c74      	adds	r4, r6, #1
 8014956:	4622      	mov	r2, r4
 8014958:	4616      	mov	r6, r2
 801495a:	3201      	adds	r2, #1
 801495c:	7830      	ldrb	r0, [r6, #0]
 801495e:	f7ff ff9f 	bl	80148a0 <__hexdig_fun>
 8014962:	2800      	cmp	r0, #0
 8014964:	d1f8      	bne.n	8014958 <__gethex+0x8c>
 8014966:	1ba4      	subs	r4, r4, r6
 8014968:	00a7      	lsls	r7, r4, #2
 801496a:	7833      	ldrb	r3, [r6, #0]
 801496c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014970:	2b50      	cmp	r3, #80	@ 0x50
 8014972:	d13e      	bne.n	80149f2 <__gethex+0x126>
 8014974:	7873      	ldrb	r3, [r6, #1]
 8014976:	2b2b      	cmp	r3, #43	@ 0x2b
 8014978:	d033      	beq.n	80149e2 <__gethex+0x116>
 801497a:	2b2d      	cmp	r3, #45	@ 0x2d
 801497c:	d034      	beq.n	80149e8 <__gethex+0x11c>
 801497e:	1c71      	adds	r1, r6, #1
 8014980:	2400      	movs	r4, #0
 8014982:	7808      	ldrb	r0, [r1, #0]
 8014984:	f7ff ff8c 	bl	80148a0 <__hexdig_fun>
 8014988:	1e43      	subs	r3, r0, #1
 801498a:	b2db      	uxtb	r3, r3
 801498c:	2b18      	cmp	r3, #24
 801498e:	d830      	bhi.n	80149f2 <__gethex+0x126>
 8014990:	f1a0 0210 	sub.w	r2, r0, #16
 8014994:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014998:	f7ff ff82 	bl	80148a0 <__hexdig_fun>
 801499c:	f100 3cff 	add.w	ip, r0, #4294967295
 80149a0:	fa5f fc8c 	uxtb.w	ip, ip
 80149a4:	f1bc 0f18 	cmp.w	ip, #24
 80149a8:	f04f 030a 	mov.w	r3, #10
 80149ac:	d91e      	bls.n	80149ec <__gethex+0x120>
 80149ae:	b104      	cbz	r4, 80149b2 <__gethex+0xe6>
 80149b0:	4252      	negs	r2, r2
 80149b2:	4417      	add	r7, r2
 80149b4:	f8ca 1000 	str.w	r1, [sl]
 80149b8:	b1ed      	cbz	r5, 80149f6 <__gethex+0x12a>
 80149ba:	f1bb 0f00 	cmp.w	fp, #0
 80149be:	bf0c      	ite	eq
 80149c0:	2506      	moveq	r5, #6
 80149c2:	2500      	movne	r5, #0
 80149c4:	4628      	mov	r0, r5
 80149c6:	b005      	add	sp, #20
 80149c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149cc:	2500      	movs	r5, #0
 80149ce:	462c      	mov	r4, r5
 80149d0:	e7b0      	b.n	8014934 <__gethex+0x68>
 80149d2:	2c00      	cmp	r4, #0
 80149d4:	d1c7      	bne.n	8014966 <__gethex+0x9a>
 80149d6:	4627      	mov	r7, r4
 80149d8:	e7c7      	b.n	801496a <__gethex+0x9e>
 80149da:	464e      	mov	r6, r9
 80149dc:	462f      	mov	r7, r5
 80149de:	2501      	movs	r5, #1
 80149e0:	e7c3      	b.n	801496a <__gethex+0x9e>
 80149e2:	2400      	movs	r4, #0
 80149e4:	1cb1      	adds	r1, r6, #2
 80149e6:	e7cc      	b.n	8014982 <__gethex+0xb6>
 80149e8:	2401      	movs	r4, #1
 80149ea:	e7fb      	b.n	80149e4 <__gethex+0x118>
 80149ec:	fb03 0002 	mla	r0, r3, r2, r0
 80149f0:	e7ce      	b.n	8014990 <__gethex+0xc4>
 80149f2:	4631      	mov	r1, r6
 80149f4:	e7de      	b.n	80149b4 <__gethex+0xe8>
 80149f6:	eba6 0309 	sub.w	r3, r6, r9
 80149fa:	3b01      	subs	r3, #1
 80149fc:	4629      	mov	r1, r5
 80149fe:	2b07      	cmp	r3, #7
 8014a00:	dc0a      	bgt.n	8014a18 <__gethex+0x14c>
 8014a02:	9801      	ldr	r0, [sp, #4]
 8014a04:	f7fd fdcc 	bl	80125a0 <_Balloc>
 8014a08:	4604      	mov	r4, r0
 8014a0a:	b940      	cbnz	r0, 8014a1e <__gethex+0x152>
 8014a0c:	4b5c      	ldr	r3, [pc, #368]	@ (8014b80 <__gethex+0x2b4>)
 8014a0e:	4602      	mov	r2, r0
 8014a10:	21e4      	movs	r1, #228	@ 0xe4
 8014a12:	485c      	ldr	r0, [pc, #368]	@ (8014b84 <__gethex+0x2b8>)
 8014a14:	f7ff fec0 	bl	8014798 <__assert_func>
 8014a18:	3101      	adds	r1, #1
 8014a1a:	105b      	asrs	r3, r3, #1
 8014a1c:	e7ef      	b.n	80149fe <__gethex+0x132>
 8014a1e:	f100 0a14 	add.w	sl, r0, #20
 8014a22:	2300      	movs	r3, #0
 8014a24:	4655      	mov	r5, sl
 8014a26:	469b      	mov	fp, r3
 8014a28:	45b1      	cmp	r9, r6
 8014a2a:	d337      	bcc.n	8014a9c <__gethex+0x1d0>
 8014a2c:	f845 bb04 	str.w	fp, [r5], #4
 8014a30:	eba5 050a 	sub.w	r5, r5, sl
 8014a34:	10ad      	asrs	r5, r5, #2
 8014a36:	6125      	str	r5, [r4, #16]
 8014a38:	4658      	mov	r0, fp
 8014a3a:	f7fd fea3 	bl	8012784 <__hi0bits>
 8014a3e:	016d      	lsls	r5, r5, #5
 8014a40:	f8d8 6000 	ldr.w	r6, [r8]
 8014a44:	1a2d      	subs	r5, r5, r0
 8014a46:	42b5      	cmp	r5, r6
 8014a48:	dd54      	ble.n	8014af4 <__gethex+0x228>
 8014a4a:	1bad      	subs	r5, r5, r6
 8014a4c:	4629      	mov	r1, r5
 8014a4e:	4620      	mov	r0, r4
 8014a50:	f7fe fa37 	bl	8012ec2 <__any_on>
 8014a54:	4681      	mov	r9, r0
 8014a56:	b178      	cbz	r0, 8014a78 <__gethex+0x1ac>
 8014a58:	1e6b      	subs	r3, r5, #1
 8014a5a:	1159      	asrs	r1, r3, #5
 8014a5c:	f003 021f 	and.w	r2, r3, #31
 8014a60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014a64:	f04f 0901 	mov.w	r9, #1
 8014a68:	fa09 f202 	lsl.w	r2, r9, r2
 8014a6c:	420a      	tst	r2, r1
 8014a6e:	d003      	beq.n	8014a78 <__gethex+0x1ac>
 8014a70:	454b      	cmp	r3, r9
 8014a72:	dc36      	bgt.n	8014ae2 <__gethex+0x216>
 8014a74:	f04f 0902 	mov.w	r9, #2
 8014a78:	4629      	mov	r1, r5
 8014a7a:	4620      	mov	r0, r4
 8014a7c:	f7ff febe 	bl	80147fc <rshift>
 8014a80:	442f      	add	r7, r5
 8014a82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014a86:	42bb      	cmp	r3, r7
 8014a88:	da42      	bge.n	8014b10 <__gethex+0x244>
 8014a8a:	9801      	ldr	r0, [sp, #4]
 8014a8c:	4621      	mov	r1, r4
 8014a8e:	f7fd fdc7 	bl	8012620 <_Bfree>
 8014a92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014a94:	2300      	movs	r3, #0
 8014a96:	6013      	str	r3, [r2, #0]
 8014a98:	25a3      	movs	r5, #163	@ 0xa3
 8014a9a:	e793      	b.n	80149c4 <__gethex+0xf8>
 8014a9c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014aa0:	2a2e      	cmp	r2, #46	@ 0x2e
 8014aa2:	d012      	beq.n	8014aca <__gethex+0x1fe>
 8014aa4:	2b20      	cmp	r3, #32
 8014aa6:	d104      	bne.n	8014ab2 <__gethex+0x1e6>
 8014aa8:	f845 bb04 	str.w	fp, [r5], #4
 8014aac:	f04f 0b00 	mov.w	fp, #0
 8014ab0:	465b      	mov	r3, fp
 8014ab2:	7830      	ldrb	r0, [r6, #0]
 8014ab4:	9303      	str	r3, [sp, #12]
 8014ab6:	f7ff fef3 	bl	80148a0 <__hexdig_fun>
 8014aba:	9b03      	ldr	r3, [sp, #12]
 8014abc:	f000 000f 	and.w	r0, r0, #15
 8014ac0:	4098      	lsls	r0, r3
 8014ac2:	ea4b 0b00 	orr.w	fp, fp, r0
 8014ac6:	3304      	adds	r3, #4
 8014ac8:	e7ae      	b.n	8014a28 <__gethex+0x15c>
 8014aca:	45b1      	cmp	r9, r6
 8014acc:	d8ea      	bhi.n	8014aa4 <__gethex+0x1d8>
 8014ace:	492b      	ldr	r1, [pc, #172]	@ (8014b7c <__gethex+0x2b0>)
 8014ad0:	9303      	str	r3, [sp, #12]
 8014ad2:	2201      	movs	r2, #1
 8014ad4:	4630      	mov	r0, r6
 8014ad6:	f7fc fd76 	bl	80115c6 <strncmp>
 8014ada:	9b03      	ldr	r3, [sp, #12]
 8014adc:	2800      	cmp	r0, #0
 8014ade:	d1e1      	bne.n	8014aa4 <__gethex+0x1d8>
 8014ae0:	e7a2      	b.n	8014a28 <__gethex+0x15c>
 8014ae2:	1ea9      	subs	r1, r5, #2
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	f7fe f9ec 	bl	8012ec2 <__any_on>
 8014aea:	2800      	cmp	r0, #0
 8014aec:	d0c2      	beq.n	8014a74 <__gethex+0x1a8>
 8014aee:	f04f 0903 	mov.w	r9, #3
 8014af2:	e7c1      	b.n	8014a78 <__gethex+0x1ac>
 8014af4:	da09      	bge.n	8014b0a <__gethex+0x23e>
 8014af6:	1b75      	subs	r5, r6, r5
 8014af8:	4621      	mov	r1, r4
 8014afa:	9801      	ldr	r0, [sp, #4]
 8014afc:	462a      	mov	r2, r5
 8014afe:	f7fd ffa7 	bl	8012a50 <__lshift>
 8014b02:	1b7f      	subs	r7, r7, r5
 8014b04:	4604      	mov	r4, r0
 8014b06:	f100 0a14 	add.w	sl, r0, #20
 8014b0a:	f04f 0900 	mov.w	r9, #0
 8014b0e:	e7b8      	b.n	8014a82 <__gethex+0x1b6>
 8014b10:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014b14:	42bd      	cmp	r5, r7
 8014b16:	dd6f      	ble.n	8014bf8 <__gethex+0x32c>
 8014b18:	1bed      	subs	r5, r5, r7
 8014b1a:	42ae      	cmp	r6, r5
 8014b1c:	dc34      	bgt.n	8014b88 <__gethex+0x2bc>
 8014b1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014b22:	2b02      	cmp	r3, #2
 8014b24:	d022      	beq.n	8014b6c <__gethex+0x2a0>
 8014b26:	2b03      	cmp	r3, #3
 8014b28:	d024      	beq.n	8014b74 <__gethex+0x2a8>
 8014b2a:	2b01      	cmp	r3, #1
 8014b2c:	d115      	bne.n	8014b5a <__gethex+0x28e>
 8014b2e:	42ae      	cmp	r6, r5
 8014b30:	d113      	bne.n	8014b5a <__gethex+0x28e>
 8014b32:	2e01      	cmp	r6, #1
 8014b34:	d10b      	bne.n	8014b4e <__gethex+0x282>
 8014b36:	9a02      	ldr	r2, [sp, #8]
 8014b38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014b3c:	6013      	str	r3, [r2, #0]
 8014b3e:	2301      	movs	r3, #1
 8014b40:	6123      	str	r3, [r4, #16]
 8014b42:	f8ca 3000 	str.w	r3, [sl]
 8014b46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014b48:	2562      	movs	r5, #98	@ 0x62
 8014b4a:	601c      	str	r4, [r3, #0]
 8014b4c:	e73a      	b.n	80149c4 <__gethex+0xf8>
 8014b4e:	1e71      	subs	r1, r6, #1
 8014b50:	4620      	mov	r0, r4
 8014b52:	f7fe f9b6 	bl	8012ec2 <__any_on>
 8014b56:	2800      	cmp	r0, #0
 8014b58:	d1ed      	bne.n	8014b36 <__gethex+0x26a>
 8014b5a:	9801      	ldr	r0, [sp, #4]
 8014b5c:	4621      	mov	r1, r4
 8014b5e:	f7fd fd5f 	bl	8012620 <_Bfree>
 8014b62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014b64:	2300      	movs	r3, #0
 8014b66:	6013      	str	r3, [r2, #0]
 8014b68:	2550      	movs	r5, #80	@ 0x50
 8014b6a:	e72b      	b.n	80149c4 <__gethex+0xf8>
 8014b6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d1f3      	bne.n	8014b5a <__gethex+0x28e>
 8014b72:	e7e0      	b.n	8014b36 <__gethex+0x26a>
 8014b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d1dd      	bne.n	8014b36 <__gethex+0x26a>
 8014b7a:	e7ee      	b.n	8014b5a <__gethex+0x28e>
 8014b7c:	08016f88 	.word	0x08016f88
 8014b80:	08016e1b 	.word	0x08016e1b
 8014b84:	08017151 	.word	0x08017151
 8014b88:	1e6f      	subs	r7, r5, #1
 8014b8a:	f1b9 0f00 	cmp.w	r9, #0
 8014b8e:	d130      	bne.n	8014bf2 <__gethex+0x326>
 8014b90:	b127      	cbz	r7, 8014b9c <__gethex+0x2d0>
 8014b92:	4639      	mov	r1, r7
 8014b94:	4620      	mov	r0, r4
 8014b96:	f7fe f994 	bl	8012ec2 <__any_on>
 8014b9a:	4681      	mov	r9, r0
 8014b9c:	117a      	asrs	r2, r7, #5
 8014b9e:	2301      	movs	r3, #1
 8014ba0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014ba4:	f007 071f 	and.w	r7, r7, #31
 8014ba8:	40bb      	lsls	r3, r7
 8014baa:	4213      	tst	r3, r2
 8014bac:	4629      	mov	r1, r5
 8014bae:	4620      	mov	r0, r4
 8014bb0:	bf18      	it	ne
 8014bb2:	f049 0902 	orrne.w	r9, r9, #2
 8014bb6:	f7ff fe21 	bl	80147fc <rshift>
 8014bba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014bbe:	1b76      	subs	r6, r6, r5
 8014bc0:	2502      	movs	r5, #2
 8014bc2:	f1b9 0f00 	cmp.w	r9, #0
 8014bc6:	d047      	beq.n	8014c58 <__gethex+0x38c>
 8014bc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014bcc:	2b02      	cmp	r3, #2
 8014bce:	d015      	beq.n	8014bfc <__gethex+0x330>
 8014bd0:	2b03      	cmp	r3, #3
 8014bd2:	d017      	beq.n	8014c04 <__gethex+0x338>
 8014bd4:	2b01      	cmp	r3, #1
 8014bd6:	d109      	bne.n	8014bec <__gethex+0x320>
 8014bd8:	f019 0f02 	tst.w	r9, #2
 8014bdc:	d006      	beq.n	8014bec <__gethex+0x320>
 8014bde:	f8da 3000 	ldr.w	r3, [sl]
 8014be2:	ea49 0903 	orr.w	r9, r9, r3
 8014be6:	f019 0f01 	tst.w	r9, #1
 8014bea:	d10e      	bne.n	8014c0a <__gethex+0x33e>
 8014bec:	f045 0510 	orr.w	r5, r5, #16
 8014bf0:	e032      	b.n	8014c58 <__gethex+0x38c>
 8014bf2:	f04f 0901 	mov.w	r9, #1
 8014bf6:	e7d1      	b.n	8014b9c <__gethex+0x2d0>
 8014bf8:	2501      	movs	r5, #1
 8014bfa:	e7e2      	b.n	8014bc2 <__gethex+0x2f6>
 8014bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014bfe:	f1c3 0301 	rsb	r3, r3, #1
 8014c02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014c04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d0f0      	beq.n	8014bec <__gethex+0x320>
 8014c0a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014c0e:	f104 0314 	add.w	r3, r4, #20
 8014c12:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014c16:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014c1a:	f04f 0c00 	mov.w	ip, #0
 8014c1e:	4618      	mov	r0, r3
 8014c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c24:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014c28:	d01b      	beq.n	8014c62 <__gethex+0x396>
 8014c2a:	3201      	adds	r2, #1
 8014c2c:	6002      	str	r2, [r0, #0]
 8014c2e:	2d02      	cmp	r5, #2
 8014c30:	f104 0314 	add.w	r3, r4, #20
 8014c34:	d13c      	bne.n	8014cb0 <__gethex+0x3e4>
 8014c36:	f8d8 2000 	ldr.w	r2, [r8]
 8014c3a:	3a01      	subs	r2, #1
 8014c3c:	42b2      	cmp	r2, r6
 8014c3e:	d109      	bne.n	8014c54 <__gethex+0x388>
 8014c40:	1171      	asrs	r1, r6, #5
 8014c42:	2201      	movs	r2, #1
 8014c44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014c48:	f006 061f 	and.w	r6, r6, #31
 8014c4c:	fa02 f606 	lsl.w	r6, r2, r6
 8014c50:	421e      	tst	r6, r3
 8014c52:	d13a      	bne.n	8014cca <__gethex+0x3fe>
 8014c54:	f045 0520 	orr.w	r5, r5, #32
 8014c58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c5a:	601c      	str	r4, [r3, #0]
 8014c5c:	9b02      	ldr	r3, [sp, #8]
 8014c5e:	601f      	str	r7, [r3, #0]
 8014c60:	e6b0      	b.n	80149c4 <__gethex+0xf8>
 8014c62:	4299      	cmp	r1, r3
 8014c64:	f843 cc04 	str.w	ip, [r3, #-4]
 8014c68:	d8d9      	bhi.n	8014c1e <__gethex+0x352>
 8014c6a:	68a3      	ldr	r3, [r4, #8]
 8014c6c:	459b      	cmp	fp, r3
 8014c6e:	db17      	blt.n	8014ca0 <__gethex+0x3d4>
 8014c70:	6861      	ldr	r1, [r4, #4]
 8014c72:	9801      	ldr	r0, [sp, #4]
 8014c74:	3101      	adds	r1, #1
 8014c76:	f7fd fc93 	bl	80125a0 <_Balloc>
 8014c7a:	4681      	mov	r9, r0
 8014c7c:	b918      	cbnz	r0, 8014c86 <__gethex+0x3ba>
 8014c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8014ce8 <__gethex+0x41c>)
 8014c80:	4602      	mov	r2, r0
 8014c82:	2184      	movs	r1, #132	@ 0x84
 8014c84:	e6c5      	b.n	8014a12 <__gethex+0x146>
 8014c86:	6922      	ldr	r2, [r4, #16]
 8014c88:	3202      	adds	r2, #2
 8014c8a:	f104 010c 	add.w	r1, r4, #12
 8014c8e:	0092      	lsls	r2, r2, #2
 8014c90:	300c      	adds	r0, #12
 8014c92:	f7fc fd22 	bl	80116da <memcpy>
 8014c96:	4621      	mov	r1, r4
 8014c98:	9801      	ldr	r0, [sp, #4]
 8014c9a:	f7fd fcc1 	bl	8012620 <_Bfree>
 8014c9e:	464c      	mov	r4, r9
 8014ca0:	6923      	ldr	r3, [r4, #16]
 8014ca2:	1c5a      	adds	r2, r3, #1
 8014ca4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014ca8:	6122      	str	r2, [r4, #16]
 8014caa:	2201      	movs	r2, #1
 8014cac:	615a      	str	r2, [r3, #20]
 8014cae:	e7be      	b.n	8014c2e <__gethex+0x362>
 8014cb0:	6922      	ldr	r2, [r4, #16]
 8014cb2:	455a      	cmp	r2, fp
 8014cb4:	dd0b      	ble.n	8014cce <__gethex+0x402>
 8014cb6:	2101      	movs	r1, #1
 8014cb8:	4620      	mov	r0, r4
 8014cba:	f7ff fd9f 	bl	80147fc <rshift>
 8014cbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014cc2:	3701      	adds	r7, #1
 8014cc4:	42bb      	cmp	r3, r7
 8014cc6:	f6ff aee0 	blt.w	8014a8a <__gethex+0x1be>
 8014cca:	2501      	movs	r5, #1
 8014ccc:	e7c2      	b.n	8014c54 <__gethex+0x388>
 8014cce:	f016 061f 	ands.w	r6, r6, #31
 8014cd2:	d0fa      	beq.n	8014cca <__gethex+0x3fe>
 8014cd4:	4453      	add	r3, sl
 8014cd6:	f1c6 0620 	rsb	r6, r6, #32
 8014cda:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014cde:	f7fd fd51 	bl	8012784 <__hi0bits>
 8014ce2:	42b0      	cmp	r0, r6
 8014ce4:	dbe7      	blt.n	8014cb6 <__gethex+0x3ea>
 8014ce6:	e7f0      	b.n	8014cca <__gethex+0x3fe>
 8014ce8:	08016e1b 	.word	0x08016e1b

08014cec <L_shift>:
 8014cec:	f1c2 0208 	rsb	r2, r2, #8
 8014cf0:	0092      	lsls	r2, r2, #2
 8014cf2:	b570      	push	{r4, r5, r6, lr}
 8014cf4:	f1c2 0620 	rsb	r6, r2, #32
 8014cf8:	6843      	ldr	r3, [r0, #4]
 8014cfa:	6804      	ldr	r4, [r0, #0]
 8014cfc:	fa03 f506 	lsl.w	r5, r3, r6
 8014d00:	432c      	orrs	r4, r5
 8014d02:	40d3      	lsrs	r3, r2
 8014d04:	6004      	str	r4, [r0, #0]
 8014d06:	f840 3f04 	str.w	r3, [r0, #4]!
 8014d0a:	4288      	cmp	r0, r1
 8014d0c:	d3f4      	bcc.n	8014cf8 <L_shift+0xc>
 8014d0e:	bd70      	pop	{r4, r5, r6, pc}

08014d10 <__match>:
 8014d10:	b530      	push	{r4, r5, lr}
 8014d12:	6803      	ldr	r3, [r0, #0]
 8014d14:	3301      	adds	r3, #1
 8014d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d1a:	b914      	cbnz	r4, 8014d22 <__match+0x12>
 8014d1c:	6003      	str	r3, [r0, #0]
 8014d1e:	2001      	movs	r0, #1
 8014d20:	bd30      	pop	{r4, r5, pc}
 8014d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d26:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014d2a:	2d19      	cmp	r5, #25
 8014d2c:	bf98      	it	ls
 8014d2e:	3220      	addls	r2, #32
 8014d30:	42a2      	cmp	r2, r4
 8014d32:	d0f0      	beq.n	8014d16 <__match+0x6>
 8014d34:	2000      	movs	r0, #0
 8014d36:	e7f3      	b.n	8014d20 <__match+0x10>

08014d38 <__hexnan>:
 8014d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d3c:	680b      	ldr	r3, [r1, #0]
 8014d3e:	6801      	ldr	r1, [r0, #0]
 8014d40:	115e      	asrs	r6, r3, #5
 8014d42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014d46:	f013 031f 	ands.w	r3, r3, #31
 8014d4a:	b087      	sub	sp, #28
 8014d4c:	bf18      	it	ne
 8014d4e:	3604      	addne	r6, #4
 8014d50:	2500      	movs	r5, #0
 8014d52:	1f37      	subs	r7, r6, #4
 8014d54:	4682      	mov	sl, r0
 8014d56:	4690      	mov	r8, r2
 8014d58:	9301      	str	r3, [sp, #4]
 8014d5a:	f846 5c04 	str.w	r5, [r6, #-4]
 8014d5e:	46b9      	mov	r9, r7
 8014d60:	463c      	mov	r4, r7
 8014d62:	9502      	str	r5, [sp, #8]
 8014d64:	46ab      	mov	fp, r5
 8014d66:	784a      	ldrb	r2, [r1, #1]
 8014d68:	1c4b      	adds	r3, r1, #1
 8014d6a:	9303      	str	r3, [sp, #12]
 8014d6c:	b342      	cbz	r2, 8014dc0 <__hexnan+0x88>
 8014d6e:	4610      	mov	r0, r2
 8014d70:	9105      	str	r1, [sp, #20]
 8014d72:	9204      	str	r2, [sp, #16]
 8014d74:	f7ff fd94 	bl	80148a0 <__hexdig_fun>
 8014d78:	2800      	cmp	r0, #0
 8014d7a:	d151      	bne.n	8014e20 <__hexnan+0xe8>
 8014d7c:	9a04      	ldr	r2, [sp, #16]
 8014d7e:	9905      	ldr	r1, [sp, #20]
 8014d80:	2a20      	cmp	r2, #32
 8014d82:	d818      	bhi.n	8014db6 <__hexnan+0x7e>
 8014d84:	9b02      	ldr	r3, [sp, #8]
 8014d86:	459b      	cmp	fp, r3
 8014d88:	dd13      	ble.n	8014db2 <__hexnan+0x7a>
 8014d8a:	454c      	cmp	r4, r9
 8014d8c:	d206      	bcs.n	8014d9c <__hexnan+0x64>
 8014d8e:	2d07      	cmp	r5, #7
 8014d90:	dc04      	bgt.n	8014d9c <__hexnan+0x64>
 8014d92:	462a      	mov	r2, r5
 8014d94:	4649      	mov	r1, r9
 8014d96:	4620      	mov	r0, r4
 8014d98:	f7ff ffa8 	bl	8014cec <L_shift>
 8014d9c:	4544      	cmp	r4, r8
 8014d9e:	d952      	bls.n	8014e46 <__hexnan+0x10e>
 8014da0:	2300      	movs	r3, #0
 8014da2:	f1a4 0904 	sub.w	r9, r4, #4
 8014da6:	f844 3c04 	str.w	r3, [r4, #-4]
 8014daa:	f8cd b008 	str.w	fp, [sp, #8]
 8014dae:	464c      	mov	r4, r9
 8014db0:	461d      	mov	r5, r3
 8014db2:	9903      	ldr	r1, [sp, #12]
 8014db4:	e7d7      	b.n	8014d66 <__hexnan+0x2e>
 8014db6:	2a29      	cmp	r2, #41	@ 0x29
 8014db8:	d157      	bne.n	8014e6a <__hexnan+0x132>
 8014dba:	3102      	adds	r1, #2
 8014dbc:	f8ca 1000 	str.w	r1, [sl]
 8014dc0:	f1bb 0f00 	cmp.w	fp, #0
 8014dc4:	d051      	beq.n	8014e6a <__hexnan+0x132>
 8014dc6:	454c      	cmp	r4, r9
 8014dc8:	d206      	bcs.n	8014dd8 <__hexnan+0xa0>
 8014dca:	2d07      	cmp	r5, #7
 8014dcc:	dc04      	bgt.n	8014dd8 <__hexnan+0xa0>
 8014dce:	462a      	mov	r2, r5
 8014dd0:	4649      	mov	r1, r9
 8014dd2:	4620      	mov	r0, r4
 8014dd4:	f7ff ff8a 	bl	8014cec <L_shift>
 8014dd8:	4544      	cmp	r4, r8
 8014dda:	d936      	bls.n	8014e4a <__hexnan+0x112>
 8014ddc:	f1a8 0204 	sub.w	r2, r8, #4
 8014de0:	4623      	mov	r3, r4
 8014de2:	f853 1b04 	ldr.w	r1, [r3], #4
 8014de6:	f842 1f04 	str.w	r1, [r2, #4]!
 8014dea:	429f      	cmp	r7, r3
 8014dec:	d2f9      	bcs.n	8014de2 <__hexnan+0xaa>
 8014dee:	1b3b      	subs	r3, r7, r4
 8014df0:	f023 0303 	bic.w	r3, r3, #3
 8014df4:	3304      	adds	r3, #4
 8014df6:	3401      	adds	r4, #1
 8014df8:	3e03      	subs	r6, #3
 8014dfa:	42b4      	cmp	r4, r6
 8014dfc:	bf88      	it	hi
 8014dfe:	2304      	movhi	r3, #4
 8014e00:	4443      	add	r3, r8
 8014e02:	2200      	movs	r2, #0
 8014e04:	f843 2b04 	str.w	r2, [r3], #4
 8014e08:	429f      	cmp	r7, r3
 8014e0a:	d2fb      	bcs.n	8014e04 <__hexnan+0xcc>
 8014e0c:	683b      	ldr	r3, [r7, #0]
 8014e0e:	b91b      	cbnz	r3, 8014e18 <__hexnan+0xe0>
 8014e10:	4547      	cmp	r7, r8
 8014e12:	d128      	bne.n	8014e66 <__hexnan+0x12e>
 8014e14:	2301      	movs	r3, #1
 8014e16:	603b      	str	r3, [r7, #0]
 8014e18:	2005      	movs	r0, #5
 8014e1a:	b007      	add	sp, #28
 8014e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e20:	3501      	adds	r5, #1
 8014e22:	2d08      	cmp	r5, #8
 8014e24:	f10b 0b01 	add.w	fp, fp, #1
 8014e28:	dd06      	ble.n	8014e38 <__hexnan+0x100>
 8014e2a:	4544      	cmp	r4, r8
 8014e2c:	d9c1      	bls.n	8014db2 <__hexnan+0x7a>
 8014e2e:	2300      	movs	r3, #0
 8014e30:	f844 3c04 	str.w	r3, [r4, #-4]
 8014e34:	2501      	movs	r5, #1
 8014e36:	3c04      	subs	r4, #4
 8014e38:	6822      	ldr	r2, [r4, #0]
 8014e3a:	f000 000f 	and.w	r0, r0, #15
 8014e3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014e42:	6020      	str	r0, [r4, #0]
 8014e44:	e7b5      	b.n	8014db2 <__hexnan+0x7a>
 8014e46:	2508      	movs	r5, #8
 8014e48:	e7b3      	b.n	8014db2 <__hexnan+0x7a>
 8014e4a:	9b01      	ldr	r3, [sp, #4]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d0dd      	beq.n	8014e0c <__hexnan+0xd4>
 8014e50:	f1c3 0320 	rsb	r3, r3, #32
 8014e54:	f04f 32ff 	mov.w	r2, #4294967295
 8014e58:	40da      	lsrs	r2, r3
 8014e5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014e5e:	4013      	ands	r3, r2
 8014e60:	f846 3c04 	str.w	r3, [r6, #-4]
 8014e64:	e7d2      	b.n	8014e0c <__hexnan+0xd4>
 8014e66:	3f04      	subs	r7, #4
 8014e68:	e7d0      	b.n	8014e0c <__hexnan+0xd4>
 8014e6a:	2004      	movs	r0, #4
 8014e6c:	e7d5      	b.n	8014e1a <__hexnan+0xe2>

08014e6e <__ascii_mbtowc>:
 8014e6e:	b082      	sub	sp, #8
 8014e70:	b901      	cbnz	r1, 8014e74 <__ascii_mbtowc+0x6>
 8014e72:	a901      	add	r1, sp, #4
 8014e74:	b142      	cbz	r2, 8014e88 <__ascii_mbtowc+0x1a>
 8014e76:	b14b      	cbz	r3, 8014e8c <__ascii_mbtowc+0x1e>
 8014e78:	7813      	ldrb	r3, [r2, #0]
 8014e7a:	600b      	str	r3, [r1, #0]
 8014e7c:	7812      	ldrb	r2, [r2, #0]
 8014e7e:	1e10      	subs	r0, r2, #0
 8014e80:	bf18      	it	ne
 8014e82:	2001      	movne	r0, #1
 8014e84:	b002      	add	sp, #8
 8014e86:	4770      	bx	lr
 8014e88:	4610      	mov	r0, r2
 8014e8a:	e7fb      	b.n	8014e84 <__ascii_mbtowc+0x16>
 8014e8c:	f06f 0001 	mvn.w	r0, #1
 8014e90:	e7f8      	b.n	8014e84 <__ascii_mbtowc+0x16>

08014e92 <_realloc_r>:
 8014e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e96:	4680      	mov	r8, r0
 8014e98:	4615      	mov	r5, r2
 8014e9a:	460c      	mov	r4, r1
 8014e9c:	b921      	cbnz	r1, 8014ea8 <_realloc_r+0x16>
 8014e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ea2:	4611      	mov	r1, r2
 8014ea4:	f7fd baf0 	b.w	8012488 <_malloc_r>
 8014ea8:	b92a      	cbnz	r2, 8014eb6 <_realloc_r+0x24>
 8014eaa:	f7fd fa79 	bl	80123a0 <_free_r>
 8014eae:	2400      	movs	r4, #0
 8014eb0:	4620      	mov	r0, r4
 8014eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eb6:	f000 f8b2 	bl	801501e <_malloc_usable_size_r>
 8014eba:	4285      	cmp	r5, r0
 8014ebc:	4606      	mov	r6, r0
 8014ebe:	d802      	bhi.n	8014ec6 <_realloc_r+0x34>
 8014ec0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014ec4:	d8f4      	bhi.n	8014eb0 <_realloc_r+0x1e>
 8014ec6:	4629      	mov	r1, r5
 8014ec8:	4640      	mov	r0, r8
 8014eca:	f7fd fadd 	bl	8012488 <_malloc_r>
 8014ece:	4607      	mov	r7, r0
 8014ed0:	2800      	cmp	r0, #0
 8014ed2:	d0ec      	beq.n	8014eae <_realloc_r+0x1c>
 8014ed4:	42b5      	cmp	r5, r6
 8014ed6:	462a      	mov	r2, r5
 8014ed8:	4621      	mov	r1, r4
 8014eda:	bf28      	it	cs
 8014edc:	4632      	movcs	r2, r6
 8014ede:	f7fc fbfc 	bl	80116da <memcpy>
 8014ee2:	4621      	mov	r1, r4
 8014ee4:	4640      	mov	r0, r8
 8014ee6:	f7fd fa5b 	bl	80123a0 <_free_r>
 8014eea:	463c      	mov	r4, r7
 8014eec:	e7e0      	b.n	8014eb0 <_realloc_r+0x1e>
	...

08014ef0 <_strtoul_l.constprop.0>:
 8014ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ef4:	4e34      	ldr	r6, [pc, #208]	@ (8014fc8 <_strtoul_l.constprop.0+0xd8>)
 8014ef6:	4686      	mov	lr, r0
 8014ef8:	460d      	mov	r5, r1
 8014efa:	4628      	mov	r0, r5
 8014efc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f00:	5d37      	ldrb	r7, [r6, r4]
 8014f02:	f017 0708 	ands.w	r7, r7, #8
 8014f06:	d1f8      	bne.n	8014efa <_strtoul_l.constprop.0+0xa>
 8014f08:	2c2d      	cmp	r4, #45	@ 0x2d
 8014f0a:	d12f      	bne.n	8014f6c <_strtoul_l.constprop.0+0x7c>
 8014f0c:	782c      	ldrb	r4, [r5, #0]
 8014f0e:	2701      	movs	r7, #1
 8014f10:	1c85      	adds	r5, r0, #2
 8014f12:	f033 0010 	bics.w	r0, r3, #16
 8014f16:	d109      	bne.n	8014f2c <_strtoul_l.constprop.0+0x3c>
 8014f18:	2c30      	cmp	r4, #48	@ 0x30
 8014f1a:	d12c      	bne.n	8014f76 <_strtoul_l.constprop.0+0x86>
 8014f1c:	7828      	ldrb	r0, [r5, #0]
 8014f1e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8014f22:	2858      	cmp	r0, #88	@ 0x58
 8014f24:	d127      	bne.n	8014f76 <_strtoul_l.constprop.0+0x86>
 8014f26:	786c      	ldrb	r4, [r5, #1]
 8014f28:	2310      	movs	r3, #16
 8014f2a:	3502      	adds	r5, #2
 8014f2c:	f04f 38ff 	mov.w	r8, #4294967295
 8014f30:	2600      	movs	r6, #0
 8014f32:	fbb8 f8f3 	udiv	r8, r8, r3
 8014f36:	fb03 f908 	mul.w	r9, r3, r8
 8014f3a:	ea6f 0909 	mvn.w	r9, r9
 8014f3e:	4630      	mov	r0, r6
 8014f40:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8014f44:	f1bc 0f09 	cmp.w	ip, #9
 8014f48:	d81c      	bhi.n	8014f84 <_strtoul_l.constprop.0+0x94>
 8014f4a:	4664      	mov	r4, ip
 8014f4c:	42a3      	cmp	r3, r4
 8014f4e:	dd2a      	ble.n	8014fa6 <_strtoul_l.constprop.0+0xb6>
 8014f50:	f1b6 3fff 	cmp.w	r6, #4294967295
 8014f54:	d007      	beq.n	8014f66 <_strtoul_l.constprop.0+0x76>
 8014f56:	4580      	cmp	r8, r0
 8014f58:	d322      	bcc.n	8014fa0 <_strtoul_l.constprop.0+0xb0>
 8014f5a:	d101      	bne.n	8014f60 <_strtoul_l.constprop.0+0x70>
 8014f5c:	45a1      	cmp	r9, r4
 8014f5e:	db1f      	blt.n	8014fa0 <_strtoul_l.constprop.0+0xb0>
 8014f60:	fb00 4003 	mla	r0, r0, r3, r4
 8014f64:	2601      	movs	r6, #1
 8014f66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f6a:	e7e9      	b.n	8014f40 <_strtoul_l.constprop.0+0x50>
 8014f6c:	2c2b      	cmp	r4, #43	@ 0x2b
 8014f6e:	bf04      	itt	eq
 8014f70:	782c      	ldrbeq	r4, [r5, #0]
 8014f72:	1c85      	addeq	r5, r0, #2
 8014f74:	e7cd      	b.n	8014f12 <_strtoul_l.constprop.0+0x22>
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d1d8      	bne.n	8014f2c <_strtoul_l.constprop.0+0x3c>
 8014f7a:	2c30      	cmp	r4, #48	@ 0x30
 8014f7c:	bf0c      	ite	eq
 8014f7e:	2308      	moveq	r3, #8
 8014f80:	230a      	movne	r3, #10
 8014f82:	e7d3      	b.n	8014f2c <_strtoul_l.constprop.0+0x3c>
 8014f84:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8014f88:	f1bc 0f19 	cmp.w	ip, #25
 8014f8c:	d801      	bhi.n	8014f92 <_strtoul_l.constprop.0+0xa2>
 8014f8e:	3c37      	subs	r4, #55	@ 0x37
 8014f90:	e7dc      	b.n	8014f4c <_strtoul_l.constprop.0+0x5c>
 8014f92:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8014f96:	f1bc 0f19 	cmp.w	ip, #25
 8014f9a:	d804      	bhi.n	8014fa6 <_strtoul_l.constprop.0+0xb6>
 8014f9c:	3c57      	subs	r4, #87	@ 0x57
 8014f9e:	e7d5      	b.n	8014f4c <_strtoul_l.constprop.0+0x5c>
 8014fa0:	f04f 36ff 	mov.w	r6, #4294967295
 8014fa4:	e7df      	b.n	8014f66 <_strtoul_l.constprop.0+0x76>
 8014fa6:	1c73      	adds	r3, r6, #1
 8014fa8:	d106      	bne.n	8014fb8 <_strtoul_l.constprop.0+0xc8>
 8014faa:	2322      	movs	r3, #34	@ 0x22
 8014fac:	f8ce 3000 	str.w	r3, [lr]
 8014fb0:	4630      	mov	r0, r6
 8014fb2:	b932      	cbnz	r2, 8014fc2 <_strtoul_l.constprop.0+0xd2>
 8014fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fb8:	b107      	cbz	r7, 8014fbc <_strtoul_l.constprop.0+0xcc>
 8014fba:	4240      	negs	r0, r0
 8014fbc:	2a00      	cmp	r2, #0
 8014fbe:	d0f9      	beq.n	8014fb4 <_strtoul_l.constprop.0+0xc4>
 8014fc0:	b106      	cbz	r6, 8014fc4 <_strtoul_l.constprop.0+0xd4>
 8014fc2:	1e69      	subs	r1, r5, #1
 8014fc4:	6011      	str	r1, [r2, #0]
 8014fc6:	e7f5      	b.n	8014fb4 <_strtoul_l.constprop.0+0xc4>
 8014fc8:	08016fe1 	.word	0x08016fe1

08014fcc <_strtoul_r>:
 8014fcc:	f7ff bf90 	b.w	8014ef0 <_strtoul_l.constprop.0>

08014fd0 <__ascii_wctomb>:
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	4608      	mov	r0, r1
 8014fd4:	b141      	cbz	r1, 8014fe8 <__ascii_wctomb+0x18>
 8014fd6:	2aff      	cmp	r2, #255	@ 0xff
 8014fd8:	d904      	bls.n	8014fe4 <__ascii_wctomb+0x14>
 8014fda:	228a      	movs	r2, #138	@ 0x8a
 8014fdc:	601a      	str	r2, [r3, #0]
 8014fde:	f04f 30ff 	mov.w	r0, #4294967295
 8014fe2:	4770      	bx	lr
 8014fe4:	700a      	strb	r2, [r1, #0]
 8014fe6:	2001      	movs	r0, #1
 8014fe8:	4770      	bx	lr
	...

08014fec <fiprintf>:
 8014fec:	b40e      	push	{r1, r2, r3}
 8014fee:	b503      	push	{r0, r1, lr}
 8014ff0:	4601      	mov	r1, r0
 8014ff2:	ab03      	add	r3, sp, #12
 8014ff4:	4805      	ldr	r0, [pc, #20]	@ (801500c <fiprintf+0x20>)
 8014ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ffa:	6800      	ldr	r0, [r0, #0]
 8014ffc:	9301      	str	r3, [sp, #4]
 8014ffe:	f000 f83f 	bl	8015080 <_vfiprintf_r>
 8015002:	b002      	add	sp, #8
 8015004:	f85d eb04 	ldr.w	lr, [sp], #4
 8015008:	b003      	add	sp, #12
 801500a:	4770      	bx	lr
 801500c:	200001b4 	.word	0x200001b4

08015010 <abort>:
 8015010:	b508      	push	{r3, lr}
 8015012:	2006      	movs	r0, #6
 8015014:	f000 fa08 	bl	8015428 <raise>
 8015018:	2001      	movs	r0, #1
 801501a:	f7ee ff8b 	bl	8003f34 <_exit>

0801501e <_malloc_usable_size_r>:
 801501e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015022:	1f18      	subs	r0, r3, #4
 8015024:	2b00      	cmp	r3, #0
 8015026:	bfbc      	itt	lt
 8015028:	580b      	ldrlt	r3, [r1, r0]
 801502a:	18c0      	addlt	r0, r0, r3
 801502c:	4770      	bx	lr

0801502e <__sfputc_r>:
 801502e:	6893      	ldr	r3, [r2, #8]
 8015030:	3b01      	subs	r3, #1
 8015032:	2b00      	cmp	r3, #0
 8015034:	b410      	push	{r4}
 8015036:	6093      	str	r3, [r2, #8]
 8015038:	da08      	bge.n	801504c <__sfputc_r+0x1e>
 801503a:	6994      	ldr	r4, [r2, #24]
 801503c:	42a3      	cmp	r3, r4
 801503e:	db01      	blt.n	8015044 <__sfputc_r+0x16>
 8015040:	290a      	cmp	r1, #10
 8015042:	d103      	bne.n	801504c <__sfputc_r+0x1e>
 8015044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015048:	f000 b932 	b.w	80152b0 <__swbuf_r>
 801504c:	6813      	ldr	r3, [r2, #0]
 801504e:	1c58      	adds	r0, r3, #1
 8015050:	6010      	str	r0, [r2, #0]
 8015052:	7019      	strb	r1, [r3, #0]
 8015054:	4608      	mov	r0, r1
 8015056:	f85d 4b04 	ldr.w	r4, [sp], #4
 801505a:	4770      	bx	lr

0801505c <__sfputs_r>:
 801505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801505e:	4606      	mov	r6, r0
 8015060:	460f      	mov	r7, r1
 8015062:	4614      	mov	r4, r2
 8015064:	18d5      	adds	r5, r2, r3
 8015066:	42ac      	cmp	r4, r5
 8015068:	d101      	bne.n	801506e <__sfputs_r+0x12>
 801506a:	2000      	movs	r0, #0
 801506c:	e007      	b.n	801507e <__sfputs_r+0x22>
 801506e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015072:	463a      	mov	r2, r7
 8015074:	4630      	mov	r0, r6
 8015076:	f7ff ffda 	bl	801502e <__sfputc_r>
 801507a:	1c43      	adds	r3, r0, #1
 801507c:	d1f3      	bne.n	8015066 <__sfputs_r+0xa>
 801507e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015080 <_vfiprintf_r>:
 8015080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015084:	460d      	mov	r5, r1
 8015086:	b09d      	sub	sp, #116	@ 0x74
 8015088:	4614      	mov	r4, r2
 801508a:	4698      	mov	r8, r3
 801508c:	4606      	mov	r6, r0
 801508e:	b118      	cbz	r0, 8015098 <_vfiprintf_r+0x18>
 8015090:	6a03      	ldr	r3, [r0, #32]
 8015092:	b90b      	cbnz	r3, 8015098 <_vfiprintf_r+0x18>
 8015094:	f7fc f9ca 	bl	801142c <__sinit>
 8015098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801509a:	07d9      	lsls	r1, r3, #31
 801509c:	d405      	bmi.n	80150aa <_vfiprintf_r+0x2a>
 801509e:	89ab      	ldrh	r3, [r5, #12]
 80150a0:	059a      	lsls	r2, r3, #22
 80150a2:	d402      	bmi.n	80150aa <_vfiprintf_r+0x2a>
 80150a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80150a6:	f7fc fb16 	bl	80116d6 <__retarget_lock_acquire_recursive>
 80150aa:	89ab      	ldrh	r3, [r5, #12]
 80150ac:	071b      	lsls	r3, r3, #28
 80150ae:	d501      	bpl.n	80150b4 <_vfiprintf_r+0x34>
 80150b0:	692b      	ldr	r3, [r5, #16]
 80150b2:	b99b      	cbnz	r3, 80150dc <_vfiprintf_r+0x5c>
 80150b4:	4629      	mov	r1, r5
 80150b6:	4630      	mov	r0, r6
 80150b8:	f000 f938 	bl	801532c <__swsetup_r>
 80150bc:	b170      	cbz	r0, 80150dc <_vfiprintf_r+0x5c>
 80150be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80150c0:	07dc      	lsls	r4, r3, #31
 80150c2:	d504      	bpl.n	80150ce <_vfiprintf_r+0x4e>
 80150c4:	f04f 30ff 	mov.w	r0, #4294967295
 80150c8:	b01d      	add	sp, #116	@ 0x74
 80150ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150ce:	89ab      	ldrh	r3, [r5, #12]
 80150d0:	0598      	lsls	r0, r3, #22
 80150d2:	d4f7      	bmi.n	80150c4 <_vfiprintf_r+0x44>
 80150d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80150d6:	f7fc faff 	bl	80116d8 <__retarget_lock_release_recursive>
 80150da:	e7f3      	b.n	80150c4 <_vfiprintf_r+0x44>
 80150dc:	2300      	movs	r3, #0
 80150de:	9309      	str	r3, [sp, #36]	@ 0x24
 80150e0:	2320      	movs	r3, #32
 80150e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80150e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80150ea:	2330      	movs	r3, #48	@ 0x30
 80150ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801529c <_vfiprintf_r+0x21c>
 80150f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80150f4:	f04f 0901 	mov.w	r9, #1
 80150f8:	4623      	mov	r3, r4
 80150fa:	469a      	mov	sl, r3
 80150fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015100:	b10a      	cbz	r2, 8015106 <_vfiprintf_r+0x86>
 8015102:	2a25      	cmp	r2, #37	@ 0x25
 8015104:	d1f9      	bne.n	80150fa <_vfiprintf_r+0x7a>
 8015106:	ebba 0b04 	subs.w	fp, sl, r4
 801510a:	d00b      	beq.n	8015124 <_vfiprintf_r+0xa4>
 801510c:	465b      	mov	r3, fp
 801510e:	4622      	mov	r2, r4
 8015110:	4629      	mov	r1, r5
 8015112:	4630      	mov	r0, r6
 8015114:	f7ff ffa2 	bl	801505c <__sfputs_r>
 8015118:	3001      	adds	r0, #1
 801511a:	f000 80a7 	beq.w	801526c <_vfiprintf_r+0x1ec>
 801511e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015120:	445a      	add	r2, fp
 8015122:	9209      	str	r2, [sp, #36]	@ 0x24
 8015124:	f89a 3000 	ldrb.w	r3, [sl]
 8015128:	2b00      	cmp	r3, #0
 801512a:	f000 809f 	beq.w	801526c <_vfiprintf_r+0x1ec>
 801512e:	2300      	movs	r3, #0
 8015130:	f04f 32ff 	mov.w	r2, #4294967295
 8015134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015138:	f10a 0a01 	add.w	sl, sl, #1
 801513c:	9304      	str	r3, [sp, #16]
 801513e:	9307      	str	r3, [sp, #28]
 8015140:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015144:	931a      	str	r3, [sp, #104]	@ 0x68
 8015146:	4654      	mov	r4, sl
 8015148:	2205      	movs	r2, #5
 801514a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801514e:	4853      	ldr	r0, [pc, #332]	@ (801529c <_vfiprintf_r+0x21c>)
 8015150:	f7eb f866 	bl	8000220 <memchr>
 8015154:	9a04      	ldr	r2, [sp, #16]
 8015156:	b9d8      	cbnz	r0, 8015190 <_vfiprintf_r+0x110>
 8015158:	06d1      	lsls	r1, r2, #27
 801515a:	bf44      	itt	mi
 801515c:	2320      	movmi	r3, #32
 801515e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015162:	0713      	lsls	r3, r2, #28
 8015164:	bf44      	itt	mi
 8015166:	232b      	movmi	r3, #43	@ 0x2b
 8015168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801516c:	f89a 3000 	ldrb.w	r3, [sl]
 8015170:	2b2a      	cmp	r3, #42	@ 0x2a
 8015172:	d015      	beq.n	80151a0 <_vfiprintf_r+0x120>
 8015174:	9a07      	ldr	r2, [sp, #28]
 8015176:	4654      	mov	r4, sl
 8015178:	2000      	movs	r0, #0
 801517a:	f04f 0c0a 	mov.w	ip, #10
 801517e:	4621      	mov	r1, r4
 8015180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015184:	3b30      	subs	r3, #48	@ 0x30
 8015186:	2b09      	cmp	r3, #9
 8015188:	d94b      	bls.n	8015222 <_vfiprintf_r+0x1a2>
 801518a:	b1b0      	cbz	r0, 80151ba <_vfiprintf_r+0x13a>
 801518c:	9207      	str	r2, [sp, #28]
 801518e:	e014      	b.n	80151ba <_vfiprintf_r+0x13a>
 8015190:	eba0 0308 	sub.w	r3, r0, r8
 8015194:	fa09 f303 	lsl.w	r3, r9, r3
 8015198:	4313      	orrs	r3, r2
 801519a:	9304      	str	r3, [sp, #16]
 801519c:	46a2      	mov	sl, r4
 801519e:	e7d2      	b.n	8015146 <_vfiprintf_r+0xc6>
 80151a0:	9b03      	ldr	r3, [sp, #12]
 80151a2:	1d19      	adds	r1, r3, #4
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	9103      	str	r1, [sp, #12]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	bfbb      	ittet	lt
 80151ac:	425b      	neglt	r3, r3
 80151ae:	f042 0202 	orrlt.w	r2, r2, #2
 80151b2:	9307      	strge	r3, [sp, #28]
 80151b4:	9307      	strlt	r3, [sp, #28]
 80151b6:	bfb8      	it	lt
 80151b8:	9204      	strlt	r2, [sp, #16]
 80151ba:	7823      	ldrb	r3, [r4, #0]
 80151bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80151be:	d10a      	bne.n	80151d6 <_vfiprintf_r+0x156>
 80151c0:	7863      	ldrb	r3, [r4, #1]
 80151c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80151c4:	d132      	bne.n	801522c <_vfiprintf_r+0x1ac>
 80151c6:	9b03      	ldr	r3, [sp, #12]
 80151c8:	1d1a      	adds	r2, r3, #4
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	9203      	str	r2, [sp, #12]
 80151ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80151d2:	3402      	adds	r4, #2
 80151d4:	9305      	str	r3, [sp, #20]
 80151d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80152ac <_vfiprintf_r+0x22c>
 80151da:	7821      	ldrb	r1, [r4, #0]
 80151dc:	2203      	movs	r2, #3
 80151de:	4650      	mov	r0, sl
 80151e0:	f7eb f81e 	bl	8000220 <memchr>
 80151e4:	b138      	cbz	r0, 80151f6 <_vfiprintf_r+0x176>
 80151e6:	9b04      	ldr	r3, [sp, #16]
 80151e8:	eba0 000a 	sub.w	r0, r0, sl
 80151ec:	2240      	movs	r2, #64	@ 0x40
 80151ee:	4082      	lsls	r2, r0
 80151f0:	4313      	orrs	r3, r2
 80151f2:	3401      	adds	r4, #1
 80151f4:	9304      	str	r3, [sp, #16]
 80151f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151fa:	4829      	ldr	r0, [pc, #164]	@ (80152a0 <_vfiprintf_r+0x220>)
 80151fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015200:	2206      	movs	r2, #6
 8015202:	f7eb f80d 	bl	8000220 <memchr>
 8015206:	2800      	cmp	r0, #0
 8015208:	d03f      	beq.n	801528a <_vfiprintf_r+0x20a>
 801520a:	4b26      	ldr	r3, [pc, #152]	@ (80152a4 <_vfiprintf_r+0x224>)
 801520c:	bb1b      	cbnz	r3, 8015256 <_vfiprintf_r+0x1d6>
 801520e:	9b03      	ldr	r3, [sp, #12]
 8015210:	3307      	adds	r3, #7
 8015212:	f023 0307 	bic.w	r3, r3, #7
 8015216:	3308      	adds	r3, #8
 8015218:	9303      	str	r3, [sp, #12]
 801521a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801521c:	443b      	add	r3, r7
 801521e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015220:	e76a      	b.n	80150f8 <_vfiprintf_r+0x78>
 8015222:	fb0c 3202 	mla	r2, ip, r2, r3
 8015226:	460c      	mov	r4, r1
 8015228:	2001      	movs	r0, #1
 801522a:	e7a8      	b.n	801517e <_vfiprintf_r+0xfe>
 801522c:	2300      	movs	r3, #0
 801522e:	3401      	adds	r4, #1
 8015230:	9305      	str	r3, [sp, #20]
 8015232:	4619      	mov	r1, r3
 8015234:	f04f 0c0a 	mov.w	ip, #10
 8015238:	4620      	mov	r0, r4
 801523a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801523e:	3a30      	subs	r2, #48	@ 0x30
 8015240:	2a09      	cmp	r2, #9
 8015242:	d903      	bls.n	801524c <_vfiprintf_r+0x1cc>
 8015244:	2b00      	cmp	r3, #0
 8015246:	d0c6      	beq.n	80151d6 <_vfiprintf_r+0x156>
 8015248:	9105      	str	r1, [sp, #20]
 801524a:	e7c4      	b.n	80151d6 <_vfiprintf_r+0x156>
 801524c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015250:	4604      	mov	r4, r0
 8015252:	2301      	movs	r3, #1
 8015254:	e7f0      	b.n	8015238 <_vfiprintf_r+0x1b8>
 8015256:	ab03      	add	r3, sp, #12
 8015258:	9300      	str	r3, [sp, #0]
 801525a:	462a      	mov	r2, r5
 801525c:	4b12      	ldr	r3, [pc, #72]	@ (80152a8 <_vfiprintf_r+0x228>)
 801525e:	a904      	add	r1, sp, #16
 8015260:	4630      	mov	r0, r6
 8015262:	f7fb fa8b 	bl	801077c <_printf_float>
 8015266:	4607      	mov	r7, r0
 8015268:	1c78      	adds	r0, r7, #1
 801526a:	d1d6      	bne.n	801521a <_vfiprintf_r+0x19a>
 801526c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801526e:	07d9      	lsls	r1, r3, #31
 8015270:	d405      	bmi.n	801527e <_vfiprintf_r+0x1fe>
 8015272:	89ab      	ldrh	r3, [r5, #12]
 8015274:	059a      	lsls	r2, r3, #22
 8015276:	d402      	bmi.n	801527e <_vfiprintf_r+0x1fe>
 8015278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801527a:	f7fc fa2d 	bl	80116d8 <__retarget_lock_release_recursive>
 801527e:	89ab      	ldrh	r3, [r5, #12]
 8015280:	065b      	lsls	r3, r3, #25
 8015282:	f53f af1f 	bmi.w	80150c4 <_vfiprintf_r+0x44>
 8015286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015288:	e71e      	b.n	80150c8 <_vfiprintf_r+0x48>
 801528a:	ab03      	add	r3, sp, #12
 801528c:	9300      	str	r3, [sp, #0]
 801528e:	462a      	mov	r2, r5
 8015290:	4b05      	ldr	r3, [pc, #20]	@ (80152a8 <_vfiprintf_r+0x228>)
 8015292:	a904      	add	r1, sp, #16
 8015294:	4630      	mov	r0, r6
 8015296:	f7fb fd09 	bl	8010cac <_printf_i>
 801529a:	e7e4      	b.n	8015266 <_vfiprintf_r+0x1e6>
 801529c:	080170e1 	.word	0x080170e1
 80152a0:	080170eb 	.word	0x080170eb
 80152a4:	0801077d 	.word	0x0801077d
 80152a8:	0801505d 	.word	0x0801505d
 80152ac:	080170e7 	.word	0x080170e7

080152b0 <__swbuf_r>:
 80152b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152b2:	460e      	mov	r6, r1
 80152b4:	4614      	mov	r4, r2
 80152b6:	4605      	mov	r5, r0
 80152b8:	b118      	cbz	r0, 80152c2 <__swbuf_r+0x12>
 80152ba:	6a03      	ldr	r3, [r0, #32]
 80152bc:	b90b      	cbnz	r3, 80152c2 <__swbuf_r+0x12>
 80152be:	f7fc f8b5 	bl	801142c <__sinit>
 80152c2:	69a3      	ldr	r3, [r4, #24]
 80152c4:	60a3      	str	r3, [r4, #8]
 80152c6:	89a3      	ldrh	r3, [r4, #12]
 80152c8:	071a      	lsls	r2, r3, #28
 80152ca:	d501      	bpl.n	80152d0 <__swbuf_r+0x20>
 80152cc:	6923      	ldr	r3, [r4, #16]
 80152ce:	b943      	cbnz	r3, 80152e2 <__swbuf_r+0x32>
 80152d0:	4621      	mov	r1, r4
 80152d2:	4628      	mov	r0, r5
 80152d4:	f000 f82a 	bl	801532c <__swsetup_r>
 80152d8:	b118      	cbz	r0, 80152e2 <__swbuf_r+0x32>
 80152da:	f04f 37ff 	mov.w	r7, #4294967295
 80152de:	4638      	mov	r0, r7
 80152e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152e2:	6823      	ldr	r3, [r4, #0]
 80152e4:	6922      	ldr	r2, [r4, #16]
 80152e6:	1a98      	subs	r0, r3, r2
 80152e8:	6963      	ldr	r3, [r4, #20]
 80152ea:	b2f6      	uxtb	r6, r6
 80152ec:	4283      	cmp	r3, r0
 80152ee:	4637      	mov	r7, r6
 80152f0:	dc05      	bgt.n	80152fe <__swbuf_r+0x4e>
 80152f2:	4621      	mov	r1, r4
 80152f4:	4628      	mov	r0, r5
 80152f6:	f7ff f97f 	bl	80145f8 <_fflush_r>
 80152fa:	2800      	cmp	r0, #0
 80152fc:	d1ed      	bne.n	80152da <__swbuf_r+0x2a>
 80152fe:	68a3      	ldr	r3, [r4, #8]
 8015300:	3b01      	subs	r3, #1
 8015302:	60a3      	str	r3, [r4, #8]
 8015304:	6823      	ldr	r3, [r4, #0]
 8015306:	1c5a      	adds	r2, r3, #1
 8015308:	6022      	str	r2, [r4, #0]
 801530a:	701e      	strb	r6, [r3, #0]
 801530c:	6962      	ldr	r2, [r4, #20]
 801530e:	1c43      	adds	r3, r0, #1
 8015310:	429a      	cmp	r2, r3
 8015312:	d004      	beq.n	801531e <__swbuf_r+0x6e>
 8015314:	89a3      	ldrh	r3, [r4, #12]
 8015316:	07db      	lsls	r3, r3, #31
 8015318:	d5e1      	bpl.n	80152de <__swbuf_r+0x2e>
 801531a:	2e0a      	cmp	r6, #10
 801531c:	d1df      	bne.n	80152de <__swbuf_r+0x2e>
 801531e:	4621      	mov	r1, r4
 8015320:	4628      	mov	r0, r5
 8015322:	f7ff f969 	bl	80145f8 <_fflush_r>
 8015326:	2800      	cmp	r0, #0
 8015328:	d0d9      	beq.n	80152de <__swbuf_r+0x2e>
 801532a:	e7d6      	b.n	80152da <__swbuf_r+0x2a>

0801532c <__swsetup_r>:
 801532c:	b538      	push	{r3, r4, r5, lr}
 801532e:	4b29      	ldr	r3, [pc, #164]	@ (80153d4 <__swsetup_r+0xa8>)
 8015330:	4605      	mov	r5, r0
 8015332:	6818      	ldr	r0, [r3, #0]
 8015334:	460c      	mov	r4, r1
 8015336:	b118      	cbz	r0, 8015340 <__swsetup_r+0x14>
 8015338:	6a03      	ldr	r3, [r0, #32]
 801533a:	b90b      	cbnz	r3, 8015340 <__swsetup_r+0x14>
 801533c:	f7fc f876 	bl	801142c <__sinit>
 8015340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015344:	0719      	lsls	r1, r3, #28
 8015346:	d422      	bmi.n	801538e <__swsetup_r+0x62>
 8015348:	06da      	lsls	r2, r3, #27
 801534a:	d407      	bmi.n	801535c <__swsetup_r+0x30>
 801534c:	2209      	movs	r2, #9
 801534e:	602a      	str	r2, [r5, #0]
 8015350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015354:	81a3      	strh	r3, [r4, #12]
 8015356:	f04f 30ff 	mov.w	r0, #4294967295
 801535a:	e033      	b.n	80153c4 <__swsetup_r+0x98>
 801535c:	0758      	lsls	r0, r3, #29
 801535e:	d512      	bpl.n	8015386 <__swsetup_r+0x5a>
 8015360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015362:	b141      	cbz	r1, 8015376 <__swsetup_r+0x4a>
 8015364:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015368:	4299      	cmp	r1, r3
 801536a:	d002      	beq.n	8015372 <__swsetup_r+0x46>
 801536c:	4628      	mov	r0, r5
 801536e:	f7fd f817 	bl	80123a0 <_free_r>
 8015372:	2300      	movs	r3, #0
 8015374:	6363      	str	r3, [r4, #52]	@ 0x34
 8015376:	89a3      	ldrh	r3, [r4, #12]
 8015378:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801537c:	81a3      	strh	r3, [r4, #12]
 801537e:	2300      	movs	r3, #0
 8015380:	6063      	str	r3, [r4, #4]
 8015382:	6923      	ldr	r3, [r4, #16]
 8015384:	6023      	str	r3, [r4, #0]
 8015386:	89a3      	ldrh	r3, [r4, #12]
 8015388:	f043 0308 	orr.w	r3, r3, #8
 801538c:	81a3      	strh	r3, [r4, #12]
 801538e:	6923      	ldr	r3, [r4, #16]
 8015390:	b94b      	cbnz	r3, 80153a6 <__swsetup_r+0x7a>
 8015392:	89a3      	ldrh	r3, [r4, #12]
 8015394:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801539c:	d003      	beq.n	80153a6 <__swsetup_r+0x7a>
 801539e:	4621      	mov	r1, r4
 80153a0:	4628      	mov	r0, r5
 80153a2:	f000 f883 	bl	80154ac <__smakebuf_r>
 80153a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153aa:	f013 0201 	ands.w	r2, r3, #1
 80153ae:	d00a      	beq.n	80153c6 <__swsetup_r+0x9a>
 80153b0:	2200      	movs	r2, #0
 80153b2:	60a2      	str	r2, [r4, #8]
 80153b4:	6962      	ldr	r2, [r4, #20]
 80153b6:	4252      	negs	r2, r2
 80153b8:	61a2      	str	r2, [r4, #24]
 80153ba:	6922      	ldr	r2, [r4, #16]
 80153bc:	b942      	cbnz	r2, 80153d0 <__swsetup_r+0xa4>
 80153be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80153c2:	d1c5      	bne.n	8015350 <__swsetup_r+0x24>
 80153c4:	bd38      	pop	{r3, r4, r5, pc}
 80153c6:	0799      	lsls	r1, r3, #30
 80153c8:	bf58      	it	pl
 80153ca:	6962      	ldrpl	r2, [r4, #20]
 80153cc:	60a2      	str	r2, [r4, #8]
 80153ce:	e7f4      	b.n	80153ba <__swsetup_r+0x8e>
 80153d0:	2000      	movs	r0, #0
 80153d2:	e7f7      	b.n	80153c4 <__swsetup_r+0x98>
 80153d4:	200001b4 	.word	0x200001b4

080153d8 <_raise_r>:
 80153d8:	291f      	cmp	r1, #31
 80153da:	b538      	push	{r3, r4, r5, lr}
 80153dc:	4605      	mov	r5, r0
 80153de:	460c      	mov	r4, r1
 80153e0:	d904      	bls.n	80153ec <_raise_r+0x14>
 80153e2:	2316      	movs	r3, #22
 80153e4:	6003      	str	r3, [r0, #0]
 80153e6:	f04f 30ff 	mov.w	r0, #4294967295
 80153ea:	bd38      	pop	{r3, r4, r5, pc}
 80153ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80153ee:	b112      	cbz	r2, 80153f6 <_raise_r+0x1e>
 80153f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80153f4:	b94b      	cbnz	r3, 801540a <_raise_r+0x32>
 80153f6:	4628      	mov	r0, r5
 80153f8:	f000 f830 	bl	801545c <_getpid_r>
 80153fc:	4622      	mov	r2, r4
 80153fe:	4601      	mov	r1, r0
 8015400:	4628      	mov	r0, r5
 8015402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015406:	f000 b817 	b.w	8015438 <_kill_r>
 801540a:	2b01      	cmp	r3, #1
 801540c:	d00a      	beq.n	8015424 <_raise_r+0x4c>
 801540e:	1c59      	adds	r1, r3, #1
 8015410:	d103      	bne.n	801541a <_raise_r+0x42>
 8015412:	2316      	movs	r3, #22
 8015414:	6003      	str	r3, [r0, #0]
 8015416:	2001      	movs	r0, #1
 8015418:	e7e7      	b.n	80153ea <_raise_r+0x12>
 801541a:	2100      	movs	r1, #0
 801541c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015420:	4620      	mov	r0, r4
 8015422:	4798      	blx	r3
 8015424:	2000      	movs	r0, #0
 8015426:	e7e0      	b.n	80153ea <_raise_r+0x12>

08015428 <raise>:
 8015428:	4b02      	ldr	r3, [pc, #8]	@ (8015434 <raise+0xc>)
 801542a:	4601      	mov	r1, r0
 801542c:	6818      	ldr	r0, [r3, #0]
 801542e:	f7ff bfd3 	b.w	80153d8 <_raise_r>
 8015432:	bf00      	nop
 8015434:	200001b4 	.word	0x200001b4

08015438 <_kill_r>:
 8015438:	b538      	push	{r3, r4, r5, lr}
 801543a:	4d07      	ldr	r5, [pc, #28]	@ (8015458 <_kill_r+0x20>)
 801543c:	2300      	movs	r3, #0
 801543e:	4604      	mov	r4, r0
 8015440:	4608      	mov	r0, r1
 8015442:	4611      	mov	r1, r2
 8015444:	602b      	str	r3, [r5, #0]
 8015446:	f7ee fd65 	bl	8003f14 <_kill>
 801544a:	1c43      	adds	r3, r0, #1
 801544c:	d102      	bne.n	8015454 <_kill_r+0x1c>
 801544e:	682b      	ldr	r3, [r5, #0]
 8015450:	b103      	cbz	r3, 8015454 <_kill_r+0x1c>
 8015452:	6023      	str	r3, [r4, #0]
 8015454:	bd38      	pop	{r3, r4, r5, pc}
 8015456:	bf00      	nop
 8015458:	2000267c 	.word	0x2000267c

0801545c <_getpid_r>:
 801545c:	f7ee bd52 	b.w	8003f04 <_getpid>

08015460 <__swhatbuf_r>:
 8015460:	b570      	push	{r4, r5, r6, lr}
 8015462:	460c      	mov	r4, r1
 8015464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015468:	2900      	cmp	r1, #0
 801546a:	b096      	sub	sp, #88	@ 0x58
 801546c:	4615      	mov	r5, r2
 801546e:	461e      	mov	r6, r3
 8015470:	da0d      	bge.n	801548e <__swhatbuf_r+0x2e>
 8015472:	89a3      	ldrh	r3, [r4, #12]
 8015474:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015478:	f04f 0100 	mov.w	r1, #0
 801547c:	bf14      	ite	ne
 801547e:	2340      	movne	r3, #64	@ 0x40
 8015480:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015484:	2000      	movs	r0, #0
 8015486:	6031      	str	r1, [r6, #0]
 8015488:	602b      	str	r3, [r5, #0]
 801548a:	b016      	add	sp, #88	@ 0x58
 801548c:	bd70      	pop	{r4, r5, r6, pc}
 801548e:	466a      	mov	r2, sp
 8015490:	f000 f848 	bl	8015524 <_fstat_r>
 8015494:	2800      	cmp	r0, #0
 8015496:	dbec      	blt.n	8015472 <__swhatbuf_r+0x12>
 8015498:	9901      	ldr	r1, [sp, #4]
 801549a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801549e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80154a2:	4259      	negs	r1, r3
 80154a4:	4159      	adcs	r1, r3
 80154a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80154aa:	e7eb      	b.n	8015484 <__swhatbuf_r+0x24>

080154ac <__smakebuf_r>:
 80154ac:	898b      	ldrh	r3, [r1, #12]
 80154ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80154b0:	079d      	lsls	r5, r3, #30
 80154b2:	4606      	mov	r6, r0
 80154b4:	460c      	mov	r4, r1
 80154b6:	d507      	bpl.n	80154c8 <__smakebuf_r+0x1c>
 80154b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80154bc:	6023      	str	r3, [r4, #0]
 80154be:	6123      	str	r3, [r4, #16]
 80154c0:	2301      	movs	r3, #1
 80154c2:	6163      	str	r3, [r4, #20]
 80154c4:	b003      	add	sp, #12
 80154c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154c8:	ab01      	add	r3, sp, #4
 80154ca:	466a      	mov	r2, sp
 80154cc:	f7ff ffc8 	bl	8015460 <__swhatbuf_r>
 80154d0:	9f00      	ldr	r7, [sp, #0]
 80154d2:	4605      	mov	r5, r0
 80154d4:	4639      	mov	r1, r7
 80154d6:	4630      	mov	r0, r6
 80154d8:	f7fc ffd6 	bl	8012488 <_malloc_r>
 80154dc:	b948      	cbnz	r0, 80154f2 <__smakebuf_r+0x46>
 80154de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154e2:	059a      	lsls	r2, r3, #22
 80154e4:	d4ee      	bmi.n	80154c4 <__smakebuf_r+0x18>
 80154e6:	f023 0303 	bic.w	r3, r3, #3
 80154ea:	f043 0302 	orr.w	r3, r3, #2
 80154ee:	81a3      	strh	r3, [r4, #12]
 80154f0:	e7e2      	b.n	80154b8 <__smakebuf_r+0xc>
 80154f2:	89a3      	ldrh	r3, [r4, #12]
 80154f4:	6020      	str	r0, [r4, #0]
 80154f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80154fa:	81a3      	strh	r3, [r4, #12]
 80154fc:	9b01      	ldr	r3, [sp, #4]
 80154fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015502:	b15b      	cbz	r3, 801551c <__smakebuf_r+0x70>
 8015504:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015508:	4630      	mov	r0, r6
 801550a:	f000 f81d 	bl	8015548 <_isatty_r>
 801550e:	b128      	cbz	r0, 801551c <__smakebuf_r+0x70>
 8015510:	89a3      	ldrh	r3, [r4, #12]
 8015512:	f023 0303 	bic.w	r3, r3, #3
 8015516:	f043 0301 	orr.w	r3, r3, #1
 801551a:	81a3      	strh	r3, [r4, #12]
 801551c:	89a3      	ldrh	r3, [r4, #12]
 801551e:	431d      	orrs	r5, r3
 8015520:	81a5      	strh	r5, [r4, #12]
 8015522:	e7cf      	b.n	80154c4 <__smakebuf_r+0x18>

08015524 <_fstat_r>:
 8015524:	b538      	push	{r3, r4, r5, lr}
 8015526:	4d07      	ldr	r5, [pc, #28]	@ (8015544 <_fstat_r+0x20>)
 8015528:	2300      	movs	r3, #0
 801552a:	4604      	mov	r4, r0
 801552c:	4608      	mov	r0, r1
 801552e:	4611      	mov	r1, r2
 8015530:	602b      	str	r3, [r5, #0]
 8015532:	f7ee fd4f 	bl	8003fd4 <_fstat>
 8015536:	1c43      	adds	r3, r0, #1
 8015538:	d102      	bne.n	8015540 <_fstat_r+0x1c>
 801553a:	682b      	ldr	r3, [r5, #0]
 801553c:	b103      	cbz	r3, 8015540 <_fstat_r+0x1c>
 801553e:	6023      	str	r3, [r4, #0]
 8015540:	bd38      	pop	{r3, r4, r5, pc}
 8015542:	bf00      	nop
 8015544:	2000267c 	.word	0x2000267c

08015548 <_isatty_r>:
 8015548:	b538      	push	{r3, r4, r5, lr}
 801554a:	4d06      	ldr	r5, [pc, #24]	@ (8015564 <_isatty_r+0x1c>)
 801554c:	2300      	movs	r3, #0
 801554e:	4604      	mov	r4, r0
 8015550:	4608      	mov	r0, r1
 8015552:	602b      	str	r3, [r5, #0]
 8015554:	f7ee fd4e 	bl	8003ff4 <_isatty>
 8015558:	1c43      	adds	r3, r0, #1
 801555a:	d102      	bne.n	8015562 <_isatty_r+0x1a>
 801555c:	682b      	ldr	r3, [r5, #0]
 801555e:	b103      	cbz	r3, 8015562 <_isatty_r+0x1a>
 8015560:	6023      	str	r3, [r4, #0]
 8015562:	bd38      	pop	{r3, r4, r5, pc}
 8015564:	2000267c 	.word	0x2000267c

08015568 <acos>:
 8015568:	b538      	push	{r3, r4, r5, lr}
 801556a:	ed2d 8b02 	vpush	{d8}
 801556e:	ec55 4b10 	vmov	r4, r5, d0
 8015572:	f000 f9b9 	bl	80158e8 <__ieee754_acos>
 8015576:	4622      	mov	r2, r4
 8015578:	462b      	mov	r3, r5
 801557a:	4620      	mov	r0, r4
 801557c:	4629      	mov	r1, r5
 801557e:	eeb0 8a40 	vmov.f32	s16, s0
 8015582:	eef0 8a60 	vmov.f32	s17, s1
 8015586:	f7eb faf9 	bl	8000b7c <__aeabi_dcmpun>
 801558a:	b9a8      	cbnz	r0, 80155b8 <acos+0x50>
 801558c:	ec45 4b10 	vmov	d0, r4, r5
 8015590:	f000 f8ba 	bl	8015708 <fabs>
 8015594:	4b0c      	ldr	r3, [pc, #48]	@ (80155c8 <acos+0x60>)
 8015596:	ec51 0b10 	vmov	r0, r1, d0
 801559a:	2200      	movs	r2, #0
 801559c:	f7eb fae4 	bl	8000b68 <__aeabi_dcmpgt>
 80155a0:	b150      	cbz	r0, 80155b8 <acos+0x50>
 80155a2:	f7fc f86d 	bl	8011680 <__errno>
 80155a6:	ecbd 8b02 	vpop	{d8}
 80155aa:	2321      	movs	r3, #33	@ 0x21
 80155ac:	6003      	str	r3, [r0, #0]
 80155ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80155b2:	4806      	ldr	r0, [pc, #24]	@ (80155cc <acos+0x64>)
 80155b4:	f7ff b8e8 	b.w	8014788 <nan>
 80155b8:	eeb0 0a48 	vmov.f32	s0, s16
 80155bc:	eef0 0a68 	vmov.f32	s1, s17
 80155c0:	ecbd 8b02 	vpop	{d8}
 80155c4:	bd38      	pop	{r3, r4, r5, pc}
 80155c6:	bf00      	nop
 80155c8:	3ff00000 	.word	0x3ff00000
 80155cc:	08017150 	.word	0x08017150

080155d0 <pow>:
 80155d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155d2:	ed2d 8b02 	vpush	{d8}
 80155d6:	eeb0 8a40 	vmov.f32	s16, s0
 80155da:	eef0 8a60 	vmov.f32	s17, s1
 80155de:	ec55 4b11 	vmov	r4, r5, d1
 80155e2:	f000 fbdd 	bl	8015da0 <__ieee754_pow>
 80155e6:	4622      	mov	r2, r4
 80155e8:	462b      	mov	r3, r5
 80155ea:	4620      	mov	r0, r4
 80155ec:	4629      	mov	r1, r5
 80155ee:	ec57 6b10 	vmov	r6, r7, d0
 80155f2:	f7eb fac3 	bl	8000b7c <__aeabi_dcmpun>
 80155f6:	2800      	cmp	r0, #0
 80155f8:	d13b      	bne.n	8015672 <pow+0xa2>
 80155fa:	ec51 0b18 	vmov	r0, r1, d8
 80155fe:	2200      	movs	r2, #0
 8015600:	2300      	movs	r3, #0
 8015602:	f7eb fa89 	bl	8000b18 <__aeabi_dcmpeq>
 8015606:	b1b8      	cbz	r0, 8015638 <pow+0x68>
 8015608:	2200      	movs	r2, #0
 801560a:	2300      	movs	r3, #0
 801560c:	4620      	mov	r0, r4
 801560e:	4629      	mov	r1, r5
 8015610:	f7eb fa82 	bl	8000b18 <__aeabi_dcmpeq>
 8015614:	2800      	cmp	r0, #0
 8015616:	d146      	bne.n	80156a6 <pow+0xd6>
 8015618:	ec45 4b10 	vmov	d0, r4, r5
 801561c:	f000 f87c 	bl	8015718 <finite>
 8015620:	b338      	cbz	r0, 8015672 <pow+0xa2>
 8015622:	2200      	movs	r2, #0
 8015624:	2300      	movs	r3, #0
 8015626:	4620      	mov	r0, r4
 8015628:	4629      	mov	r1, r5
 801562a:	f7eb fa7f 	bl	8000b2c <__aeabi_dcmplt>
 801562e:	b300      	cbz	r0, 8015672 <pow+0xa2>
 8015630:	f7fc f826 	bl	8011680 <__errno>
 8015634:	2322      	movs	r3, #34	@ 0x22
 8015636:	e01b      	b.n	8015670 <pow+0xa0>
 8015638:	ec47 6b10 	vmov	d0, r6, r7
 801563c:	f000 f86c 	bl	8015718 <finite>
 8015640:	b9e0      	cbnz	r0, 801567c <pow+0xac>
 8015642:	eeb0 0a48 	vmov.f32	s0, s16
 8015646:	eef0 0a68 	vmov.f32	s1, s17
 801564a:	f000 f865 	bl	8015718 <finite>
 801564e:	b1a8      	cbz	r0, 801567c <pow+0xac>
 8015650:	ec45 4b10 	vmov	d0, r4, r5
 8015654:	f000 f860 	bl	8015718 <finite>
 8015658:	b180      	cbz	r0, 801567c <pow+0xac>
 801565a:	4632      	mov	r2, r6
 801565c:	463b      	mov	r3, r7
 801565e:	4630      	mov	r0, r6
 8015660:	4639      	mov	r1, r7
 8015662:	f7eb fa8b 	bl	8000b7c <__aeabi_dcmpun>
 8015666:	2800      	cmp	r0, #0
 8015668:	d0e2      	beq.n	8015630 <pow+0x60>
 801566a:	f7fc f809 	bl	8011680 <__errno>
 801566e:	2321      	movs	r3, #33	@ 0x21
 8015670:	6003      	str	r3, [r0, #0]
 8015672:	ecbd 8b02 	vpop	{d8}
 8015676:	ec47 6b10 	vmov	d0, r6, r7
 801567a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801567c:	2200      	movs	r2, #0
 801567e:	2300      	movs	r3, #0
 8015680:	4630      	mov	r0, r6
 8015682:	4639      	mov	r1, r7
 8015684:	f7eb fa48 	bl	8000b18 <__aeabi_dcmpeq>
 8015688:	2800      	cmp	r0, #0
 801568a:	d0f2      	beq.n	8015672 <pow+0xa2>
 801568c:	eeb0 0a48 	vmov.f32	s0, s16
 8015690:	eef0 0a68 	vmov.f32	s1, s17
 8015694:	f000 f840 	bl	8015718 <finite>
 8015698:	2800      	cmp	r0, #0
 801569a:	d0ea      	beq.n	8015672 <pow+0xa2>
 801569c:	ec45 4b10 	vmov	d0, r4, r5
 80156a0:	f000 f83a 	bl	8015718 <finite>
 80156a4:	e7c3      	b.n	801562e <pow+0x5e>
 80156a6:	4f01      	ldr	r7, [pc, #4]	@ (80156ac <pow+0xdc>)
 80156a8:	2600      	movs	r6, #0
 80156aa:	e7e2      	b.n	8015672 <pow+0xa2>
 80156ac:	3ff00000 	.word	0x3ff00000

080156b0 <sqrt>:
 80156b0:	b538      	push	{r3, r4, r5, lr}
 80156b2:	ed2d 8b02 	vpush	{d8}
 80156b6:	ec55 4b10 	vmov	r4, r5, d0
 80156ba:	f000 f839 	bl	8015730 <__ieee754_sqrt>
 80156be:	4622      	mov	r2, r4
 80156c0:	462b      	mov	r3, r5
 80156c2:	4620      	mov	r0, r4
 80156c4:	4629      	mov	r1, r5
 80156c6:	eeb0 8a40 	vmov.f32	s16, s0
 80156ca:	eef0 8a60 	vmov.f32	s17, s1
 80156ce:	f7eb fa55 	bl	8000b7c <__aeabi_dcmpun>
 80156d2:	b990      	cbnz	r0, 80156fa <sqrt+0x4a>
 80156d4:	2200      	movs	r2, #0
 80156d6:	2300      	movs	r3, #0
 80156d8:	4620      	mov	r0, r4
 80156da:	4629      	mov	r1, r5
 80156dc:	f7eb fa26 	bl	8000b2c <__aeabi_dcmplt>
 80156e0:	b158      	cbz	r0, 80156fa <sqrt+0x4a>
 80156e2:	f7fb ffcd 	bl	8011680 <__errno>
 80156e6:	2321      	movs	r3, #33	@ 0x21
 80156e8:	6003      	str	r3, [r0, #0]
 80156ea:	2200      	movs	r2, #0
 80156ec:	2300      	movs	r3, #0
 80156ee:	4610      	mov	r0, r2
 80156f0:	4619      	mov	r1, r3
 80156f2:	f7eb f8d3 	bl	800089c <__aeabi_ddiv>
 80156f6:	ec41 0b18 	vmov	d8, r0, r1
 80156fa:	eeb0 0a48 	vmov.f32	s0, s16
 80156fe:	eef0 0a68 	vmov.f32	s1, s17
 8015702:	ecbd 8b02 	vpop	{d8}
 8015706:	bd38      	pop	{r3, r4, r5, pc}

08015708 <fabs>:
 8015708:	ec51 0b10 	vmov	r0, r1, d0
 801570c:	4602      	mov	r2, r0
 801570e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015712:	ec43 2b10 	vmov	d0, r2, r3
 8015716:	4770      	bx	lr

08015718 <finite>:
 8015718:	b082      	sub	sp, #8
 801571a:	ed8d 0b00 	vstr	d0, [sp]
 801571e:	9801      	ldr	r0, [sp, #4]
 8015720:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8015724:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015728:	0fc0      	lsrs	r0, r0, #31
 801572a:	b002      	add	sp, #8
 801572c:	4770      	bx	lr
	...

08015730 <__ieee754_sqrt>:
 8015730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015734:	4a68      	ldr	r2, [pc, #416]	@ (80158d8 <__ieee754_sqrt+0x1a8>)
 8015736:	ec55 4b10 	vmov	r4, r5, d0
 801573a:	43aa      	bics	r2, r5
 801573c:	462b      	mov	r3, r5
 801573e:	4621      	mov	r1, r4
 8015740:	d110      	bne.n	8015764 <__ieee754_sqrt+0x34>
 8015742:	4622      	mov	r2, r4
 8015744:	4620      	mov	r0, r4
 8015746:	4629      	mov	r1, r5
 8015748:	f7ea ff7e 	bl	8000648 <__aeabi_dmul>
 801574c:	4602      	mov	r2, r0
 801574e:	460b      	mov	r3, r1
 8015750:	4620      	mov	r0, r4
 8015752:	4629      	mov	r1, r5
 8015754:	f7ea fdc2 	bl	80002dc <__adddf3>
 8015758:	4604      	mov	r4, r0
 801575a:	460d      	mov	r5, r1
 801575c:	ec45 4b10 	vmov	d0, r4, r5
 8015760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015764:	2d00      	cmp	r5, #0
 8015766:	dc0e      	bgt.n	8015786 <__ieee754_sqrt+0x56>
 8015768:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801576c:	4322      	orrs	r2, r4
 801576e:	d0f5      	beq.n	801575c <__ieee754_sqrt+0x2c>
 8015770:	b19d      	cbz	r5, 801579a <__ieee754_sqrt+0x6a>
 8015772:	4622      	mov	r2, r4
 8015774:	4620      	mov	r0, r4
 8015776:	4629      	mov	r1, r5
 8015778:	f7ea fdae 	bl	80002d8 <__aeabi_dsub>
 801577c:	4602      	mov	r2, r0
 801577e:	460b      	mov	r3, r1
 8015780:	f7eb f88c 	bl	800089c <__aeabi_ddiv>
 8015784:	e7e8      	b.n	8015758 <__ieee754_sqrt+0x28>
 8015786:	152a      	asrs	r2, r5, #20
 8015788:	d115      	bne.n	80157b6 <__ieee754_sqrt+0x86>
 801578a:	2000      	movs	r0, #0
 801578c:	e009      	b.n	80157a2 <__ieee754_sqrt+0x72>
 801578e:	0acb      	lsrs	r3, r1, #11
 8015790:	3a15      	subs	r2, #21
 8015792:	0549      	lsls	r1, r1, #21
 8015794:	2b00      	cmp	r3, #0
 8015796:	d0fa      	beq.n	801578e <__ieee754_sqrt+0x5e>
 8015798:	e7f7      	b.n	801578a <__ieee754_sqrt+0x5a>
 801579a:	462a      	mov	r2, r5
 801579c:	e7fa      	b.n	8015794 <__ieee754_sqrt+0x64>
 801579e:	005b      	lsls	r3, r3, #1
 80157a0:	3001      	adds	r0, #1
 80157a2:	02dc      	lsls	r4, r3, #11
 80157a4:	d5fb      	bpl.n	801579e <__ieee754_sqrt+0x6e>
 80157a6:	1e44      	subs	r4, r0, #1
 80157a8:	1b12      	subs	r2, r2, r4
 80157aa:	f1c0 0420 	rsb	r4, r0, #32
 80157ae:	fa21 f404 	lsr.w	r4, r1, r4
 80157b2:	4323      	orrs	r3, r4
 80157b4:	4081      	lsls	r1, r0
 80157b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157ba:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80157be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80157c2:	07d2      	lsls	r2, r2, #31
 80157c4:	bf5c      	itt	pl
 80157c6:	005b      	lslpl	r3, r3, #1
 80157c8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80157cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80157d0:	bf58      	it	pl
 80157d2:	0049      	lslpl	r1, r1, #1
 80157d4:	2600      	movs	r6, #0
 80157d6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80157da:	106d      	asrs	r5, r5, #1
 80157dc:	0049      	lsls	r1, r1, #1
 80157de:	2016      	movs	r0, #22
 80157e0:	4632      	mov	r2, r6
 80157e2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80157e6:	1917      	adds	r7, r2, r4
 80157e8:	429f      	cmp	r7, r3
 80157ea:	bfde      	ittt	le
 80157ec:	193a      	addle	r2, r7, r4
 80157ee:	1bdb      	suble	r3, r3, r7
 80157f0:	1936      	addle	r6, r6, r4
 80157f2:	0fcf      	lsrs	r7, r1, #31
 80157f4:	3801      	subs	r0, #1
 80157f6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80157fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80157fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015802:	d1f0      	bne.n	80157e6 <__ieee754_sqrt+0xb6>
 8015804:	4604      	mov	r4, r0
 8015806:	2720      	movs	r7, #32
 8015808:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801580c:	429a      	cmp	r2, r3
 801580e:	eb00 0e0c 	add.w	lr, r0, ip
 8015812:	db02      	blt.n	801581a <__ieee754_sqrt+0xea>
 8015814:	d113      	bne.n	801583e <__ieee754_sqrt+0x10e>
 8015816:	458e      	cmp	lr, r1
 8015818:	d811      	bhi.n	801583e <__ieee754_sqrt+0x10e>
 801581a:	f1be 0f00 	cmp.w	lr, #0
 801581e:	eb0e 000c 	add.w	r0, lr, ip
 8015822:	da42      	bge.n	80158aa <__ieee754_sqrt+0x17a>
 8015824:	2800      	cmp	r0, #0
 8015826:	db40      	blt.n	80158aa <__ieee754_sqrt+0x17a>
 8015828:	f102 0801 	add.w	r8, r2, #1
 801582c:	1a9b      	subs	r3, r3, r2
 801582e:	458e      	cmp	lr, r1
 8015830:	bf88      	it	hi
 8015832:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8015836:	eba1 010e 	sub.w	r1, r1, lr
 801583a:	4464      	add	r4, ip
 801583c:	4642      	mov	r2, r8
 801583e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8015842:	3f01      	subs	r7, #1
 8015844:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8015848:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801584c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8015850:	d1dc      	bne.n	801580c <__ieee754_sqrt+0xdc>
 8015852:	4319      	orrs	r1, r3
 8015854:	d01b      	beq.n	801588e <__ieee754_sqrt+0x15e>
 8015856:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80158dc <__ieee754_sqrt+0x1ac>
 801585a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80158e0 <__ieee754_sqrt+0x1b0>
 801585e:	e9da 0100 	ldrd	r0, r1, [sl]
 8015862:	e9db 2300 	ldrd	r2, r3, [fp]
 8015866:	f7ea fd37 	bl	80002d8 <__aeabi_dsub>
 801586a:	e9da 8900 	ldrd	r8, r9, [sl]
 801586e:	4602      	mov	r2, r0
 8015870:	460b      	mov	r3, r1
 8015872:	4640      	mov	r0, r8
 8015874:	4649      	mov	r1, r9
 8015876:	f7eb f963 	bl	8000b40 <__aeabi_dcmple>
 801587a:	b140      	cbz	r0, 801588e <__ieee754_sqrt+0x15e>
 801587c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8015880:	e9da 0100 	ldrd	r0, r1, [sl]
 8015884:	e9db 2300 	ldrd	r2, r3, [fp]
 8015888:	d111      	bne.n	80158ae <__ieee754_sqrt+0x17e>
 801588a:	3601      	adds	r6, #1
 801588c:	463c      	mov	r4, r7
 801588e:	1072      	asrs	r2, r6, #1
 8015890:	0863      	lsrs	r3, r4, #1
 8015892:	07f1      	lsls	r1, r6, #31
 8015894:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8015898:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801589c:	bf48      	it	mi
 801589e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80158a2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80158a6:	4618      	mov	r0, r3
 80158a8:	e756      	b.n	8015758 <__ieee754_sqrt+0x28>
 80158aa:	4690      	mov	r8, r2
 80158ac:	e7be      	b.n	801582c <__ieee754_sqrt+0xfc>
 80158ae:	f7ea fd15 	bl	80002dc <__adddf3>
 80158b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80158b6:	4602      	mov	r2, r0
 80158b8:	460b      	mov	r3, r1
 80158ba:	4640      	mov	r0, r8
 80158bc:	4649      	mov	r1, r9
 80158be:	f7eb f935 	bl	8000b2c <__aeabi_dcmplt>
 80158c2:	b120      	cbz	r0, 80158ce <__ieee754_sqrt+0x19e>
 80158c4:	1ca0      	adds	r0, r4, #2
 80158c6:	bf08      	it	eq
 80158c8:	3601      	addeq	r6, #1
 80158ca:	3402      	adds	r4, #2
 80158cc:	e7df      	b.n	801588e <__ieee754_sqrt+0x15e>
 80158ce:	1c63      	adds	r3, r4, #1
 80158d0:	f023 0401 	bic.w	r4, r3, #1
 80158d4:	e7db      	b.n	801588e <__ieee754_sqrt+0x15e>
 80158d6:	bf00      	nop
 80158d8:	7ff00000 	.word	0x7ff00000
 80158dc:	20000378 	.word	0x20000378
 80158e0:	20000370 	.word	0x20000370
 80158e4:	00000000 	.word	0x00000000

080158e8 <__ieee754_acos>:
 80158e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158ec:	ec55 4b10 	vmov	r4, r5, d0
 80158f0:	49b7      	ldr	r1, [pc, #732]	@ (8015bd0 <__ieee754_acos+0x2e8>)
 80158f2:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80158f6:	428b      	cmp	r3, r1
 80158f8:	d919      	bls.n	801592e <__ieee754_acos+0x46>
 80158fa:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 80158fe:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8015902:	4323      	orrs	r3, r4
 8015904:	d106      	bne.n	8015914 <__ieee754_acos+0x2c>
 8015906:	2d00      	cmp	r5, #0
 8015908:	f340 8210 	ble.w	8015d2c <__ieee754_acos+0x444>
 801590c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8015b60 <__ieee754_acos+0x278>
 8015910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015914:	4622      	mov	r2, r4
 8015916:	462b      	mov	r3, r5
 8015918:	4620      	mov	r0, r4
 801591a:	4629      	mov	r1, r5
 801591c:	f7ea fcdc 	bl	80002d8 <__aeabi_dsub>
 8015920:	4602      	mov	r2, r0
 8015922:	460b      	mov	r3, r1
 8015924:	f7ea ffba 	bl	800089c <__aeabi_ddiv>
 8015928:	ec41 0b10 	vmov	d0, r0, r1
 801592c:	e7f0      	b.n	8015910 <__ieee754_acos+0x28>
 801592e:	49a9      	ldr	r1, [pc, #676]	@ (8015bd4 <__ieee754_acos+0x2ec>)
 8015930:	428b      	cmp	r3, r1
 8015932:	f200 8085 	bhi.w	8015a40 <__ieee754_acos+0x158>
 8015936:	4aa8      	ldr	r2, [pc, #672]	@ (8015bd8 <__ieee754_acos+0x2f0>)
 8015938:	4293      	cmp	r3, r2
 801593a:	f240 81fa 	bls.w	8015d32 <__ieee754_acos+0x44a>
 801593e:	4622      	mov	r2, r4
 8015940:	462b      	mov	r3, r5
 8015942:	4620      	mov	r0, r4
 8015944:	4629      	mov	r1, r5
 8015946:	f7ea fe7f 	bl	8000648 <__aeabi_dmul>
 801594a:	a387      	add	r3, pc, #540	@ (adr r3, 8015b68 <__ieee754_acos+0x280>)
 801594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015950:	4606      	mov	r6, r0
 8015952:	460f      	mov	r7, r1
 8015954:	f7ea fe78 	bl	8000648 <__aeabi_dmul>
 8015958:	a385      	add	r3, pc, #532	@ (adr r3, 8015b70 <__ieee754_acos+0x288>)
 801595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801595e:	f7ea fcbd 	bl	80002dc <__adddf3>
 8015962:	4632      	mov	r2, r6
 8015964:	463b      	mov	r3, r7
 8015966:	f7ea fe6f 	bl	8000648 <__aeabi_dmul>
 801596a:	a383      	add	r3, pc, #524	@ (adr r3, 8015b78 <__ieee754_acos+0x290>)
 801596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015970:	f7ea fcb2 	bl	80002d8 <__aeabi_dsub>
 8015974:	4632      	mov	r2, r6
 8015976:	463b      	mov	r3, r7
 8015978:	f7ea fe66 	bl	8000648 <__aeabi_dmul>
 801597c:	a380      	add	r3, pc, #512	@ (adr r3, 8015b80 <__ieee754_acos+0x298>)
 801597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015982:	f7ea fcab 	bl	80002dc <__adddf3>
 8015986:	4632      	mov	r2, r6
 8015988:	463b      	mov	r3, r7
 801598a:	f7ea fe5d 	bl	8000648 <__aeabi_dmul>
 801598e:	a37e      	add	r3, pc, #504	@ (adr r3, 8015b88 <__ieee754_acos+0x2a0>)
 8015990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015994:	f7ea fca0 	bl	80002d8 <__aeabi_dsub>
 8015998:	4632      	mov	r2, r6
 801599a:	463b      	mov	r3, r7
 801599c:	f7ea fe54 	bl	8000648 <__aeabi_dmul>
 80159a0:	a37b      	add	r3, pc, #492	@ (adr r3, 8015b90 <__ieee754_acos+0x2a8>)
 80159a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159a6:	f7ea fc99 	bl	80002dc <__adddf3>
 80159aa:	4632      	mov	r2, r6
 80159ac:	463b      	mov	r3, r7
 80159ae:	f7ea fe4b 	bl	8000648 <__aeabi_dmul>
 80159b2:	a379      	add	r3, pc, #484	@ (adr r3, 8015b98 <__ieee754_acos+0x2b0>)
 80159b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159b8:	4680      	mov	r8, r0
 80159ba:	4689      	mov	r9, r1
 80159bc:	4630      	mov	r0, r6
 80159be:	4639      	mov	r1, r7
 80159c0:	f7ea fe42 	bl	8000648 <__aeabi_dmul>
 80159c4:	a376      	add	r3, pc, #472	@ (adr r3, 8015ba0 <__ieee754_acos+0x2b8>)
 80159c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ca:	f7ea fc85 	bl	80002d8 <__aeabi_dsub>
 80159ce:	4632      	mov	r2, r6
 80159d0:	463b      	mov	r3, r7
 80159d2:	f7ea fe39 	bl	8000648 <__aeabi_dmul>
 80159d6:	a374      	add	r3, pc, #464	@ (adr r3, 8015ba8 <__ieee754_acos+0x2c0>)
 80159d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159dc:	f7ea fc7e 	bl	80002dc <__adddf3>
 80159e0:	4632      	mov	r2, r6
 80159e2:	463b      	mov	r3, r7
 80159e4:	f7ea fe30 	bl	8000648 <__aeabi_dmul>
 80159e8:	a371      	add	r3, pc, #452	@ (adr r3, 8015bb0 <__ieee754_acos+0x2c8>)
 80159ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ee:	f7ea fc73 	bl	80002d8 <__aeabi_dsub>
 80159f2:	4632      	mov	r2, r6
 80159f4:	463b      	mov	r3, r7
 80159f6:	f7ea fe27 	bl	8000648 <__aeabi_dmul>
 80159fa:	4b78      	ldr	r3, [pc, #480]	@ (8015bdc <__ieee754_acos+0x2f4>)
 80159fc:	2200      	movs	r2, #0
 80159fe:	f7ea fc6d 	bl	80002dc <__adddf3>
 8015a02:	4602      	mov	r2, r0
 8015a04:	460b      	mov	r3, r1
 8015a06:	4640      	mov	r0, r8
 8015a08:	4649      	mov	r1, r9
 8015a0a:	f7ea ff47 	bl	800089c <__aeabi_ddiv>
 8015a0e:	4622      	mov	r2, r4
 8015a10:	462b      	mov	r3, r5
 8015a12:	f7ea fe19 	bl	8000648 <__aeabi_dmul>
 8015a16:	4602      	mov	r2, r0
 8015a18:	460b      	mov	r3, r1
 8015a1a:	a167      	add	r1, pc, #412	@ (adr r1, 8015bb8 <__ieee754_acos+0x2d0>)
 8015a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a20:	f7ea fc5a 	bl	80002d8 <__aeabi_dsub>
 8015a24:	4602      	mov	r2, r0
 8015a26:	460b      	mov	r3, r1
 8015a28:	4620      	mov	r0, r4
 8015a2a:	4629      	mov	r1, r5
 8015a2c:	f7ea fc54 	bl	80002d8 <__aeabi_dsub>
 8015a30:	4602      	mov	r2, r0
 8015a32:	460b      	mov	r3, r1
 8015a34:	a162      	add	r1, pc, #392	@ (adr r1, 8015bc0 <__ieee754_acos+0x2d8>)
 8015a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a3a:	f7ea fc4d 	bl	80002d8 <__aeabi_dsub>
 8015a3e:	e773      	b.n	8015928 <__ieee754_acos+0x40>
 8015a40:	2d00      	cmp	r5, #0
 8015a42:	f280 80cf 	bge.w	8015be4 <__ieee754_acos+0x2fc>
 8015a46:	4b65      	ldr	r3, [pc, #404]	@ (8015bdc <__ieee754_acos+0x2f4>)
 8015a48:	2200      	movs	r2, #0
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	4629      	mov	r1, r5
 8015a4e:	f7ea fc45 	bl	80002dc <__adddf3>
 8015a52:	4b63      	ldr	r3, [pc, #396]	@ (8015be0 <__ieee754_acos+0x2f8>)
 8015a54:	2200      	movs	r2, #0
 8015a56:	f7ea fdf7 	bl	8000648 <__aeabi_dmul>
 8015a5a:	a343      	add	r3, pc, #268	@ (adr r3, 8015b68 <__ieee754_acos+0x280>)
 8015a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a60:	4604      	mov	r4, r0
 8015a62:	460d      	mov	r5, r1
 8015a64:	f7ea fdf0 	bl	8000648 <__aeabi_dmul>
 8015a68:	a341      	add	r3, pc, #260	@ (adr r3, 8015b70 <__ieee754_acos+0x288>)
 8015a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a6e:	f7ea fc35 	bl	80002dc <__adddf3>
 8015a72:	4622      	mov	r2, r4
 8015a74:	462b      	mov	r3, r5
 8015a76:	f7ea fde7 	bl	8000648 <__aeabi_dmul>
 8015a7a:	a33f      	add	r3, pc, #252	@ (adr r3, 8015b78 <__ieee754_acos+0x290>)
 8015a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a80:	f7ea fc2a 	bl	80002d8 <__aeabi_dsub>
 8015a84:	4622      	mov	r2, r4
 8015a86:	462b      	mov	r3, r5
 8015a88:	f7ea fdde 	bl	8000648 <__aeabi_dmul>
 8015a8c:	a33c      	add	r3, pc, #240	@ (adr r3, 8015b80 <__ieee754_acos+0x298>)
 8015a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a92:	f7ea fc23 	bl	80002dc <__adddf3>
 8015a96:	4622      	mov	r2, r4
 8015a98:	462b      	mov	r3, r5
 8015a9a:	f7ea fdd5 	bl	8000648 <__aeabi_dmul>
 8015a9e:	a33a      	add	r3, pc, #232	@ (adr r3, 8015b88 <__ieee754_acos+0x2a0>)
 8015aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa4:	f7ea fc18 	bl	80002d8 <__aeabi_dsub>
 8015aa8:	4622      	mov	r2, r4
 8015aaa:	462b      	mov	r3, r5
 8015aac:	f7ea fdcc 	bl	8000648 <__aeabi_dmul>
 8015ab0:	a337      	add	r3, pc, #220	@ (adr r3, 8015b90 <__ieee754_acos+0x2a8>)
 8015ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ab6:	f7ea fc11 	bl	80002dc <__adddf3>
 8015aba:	4622      	mov	r2, r4
 8015abc:	462b      	mov	r3, r5
 8015abe:	f7ea fdc3 	bl	8000648 <__aeabi_dmul>
 8015ac2:	a335      	add	r3, pc, #212	@ (adr r3, 8015b98 <__ieee754_acos+0x2b0>)
 8015ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac8:	4606      	mov	r6, r0
 8015aca:	460f      	mov	r7, r1
 8015acc:	4620      	mov	r0, r4
 8015ace:	4629      	mov	r1, r5
 8015ad0:	f7ea fdba 	bl	8000648 <__aeabi_dmul>
 8015ad4:	a332      	add	r3, pc, #200	@ (adr r3, 8015ba0 <__ieee754_acos+0x2b8>)
 8015ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ada:	f7ea fbfd 	bl	80002d8 <__aeabi_dsub>
 8015ade:	4622      	mov	r2, r4
 8015ae0:	462b      	mov	r3, r5
 8015ae2:	f7ea fdb1 	bl	8000648 <__aeabi_dmul>
 8015ae6:	a330      	add	r3, pc, #192	@ (adr r3, 8015ba8 <__ieee754_acos+0x2c0>)
 8015ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aec:	f7ea fbf6 	bl	80002dc <__adddf3>
 8015af0:	4622      	mov	r2, r4
 8015af2:	462b      	mov	r3, r5
 8015af4:	f7ea fda8 	bl	8000648 <__aeabi_dmul>
 8015af8:	a32d      	add	r3, pc, #180	@ (adr r3, 8015bb0 <__ieee754_acos+0x2c8>)
 8015afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015afe:	f7ea fbeb 	bl	80002d8 <__aeabi_dsub>
 8015b02:	4622      	mov	r2, r4
 8015b04:	462b      	mov	r3, r5
 8015b06:	f7ea fd9f 	bl	8000648 <__aeabi_dmul>
 8015b0a:	4b34      	ldr	r3, [pc, #208]	@ (8015bdc <__ieee754_acos+0x2f4>)
 8015b0c:	2200      	movs	r2, #0
 8015b0e:	f7ea fbe5 	bl	80002dc <__adddf3>
 8015b12:	ec45 4b10 	vmov	d0, r4, r5
 8015b16:	4680      	mov	r8, r0
 8015b18:	4689      	mov	r9, r1
 8015b1a:	f7ff fe09 	bl	8015730 <__ieee754_sqrt>
 8015b1e:	ec55 4b10 	vmov	r4, r5, d0
 8015b22:	4642      	mov	r2, r8
 8015b24:	464b      	mov	r3, r9
 8015b26:	4630      	mov	r0, r6
 8015b28:	4639      	mov	r1, r7
 8015b2a:	f7ea feb7 	bl	800089c <__aeabi_ddiv>
 8015b2e:	4622      	mov	r2, r4
 8015b30:	462b      	mov	r3, r5
 8015b32:	f7ea fd89 	bl	8000648 <__aeabi_dmul>
 8015b36:	a320      	add	r3, pc, #128	@ (adr r3, 8015bb8 <__ieee754_acos+0x2d0>)
 8015b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b3c:	f7ea fbcc 	bl	80002d8 <__aeabi_dsub>
 8015b40:	4622      	mov	r2, r4
 8015b42:	462b      	mov	r3, r5
 8015b44:	f7ea fbca 	bl	80002dc <__adddf3>
 8015b48:	4602      	mov	r2, r0
 8015b4a:	460b      	mov	r3, r1
 8015b4c:	f7ea fbc6 	bl	80002dc <__adddf3>
 8015b50:	4602      	mov	r2, r0
 8015b52:	460b      	mov	r3, r1
 8015b54:	a11c      	add	r1, pc, #112	@ (adr r1, 8015bc8 <__ieee754_acos+0x2e0>)
 8015b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b5a:	e76e      	b.n	8015a3a <__ieee754_acos+0x152>
 8015b5c:	f3af 8000 	nop.w
	...
 8015b68:	0dfdf709 	.word	0x0dfdf709
 8015b6c:	3f023de1 	.word	0x3f023de1
 8015b70:	7501b288 	.word	0x7501b288
 8015b74:	3f49efe0 	.word	0x3f49efe0
 8015b78:	b5688f3b 	.word	0xb5688f3b
 8015b7c:	3fa48228 	.word	0x3fa48228
 8015b80:	0e884455 	.word	0x0e884455
 8015b84:	3fc9c155 	.word	0x3fc9c155
 8015b88:	03eb6f7d 	.word	0x03eb6f7d
 8015b8c:	3fd4d612 	.word	0x3fd4d612
 8015b90:	55555555 	.word	0x55555555
 8015b94:	3fc55555 	.word	0x3fc55555
 8015b98:	b12e9282 	.word	0xb12e9282
 8015b9c:	3fb3b8c5 	.word	0x3fb3b8c5
 8015ba0:	1b8d0159 	.word	0x1b8d0159
 8015ba4:	3fe6066c 	.word	0x3fe6066c
 8015ba8:	9c598ac8 	.word	0x9c598ac8
 8015bac:	40002ae5 	.word	0x40002ae5
 8015bb0:	1c8a2d4b 	.word	0x1c8a2d4b
 8015bb4:	40033a27 	.word	0x40033a27
 8015bb8:	33145c07 	.word	0x33145c07
 8015bbc:	3c91a626 	.word	0x3c91a626
 8015bc0:	54442d18 	.word	0x54442d18
 8015bc4:	3ff921fb 	.word	0x3ff921fb
 8015bc8:	54442d18 	.word	0x54442d18
 8015bcc:	400921fb 	.word	0x400921fb
 8015bd0:	3fefffff 	.word	0x3fefffff
 8015bd4:	3fdfffff 	.word	0x3fdfffff
 8015bd8:	3c600000 	.word	0x3c600000
 8015bdc:	3ff00000 	.word	0x3ff00000
 8015be0:	3fe00000 	.word	0x3fe00000
 8015be4:	4622      	mov	r2, r4
 8015be6:	462b      	mov	r3, r5
 8015be8:	496b      	ldr	r1, [pc, #428]	@ (8015d98 <__ieee754_acos+0x4b0>)
 8015bea:	2000      	movs	r0, #0
 8015bec:	f7ea fb74 	bl	80002d8 <__aeabi_dsub>
 8015bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8015d9c <__ieee754_acos+0x4b4>)
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	f7ea fd28 	bl	8000648 <__aeabi_dmul>
 8015bf8:	4604      	mov	r4, r0
 8015bfa:	460d      	mov	r5, r1
 8015bfc:	ec45 4b10 	vmov	d0, r4, r5
 8015c00:	f7ff fd96 	bl	8015730 <__ieee754_sqrt>
 8015c04:	a34c      	add	r3, pc, #304	@ (adr r3, 8015d38 <__ieee754_acos+0x450>)
 8015c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c0a:	4620      	mov	r0, r4
 8015c0c:	4629      	mov	r1, r5
 8015c0e:	ec59 8b10 	vmov	r8, r9, d0
 8015c12:	f7ea fd19 	bl	8000648 <__aeabi_dmul>
 8015c16:	a34a      	add	r3, pc, #296	@ (adr r3, 8015d40 <__ieee754_acos+0x458>)
 8015c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c1c:	f7ea fb5e 	bl	80002dc <__adddf3>
 8015c20:	4622      	mov	r2, r4
 8015c22:	462b      	mov	r3, r5
 8015c24:	f7ea fd10 	bl	8000648 <__aeabi_dmul>
 8015c28:	a347      	add	r3, pc, #284	@ (adr r3, 8015d48 <__ieee754_acos+0x460>)
 8015c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c2e:	f7ea fb53 	bl	80002d8 <__aeabi_dsub>
 8015c32:	4622      	mov	r2, r4
 8015c34:	462b      	mov	r3, r5
 8015c36:	f7ea fd07 	bl	8000648 <__aeabi_dmul>
 8015c3a:	a345      	add	r3, pc, #276	@ (adr r3, 8015d50 <__ieee754_acos+0x468>)
 8015c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c40:	f7ea fb4c 	bl	80002dc <__adddf3>
 8015c44:	4622      	mov	r2, r4
 8015c46:	462b      	mov	r3, r5
 8015c48:	f7ea fcfe 	bl	8000648 <__aeabi_dmul>
 8015c4c:	a342      	add	r3, pc, #264	@ (adr r3, 8015d58 <__ieee754_acos+0x470>)
 8015c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c52:	f7ea fb41 	bl	80002d8 <__aeabi_dsub>
 8015c56:	4622      	mov	r2, r4
 8015c58:	462b      	mov	r3, r5
 8015c5a:	f7ea fcf5 	bl	8000648 <__aeabi_dmul>
 8015c5e:	a340      	add	r3, pc, #256	@ (adr r3, 8015d60 <__ieee754_acos+0x478>)
 8015c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c64:	f7ea fb3a 	bl	80002dc <__adddf3>
 8015c68:	4622      	mov	r2, r4
 8015c6a:	462b      	mov	r3, r5
 8015c6c:	f7ea fcec 	bl	8000648 <__aeabi_dmul>
 8015c70:	a33d      	add	r3, pc, #244	@ (adr r3, 8015d68 <__ieee754_acos+0x480>)
 8015c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c76:	4682      	mov	sl, r0
 8015c78:	468b      	mov	fp, r1
 8015c7a:	4620      	mov	r0, r4
 8015c7c:	4629      	mov	r1, r5
 8015c7e:	f7ea fce3 	bl	8000648 <__aeabi_dmul>
 8015c82:	a33b      	add	r3, pc, #236	@ (adr r3, 8015d70 <__ieee754_acos+0x488>)
 8015c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c88:	f7ea fb26 	bl	80002d8 <__aeabi_dsub>
 8015c8c:	4622      	mov	r2, r4
 8015c8e:	462b      	mov	r3, r5
 8015c90:	f7ea fcda 	bl	8000648 <__aeabi_dmul>
 8015c94:	a338      	add	r3, pc, #224	@ (adr r3, 8015d78 <__ieee754_acos+0x490>)
 8015c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c9a:	f7ea fb1f 	bl	80002dc <__adddf3>
 8015c9e:	4622      	mov	r2, r4
 8015ca0:	462b      	mov	r3, r5
 8015ca2:	f7ea fcd1 	bl	8000648 <__aeabi_dmul>
 8015ca6:	a336      	add	r3, pc, #216	@ (adr r3, 8015d80 <__ieee754_acos+0x498>)
 8015ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cac:	f7ea fb14 	bl	80002d8 <__aeabi_dsub>
 8015cb0:	4622      	mov	r2, r4
 8015cb2:	462b      	mov	r3, r5
 8015cb4:	f7ea fcc8 	bl	8000648 <__aeabi_dmul>
 8015cb8:	4b37      	ldr	r3, [pc, #220]	@ (8015d98 <__ieee754_acos+0x4b0>)
 8015cba:	2200      	movs	r2, #0
 8015cbc:	f7ea fb0e 	bl	80002dc <__adddf3>
 8015cc0:	4602      	mov	r2, r0
 8015cc2:	460b      	mov	r3, r1
 8015cc4:	4650      	mov	r0, sl
 8015cc6:	4659      	mov	r1, fp
 8015cc8:	f7ea fde8 	bl	800089c <__aeabi_ddiv>
 8015ccc:	4642      	mov	r2, r8
 8015cce:	464b      	mov	r3, r9
 8015cd0:	f7ea fcba 	bl	8000648 <__aeabi_dmul>
 8015cd4:	2600      	movs	r6, #0
 8015cd6:	4682      	mov	sl, r0
 8015cd8:	468b      	mov	fp, r1
 8015cda:	4632      	mov	r2, r6
 8015cdc:	464b      	mov	r3, r9
 8015cde:	4630      	mov	r0, r6
 8015ce0:	4649      	mov	r1, r9
 8015ce2:	f7ea fcb1 	bl	8000648 <__aeabi_dmul>
 8015ce6:	4602      	mov	r2, r0
 8015ce8:	460b      	mov	r3, r1
 8015cea:	4620      	mov	r0, r4
 8015cec:	4629      	mov	r1, r5
 8015cee:	f7ea faf3 	bl	80002d8 <__aeabi_dsub>
 8015cf2:	4632      	mov	r2, r6
 8015cf4:	4604      	mov	r4, r0
 8015cf6:	460d      	mov	r5, r1
 8015cf8:	464b      	mov	r3, r9
 8015cfa:	4640      	mov	r0, r8
 8015cfc:	4649      	mov	r1, r9
 8015cfe:	f7ea faed 	bl	80002dc <__adddf3>
 8015d02:	4602      	mov	r2, r0
 8015d04:	460b      	mov	r3, r1
 8015d06:	4620      	mov	r0, r4
 8015d08:	4629      	mov	r1, r5
 8015d0a:	f7ea fdc7 	bl	800089c <__aeabi_ddiv>
 8015d0e:	4602      	mov	r2, r0
 8015d10:	460b      	mov	r3, r1
 8015d12:	4650      	mov	r0, sl
 8015d14:	4659      	mov	r1, fp
 8015d16:	f7ea fae1 	bl	80002dc <__adddf3>
 8015d1a:	4632      	mov	r2, r6
 8015d1c:	464b      	mov	r3, r9
 8015d1e:	f7ea fadd 	bl	80002dc <__adddf3>
 8015d22:	4602      	mov	r2, r0
 8015d24:	460b      	mov	r3, r1
 8015d26:	f7ea fad9 	bl	80002dc <__adddf3>
 8015d2a:	e5fd      	b.n	8015928 <__ieee754_acos+0x40>
 8015d2c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8015d88 <__ieee754_acos+0x4a0>
 8015d30:	e5ee      	b.n	8015910 <__ieee754_acos+0x28>
 8015d32:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8015d90 <__ieee754_acos+0x4a8>
 8015d36:	e5eb      	b.n	8015910 <__ieee754_acos+0x28>
 8015d38:	0dfdf709 	.word	0x0dfdf709
 8015d3c:	3f023de1 	.word	0x3f023de1
 8015d40:	7501b288 	.word	0x7501b288
 8015d44:	3f49efe0 	.word	0x3f49efe0
 8015d48:	b5688f3b 	.word	0xb5688f3b
 8015d4c:	3fa48228 	.word	0x3fa48228
 8015d50:	0e884455 	.word	0x0e884455
 8015d54:	3fc9c155 	.word	0x3fc9c155
 8015d58:	03eb6f7d 	.word	0x03eb6f7d
 8015d5c:	3fd4d612 	.word	0x3fd4d612
 8015d60:	55555555 	.word	0x55555555
 8015d64:	3fc55555 	.word	0x3fc55555
 8015d68:	b12e9282 	.word	0xb12e9282
 8015d6c:	3fb3b8c5 	.word	0x3fb3b8c5
 8015d70:	1b8d0159 	.word	0x1b8d0159
 8015d74:	3fe6066c 	.word	0x3fe6066c
 8015d78:	9c598ac8 	.word	0x9c598ac8
 8015d7c:	40002ae5 	.word	0x40002ae5
 8015d80:	1c8a2d4b 	.word	0x1c8a2d4b
 8015d84:	40033a27 	.word	0x40033a27
 8015d88:	54442d18 	.word	0x54442d18
 8015d8c:	400921fb 	.word	0x400921fb
 8015d90:	54442d18 	.word	0x54442d18
 8015d94:	3ff921fb 	.word	0x3ff921fb
 8015d98:	3ff00000 	.word	0x3ff00000
 8015d9c:	3fe00000 	.word	0x3fe00000

08015da0 <__ieee754_pow>:
 8015da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015da4:	b091      	sub	sp, #68	@ 0x44
 8015da6:	ed8d 1b00 	vstr	d1, [sp]
 8015daa:	e9dd 1900 	ldrd	r1, r9, [sp]
 8015dae:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015db2:	ea5a 0001 	orrs.w	r0, sl, r1
 8015db6:	ec57 6b10 	vmov	r6, r7, d0
 8015dba:	d113      	bne.n	8015de4 <__ieee754_pow+0x44>
 8015dbc:	19b3      	adds	r3, r6, r6
 8015dbe:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015dc2:	4152      	adcs	r2, r2
 8015dc4:	4298      	cmp	r0, r3
 8015dc6:	4b98      	ldr	r3, [pc, #608]	@ (8016028 <__ieee754_pow+0x288>)
 8015dc8:	4193      	sbcs	r3, r2
 8015dca:	f080 84ea 	bcs.w	80167a2 <__ieee754_pow+0xa02>
 8015dce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015dd2:	4630      	mov	r0, r6
 8015dd4:	4639      	mov	r1, r7
 8015dd6:	f7ea fa81 	bl	80002dc <__adddf3>
 8015dda:	ec41 0b10 	vmov	d0, r0, r1
 8015dde:	b011      	add	sp, #68	@ 0x44
 8015de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015de4:	4a91      	ldr	r2, [pc, #580]	@ (801602c <__ieee754_pow+0x28c>)
 8015de6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8015dea:	4590      	cmp	r8, r2
 8015dec:	463d      	mov	r5, r7
 8015dee:	4633      	mov	r3, r6
 8015df0:	d806      	bhi.n	8015e00 <__ieee754_pow+0x60>
 8015df2:	d101      	bne.n	8015df8 <__ieee754_pow+0x58>
 8015df4:	2e00      	cmp	r6, #0
 8015df6:	d1ea      	bne.n	8015dce <__ieee754_pow+0x2e>
 8015df8:	4592      	cmp	sl, r2
 8015dfa:	d801      	bhi.n	8015e00 <__ieee754_pow+0x60>
 8015dfc:	d10e      	bne.n	8015e1c <__ieee754_pow+0x7c>
 8015dfe:	b169      	cbz	r1, 8015e1c <__ieee754_pow+0x7c>
 8015e00:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8015e04:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8015e08:	431d      	orrs	r5, r3
 8015e0a:	d1e0      	bne.n	8015dce <__ieee754_pow+0x2e>
 8015e0c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015e10:	18db      	adds	r3, r3, r3
 8015e12:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015e16:	4152      	adcs	r2, r2
 8015e18:	429d      	cmp	r5, r3
 8015e1a:	e7d4      	b.n	8015dc6 <__ieee754_pow+0x26>
 8015e1c:	2d00      	cmp	r5, #0
 8015e1e:	46c3      	mov	fp, r8
 8015e20:	da3a      	bge.n	8015e98 <__ieee754_pow+0xf8>
 8015e22:	4a83      	ldr	r2, [pc, #524]	@ (8016030 <__ieee754_pow+0x290>)
 8015e24:	4592      	cmp	sl, r2
 8015e26:	d84d      	bhi.n	8015ec4 <__ieee754_pow+0x124>
 8015e28:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8015e2c:	4592      	cmp	sl, r2
 8015e2e:	f240 84c7 	bls.w	80167c0 <__ieee754_pow+0xa20>
 8015e32:	ea4f 522a 	mov.w	r2, sl, asr #20
 8015e36:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015e3a:	2a14      	cmp	r2, #20
 8015e3c:	dd0f      	ble.n	8015e5e <__ieee754_pow+0xbe>
 8015e3e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8015e42:	fa21 f402 	lsr.w	r4, r1, r2
 8015e46:	fa04 f202 	lsl.w	r2, r4, r2
 8015e4a:	428a      	cmp	r2, r1
 8015e4c:	f040 84b8 	bne.w	80167c0 <__ieee754_pow+0xa20>
 8015e50:	f004 0401 	and.w	r4, r4, #1
 8015e54:	f1c4 0402 	rsb	r4, r4, #2
 8015e58:	2900      	cmp	r1, #0
 8015e5a:	d158      	bne.n	8015f0e <__ieee754_pow+0x16e>
 8015e5c:	e00e      	b.n	8015e7c <__ieee754_pow+0xdc>
 8015e5e:	2900      	cmp	r1, #0
 8015e60:	d154      	bne.n	8015f0c <__ieee754_pow+0x16c>
 8015e62:	f1c2 0214 	rsb	r2, r2, #20
 8015e66:	fa4a f402 	asr.w	r4, sl, r2
 8015e6a:	fa04 f202 	lsl.w	r2, r4, r2
 8015e6e:	4552      	cmp	r2, sl
 8015e70:	f040 84a3 	bne.w	80167ba <__ieee754_pow+0xa1a>
 8015e74:	f004 0401 	and.w	r4, r4, #1
 8015e78:	f1c4 0402 	rsb	r4, r4, #2
 8015e7c:	4a6d      	ldr	r2, [pc, #436]	@ (8016034 <__ieee754_pow+0x294>)
 8015e7e:	4592      	cmp	sl, r2
 8015e80:	d12e      	bne.n	8015ee0 <__ieee754_pow+0x140>
 8015e82:	f1b9 0f00 	cmp.w	r9, #0
 8015e86:	f280 8494 	bge.w	80167b2 <__ieee754_pow+0xa12>
 8015e8a:	496a      	ldr	r1, [pc, #424]	@ (8016034 <__ieee754_pow+0x294>)
 8015e8c:	4632      	mov	r2, r6
 8015e8e:	463b      	mov	r3, r7
 8015e90:	2000      	movs	r0, #0
 8015e92:	f7ea fd03 	bl	800089c <__aeabi_ddiv>
 8015e96:	e7a0      	b.n	8015dda <__ieee754_pow+0x3a>
 8015e98:	2400      	movs	r4, #0
 8015e9a:	bbc1      	cbnz	r1, 8015f0e <__ieee754_pow+0x16e>
 8015e9c:	4a63      	ldr	r2, [pc, #396]	@ (801602c <__ieee754_pow+0x28c>)
 8015e9e:	4592      	cmp	sl, r2
 8015ea0:	d1ec      	bne.n	8015e7c <__ieee754_pow+0xdc>
 8015ea2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8015ea6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8015eaa:	431a      	orrs	r2, r3
 8015eac:	f000 8479 	beq.w	80167a2 <__ieee754_pow+0xa02>
 8015eb0:	4b61      	ldr	r3, [pc, #388]	@ (8016038 <__ieee754_pow+0x298>)
 8015eb2:	4598      	cmp	r8, r3
 8015eb4:	d908      	bls.n	8015ec8 <__ieee754_pow+0x128>
 8015eb6:	f1b9 0f00 	cmp.w	r9, #0
 8015eba:	f2c0 8476 	blt.w	80167aa <__ieee754_pow+0xa0a>
 8015ebe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015ec2:	e78a      	b.n	8015dda <__ieee754_pow+0x3a>
 8015ec4:	2402      	movs	r4, #2
 8015ec6:	e7e8      	b.n	8015e9a <__ieee754_pow+0xfa>
 8015ec8:	f1b9 0f00 	cmp.w	r9, #0
 8015ecc:	f04f 0000 	mov.w	r0, #0
 8015ed0:	f04f 0100 	mov.w	r1, #0
 8015ed4:	da81      	bge.n	8015dda <__ieee754_pow+0x3a>
 8015ed6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015eda:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8015ede:	e77c      	b.n	8015dda <__ieee754_pow+0x3a>
 8015ee0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8015ee4:	d106      	bne.n	8015ef4 <__ieee754_pow+0x154>
 8015ee6:	4632      	mov	r2, r6
 8015ee8:	463b      	mov	r3, r7
 8015eea:	4630      	mov	r0, r6
 8015eec:	4639      	mov	r1, r7
 8015eee:	f7ea fbab 	bl	8000648 <__aeabi_dmul>
 8015ef2:	e772      	b.n	8015dda <__ieee754_pow+0x3a>
 8015ef4:	4a51      	ldr	r2, [pc, #324]	@ (801603c <__ieee754_pow+0x29c>)
 8015ef6:	4591      	cmp	r9, r2
 8015ef8:	d109      	bne.n	8015f0e <__ieee754_pow+0x16e>
 8015efa:	2d00      	cmp	r5, #0
 8015efc:	db07      	blt.n	8015f0e <__ieee754_pow+0x16e>
 8015efe:	ec47 6b10 	vmov	d0, r6, r7
 8015f02:	b011      	add	sp, #68	@ 0x44
 8015f04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f08:	f7ff bc12 	b.w	8015730 <__ieee754_sqrt>
 8015f0c:	2400      	movs	r4, #0
 8015f0e:	ec47 6b10 	vmov	d0, r6, r7
 8015f12:	9302      	str	r3, [sp, #8]
 8015f14:	f7ff fbf8 	bl	8015708 <fabs>
 8015f18:	9b02      	ldr	r3, [sp, #8]
 8015f1a:	ec51 0b10 	vmov	r0, r1, d0
 8015f1e:	bb53      	cbnz	r3, 8015f76 <__ieee754_pow+0x1d6>
 8015f20:	4b44      	ldr	r3, [pc, #272]	@ (8016034 <__ieee754_pow+0x294>)
 8015f22:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d002      	beq.n	8015f30 <__ieee754_pow+0x190>
 8015f2a:	f1b8 0f00 	cmp.w	r8, #0
 8015f2e:	d122      	bne.n	8015f76 <__ieee754_pow+0x1d6>
 8015f30:	f1b9 0f00 	cmp.w	r9, #0
 8015f34:	da05      	bge.n	8015f42 <__ieee754_pow+0x1a2>
 8015f36:	4602      	mov	r2, r0
 8015f38:	460b      	mov	r3, r1
 8015f3a:	2000      	movs	r0, #0
 8015f3c:	493d      	ldr	r1, [pc, #244]	@ (8016034 <__ieee754_pow+0x294>)
 8015f3e:	f7ea fcad 	bl	800089c <__aeabi_ddiv>
 8015f42:	2d00      	cmp	r5, #0
 8015f44:	f6bf af49 	bge.w	8015dda <__ieee754_pow+0x3a>
 8015f48:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8015f4c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8015f50:	ea58 0804 	orrs.w	r8, r8, r4
 8015f54:	d108      	bne.n	8015f68 <__ieee754_pow+0x1c8>
 8015f56:	4602      	mov	r2, r0
 8015f58:	460b      	mov	r3, r1
 8015f5a:	4610      	mov	r0, r2
 8015f5c:	4619      	mov	r1, r3
 8015f5e:	f7ea f9bb 	bl	80002d8 <__aeabi_dsub>
 8015f62:	4602      	mov	r2, r0
 8015f64:	460b      	mov	r3, r1
 8015f66:	e794      	b.n	8015e92 <__ieee754_pow+0xf2>
 8015f68:	2c01      	cmp	r4, #1
 8015f6a:	f47f af36 	bne.w	8015dda <__ieee754_pow+0x3a>
 8015f6e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015f72:	4619      	mov	r1, r3
 8015f74:	e731      	b.n	8015dda <__ieee754_pow+0x3a>
 8015f76:	0feb      	lsrs	r3, r5, #31
 8015f78:	3b01      	subs	r3, #1
 8015f7a:	ea53 0204 	orrs.w	r2, r3, r4
 8015f7e:	d102      	bne.n	8015f86 <__ieee754_pow+0x1e6>
 8015f80:	4632      	mov	r2, r6
 8015f82:	463b      	mov	r3, r7
 8015f84:	e7e9      	b.n	8015f5a <__ieee754_pow+0x1ba>
 8015f86:	3c01      	subs	r4, #1
 8015f88:	431c      	orrs	r4, r3
 8015f8a:	d016      	beq.n	8015fba <__ieee754_pow+0x21a>
 8015f8c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8016018 <__ieee754_pow+0x278>
 8015f90:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8015f94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015f98:	f240 8112 	bls.w	80161c0 <__ieee754_pow+0x420>
 8015f9c:	4b28      	ldr	r3, [pc, #160]	@ (8016040 <__ieee754_pow+0x2a0>)
 8015f9e:	459a      	cmp	sl, r3
 8015fa0:	4b25      	ldr	r3, [pc, #148]	@ (8016038 <__ieee754_pow+0x298>)
 8015fa2:	d916      	bls.n	8015fd2 <__ieee754_pow+0x232>
 8015fa4:	4598      	cmp	r8, r3
 8015fa6:	d80b      	bhi.n	8015fc0 <__ieee754_pow+0x220>
 8015fa8:	f1b9 0f00 	cmp.w	r9, #0
 8015fac:	da0b      	bge.n	8015fc6 <__ieee754_pow+0x226>
 8015fae:	2000      	movs	r0, #0
 8015fb0:	b011      	add	sp, #68	@ 0x44
 8015fb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fb6:	f000 bceb 	b.w	8016990 <__math_oflow>
 8015fba:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8016020 <__ieee754_pow+0x280>
 8015fbe:	e7e7      	b.n	8015f90 <__ieee754_pow+0x1f0>
 8015fc0:	f1b9 0f00 	cmp.w	r9, #0
 8015fc4:	dcf3      	bgt.n	8015fae <__ieee754_pow+0x20e>
 8015fc6:	2000      	movs	r0, #0
 8015fc8:	b011      	add	sp, #68	@ 0x44
 8015fca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fce:	f000 bcd7 	b.w	8016980 <__math_uflow>
 8015fd2:	4598      	cmp	r8, r3
 8015fd4:	d20c      	bcs.n	8015ff0 <__ieee754_pow+0x250>
 8015fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015fda:	2200      	movs	r2, #0
 8015fdc:	2300      	movs	r3, #0
 8015fde:	f7ea fda5 	bl	8000b2c <__aeabi_dcmplt>
 8015fe2:	3800      	subs	r0, #0
 8015fe4:	bf18      	it	ne
 8015fe6:	2001      	movne	r0, #1
 8015fe8:	f1b9 0f00 	cmp.w	r9, #0
 8015fec:	daec      	bge.n	8015fc8 <__ieee754_pow+0x228>
 8015fee:	e7df      	b.n	8015fb0 <__ieee754_pow+0x210>
 8015ff0:	4b10      	ldr	r3, [pc, #64]	@ (8016034 <__ieee754_pow+0x294>)
 8015ff2:	4598      	cmp	r8, r3
 8015ff4:	f04f 0200 	mov.w	r2, #0
 8015ff8:	d924      	bls.n	8016044 <__ieee754_pow+0x2a4>
 8015ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ffe:	2300      	movs	r3, #0
 8016000:	f7ea fd94 	bl	8000b2c <__aeabi_dcmplt>
 8016004:	3800      	subs	r0, #0
 8016006:	bf18      	it	ne
 8016008:	2001      	movne	r0, #1
 801600a:	f1b9 0f00 	cmp.w	r9, #0
 801600e:	dccf      	bgt.n	8015fb0 <__ieee754_pow+0x210>
 8016010:	e7da      	b.n	8015fc8 <__ieee754_pow+0x228>
 8016012:	bf00      	nop
 8016014:	f3af 8000 	nop.w
 8016018:	00000000 	.word	0x00000000
 801601c:	3ff00000 	.word	0x3ff00000
 8016020:	00000000 	.word	0x00000000
 8016024:	bff00000 	.word	0xbff00000
 8016028:	fff00000 	.word	0xfff00000
 801602c:	7ff00000 	.word	0x7ff00000
 8016030:	433fffff 	.word	0x433fffff
 8016034:	3ff00000 	.word	0x3ff00000
 8016038:	3fefffff 	.word	0x3fefffff
 801603c:	3fe00000 	.word	0x3fe00000
 8016040:	43f00000 	.word	0x43f00000
 8016044:	4b5a      	ldr	r3, [pc, #360]	@ (80161b0 <__ieee754_pow+0x410>)
 8016046:	f7ea f947 	bl	80002d8 <__aeabi_dsub>
 801604a:	a351      	add	r3, pc, #324	@ (adr r3, 8016190 <__ieee754_pow+0x3f0>)
 801604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016050:	4604      	mov	r4, r0
 8016052:	460d      	mov	r5, r1
 8016054:	f7ea faf8 	bl	8000648 <__aeabi_dmul>
 8016058:	a34f      	add	r3, pc, #316	@ (adr r3, 8016198 <__ieee754_pow+0x3f8>)
 801605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801605e:	4606      	mov	r6, r0
 8016060:	460f      	mov	r7, r1
 8016062:	4620      	mov	r0, r4
 8016064:	4629      	mov	r1, r5
 8016066:	f7ea faef 	bl	8000648 <__aeabi_dmul>
 801606a:	4b52      	ldr	r3, [pc, #328]	@ (80161b4 <__ieee754_pow+0x414>)
 801606c:	4682      	mov	sl, r0
 801606e:	468b      	mov	fp, r1
 8016070:	2200      	movs	r2, #0
 8016072:	4620      	mov	r0, r4
 8016074:	4629      	mov	r1, r5
 8016076:	f7ea fae7 	bl	8000648 <__aeabi_dmul>
 801607a:	4602      	mov	r2, r0
 801607c:	460b      	mov	r3, r1
 801607e:	a148      	add	r1, pc, #288	@ (adr r1, 80161a0 <__ieee754_pow+0x400>)
 8016080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016084:	f7ea f928 	bl	80002d8 <__aeabi_dsub>
 8016088:	4622      	mov	r2, r4
 801608a:	462b      	mov	r3, r5
 801608c:	f7ea fadc 	bl	8000648 <__aeabi_dmul>
 8016090:	4602      	mov	r2, r0
 8016092:	460b      	mov	r3, r1
 8016094:	2000      	movs	r0, #0
 8016096:	4948      	ldr	r1, [pc, #288]	@ (80161b8 <__ieee754_pow+0x418>)
 8016098:	f7ea f91e 	bl	80002d8 <__aeabi_dsub>
 801609c:	4622      	mov	r2, r4
 801609e:	4680      	mov	r8, r0
 80160a0:	4689      	mov	r9, r1
 80160a2:	462b      	mov	r3, r5
 80160a4:	4620      	mov	r0, r4
 80160a6:	4629      	mov	r1, r5
 80160a8:	f7ea face 	bl	8000648 <__aeabi_dmul>
 80160ac:	4602      	mov	r2, r0
 80160ae:	460b      	mov	r3, r1
 80160b0:	4640      	mov	r0, r8
 80160b2:	4649      	mov	r1, r9
 80160b4:	f7ea fac8 	bl	8000648 <__aeabi_dmul>
 80160b8:	a33b      	add	r3, pc, #236	@ (adr r3, 80161a8 <__ieee754_pow+0x408>)
 80160ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160be:	f7ea fac3 	bl	8000648 <__aeabi_dmul>
 80160c2:	4602      	mov	r2, r0
 80160c4:	460b      	mov	r3, r1
 80160c6:	4650      	mov	r0, sl
 80160c8:	4659      	mov	r1, fp
 80160ca:	f7ea f905 	bl	80002d8 <__aeabi_dsub>
 80160ce:	4602      	mov	r2, r0
 80160d0:	460b      	mov	r3, r1
 80160d2:	4680      	mov	r8, r0
 80160d4:	4689      	mov	r9, r1
 80160d6:	4630      	mov	r0, r6
 80160d8:	4639      	mov	r1, r7
 80160da:	f7ea f8ff 	bl	80002dc <__adddf3>
 80160de:	2400      	movs	r4, #0
 80160e0:	4632      	mov	r2, r6
 80160e2:	463b      	mov	r3, r7
 80160e4:	4620      	mov	r0, r4
 80160e6:	460d      	mov	r5, r1
 80160e8:	f7ea f8f6 	bl	80002d8 <__aeabi_dsub>
 80160ec:	4602      	mov	r2, r0
 80160ee:	460b      	mov	r3, r1
 80160f0:	4640      	mov	r0, r8
 80160f2:	4649      	mov	r1, r9
 80160f4:	f7ea f8f0 	bl	80002d8 <__aeabi_dsub>
 80160f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80160fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016100:	2300      	movs	r3, #0
 8016102:	9304      	str	r3, [sp, #16]
 8016104:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016108:	4606      	mov	r6, r0
 801610a:	460f      	mov	r7, r1
 801610c:	4652      	mov	r2, sl
 801610e:	465b      	mov	r3, fp
 8016110:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016114:	f7ea f8e0 	bl	80002d8 <__aeabi_dsub>
 8016118:	4622      	mov	r2, r4
 801611a:	462b      	mov	r3, r5
 801611c:	f7ea fa94 	bl	8000648 <__aeabi_dmul>
 8016120:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016124:	4680      	mov	r8, r0
 8016126:	4689      	mov	r9, r1
 8016128:	4630      	mov	r0, r6
 801612a:	4639      	mov	r1, r7
 801612c:	f7ea fa8c 	bl	8000648 <__aeabi_dmul>
 8016130:	4602      	mov	r2, r0
 8016132:	460b      	mov	r3, r1
 8016134:	4640      	mov	r0, r8
 8016136:	4649      	mov	r1, r9
 8016138:	f7ea f8d0 	bl	80002dc <__adddf3>
 801613c:	4652      	mov	r2, sl
 801613e:	465b      	mov	r3, fp
 8016140:	4606      	mov	r6, r0
 8016142:	460f      	mov	r7, r1
 8016144:	4620      	mov	r0, r4
 8016146:	4629      	mov	r1, r5
 8016148:	f7ea fa7e 	bl	8000648 <__aeabi_dmul>
 801614c:	460b      	mov	r3, r1
 801614e:	4602      	mov	r2, r0
 8016150:	4680      	mov	r8, r0
 8016152:	4689      	mov	r9, r1
 8016154:	4630      	mov	r0, r6
 8016156:	4639      	mov	r1, r7
 8016158:	f7ea f8c0 	bl	80002dc <__adddf3>
 801615c:	4b17      	ldr	r3, [pc, #92]	@ (80161bc <__ieee754_pow+0x41c>)
 801615e:	4299      	cmp	r1, r3
 8016160:	4604      	mov	r4, r0
 8016162:	460d      	mov	r5, r1
 8016164:	468a      	mov	sl, r1
 8016166:	468b      	mov	fp, r1
 8016168:	f340 82ef 	ble.w	801674a <__ieee754_pow+0x9aa>
 801616c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8016170:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8016174:	4303      	orrs	r3, r0
 8016176:	f000 81e8 	beq.w	801654a <__ieee754_pow+0x7aa>
 801617a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801617e:	2200      	movs	r2, #0
 8016180:	2300      	movs	r3, #0
 8016182:	f7ea fcd3 	bl	8000b2c <__aeabi_dcmplt>
 8016186:	3800      	subs	r0, #0
 8016188:	bf18      	it	ne
 801618a:	2001      	movne	r0, #1
 801618c:	e710      	b.n	8015fb0 <__ieee754_pow+0x210>
 801618e:	bf00      	nop
 8016190:	60000000 	.word	0x60000000
 8016194:	3ff71547 	.word	0x3ff71547
 8016198:	f85ddf44 	.word	0xf85ddf44
 801619c:	3e54ae0b 	.word	0x3e54ae0b
 80161a0:	55555555 	.word	0x55555555
 80161a4:	3fd55555 	.word	0x3fd55555
 80161a8:	652b82fe 	.word	0x652b82fe
 80161ac:	3ff71547 	.word	0x3ff71547
 80161b0:	3ff00000 	.word	0x3ff00000
 80161b4:	3fd00000 	.word	0x3fd00000
 80161b8:	3fe00000 	.word	0x3fe00000
 80161bc:	408fffff 	.word	0x408fffff
 80161c0:	4bd5      	ldr	r3, [pc, #852]	@ (8016518 <__ieee754_pow+0x778>)
 80161c2:	402b      	ands	r3, r5
 80161c4:	2200      	movs	r2, #0
 80161c6:	b92b      	cbnz	r3, 80161d4 <__ieee754_pow+0x434>
 80161c8:	4bd4      	ldr	r3, [pc, #848]	@ (801651c <__ieee754_pow+0x77c>)
 80161ca:	f7ea fa3d 	bl	8000648 <__aeabi_dmul>
 80161ce:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80161d2:	468b      	mov	fp, r1
 80161d4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80161d8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80161dc:	4413      	add	r3, r2
 80161de:	930a      	str	r3, [sp, #40]	@ 0x28
 80161e0:	4bcf      	ldr	r3, [pc, #828]	@ (8016520 <__ieee754_pow+0x780>)
 80161e2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80161e6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80161ea:	459b      	cmp	fp, r3
 80161ec:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80161f0:	dd08      	ble.n	8016204 <__ieee754_pow+0x464>
 80161f2:	4bcc      	ldr	r3, [pc, #816]	@ (8016524 <__ieee754_pow+0x784>)
 80161f4:	459b      	cmp	fp, r3
 80161f6:	f340 81a5 	ble.w	8016544 <__ieee754_pow+0x7a4>
 80161fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80161fc:	3301      	adds	r3, #1
 80161fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8016200:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8016204:	f04f 0a00 	mov.w	sl, #0
 8016208:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801620c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801620e:	4bc6      	ldr	r3, [pc, #792]	@ (8016528 <__ieee754_pow+0x788>)
 8016210:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016214:	ed93 7b00 	vldr	d7, [r3]
 8016218:	4629      	mov	r1, r5
 801621a:	ec53 2b17 	vmov	r2, r3, d7
 801621e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016222:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016226:	f7ea f857 	bl	80002d8 <__aeabi_dsub>
 801622a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801622e:	4606      	mov	r6, r0
 8016230:	460f      	mov	r7, r1
 8016232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016236:	f7ea f851 	bl	80002dc <__adddf3>
 801623a:	4602      	mov	r2, r0
 801623c:	460b      	mov	r3, r1
 801623e:	2000      	movs	r0, #0
 8016240:	49ba      	ldr	r1, [pc, #744]	@ (801652c <__ieee754_pow+0x78c>)
 8016242:	f7ea fb2b 	bl	800089c <__aeabi_ddiv>
 8016246:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801624a:	4602      	mov	r2, r0
 801624c:	460b      	mov	r3, r1
 801624e:	4630      	mov	r0, r6
 8016250:	4639      	mov	r1, r7
 8016252:	f7ea f9f9 	bl	8000648 <__aeabi_dmul>
 8016256:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801625a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801625e:	106d      	asrs	r5, r5, #1
 8016260:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8016264:	f04f 0b00 	mov.w	fp, #0
 8016268:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801626c:	4661      	mov	r1, ip
 801626e:	2200      	movs	r2, #0
 8016270:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016274:	4658      	mov	r0, fp
 8016276:	46e1      	mov	r9, ip
 8016278:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801627c:	4614      	mov	r4, r2
 801627e:	461d      	mov	r5, r3
 8016280:	f7ea f9e2 	bl	8000648 <__aeabi_dmul>
 8016284:	4602      	mov	r2, r0
 8016286:	460b      	mov	r3, r1
 8016288:	4630      	mov	r0, r6
 801628a:	4639      	mov	r1, r7
 801628c:	f7ea f824 	bl	80002d8 <__aeabi_dsub>
 8016290:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016294:	4606      	mov	r6, r0
 8016296:	460f      	mov	r7, r1
 8016298:	4620      	mov	r0, r4
 801629a:	4629      	mov	r1, r5
 801629c:	f7ea f81c 	bl	80002d8 <__aeabi_dsub>
 80162a0:	4602      	mov	r2, r0
 80162a2:	460b      	mov	r3, r1
 80162a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80162a8:	f7ea f816 	bl	80002d8 <__aeabi_dsub>
 80162ac:	465a      	mov	r2, fp
 80162ae:	464b      	mov	r3, r9
 80162b0:	f7ea f9ca 	bl	8000648 <__aeabi_dmul>
 80162b4:	4602      	mov	r2, r0
 80162b6:	460b      	mov	r3, r1
 80162b8:	4630      	mov	r0, r6
 80162ba:	4639      	mov	r1, r7
 80162bc:	f7ea f80c 	bl	80002d8 <__aeabi_dsub>
 80162c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80162c4:	f7ea f9c0 	bl	8000648 <__aeabi_dmul>
 80162c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80162cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80162d0:	4610      	mov	r0, r2
 80162d2:	4619      	mov	r1, r3
 80162d4:	f7ea f9b8 	bl	8000648 <__aeabi_dmul>
 80162d8:	a37d      	add	r3, pc, #500	@ (adr r3, 80164d0 <__ieee754_pow+0x730>)
 80162da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162de:	4604      	mov	r4, r0
 80162e0:	460d      	mov	r5, r1
 80162e2:	f7ea f9b1 	bl	8000648 <__aeabi_dmul>
 80162e6:	a37c      	add	r3, pc, #496	@ (adr r3, 80164d8 <__ieee754_pow+0x738>)
 80162e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ec:	f7e9 fff6 	bl	80002dc <__adddf3>
 80162f0:	4622      	mov	r2, r4
 80162f2:	462b      	mov	r3, r5
 80162f4:	f7ea f9a8 	bl	8000648 <__aeabi_dmul>
 80162f8:	a379      	add	r3, pc, #484	@ (adr r3, 80164e0 <__ieee754_pow+0x740>)
 80162fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162fe:	f7e9 ffed 	bl	80002dc <__adddf3>
 8016302:	4622      	mov	r2, r4
 8016304:	462b      	mov	r3, r5
 8016306:	f7ea f99f 	bl	8000648 <__aeabi_dmul>
 801630a:	a377      	add	r3, pc, #476	@ (adr r3, 80164e8 <__ieee754_pow+0x748>)
 801630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016310:	f7e9 ffe4 	bl	80002dc <__adddf3>
 8016314:	4622      	mov	r2, r4
 8016316:	462b      	mov	r3, r5
 8016318:	f7ea f996 	bl	8000648 <__aeabi_dmul>
 801631c:	a374      	add	r3, pc, #464	@ (adr r3, 80164f0 <__ieee754_pow+0x750>)
 801631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016322:	f7e9 ffdb 	bl	80002dc <__adddf3>
 8016326:	4622      	mov	r2, r4
 8016328:	462b      	mov	r3, r5
 801632a:	f7ea f98d 	bl	8000648 <__aeabi_dmul>
 801632e:	a372      	add	r3, pc, #456	@ (adr r3, 80164f8 <__ieee754_pow+0x758>)
 8016330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016334:	f7e9 ffd2 	bl	80002dc <__adddf3>
 8016338:	4622      	mov	r2, r4
 801633a:	4606      	mov	r6, r0
 801633c:	460f      	mov	r7, r1
 801633e:	462b      	mov	r3, r5
 8016340:	4620      	mov	r0, r4
 8016342:	4629      	mov	r1, r5
 8016344:	f7ea f980 	bl	8000648 <__aeabi_dmul>
 8016348:	4602      	mov	r2, r0
 801634a:	460b      	mov	r3, r1
 801634c:	4630      	mov	r0, r6
 801634e:	4639      	mov	r1, r7
 8016350:	f7ea f97a 	bl	8000648 <__aeabi_dmul>
 8016354:	465a      	mov	r2, fp
 8016356:	4604      	mov	r4, r0
 8016358:	460d      	mov	r5, r1
 801635a:	464b      	mov	r3, r9
 801635c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016360:	f7e9 ffbc 	bl	80002dc <__adddf3>
 8016364:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016368:	f7ea f96e 	bl	8000648 <__aeabi_dmul>
 801636c:	4622      	mov	r2, r4
 801636e:	462b      	mov	r3, r5
 8016370:	f7e9 ffb4 	bl	80002dc <__adddf3>
 8016374:	465a      	mov	r2, fp
 8016376:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801637a:	464b      	mov	r3, r9
 801637c:	4658      	mov	r0, fp
 801637e:	4649      	mov	r1, r9
 8016380:	f7ea f962 	bl	8000648 <__aeabi_dmul>
 8016384:	4b6a      	ldr	r3, [pc, #424]	@ (8016530 <__ieee754_pow+0x790>)
 8016386:	2200      	movs	r2, #0
 8016388:	4606      	mov	r6, r0
 801638a:	460f      	mov	r7, r1
 801638c:	f7e9 ffa6 	bl	80002dc <__adddf3>
 8016390:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016394:	f7e9 ffa2 	bl	80002dc <__adddf3>
 8016398:	46d8      	mov	r8, fp
 801639a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801639e:	460d      	mov	r5, r1
 80163a0:	465a      	mov	r2, fp
 80163a2:	460b      	mov	r3, r1
 80163a4:	4640      	mov	r0, r8
 80163a6:	4649      	mov	r1, r9
 80163a8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80163ac:	f7ea f94c 	bl	8000648 <__aeabi_dmul>
 80163b0:	465c      	mov	r4, fp
 80163b2:	4680      	mov	r8, r0
 80163b4:	4689      	mov	r9, r1
 80163b6:	4b5e      	ldr	r3, [pc, #376]	@ (8016530 <__ieee754_pow+0x790>)
 80163b8:	2200      	movs	r2, #0
 80163ba:	4620      	mov	r0, r4
 80163bc:	4629      	mov	r1, r5
 80163be:	f7e9 ff8b 	bl	80002d8 <__aeabi_dsub>
 80163c2:	4632      	mov	r2, r6
 80163c4:	463b      	mov	r3, r7
 80163c6:	f7e9 ff87 	bl	80002d8 <__aeabi_dsub>
 80163ca:	4602      	mov	r2, r0
 80163cc:	460b      	mov	r3, r1
 80163ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80163d2:	f7e9 ff81 	bl	80002d8 <__aeabi_dsub>
 80163d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163da:	f7ea f935 	bl	8000648 <__aeabi_dmul>
 80163de:	4622      	mov	r2, r4
 80163e0:	4606      	mov	r6, r0
 80163e2:	460f      	mov	r7, r1
 80163e4:	462b      	mov	r3, r5
 80163e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80163ea:	f7ea f92d 	bl	8000648 <__aeabi_dmul>
 80163ee:	4602      	mov	r2, r0
 80163f0:	460b      	mov	r3, r1
 80163f2:	4630      	mov	r0, r6
 80163f4:	4639      	mov	r1, r7
 80163f6:	f7e9 ff71 	bl	80002dc <__adddf3>
 80163fa:	4606      	mov	r6, r0
 80163fc:	460f      	mov	r7, r1
 80163fe:	4602      	mov	r2, r0
 8016400:	460b      	mov	r3, r1
 8016402:	4640      	mov	r0, r8
 8016404:	4649      	mov	r1, r9
 8016406:	f7e9 ff69 	bl	80002dc <__adddf3>
 801640a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801640e:	a33c      	add	r3, pc, #240	@ (adr r3, 8016500 <__ieee754_pow+0x760>)
 8016410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016414:	4658      	mov	r0, fp
 8016416:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801641a:	460d      	mov	r5, r1
 801641c:	f7ea f914 	bl	8000648 <__aeabi_dmul>
 8016420:	465c      	mov	r4, fp
 8016422:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016426:	4642      	mov	r2, r8
 8016428:	464b      	mov	r3, r9
 801642a:	4620      	mov	r0, r4
 801642c:	4629      	mov	r1, r5
 801642e:	f7e9 ff53 	bl	80002d8 <__aeabi_dsub>
 8016432:	4602      	mov	r2, r0
 8016434:	460b      	mov	r3, r1
 8016436:	4630      	mov	r0, r6
 8016438:	4639      	mov	r1, r7
 801643a:	f7e9 ff4d 	bl	80002d8 <__aeabi_dsub>
 801643e:	a332      	add	r3, pc, #200	@ (adr r3, 8016508 <__ieee754_pow+0x768>)
 8016440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016444:	f7ea f900 	bl	8000648 <__aeabi_dmul>
 8016448:	a331      	add	r3, pc, #196	@ (adr r3, 8016510 <__ieee754_pow+0x770>)
 801644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801644e:	4606      	mov	r6, r0
 8016450:	460f      	mov	r7, r1
 8016452:	4620      	mov	r0, r4
 8016454:	4629      	mov	r1, r5
 8016456:	f7ea f8f7 	bl	8000648 <__aeabi_dmul>
 801645a:	4602      	mov	r2, r0
 801645c:	460b      	mov	r3, r1
 801645e:	4630      	mov	r0, r6
 8016460:	4639      	mov	r1, r7
 8016462:	f7e9 ff3b 	bl	80002dc <__adddf3>
 8016466:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016468:	4b32      	ldr	r3, [pc, #200]	@ (8016534 <__ieee754_pow+0x794>)
 801646a:	4413      	add	r3, r2
 801646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016470:	f7e9 ff34 	bl	80002dc <__adddf3>
 8016474:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016478:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801647a:	f7ea f87b 	bl	8000574 <__aeabi_i2d>
 801647e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016480:	4b2d      	ldr	r3, [pc, #180]	@ (8016538 <__ieee754_pow+0x798>)
 8016482:	4413      	add	r3, r2
 8016484:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016488:	4606      	mov	r6, r0
 801648a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801648e:	460f      	mov	r7, r1
 8016490:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016494:	f7e9 ff22 	bl	80002dc <__adddf3>
 8016498:	4642      	mov	r2, r8
 801649a:	464b      	mov	r3, r9
 801649c:	f7e9 ff1e 	bl	80002dc <__adddf3>
 80164a0:	4632      	mov	r2, r6
 80164a2:	463b      	mov	r3, r7
 80164a4:	f7e9 ff1a 	bl	80002dc <__adddf3>
 80164a8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80164ac:	4632      	mov	r2, r6
 80164ae:	463b      	mov	r3, r7
 80164b0:	4658      	mov	r0, fp
 80164b2:	460d      	mov	r5, r1
 80164b4:	f7e9 ff10 	bl	80002d8 <__aeabi_dsub>
 80164b8:	4642      	mov	r2, r8
 80164ba:	464b      	mov	r3, r9
 80164bc:	f7e9 ff0c 	bl	80002d8 <__aeabi_dsub>
 80164c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80164c4:	f7e9 ff08 	bl	80002d8 <__aeabi_dsub>
 80164c8:	465c      	mov	r4, fp
 80164ca:	4602      	mov	r2, r0
 80164cc:	e036      	b.n	801653c <__ieee754_pow+0x79c>
 80164ce:	bf00      	nop
 80164d0:	4a454eef 	.word	0x4a454eef
 80164d4:	3fca7e28 	.word	0x3fca7e28
 80164d8:	93c9db65 	.word	0x93c9db65
 80164dc:	3fcd864a 	.word	0x3fcd864a
 80164e0:	a91d4101 	.word	0xa91d4101
 80164e4:	3fd17460 	.word	0x3fd17460
 80164e8:	518f264d 	.word	0x518f264d
 80164ec:	3fd55555 	.word	0x3fd55555
 80164f0:	db6fabff 	.word	0xdb6fabff
 80164f4:	3fdb6db6 	.word	0x3fdb6db6
 80164f8:	33333303 	.word	0x33333303
 80164fc:	3fe33333 	.word	0x3fe33333
 8016500:	e0000000 	.word	0xe0000000
 8016504:	3feec709 	.word	0x3feec709
 8016508:	dc3a03fd 	.word	0xdc3a03fd
 801650c:	3feec709 	.word	0x3feec709
 8016510:	145b01f5 	.word	0x145b01f5
 8016514:	be3e2fe0 	.word	0xbe3e2fe0
 8016518:	7ff00000 	.word	0x7ff00000
 801651c:	43400000 	.word	0x43400000
 8016520:	0003988e 	.word	0x0003988e
 8016524:	000bb679 	.word	0x000bb679
 8016528:	080171d8 	.word	0x080171d8
 801652c:	3ff00000 	.word	0x3ff00000
 8016530:	40080000 	.word	0x40080000
 8016534:	080171b8 	.word	0x080171b8
 8016538:	080171c8 	.word	0x080171c8
 801653c:	460b      	mov	r3, r1
 801653e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016542:	e5d7      	b.n	80160f4 <__ieee754_pow+0x354>
 8016544:	f04f 0a01 	mov.w	sl, #1
 8016548:	e65e      	b.n	8016208 <__ieee754_pow+0x468>
 801654a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801681c <__ieee754_pow+0xa7c>)
 801654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016550:	4630      	mov	r0, r6
 8016552:	4639      	mov	r1, r7
 8016554:	f7e9 fec2 	bl	80002dc <__adddf3>
 8016558:	4642      	mov	r2, r8
 801655a:	e9cd 0100 	strd	r0, r1, [sp]
 801655e:	464b      	mov	r3, r9
 8016560:	4620      	mov	r0, r4
 8016562:	4629      	mov	r1, r5
 8016564:	f7e9 feb8 	bl	80002d8 <__aeabi_dsub>
 8016568:	4602      	mov	r2, r0
 801656a:	460b      	mov	r3, r1
 801656c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016570:	f7ea fafa 	bl	8000b68 <__aeabi_dcmpgt>
 8016574:	2800      	cmp	r0, #0
 8016576:	f47f ae00 	bne.w	801617a <__ieee754_pow+0x3da>
 801657a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801657e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8016582:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8016586:	fa43 fa0a 	asr.w	sl, r3, sl
 801658a:	44da      	add	sl, fp
 801658c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8016590:	489d      	ldr	r0, [pc, #628]	@ (8016808 <__ieee754_pow+0xa68>)
 8016592:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8016596:	4108      	asrs	r0, r1
 8016598:	ea00 030a 	and.w	r3, r0, sl
 801659c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80165a0:	f1c1 0114 	rsb	r1, r1, #20
 80165a4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80165a8:	fa4a fa01 	asr.w	sl, sl, r1
 80165ac:	f1bb 0f00 	cmp.w	fp, #0
 80165b0:	4640      	mov	r0, r8
 80165b2:	4649      	mov	r1, r9
 80165b4:	f04f 0200 	mov.w	r2, #0
 80165b8:	bfb8      	it	lt
 80165ba:	f1ca 0a00 	rsblt	sl, sl, #0
 80165be:	f7e9 fe8b 	bl	80002d8 <__aeabi_dsub>
 80165c2:	4680      	mov	r8, r0
 80165c4:	4689      	mov	r9, r1
 80165c6:	4632      	mov	r2, r6
 80165c8:	463b      	mov	r3, r7
 80165ca:	4640      	mov	r0, r8
 80165cc:	4649      	mov	r1, r9
 80165ce:	f7e9 fe85 	bl	80002dc <__adddf3>
 80165d2:	2400      	movs	r4, #0
 80165d4:	a37c      	add	r3, pc, #496	@ (adr r3, 80167c8 <__ieee754_pow+0xa28>)
 80165d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165da:	4620      	mov	r0, r4
 80165dc:	460d      	mov	r5, r1
 80165de:	f7ea f833 	bl	8000648 <__aeabi_dmul>
 80165e2:	4642      	mov	r2, r8
 80165e4:	e9cd 0100 	strd	r0, r1, [sp]
 80165e8:	464b      	mov	r3, r9
 80165ea:	4620      	mov	r0, r4
 80165ec:	4629      	mov	r1, r5
 80165ee:	f7e9 fe73 	bl	80002d8 <__aeabi_dsub>
 80165f2:	4602      	mov	r2, r0
 80165f4:	460b      	mov	r3, r1
 80165f6:	4630      	mov	r0, r6
 80165f8:	4639      	mov	r1, r7
 80165fa:	f7e9 fe6d 	bl	80002d8 <__aeabi_dsub>
 80165fe:	a374      	add	r3, pc, #464	@ (adr r3, 80167d0 <__ieee754_pow+0xa30>)
 8016600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016604:	f7ea f820 	bl	8000648 <__aeabi_dmul>
 8016608:	a373      	add	r3, pc, #460	@ (adr r3, 80167d8 <__ieee754_pow+0xa38>)
 801660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801660e:	4680      	mov	r8, r0
 8016610:	4689      	mov	r9, r1
 8016612:	4620      	mov	r0, r4
 8016614:	4629      	mov	r1, r5
 8016616:	f7ea f817 	bl	8000648 <__aeabi_dmul>
 801661a:	4602      	mov	r2, r0
 801661c:	460b      	mov	r3, r1
 801661e:	4640      	mov	r0, r8
 8016620:	4649      	mov	r1, r9
 8016622:	f7e9 fe5b 	bl	80002dc <__adddf3>
 8016626:	4604      	mov	r4, r0
 8016628:	460d      	mov	r5, r1
 801662a:	4602      	mov	r2, r0
 801662c:	460b      	mov	r3, r1
 801662e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016632:	f7e9 fe53 	bl	80002dc <__adddf3>
 8016636:	e9dd 2300 	ldrd	r2, r3, [sp]
 801663a:	4680      	mov	r8, r0
 801663c:	4689      	mov	r9, r1
 801663e:	f7e9 fe4b 	bl	80002d8 <__aeabi_dsub>
 8016642:	4602      	mov	r2, r0
 8016644:	460b      	mov	r3, r1
 8016646:	4620      	mov	r0, r4
 8016648:	4629      	mov	r1, r5
 801664a:	f7e9 fe45 	bl	80002d8 <__aeabi_dsub>
 801664e:	4642      	mov	r2, r8
 8016650:	4606      	mov	r6, r0
 8016652:	460f      	mov	r7, r1
 8016654:	464b      	mov	r3, r9
 8016656:	4640      	mov	r0, r8
 8016658:	4649      	mov	r1, r9
 801665a:	f7e9 fff5 	bl	8000648 <__aeabi_dmul>
 801665e:	a360      	add	r3, pc, #384	@ (adr r3, 80167e0 <__ieee754_pow+0xa40>)
 8016660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016664:	4604      	mov	r4, r0
 8016666:	460d      	mov	r5, r1
 8016668:	f7e9 ffee 	bl	8000648 <__aeabi_dmul>
 801666c:	a35e      	add	r3, pc, #376	@ (adr r3, 80167e8 <__ieee754_pow+0xa48>)
 801666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016672:	f7e9 fe31 	bl	80002d8 <__aeabi_dsub>
 8016676:	4622      	mov	r2, r4
 8016678:	462b      	mov	r3, r5
 801667a:	f7e9 ffe5 	bl	8000648 <__aeabi_dmul>
 801667e:	a35c      	add	r3, pc, #368	@ (adr r3, 80167f0 <__ieee754_pow+0xa50>)
 8016680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016684:	f7e9 fe2a 	bl	80002dc <__adddf3>
 8016688:	4622      	mov	r2, r4
 801668a:	462b      	mov	r3, r5
 801668c:	f7e9 ffdc 	bl	8000648 <__aeabi_dmul>
 8016690:	a359      	add	r3, pc, #356	@ (adr r3, 80167f8 <__ieee754_pow+0xa58>)
 8016692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016696:	f7e9 fe1f 	bl	80002d8 <__aeabi_dsub>
 801669a:	4622      	mov	r2, r4
 801669c:	462b      	mov	r3, r5
 801669e:	f7e9 ffd3 	bl	8000648 <__aeabi_dmul>
 80166a2:	a357      	add	r3, pc, #348	@ (adr r3, 8016800 <__ieee754_pow+0xa60>)
 80166a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166a8:	f7e9 fe18 	bl	80002dc <__adddf3>
 80166ac:	4622      	mov	r2, r4
 80166ae:	462b      	mov	r3, r5
 80166b0:	f7e9 ffca 	bl	8000648 <__aeabi_dmul>
 80166b4:	4602      	mov	r2, r0
 80166b6:	460b      	mov	r3, r1
 80166b8:	4640      	mov	r0, r8
 80166ba:	4649      	mov	r1, r9
 80166bc:	f7e9 fe0c 	bl	80002d8 <__aeabi_dsub>
 80166c0:	4604      	mov	r4, r0
 80166c2:	460d      	mov	r5, r1
 80166c4:	4602      	mov	r2, r0
 80166c6:	460b      	mov	r3, r1
 80166c8:	4640      	mov	r0, r8
 80166ca:	4649      	mov	r1, r9
 80166cc:	f7e9 ffbc 	bl	8000648 <__aeabi_dmul>
 80166d0:	2200      	movs	r2, #0
 80166d2:	e9cd 0100 	strd	r0, r1, [sp]
 80166d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80166da:	4620      	mov	r0, r4
 80166dc:	4629      	mov	r1, r5
 80166de:	f7e9 fdfb 	bl	80002d8 <__aeabi_dsub>
 80166e2:	4602      	mov	r2, r0
 80166e4:	460b      	mov	r3, r1
 80166e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80166ea:	f7ea f8d7 	bl	800089c <__aeabi_ddiv>
 80166ee:	4632      	mov	r2, r6
 80166f0:	4604      	mov	r4, r0
 80166f2:	460d      	mov	r5, r1
 80166f4:	463b      	mov	r3, r7
 80166f6:	4640      	mov	r0, r8
 80166f8:	4649      	mov	r1, r9
 80166fa:	f7e9 ffa5 	bl	8000648 <__aeabi_dmul>
 80166fe:	4632      	mov	r2, r6
 8016700:	463b      	mov	r3, r7
 8016702:	f7e9 fdeb 	bl	80002dc <__adddf3>
 8016706:	4602      	mov	r2, r0
 8016708:	460b      	mov	r3, r1
 801670a:	4620      	mov	r0, r4
 801670c:	4629      	mov	r1, r5
 801670e:	f7e9 fde3 	bl	80002d8 <__aeabi_dsub>
 8016712:	4642      	mov	r2, r8
 8016714:	464b      	mov	r3, r9
 8016716:	f7e9 fddf 	bl	80002d8 <__aeabi_dsub>
 801671a:	460b      	mov	r3, r1
 801671c:	4602      	mov	r2, r0
 801671e:	493b      	ldr	r1, [pc, #236]	@ (801680c <__ieee754_pow+0xa6c>)
 8016720:	2000      	movs	r0, #0
 8016722:	f7e9 fdd9 	bl	80002d8 <__aeabi_dsub>
 8016726:	ec41 0b10 	vmov	d0, r0, r1
 801672a:	ee10 3a90 	vmov	r3, s1
 801672e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016732:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016736:	da30      	bge.n	801679a <__ieee754_pow+0x9fa>
 8016738:	4650      	mov	r0, sl
 801673a:	f000 f875 	bl	8016828 <scalbn>
 801673e:	ec51 0b10 	vmov	r0, r1, d0
 8016742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016746:	f7ff bbd2 	b.w	8015eee <__ieee754_pow+0x14e>
 801674a:	4c31      	ldr	r4, [pc, #196]	@ (8016810 <__ieee754_pow+0xa70>)
 801674c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016750:	42a3      	cmp	r3, r4
 8016752:	d91a      	bls.n	801678a <__ieee754_pow+0x9ea>
 8016754:	4b2f      	ldr	r3, [pc, #188]	@ (8016814 <__ieee754_pow+0xa74>)
 8016756:	440b      	add	r3, r1
 8016758:	4303      	orrs	r3, r0
 801675a:	d009      	beq.n	8016770 <__ieee754_pow+0x9d0>
 801675c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016760:	2200      	movs	r2, #0
 8016762:	2300      	movs	r3, #0
 8016764:	f7ea f9e2 	bl	8000b2c <__aeabi_dcmplt>
 8016768:	3800      	subs	r0, #0
 801676a:	bf18      	it	ne
 801676c:	2001      	movne	r0, #1
 801676e:	e42b      	b.n	8015fc8 <__ieee754_pow+0x228>
 8016770:	4642      	mov	r2, r8
 8016772:	464b      	mov	r3, r9
 8016774:	f7e9 fdb0 	bl	80002d8 <__aeabi_dsub>
 8016778:	4632      	mov	r2, r6
 801677a:	463b      	mov	r3, r7
 801677c:	f7ea f9ea 	bl	8000b54 <__aeabi_dcmpge>
 8016780:	2800      	cmp	r0, #0
 8016782:	d1eb      	bne.n	801675c <__ieee754_pow+0x9bc>
 8016784:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8016824 <__ieee754_pow+0xa84>
 8016788:	e6f7      	b.n	801657a <__ieee754_pow+0x7da>
 801678a:	469a      	mov	sl, r3
 801678c:	4b22      	ldr	r3, [pc, #136]	@ (8016818 <__ieee754_pow+0xa78>)
 801678e:	459a      	cmp	sl, r3
 8016790:	f63f aef3 	bhi.w	801657a <__ieee754_pow+0x7da>
 8016794:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016798:	e715      	b.n	80165c6 <__ieee754_pow+0x826>
 801679a:	ec51 0b10 	vmov	r0, r1, d0
 801679e:	4619      	mov	r1, r3
 80167a0:	e7cf      	b.n	8016742 <__ieee754_pow+0x9a2>
 80167a2:	491a      	ldr	r1, [pc, #104]	@ (801680c <__ieee754_pow+0xa6c>)
 80167a4:	2000      	movs	r0, #0
 80167a6:	f7ff bb18 	b.w	8015dda <__ieee754_pow+0x3a>
 80167aa:	2000      	movs	r0, #0
 80167ac:	2100      	movs	r1, #0
 80167ae:	f7ff bb14 	b.w	8015dda <__ieee754_pow+0x3a>
 80167b2:	4630      	mov	r0, r6
 80167b4:	4639      	mov	r1, r7
 80167b6:	f7ff bb10 	b.w	8015dda <__ieee754_pow+0x3a>
 80167ba:	460c      	mov	r4, r1
 80167bc:	f7ff bb5e 	b.w	8015e7c <__ieee754_pow+0xdc>
 80167c0:	2400      	movs	r4, #0
 80167c2:	f7ff bb49 	b.w	8015e58 <__ieee754_pow+0xb8>
 80167c6:	bf00      	nop
 80167c8:	00000000 	.word	0x00000000
 80167cc:	3fe62e43 	.word	0x3fe62e43
 80167d0:	fefa39ef 	.word	0xfefa39ef
 80167d4:	3fe62e42 	.word	0x3fe62e42
 80167d8:	0ca86c39 	.word	0x0ca86c39
 80167dc:	be205c61 	.word	0xbe205c61
 80167e0:	72bea4d0 	.word	0x72bea4d0
 80167e4:	3e663769 	.word	0x3e663769
 80167e8:	c5d26bf1 	.word	0xc5d26bf1
 80167ec:	3ebbbd41 	.word	0x3ebbbd41
 80167f0:	af25de2c 	.word	0xaf25de2c
 80167f4:	3f11566a 	.word	0x3f11566a
 80167f8:	16bebd93 	.word	0x16bebd93
 80167fc:	3f66c16c 	.word	0x3f66c16c
 8016800:	5555553e 	.word	0x5555553e
 8016804:	3fc55555 	.word	0x3fc55555
 8016808:	fff00000 	.word	0xfff00000
 801680c:	3ff00000 	.word	0x3ff00000
 8016810:	4090cbff 	.word	0x4090cbff
 8016814:	3f6f3400 	.word	0x3f6f3400
 8016818:	3fe00000 	.word	0x3fe00000
 801681c:	652b82fe 	.word	0x652b82fe
 8016820:	3c971547 	.word	0x3c971547
 8016824:	4090cc00 	.word	0x4090cc00

08016828 <scalbn>:
 8016828:	b570      	push	{r4, r5, r6, lr}
 801682a:	ec55 4b10 	vmov	r4, r5, d0
 801682e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8016832:	4606      	mov	r6, r0
 8016834:	462b      	mov	r3, r5
 8016836:	b991      	cbnz	r1, 801685e <scalbn+0x36>
 8016838:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801683c:	4323      	orrs	r3, r4
 801683e:	d03d      	beq.n	80168bc <scalbn+0x94>
 8016840:	4b35      	ldr	r3, [pc, #212]	@ (8016918 <scalbn+0xf0>)
 8016842:	4620      	mov	r0, r4
 8016844:	4629      	mov	r1, r5
 8016846:	2200      	movs	r2, #0
 8016848:	f7e9 fefe 	bl	8000648 <__aeabi_dmul>
 801684c:	4b33      	ldr	r3, [pc, #204]	@ (801691c <scalbn+0xf4>)
 801684e:	429e      	cmp	r6, r3
 8016850:	4604      	mov	r4, r0
 8016852:	460d      	mov	r5, r1
 8016854:	da0f      	bge.n	8016876 <scalbn+0x4e>
 8016856:	a328      	add	r3, pc, #160	@ (adr r3, 80168f8 <scalbn+0xd0>)
 8016858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801685c:	e01e      	b.n	801689c <scalbn+0x74>
 801685e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8016862:	4291      	cmp	r1, r2
 8016864:	d10b      	bne.n	801687e <scalbn+0x56>
 8016866:	4622      	mov	r2, r4
 8016868:	4620      	mov	r0, r4
 801686a:	4629      	mov	r1, r5
 801686c:	f7e9 fd36 	bl	80002dc <__adddf3>
 8016870:	4604      	mov	r4, r0
 8016872:	460d      	mov	r5, r1
 8016874:	e022      	b.n	80168bc <scalbn+0x94>
 8016876:	460b      	mov	r3, r1
 8016878:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801687c:	3936      	subs	r1, #54	@ 0x36
 801687e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016882:	4296      	cmp	r6, r2
 8016884:	dd0d      	ble.n	80168a2 <scalbn+0x7a>
 8016886:	2d00      	cmp	r5, #0
 8016888:	a11d      	add	r1, pc, #116	@ (adr r1, 8016900 <scalbn+0xd8>)
 801688a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801688e:	da02      	bge.n	8016896 <scalbn+0x6e>
 8016890:	a11d      	add	r1, pc, #116	@ (adr r1, 8016908 <scalbn+0xe0>)
 8016892:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016896:	a31a      	add	r3, pc, #104	@ (adr r3, 8016900 <scalbn+0xd8>)
 8016898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801689c:	f7e9 fed4 	bl	8000648 <__aeabi_dmul>
 80168a0:	e7e6      	b.n	8016870 <scalbn+0x48>
 80168a2:	1872      	adds	r2, r6, r1
 80168a4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80168a8:	428a      	cmp	r2, r1
 80168aa:	dcec      	bgt.n	8016886 <scalbn+0x5e>
 80168ac:	2a00      	cmp	r2, #0
 80168ae:	dd08      	ble.n	80168c2 <scalbn+0x9a>
 80168b0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80168b4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80168b8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80168bc:	ec45 4b10 	vmov	d0, r4, r5
 80168c0:	bd70      	pop	{r4, r5, r6, pc}
 80168c2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80168c6:	da08      	bge.n	80168da <scalbn+0xb2>
 80168c8:	2d00      	cmp	r5, #0
 80168ca:	a10b      	add	r1, pc, #44	@ (adr r1, 80168f8 <scalbn+0xd0>)
 80168cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168d0:	dac1      	bge.n	8016856 <scalbn+0x2e>
 80168d2:	a10f      	add	r1, pc, #60	@ (adr r1, 8016910 <scalbn+0xe8>)
 80168d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168d8:	e7bd      	b.n	8016856 <scalbn+0x2e>
 80168da:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80168de:	3236      	adds	r2, #54	@ 0x36
 80168e0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80168e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80168e8:	4620      	mov	r0, r4
 80168ea:	4b0d      	ldr	r3, [pc, #52]	@ (8016920 <scalbn+0xf8>)
 80168ec:	4629      	mov	r1, r5
 80168ee:	2200      	movs	r2, #0
 80168f0:	e7d4      	b.n	801689c <scalbn+0x74>
 80168f2:	bf00      	nop
 80168f4:	f3af 8000 	nop.w
 80168f8:	c2f8f359 	.word	0xc2f8f359
 80168fc:	01a56e1f 	.word	0x01a56e1f
 8016900:	8800759c 	.word	0x8800759c
 8016904:	7e37e43c 	.word	0x7e37e43c
 8016908:	8800759c 	.word	0x8800759c
 801690c:	fe37e43c 	.word	0xfe37e43c
 8016910:	c2f8f359 	.word	0xc2f8f359
 8016914:	81a56e1f 	.word	0x81a56e1f
 8016918:	43500000 	.word	0x43500000
 801691c:	ffff3cb0 	.word	0xffff3cb0
 8016920:	3c900000 	.word	0x3c900000

08016924 <with_errno>:
 8016924:	b510      	push	{r4, lr}
 8016926:	ed2d 8b02 	vpush	{d8}
 801692a:	eeb0 8a40 	vmov.f32	s16, s0
 801692e:	eef0 8a60 	vmov.f32	s17, s1
 8016932:	4604      	mov	r4, r0
 8016934:	f7fa fea4 	bl	8011680 <__errno>
 8016938:	eeb0 0a48 	vmov.f32	s0, s16
 801693c:	eef0 0a68 	vmov.f32	s1, s17
 8016940:	ecbd 8b02 	vpop	{d8}
 8016944:	6004      	str	r4, [r0, #0]
 8016946:	bd10      	pop	{r4, pc}

08016948 <xflow>:
 8016948:	4603      	mov	r3, r0
 801694a:	b507      	push	{r0, r1, r2, lr}
 801694c:	ec51 0b10 	vmov	r0, r1, d0
 8016950:	b183      	cbz	r3, 8016974 <xflow+0x2c>
 8016952:	4602      	mov	r2, r0
 8016954:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016958:	e9cd 2300 	strd	r2, r3, [sp]
 801695c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016960:	f7e9 fe72 	bl	8000648 <__aeabi_dmul>
 8016964:	ec41 0b10 	vmov	d0, r0, r1
 8016968:	2022      	movs	r0, #34	@ 0x22
 801696a:	b003      	add	sp, #12
 801696c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016970:	f7ff bfd8 	b.w	8016924 <with_errno>
 8016974:	4602      	mov	r2, r0
 8016976:	460b      	mov	r3, r1
 8016978:	e7ee      	b.n	8016958 <xflow+0x10>
 801697a:	0000      	movs	r0, r0
 801697c:	0000      	movs	r0, r0
	...

08016980 <__math_uflow>:
 8016980:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016988 <__math_uflow+0x8>
 8016984:	f7ff bfe0 	b.w	8016948 <xflow>
 8016988:	00000000 	.word	0x00000000
 801698c:	10000000 	.word	0x10000000

08016990 <__math_oflow>:
 8016990:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016998 <__math_oflow+0x8>
 8016994:	f7ff bfd8 	b.w	8016948 <xflow>
 8016998:	00000000 	.word	0x00000000
 801699c:	70000000 	.word	0x70000000

080169a0 <_init>:
 80169a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169a2:	bf00      	nop
 80169a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169a6:	bc08      	pop	{r3}
 80169a8:	469e      	mov	lr, r3
 80169aa:	4770      	bx	lr

080169ac <_fini>:
 80169ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169ae:	bf00      	nop
 80169b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169b2:	bc08      	pop	{r3}
 80169b4:	469e      	mov	lr, r3
 80169b6:	4770      	bx	lr
