
Magisterka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016968  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08016b48  08016b48  00017b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017378  08017378  00019398  2**0
                  CONTENTS
  4 .ARM          00000008  08017378  08017378  00018378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017380  08017380  00019398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017380  08017380  00018380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017384  08017384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000398  20000000  08017388  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002310  20000398  08017720  00019398  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026a8  08017720  000196a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019398  2**0
                  CONTENTS, READONLY
 12 .debug_info   000255a0  00000000  00000000  000193c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ea3  00000000  00000000  0003e968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f18  00000000  00000000  00043810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017f4  00000000  00000000  00045728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d55b  00000000  00000000  00046f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026664  00000000  00000000  00074477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f0a5  00000000  00000000  0009aadb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b9b80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f90  00000000  00000000  001b9bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001c3b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000398 	.word	0x20000398
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016b30 	.word	0x08016b30

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000039c 	.word	0x2000039c
 800021c:	08016b30 	.word	0x08016b30

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	0000      	movs	r0, r0
	...

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f003 f92a 	bl	8004296 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 fc15 	bl	8001870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f001 fa37 	bl	80024b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800104a:	f001 f9eb 	bl	8002424 <MX_DMA_Init>
  MX_ADC3_Init();
 800104e:	f000 fcd5 	bl	80019fc <MX_ADC3_Init>
  MX_ADC4_Init();
 8001052:	f000 fd9f 	bl	8001b94 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001056:	f000 fe03 	bl	8001c60 <MX_ADC5_Init>
  MX_DAC1_Init();
 800105a:	f000 fe87 	bl	8001d6c <MX_DAC1_Init>
  MX_DAC2_Init();
 800105e:	f000 fed1 	bl	8001e04 <MX_DAC2_Init>
  MX_TIM1_Init();
 8001062:	f000 ff09 	bl	8001e78 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001066:	f001 f887 	bl	8002178 <MX_TIM8_Init>
  MX_UART4_Init();
 800106a:	f001 f98f 	bl	800238c <MX_UART4_Init>
  MX_ADC1_Init();
 800106e:	f000 fc4d 	bl	800190c <MX_ADC1_Init>
  MX_TIM4_Init();
 8001072:	f000 ff93 	bl	8001f9c <MX_TIM4_Init>
  MX_USB_Device_Init();
 8001076:	f00e fe89 	bl	800fd8c <MX_USB_Device_Init>
  MX_TIM15_Init();
 800107a:	f001 f90f 	bl	800229c <MX_TIM15_Init>
  MX_TIM16_Init();
 800107e:	f001 f95f 	bl	8002340 <MX_TIM16_Init>
  MX_TIM7_Init();
 8001082:	f001 f843 	bl	800210c <MX_TIM7_Init>
  MX_TIM6_Init();
 8001086:	f001 f801 	bl	800208c <MX_TIM6_Init>
  MX_CORDIC_Init();
 800108a:	f000 fe5b 	bl	8001d44 <MX_CORDIC_Init>


  while (1)
  {

	  	  	  	  checkfaults = Check_Faults();
 800108e:	f001 fca1 	bl	80029d4 <Check_Faults>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	4b7c      	ldr	r3, [pc, #496]	@ (8001288 <main+0x250>)
 8001098:	701a      	strb	r2, [r3, #0]

	  	  	  	  if (dataReceivedFlag) {
 800109a:	4b7c      	ldr	r3, [pc, #496]	@ (800128c <main+0x254>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <main+0x76>
	  	  	  	      // Process the data
	  	  	  	      ParseUSBCommand();  // Function to handle the received command
 80010a4:	f002 f83e 	bl	8003124 <ParseUSBCommand>

	  	  	  	      // Clear the flag after processing
	  	  	  	      dataReceivedFlag = 0;
 80010a8:	4b78      	ldr	r3, [pc, #480]	@ (800128c <main+0x254>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
	  	  	  	  }

	  	  	  	  interlock = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 80010ae:	2104      	movs	r1, #4
 80010b0:	4877      	ldr	r0, [pc, #476]	@ (8001290 <main+0x258>)
 80010b2:	f005 fe05 	bl	8006cc0 <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b76      	ldr	r3, [pc, #472]	@ (8001294 <main+0x25c>)
 80010bc:	701a      	strb	r2, [r3, #0]

	  	          if (interlock &&  start_program && !(checkfaults)) {
 80010be:	4b75      	ldr	r3, [pc, #468]	@ (8001294 <main+0x25c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00e      	beq.n	80010e4 <main+0xac>
 80010c6:	4b74      	ldr	r3, [pc, #464]	@ (8001298 <main+0x260>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00a      	beq.n	80010e4 <main+0xac>
 80010ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001288 <main+0x250>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d106      	bne.n	80010e4 <main+0xac>
	  	        	//USB_SendString("State: EVENT start_program \r\n");
	  	              event = EVENT_START;
 80010d6:	4b71      	ldr	r3, [pc, #452]	@ (800129c <main+0x264>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
	  	              start_program = 0;
 80010dc:	4b6e      	ldr	r3, [pc, #440]	@ (8001298 <main+0x260>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	e019      	b.n	8001118 <main+0xe0>
	  	          }else if (interlock &&  stop_program && !(checkfaults)) {
 80010e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001294 <main+0x25c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00e      	beq.n	800110a <main+0xd2>
 80010ec:	4b6c      	ldr	r3, [pc, #432]	@ (80012a0 <main+0x268>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00a      	beq.n	800110a <main+0xd2>
 80010f4:	4b64      	ldr	r3, [pc, #400]	@ (8001288 <main+0x250>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d106      	bne.n	800110a <main+0xd2>
		  	        	//USB_SendString("State: EVENT start_program \r\n");
		  	              event = EVENT_SHUTDOWN;
 80010fc:	4b67      	ldr	r3, [pc, #412]	@ (800129c <main+0x264>)
 80010fe:	2203      	movs	r2, #3
 8001100:	701a      	strb	r2, [r3, #0]
		  	              stop_program = 0;
 8001102:	4b67      	ldr	r3, [pc, #412]	@ (80012a0 <main+0x268>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	e006      	b.n	8001118 <main+0xe0>
		  	          }
	  	          else if (clear_fault) {
 800110a:	4b66      	ldr	r3, [pc, #408]	@ (80012a4 <main+0x26c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <main+0xe0>
	  	        	  /* clear fault condition */
	  	              event = EVENT_CLEAR_FAULT;
 8001112:	4b62      	ldr	r3, [pc, #392]	@ (800129c <main+0x264>)
 8001114:	2202      	movs	r2, #2
 8001116:	701a      	strb	r2, [r3, #0]
	  	          }

	  	         if (!interlock || checkfaults /* fault condition */)
 8001118:	4b5e      	ldr	r3, [pc, #376]	@ (8001294 <main+0x25c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <main+0xf0>
 8001120:	4b59      	ldr	r3, [pc, #356]	@ (8001288 <main+0x250>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <main+0xf6>
	  	       	 {
	  	       	  	event = EVENT_FAULT;
 8001128:	4b5c      	ldr	r3, [pc, #368]	@ (800129c <main+0x264>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
	  	       	 }

	  	          // Handle the event and update the state
	  	          currentState = handle_event(currentState, event);
 800112e:	4b5e      	ldr	r3, [pc, #376]	@ (80012a8 <main+0x270>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	4a5a      	ldr	r2, [pc, #360]	@ (800129c <main+0x264>)
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fb09 	bl	8002750 <handle_event>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4b59      	ldr	r3, [pc, #356]	@ (80012a8 <main+0x270>)
 8001144:	701a      	strb	r2, [r3, #0]

	  	          // Perform actions based on the current state
	  	          switch (currentState) {
 8001146:	4b58      	ldr	r3, [pc, #352]	@ (80012a8 <main+0x270>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b04      	cmp	r3, #4
 800114c:	f200 8336 	bhi.w	80017bc <main+0x784>
 8001150:	a201      	add	r2, pc, #4	@ (adr r2, 8001158 <main+0x120>)
 8001152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001156:	bf00      	nop
 8001158:	0800116d 	.word	0x0800116d
 800115c:	0800122b 	.word	0x0800122b
 8001160:	080012fd 	.word	0x080012fd
 8001164:	08001711 	.word	0x08001711
 8001168:	08001785 	.word	0x08001785
	  	              {
	  	            	//GPIOs
	  	            	//CUrrent Sensors OCD pin needed to go low in reset condition after fault event
	  	            	//HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_SET);
	  	            	//HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 800116c:	2201      	movs	r2, #1
 800116e:	2104      	movs	r1, #4
 8001170:	484e      	ldr	r0, [pc, #312]	@ (80012ac <main+0x274>)
 8001172:	f005 fdbd 	bl	8006cf0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP
 8001176:	2200      	movs	r2, #0
 8001178:	2120      	movs	r1, #32
 800117a:	4845      	ldr	r0, [pc, #276]	@ (8001290 <main+0x258>)
 800117c:	f005 fdb8 	bl	8006cf0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	2120      	movs	r1, #32
 8001184:	484a      	ldr	r0, [pc, #296]	@ (80012b0 <main+0x278>)
 8001186:	f005 fdb3 	bl	8006cf0 <HAL_GPIO_WritePin>
	  	            	HAL_Delay(1000);
 800118a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800118e:	f003 f8f3 	bl	8004378 <HAL_Delay>
	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2120      	movs	r1, #32
 8001196:	4846      	ldr	r0, [pc, #280]	@ (80012b0 <main+0x278>)
 8001198:	f005 fdaa 	bl	8006cf0 <HAL_GPIO_WritePin>
	  	            	  // Start PWM for delay time transfer to FPGA
	  	            	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800119c:	2100      	movs	r1, #0
 800119e:	4845      	ldr	r0, [pc, #276]	@ (80012b4 <main+0x27c>)
 80011a0:	f008 fd04 	bl	8009bac <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80011a4:	2104      	movs	r1, #4
 80011a6:	4844      	ldr	r0, [pc, #272]	@ (80012b8 <main+0x280>)
 80011a8:	f008 fd00 	bl	8009bac <HAL_TIM_PWM_Start>

	  	            	  //DAC for  current reference
	  	            	  ///DAC1_OUT1 	- MAX1
	  	            	  //DAC1_OUT2 	- MAX2
	  	            	  //DAC2_OUT1	- MIN
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_1);
 80011ac:	2100      	movs	r1, #0
 80011ae:	4843      	ldr	r0, [pc, #268]	@ (80012bc <main+0x284>)
 80011b0:	f004 fed6 	bl	8005f60 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_2);
 80011b4:	2110      	movs	r1, #16
 80011b6:	4841      	ldr	r0, [pc, #260]	@ (80012bc <main+0x284>)
 80011b8:	f004 fed2 	bl	8005f60 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac2,DAC2_CHANNEL_1);
 80011bc:	2100      	movs	r1, #0
 80011be:	4840      	ldr	r0, [pc, #256]	@ (80012c0 <main+0x288>)
 80011c0:	f004 fece 	bl	8005f60 <HAL_DAC_Start>

	  	            	//if( HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R)!= HAL_OK) printf("error");
	  	            	//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);

	  	            	  // FAN PWM and 5s timer6 for check temperature and change duty cycle
	  	            	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80011c4:	2100      	movs	r1, #0
 80011c6:	483f      	ldr	r0, [pc, #252]	@ (80012c4 <main+0x28c>)
 80011c8:	f008 fcf0 	bl	8009bac <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_Base_Start_IT(&htim6);
 80011cc:	483e      	ldr	r0, [pc, #248]	@ (80012c8 <main+0x290>)
 80011ce:	f008 fbef 	bl	80099b0 <HAL_TIM_Base_Start_IT>

	  	            	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 80011d2:	217f      	movs	r1, #127	@ 0x7f
 80011d4:	483d      	ldr	r0, [pc, #244]	@ (80012cc <main+0x294>)
 80011d6:	f004 fbf5 	bl	80059c4 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 80011da:	217f      	movs	r1, #127	@ 0x7f
 80011dc:	483c      	ldr	r0, [pc, #240]	@ (80012d0 <main+0x298>)
 80011de:	f004 fbf1 	bl	80059c4 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 80011e2:	217f      	movs	r1, #127	@ 0x7f
 80011e4:	483b      	ldr	r0, [pc, #236]	@ (80012d4 <main+0x29c>)
 80011e6:	f004 fbed 	bl	80059c4 <HAL_ADCEx_Calibration_Start>

	  	            	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_dma_buffer, 5);
 80011ea:	2205      	movs	r2, #5
 80011ec:	493a      	ldr	r1, [pc, #232]	@ (80012d8 <main+0x2a0>)
 80011ee:	4837      	ldr	r0, [pc, #220]	@ (80012cc <main+0x294>)
 80011f0:	f003 fce4 	bl	8004bbc <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4_dma_buffer, 2);
 80011f4:	2202      	movs	r2, #2
 80011f6:	4939      	ldr	r1, [pc, #228]	@ (80012dc <main+0x2a4>)
 80011f8:	4835      	ldr	r0, [pc, #212]	@ (80012d0 <main+0x298>)
 80011fa:	f003 fcdf 	bl	8004bbc <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_dma_buffer, 10);
 80011fe:	220a      	movs	r2, #10
 8001200:	4937      	ldr	r1, [pc, #220]	@ (80012e0 <main+0x2a8>)
 8001202:	4834      	ldr	r0, [pc, #208]	@ (80012d4 <main+0x29c>)
 8001204:	f003 fcda 	bl	8004bbc <HAL_ADC_Start_DMA>

	  	            	Set_PWM_DutyCycle(20);
 8001208:	2014      	movs	r0, #20
 800120a:	f001 fafb 	bl	8002804 <Set_PWM_DutyCycle>

	  	            	current_sensor1_vref = adc3_dma_buffer[0];// reference for imax imin
 800120e:	4b32      	ldr	r3, [pc, #200]	@ (80012d8 <main+0x2a0>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b33      	ldr	r3, [pc, #204]	@ (80012e4 <main+0x2ac>)
 8001216:	801a      	strh	r2, [r3, #0]
	  	            	current_sensor2_vref = adc3_dma_buffer[1];// reference for imax imin
 8001218:	4b2f      	ldr	r3, [pc, #188]	@ (80012d8 <main+0x2a0>)
 800121a:	885b      	ldrh	r3, [r3, #2]
 800121c:	b29a      	uxth	r2, r3
 800121e:	4b32      	ldr	r3, [pc, #200]	@ (80012e8 <main+0x2b0>)
 8001220:	801a      	strh	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 8001222:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <main+0x270>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 8001228:	e2cd      	b.n	80017c6 <main+0x78e>
	  	              case STATE_STANDBY:
	  	                  // Wait for start_program signal
	  	              {
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
	  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	            	checkreads = Check_Ready();
 800122a:	f001 fc0d 	bl	8002a48 <Check_Ready>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <main+0x2b4>)
 8001234:	701a      	strb	r2, [r3, #0]
	  	            	  if(start_program && interlock &&  !(checkfaults)   && checkreads){
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <main+0x260>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 82c0 	beq.w	80017c0 <main+0x788>
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <main+0x25c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 82bb 	beq.w	80017c0 <main+0x788>
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <main+0x250>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f040 82b6 	bne.w	80017c0 <main+0x788>
 8001254:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <main+0x2b4>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 82b1 	beq.w	80017c0 <main+0x788>
	  	            		  currentState = STATE_REGULATION;//STATE_SOFT_START;
 800125e:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <main+0x270>)
 8001260:	2202      	movs	r2, #2
 8001262:	701a      	strb	r2, [r3, #0]

		  	            	  if(once == 0){
 8001264:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <main+0x2b8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	f040 82a9 	bne.w	80017c0 <main+0x788>
		  	            	  //Start timer that start_program ramp and pi regulation
		  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
 800126e:	2200      	movs	r2, #0
 8001270:	2104      	movs	r1, #4
 8001272:	480e      	ldr	r0, [pc, #56]	@ (80012ac <main+0x274>)
 8001274:	f005 fd3c 	bl	8006cf0 <HAL_GPIO_WritePin>
		  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
		  	            	HAL_TIM_Base_Start_IT(&htim15); // START TIM15 THATS IS MAIN CONTROL LOOP
 8001278:	481e      	ldr	r0, [pc, #120]	@ (80012f4 <main+0x2bc>)
 800127a:	f008 fb99 	bl	80099b0 <HAL_TIM_Base_Start_IT>
		  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
		  	            	RAMP_FINISHED = 0;
 800127e:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <main+0x2c0>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
		  	            	//once = 1;
		  	            	  }
	  	            	  }

	  	              }
	  	                  break;
 8001284:	e29c      	b.n	80017c0 <main+0x788>
 8001286:	bf00      	nop
 8001288:	20000b68 	.word	0x20000b68
 800128c:	20000b58 	.word	0x20000b58
 8001290:	48000800 	.word	0x48000800
 8001294:	20000b70 	.word	0x20000b70
 8001298:	20000b64 	.word	0x20000b64
 800129c:	20000018 	.word	0x20000018
 80012a0:	20000b65 	.word	0x20000b65
 80012a4:	20000b66 	.word	0x20000b66
 80012a8:	20000b67 	.word	0x20000b67
 80012ac:	48001400 	.word	0x48001400
 80012b0:	48001000 	.word	0x48001000
 80012b4:	20000794 	.word	0x20000794
 80012b8:	200008c4 	.word	0x200008c4
 80012bc:	200006ac 	.word	0x200006ac
 80012c0:	200006c0 	.word	0x200006c0
 80012c4:	200007e0 	.word	0x200007e0
 80012c8:	2000082c 	.word	0x2000082c
 80012cc:	20000420 	.word	0x20000420
 80012d0:	2000048c 	.word	0x2000048c
 80012d4:	200004f8 	.word	0x200004f8
 80012d8:	20000a58 	.word	0x20000a58
 80012dc:	20000a6c 	.word	0x20000a6c
 80012e0:	20000a80 	.word	0x20000a80
 80012e4:	20000a3c 	.word	0x20000a3c
 80012e8:	20000a3e 	.word	0x20000a3e
 80012ec:	20000b69 	.word	0x20000b69
 80012f0:	20000b6c 	.word	0x20000b6c
 80012f4:	20000910 	.word	0x20000910
 80012f8:	20000a70 	.word	0x20000a70

	  	              case STATE_REGULATION:
	  	                  // Maintain output voltage/current
	  	            	  // 20khz sample time of regulators Timer 15
	  	                  {
	  	                	  if(flag_control)
 80012fc:	4b7c      	ldr	r3, [pc, #496]	@ (80014f0 <main+0x4b8>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 825f 	beq.w	80017c4 <main+0x78c>
	  	                	  {

	  	                		  	  	input_vol = Low_pass_filter(input_voltage, input_vol, input_vol_x_n1, input_vol_y_n1);
 8001306:	4b7b      	ldr	r3, [pc, #492]	@ (80014f4 <main+0x4bc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001312:	4b79      	ldr	r3, [pc, #484]	@ (80014f8 <main+0x4c0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	ee07 3a10 	vmov	s14, r3
 800131a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800131e:	4b77      	ldr	r3, [pc, #476]	@ (80014fc <main+0x4c4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	ee06 3a90 	vmov	s13, r3
 8001326:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800132a:	4b75      	ldr	r3, [pc, #468]	@ (8001500 <main+0x4c8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	ee06 3a10 	vmov	s12, r3
 8001332:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8001336:	eef0 1a46 	vmov.f32	s3, s12
 800133a:	eeb0 1a66 	vmov.f32	s2, s13
 800133e:	eef0 0a47 	vmov.f32	s1, s14
 8001342:	eeb0 0a67 	vmov.f32	s0, s15
 8001346:	f001 fddf 	bl	8002f08 <Low_pass_filter>
 800134a:	eef0 7a40 	vmov.f32	s15, s0
 800134e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001352:	ee17 2a90 	vmov	r2, s15
 8001356:	4b68      	ldr	r3, [pc, #416]	@ (80014f8 <main+0x4c0>)
 8001358:	601a      	str	r2, [r3, #0]
	  	                		  	  	output_vol = Low_pass_filter(output_voltage, output_vol, output_vol_x_n1, output_vol_y_n1);
 800135a:	4b6a      	ldr	r3, [pc, #424]	@ (8001504 <main+0x4cc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001366:	4b68      	ldr	r3, [pc, #416]	@ (8001508 <main+0x4d0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	ee07 3a10 	vmov	s14, r3
 800136e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001372:	4b66      	ldr	r3, [pc, #408]	@ (800150c <main+0x4d4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	ee06 3a90 	vmov	s13, r3
 800137a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800137e:	4b64      	ldr	r3, [pc, #400]	@ (8001510 <main+0x4d8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	ee06 3a10 	vmov	s12, r3
 8001386:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800138a:	eef0 1a46 	vmov.f32	s3, s12
 800138e:	eeb0 1a66 	vmov.f32	s2, s13
 8001392:	eef0 0a47 	vmov.f32	s1, s14
 8001396:	eeb0 0a67 	vmov.f32	s0, s15
 800139a:	f001 fdb5 	bl	8002f08 <Low_pass_filter>
 800139e:	eef0 7a40 	vmov.f32	s15, s0
 80013a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a6:	ee17 2a90 	vmov	r2, s15
 80013aa:	4b57      	ldr	r3, [pc, #348]	@ (8001508 <main+0x4d0>)
 80013ac:	601a      	str	r2, [r3, #0]
	  	                		  	  	input_vol_x_n1 = input_voltage;
 80013ae:	4b51      	ldr	r3, [pc, #324]	@ (80014f4 <main+0x4bc>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a52      	ldr	r2, [pc, #328]	@ (80014fc <main+0x4c4>)
 80013b4:	6013      	str	r3, [r2, #0]
	  	                		  	  	input_vol_y_n1 = input_vol;
 80013b6:	4b50      	ldr	r3, [pc, #320]	@ (80014f8 <main+0x4c0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a51      	ldr	r2, [pc, #324]	@ (8001500 <main+0x4c8>)
 80013bc:	6013      	str	r3, [r2, #0]
	  	                		  	  	output_vol_x_n1 = output_voltage;
 80013be:	4b51      	ldr	r3, [pc, #324]	@ (8001504 <main+0x4cc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a52      	ldr	r2, [pc, #328]	@ (800150c <main+0x4d4>)
 80013c4:	6013      	str	r3, [r2, #0]
	  	                		  	  	output_vol_y_n1 = output_vol;
 80013c6:	4b50      	ldr	r3, [pc, #320]	@ (8001508 <main+0x4d0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a51      	ldr	r2, [pc, #324]	@ (8001510 <main+0x4d8>)
 80013cc:	6013      	str	r3, [r2, #0]

	  	                		  	  	Gv = (float)output_vol/(float)input_vol;//output_voltage/input_voltage;
 80013ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001508 <main+0x4d0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013da:	4b47      	ldr	r3, [pc, #284]	@ (80014f8 <main+0x4c0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001514 <main+0x4dc>)
 80013ec:	edc3 7a00 	vstr	s15, [r3]

	  	                				if(Gv<2) //CZARY
 80013f0:	4b48      	ldr	r3, [pc, #288]	@ (8001514 <main+0x4dc>)
 80013f2:	edd3 7a00 	vldr	s15, [r3]
 80013f6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80013fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	f140 808f 	bpl.w	8001524 <main+0x4ec>
	  	                				{
	  	                					delay_tr = acos(1-Gv)/wr;
 8001406:	4b43      	ldr	r3, [pc, #268]	@ (8001514 <main+0x4dc>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001414:	ee17 0a90 	vmov	r0, s15
 8001418:	f7ff f8be 	bl	8000598 <__aeabi_f2d>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	ec43 2b10 	vmov	d0, r2, r3
 8001424:	f014 f968 	bl	80156f8 <acos>
 8001428:	ec51 0b10 	vmov	r0, r1, d0
 800142c:	a32c      	add	r3, pc, #176	@ (adr r3, 80014e0 <main+0x4a8>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff fa33 	bl	800089c <__aeabi_ddiv>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff fbfb 	bl	8000c38 <__aeabi_d2f>
 8001442:	4603      	mov	r3, r0
 8001444:	4a34      	ldr	r2, [pc, #208]	@ (8001518 <main+0x4e0>)
 8001446:	6013      	str	r3, [r2, #0]
	  	                					imin = (int)(Imin_Factor*output_voltage*sqrt((2-Gv)/Gv)/Z); //[mA] Negative current needed to Zero voltage switching in resonance
 8001448:	4b2e      	ldr	r3, [pc, #184]	@ (8001504 <main+0x4cc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001454:	4b31      	ldr	r3, [pc, #196]	@ (800151c <main+0x4e4>)
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145e:	ee17 0a90 	vmov	r0, s15
 8001462:	f7ff f899 	bl	8000598 <__aeabi_f2d>
 8001466:	4604      	mov	r4, r0
 8001468:	460d      	mov	r5, r1
 800146a:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <main+0x4dc>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001478:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <main+0x4dc>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001482:	ee16 0a90 	vmov	r0, s13
 8001486:	f7ff f887 	bl	8000598 <__aeabi_f2d>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	ec43 2b10 	vmov	d0, r2, r3
 8001492:	f014 f9d5 	bl	8015840 <sqrt>
 8001496:	ec53 2b10 	vmov	r2, r3, d0
 800149a:	4620      	mov	r0, r4
 800149c:	4629      	mov	r1, r5
 800149e:	f7ff f8d3 	bl	8000648 <__aeabi_dmul>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	a30f      	add	r3, pc, #60	@ (adr r3, 80014e8 <main+0x4b0>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f9f4 	bl	800089c <__aeabi_ddiv>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff fb74 	bl	8000ba8 <__aeabi_d2iz>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <main+0x4e8>)
 80014c6:	601a      	str	r2, [r3, #0]
	  	                					if(imin>500) imin = 500;
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <main+0x4e8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014d0:	d963      	bls.n	800159a <main+0x562>
 80014d2:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <main+0x4e8>)
 80014d4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e05e      	b.n	800159a <main+0x562>
 80014dc:	f3af 8000 	nop.w
 80014e0:	78000000 	.word	0x78000000
 80014e4:	4190942a 	.word	0x4190942a
 80014e8:	9374bc6a 	.word	0x9374bc6a
 80014ec:	40624418 	.word	0x40624418
 80014f0:	20000b7c 	.word	0x20000b7c
 80014f4:	20000a4c 	.word	0x20000a4c
 80014f8:	20000024 	.word	0x20000024
 80014fc:	2000002c 	.word	0x2000002c
 8001500:	20000030 	.word	0x20000030
 8001504:	20000a64 	.word	0x20000a64
 8001508:	20000028 	.word	0x20000028
 800150c:	20000034 	.word	0x20000034
 8001510:	20000038 	.word	0x20000038
 8001514:	20000004 	.word	0x20000004
 8001518:	20000a74 	.word	0x20000a74
 800151c:	20000020 	.word	0x20000020
 8001520:	20000a48 	.word	0x20000a48
	  	                				} else if(Gv>=2)
 8001524:	4bb0      	ldr	r3, [pc, #704]	@ (80017e8 <main+0x7b0>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800152e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001536:	db30      	blt.n	800159a <main+0x562>
	  	                				{
	  	                					delay_tr = (M_PI-acos(1/(Gv-1)))/wr;
 8001538:	4bab      	ldr	r3, [pc, #684]	@ (80017e8 <main+0x7b0>)
 800153a:	edd3 7a00 	vldr	s15, [r3]
 800153e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001542:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001546:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800154a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800154e:	ee16 0a90 	vmov	r0, s13
 8001552:	f7ff f821 	bl	8000598 <__aeabi_f2d>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	ec43 2b10 	vmov	d0, r2, r3
 800155e:	f014 f8cb 	bl	80156f8 <acos>
 8001562:	ec53 2b10 	vmov	r2, r3, d0
 8001566:	a198      	add	r1, pc, #608	@ (adr r1, 80017c8 <main+0x790>)
 8001568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800156c:	f7fe feb4 	bl	80002d8 <__aeabi_dsub>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	a395      	add	r3, pc, #596	@ (adr r3, 80017d0 <main+0x798>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f98d 	bl	800089c <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff fb55 	bl	8000c38 <__aeabi_d2f>
 800158e:	4603      	mov	r3, r0
 8001590:	4a96      	ldr	r2, [pc, #600]	@ (80017ec <main+0x7b4>)
 8001592:	6013      	str	r3, [r2, #0]
	  	                					imin = 0;
 8001594:	4b96      	ldr	r3, [pc, #600]	@ (80017f0 <main+0x7b8>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
	  	                				}
	  	                				if(delay_tr<0.001){
 800159a:	4b94      	ldr	r3, [pc, #592]	@ (80017ec <main+0x7b4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe fffa 	bl	8000598 <__aeabi_f2d>
 80015a4:	a38c      	add	r3, pc, #560	@ (adr r3, 80017d8 <main+0x7a0>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7ff fabf 	bl	8000b2c <__aeabi_dcmplt>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d01a      	beq.n	80015ea <main+0x5b2>
	  	                				int delay_tr_freq = (int)(1/delay_tr);
 80015b4:	4b8d      	ldr	r3, [pc, #564]	@ (80017ec <main+0x7b4>)
 80015b6:	ed93 7a00 	vldr	s14, [r3]
 80015ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c6:	ee17 3a90 	vmov	r3, s15
 80015ca:	607b      	str	r3, [r7, #4]
	  	                				if(delay_tr_freq>20000000) delay_tr_freq = 15000000;//10Mhz
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a89      	ldr	r2, [pc, #548]	@ (80017f4 <main+0x7bc>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	dd01      	ble.n	80015d8 <main+0x5a0>
 80015d4:	4b88      	ldr	r3, [pc, #544]	@ (80017f8 <main+0x7c0>)
 80015d6:	607b      	str	r3, [r7, #4]
	  	                				if(once == 0) Update_PWM_Frequency(&htim1, TIM_CHANNEL_1, 221454); // Set TIM1 CH1 to freq that is delay tr and send to fpga
 80015d8:	4b88      	ldr	r3, [pc, #544]	@ (80017fc <main+0x7c4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d104      	bne.n	80015ea <main+0x5b2>
 80015e0:	4a87      	ldr	r2, [pc, #540]	@ (8001800 <main+0x7c8>)
 80015e2:	2100      	movs	r1, #0
 80015e4:	4887      	ldr	r0, [pc, #540]	@ (8001804 <main+0x7cc>)
 80015e6:	f001 f985 	bl	80028f4 <Update_PWM_Frequency>
	  	                				}

	  	                				if(RAMP_FINISHED == 0) RAMP(); // Adding to Vramp stepping voltage to create starting ramp
 80015ea:	4b87      	ldr	r3, [pc, #540]	@ (8001808 <main+0x7d0>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <main+0x5be>
 80015f2:	f001 fb75 	bl	8002ce0 <RAMP>

	  	                				regulatorPI(&imax1, &Integral_I, output_voltage, Vramp, LIM_PEAK_POS, LIM_PEAK_NEG, Kp, Ti, Ts);
 80015f6:	4b85      	ldr	r3, [pc, #532]	@ (800180c <main+0x7d4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001602:	4b83      	ldr	r3, [pc, #524]	@ (8001810 <main+0x7d8>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	ee07 3a10 	vmov	s14, r3
 800160a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800160e:	4b81      	ldr	r3, [pc, #516]	@ (8001814 <main+0x7dc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	ee06 3a90 	vmov	s13, r3
 8001616:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800161a:	4b7f      	ldr	r3, [pc, #508]	@ (8001818 <main+0x7e0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	ee06 3a10 	vmov	s12, r3
 8001622:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8001626:	4b7d      	ldr	r3, [pc, #500]	@ (800181c <main+0x7e4>)
 8001628:	edd3 5a00 	vldr	s11, [r3]
 800162c:	4b7c      	ldr	r3, [pc, #496]	@ (8001820 <main+0x7e8>)
 800162e:	ed93 5a00 	vldr	s10, [r3]
 8001632:	ed9f 3a7c 	vldr	s6, [pc, #496]	@ 8001824 <main+0x7ec>
 8001636:	eef0 2a45 	vmov.f32	s5, s10
 800163a:	eeb0 2a65 	vmov.f32	s4, s11
 800163e:	eef0 1a46 	vmov.f32	s3, s12
 8001642:	eeb0 1a66 	vmov.f32	s2, s13
 8001646:	eef0 0a47 	vmov.f32	s1, s14
 800164a:	eeb0 0a67 	vmov.f32	s0, s15
 800164e:	4976      	ldr	r1, [pc, #472]	@ (8001828 <main+0x7f0>)
 8001650:	4876      	ldr	r0, [pc, #472]	@ (800182c <main+0x7f4>)
 8001652:	f001 fb7d 	bl	8002d50 <regulatorPI>

	  	                				if(output_voltage>40000)
 8001656:	4b6d      	ldr	r3, [pc, #436]	@ (800180c <main+0x7d4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800165e:	4293      	cmp	r3, r2
 8001660:	d93c      	bls.n	80016dc <main+0x6a4>
	  	                				{
	  	                				delay_hc = (2*C_CAP*output_voltage)/imax1;
 8001662:	4b6a      	ldr	r3, [pc, #424]	@ (800180c <main+0x7d4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff74 	bl	8000554 <__aeabi_ui2d>
 800166c:	a35c      	add	r3, pc, #368	@ (adr r3, 80017e0 <main+0x7a8>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe ffe9 	bl	8000648 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4614      	mov	r4, r2
 800167c:	461d      	mov	r5, r3
 800167e:	4b6b      	ldr	r3, [pc, #428]	@ (800182c <main+0x7f4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff66 	bl	8000554 <__aeabi_ui2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7ff f904 	bl	800089c <__aeabi_ddiv>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff facc 	bl	8000c38 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a63      	ldr	r2, [pc, #396]	@ (8001830 <main+0x7f8>)
 80016a4:	6013      	str	r3, [r2, #0]
	  	                				int delay_hc_freq = (int)(1/delay_hc);
 80016a6:	4b62      	ldr	r3, [pc, #392]	@ (8001830 <main+0x7f8>)
 80016a8:	ed93 7a00 	vldr	s14, [r3]
 80016ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b8:	ee17 3a90 	vmov	r3, s15
 80016bc:	603b      	str	r3, [r7, #0]
	  	                				if(delay_hc_freq>20000000) delay_hc_freq = 15000000;//10Mhz jakis problem
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	4a4c      	ldr	r2, [pc, #304]	@ (80017f4 <main+0x7bc>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	dd01      	ble.n	80016ca <main+0x692>
 80016c6:	4b4c      	ldr	r3, [pc, #304]	@ (80017f8 <main+0x7c0>)
 80016c8:	603b      	str	r3, [r7, #0]
	  	                				if(once == 0) Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, 7100000); // Set TIM8 CH1 o freq that is delay hc and send to fpga
 80016ca:	4b4c      	ldr	r3, [pc, #304]	@ (80017fc <main+0x7c4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d104      	bne.n	80016dc <main+0x6a4>
 80016d2:	4a58      	ldr	r2, [pc, #352]	@ (8001834 <main+0x7fc>)
 80016d4:	2104      	movs	r1, #4
 80016d6:	4858      	ldr	r0, [pc, #352]	@ (8001838 <main+0x800>)
 80016d8:	f001 f90c 	bl	80028f4 <Update_PWM_Frequency>
	  	                				}

	  	                				imax2 = imax1 + imax2_sum;
 80016dc:	4b53      	ldr	r3, [pc, #332]	@ (800182c <main+0x7f4>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b56      	ldr	r3, [pc, #344]	@ (800183c <main+0x804>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4413      	add	r3, r2
 80016e6:	4a56      	ldr	r2, [pc, #344]	@ (8001840 <main+0x808>)
 80016e8:	6013      	str	r3, [r2, #0]
	  	                				if(once == 0){
 80016ea:	4b44      	ldr	r3, [pc, #272]	@ (80017fc <main+0x7c4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10a      	bne.n	8001708 <main+0x6d0>
	  	                							HAL_Delay(100);
 80016f2:	2064      	movs	r0, #100	@ 0x64
 80016f4:	f002 fe40 	bl	8004378 <HAL_Delay>
	  	                						HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
 80016f8:	2201      	movs	r2, #1
 80016fa:	2120      	movs	r1, #32
 80016fc:	4851      	ldr	r0, [pc, #324]	@ (8001844 <main+0x80c>)
 80016fe:	f005 faf7 	bl	8006cf0 <HAL_GPIO_WritePin>
	  	                						once = 1;
 8001702:	4b3e      	ldr	r3, [pc, #248]	@ (80017fc <main+0x7c4>)
 8001704:	2201      	movs	r2, #1
 8001706:	601a      	str	r2, [r3, #0]
	  	                						}

	  	                				flag_control = 0;
 8001708:	4b4f      	ldr	r3, [pc, #316]	@ (8001848 <main+0x810>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
	  	                	  }

	  	                  }
	  	                  break;
 800170e:	e059      	b.n	80017c4 <main+0x78c>
	  	              case STATE_FAULT:
	  	                  // Handle fault condition
	  	            	  // Turn off all gate drivers and stop FPGA
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP drives mosfet etc
 8001710:	2200      	movs	r2, #0
 8001712:	2120      	movs	r1, #32
 8001714:	484b      	ldr	r0, [pc, #300]	@ (8001844 <main+0x80c>)
 8001716:	f005 faeb 	bl	8006cf0 <HAL_GPIO_WritePin>

	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!


	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 800171a:	484c      	ldr	r0, [pc, #304]	@ (800184c <main+0x814>)
 800171c:	f008 f9c0 	bl	8009aa0 <HAL_TIM_Base_Stop_IT>

	  	            	HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port,NOT_RST_1_Pin, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	2180      	movs	r1, #128	@ 0x80
 8001724:	484a      	ldr	r0, [pc, #296]	@ (8001850 <main+0x818>)
 8001726:	f005 fae3 	bl	8006cf0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_2_GPIO_Port,NOT_RST_2_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001730:	4848      	ldr	r0, [pc, #288]	@ (8001854 <main+0x81c>)
 8001732:	f005 fadd 	bl	8006cf0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port,NOT_RST_3_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2101      	movs	r1, #1
 800173a:	4847      	ldr	r0, [pc, #284]	@ (8001858 <main+0x820>)
 800173c:	f005 fad8 	bl	8006cf0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port,NOT_RST_4_Pin, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	2140      	movs	r1, #64	@ 0x40
 8001744:	483f      	ldr	r0, [pc, #252]	@ (8001844 <main+0x80c>)
 8001746:	f005 fad3 	bl	8006cf0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2102      	movs	r1, #2
 800174e:	4841      	ldr	r0, [pc, #260]	@ (8001854 <main+0x81c>)
 8001750:	f005 face 	bl	8006cf0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800175a:	4840      	ldr	r0, [pc, #256]	@ (800185c <main+0x824>)
 800175c:	f005 fac8 	bl	8006cf0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 8001760:	2201      	movs	r2, #1
 8001762:	2120      	movs	r1, #32
 8001764:	483b      	ldr	r0, [pc, #236]	@ (8001854 <main+0x81c>)
 8001766:	f005 fac3 	bl	8006cf0 <HAL_GPIO_WritePin>

	  	            	HAL_TIM_Base_Start(&htim7); // timer for reset OCD and INTERLOCK reset turn off
 800176a:	483d      	ldr	r0, [pc, #244]	@ (8001860 <main+0x828>)
 800176c:	f008 f8b0 	bl	80098d0 <HAL_TIM_Base_Start>


	  	            	once = 0;
 8001770:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <main+0x7c4>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
	  	            	start_program = 0;
 8001776:	4b3b      	ldr	r3, [pc, #236]	@ (8001864 <main+0x82c>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
	  	            	currentState = STATE_SHUTDOWN;
 800177c:	4b3a      	ldr	r3, [pc, #232]	@ (8001868 <main+0x830>)
 800177e:	2204      	movs	r2, #4
 8001780:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 8001782:	e020      	b.n	80017c6 <main+0x78e>
	  	              case STATE_SHUTDOWN:
	  	                  // Safely shut down the converter
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	2120      	movs	r1, #32
 8001788:	482e      	ldr	r0, [pc, #184]	@ (8001844 <main+0x80c>)
 800178a:	f005 fab1 	bl	8006cf0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 800178e:	2201      	movs	r2, #1
 8001790:	2104      	movs	r1, #4
 8001792:	4832      	ldr	r0, [pc, #200]	@ (800185c <main+0x824>)
 8001794:	f005 faac 	bl	8006cf0 <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 8001798:	482c      	ldr	r0, [pc, #176]	@ (800184c <main+0x814>)
 800179a:	f008 f981 	bl	8009aa0 <HAL_TIM_Base_Stop_IT>
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 800179e:	2200      	movs	r2, #0
 80017a0:	2104      	movs	r1, #4
 80017a2:	482e      	ldr	r0, [pc, #184]	@ (800185c <main+0x824>)
 80017a4:	f005 faa4 	bl	8006cf0 <HAL_GPIO_WritePin>
	  	            	RAMP_FINISHED, once = 0;
 80017a8:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <main+0x7c4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
	  	            	imax1, imax2,vout, Vramp, delay_tr, delay_hc, Gv, Integral_I, prev_delta, input_vol, output_vol = 1;
 80017ae:	4b2f      	ldr	r3, [pc, #188]	@ (800186c <main+0x834>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]


	  	            	currentState = STATE_STANDBY;
 80017b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001868 <main+0x830>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
	  	              }

	  	                  break;
 80017ba:	e004      	b.n	80017c6 <main+0x78e>
	  	              default:
	  	                  break;
 80017bc:	bf00      	nop
 80017be:	e466      	b.n	800108e <main+0x56>
	  	                  break;
 80017c0:	bf00      	nop
 80017c2:	e464      	b.n	800108e <main+0x56>
	  	                  break;
 80017c4:	bf00      	nop
	  	  	  	  checkfaults = Check_Faults();
 80017c6:	e462      	b.n	800108e <main+0x56>
 80017c8:	54442d18 	.word	0x54442d18
 80017cc:	400921fb 	.word	0x400921fb
 80017d0:	78000000 	.word	0x78000000
 80017d4:	4190942a 	.word	0x4190942a
 80017d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017dc:	3f50624d 	.word	0x3f50624d
 80017e0:	e5c45270 	.word	0xe5c45270
 80017e4:	3e32e5d9 	.word	0x3e32e5d9
 80017e8:	20000004 	.word	0x20000004
 80017ec:	20000a74 	.word	0x20000a74
 80017f0:	20000a48 	.word	0x20000a48
 80017f4:	01312d00 	.word	0x01312d00
 80017f8:	00e4e1c0 	.word	0x00e4e1c0
 80017fc:	20000b6c 	.word	0x20000b6c
 8001800:	0003610e 	.word	0x0003610e
 8001804:	20000794 	.word	0x20000794
 8001808:	20000a70 	.word	0x20000a70
 800180c:	20000a64 	.word	0x20000a64
 8001810:	20000a68 	.word	0x20000a68
 8001814:	20000010 	.word	0x20000010
 8001818:	20000014 	.word	0x20000014
 800181c:	20000008 	.word	0x20000008
 8001820:	2000000c 	.word	0x2000000c
 8001824:	3851b717 	.word	0x3851b717
 8001828:	20000b5c 	.word	0x20000b5c
 800182c:	20000a40 	.word	0x20000a40
 8001830:	20000a78 	.word	0x20000a78
 8001834:	006c5660 	.word	0x006c5660
 8001838:	200008c4 	.word	0x200008c4
 800183c:	20000a7c 	.word	0x20000a7c
 8001840:	20000a44 	.word	0x20000a44
 8001844:	48000800 	.word	0x48000800
 8001848:	20000b7c 	.word	0x20000b7c
 800184c:	20000910 	.word	0x20000910
 8001850:	48000400 	.word	0x48000400
 8001854:	48001000 	.word	0x48001000
 8001858:	48000c00 	.word	0x48000c00
 800185c:	48001400 	.word	0x48001400
 8001860:	20000878 	.word	0x20000878
 8001864:	20000b64 	.word	0x20000b64
 8001868:	20000b67 	.word	0x20000b67
 800186c:	20000028 	.word	0x20000028

08001870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b094      	sub	sp, #80	@ 0x50
 8001874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001876:	f107 0318 	add.w	r3, r7, #24
 800187a:	2238      	movs	r2, #56	@ 0x38
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f00f ff61 	bl	8011746 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001892:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001896:	f006 ff93 	bl	80087c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800189a:	2322      	movs	r3, #34	@ 0x22
 800189c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800189e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a4:	2340      	movs	r3, #64	@ 0x40
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80018a8:	2301      	movs	r3, #1
 80018aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ac:	2302      	movs	r3, #2
 80018ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018b0:	2302      	movs	r3, #2
 80018b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80018b4:	2304      	movs	r3, #4
 80018b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80018b8:	234b      	movs	r3, #75	@ 0x4b
 80018ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018bc:	2302      	movs	r3, #2
 80018be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018c0:	2302      	movs	r3, #2
 80018c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c8:	f107 0318 	add.w	r3, r7, #24
 80018cc:	4618      	mov	r0, r3
 80018ce:	f007 f82b 	bl	8008928 <HAL_RCC_OscConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80018d8:	f001 feda 	bl	8003690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018dc:	230f      	movs	r3, #15
 80018de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e0:	2303      	movs	r3, #3
 80018e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2104      	movs	r1, #4
 80018f4:	4618      	mov	r0, r3
 80018f6:	f007 fb29 	bl	8008f4c <HAL_RCC_ClockConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001900:	f001 fec6 	bl	8003690 <Error_Handler>
  }
}
 8001904:	bf00      	nop
 8001906:	3750      	adds	r7, #80	@ 0x50
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08c      	sub	sp, #48	@ 0x30
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2220      	movs	r2, #32
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f00f ff0e 	bl	8011746 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800192a:	4b32      	ldr	r3, [pc, #200]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 800192c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001930:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001932:	4b30      	ldr	r3, [pc, #192]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 8001934:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001938:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800193a:	4b2e      	ldr	r3, [pc, #184]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001940:	4b2c      	ldr	r3, [pc, #176]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001946:	4b2b      	ldr	r3, [pc, #172]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800194c:	4b29      	ldr	r3, [pc, #164]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001952:	4b28      	ldr	r3, [pc, #160]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 8001954:	2204      	movs	r2, #4
 8001956:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001958:	4b26      	ldr	r3, [pc, #152]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 800195a:	2200      	movs	r2, #0
 800195c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800195e:	4b25      	ldr	r3, [pc, #148]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 8001960:	2200      	movs	r2, #0
 8001962:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001964:	4b23      	ldr	r3, [pc, #140]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 8001966:	2201      	movs	r2, #1
 8001968:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800196a:	4b22      	ldr	r3, [pc, #136]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001972:	4b20      	ldr	r3, [pc, #128]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 8001974:	2200      	movs	r2, #0
 8001976:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001978:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 800197a:	2200      	movs	r2, #0
 800197c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800197e:	4b1d      	ldr	r3, [pc, #116]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001986:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 8001988:	2200      	movs	r2, #0
 800198a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800198c:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001994:	4817      	ldr	r0, [pc, #92]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 8001996:	f002 ff55 	bl	8004844 <HAL_ADC_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80019a0:	f001 fe76 	bl	8003690 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ac:	4619      	mov	r1, r3
 80019ae:	4811      	ldr	r0, [pc, #68]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 80019b0:	f004 f86a 	bl	8005a88 <HAL_ADCEx_MultiModeConfigChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80019ba:	f001 fe69 	bl	8003690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <MX_ADC1_Init+0xec>)
 80019c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019c2:	2306      	movs	r3, #6
 80019c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80019c6:	2307      	movs	r3, #7
 80019c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019ca:	237f      	movs	r3, #127	@ 0x7f
 80019cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019ce:	2304      	movs	r3, #4
 80019d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4806      	ldr	r0, [pc, #24]	@ (80019f4 <MX_ADC1_Init+0xe8>)
 80019dc:	f003 f9d6 	bl	8004d8c <HAL_ADC_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80019e6:	f001 fe53 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	3730      	adds	r7, #48	@ 0x30
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200003b4 	.word	0x200003b4
 80019f8:	cb840000 	.word	0xcb840000

080019fc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	@ 0x30
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	2220      	movs	r2, #32
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00f fe96 	bl	8011746 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001a1a:	4b57      	ldr	r3, [pc, #348]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a1c:	4a57      	ldr	r2, [pc, #348]	@ (8001b7c <MX_ADC3_Init+0x180>)
 8001a1e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001a20:	4b55      	ldr	r3, [pc, #340]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a22:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001a26:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001a28:	4b53      	ldr	r3, [pc, #332]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a2e:	4b52      	ldr	r3, [pc, #328]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001a34:	4b50      	ldr	r3, [pc, #320]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a3a:	4b4f      	ldr	r3, [pc, #316]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a40:	4b4d      	ldr	r3, [pc, #308]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a42:	2204      	movs	r2, #4
 8001a44:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001a46:	4b4c      	ldr	r3, [pc, #304]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001a4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 5;
 8001a52:	4b49      	ldr	r3, [pc, #292]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a54:	2205      	movs	r2, #5
 8001a56:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001a58:	4b47      	ldr	r3, [pc, #284]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a60:	4b45      	ldr	r3, [pc, #276]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a66:	4b44      	ldr	r3, [pc, #272]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001a6c:	4b42      	ldr	r3, [pc, #264]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001a74:	4b40      	ldr	r3, [pc, #256]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a76:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001a7c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001a84:	483c      	ldr	r0, [pc, #240]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001a86:	f002 fedd 	bl	8004844 <HAL_ADC_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8001a90:	f001 fdfe 	bl	8003690 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4836      	ldr	r0, [pc, #216]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001aa0:	f003 fff2 	bl	8005a88 <HAL_ADCEx_MultiModeConfigChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001aaa:	f001 fdf1 	bl	8003690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001aae:	4b34      	ldr	r3, [pc, #208]	@ (8001b80 <MX_ADC3_Init+0x184>)
 8001ab0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ab2:	2306      	movs	r3, #6
 8001ab4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001aba:	237f      	movs	r3, #127	@ 0x7f
 8001abc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 38;
 8001ac2:	2326      	movs	r3, #38	@ 0x26
 8001ac4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8001ac6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001aca:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetSaturation = DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4828      	ldr	r0, [pc, #160]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001ad8:	f003 f958 	bl	8004d8c <HAL_ADC_ConfigChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001ae2:	f001 fdd5 	bl	8003690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ae6:	4b27      	ldr	r3, [pc, #156]	@ (8001b84 <MX_ADC3_Init+0x188>)
 8001ae8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001aea:	230c      	movs	r3, #12
 8001aec:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_2;
 8001aee:	2301      	movs	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 37;
 8001af2:	2325      	movs	r3, #37	@ 0x25
 8001af4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	481f      	ldr	r0, [pc, #124]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001afc:	f003 f946 	bl	8004d8c <HAL_ADC_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 8001b06:	f001 fdc3 	bl	8003690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b88 <MX_ADC3_Init+0x18c>)
 8001b0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b0e:	2312      	movs	r3, #18
 8001b10:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_3;
 8001b12:	2302      	movs	r3, #2
 8001b14:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 8;
 8001b16:	2308      	movs	r3, #8
 8001b18:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4816      	ldr	r0, [pc, #88]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001b20:	f003 f934 	bl	8004d8c <HAL_ADC_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_ADC3_Init+0x132>
  {
    Error_Handler();
 8001b2a:	f001 fdb1 	bl	8003690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <MX_ADC3_Init+0x190>)
 8001b30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001b32:	2318      	movs	r3, #24
 8001b34:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b36:	2304      	movs	r3, #4
 8001b38:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	4619      	mov	r1, r3
 8001b42:	480d      	ldr	r0, [pc, #52]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001b44:	f003 f922 	bl	8004d8c <HAL_ADC_ConfigChannel>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8001b4e:	f001 fd9f 	bl	8003690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b52:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <MX_ADC3_Init+0x194>)
 8001b54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001b56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <MX_ADC3_Init+0x17c>)
 8001b62:	f003 f913 	bl	8004d8c <HAL_ADC_ConfigChannel>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8001b6c:	f001 fd90 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	3730      	adds	r7, #48	@ 0x30
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000420 	.word	0x20000420
 8001b7c:	50000400 	.word	0x50000400
 8001b80:	04300002 	.word	0x04300002
 8001b84:	08600004 	.word	0x08600004
 8001b88:	0c900008 	.word	0x0c900008
 8001b8c:	10c00010 	.word	0x10c00010
 8001b90:	14f00020 	.word	0x14f00020

08001b94 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00f fdd0 	bl	8011746 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c58 <MX_ADC4_Init+0xc4>)
 8001baa:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001bac:	4b29      	ldr	r3, [pc, #164]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001bae:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001bb2:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001bb4:	4b27      	ldr	r3, [pc, #156]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bba:	4b26      	ldr	r3, [pc, #152]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001bc0:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bc6:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bcc:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001bce:	2204      	movs	r2, #4
 8001bd0:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001bd2:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001bde:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bec:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bf2:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001bf8:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001c00:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001c02:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c06:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001c10:	4810      	ldr	r0, [pc, #64]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001c12:	f002 fe17 	bl	8004844 <HAL_ADC_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8001c1c:	f001 fd38 	bl	8003690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c20:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <MX_ADC4_Init+0xc8>)
 8001c22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c24:	2306      	movs	r3, #6
 8001c26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001c28:	2307      	movs	r3, #7
 8001c2a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c2c:	237f      	movs	r3, #127	@ 0x7f
 8001c2e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c30:	2304      	movs	r3, #4
 8001c32:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001c38:	463b      	mov	r3, r7
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	@ (8001c54 <MX_ADC4_Init+0xc0>)
 8001c3e:	f003 f8a5 	bl	8004d8c <HAL_ADC_ConfigChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8001c48:	f001 fd22 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	3720      	adds	r7, #32
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	2000048c 	.word	0x2000048c
 8001c58:	50000500 	.word	0x50000500
 8001c5c:	04300002 	.word	0x04300002

08001c60 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c66:	463b      	mov	r3, r7
 8001c68:	2220      	movs	r2, #32
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f00f fd6a 	bl	8011746 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001c72:	4b31      	ldr	r3, [pc, #196]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001c74:	4a31      	ldr	r2, [pc, #196]	@ (8001d3c <MX_ADC5_Init+0xdc>)
 8001c76:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001c78:	4b2f      	ldr	r3, [pc, #188]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001c7a:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001c7e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001c80:	4b2d      	ldr	r3, [pc, #180]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c86:	4b2c      	ldr	r3, [pc, #176]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c92:	4b29      	ldr	r3, [pc, #164]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c98:	4b27      	ldr	r3, [pc, #156]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001c9e:	4b26      	ldr	r3, [pc, #152]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001ca4:	4b24      	ldr	r3, [pc, #144]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001caa:	4b23      	ldr	r3, [pc, #140]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001cb0:	4b21      	ldr	r3, [pc, #132]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8001cd2:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001cda:	4b17      	ldr	r3, [pc, #92]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001cdc:	221c      	movs	r2, #28
 8001cde:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8001ce0:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001ce2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ce6:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001ce8:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001cee:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001cf4:	4810      	ldr	r0, [pc, #64]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001cf6:	f002 fda5 	bl	8004844 <HAL_ADC_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_ADC5_Init+0xa4>
  {
    Error_Handler();
 8001d00:	f001 fcc6 	bl	8003690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d04:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <MX_ADC5_Init+0xe0>)
 8001d06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d08:	2306      	movs	r3, #6
 8001d0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d10:	237f      	movs	r3, #127	@ 0x7f
 8001d12:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d14:	2304      	movs	r3, #4
 8001d16:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <MX_ADC5_Init+0xd8>)
 8001d22:	f003 f833 	bl	8004d8c <HAL_ADC_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_ADC5_Init+0xd0>
  {
    Error_Handler();
 8001d2c:	f001 fcb0 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	3720      	adds	r7, #32
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200004f8 	.word	0x200004f8
 8001d3c:	50000600 	.word	0x50000600
 8001d40:	04300002 	.word	0x04300002

08001d44 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001d48:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <MX_CORDIC_Init+0x20>)
 8001d4a:	4a07      	ldr	r2, [pc, #28]	@ (8001d68 <MX_CORDIC_Init+0x24>)
 8001d4c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001d4e:	4805      	ldr	r0, [pc, #20]	@ (8001d64 <MX_CORDIC_Init+0x20>)
 8001d50:	f003 ffa2 	bl	8005c98 <HAL_CORDIC_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001d5a:	f001 fc99 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000684 	.word	0x20000684
 8001d68:	40020c00 	.word	0x40020c00

08001d6c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	@ 0x30
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d72:	463b      	mov	r3, r7
 8001d74:	2230      	movs	r2, #48	@ 0x30
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f00f fce4 	bl	8011746 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <MX_DAC1_Init+0x8c>)
 8001d80:	4a1e      	ldr	r2, [pc, #120]	@ (8001dfc <MX_DAC1_Init+0x90>)
 8001d82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001d84:	481c      	ldr	r0, [pc, #112]	@ (8001df8 <MX_DAC1_Init+0x8c>)
 8001d86:	f004 f8c8 	bl	8005f1a <HAL_DAC_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001d90:	f001 fc7e 	bl	8003690 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001d94:	2302      	movs	r3, #2
 8001d96:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001db0:	2301      	movs	r3, #1
 8001db2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001db8:	463b      	mov	r3, r7
 8001dba:	2200      	movs	r2, #0
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480e      	ldr	r0, [pc, #56]	@ (8001df8 <MX_DAC1_Init+0x8c>)
 8001dc0:	f004 f9c8 	bl	8006154 <HAL_DAC_ConfigChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001dca:	f001 fc61 	bl	8003690 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001dce:	463b      	mov	r3, r7
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4808      	ldr	r0, [pc, #32]	@ (8001df8 <MX_DAC1_Init+0x8c>)
 8001dd6:	f004 f9bd 	bl	8006154 <HAL_DAC_ConfigChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8001de0:	f001 fc56 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  __HAL_LINKDMA(&hdac1, DMA_Handle1, hdma_dac1_ch1);
 8001de4:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <MX_DAC1_Init+0x8c>)
 8001de6:	4a06      	ldr	r2, [pc, #24]	@ (8001e00 <MX_DAC1_Init+0x94>)
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <MX_DAC1_Init+0x94>)
 8001dec:	4a02      	ldr	r2, [pc, #8]	@ (8001df8 <MX_DAC1_Init+0x8c>)
 8001dee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END DAC1_Init 2 */

}
 8001df0:	bf00      	nop
 8001df2:	3730      	adds	r7, #48	@ 0x30
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200006ac 	.word	0x200006ac
 8001dfc:	50000800 	.word	0x50000800
 8001e00:	200006d4 	.word	0x200006d4

08001e04 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	@ 0x30
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	2230      	movs	r2, #48	@ 0x30
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f00f fc98 	bl	8011746 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001e16:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <MX_DAC2_Init+0x6c>)
 8001e18:	4a16      	ldr	r2, [pc, #88]	@ (8001e74 <MX_DAC2_Init+0x70>)
 8001e1a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001e1c:	4814      	ldr	r0, [pc, #80]	@ (8001e70 <MX_DAC2_Init+0x6c>)
 8001e1e:	f004 f87c 	bl	8005f1a <HAL_DAC_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001e28:	f001 fc32 	bl	8003690 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001e50:	463b      	mov	r3, r7
 8001e52:	2200      	movs	r2, #0
 8001e54:	4619      	mov	r1, r3
 8001e56:	4806      	ldr	r0, [pc, #24]	@ (8001e70 <MX_DAC2_Init+0x6c>)
 8001e58:	f004 f97c 	bl	8006154 <HAL_DAC_ConfigChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001e62:	f001 fc15 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	3730      	adds	r7, #48	@ 0x30
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200006c0 	.word	0x200006c0
 8001e74:	50000c00 	.word	0x50000c00

08001e78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b098      	sub	sp, #96	@ 0x60
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e8a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	60da      	str	r2, [r3, #12]
 8001e98:	611a      	str	r2, [r3, #16]
 8001e9a:	615a      	str	r2, [r3, #20]
 8001e9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2234      	movs	r2, #52	@ 0x34
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f00f fc4e 	bl	8011746 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eaa:	4b3a      	ldr	r3, [pc, #232]	@ (8001f94 <MX_TIM1_Init+0x11c>)
 8001eac:	4a3a      	ldr	r2, [pc, #232]	@ (8001f98 <MX_TIM1_Init+0x120>)
 8001eae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001eb0:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <MX_TIM1_Init+0x11c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb6:	4b37      	ldr	r3, [pc, #220]	@ (8001f94 <MX_TIM1_Init+0x11c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210;
 8001ebc:	4b35      	ldr	r3, [pc, #212]	@ (8001f94 <MX_TIM1_Init+0x11c>)
 8001ebe:	22d2      	movs	r2, #210	@ 0xd2
 8001ec0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec2:	4b34      	ldr	r3, [pc, #208]	@ (8001f94 <MX_TIM1_Init+0x11c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ec8:	4b32      	ldr	r3, [pc, #200]	@ (8001f94 <MX_TIM1_Init+0x11c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ece:	4b31      	ldr	r3, [pc, #196]	@ (8001f94 <MX_TIM1_Init+0x11c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ed4:	482f      	ldr	r0, [pc, #188]	@ (8001f94 <MX_TIM1_Init+0x11c>)
 8001ed6:	f007 fe12 	bl	8009afe <HAL_TIM_PWM_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001ee0:	f001 fbd6 	bl	8003690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4827      	ldr	r0, [pc, #156]	@ (8001f94 <MX_TIM1_Init+0x11c>)
 8001ef8:	f008 ffac 	bl	800ae54 <HAL_TIMEx_MasterConfigSynchronization>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001f02:	f001 fbc5 	bl	8003690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f06:	2360      	movs	r3, #96	@ 0x60
 8001f08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f12:	2300      	movs	r3, #0
 8001f14:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f22:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f26:	2200      	movs	r2, #0
 8001f28:	4619      	mov	r1, r3
 8001f2a:	481a      	ldr	r0, [pc, #104]	@ (8001f94 <MX_TIM1_Init+0x11c>)
 8001f2c:	f008 f8a0 	bl	800a070 <HAL_TIM_PWM_ConfigChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001f36:	f001 fbab 	bl	8003690 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	4807      	ldr	r0, [pc, #28]	@ (8001f94 <MX_TIM1_Init+0x11c>)
 8001f78:	f009 f802 	bl	800af80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001f82:	f001 fb85 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f86:	4803      	ldr	r0, [pc, #12]	@ (8001f94 <MX_TIM1_Init+0x11c>)
 8001f88:	f001 ff20 	bl	8003dcc <HAL_TIM_MspPostInit>

}
 8001f8c:	bf00      	nop
 8001f8e:	3760      	adds	r7, #96	@ 0x60
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000794 	.word	0x20000794
 8001f98:	40012c00 	.word	0x40012c00

08001f9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08e      	sub	sp, #56	@ 0x38
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
 8001fca:	615a      	str	r2, [r3, #20]
 8001fcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fce:	4b2d      	ldr	r3, [pc, #180]	@ (8002084 <MX_TIM4_Init+0xe8>)
 8001fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8002088 <MX_TIM4_Init+0xec>)
 8001fd2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002084 <MX_TIM4_Init+0xe8>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fda:	4b2a      	ldr	r3, [pc, #168]	@ (8002084 <MX_TIM4_Init+0xe8>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 679;
 8001fe0:	4b28      	ldr	r3, [pc, #160]	@ (8002084 <MX_TIM4_Init+0xe8>)
 8001fe2:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8001fe6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b26      	ldr	r3, [pc, #152]	@ (8002084 <MX_TIM4_Init+0xe8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fee:	4b25      	ldr	r3, [pc, #148]	@ (8002084 <MX_TIM4_Init+0xe8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ff4:	4823      	ldr	r0, [pc, #140]	@ (8002084 <MX_TIM4_Init+0xe8>)
 8001ff6:	f007 fc13 	bl	8009820 <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002000:	f001 fb46 	bl	8003690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002004:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002008:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800200a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800200e:	4619      	mov	r1, r3
 8002010:	481c      	ldr	r0, [pc, #112]	@ (8002084 <MX_TIM4_Init+0xe8>)
 8002012:	f008 f941 	bl	800a298 <HAL_TIM_ConfigClockSource>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800201c:	f001 fb38 	bl	8003690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002020:	4818      	ldr	r0, [pc, #96]	@ (8002084 <MX_TIM4_Init+0xe8>)
 8002022:	f007 fd6c 	bl	8009afe <HAL_TIM_PWM_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800202c:	f001 fb30 	bl	8003690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	4811      	ldr	r0, [pc, #68]	@ (8002084 <MX_TIM4_Init+0xe8>)
 8002040:	f008 ff08 	bl	800ae54 <HAL_TIMEx_MasterConfigSynchronization>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800204a:	f001 fb21 	bl	8003690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800204e:	2360      	movs	r3, #96	@ 0x60
 8002050:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800205e:	463b      	mov	r3, r7
 8002060:	2200      	movs	r2, #0
 8002062:	4619      	mov	r1, r3
 8002064:	4807      	ldr	r0, [pc, #28]	@ (8002084 <MX_TIM4_Init+0xe8>)
 8002066:	f008 f803 	bl	800a070 <HAL_TIM_PWM_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002070:	f001 fb0e 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002074:	4803      	ldr	r0, [pc, #12]	@ (8002084 <MX_TIM4_Init+0xe8>)
 8002076:	f001 fea9 	bl	8003dcc <HAL_TIM_MspPostInit>

}
 800207a:	bf00      	nop
 800207c:	3738      	adds	r7, #56	@ 0x38
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200007e0 	.word	0x200007e0
 8002088:	40000800 	.word	0x40000800

0800208c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800209c:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <MX_TIM6_Init+0x78>)
 800209e:	4a1a      	ldr	r2, [pc, #104]	@ (8002108 <MX_TIM6_Init+0x7c>)
 80020a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11549;
 80020a2:	4b18      	ldr	r3, [pc, #96]	@ (8002104 <MX_TIM6_Init+0x78>)
 80020a4:	f642 521d 	movw	r2, #11549	@ 0x2d1d
 80020a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020aa:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <MX_TIM6_Init+0x78>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64934;
 80020b0:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <MX_TIM6_Init+0x78>)
 80020b2:	f64f 52a6 	movw	r2, #64934	@ 0xfda6
 80020b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b8:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <MX_TIM6_Init+0x78>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020be:	4811      	ldr	r0, [pc, #68]	@ (8002104 <MX_TIM6_Init+0x78>)
 80020c0:	f007 fbae 	bl	8009820 <HAL_TIM_Base_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80020ca:	f001 fae1 	bl	8003690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	4619      	mov	r1, r3
 80020da:	480a      	ldr	r0, [pc, #40]	@ (8002104 <MX_TIM6_Init+0x78>)
 80020dc:	f008 feba 	bl	800ae54 <HAL_TIMEx_MasterConfigSynchronization>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80020e6:	f001 fad3 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2036      	movs	r0, #54	@ 0x36
 80020f0:	f003 fedf 	bl	8005eb2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020f4:	2036      	movs	r0, #54	@ 0x36
 80020f6:	f003 fef6 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	2000082c 	.word	0x2000082c
 8002108:	40001000 	.word	0x40001000

0800210c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800211c:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <MX_TIM7_Init+0x64>)
 800211e:	4a15      	ldr	r2, [pc, #84]	@ (8002174 <MX_TIM7_Init+0x68>)
 8002120:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 14999;
 8002122:	4b13      	ldr	r3, [pc, #76]	@ (8002170 <MX_TIM7_Init+0x64>)
 8002124:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002128:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212a:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <MX_TIM7_Init+0x64>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002130:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <MX_TIM7_Init+0x64>)
 8002132:	2209      	movs	r2, #9
 8002134:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002136:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <MX_TIM7_Init+0x64>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800213c:	480c      	ldr	r0, [pc, #48]	@ (8002170 <MX_TIM7_Init+0x64>)
 800213e:	f007 fb6f 	bl	8009820 <HAL_TIM_Base_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002148:	f001 faa2 	bl	8003690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	4619      	mov	r1, r3
 8002158:	4805      	ldr	r0, [pc, #20]	@ (8002170 <MX_TIM7_Init+0x64>)
 800215a:	f008 fe7b 	bl	800ae54 <HAL_TIMEx_MasterConfigSynchronization>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002164:	f001 fa94 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000878 	.word	0x20000878
 8002174:	40001400 	.word	0x40001400

08002178 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b098      	sub	sp, #96	@ 0x60
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800217e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800218a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	611a      	str	r2, [r3, #16]
 800219a:	615a      	str	r2, [r3, #20]
 800219c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2234      	movs	r2, #52	@ 0x34
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f00f face 	bl	8011746 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002294 <MX_TIM8_Init+0x11c>)
 80021ac:	4a3a      	ldr	r2, [pc, #232]	@ (8002298 <MX_TIM8_Init+0x120>)
 80021ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80021b0:	4b38      	ldr	r3, [pc, #224]	@ (8002294 <MX_TIM8_Init+0x11c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b6:	4b37      	ldr	r3, [pc, #220]	@ (8002294 <MX_TIM8_Init+0x11c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 80021bc:	4b35      	ldr	r3, [pc, #212]	@ (8002294 <MX_TIM8_Init+0x11c>)
 80021be:	22d2      	movs	r2, #210	@ 0xd2
 80021c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c2:	4b34      	ldr	r3, [pc, #208]	@ (8002294 <MX_TIM8_Init+0x11c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021c8:	4b32      	ldr	r3, [pc, #200]	@ (8002294 <MX_TIM8_Init+0x11c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ce:	4b31      	ldr	r3, [pc, #196]	@ (8002294 <MX_TIM8_Init+0x11c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80021d4:	482f      	ldr	r0, [pc, #188]	@ (8002294 <MX_TIM8_Init+0x11c>)
 80021d6:	f007 fc92 	bl	8009afe <HAL_TIM_PWM_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80021e0:	f001 fa56 	bl	8003690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021f4:	4619      	mov	r1, r3
 80021f6:	4827      	ldr	r0, [pc, #156]	@ (8002294 <MX_TIM8_Init+0x11c>)
 80021f8:	f008 fe2c 	bl	800ae54 <HAL_TIMEx_MasterConfigSynchronization>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8002202:	f001 fa45 	bl	8003690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002206:	2360      	movs	r3, #96	@ 0x60
 8002208:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800220e:	2300      	movs	r3, #0
 8002210:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002212:	2300      	movs	r3, #0
 8002214:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002222:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002226:	2204      	movs	r2, #4
 8002228:	4619      	mov	r1, r3
 800222a:	481a      	ldr	r0, [pc, #104]	@ (8002294 <MX_TIM8_Init+0x11c>)
 800222c:	f007 ff20 	bl	800a070 <HAL_TIM_PWM_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8002236:	f001 fa2b 	bl	8003690 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800224e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002252:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002258:	2300      	movs	r3, #0
 800225a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002260:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002264:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800226a:	2300      	movs	r3, #0
 800226c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4807      	ldr	r0, [pc, #28]	@ (8002294 <MX_TIM8_Init+0x11c>)
 8002278:	f008 fe82 	bl	800af80 <HAL_TIMEx_ConfigBreakDeadTime>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8002282:	f001 fa05 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002286:	4803      	ldr	r0, [pc, #12]	@ (8002294 <MX_TIM8_Init+0x11c>)
 8002288:	f001 fda0 	bl	8003dcc <HAL_TIM_MspPostInit>

}
 800228c:	bf00      	nop
 800228e:	3760      	adds	r7, #96	@ 0x60
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200008c4 	.word	0x200008c4
 8002298:	40013400 	.word	0x40013400

0800229c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a2:	f107 0310 	add.w	r3, r7, #16
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80022ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002338 <MX_TIM15_Init+0x9c>)
 80022bc:	4a1f      	ldr	r2, [pc, #124]	@ (800233c <MX_TIM15_Init+0xa0>)
 80022be:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1499;
 80022c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <MX_TIM15_Init+0x9c>)
 80022c2:	f240 52db 	movw	r2, #1499	@ 0x5db
 80022c6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <MX_TIM15_Init+0x9c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002338 <MX_TIM15_Init+0x9c>)
 80022d0:	2204      	movs	r2, #4
 80022d2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d4:	4b18      	ldr	r3, [pc, #96]	@ (8002338 <MX_TIM15_Init+0x9c>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80022da:	4b17      	ldr	r3, [pc, #92]	@ (8002338 <MX_TIM15_Init+0x9c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e0:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <MX_TIM15_Init+0x9c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80022e6:	4814      	ldr	r0, [pc, #80]	@ (8002338 <MX_TIM15_Init+0x9c>)
 80022e8:	f007 fa9a 	bl	8009820 <HAL_TIM_Base_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80022f2:	f001 f9cd 	bl	8003690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	4619      	mov	r1, r3
 8002302:	480d      	ldr	r0, [pc, #52]	@ (8002338 <MX_TIM15_Init+0x9c>)
 8002304:	f007 ffc8 	bl	800a298 <HAL_TIM_ConfigClockSource>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800230e:	f001 f9bf 	bl	8003690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	4619      	mov	r1, r3
 800231e:	4806      	ldr	r0, [pc, #24]	@ (8002338 <MX_TIM15_Init+0x9c>)
 8002320:	f008 fd98 	bl	800ae54 <HAL_TIMEx_MasterConfigSynchronization>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800232a:	f001 f9b1 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000910 	.word	0x20000910
 800233c:	40014000 	.word	0x40014000

08002340 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002344:	4b0f      	ldr	r3, [pc, #60]	@ (8002384 <MX_TIM16_Init+0x44>)
 8002346:	4a10      	ldr	r2, [pc, #64]	@ (8002388 <MX_TIM16_Init+0x48>)
 8002348:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 14999;
 800234a:	4b0e      	ldr	r3, [pc, #56]	@ (8002384 <MX_TIM16_Init+0x44>)
 800234c:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002350:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002352:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <MX_TIM16_Init+0x44>)
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8002358:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <MX_TIM16_Init+0x44>)
 800235a:	2209      	movs	r2, #9
 800235c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800235e:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <MX_TIM16_Init+0x44>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002364:	4b07      	ldr	r3, [pc, #28]	@ (8002384 <MX_TIM16_Init+0x44>)
 8002366:	2200      	movs	r2, #0
 8002368:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <MX_TIM16_Init+0x44>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002370:	4804      	ldr	r0, [pc, #16]	@ (8002384 <MX_TIM16_Init+0x44>)
 8002372:	f007 fa55 	bl	8009820 <HAL_TIM_Base_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800237c:	f001 f988 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	2000095c 	.word	0x2000095c
 8002388:	40014400 	.word	0x40014400

0800238c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002390:	4b22      	ldr	r3, [pc, #136]	@ (800241c <MX_UART4_Init+0x90>)
 8002392:	4a23      	ldr	r2, [pc, #140]	@ (8002420 <MX_UART4_Init+0x94>)
 8002394:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002396:	4b21      	ldr	r3, [pc, #132]	@ (800241c <MX_UART4_Init+0x90>)
 8002398:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800239c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800239e:	4b1f      	ldr	r3, [pc, #124]	@ (800241c <MX_UART4_Init+0x90>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80023a4:	4b1d      	ldr	r3, [pc, #116]	@ (800241c <MX_UART4_Init+0x90>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80023aa:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <MX_UART4_Init+0x90>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80023b0:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <MX_UART4_Init+0x90>)
 80023b2:	220c      	movs	r2, #12
 80023b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b6:	4b19      	ldr	r3, [pc, #100]	@ (800241c <MX_UART4_Init+0x90>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80023bc:	4b17      	ldr	r3, [pc, #92]	@ (800241c <MX_UART4_Init+0x90>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023c2:	4b16      	ldr	r3, [pc, #88]	@ (800241c <MX_UART4_Init+0x90>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023c8:	4b14      	ldr	r3, [pc, #80]	@ (800241c <MX_UART4_Init+0x90>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ce:	4b13      	ldr	r3, [pc, #76]	@ (800241c <MX_UART4_Init+0x90>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80023d4:	4811      	ldr	r0, [pc, #68]	@ (800241c <MX_UART4_Init+0x90>)
 80023d6:	f008 fead 	bl	800b134 <HAL_UART_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80023e0:	f001 f956 	bl	8003690 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023e4:	2100      	movs	r1, #0
 80023e6:	480d      	ldr	r0, [pc, #52]	@ (800241c <MX_UART4_Init+0x90>)
 80023e8:	f009 fc48 	bl	800bc7c <HAL_UARTEx_SetTxFifoThreshold>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80023f2:	f001 f94d 	bl	8003690 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023f6:	2100      	movs	r1, #0
 80023f8:	4808      	ldr	r0, [pc, #32]	@ (800241c <MX_UART4_Init+0x90>)
 80023fa:	f009 fc7d 	bl	800bcf8 <HAL_UARTEx_SetRxFifoThreshold>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002404:	f001 f944 	bl	8003690 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002408:	4804      	ldr	r0, [pc, #16]	@ (800241c <MX_UART4_Init+0x90>)
 800240a:	f009 fbfe 	bl	800bc0a <HAL_UARTEx_DisableFifoMode>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002414:	f001 f93c 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200009a8 	.word	0x200009a8
 8002420:	40004c00 	.word	0x40004c00

08002424 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800242a:	4b22      	ldr	r3, [pc, #136]	@ (80024b4 <MX_DMA_Init+0x90>)
 800242c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800242e:	4a21      	ldr	r2, [pc, #132]	@ (80024b4 <MX_DMA_Init+0x90>)
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	6493      	str	r3, [r2, #72]	@ 0x48
 8002436:	4b1f      	ldr	r3, [pc, #124]	@ (80024b4 <MX_DMA_Init+0x90>)
 8002438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002442:	4b1c      	ldr	r3, [pc, #112]	@ (80024b4 <MX_DMA_Init+0x90>)
 8002444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002446:	4a1b      	ldr	r2, [pc, #108]	@ (80024b4 <MX_DMA_Init+0x90>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6493      	str	r3, [r2, #72]	@ 0x48
 800244e:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <MX_DMA_Init+0x90>)
 8002450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	200b      	movs	r0, #11
 8002460:	f003 fd27 	bl	8005eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002464:	200b      	movs	r0, #11
 8002466:	f003 fd3e 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2100      	movs	r1, #0
 800246e:	200c      	movs	r0, #12
 8002470:	f003 fd1f 	bl	8005eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002474:	200c      	movs	r0, #12
 8002476:	f003 fd36 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	200d      	movs	r0, #13
 8002480:	f003 fd17 	bl	8005eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002484:	200d      	movs	r0, #13
 8002486:	f003 fd2e 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800248a:	2200      	movs	r2, #0
 800248c:	2100      	movs	r1, #0
 800248e:	200e      	movs	r0, #14
 8002490:	f003 fd0f 	bl	8005eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002494:	200e      	movs	r0, #14
 8002496:	f003 fd26 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	200f      	movs	r0, #15
 80024a0:	f003 fd07 	bl	8005eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80024a4:	200f      	movs	r0, #15
 80024a6:	f003 fd1e 	bl	8005ee6 <HAL_NVIC_EnableIRQ>

}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000

080024b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08c      	sub	sp, #48	@ 0x30
 80024bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024be:	f107 031c 	add.w	r3, r7, #28
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]
 80024c8:	609a      	str	r2, [r3, #8]
 80024ca:	60da      	str	r2, [r3, #12]
 80024cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ce:	4b9a      	ldr	r3, [pc, #616]	@ (8002738 <MX_GPIO_Init+0x280>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d2:	4a99      	ldr	r2, [pc, #612]	@ (8002738 <MX_GPIO_Init+0x280>)
 80024d4:	f043 0310 	orr.w	r3, r3, #16
 80024d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024da:	4b97      	ldr	r3, [pc, #604]	@ (8002738 <MX_GPIO_Init+0x280>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	61bb      	str	r3, [r7, #24]
 80024e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e6:	4b94      	ldr	r3, [pc, #592]	@ (8002738 <MX_GPIO_Init+0x280>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	4a93      	ldr	r2, [pc, #588]	@ (8002738 <MX_GPIO_Init+0x280>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024f2:	4b91      	ldr	r3, [pc, #580]	@ (8002738 <MX_GPIO_Init+0x280>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024fe:	4b8e      	ldr	r3, [pc, #568]	@ (8002738 <MX_GPIO_Init+0x280>)
 8002500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002502:	4a8d      	ldr	r2, [pc, #564]	@ (8002738 <MX_GPIO_Init+0x280>)
 8002504:	f043 0320 	orr.w	r3, r3, #32
 8002508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800250a:	4b8b      	ldr	r3, [pc, #556]	@ (8002738 <MX_GPIO_Init+0x280>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	4b88      	ldr	r3, [pc, #544]	@ (8002738 <MX_GPIO_Init+0x280>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251a:	4a87      	ldr	r2, [pc, #540]	@ (8002738 <MX_GPIO_Init+0x280>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002522:	4b85      	ldr	r3, [pc, #532]	@ (8002738 <MX_GPIO_Init+0x280>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800252e:	4b82      	ldr	r3, [pc, #520]	@ (8002738 <MX_GPIO_Init+0x280>)
 8002530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002532:	4a81      	ldr	r2, [pc, #516]	@ (8002738 <MX_GPIO_Init+0x280>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800253a:	4b7f      	ldr	r3, [pc, #508]	@ (8002738 <MX_GPIO_Init+0x280>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002546:	4b7c      	ldr	r3, [pc, #496]	@ (8002738 <MX_GPIO_Init+0x280>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254a:	4a7b      	ldr	r2, [pc, #492]	@ (8002738 <MX_GPIO_Init+0x280>)
 800254c:	f043 0308 	orr.w	r3, r3, #8
 8002550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002552:	4b79      	ldr	r3, [pc, #484]	@ (8002738 <MX_GPIO_Init+0x280>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 800255e:	2200      	movs	r2, #0
 8002560:	2120      	movs	r1, #32
 8002562:	4876      	ldr	r0, [pc, #472]	@ (800273c <MX_GPIO_Init+0x284>)
 8002564:	f004 fbc4 	bl	8006cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
 8002568:	2201      	movs	r2, #1
 800256a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800256e:	4874      	ldr	r0, [pc, #464]	@ (8002740 <MX_GPIO_Init+0x288>)
 8002570:	f004 fbbe 	bl	8006cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, GPIO_PIN_RESET);
 8002574:	2200      	movs	r2, #0
 8002576:	2104      	movs	r1, #4
 8002578:	4871      	ldr	r0, [pc, #452]	@ (8002740 <MX_GPIO_Init+0x288>)
 800257a:	f004 fbb9 	bl	8006cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 800257e:	2200      	movs	r2, #0
 8002580:	2120      	movs	r1, #32
 8002582:	4870      	ldr	r0, [pc, #448]	@ (8002744 <MX_GPIO_Init+0x28c>)
 8002584:	f004 fbb4 	bl	8006cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_RST_2_Pin|CS_OCD_1_Pin, GPIO_PIN_SET);
 8002588:	2201      	movs	r2, #1
 800258a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800258e:	486b      	ldr	r0, [pc, #428]	@ (800273c <MX_GPIO_Init+0x284>)
 8002590:	f004 fbae 	bl	8006cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port, NOT_RST_4_Pin, GPIO_PIN_SET);
 8002594:	2201      	movs	r2, #1
 8002596:	2140      	movs	r1, #64	@ 0x40
 8002598:	486a      	ldr	r0, [pc, #424]	@ (8002744 <MX_GPIO_Init+0x28c>)
 800259a:	f004 fba9 	bl	8006cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port, NOT_RST_3_Pin, GPIO_PIN_SET);
 800259e:	2201      	movs	r2, #1
 80025a0:	2101      	movs	r1, #1
 80025a2:	4869      	ldr	r0, [pc, #420]	@ (8002748 <MX_GPIO_Init+0x290>)
 80025a4:	f004 fba4 	bl	8006cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port, NOT_RST_1_Pin, GPIO_PIN_SET);
 80025a8:	2201      	movs	r2, #1
 80025aa:	2180      	movs	r1, #128	@ 0x80
 80025ac:	4867      	ldr	r0, [pc, #412]	@ (800274c <MX_GPIO_Init+0x294>)
 80025ae:	f004 fb9f 	bl	8006cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NOT_FAULT_1_Pin CS_FAULT_2_Pin NOT_FAULT_2_Pin CS_FAULT_1_Pin */
  GPIO_InitStruct.Pin = NOT_FAULT_1_Pin|CS_FAULT_2_Pin|NOT_FAULT_2_Pin|CS_FAULT_1_Pin;
 80025b2:	f640 0315 	movw	r3, #2069	@ 0x815
 80025b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b8:	2300      	movs	r3, #0
 80025ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	4619      	mov	r1, r3
 80025c6:	485d      	ldr	r0, [pc, #372]	@ (800273c <MX_GPIO_Init+0x284>)
 80025c8:	f004 f9f8 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_INTERLOCK_Pin */
  GPIO_InitStruct.Pin = RESET_INTERLOCK_Pin;
 80025cc:	2320      	movs	r3, #32
 80025ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d0:	2301      	movs	r3, #1
 80025d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d8:	2300      	movs	r3, #0
 80025da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	4619      	mov	r1, r3
 80025e2:	4856      	ldr	r0, [pc, #344]	@ (800273c <MX_GPIO_Init+0x284>)
 80025e4:	f004 f9ea 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_OCD_2_Pin */
  GPIO_InitStruct.Pin = CS_OCD_2_Pin;
 80025e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80025ee:	2311      	movs	r3, #17
 80025f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f6:	2300      	movs	r3, #0
 80025f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_OCD_2_GPIO_Port, &GPIO_InitStruct);
 80025fa:	f107 031c 	add.w	r3, r7, #28
 80025fe:	4619      	mov	r1, r3
 8002600:	484f      	ldr	r0, [pc, #316]	@ (8002740 <MX_GPIO_Init+0x288>)
 8002602:	f004 f9db 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_3_Pin */
  GPIO_InitStruct.Pin = READY_3_Pin;
 8002606:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800260a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800260c:	2300      	movs	r3, #0
 800260e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_3_GPIO_Port, &GPIO_InitStruct);
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	4619      	mov	r1, r3
 800261a:	4849      	ldr	r0, [pc, #292]	@ (8002740 <MX_GPIO_Init+0x288>)
 800261c:	f004 f9ce 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERLOCK_Pin NOT_FAULT_4_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin|NOT_FAULT_4_Pin;
 8002620:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4619      	mov	r1, r3
 8002634:	4843      	ldr	r0, [pc, #268]	@ (8002744 <MX_GPIO_Init+0x28c>)
 8002636:	f004 f9c1 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_FPGA_Pin */
  GPIO_InitStruct.Pin = RESET_FPGA_Pin;
 800263a:	2304      	movs	r3, #4
 800263c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263e:	2301      	movs	r3, #1
 8002640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_FPGA_GPIO_Port, &GPIO_InitStruct);
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	4619      	mov	r1, r3
 8002650:	483b      	ldr	r0, [pc, #236]	@ (8002740 <MX_GPIO_Init+0x288>)
 8002652:	f004 f9b3 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : START_STOP_FPGA_Pin */
  GPIO_InitStruct.Pin = START_STOP_FPGA_Pin;
 8002656:	2320      	movs	r3, #32
 8002658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265a:	2301      	movs	r3, #1
 800265c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	2300      	movs	r3, #0
 8002664:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(START_STOP_FPGA_GPIO_Port, &GPIO_InitStruct);
 8002666:	f107 031c 	add.w	r3, r7, #28
 800266a:	4619      	mov	r1, r3
 800266c:	4835      	ldr	r0, [pc, #212]	@ (8002744 <MX_GPIO_Init+0x28c>)
 800266e:	f004 f9a5 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_2_Pin */
  GPIO_InitStruct.Pin = READY_2_Pin;
 8002672:	2301      	movs	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002676:	2300      	movs	r3, #0
 8002678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_2_GPIO_Port, &GPIO_InitStruct);
 800267e:	f107 031c 	add.w	r3, r7, #28
 8002682:	4619      	mov	r1, r3
 8002684:	4831      	ldr	r0, [pc, #196]	@ (800274c <MX_GPIO_Init+0x294>)
 8002686:	f004 f999 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pins : NOT_RST_2_Pin CS_OCD_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_2_Pin|CS_OCD_1_Pin;
 800268a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800268e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002690:	2311      	movs	r3, #17
 8002692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800269c:	f107 031c 	add.w	r3, r7, #28
 80026a0:	4619      	mov	r1, r3
 80026a2:	4826      	ldr	r0, [pc, #152]	@ (800273c <MX_GPIO_Init+0x284>)
 80026a4:	f004 f98a 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_4_Pin */
  GPIO_InitStruct.Pin = NOT_RST_4_Pin;
 80026a8:	2340      	movs	r3, #64	@ 0x40
 80026aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80026ac:	2311      	movs	r3, #17
 80026ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_4_GPIO_Port, &GPIO_InitStruct);
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	4619      	mov	r1, r3
 80026be:	4821      	ldr	r0, [pc, #132]	@ (8002744 <MX_GPIO_Init+0x28c>)
 80026c0:	f004 f97c 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_4_Pin */
  GPIO_InitStruct.Pin = READY_4_Pin;
 80026c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ca:	2300      	movs	r3, #0
 80026cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_4_GPIO_Port, &GPIO_InitStruct);
 80026d2:	f107 031c 	add.w	r3, r7, #28
 80026d6:	4619      	mov	r1, r3
 80026d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026dc:	f004 f96e 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_3_Pin */
  GPIO_InitStruct.Pin = NOT_RST_3_Pin;
 80026e0:	2301      	movs	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80026e4:	2311      	movs	r3, #17
 80026e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_3_GPIO_Port, &GPIO_InitStruct);
 80026f0:	f107 031c 	add.w	r3, r7, #28
 80026f4:	4619      	mov	r1, r3
 80026f6:	4814      	ldr	r0, [pc, #80]	@ (8002748 <MX_GPIO_Init+0x290>)
 80026f8:	f004 f960 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_1_Pin PD5 NOT_FAULT_3_Pin */
  GPIO_InitStruct.Pin = READY_1_Pin|GPIO_PIN_5|NOT_FAULT_3_Pin;
 80026fc:	2370      	movs	r3, #112	@ 0x70
 80026fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002700:	2300      	movs	r3, #0
 8002702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002708:	f107 031c 	add.w	r3, r7, #28
 800270c:	4619      	mov	r1, r3
 800270e:	480e      	ldr	r0, [pc, #56]	@ (8002748 <MX_GPIO_Init+0x290>)
 8002710:	f004 f954 	bl	80069bc <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_1_Pin;
 8002714:	2380      	movs	r3, #128	@ 0x80
 8002716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002718:	2311      	movs	r3, #17
 800271a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_1_GPIO_Port, &GPIO_InitStruct);
 8002724:	f107 031c 	add.w	r3, r7, #28
 8002728:	4619      	mov	r1, r3
 800272a:	4808      	ldr	r0, [pc, #32]	@ (800274c <MX_GPIO_Init+0x294>)
 800272c:	f004 f946 	bl	80069bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002730:	bf00      	nop
 8002732:	3730      	adds	r7, #48	@ 0x30
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	48001000 	.word	0x48001000
 8002740:	48001400 	.word	0x48001400
 8002744:	48000800 	.word	0x48000800
 8002748:	48000c00 	.word	0x48000c00
 800274c:	48000400 	.word	0x48000400

08002750 <handle_event>:

/* USER CODE BEGIN 4 */

ConverterState handle_event(ConverterState currentState, ConverterEvent event) {
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	460a      	mov	r2, r1
 800275a:	71fb      	strb	r3, [r7, #7]
 800275c:	4613      	mov	r3, r2
 800275e:	71bb      	strb	r3, [r7, #6]
    switch (currentState) {
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	2b04      	cmp	r3, #4
 8002764:	d839      	bhi.n	80027da <handle_event+0x8a>
 8002766:	a201      	add	r2, pc, #4	@ (adr r2, 800276c <handle_event+0x1c>)
 8002768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276c:	08002781 	.word	0x08002781
 8002770:	0800278f 	.word	0x0800278f
 8002774:	0800279d 	.word	0x0800279d
 8002778:	080027b9 	.word	0x080027b9
 800277c:	080027c7 	.word	0x080027c7
        case STATE_INIT:
            if (event == EVENT_START)
 8002780:	79bb      	ldrb	r3, [r7, #6]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d12b      	bne.n	80027de <handle_event+0x8e>
            {
            	currentState = STATE_REGULATION;
 8002786:	2302      	movs	r3, #2
 8002788:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 800278a:	2302      	movs	r3, #2
 800278c:	e031      	b.n	80027f2 <handle_event+0xa2>
            }
            break;

        case STATE_STANDBY:
            if (event == EVENT_START)
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d126      	bne.n	80027e2 <handle_event+0x92>
            {
            	currentState = STATE_REGULATION;
 8002794:	2302      	movs	r3, #2
 8002796:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 8002798:	2302      	movs	r3, #2
 800279a:	e02a      	b.n	80027f2 <handle_event+0xa2>
            }
            break;

        case STATE_REGULATION:
        	//USB_SendString("State: INIT -> RUNNING\r\n");
            if (event == EVENT_FAULT)
 800279c:	79bb      	ldrb	r3, [r7, #6]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d103      	bne.n	80027aa <handle_event+0x5a>
            {
            	currentState = STATE_FAULT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	71fb      	strb	r3, [r7, #7]
                return STATE_FAULT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e023      	b.n	80027f2 <handle_event+0xa2>

            } else if (event == EVENT_SHUTDOWN)
 80027aa:	79bb      	ldrb	r3, [r7, #6]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d11a      	bne.n	80027e6 <handle_event+0x96>
            {
            	currentState = STATE_SHUTDOWN;
 80027b0:	2304      	movs	r3, #4
 80027b2:	71fb      	strb	r3, [r7, #7]
                return STATE_SHUTDOWN;
 80027b4:	2304      	movs	r3, #4
 80027b6:	e01c      	b.n	80027f2 <handle_event+0xa2>
            }

            break;

        case STATE_FAULT:
            if (event == EVENT_CLEAR_FAULT)
 80027b8:	79bb      	ldrb	r3, [r7, #6]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d115      	bne.n	80027ea <handle_event+0x9a>
            {
            	currentState = STATE_STANDBY;
 80027be:	2301      	movs	r3, #1
 80027c0:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e015      	b.n	80027f2 <handle_event+0xa2>
            }
            break;

        case STATE_SHUTDOWN:
            if (event == EVENT_START)
 80027c6:	79bb      	ldrb	r3, [r7, #6]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d110      	bne.n	80027ee <handle_event+0x9e>
            {
            	once = 0;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <handle_event+0xb0>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
            	currentState = STATE_REGULATION;
 80027d2:	2302      	movs	r3, #2
 80027d4:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 80027d6:	2302      	movs	r3, #2
 80027d8:	e00b      	b.n	80027f2 <handle_event+0xa2>
            }
            break;
        default:
            break;
 80027da:	bf00      	nop
 80027dc:	e008      	b.n	80027f0 <handle_event+0xa0>
            break;
 80027de:	bf00      	nop
 80027e0:	e006      	b.n	80027f0 <handle_event+0xa0>
            break;
 80027e2:	bf00      	nop
 80027e4:	e004      	b.n	80027f0 <handle_event+0xa0>
            break;
 80027e6:	bf00      	nop
 80027e8:	e002      	b.n	80027f0 <handle_event+0xa0>
            break;
 80027ea:	bf00      	nop
 80027ec:	e000      	b.n	80027f0 <handle_event+0xa0>
            break;
 80027ee:	bf00      	nop
    }
    return currentState; // No state change
 80027f0:	79fb      	ldrb	r3, [r7, #7]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000b6c 	.word	0x20000b6c

08002804 <Set_PWM_DutyCycle>:
       // float TEMPERATURE_AFTER_CONVERSION_FROM_ADC = (((adc_value/4096.0f)*3.3f) - 0.4f)/0.0195f;
       // return TEMPERATURE_AFTER_CONVERSION_FROM_ADC;

}

void Set_PWM_DutyCycle(uint32_t dutyCycle) { // dutycyle for FAN SPEED CONTROl
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
    if (dutyCycle > 100) dutyCycle = 100;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b64      	cmp	r3, #100	@ 0x64
 8002810:	d901      	bls.n	8002816 <Set_PWM_DutyCycle+0x12>
 8002812:	2364      	movs	r3, #100	@ 0x64
 8002814:	607b      	str	r3, [r7, #4]
    uint32_t pulse = (htim4.Init.Period + 1) * dutyCycle / 100 - 1;
 8002816:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <Set_PWM_DutyCycle+0x40>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	3301      	adds	r3, #1
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	4a09      	ldr	r2, [pc, #36]	@ (8002848 <Set_PWM_DutyCycle+0x44>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	3b01      	subs	r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 800282e:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <Set_PWM_DutyCycle+0x40>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	200007e0 	.word	0x200007e0
 8002848:	51eb851f 	.word	0x51eb851f
 800284c:	00000000 	.word	0x00000000

08002850 <HAL_ADC_ConvCpltCallback>:
//ADC save to array and moving average
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC5)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a20      	ldr	r2, [pc, #128]	@ (80028e0 <HAL_ADC_ConvCpltCallback+0x90>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d135      	bne.n	80028ce <HAL_ADC_ConvCpltCallback+0x7e>
		    {
		        uint32_t sum = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	e00b      	b.n	8002884 <HAL_ADC_ConvCpltCallback+0x34>
		        {
		            sum += adc5_dma_buffer[i];
 800286c:	4a1d      	ldr	r2, [pc, #116]	@ (80028e4 <HAL_ADC_ConvCpltCallback+0x94>)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002874:	b29b      	uxth	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4413      	add	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	3301      	adds	r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b09      	cmp	r3, #9
 8002888:	ddf0      	ble.n	800286c <HAL_ADC_ConvCpltCallback+0x1c>
		        }
		        adc_moving_average = ((sum / MA_WINDOW_SIZE)*3300)/4096;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4a16      	ldr	r2, [pc, #88]	@ (80028e8 <HAL_ADC_ConvCpltCallback+0x98>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002898:	fb02 f303 	mul.w	r3, r2, r3
 800289c:	0b1b      	lsrs	r3, r3, #12
 800289e:	b29a      	uxth	r2, r3
 80028a0:	4b12      	ldr	r3, [pc, #72]	@ (80028ec <HAL_ADC_ConvCpltCallback+0x9c>)
 80028a2:	801a      	strh	r2, [r3, #0]
		        imax2_sum=(adc_moving_average-1450)*0.384;
 80028a4:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <HAL_ADC_ConvCpltCallback+0x9c>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	f2a3 53aa 	subw	r3, r3, #1450	@ 0x5aa
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fe61 	bl	8000574 <__aeabi_i2d>
 80028b2:	a309      	add	r3, pc, #36	@ (adr r3, 80028d8 <HAL_ADC_ConvCpltCallback+0x88>)
 80028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b8:	f7fd fec6 	bl	8000648 <__aeabi_dmul>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7fe f998 	bl	8000bf8 <__aeabi_d2uiz>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4a09      	ldr	r2, [pc, #36]	@ (80028f0 <HAL_ADC_ConvCpltCallback+0xa0>)
 80028cc:	6013      	str	r3, [r2, #0]
		        // Restart the DMA transfer
		       // HAL_ADC_Start_DMA(hadc, (uint32_t*)adc5_dma_buffer, MA_WINDOW_SIZE);
		    }


}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	bc6a7efa 	.word	0xbc6a7efa
 80028dc:	3fd89374 	.word	0x3fd89374
 80028e0:	50000600 	.word	0x50000600
 80028e4:	20000a80 	.word	0x20000a80
 80028e8:	cccccccd 	.word	0xcccccccd
 80028ec:	20000a94 	.word	0x20000a94
 80028f0:	20000a7c 	.word	0x20000a7c

080028f4 <Update_PWM_Frequency>:
        }
    }
}

void Update_PWM_Frequency(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	@ 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
	 uint32_t timer_clock = 150000000;  // Assuming a 150 MHz timer clock
 8002900:	4b33      	ldr	r3, [pc, #204]	@ (80029d0 <Update_PWM_Frequency+0xdc>)
 8002902:	61bb      	str	r3, [r7, #24]
	    uint32_t prescaler = htim->Init.Prescaler + 1;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	3301      	adds	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
	    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	61fb      	str	r3, [r7, #28]

	    // Ensure period is within valid range
	    if (period > 65535) {
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002924:	d314      	bcc.n	8002950 <Update_PWM_Frequency+0x5c>
	        // Adjust prescaler to bring period within range
	        prescaler = (prescaler * (period / 65536)) + 1;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	0c1b      	lsrs	r3, r3, #16
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	fb02 f303 	mul.w	r3, r2, r3
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
	        period = (timer_clock / (prescaler * frequency)) - 1;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	fb02 f303 	mul.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	61fb      	str	r3, [r7, #28]
	        __HAL_TIM_SET_PRESCALER(htim, prescaler - 1);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	3a01      	subs	r2, #1
 800294e:	629a      	str	r2, [r3, #40]	@ 0x28
	    }

	    // Update the period register (ARR) with double buffering
	    __HAL_TIM_SET_AUTORELOAD(htim, period);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	60da      	str	r2, [r3, #12]

	    // Set the duty cycle to approximately 50%
	    uint32_t pulse = period / 2;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	085b      	lsrs	r3, r3, #1
 8002962:	613b      	str	r3, [r7, #16]
	    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d104      	bne.n	8002974 <Update_PWM_Frequency+0x80>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	635a      	str	r2, [r3, #52]	@ 0x34
 8002972:	e023      	b.n	80029bc <Update_PWM_Frequency+0xc8>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b04      	cmp	r3, #4
 8002978:	d104      	bne.n	8002984 <Update_PWM_Frequency+0x90>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	6393      	str	r3, [r2, #56]	@ 0x38
 8002982:	e01b      	b.n	80029bc <Update_PWM_Frequency+0xc8>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b08      	cmp	r3, #8
 8002988:	d104      	bne.n	8002994 <Update_PWM_Frequency+0xa0>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002992:	e013      	b.n	80029bc <Update_PWM_Frequency+0xc8>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b0c      	cmp	r3, #12
 8002998:	d104      	bne.n	80029a4 <Update_PWM_Frequency+0xb0>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a2:	e00b      	b.n	80029bc <Update_PWM_Frequency+0xc8>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b10      	cmp	r3, #16
 80029a8:	d104      	bne.n	80029b4 <Update_PWM_Frequency+0xc0>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80029b2:	e003      	b.n	80029bc <Update_PWM_Frequency+0xc8>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	64d3      	str	r3, [r2, #76]	@ 0x4c

	    // Manually generate an update event by setting the UG bit in the EGR register
	    htim->Instance->EGR = TIM_EGR_UG;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2201      	movs	r2, #1
 80029c2:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_AUTORELOAD(htim, period);

    // Restart the timer PWM generation
    HAL_TIM_PWM_Stop(htim, channel);
    HAL_TIM_PWM_Start(htim, channel);*/
}
 80029c4:	bf00      	nop
 80029c6:	3724      	adds	r7, #36	@ 0x24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	08f0d180 	.word	0x08f0d180

080029d4 <Check_Faults>:
	        dac_buffer[i] = (((1/3.3)*res12_b) + ((0.5/3.3)*res12_b) * sin(2 * M_PI * i/BUFFER_SIZE));
	    }
}

uint8_t Check_Faults()
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
	// Faults pins are from gate driver and they are active pull down
	// 4 fault pins from 4 gate driver + 2 fault pins from  2 currents sensors  = 6 pins
	if(HAL_GPIO_ReadPin(CS_FAULT_1_GPIO_Port, CS_FAULT_1_Pin) && HAL_GPIO_ReadPin(CS_FAULT_2_GPIO_Port, CS_FAULT_2_Pin)
 80029d8:	2101      	movs	r1, #1
 80029da:	4818      	ldr	r0, [pc, #96]	@ (8002a3c <Check_Faults+0x68>)
 80029dc:	f004 f970 	bl	8006cc0 <HAL_GPIO_ReadPin>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d026      	beq.n	8002a34 <Check_Faults+0x60>
 80029e6:	2110      	movs	r1, #16
 80029e8:	4814      	ldr	r0, [pc, #80]	@ (8002a3c <Check_Faults+0x68>)
 80029ea:	f004 f969 	bl	8006cc0 <HAL_GPIO_ReadPin>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01f      	beq.n	8002a34 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_1_GPIO_Port, NOT_FAULT_1_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_2_GPIO_Port, NOT_FAULT_2_Pin)
 80029f4:	2104      	movs	r1, #4
 80029f6:	4811      	ldr	r0, [pc, #68]	@ (8002a3c <Check_Faults+0x68>)
 80029f8:	f004 f962 	bl	8006cc0 <HAL_GPIO_ReadPin>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d018      	beq.n	8002a34 <Check_Faults+0x60>
 8002a02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a06:	480d      	ldr	r0, [pc, #52]	@ (8002a3c <Check_Faults+0x68>)
 8002a08:	f004 f95a 	bl	8006cc0 <HAL_GPIO_ReadPin>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d010      	beq.n	8002a34 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_3_GPIO_Port, NOT_FAULT_3_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_4_GPIO_Port, NOT_FAULT_4_Pin) )
 8002a12:	2140      	movs	r1, #64	@ 0x40
 8002a14:	480a      	ldr	r0, [pc, #40]	@ (8002a40 <Check_Faults+0x6c>)
 8002a16:	f004 f953 	bl	8006cc0 <HAL_GPIO_ReadPin>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d009      	beq.n	8002a34 <Check_Faults+0x60>
 8002a20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a24:	4807      	ldr	r0, [pc, #28]	@ (8002a44 <Check_Faults+0x70>)
 8002a26:	f004 f94b 	bl	8006cc0 <HAL_GPIO_ReadPin>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <Check_Faults+0x60>
		return 0; // if all pins is 1 then all is ready, there is not faults then return 0
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <Check_Faults+0x62>

	return 1;
 8002a34:	2301      	movs	r3, #1
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	48001000 	.word	0x48001000
 8002a40:	48000c00 	.word	0x48000c00
 8002a44:	48000800 	.word	0x48000800

08002a48 <Check_Ready>:

uint8_t Check_Ready()
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
	// Ready pins are from gate driver and they are active pull up
	// 4 ready pins from 4 gate drivers
	if(HAL_GPIO_ReadPin(READY_1_GPIO_Port, READY_1_Pin) && HAL_GPIO_ReadPin(READY_2_GPIO_Port, READY_2_Pin)
 8002a4c:	2110      	movs	r1, #16
 8002a4e:	4811      	ldr	r0, [pc, #68]	@ (8002a94 <Check_Ready+0x4c>)
 8002a50:	f004 f936 	bl	8006cc0 <HAL_GPIO_ReadPin>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d019      	beq.n	8002a8e <Check_Ready+0x46>
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	480e      	ldr	r0, [pc, #56]	@ (8002a98 <Check_Ready+0x50>)
 8002a5e:	f004 f92f 	bl	8006cc0 <HAL_GPIO_ReadPin>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d012      	beq.n	8002a8e <Check_Ready+0x46>
			&& HAL_GPIO_ReadPin(READY_3_GPIO_Port, READY_3_Pin) && HAL_GPIO_ReadPin(READY_4_GPIO_Port, READY_4_Pin) )
 8002a68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a6c:	480b      	ldr	r0, [pc, #44]	@ (8002a9c <Check_Ready+0x54>)
 8002a6e:	f004 f927 	bl	8006cc0 <HAL_GPIO_ReadPin>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <Check_Ready+0x46>
 8002a78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a80:	f004 f91e 	bl	8006cc0 <HAL_GPIO_ReadPin>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <Check_Ready+0x46>
			return 1; // return 1 when is gate drivers ready
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <Check_Ready+0x48>

		return 0;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	48000c00 	.word	0x48000c00
 8002a98:	48000400 	.word	0x48000400
 8002a9c:	48001400 	.word	0x48001400

08002aa0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	// SOFT start_program RAMP REALISATION
	//  Ts 20khz
	if(htim->Instance == TIM15)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a76      	ldr	r2, [pc, #472]	@ (8002c88 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	f040 80be 	bne.w	8002c30 <HAL_TIM_PeriodElapsedCallback+0x190>
	{
		sythick1 =  HAL_GetTick();
 8002ab4:	f001 fc54 	bl	8004360 <HAL_GetTick>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a74      	ldr	r2, [pc, #464]	@ (8002c8c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002abc:	6013      	str	r3, [r2, #0]
		if(currentState == STATE_REGULATION )
 8002abe:	4b74      	ldr	r3, [pc, #464]	@ (8002c90 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	f040 80a9 	bne.w	8002c1a <HAL_TIM_PeriodElapsedCallback+0x17a>
		{
		//current_sensor1_vref = adc3_dma_buffer[0]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[0], pcb_temp)/4096)*3.3;
		//current_sensor2_vref = adc3_dma_buffer[1]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[1], pcb_temp)/4096)*3.3;

		input_voltage = (int)((((adc3_dma_buffer[2])*3300)/4096-200)*18.81);//[mV]		((Low_pass_filter(adc3_dma_buffer[2], input_voltage)/4096)*3.3-0.2)*27.1;
 8002ac8:	4b72      	ldr	r3, [pc, #456]	@ (8002c94 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002aca:	889b      	ldrh	r3, [r3, #4]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002ad4:	fb02 f303 	mul.w	r3, r2, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	da01      	bge.n	8002ae0 <HAL_TIM_PeriodElapsedCallback+0x40>
 8002adc:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002ae0:	131b      	asrs	r3, r3, #12
 8002ae2:	3bc8      	subs	r3, #200	@ 0xc8
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fd45 	bl	8000574 <__aeabi_i2d>
 8002aea:	a363      	add	r3, pc, #396	@ (adr r3, 8002c78 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af0:	f7fd fdaa 	bl	8000648 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4610      	mov	r0, r2
 8002afa:	4619      	mov	r1, r3
 8002afc:	f7fe f854 	bl	8000ba8 <__aeabi_d2iz>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b64      	ldr	r3, [pc, #400]	@ (8002c98 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002b06:	601a      	str	r2, [r3, #0]
		output_voltage = (int)((((adc4_dma_buffer[1])*3300)/4096-200)*18.81);//[mV] 		((Low_pass_filter(adc4_dma_buffer, output_voltage)/4096)*3.3-0.2)*27.1;
 8002b08:	4b64      	ldr	r3, [pc, #400]	@ (8002c9c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002b0a:	885b      	ldrh	r3, [r3, #2]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002b14:	fb02 f303 	mul.w	r3, r2, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	da01      	bge.n	8002b20 <HAL_TIM_PeriodElapsedCallback+0x80>
 8002b1c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002b20:	131b      	asrs	r3, r3, #12
 8002b22:	3bc8      	subs	r3, #200	@ 0xc8
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fd fd25 	bl	8000574 <__aeabi_i2d>
 8002b2a:	a353      	add	r3, pc, #332	@ (adr r3, 8002c78 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b30:	f7fd fd8a 	bl	8000648 <__aeabi_dmul>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f7fe f834 	bl	8000ba8 <__aeabi_d2iz>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b56      	ldr	r3, [pc, #344]	@ (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002b46:	601a      	str	r2, [r3, #0]
		if(once == 0) Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, 7100000); // Set TIM8 CH1 o freq that is delay hc and send to fpga
		}

		imax2 = imax1 + imax2_sum; // imax2_sum signal from FPGA
		// imax1,2 each for branches to make 180 degree shift*/
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref+((int)imax1*0.025)); // imax1  1.5V is 0A;  1A is 20mV; 1 bit is 0.8mV; imax[mA]*0.02 [V/A]/0.8[mV] = Value for DAC
 8002b48:	4b56      	ldr	r3, [pc, #344]	@ (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fd11 	bl	8000574 <__aeabi_i2d>
 8002b52:	4604      	mov	r4, r0
 8002b54:	460d      	mov	r5, r1
 8002b56:	4b54      	ldr	r3, [pc, #336]	@ (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd fd0a 	bl	8000574 <__aeabi_i2d>
 8002b60:	a347      	add	r3, pc, #284	@ (adr r3, 8002c80 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f7fd fd6f 	bl	8000648 <__aeabi_dmul>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4620      	mov	r0, r4
 8002b70:	4629      	mov	r1, r5
 8002b72:	f7fd fbb3 	bl	80002dc <__adddf3>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f7fe f83b 	bl	8000bf8 <__aeabi_d2uiz>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2200      	movs	r2, #0
 8002b86:	2100      	movs	r1, #0
 8002b88:	4848      	ldr	r0, [pc, #288]	@ (8002cac <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002b8a:	f003 faab 	bl	80060e4 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, current_sensor2_vref+((int)imax2*0.025)); // imax2
 8002b8e:	4b48      	ldr	r3, [pc, #288]	@ (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fd fcee 	bl	8000574 <__aeabi_i2d>
 8002b98:	4604      	mov	r4, r0
 8002b9a:	460d      	mov	r5, r1
 8002b9c:	4b45      	ldr	r3, [pc, #276]	@ (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fd fce7 	bl	8000574 <__aeabi_i2d>
 8002ba6:	a336      	add	r3, pc, #216	@ (adr r3, 8002c80 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f7fd fd4c 	bl	8000648 <__aeabi_dmul>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	f7fd fb90 	bl	80002dc <__adddf3>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f7fe f818 	bl	8000bf8 <__aeabi_d2uiz>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2110      	movs	r1, #16
 8002bce:	4837      	ldr	r0, [pc, #220]	@ (8002cac <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002bd0:	f003 fa88 	bl	80060e4 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref-((int)imin*0.25)); // imin uzyto tutaj wzmacniacza 10x dla sygnalu z sensora pradu wiec ma wzmocnienie 200mv/A a nie 20mv/a
 8002bd4:	4b33      	ldr	r3, [pc, #204]	@ (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fccb 	bl	8000574 <__aeabi_i2d>
 8002bde:	4604      	mov	r4, r0
 8002be0:	460d      	mov	r5, r1
 8002be2:	4b35      	ldr	r3, [pc, #212]	@ (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fcc4 	bl	8000574 <__aeabi_i2d>
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	4b32      	ldr	r3, [pc, #200]	@ (8002cbc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002bf2:	f7fd fd29 	bl	8000648 <__aeabi_dmul>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	4629      	mov	r1, r5
 8002bfe:	f7fd fb6b 	bl	80002d8 <__aeabi_dsub>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f7fd fff5 	bl	8000bf8 <__aeabi_d2uiz>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2200      	movs	r2, #0
 8002c12:	2100      	movs	r1, #0
 8002c14:	482a      	ldr	r0, [pc, #168]	@ (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002c16:	f003 fa65 	bl	80060e4 <HAL_DAC_SetValue>
		//	HAL_Delay(10);
		//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
		//once = 1;
		//}

		sythick2 =  HAL_GetTick() - sythick1;
 8002c1a:	f001 fba1 	bl	8004360 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	4b1a      	ldr	r3, [pc, #104]	@ (8002c8c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	4a27      	ldr	r2, [pc, #156]	@ (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002c28:	6013      	str	r3, [r2, #0]
		flag_control = 1;
 8002c2a:	4b27      	ldr	r3, [pc, #156]	@ (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM6) // 5 sec period
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a25      	ldr	r2, [pc, #148]	@ (8002ccc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_PeriodElapsedCallback+0x19e>
		    {
		//if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
				//{
				FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
 8002c3a:	f000 f9b1 	bl	8002fa0 <FAN_Drive>
				//}
		    }


	if (htim->Instance == TIM7)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a23      	ldr	r2, [pc, #140]	@ (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d110      	bne.n	8002c6a <HAL_TIM_PeriodElapsedCallback+0x1ca>
	    {
	        // Turn off OCD pins of currents sensors to reset current sensor 1us

	        HAL_GPIO_TogglePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin);
 8002c48:	2102      	movs	r1, #2
 8002c4a:	4822      	ldr	r0, [pc, #136]	@ (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002c4c:	f004 f868 	bl	8006d20 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin);
 8002c50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c54:	4820      	ldr	r0, [pc, #128]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002c56:	f004 f863 	bl	8006d20 <HAL_GPIO_TogglePin>
	        HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2120      	movs	r1, #32
 8002c5e:	481d      	ldr	r0, [pc, #116]	@ (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002c60:	f004 f846 	bl	8006cf0 <HAL_GPIO_WritePin>
	        // Stop the timer
	        HAL_TIM_Base_Stop_IT(&htim7);
 8002c64:	481d      	ldr	r0, [pc, #116]	@ (8002cdc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002c66:	f006 ff1b 	bl	8009aa0 <HAL_TIM_Base_Stop_IT>
	    }


}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bdb0      	pop	{r4, r5, r7, pc}
 8002c72:	bf00      	nop
 8002c74:	f3af 8000 	nop.w
 8002c78:	28f5c28f 	.word	0x28f5c28f
 8002c7c:	4032cf5c 	.word	0x4032cf5c
 8002c80:	9999999a 	.word	0x9999999a
 8002c84:	3f999999 	.word	0x3f999999
 8002c88:	40014000 	.word	0x40014000
 8002c8c:	20000b74 	.word	0x20000b74
 8002c90:	20000b67 	.word	0x20000b67
 8002c94:	20000a58 	.word	0x20000a58
 8002c98:	20000a4c 	.word	0x20000a4c
 8002c9c:	20000a6c 	.word	0x20000a6c
 8002ca0:	20000a64 	.word	0x20000a64
 8002ca4:	20000a3c 	.word	0x20000a3c
 8002ca8:	20000a40 	.word	0x20000a40
 8002cac:	200006ac 	.word	0x200006ac
 8002cb0:	20000a3e 	.word	0x20000a3e
 8002cb4:	20000a44 	.word	0x20000a44
 8002cb8:	20000a48 	.word	0x20000a48
 8002cbc:	3fd00000 	.word	0x3fd00000
 8002cc0:	200006c0 	.word	0x200006c0
 8002cc4:	20000b78 	.word	0x20000b78
 8002cc8:	20000b7c 	.word	0x20000b7c
 8002ccc:	40001000 	.word	0x40001000
 8002cd0:	40001400 	.word	0x40001400
 8002cd4:	48001000 	.word	0x48001000
 8002cd8:	48001400 	.word	0x48001400
 8002cdc:	20000878 	.word	0x20000878

08002ce0 <RAMP>:

void RAMP()
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
	// RAMP Voltage to soft-start
				if((vref-output_voltage)>100)
 8002ce4:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <RAMP+0x5c>)
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <RAMP+0x60>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b64      	cmp	r3, #100	@ 0x64
 8002cf2:	d913      	bls.n	8002d1c <RAMP+0x3c>
				{
					Vramp = output_voltage+4000000*Ts; // 200mV step per loop period
 8002cf4:	4b12      	ldr	r3, [pc, #72]	@ (8002d40 <RAMP+0x60>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fc2b 	bl	8000554 <__aeabi_ui2d>
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	4b10      	ldr	r3, [pc, #64]	@ (8002d44 <RAMP+0x64>)
 8002d04:	f7fd faea 	bl	80002dc <__adddf3>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f7fd ff72 	bl	8000bf8 <__aeabi_d2uiz>
 8002d14:	4603      	mov	r3, r0
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	4b0b      	ldr	r3, [pc, #44]	@ (8002d48 <RAMP+0x68>)
 8002d1a:	801a      	strh	r2, [r3, #0]
				}
				//else if((vref-output_voltage)<-100)
				//{
				//	Vramp = output_voltage-4000000*Ts;
				//}
				if(Vramp>=48000)
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d48 <RAMP+0x68>)
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d906      	bls.n	8002d36 <RAMP+0x56>
				{
					Vramp = 48000; // 48V
 8002d28:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <RAMP+0x68>)
 8002d2a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002d2e:	801a      	strh	r2, [r3, #0]
					RAMP_FINISHED = 1;
 8002d30:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <RAMP+0x6c>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
					//currentState = STATE_REGULATION;
				}


}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	20000a64 	.word	0x20000a64
 8002d44:	40690000 	.word	0x40690000
 8002d48:	20000a68 	.word	0x20000a68
 8002d4c:	20000a70 	.word	0x20000a70

08002d50 <regulatorPI>:

void regulatorPI(uint32_t *out, uint32_t *integral, float in, float in_zad, float limp, float limn, float kp, float ti, float Ts1)
{
 8002d50:	b5b0      	push	{r4, r5, r7, lr}
 8002d52:	b08c      	sub	sp, #48	@ 0x30
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6278      	str	r0, [r7, #36]	@ 0x24
 8002d58:	6239      	str	r1, [r7, #32]
 8002d5a:	ed87 0a07 	vstr	s0, [r7, #28]
 8002d5e:	edc7 0a06 	vstr	s1, [r7, #24]
 8002d62:	ed87 1a05 	vstr	s2, [r7, #20]
 8002d66:	edc7 1a04 	vstr	s3, [r7, #16]
 8002d6a:	ed87 2a03 	vstr	s4, [r7, #12]
 8002d6e:	edc7 2a02 	vstr	s5, [r7, #8]
 8002d72:	ed87 3a01 	vstr	s6, [r7, #4]
	// Tustin transfrom of PI regulator s -> 2/T * (Z-1)/(Z+1)
    float delta;
    uint32_t prev_out;
    delta = in_zad - in; // error
 8002d76:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d82:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    *integral = *integral + (delta + prev_delta) * (kp / ti) * Ts1 * 0.5 ; // I part
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd fbe2 	bl	8000554 <__aeabi_ui2d>
 8002d90:	4604      	mov	r4, r0
 8002d92:	460d      	mov	r5, r1
 8002d94:	4b5a      	ldr	r3, [pc, #360]	@ (8002f00 <regulatorPI+0x1b0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	ee07 3a90 	vmov	s15, r3
 8002d9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002da0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002da4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002da8:	ed97 6a03 	vldr	s12, [r7, #12]
 8002dac:	edd7 6a02 	vldr	s13, [r7, #8]
 8002db0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002db4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002db8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc0:	ee17 0a90 	vmov	r0, s15
 8002dc4:	f7fd fbe8 	bl	8000598 <__aeabi_f2d>
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	4b4d      	ldr	r3, [pc, #308]	@ (8002f04 <regulatorPI+0x1b4>)
 8002dce:	f7fd fc3b 	bl	8000648 <__aeabi_dmul>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	4629      	mov	r1, r5
 8002dda:	f7fd fa7f 	bl	80002dc <__adddf3>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	f7fd ff07 	bl	8000bf8 <__aeabi_d2uiz>
 8002dea:	4602      	mov	r2, r0
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	601a      	str	r2, [r3, #0]
    prev_delta = delta;
 8002df0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002df8:	ee17 2a90 	vmov	r2, s15
 8002dfc:	4b40      	ldr	r3, [pc, #256]	@ (8002f00 <regulatorPI+0x1b0>)
 8002dfe:	601a      	str	r2, [r3, #0]
    prev_out = *out;
 8002e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (*integral >= limp) // limit peak positive
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e12:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1e:	d807      	bhi.n	8002e30 <regulatorPI+0xe0>
    {
        *integral = limp;
 8002e20:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e28:	ee17 2a90 	vmov	r2, s15
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	601a      	str	r2, [r3, #0]
    }
    if (*integral <= limn)// limit peak negative
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	ee07 3a90 	vmov	s15, r3
 8002e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e48:	db07      	blt.n	8002e5a <regulatorPI+0x10a>
    {
        *integral = limn;
 8002e4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e52:	ee17 2a90 	vmov	r2, s15
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	601a      	str	r2, [r3, #0]
    }
    *out = (delta * kp + *integral); // Sum of P and I
 8002e5a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002e5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e7a:	ee17 2a90 	vmov	r2, s15
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	601a      	str	r2, [r3, #0]
    if (*out >= limp) // limit peak positive
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	ee07 3a90 	vmov	s15, r3
 8002e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e8e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9a:	d807      	bhi.n	8002eac <regulatorPI+0x15c>
    {
        *out = limp;
 8002e9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ea4:	ee17 2a90 	vmov	r2, s15
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	601a      	str	r2, [r3, #0]
    }
    if (*out <= limn)// limit peak negative
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	ee07 3a90 	vmov	s15, r3
 8002eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ebc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec4:	db07      	blt.n	8002ed6 <regulatorPI+0x186>
    {
        *out = limn;
 8002ec6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ece:	ee17 2a90 	vmov	r2, s15
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	601a      	str	r2, [r3, #0]
    }
    if((*out - prev_out) < 50 || (*out - prev_out) > -50) // histeresis to probably prevent jitter
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b31      	cmp	r3, #49	@ 0x31
 8002ee0:	d906      	bls.n	8002ef0 <regulatorPI+0x1a0>
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f113 0f32 	cmn.w	r3, #50	@ 0x32
 8002eee:	d902      	bls.n	8002ef6 <regulatorPI+0x1a6>
    {
    	*out = prev_out;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ef4:	601a      	str	r2, [r3, #0]
    }
}
 8002ef6:	bf00      	nop
 8002ef8:	3730      	adds	r7, #48	@ 0x30
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bdb0      	pop	{r4, r5, r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000b60 	.word	0x20000b60
 8002f04:	3fe00000 	.word	0x3fe00000

08002f08 <Low_pass_filter>:

	    return y[0];
}*/

float Low_pass_filter(float new_sample, float old_sample, float old_sample_n1, float old_passed)
{
 8002f08:	b5b0      	push	{r4, r5, r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002f12:	edc7 0a02 	vstr	s1, [r7, #8]
 8002f16:	ed87 1a01 	vstr	s2, [r7, #4]
 8002f1a:	edc7 1a00 	vstr	s3, [r7]
	float Low_passed_sample = 0;
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
	//Low_passed_sample = (float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;

	Low_passed_sample = (1-ALPHA)*0.5*(new_sample+old_sample_n1+ALPHA*old_passed);//(float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;
 8002f24:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f28:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f30:	ee17 0a90 	vmov	r0, s15
 8002f34:	f7fd fb30 	bl	8000598 <__aeabi_f2d>
 8002f38:	4604      	mov	r4, r0
 8002f3a:	460d      	mov	r5, r1
 8002f3c:	6838      	ldr	r0, [r7, #0]
 8002f3e:	f7fd fb2b 	bl	8000598 <__aeabi_f2d>
 8002f42:	a313      	add	r3, pc, #76	@ (adr r3, 8002f90 <Low_pass_filter+0x88>)
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	f7fd fb7e 	bl	8000648 <__aeabi_dmul>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4620      	mov	r0, r4
 8002f52:	4629      	mov	r1, r5
 8002f54:	f7fd f9c2 	bl	80002dc <__adddf3>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	a30d      	add	r3, pc, #52	@ (adr r3, 8002f98 <Low_pass_filter+0x90>)
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	f7fd fb6f 	bl	8000648 <__aeabi_dmul>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4610      	mov	r0, r2
 8002f70:	4619      	mov	r1, r3
 8002f72:	f7fd fe61 	bl	8000c38 <__aeabi_d2f>
 8002f76:	4603      	mov	r3, r0
 8002f78:	617b      	str	r3, [r7, #20]
	return Low_passed_sample;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	ee07 3a90 	vmov	s15, r3

}
 8002f80:	eeb0 0a67 	vmov.f32	s0, s15
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bdb0      	pop	{r4, r5, r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	f3af 8000 	nop.w
 8002f90:	9999999a 	.word	0x9999999a
 8002f94:	3fe99999 	.word	0x3fe99999
 8002f98:	99999998 	.word	0x99999998
 8002f9c:	3fb99999 	.word	0x3fb99999

08002fa0 <FAN_Drive>:
void FAN_Drive()
{ //@ToDo poprawic ogarnac zeby a intach bylo
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
		pcb_temp = (adc3_dma_buffer[3]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[3], pcb_temp)/4096)*3.3;
 8002fa6:	4b44      	ldr	r3, [pc, #272]	@ (80030b8 <FAN_Drive+0x118>)
 8002fa8:	88db      	ldrh	r3, [r3, #6]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	da01      	bge.n	8002fbe <FAN_Drive+0x1e>
 8002fba:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002fbe:	131b      	asrs	r3, r3, #12
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80030bc <FAN_Drive+0x11c>)
 8002fc4:	601a      	str	r2, [r3, #0]
		heat_sink_temp = (adc3_dma_buffer[4]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[4], heat_sink_temp)/4096)*3.3;
 8002fc6:	4b3c      	ldr	r3, [pc, #240]	@ (80030b8 <FAN_Drive+0x118>)
 8002fc8:	891b      	ldrh	r3, [r3, #8]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	da01      	bge.n	8002fde <FAN_Drive+0x3e>
 8002fda:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002fde:	131b      	asrs	r3, r3, #12
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b37      	ldr	r3, [pc, #220]	@ (80030c0 <FAN_Drive+0x120>)
 8002fe4:	601a      	str	r2, [r3, #0]

		uint32_t temperature = 20;
 8002fe6:	2314      	movs	r3, #20
 8002fe8:	603b      	str	r3, [r7, #0]

		pcb_temp = (pcb_temp-400)/20;
 8002fea:	4b34      	ldr	r3, [pc, #208]	@ (80030bc <FAN_Drive+0x11c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ff2:	4a34      	ldr	r2, [pc, #208]	@ (80030c4 <FAN_Drive+0x124>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	4a30      	ldr	r2, [pc, #192]	@ (80030bc <FAN_Drive+0x11c>)
 8002ffc:	6013      	str	r3, [r2, #0]
		heat_sink_temp = (heat_sink_temp-500)/10;
 8002ffe:	4b30      	ldr	r3, [pc, #192]	@ (80030c0 <FAN_Drive+0x120>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003006:	4a2f      	ldr	r2, [pc, #188]	@ (80030c4 <FAN_Drive+0x124>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	08db      	lsrs	r3, r3, #3
 800300e:	4a2c      	ldr	r2, [pc, #176]	@ (80030c0 <FAN_Drive+0x120>)
 8003010:	6013      	str	r3, [r2, #0]
		// Choose the higher of the two temperatures
		temperature = (pcb_temp > heat_sink_temp) ? pcb_temp : heat_sink_temp;
 8003012:	4b2b      	ldr	r3, [pc, #172]	@ (80030c0 <FAN_Drive+0x120>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4b29      	ldr	r3, [pc, #164]	@ (80030bc <FAN_Drive+0x11c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4293      	cmp	r3, r2
 800301c:	bf38      	it	cc
 800301e:	4613      	movcc	r3, r2
 8003020:	603b      	str	r3, [r7, #0]
		// Apply a non-linear (exponential) scaling for the fan speed
		// This scales the temperature to a value between 0 and 1, then applies an exponential curve
		uint32_t normalized_temp = ((temperature - 20) *100)/ 80;  // Normalizing between 0 (20°C) and 1000 (100°C)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2264      	movs	r2, #100	@ 0x64
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800302e:	4a25      	ldr	r2, [pc, #148]	@ (80030c4 <FAN_Drive+0x124>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	099b      	lsrs	r3, r3, #6
 8003036:	607b      	str	r3, [r7, #4]
		if (normalized_temp > 100) normalized_temp = 100;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b64      	cmp	r3, #100	@ 0x64
 800303c:	d901      	bls.n	8003042 <FAN_Drive+0xa2>
 800303e:	2364      	movs	r3, #100	@ 0x64
 8003040:	607b      	str	r3, [r7, #4]
		if (normalized_temp < 0) normalized_temp = 0;

		duty_cycle = 20 + ((int)(pow(normalized_temp, 3) * 79))/1000000;  // Cubic curve for fan speed control
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd fa86 	bl	8000554 <__aeabi_ui2d>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 80030a8 <FAN_Drive+0x108>
 8003050:	ec43 2b10 	vmov	d0, r2, r3
 8003054:	f012 fb84 	bl	8015760 <pow>
 8003058:	ec51 0b10 	vmov	r0, r1, d0
 800305c:	a314      	add	r3, pc, #80	@ (adr r3, 80030b0 <FAN_Drive+0x110>)
 800305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003062:	f7fd faf1 	bl	8000648 <__aeabi_dmul>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	f7fd fd9b 	bl	8000ba8 <__aeabi_d2iz>
 8003072:	4603      	mov	r3, r0
 8003074:	4a14      	ldr	r2, [pc, #80]	@ (80030c8 <FAN_Drive+0x128>)
 8003076:	fb82 1203 	smull	r1, r2, r2, r3
 800307a:	1492      	asrs	r2, r2, #18
 800307c:	17db      	asrs	r3, r3, #31
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	3314      	adds	r3, #20
 8003082:	4a12      	ldr	r2, [pc, #72]	@ (80030cc <FAN_Drive+0x12c>)
 8003084:	6013      	str	r3, [r2, #0]

		// Enforce minimum and maximum duty cycles
		if (temperature < 20) {
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b13      	cmp	r3, #19
 800308a:	d803      	bhi.n	8003094 <FAN_Drive+0xf4>
		        duty_cycle = 20;
 800308c:	4b0f      	ldr	r3, [pc, #60]	@ (80030cc <FAN_Drive+0x12c>)
 800308e:	2214      	movs	r2, #20
 8003090:	601a      	str	r2, [r3, #0]
		    	duty_cycle = 99;
		}

		//Set_PWM_DutyCycle(duty_cycle);

}
 8003092:	e005      	b.n	80030a0 <FAN_Drive+0x100>
		} else if (temperature > 100) {
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b64      	cmp	r3, #100	@ 0x64
 8003098:	d902      	bls.n	80030a0 <FAN_Drive+0x100>
		    	duty_cycle = 99;
 800309a:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <FAN_Drive+0x12c>)
 800309c:	2263      	movs	r2, #99	@ 0x63
 800309e:	601a      	str	r2, [r3, #0]
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	00000000 	.word	0x00000000
 80030ac:	40080000 	.word	0x40080000
 80030b0:	00000000 	.word	0x00000000
 80030b4:	4053c000 	.word	0x4053c000
 80030b8:	20000a58 	.word	0x20000a58
 80030bc:	20000a50 	.word	0x20000a50
 80030c0:	20000a54 	.word	0x20000a54
 80030c4:	cccccccd 	.word	0xcccccccd
 80030c8:	431bde83 	.word	0x431bde83
 80030cc:	2000001c 	.word	0x2000001c

080030d0 <SendUSBMessage>:



void SendUSBMessage(const char* message) {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fd f8f1 	bl	80002c0 <strlen>
 80030de:	4603      	mov	r3, r0
 80030e0:	81fb      	strh	r3, [r7, #14]
    if (len > 127) len = 127;  // Limit to buffer size
 80030e2:	89fb      	ldrh	r3, [r7, #14]
 80030e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80030e6:	d901      	bls.n	80030ec <SendUSBMessage+0x1c>
 80030e8:	237f      	movs	r3, #127	@ 0x7f
 80030ea:	81fb      	strh	r3, [r7, #14]
    memcpy(USB_TX_Buffer, message, len);
 80030ec:	89fb      	ldrh	r3, [r7, #14]
 80030ee:	461a      	mov	r2, r3
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	480b      	ldr	r0, [pc, #44]	@ (8003120 <SendUSBMessage+0x50>)
 80030f4:	f00e fbb9 	bl	801186a <memcpy>
    USB_TX_Buffer[len] = '\0';  // Ensure null-terminated string
 80030f8:	89fb      	ldrh	r3, [r7, #14]
 80030fa:	4a09      	ldr	r2, [pc, #36]	@ (8003120 <SendUSBMessage+0x50>)
 80030fc:	2100      	movs	r1, #0
 80030fe:	54d1      	strb	r1, [r2, r3]
            break;
        }
      // HAL_Delay(10);  // Small delay before retrying
    } while (retry_count-- > 0);*/
    do {
            result = CDC_Transmit_FS((uint8_t*)message, len);
 8003100:	89fb      	ldrh	r3, [r7, #14]
 8003102:	4619      	mov	r1, r3
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f00c ff15 	bl	800ff34 <CDC_Transmit_FS>
 800310a:	4603      	mov	r3, r0
 800310c:	737b      	strb	r3, [r7, #13]
        } while (result == USBD_BUSY); // Retry while USB is busy
 800310e:	7b7b      	ldrb	r3, [r7, #13]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d0f5      	beq.n	8003100 <SendUSBMessage+0x30>


}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000ad8 	.word	0x20000ad8

08003124 <ParseUSBCommand>:

void ParseUSBCommand(void) {
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
	 if (dataReceivedFlag) {
 8003128:	4ba6      	ldr	r3, [pc, #664]	@ (80033c4 <ParseUSBCommand+0x2a0>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8146 	beq.w	80033c0 <ParseUSBCommand+0x29c>
	        if (strncmp((char*)USB_RX_Buffer, "SET_KP", 6) == 0) {
 8003134:	2206      	movs	r2, #6
 8003136:	49a4      	ldr	r1, [pc, #656]	@ (80033c8 <ParseUSBCommand+0x2a4>)
 8003138:	48a4      	ldr	r0, [pc, #656]	@ (80033cc <ParseUSBCommand+0x2a8>)
 800313a:	f00e fb0c 	bl	8011756 <strncmp>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d108      	bne.n	8003156 <ParseUSBCommand+0x32>
	            sscanf((char*)USB_RX_Buffer, "SET_KP %f", &Kp);
 8003144:	4aa2      	ldr	r2, [pc, #648]	@ (80033d0 <ParseUSBCommand+0x2ac>)
 8003146:	49a3      	ldr	r1, [pc, #652]	@ (80033d4 <ParseUSBCommand+0x2b0>)
 8003148:	48a0      	ldr	r0, [pc, #640]	@ (80033cc <ParseUSBCommand+0x2a8>)
 800314a:	f00e fa8d 	bl	8011668 <siscanf>
	            SendUSBMessage("KP Updated\n");
 800314e:	48a2      	ldr	r0, [pc, #648]	@ (80033d8 <ParseUSBCommand+0x2b4>)
 8003150:	f7ff ffbe 	bl	80030d0 <SendUSBMessage>
 8003154:	e12c      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_Ti", 6) == 0) {
 8003156:	2206      	movs	r2, #6
 8003158:	49a0      	ldr	r1, [pc, #640]	@ (80033dc <ParseUSBCommand+0x2b8>)
 800315a:	489c      	ldr	r0, [pc, #624]	@ (80033cc <ParseUSBCommand+0x2a8>)
 800315c:	f00e fafb 	bl	8011756 <strncmp>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d108      	bne.n	8003178 <ParseUSBCommand+0x54>
	            sscanf((char*)USB_RX_Buffer, "SET_Ti %f", &Ti);
 8003166:	4a9e      	ldr	r2, [pc, #632]	@ (80033e0 <ParseUSBCommand+0x2bc>)
 8003168:	499e      	ldr	r1, [pc, #632]	@ (80033e4 <ParseUSBCommand+0x2c0>)
 800316a:	4898      	ldr	r0, [pc, #608]	@ (80033cc <ParseUSBCommand+0x2a8>)
 800316c:	f00e fa7c 	bl	8011668 <siscanf>
	            SendUSBMessage("Ti Updated\n");
 8003170:	489d      	ldr	r0, [pc, #628]	@ (80033e8 <ParseUSBCommand+0x2c4>)
 8003172:	f7ff ffad 	bl	80030d0 <SendUSBMessage>
 8003176:	e11b      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_VREF", 8) == 0) {
 8003178:	2208      	movs	r2, #8
 800317a:	499c      	ldr	r1, [pc, #624]	@ (80033ec <ParseUSBCommand+0x2c8>)
 800317c:	4893      	ldr	r0, [pc, #588]	@ (80033cc <ParseUSBCommand+0x2a8>)
 800317e:	f00e faea 	bl	8011756 <strncmp>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d108      	bne.n	800319a <ParseUSBCommand+0x76>
	            sscanf((char*)USB_RX_Buffer, "SET_VREF %hu", &vref);
 8003188:	4a99      	ldr	r2, [pc, #612]	@ (80033f0 <ParseUSBCommand+0x2cc>)
 800318a:	499a      	ldr	r1, [pc, #616]	@ (80033f4 <ParseUSBCommand+0x2d0>)
 800318c:	488f      	ldr	r0, [pc, #572]	@ (80033cc <ParseUSBCommand+0x2a8>)
 800318e:	f00e fa6b 	bl	8011668 <siscanf>
	            SendUSBMessage("vref Updated\n");
 8003192:	4899      	ldr	r0, [pc, #612]	@ (80033f8 <ParseUSBCommand+0x2d4>)
 8003194:	f7ff ff9c 	bl	80030d0 <SendUSBMessage>
 8003198:	e10a      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS1_VREF", 12) == 0) {
 800319a:	220c      	movs	r2, #12
 800319c:	4997      	ldr	r1, [pc, #604]	@ (80033fc <ParseUSBCommand+0x2d8>)
 800319e:	488b      	ldr	r0, [pc, #556]	@ (80033cc <ParseUSBCommand+0x2a8>)
 80031a0:	f00e fad9 	bl	8011756 <strncmp>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d108      	bne.n	80031bc <ParseUSBCommand+0x98>
	            sscanf((char*)USB_RX_Buffer, "SET_CS1_VREF %d", &current_sensor1_vref);
 80031aa:	4a95      	ldr	r2, [pc, #596]	@ (8003400 <ParseUSBCommand+0x2dc>)
 80031ac:	4995      	ldr	r1, [pc, #596]	@ (8003404 <ParseUSBCommand+0x2e0>)
 80031ae:	4887      	ldr	r0, [pc, #540]	@ (80033cc <ParseUSBCommand+0x2a8>)
 80031b0:	f00e fa5a 	bl	8011668 <siscanf>
	            SendUSBMessage("current_sensor1_vref Updated\n");
 80031b4:	4894      	ldr	r0, [pc, #592]	@ (8003408 <ParseUSBCommand+0x2e4>)
 80031b6:	f7ff ff8b 	bl	80030d0 <SendUSBMessage>
 80031ba:	e0f9      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS2_VREF", 12) == 0) {
 80031bc:	220c      	movs	r2, #12
 80031be:	4993      	ldr	r1, [pc, #588]	@ (800340c <ParseUSBCommand+0x2e8>)
 80031c0:	4882      	ldr	r0, [pc, #520]	@ (80033cc <ParseUSBCommand+0x2a8>)
 80031c2:	f00e fac8 	bl	8011756 <strncmp>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d108      	bne.n	80031de <ParseUSBCommand+0xba>
	            sscanf((char*)USB_RX_Buffer, "SET_CS2_VREF %d", &current_sensor2_vref);
 80031cc:	4a90      	ldr	r2, [pc, #576]	@ (8003410 <ParseUSBCommand+0x2ec>)
 80031ce:	4991      	ldr	r1, [pc, #580]	@ (8003414 <ParseUSBCommand+0x2f0>)
 80031d0:	487e      	ldr	r0, [pc, #504]	@ (80033cc <ParseUSBCommand+0x2a8>)
 80031d2:	f00e fa49 	bl	8011668 <siscanf>
	            SendUSBMessage("current_sensor2_vref Updated\n");
 80031d6:	4890      	ldr	r0, [pc, #576]	@ (8003418 <ParseUSBCommand+0x2f4>)
 80031d8:	f7ff ff7a 	bl	80030d0 <SendUSBMessage>
 80031dc:	e0e8      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_IMAX2_SUM", 13) == 0) {
 80031de:	220d      	movs	r2, #13
 80031e0:	498e      	ldr	r1, [pc, #568]	@ (800341c <ParseUSBCommand+0x2f8>)
 80031e2:	487a      	ldr	r0, [pc, #488]	@ (80033cc <ParseUSBCommand+0x2a8>)
 80031e4:	f00e fab7 	bl	8011756 <strncmp>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d108      	bne.n	8003200 <ParseUSBCommand+0xdc>
	            sscanf((char*)USB_RX_Buffer, "SET_IMAX2_SUM %d", &imax2_sum);
 80031ee:	4a8c      	ldr	r2, [pc, #560]	@ (8003420 <ParseUSBCommand+0x2fc>)
 80031f0:	498c      	ldr	r1, [pc, #560]	@ (8003424 <ParseUSBCommand+0x300>)
 80031f2:	4876      	ldr	r0, [pc, #472]	@ (80033cc <ParseUSBCommand+0x2a8>)
 80031f4:	f00e fa38 	bl	8011668 <siscanf>
	            SendUSBMessage("imax2_sum Updated\n");
 80031f8:	488b      	ldr	r0, [pc, #556]	@ (8003428 <ParseUSBCommand+0x304>)
 80031fa:	f7ff ff69 	bl	80030d0 <SendUSBMessage>
 80031fe:	e0d7      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_TR", 12) == 0) {
 8003200:	220c      	movs	r2, #12
 8003202:	498a      	ldr	r1, [pc, #552]	@ (800342c <ParseUSBCommand+0x308>)
 8003204:	4871      	ldr	r0, [pc, #452]	@ (80033cc <ParseUSBCommand+0x2a8>)
 8003206:	f00e faa6 	bl	8011756 <strncmp>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d108      	bne.n	8003222 <ParseUSBCommand+0xfe>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_TR %f", &delay_tr);
 8003210:	4a87      	ldr	r2, [pc, #540]	@ (8003430 <ParseUSBCommand+0x30c>)
 8003212:	4988      	ldr	r1, [pc, #544]	@ (8003434 <ParseUSBCommand+0x310>)
 8003214:	486d      	ldr	r0, [pc, #436]	@ (80033cc <ParseUSBCommand+0x2a8>)
 8003216:	f00e fa27 	bl	8011668 <siscanf>
	            SendUSBMessage("delay_tr Updated\n");
 800321a:	4887      	ldr	r0, [pc, #540]	@ (8003438 <ParseUSBCommand+0x314>)
 800321c:	f7ff ff58 	bl	80030d0 <SendUSBMessage>
 8003220:	e0c6      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_HC", 12) == 0) {
 8003222:	220c      	movs	r2, #12
 8003224:	4985      	ldr	r1, [pc, #532]	@ (800343c <ParseUSBCommand+0x318>)
 8003226:	4869      	ldr	r0, [pc, #420]	@ (80033cc <ParseUSBCommand+0x2a8>)
 8003228:	f00e fa95 	bl	8011756 <strncmp>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d108      	bne.n	8003244 <ParseUSBCommand+0x120>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_HC %f", &delay_hc);
 8003232:	4a83      	ldr	r2, [pc, #524]	@ (8003440 <ParseUSBCommand+0x31c>)
 8003234:	4983      	ldr	r1, [pc, #524]	@ (8003444 <ParseUSBCommand+0x320>)
 8003236:	4865      	ldr	r0, [pc, #404]	@ (80033cc <ParseUSBCommand+0x2a8>)
 8003238:	f00e fa16 	bl	8011668 <siscanf>
	            SendUSBMessage("delay_hc Updated\n");
 800323c:	4882      	ldr	r0, [pc, #520]	@ (8003448 <ParseUSBCommand+0x324>)
 800323e:	f7ff ff47 	bl	80030d0 <SendUSBMessage>
 8003242:	e0b5      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_KP", 6) == 0) {
 8003244:	2206      	movs	r2, #6
 8003246:	4981      	ldr	r1, [pc, #516]	@ (800344c <ParseUSBCommand+0x328>)
 8003248:	4860      	ldr	r0, [pc, #384]	@ (80033cc <ParseUSBCommand+0x2a8>)
 800324a:	f00e fa84 	bl	8011756 <strncmp>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10e      	bne.n	8003272 <ParseUSBCommand+0x14e>
	            sprintf((char*)USB_TX_Buffer, "KP = %f\n", Kp);
 8003254:	4b5e      	ldr	r3, [pc, #376]	@ (80033d0 <ParseUSBCommand+0x2ac>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd f99d 	bl	8000598 <__aeabi_f2d>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	497b      	ldr	r1, [pc, #492]	@ (8003450 <ParseUSBCommand+0x32c>)
 8003264:	487b      	ldr	r0, [pc, #492]	@ (8003454 <ParseUSBCommand+0x330>)
 8003266:	f00e f9df 	bl	8011628 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800326a:	487a      	ldr	r0, [pc, #488]	@ (8003454 <ParseUSBCommand+0x330>)
 800326c:	f7ff ff30 	bl	80030d0 <SendUSBMessage>
 8003270:	e09e      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_Ti", 6) == 0) {
 8003272:	2206      	movs	r2, #6
 8003274:	4978      	ldr	r1, [pc, #480]	@ (8003458 <ParseUSBCommand+0x334>)
 8003276:	4855      	ldr	r0, [pc, #340]	@ (80033cc <ParseUSBCommand+0x2a8>)
 8003278:	f00e fa6d 	bl	8011756 <strncmp>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10e      	bne.n	80032a0 <ParseUSBCommand+0x17c>
	            sprintf((char*)USB_TX_Buffer, "Ti = %f\n", Ti);
 8003282:	4b57      	ldr	r3, [pc, #348]	@ (80033e0 <ParseUSBCommand+0x2bc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd f986 	bl	8000598 <__aeabi_f2d>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4972      	ldr	r1, [pc, #456]	@ (800345c <ParseUSBCommand+0x338>)
 8003292:	4870      	ldr	r0, [pc, #448]	@ (8003454 <ParseUSBCommand+0x330>)
 8003294:	f00e f9c8 	bl	8011628 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003298:	486e      	ldr	r0, [pc, #440]	@ (8003454 <ParseUSBCommand+0x330>)
 800329a:	f7ff ff19 	bl	80030d0 <SendUSBMessage>
 800329e:	e087      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_VREF", 8) == 0) {
 80032a0:	2208      	movs	r2, #8
 80032a2:	496f      	ldr	r1, [pc, #444]	@ (8003460 <ParseUSBCommand+0x33c>)
 80032a4:	4849      	ldr	r0, [pc, #292]	@ (80033cc <ParseUSBCommand+0x2a8>)
 80032a6:	f00e fa56 	bl	8011756 <strncmp>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <ParseUSBCommand+0x1a2>
	            sprintf((char*)USB_TX_Buffer, "vref = %hu\n", vref);
 80032b0:	4b4f      	ldr	r3, [pc, #316]	@ (80033f0 <ParseUSBCommand+0x2cc>)
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	496b      	ldr	r1, [pc, #428]	@ (8003464 <ParseUSBCommand+0x340>)
 80032b8:	4866      	ldr	r0, [pc, #408]	@ (8003454 <ParseUSBCommand+0x330>)
 80032ba:	f00e f9b5 	bl	8011628 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80032be:	4865      	ldr	r0, [pc, #404]	@ (8003454 <ParseUSBCommand+0x330>)
 80032c0:	f7ff ff06 	bl	80030d0 <SendUSBMessage>
 80032c4:	e074      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS1_VREF", 12) == 0) {
 80032c6:	220c      	movs	r2, #12
 80032c8:	4967      	ldr	r1, [pc, #412]	@ (8003468 <ParseUSBCommand+0x344>)
 80032ca:	4840      	ldr	r0, [pc, #256]	@ (80033cc <ParseUSBCommand+0x2a8>)
 80032cc:	f00e fa43 	bl	8011756 <strncmp>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10a      	bne.n	80032ec <ParseUSBCommand+0x1c8>
	            sprintf((char*)USB_TX_Buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 80032d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003400 <ParseUSBCommand+0x2dc>)
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	4963      	ldr	r1, [pc, #396]	@ (800346c <ParseUSBCommand+0x348>)
 80032de:	485d      	ldr	r0, [pc, #372]	@ (8003454 <ParseUSBCommand+0x330>)
 80032e0:	f00e f9a2 	bl	8011628 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80032e4:	485b      	ldr	r0, [pc, #364]	@ (8003454 <ParseUSBCommand+0x330>)
 80032e6:	f7ff fef3 	bl	80030d0 <SendUSBMessage>
 80032ea:	e061      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS2_VREF", 12) == 0) {
 80032ec:	220c      	movs	r2, #12
 80032ee:	4960      	ldr	r1, [pc, #384]	@ (8003470 <ParseUSBCommand+0x34c>)
 80032f0:	4836      	ldr	r0, [pc, #216]	@ (80033cc <ParseUSBCommand+0x2a8>)
 80032f2:	f00e fa30 	bl	8011756 <strncmp>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <ParseUSBCommand+0x1ee>
	            sprintf((char*)USB_TX_Buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 80032fc:	4b44      	ldr	r3, [pc, #272]	@ (8003410 <ParseUSBCommand+0x2ec>)
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	495c      	ldr	r1, [pc, #368]	@ (8003474 <ParseUSBCommand+0x350>)
 8003304:	4853      	ldr	r0, [pc, #332]	@ (8003454 <ParseUSBCommand+0x330>)
 8003306:	f00e f98f 	bl	8011628 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800330a:	4852      	ldr	r0, [pc, #328]	@ (8003454 <ParseUSBCommand+0x330>)
 800330c:	f7ff fee0 	bl	80030d0 <SendUSBMessage>
 8003310:	e04e      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_IMAX2_SUM", 13) == 0) {
 8003312:	220d      	movs	r2, #13
 8003314:	4958      	ldr	r1, [pc, #352]	@ (8003478 <ParseUSBCommand+0x354>)
 8003316:	482d      	ldr	r0, [pc, #180]	@ (80033cc <ParseUSBCommand+0x2a8>)
 8003318:	f00e fa1d 	bl	8011756 <strncmp>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <ParseUSBCommand+0x214>
	            sprintf((char*)USB_TX_Buffer, "imax2_sum = %f\n", imax2_sum);
 8003322:	4b3f      	ldr	r3, [pc, #252]	@ (8003420 <ParseUSBCommand+0x2fc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	4954      	ldr	r1, [pc, #336]	@ (800347c <ParseUSBCommand+0x358>)
 800332a:	484a      	ldr	r0, [pc, #296]	@ (8003454 <ParseUSBCommand+0x330>)
 800332c:	f00e f97c 	bl	8011628 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003330:	4848      	ldr	r0, [pc, #288]	@ (8003454 <ParseUSBCommand+0x330>)
 8003332:	f7ff fecd 	bl	80030d0 <SendUSBMessage>
 8003336:	e03b      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_TR", 12) == 0) {
 8003338:	220c      	movs	r2, #12
 800333a:	4951      	ldr	r1, [pc, #324]	@ (8003480 <ParseUSBCommand+0x35c>)
 800333c:	4823      	ldr	r0, [pc, #140]	@ (80033cc <ParseUSBCommand+0x2a8>)
 800333e:	f00e fa0a 	bl	8011756 <strncmp>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10e      	bne.n	8003366 <ParseUSBCommand+0x242>
	            sprintf((char*)USB_TX_Buffer, "delay_tr = %f\n", delay_tr);
 8003348:	4b39      	ldr	r3, [pc, #228]	@ (8003430 <ParseUSBCommand+0x30c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd f923 	bl	8000598 <__aeabi_f2d>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	494b      	ldr	r1, [pc, #300]	@ (8003484 <ParseUSBCommand+0x360>)
 8003358:	483e      	ldr	r0, [pc, #248]	@ (8003454 <ParseUSBCommand+0x330>)
 800335a:	f00e f965 	bl	8011628 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800335e:	483d      	ldr	r0, [pc, #244]	@ (8003454 <ParseUSBCommand+0x330>)
 8003360:	f7ff feb6 	bl	80030d0 <SendUSBMessage>
 8003364:	e024      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_HC", 12) == 0) {
 8003366:	220c      	movs	r2, #12
 8003368:	4947      	ldr	r1, [pc, #284]	@ (8003488 <ParseUSBCommand+0x364>)
 800336a:	4818      	ldr	r0, [pc, #96]	@ (80033cc <ParseUSBCommand+0x2a8>)
 800336c:	f00e f9f3 	bl	8011756 <strncmp>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10e      	bne.n	8003394 <ParseUSBCommand+0x270>
	            sprintf((char*)USB_TX_Buffer, "delay_hc = %f\n", delay_hc);
 8003376:	4b32      	ldr	r3, [pc, #200]	@ (8003440 <ParseUSBCommand+0x31c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd f90c 	bl	8000598 <__aeabi_f2d>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4941      	ldr	r1, [pc, #260]	@ (800348c <ParseUSBCommand+0x368>)
 8003386:	4833      	ldr	r0, [pc, #204]	@ (8003454 <ParseUSBCommand+0x330>)
 8003388:	f00e f94e 	bl	8011628 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800338c:	4831      	ldr	r0, [pc, #196]	@ (8003454 <ParseUSBCommand+0x330>)
 800338e:	f7ff fe9f 	bl	80030d0 <SendUSBMessage>
 8003392:	e00d      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "DISPLAY_ALL", 11) == 0) {
 8003394:	220b      	movs	r2, #11
 8003396:	493e      	ldr	r1, [pc, #248]	@ (8003490 <ParseUSBCommand+0x36c>)
 8003398:	480c      	ldr	r0, [pc, #48]	@ (80033cc <ParseUSBCommand+0x2a8>)
 800339a:	f00e f9dc 	bl	8011756 <strncmp>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <ParseUSBCommand+0x286>
	            DisplayAllVariables();
 80033a4:	f000 f878 	bl	8003498 <DisplayAllVariables>
 80033a8:	e002      	b.n	80033b0 <ParseUSBCommand+0x28c>

	        } else {
	            SendUSBMessage("Unknown Command\n");
 80033aa:	483a      	ldr	r0, [pc, #232]	@ (8003494 <ParseUSBCommand+0x370>)
 80033ac:	f7ff fe90 	bl	80030d0 <SendUSBMessage>
	        }
	        memset(USB_RX_Buffer, 0, sizeof(USB_RX_Buffer));  // Clear buffer
 80033b0:	2240      	movs	r2, #64	@ 0x40
 80033b2:	2100      	movs	r1, #0
 80033b4:	4805      	ldr	r0, [pc, #20]	@ (80033cc <ParseUSBCommand+0x2a8>)
 80033b6:	f00e f9c6 	bl	8011746 <memset>
	        dataReceivedFlag = 0;
 80033ba:	4b02      	ldr	r3, [pc, #8]	@ (80033c4 <ParseUSBCommand+0x2a0>)
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
	    }
}
 80033c0:	bf00      	nop
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	20000b58 	.word	0x20000b58
 80033c8:	08016b48 	.word	0x08016b48
 80033cc:	20000a98 	.word	0x20000a98
 80033d0:	20000008 	.word	0x20000008
 80033d4:	08016b50 	.word	0x08016b50
 80033d8:	08016b5c 	.word	0x08016b5c
 80033dc:	08016b68 	.word	0x08016b68
 80033e0:	2000000c 	.word	0x2000000c
 80033e4:	08016b70 	.word	0x08016b70
 80033e8:	08016b7c 	.word	0x08016b7c
 80033ec:	08016b88 	.word	0x08016b88
 80033f0:	20000000 	.word	0x20000000
 80033f4:	08016b94 	.word	0x08016b94
 80033f8:	08016ba4 	.word	0x08016ba4
 80033fc:	08016bb4 	.word	0x08016bb4
 8003400:	20000a3c 	.word	0x20000a3c
 8003404:	08016bc4 	.word	0x08016bc4
 8003408:	08016bd4 	.word	0x08016bd4
 800340c:	08016bf4 	.word	0x08016bf4
 8003410:	20000a3e 	.word	0x20000a3e
 8003414:	08016c04 	.word	0x08016c04
 8003418:	08016c14 	.word	0x08016c14
 800341c:	08016c34 	.word	0x08016c34
 8003420:	20000a7c 	.word	0x20000a7c
 8003424:	08016c44 	.word	0x08016c44
 8003428:	08016c58 	.word	0x08016c58
 800342c:	08016c6c 	.word	0x08016c6c
 8003430:	20000a74 	.word	0x20000a74
 8003434:	08016c7c 	.word	0x08016c7c
 8003438:	08016c8c 	.word	0x08016c8c
 800343c:	08016ca0 	.word	0x08016ca0
 8003440:	20000a78 	.word	0x20000a78
 8003444:	08016cb0 	.word	0x08016cb0
 8003448:	08016cc0 	.word	0x08016cc0
 800344c:	08016cd4 	.word	0x08016cd4
 8003450:	08016cdc 	.word	0x08016cdc
 8003454:	20000ad8 	.word	0x20000ad8
 8003458:	08016ce8 	.word	0x08016ce8
 800345c:	08016cf0 	.word	0x08016cf0
 8003460:	08016cfc 	.word	0x08016cfc
 8003464:	08016d08 	.word	0x08016d08
 8003468:	08016d14 	.word	0x08016d14
 800346c:	08016d24 	.word	0x08016d24
 8003470:	08016d40 	.word	0x08016d40
 8003474:	08016d50 	.word	0x08016d50
 8003478:	08016d6c 	.word	0x08016d6c
 800347c:	08016d7c 	.word	0x08016d7c
 8003480:	08016d8c 	.word	0x08016d8c
 8003484:	08016d9c 	.word	0x08016d9c
 8003488:	08016dac 	.word	0x08016dac
 800348c:	08016dbc 	.word	0x08016dbc
 8003490:	08016dcc 	.word	0x08016dcc
 8003494:	08016dd8 	.word	0x08016dd8

08003498 <DisplayAllVariables>:

void DisplayAllVariables(void) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b0a0      	sub	sp, #128	@ 0x80
 800349c:	af00      	add	r7, sp, #0
    char buffer[128];

    sprintf(buffer, "KP = %f\n", Kp);
 800349e:	4b5e      	ldr	r3, [pc, #376]	@ (8003618 <DisplayAllVariables+0x180>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd f878 	bl	8000598 <__aeabi_f2d>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4638      	mov	r0, r7
 80034ae:	495b      	ldr	r1, [pc, #364]	@ (800361c <DisplayAllVariables+0x184>)
 80034b0:	f00e f8ba 	bl	8011628 <siprintf>
        SendUSBMessage(buffer);
 80034b4:	463b      	mov	r3, r7
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fe0a 	bl	80030d0 <SendUSBMessage>

        sprintf(buffer, "Ti = %f\n", Ti);
 80034bc:	4b58      	ldr	r3, [pc, #352]	@ (8003620 <DisplayAllVariables+0x188>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd f869 	bl	8000598 <__aeabi_f2d>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4638      	mov	r0, r7
 80034cc:	4955      	ldr	r1, [pc, #340]	@ (8003624 <DisplayAllVariables+0x18c>)
 80034ce:	f00e f8ab 	bl	8011628 <siprintf>
        SendUSBMessage(buffer);
 80034d2:	463b      	mov	r3, r7
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fdfb 	bl	80030d0 <SendUSBMessage>

        sprintf(buffer, "vref = %hu\n", vref);
 80034da:	4b53      	ldr	r3, [pc, #332]	@ (8003628 <DisplayAllVariables+0x190>)
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	463b      	mov	r3, r7
 80034e2:	4952      	ldr	r1, [pc, #328]	@ (800362c <DisplayAllVariables+0x194>)
 80034e4:	4618      	mov	r0, r3
 80034e6:	f00e f89f 	bl	8011628 <siprintf>
        SendUSBMessage(buffer);
 80034ea:	463b      	mov	r3, r7
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fdef 	bl	80030d0 <SendUSBMessage>

        sprintf(buffer, "imax1 = %f\n", imax1);
 80034f2:	4b4f      	ldr	r3, [pc, #316]	@ (8003630 <DisplayAllVariables+0x198>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	463b      	mov	r3, r7
 80034f8:	494e      	ldr	r1, [pc, #312]	@ (8003634 <DisplayAllVariables+0x19c>)
 80034fa:	4618      	mov	r0, r3
 80034fc:	f00e f894 	bl	8011628 <siprintf>
        SendUSBMessage(buffer);
 8003500:	463b      	mov	r3, r7
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fde4 	bl	80030d0 <SendUSBMessage>

        sprintf(buffer, "imax2 = %f\n", imax2);
 8003508:	4b4b      	ldr	r3, [pc, #300]	@ (8003638 <DisplayAllVariables+0x1a0>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	463b      	mov	r3, r7
 800350e:	494b      	ldr	r1, [pc, #300]	@ (800363c <DisplayAllVariables+0x1a4>)
 8003510:	4618      	mov	r0, r3
 8003512:	f00e f889 	bl	8011628 <siprintf>
        SendUSBMessage(buffer);
 8003516:	463b      	mov	r3, r7
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff fdd9 	bl	80030d0 <SendUSBMessage>

        sprintf(buffer, "imin = %f\n", imin);
 800351e:	4b48      	ldr	r3, [pc, #288]	@ (8003640 <DisplayAllVariables+0x1a8>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	463b      	mov	r3, r7
 8003524:	4947      	ldr	r1, [pc, #284]	@ (8003644 <DisplayAllVariables+0x1ac>)
 8003526:	4618      	mov	r0, r3
 8003528:	f00e f87e 	bl	8011628 <siprintf>
        SendUSBMessage(buffer);
 800352c:	463b      	mov	r3, r7
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fdce 	bl	80030d0 <SendUSBMessage>

        sprintf(buffer, "input_voltage = %f\n", input_voltage);
 8003534:	4b44      	ldr	r3, [pc, #272]	@ (8003648 <DisplayAllVariables+0x1b0>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	463b      	mov	r3, r7
 800353a:	4944      	ldr	r1, [pc, #272]	@ (800364c <DisplayAllVariables+0x1b4>)
 800353c:	4618      	mov	r0, r3
 800353e:	f00e f873 	bl	8011628 <siprintf>
        SendUSBMessage(buffer);
 8003542:	463b      	mov	r3, r7
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fdc3 	bl	80030d0 <SendUSBMessage>

        sprintf(buffer, "output_voltage = %f\n", output_voltage);
 800354a:	4b41      	ldr	r3, [pc, #260]	@ (8003650 <DisplayAllVariables+0x1b8>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	463b      	mov	r3, r7
 8003550:	4940      	ldr	r1, [pc, #256]	@ (8003654 <DisplayAllVariables+0x1bc>)
 8003552:	4618      	mov	r0, r3
 8003554:	f00e f868 	bl	8011628 <siprintf>
        SendUSBMessage(buffer);
 8003558:	463b      	mov	r3, r7
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fdb8 	bl	80030d0 <SendUSBMessage>

        sprintf(buffer, "pcb_temp = %f\n", pcb_temp);
 8003560:	4b3d      	ldr	r3, [pc, #244]	@ (8003658 <DisplayAllVariables+0x1c0>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	463b      	mov	r3, r7
 8003566:	493d      	ldr	r1, [pc, #244]	@ (800365c <DisplayAllVariables+0x1c4>)
 8003568:	4618      	mov	r0, r3
 800356a:	f00e f85d 	bl	8011628 <siprintf>
        SendUSBMessage(buffer);
 800356e:	463b      	mov	r3, r7
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fdad 	bl	80030d0 <SendUSBMessage>

        sprintf(buffer, "heat_sink_temp = %f\n", heat_sink_temp);
 8003576:	4b3a      	ldr	r3, [pc, #232]	@ (8003660 <DisplayAllVariables+0x1c8>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	463b      	mov	r3, r7
 800357c:	4939      	ldr	r1, [pc, #228]	@ (8003664 <DisplayAllVariables+0x1cc>)
 800357e:	4618      	mov	r0, r3
 8003580:	f00e f852 	bl	8011628 <siprintf>
        SendUSBMessage(buffer);
 8003584:	463b      	mov	r3, r7
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fda2 	bl	80030d0 <SendUSBMessage>

        sprintf(buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 800358c:	4b36      	ldr	r3, [pc, #216]	@ (8003668 <DisplayAllVariables+0x1d0>)
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	463b      	mov	r3, r7
 8003594:	4935      	ldr	r1, [pc, #212]	@ (800366c <DisplayAllVariables+0x1d4>)
 8003596:	4618      	mov	r0, r3
 8003598:	f00e f846 	bl	8011628 <siprintf>
        SendUSBMessage(buffer);
 800359c:	463b      	mov	r3, r7
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fd96 	bl	80030d0 <SendUSBMessage>

        sprintf(buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 80035a4:	4b32      	ldr	r3, [pc, #200]	@ (8003670 <DisplayAllVariables+0x1d8>)
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	463b      	mov	r3, r7
 80035ac:	4931      	ldr	r1, [pc, #196]	@ (8003674 <DisplayAllVariables+0x1dc>)
 80035ae:	4618      	mov	r0, r3
 80035b0:	f00e f83a 	bl	8011628 <siprintf>
        SendUSBMessage(buffer);
 80035b4:	463b      	mov	r3, r7
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fd8a 	bl	80030d0 <SendUSBMessage>

        sprintf(buffer, "imax2_sum = %f\n", imax2_sum);
 80035bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003678 <DisplayAllVariables+0x1e0>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	463b      	mov	r3, r7
 80035c2:	492e      	ldr	r1, [pc, #184]	@ (800367c <DisplayAllVariables+0x1e4>)
 80035c4:	4618      	mov	r0, r3
 80035c6:	f00e f82f 	bl	8011628 <siprintf>
        SendUSBMessage(buffer);
 80035ca:	463b      	mov	r3, r7
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fd7f 	bl	80030d0 <SendUSBMessage>

        sprintf(buffer, "delay_tr = %f\n", delay_tr);
 80035d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003680 <DisplayAllVariables+0x1e8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fc ffde 	bl	8000598 <__aeabi_f2d>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4638      	mov	r0, r7
 80035e2:	4928      	ldr	r1, [pc, #160]	@ (8003684 <DisplayAllVariables+0x1ec>)
 80035e4:	f00e f820 	bl	8011628 <siprintf>
        SendUSBMessage(buffer);
 80035e8:	463b      	mov	r3, r7
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fd70 	bl	80030d0 <SendUSBMessage>

        sprintf(buffer, "delay_hc = %f\n", delay_hc);
 80035f0:	4b25      	ldr	r3, [pc, #148]	@ (8003688 <DisplayAllVariables+0x1f0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fc ffcf 	bl	8000598 <__aeabi_f2d>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4638      	mov	r0, r7
 8003600:	4922      	ldr	r1, [pc, #136]	@ (800368c <DisplayAllVariables+0x1f4>)
 8003602:	f00e f811 	bl	8011628 <siprintf>
        SendUSBMessage(buffer);
 8003606:	463b      	mov	r3, r7
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fd61 	bl	80030d0 <SendUSBMessage>
}
 800360e:	bf00      	nop
 8003610:	3780      	adds	r7, #128	@ 0x80
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000008 	.word	0x20000008
 800361c:	08016cdc 	.word	0x08016cdc
 8003620:	2000000c 	.word	0x2000000c
 8003624:	08016cf0 	.word	0x08016cf0
 8003628:	20000000 	.word	0x20000000
 800362c:	08016d08 	.word	0x08016d08
 8003630:	20000a40 	.word	0x20000a40
 8003634:	08016dec 	.word	0x08016dec
 8003638:	20000a44 	.word	0x20000a44
 800363c:	08016df8 	.word	0x08016df8
 8003640:	20000a48 	.word	0x20000a48
 8003644:	08016e04 	.word	0x08016e04
 8003648:	20000a4c 	.word	0x20000a4c
 800364c:	08016e10 	.word	0x08016e10
 8003650:	20000a64 	.word	0x20000a64
 8003654:	08016e24 	.word	0x08016e24
 8003658:	20000a50 	.word	0x20000a50
 800365c:	08016e3c 	.word	0x08016e3c
 8003660:	20000a54 	.word	0x20000a54
 8003664:	08016e4c 	.word	0x08016e4c
 8003668:	20000a3c 	.word	0x20000a3c
 800366c:	08016d24 	.word	0x08016d24
 8003670:	20000a3e 	.word	0x20000a3e
 8003674:	08016d50 	.word	0x08016d50
 8003678:	20000a7c 	.word	0x20000a7c
 800367c:	08016d7c 	.word	0x08016d7c
 8003680:	20000a74 	.word	0x20000a74
 8003684:	08016d9c 	.word	0x08016d9c
 8003688:	20000a78 	.word	0x20000a78
 800368c:	08016dbc 	.word	0x08016dbc

08003690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003694:	b672      	cpsid	i
}
 8003696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003698:	bf00      	nop
 800369a:	e7fd      	b.n	8003698 <Error_Handler+0x8>

0800369c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a2:	4b0f      	ldr	r3, [pc, #60]	@ (80036e0 <HAL_MspInit+0x44>)
 80036a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a6:	4a0e      	ldr	r2, [pc, #56]	@ (80036e0 <HAL_MspInit+0x44>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80036ae:	4b0c      	ldr	r3, [pc, #48]	@ (80036e0 <HAL_MspInit+0x44>)
 80036b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	607b      	str	r3, [r7, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036ba:	4b09      	ldr	r3, [pc, #36]	@ (80036e0 <HAL_MspInit+0x44>)
 80036bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036be:	4a08      	ldr	r2, [pc, #32]	@ (80036e0 <HAL_MspInit+0x44>)
 80036c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036c6:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <HAL_MspInit+0x44>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80036d2:	f005 f919 	bl	8008908 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000

080036e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b0a4      	sub	sp, #144	@ 0x90
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003700:	2254      	movs	r2, #84	@ 0x54
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f00e f81e 	bl	8011746 <memset>
  if(hadc->Instance==ADC1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003712:	d11c      	bne.n	800374e <HAL_ADC_MspInit+0x6a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003714:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003718:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800371a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800371e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003720:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003724:	4618      	mov	r0, r3
 8003726:	f005 fe2d 	bl	8009384 <HAL_RCCEx_PeriphCLKConfig>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003730:	f7ff ffae 	bl	8003690 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003734:	4b85      	ldr	r3, [pc, #532]	@ (800394c <HAL_ADC_MspInit+0x268>)
 8003736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003738:	4a84      	ldr	r2, [pc, #528]	@ (800394c <HAL_ADC_MspInit+0x268>)
 800373a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800373e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003740:	4b82      	ldr	r3, [pc, #520]	@ (800394c <HAL_ADC_MspInit+0x268>)
 8003742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 800374c:	e183      	b.n	8003a56 <HAL_ADC_MspInit+0x372>
  else if(hadc->Instance==ADC3)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7f      	ldr	r2, [pc, #508]	@ (8003950 <HAL_ADC_MspInit+0x26c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	f040 8087 	bne.w	8003868 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800375a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800375e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003760:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003764:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003766:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800376a:	4618      	mov	r0, r3
 800376c:	f005 fe0a 	bl	8009384 <HAL_RCCEx_PeriphCLKConfig>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_ADC_MspInit+0x96>
      Error_Handler();
 8003776:	f7ff ff8b 	bl	8003690 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800377a:	4b76      	ldr	r3, [pc, #472]	@ (8003954 <HAL_ADC_MspInit+0x270>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3301      	adds	r3, #1
 8003780:	4a74      	ldr	r2, [pc, #464]	@ (8003954 <HAL_ADC_MspInit+0x270>)
 8003782:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003784:	4b73      	ldr	r3, [pc, #460]	@ (8003954 <HAL_ADC_MspInit+0x270>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d10b      	bne.n	80037a4 <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800378c:	4b6f      	ldr	r3, [pc, #444]	@ (800394c <HAL_ADC_MspInit+0x268>)
 800378e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003790:	4a6e      	ldr	r2, [pc, #440]	@ (800394c <HAL_ADC_MspInit+0x268>)
 8003792:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003796:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003798:	4b6c      	ldr	r3, [pc, #432]	@ (800394c <HAL_ADC_MspInit+0x268>)
 800379a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800379c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037a0:	623b      	str	r3, [r7, #32]
 80037a2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a4:	4b69      	ldr	r3, [pc, #420]	@ (800394c <HAL_ADC_MspInit+0x268>)
 80037a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a8:	4a68      	ldr	r2, [pc, #416]	@ (800394c <HAL_ADC_MspInit+0x268>)
 80037aa:	f043 0302 	orr.w	r3, r3, #2
 80037ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037b0:	4b66      	ldr	r3, [pc, #408]	@ (800394c <HAL_ADC_MspInit+0x268>)
 80037b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037bc:	4b63      	ldr	r3, [pc, #396]	@ (800394c <HAL_ADC_MspInit+0x268>)
 80037be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c0:	4a62      	ldr	r2, [pc, #392]	@ (800394c <HAL_ADC_MspInit+0x268>)
 80037c2:	f043 0310 	orr.w	r3, r3, #16
 80037c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037c8:	4b60      	ldr	r3, [pc, #384]	@ (800394c <HAL_ADC_MspInit+0x268>)
 80037ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS_VREF_1_Pin|HEATSINK_TEMP_Pin;
 80037d4:	f242 0302 	movw	r3, #8194	@ 0x2002
 80037d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037da:	2303      	movs	r3, #3
 80037dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80037ea:	4619      	mov	r1, r3
 80037ec:	485a      	ldr	r0, [pc, #360]	@ (8003958 <HAL_ADC_MspInit+0x274>)
 80037ee:	f003 f8e5 	bl	80069bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PCB_TEMP_Pin|CS_VREF_2_Pin|INPUT_V_ADC_Pin;
 80037f2:	f44f 530a 	mov.w	r3, #8832	@ 0x2280
 80037f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037f8:	2303      	movs	r3, #3
 80037fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003804:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003808:	4619      	mov	r1, r3
 800380a:	4854      	ldr	r0, [pc, #336]	@ (800395c <HAL_ADC_MspInit+0x278>)
 800380c:	f003 f8d6 	bl	80069bc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel1;
 8003810:	4b53      	ldr	r3, [pc, #332]	@ (8003960 <HAL_ADC_MspInit+0x27c>)
 8003812:	4a54      	ldr	r2, [pc, #336]	@ (8003964 <HAL_ADC_MspInit+0x280>)
 8003814:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003816:	4b52      	ldr	r3, [pc, #328]	@ (8003960 <HAL_ADC_MspInit+0x27c>)
 8003818:	2225      	movs	r2, #37	@ 0x25
 800381a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800381c:	4b50      	ldr	r3, [pc, #320]	@ (8003960 <HAL_ADC_MspInit+0x27c>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003822:	4b4f      	ldr	r3, [pc, #316]	@ (8003960 <HAL_ADC_MspInit+0x27c>)
 8003824:	2200      	movs	r2, #0
 8003826:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003828:	4b4d      	ldr	r3, [pc, #308]	@ (8003960 <HAL_ADC_MspInit+0x27c>)
 800382a:	2280      	movs	r2, #128	@ 0x80
 800382c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800382e:	4b4c      	ldr	r3, [pc, #304]	@ (8003960 <HAL_ADC_MspInit+0x27c>)
 8003830:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003834:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003836:	4b4a      	ldr	r3, [pc, #296]	@ (8003960 <HAL_ADC_MspInit+0x27c>)
 8003838:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800383c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800383e:	4b48      	ldr	r3, [pc, #288]	@ (8003960 <HAL_ADC_MspInit+0x27c>)
 8003840:	2220      	movs	r2, #32
 8003842:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003844:	4b46      	ldr	r3, [pc, #280]	@ (8003960 <HAL_ADC_MspInit+0x27c>)
 8003846:	2200      	movs	r2, #0
 8003848:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800384a:	4845      	ldr	r0, [pc, #276]	@ (8003960 <HAL_ADC_MspInit+0x27c>)
 800384c:	f002 fe44 	bl	80064d8 <HAL_DMA_Init>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_ADC_MspInit+0x176>
      Error_Handler();
 8003856:	f7ff ff1b 	bl	8003690 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a40      	ldr	r2, [pc, #256]	@ (8003960 <HAL_ADC_MspInit+0x27c>)
 800385e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003860:	4a3f      	ldr	r2, [pc, #252]	@ (8003960 <HAL_ADC_MspInit+0x27c>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003866:	e0f6      	b.n	8003a56 <HAL_ADC_MspInit+0x372>
  else if(hadc->Instance==ADC4)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a3e      	ldr	r2, [pc, #248]	@ (8003968 <HAL_ADC_MspInit+0x284>)
 800386e:	4293      	cmp	r3, r2
 8003870:	f040 8080 	bne.w	8003974 <HAL_ADC_MspInit+0x290>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003874:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003878:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 800387a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800387e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003880:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003884:	4618      	mov	r0, r3
 8003886:	f005 fd7d 	bl	8009384 <HAL_RCCEx_PeriphCLKConfig>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8003890:	f7ff fefe 	bl	8003690 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003894:	4b2f      	ldr	r3, [pc, #188]	@ (8003954 <HAL_ADC_MspInit+0x270>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	4a2e      	ldr	r2, [pc, #184]	@ (8003954 <HAL_ADC_MspInit+0x270>)
 800389c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800389e:	4b2d      	ldr	r3, [pc, #180]	@ (8003954 <HAL_ADC_MspInit+0x270>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d10b      	bne.n	80038be <HAL_ADC_MspInit+0x1da>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80038a6:	4b29      	ldr	r3, [pc, #164]	@ (800394c <HAL_ADC_MspInit+0x268>)
 80038a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038aa:	4a28      	ldr	r2, [pc, #160]	@ (800394c <HAL_ADC_MspInit+0x268>)
 80038ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038b2:	4b26      	ldr	r3, [pc, #152]	@ (800394c <HAL_ADC_MspInit+0x268>)
 80038b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038be:	4b23      	ldr	r3, [pc, #140]	@ (800394c <HAL_ADC_MspInit+0x268>)
 80038c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c2:	4a22      	ldr	r2, [pc, #136]	@ (800394c <HAL_ADC_MspInit+0x268>)
 80038c4:	f043 0310 	orr.w	r3, r3, #16
 80038c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038ca:	4b20      	ldr	r3, [pc, #128]	@ (800394c <HAL_ADC_MspInit+0x268>)
 80038cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT_V_ADC_Pin;
 80038d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80038da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038dc:	2303      	movs	r3, #3
 80038de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(OUTPUT_V_ADC_GPIO_Port, &GPIO_InitStruct);
 80038e8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80038ec:	4619      	mov	r1, r3
 80038ee:	481b      	ldr	r0, [pc, #108]	@ (800395c <HAL_ADC_MspInit+0x278>)
 80038f0:	f003 f864 	bl	80069bc <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel2;
 80038f4:	4b1d      	ldr	r3, [pc, #116]	@ (800396c <HAL_ADC_MspInit+0x288>)
 80038f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003970 <HAL_ADC_MspInit+0x28c>)
 80038f8:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80038fa:	4b1c      	ldr	r3, [pc, #112]	@ (800396c <HAL_ADC_MspInit+0x288>)
 80038fc:	2226      	movs	r2, #38	@ 0x26
 80038fe:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003900:	4b1a      	ldr	r3, [pc, #104]	@ (800396c <HAL_ADC_MspInit+0x288>)
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003906:	4b19      	ldr	r3, [pc, #100]	@ (800396c <HAL_ADC_MspInit+0x288>)
 8003908:	2200      	movs	r2, #0
 800390a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800390c:	4b17      	ldr	r3, [pc, #92]	@ (800396c <HAL_ADC_MspInit+0x288>)
 800390e:	2280      	movs	r2, #128	@ 0x80
 8003910:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003912:	4b16      	ldr	r3, [pc, #88]	@ (800396c <HAL_ADC_MspInit+0x288>)
 8003914:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003918:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800391a:	4b14      	ldr	r3, [pc, #80]	@ (800396c <HAL_ADC_MspInit+0x288>)
 800391c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003920:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8003922:	4b12      	ldr	r3, [pc, #72]	@ (800396c <HAL_ADC_MspInit+0x288>)
 8003924:	2220      	movs	r2, #32
 8003926:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8003928:	4b10      	ldr	r3, [pc, #64]	@ (800396c <HAL_ADC_MspInit+0x288>)
 800392a:	2200      	movs	r2, #0
 800392c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800392e:	480f      	ldr	r0, [pc, #60]	@ (800396c <HAL_ADC_MspInit+0x288>)
 8003930:	f002 fdd2 	bl	80064d8 <HAL_DMA_Init>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_ADC_MspInit+0x25a>
      Error_Handler();
 800393a:	f7ff fea9 	bl	8003690 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a0a      	ldr	r2, [pc, #40]	@ (800396c <HAL_ADC_MspInit+0x288>)
 8003942:	655a      	str	r2, [r3, #84]	@ 0x54
 8003944:	4a09      	ldr	r2, [pc, #36]	@ (800396c <HAL_ADC_MspInit+0x288>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800394a:	e084      	b.n	8003a56 <HAL_ADC_MspInit+0x372>
 800394c:	40021000 	.word	0x40021000
 8003950:	50000400 	.word	0x50000400
 8003954:	20000b80 	.word	0x20000b80
 8003958:	48000400 	.word	0x48000400
 800395c:	48001000 	.word	0x48001000
 8003960:	20000564 	.word	0x20000564
 8003964:	40020008 	.word	0x40020008
 8003968:	50000500 	.word	0x50000500
 800396c:	200005c4 	.word	0x200005c4
 8003970:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC5)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a39      	ldr	r2, [pc, #228]	@ (8003a60 <HAL_ADC_MspInit+0x37c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d16b      	bne.n	8003a56 <HAL_ADC_MspInit+0x372>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800397e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003982:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003988:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800398a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800398e:	4618      	mov	r0, r3
 8003990:	f005 fcf8 	bl	8009384 <HAL_RCCEx_PeriphCLKConfig>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_ADC_MspInit+0x2ba>
      Error_Handler();
 800399a:	f7ff fe79 	bl	8003690 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800399e:	4b31      	ldr	r3, [pc, #196]	@ (8003a64 <HAL_ADC_MspInit+0x380>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3301      	adds	r3, #1
 80039a4:	4a2f      	ldr	r2, [pc, #188]	@ (8003a64 <HAL_ADC_MspInit+0x380>)
 80039a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80039a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a64 <HAL_ADC_MspInit+0x380>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d10b      	bne.n	80039c8 <HAL_ADC_MspInit+0x2e4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80039b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003a68 <HAL_ADC_MspInit+0x384>)
 80039b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003a68 <HAL_ADC_MspInit+0x384>)
 80039b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003a68 <HAL_ADC_MspInit+0x384>)
 80039be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c8:	4b27      	ldr	r3, [pc, #156]	@ (8003a68 <HAL_ADC_MspInit+0x384>)
 80039ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039cc:	4a26      	ldr	r2, [pc, #152]	@ (8003a68 <HAL_ADC_MspInit+0x384>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039d4:	4b24      	ldr	r3, [pc, #144]	@ (8003a68 <HAL_ADC_MspInit+0x384>)
 80039d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMAX2_SUM_Pin;
 80039e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039e6:	2303      	movs	r3, #3
 80039e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(IMAX2_SUM_GPIO_Port, &GPIO_InitStruct);
 80039f2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80039f6:	4619      	mov	r1, r3
 80039f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039fc:	f002 ffde 	bl	80069bc <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel3;
 8003a00:	4b1a      	ldr	r3, [pc, #104]	@ (8003a6c <HAL_ADC_MspInit+0x388>)
 8003a02:	4a1b      	ldr	r2, [pc, #108]	@ (8003a70 <HAL_ADC_MspInit+0x38c>)
 8003a04:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003a06:	4b19      	ldr	r3, [pc, #100]	@ (8003a6c <HAL_ADC_MspInit+0x388>)
 8003a08:	2227      	movs	r2, #39	@ 0x27
 8003a0a:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a0c:	4b17      	ldr	r3, [pc, #92]	@ (8003a6c <HAL_ADC_MspInit+0x388>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a12:	4b16      	ldr	r3, [pc, #88]	@ (8003a6c <HAL_ADC_MspInit+0x388>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003a18:	4b14      	ldr	r3, [pc, #80]	@ (8003a6c <HAL_ADC_MspInit+0x388>)
 8003a1a:	2280      	movs	r2, #128	@ 0x80
 8003a1c:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a1e:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <HAL_ADC_MspInit+0x388>)
 8003a20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a24:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a26:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <HAL_ADC_MspInit+0x388>)
 8003a28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a2c:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a6c <HAL_ADC_MspInit+0x388>)
 8003a30:	2220      	movs	r2, #32
 8003a32:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003a34:	4b0d      	ldr	r3, [pc, #52]	@ (8003a6c <HAL_ADC_MspInit+0x388>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8003a3a:	480c      	ldr	r0, [pc, #48]	@ (8003a6c <HAL_ADC_MspInit+0x388>)
 8003a3c:	f002 fd4c 	bl	80064d8 <HAL_DMA_Init>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_ADC_MspInit+0x366>
      Error_Handler();
 8003a46:	f7ff fe23 	bl	8003690 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a07      	ldr	r2, [pc, #28]	@ (8003a6c <HAL_ADC_MspInit+0x388>)
 8003a4e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a50:	4a06      	ldr	r2, [pc, #24]	@ (8003a6c <HAL_ADC_MspInit+0x388>)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003a56:	bf00      	nop
 8003a58:	3790      	adds	r7, #144	@ 0x90
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	50000600 	.word	0x50000600
 8003a64:	20000b80 	.word	0x20000b80
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	20000624 	.word	0x20000624
 8003a70:	40020030 	.word	0x40020030

08003a74 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0a      	ldr	r2, [pc, #40]	@ (8003aac <HAL_CORDIC_MspInit+0x38>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d10b      	bne.n	8003a9e <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003a86:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab0 <HAL_CORDIC_MspInit+0x3c>)
 8003a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a8a:	4a09      	ldr	r2, [pc, #36]	@ (8003ab0 <HAL_CORDIC_MspInit+0x3c>)
 8003a8c:	f043 0308 	orr.w	r3, r3, #8
 8003a90:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a92:	4b07      	ldr	r3, [pc, #28]	@ (8003ab0 <HAL_CORDIC_MspInit+0x3c>)
 8003a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40020c00 	.word	0x40020c00
 8003ab0:	40021000 	.word	0x40021000

08003ab4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08c      	sub	sp, #48	@ 0x30
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003abc:	f107 031c 	add.w	r3, r7, #28
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a5b      	ldr	r2, [pc, #364]	@ (8003c40 <HAL_DAC_MspInit+0x18c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d159      	bne.n	8003b8a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003ad6:	4b5b      	ldr	r3, [pc, #364]	@ (8003c44 <HAL_DAC_MspInit+0x190>)
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ada:	4a5a      	ldr	r2, [pc, #360]	@ (8003c44 <HAL_DAC_MspInit+0x190>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ae2:	4b58      	ldr	r3, [pc, #352]	@ (8003c44 <HAL_DAC_MspInit+0x190>)
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aee:	4b55      	ldr	r3, [pc, #340]	@ (8003c44 <HAL_DAC_MspInit+0x190>)
 8003af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af2:	4a54      	ldr	r2, [pc, #336]	@ (8003c44 <HAL_DAC_MspInit+0x190>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003afa:	4b52      	ldr	r3, [pc, #328]	@ (8003c44 <HAL_DAC_MspInit+0x190>)
 8003afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = IMAX_Pin|IMAX2_Pin;
 8003b06:	2330      	movs	r3, #48	@ 0x30
 8003b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b12:	f107 031c 	add.w	r3, r7, #28
 8003b16:	4619      	mov	r1, r3
 8003b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b1c:	f002 ff4e 	bl	80069bc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 8003b20:	4b49      	ldr	r3, [pc, #292]	@ (8003c48 <HAL_DAC_MspInit+0x194>)
 8003b22:	4a4a      	ldr	r2, [pc, #296]	@ (8003c4c <HAL_DAC_MspInit+0x198>)
 8003b24:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003b26:	4b48      	ldr	r3, [pc, #288]	@ (8003c48 <HAL_DAC_MspInit+0x194>)
 8003b28:	2206      	movs	r2, #6
 8003b2a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b2c:	4b46      	ldr	r3, [pc, #280]	@ (8003c48 <HAL_DAC_MspInit+0x194>)
 8003b2e:	2210      	movs	r2, #16
 8003b30:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b32:	4b45      	ldr	r3, [pc, #276]	@ (8003c48 <HAL_DAC_MspInit+0x194>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003b38:	4b43      	ldr	r3, [pc, #268]	@ (8003c48 <HAL_DAC_MspInit+0x194>)
 8003b3a:	2280      	movs	r2, #128	@ 0x80
 8003b3c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b3e:	4b42      	ldr	r3, [pc, #264]	@ (8003c48 <HAL_DAC_MspInit+0x194>)
 8003b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b44:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b46:	4b40      	ldr	r3, [pc, #256]	@ (8003c48 <HAL_DAC_MspInit+0x194>)
 8003b48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b4c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c48 <HAL_DAC_MspInit+0x194>)
 8003b50:	2220      	movs	r2, #32
 8003b52:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003b54:	4b3c      	ldr	r3, [pc, #240]	@ (8003c48 <HAL_DAC_MspInit+0x194>)
 8003b56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003b5c:	483a      	ldr	r0, [pc, #232]	@ (8003c48 <HAL_DAC_MspInit+0x194>)
 8003b5e:	f002 fcbb 	bl	80064d8 <HAL_DMA_Init>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8003b68:	f7ff fd92 	bl	8003690 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a36      	ldr	r2, [pc, #216]	@ (8003c48 <HAL_DAC_MspInit+0x194>)
 8003b70:	609a      	str	r2, [r3, #8]
 8003b72:	4a35      	ldr	r2, [pc, #212]	@ (8003c48 <HAL_DAC_MspInit+0x194>)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	2036      	movs	r0, #54	@ 0x36
 8003b7e:	f002 f998 	bl	8005eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b82:	2036      	movs	r0, #54	@ 0x36
 8003b84:	f002 f9af 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8003b88:	e055      	b.n	8003c36 <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC2)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a30      	ldr	r2, [pc, #192]	@ (8003c50 <HAL_DAC_MspInit+0x19c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d150      	bne.n	8003c36 <HAL_DAC_MspInit+0x182>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003b94:	4b2b      	ldr	r3, [pc, #172]	@ (8003c44 <HAL_DAC_MspInit+0x190>)
 8003b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b98:	4a2a      	ldr	r2, [pc, #168]	@ (8003c44 <HAL_DAC_MspInit+0x190>)
 8003b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ba0:	4b28      	ldr	r3, [pc, #160]	@ (8003c44 <HAL_DAC_MspInit+0x190>)
 8003ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bac:	4b25      	ldr	r3, [pc, #148]	@ (8003c44 <HAL_DAC_MspInit+0x190>)
 8003bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb0:	4a24      	ldr	r2, [pc, #144]	@ (8003c44 <HAL_DAC_MspInit+0x190>)
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bb8:	4b22      	ldr	r3, [pc, #136]	@ (8003c44 <HAL_DAC_MspInit+0x190>)
 8003bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMIN_Pin;
 8003bc4:	2340      	movs	r3, #64	@ 0x40
 8003bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMIN_GPIO_Port, &GPIO_InitStruct);
 8003bd0:	f107 031c 	add.w	r3, r7, #28
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bda:	f002 feef 	bl	80069bc <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel5;
 8003bde:	4b1d      	ldr	r3, [pc, #116]	@ (8003c54 <HAL_DAC_MspInit+0x1a0>)
 8003be0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c58 <HAL_DAC_MspInit+0x1a4>)
 8003be2:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8003be4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c54 <HAL_DAC_MspInit+0x1a0>)
 8003be6:	2229      	movs	r2, #41	@ 0x29
 8003be8:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bea:	4b1a      	ldr	r3, [pc, #104]	@ (8003c54 <HAL_DAC_MspInit+0x1a0>)
 8003bec:	2210      	movs	r2, #16
 8003bee:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bf0:	4b18      	ldr	r3, [pc, #96]	@ (8003c54 <HAL_DAC_MspInit+0x1a0>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003bf6:	4b17      	ldr	r3, [pc, #92]	@ (8003c54 <HAL_DAC_MspInit+0x1a0>)
 8003bf8:	2280      	movs	r2, #128	@ 0x80
 8003bfa:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bfc:	4b15      	ldr	r3, [pc, #84]	@ (8003c54 <HAL_DAC_MspInit+0x1a0>)
 8003bfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c02:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c04:	4b13      	ldr	r3, [pc, #76]	@ (8003c54 <HAL_DAC_MspInit+0x1a0>)
 8003c06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c0a:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8003c0c:	4b11      	ldr	r3, [pc, #68]	@ (8003c54 <HAL_DAC_MspInit+0x1a0>)
 8003c0e:	2220      	movs	r2, #32
 8003c10:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003c12:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <HAL_DAC_MspInit+0x1a0>)
 8003c14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8003c1a:	480e      	ldr	r0, [pc, #56]	@ (8003c54 <HAL_DAC_MspInit+0x1a0>)
 8003c1c:	f002 fc5c 	bl	80064d8 <HAL_DMA_Init>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_DAC_MspInit+0x176>
      Error_Handler();
 8003c26:	f7ff fd33 	bl	8003690 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a09      	ldr	r2, [pc, #36]	@ (8003c54 <HAL_DAC_MspInit+0x1a0>)
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	4a08      	ldr	r2, [pc, #32]	@ (8003c54 <HAL_DAC_MspInit+0x1a0>)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003c36:	bf00      	nop
 8003c38:	3730      	adds	r7, #48	@ 0x30
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	50000800 	.word	0x50000800
 8003c44:	40021000 	.word	0x40021000
 8003c48:	200006d4 	.word	0x200006d4
 8003c4c:	40020044 	.word	0x40020044
 8003c50:	50000c00 	.word	0x50000c00
 8003c54:	20000734 	.word	0x20000734
 8003c58:	40020058 	.word	0x40020058

08003c5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a16      	ldr	r2, [pc, #88]	@ (8003cc4 <HAL_TIM_PWM_MspInit+0x68>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d114      	bne.n	8003c98 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c6e:	4b16      	ldr	r3, [pc, #88]	@ (8003cc8 <HAL_TIM_PWM_MspInit+0x6c>)
 8003c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c72:	4a15      	ldr	r2, [pc, #84]	@ (8003cc8 <HAL_TIM_PWM_MspInit+0x6c>)
 8003c74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c78:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c7a:	4b13      	ldr	r3, [pc, #76]	@ (8003cc8 <HAL_TIM_PWM_MspInit+0x6c>)
 8003c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003c86:	2200      	movs	r2, #0
 8003c88:	2100      	movs	r1, #0
 8003c8a:	2018      	movs	r0, #24
 8003c8c:	f002 f911 	bl	8005eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003c90:	2018      	movs	r0, #24
 8003c92:	f002 f928 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c96:	e010      	b.n	8003cba <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8003ccc <HAL_TIM_PWM_MspInit+0x70>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10b      	bne.n	8003cba <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003ca2:	4b09      	ldr	r3, [pc, #36]	@ (8003cc8 <HAL_TIM_PWM_MspInit+0x6c>)
 8003ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca6:	4a08      	ldr	r2, [pc, #32]	@ (8003cc8 <HAL_TIM_PWM_MspInit+0x6c>)
 8003ca8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003cac:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cae:	4b06      	ldr	r3, [pc, #24]	@ (8003cc8 <HAL_TIM_PWM_MspInit+0x6c>)
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40013400 	.word	0x40013400

08003cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a35      	ldr	r2, [pc, #212]	@ (8003db4 <HAL_TIM_Base_MspInit+0xe4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10c      	bne.n	8003cfc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ce2:	4b35      	ldr	r3, [pc, #212]	@ (8003db8 <HAL_TIM_Base_MspInit+0xe8>)
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce6:	4a34      	ldr	r2, [pc, #208]	@ (8003db8 <HAL_TIM_Base_MspInit+0xe8>)
 8003ce8:	f043 0304 	orr.w	r3, r3, #4
 8003cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cee:	4b32      	ldr	r3, [pc, #200]	@ (8003db8 <HAL_TIM_Base_MspInit+0xe8>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003cfa:	e056      	b.n	8003daa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a2e      	ldr	r2, [pc, #184]	@ (8003dbc <HAL_TIM_Base_MspInit+0xec>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d114      	bne.n	8003d30 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d06:	4b2c      	ldr	r3, [pc, #176]	@ (8003db8 <HAL_TIM_Base_MspInit+0xe8>)
 8003d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0a:	4a2b      	ldr	r2, [pc, #172]	@ (8003db8 <HAL_TIM_Base_MspInit+0xe8>)
 8003d0c:	f043 0310 	orr.w	r3, r3, #16
 8003d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d12:	4b29      	ldr	r3, [pc, #164]	@ (8003db8 <HAL_TIM_Base_MspInit+0xe8>)
 8003d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2100      	movs	r1, #0
 8003d22:	2036      	movs	r0, #54	@ 0x36
 8003d24:	f002 f8c5 	bl	8005eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d28:	2036      	movs	r0, #54	@ 0x36
 8003d2a:	f002 f8dc 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
}
 8003d2e:	e03c      	b.n	8003daa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM7)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a22      	ldr	r2, [pc, #136]	@ (8003dc0 <HAL_TIM_Base_MspInit+0xf0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10c      	bne.n	8003d54 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003db8 <HAL_TIM_Base_MspInit+0xe8>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003db8 <HAL_TIM_Base_MspInit+0xe8>)
 8003d40:	f043 0320 	orr.w	r3, r3, #32
 8003d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d46:	4b1c      	ldr	r3, [pc, #112]	@ (8003db8 <HAL_TIM_Base_MspInit+0xe8>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	697b      	ldr	r3, [r7, #20]
}
 8003d52:	e02a      	b.n	8003daa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM15)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc4 <HAL_TIM_Base_MspInit+0xf4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d114      	bne.n	8003d88 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003d5e:	4b16      	ldr	r3, [pc, #88]	@ (8003db8 <HAL_TIM_Base_MspInit+0xe8>)
 8003d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d62:	4a15      	ldr	r2, [pc, #84]	@ (8003db8 <HAL_TIM_Base_MspInit+0xe8>)
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d68:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d6a:	4b13      	ldr	r3, [pc, #76]	@ (8003db8 <HAL_TIM_Base_MspInit+0xe8>)
 8003d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003d76:	2200      	movs	r2, #0
 8003d78:	2100      	movs	r1, #0
 8003d7a:	2018      	movs	r0, #24
 8003d7c:	f002 f899 	bl	8005eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003d80:	2018      	movs	r0, #24
 8003d82:	f002 f8b0 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
}
 8003d86:	e010      	b.n	8003daa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM16)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a0e      	ldr	r2, [pc, #56]	@ (8003dc8 <HAL_TIM_Base_MspInit+0xf8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d10b      	bne.n	8003daa <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003d92:	4b09      	ldr	r3, [pc, #36]	@ (8003db8 <HAL_TIM_Base_MspInit+0xe8>)
 8003d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d96:	4a08      	ldr	r2, [pc, #32]	@ (8003db8 <HAL_TIM_Base_MspInit+0xe8>)
 8003d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d9e:	4b06      	ldr	r3, [pc, #24]	@ (8003db8 <HAL_TIM_Base_MspInit+0xe8>)
 8003da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
}
 8003daa:	bf00      	nop
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40000800 	.word	0x40000800
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40001000 	.word	0x40001000
 8003dc0:	40001400 	.word	0x40001400
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40014400 	.word	0x40014400

08003dcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	@ 0x28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd4:	f107 0314 	add.w	r3, r7, #20
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	60da      	str	r2, [r3, #12]
 8003de2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a33      	ldr	r2, [pc, #204]	@ (8003eb8 <HAL_TIM_MspPostInit+0xec>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d11c      	bne.n	8003e28 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dee:	4b33      	ldr	r3, [pc, #204]	@ (8003ebc <HAL_TIM_MspPostInit+0xf0>)
 8003df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df2:	4a32      	ldr	r2, [pc, #200]	@ (8003ebc <HAL_TIM_MspPostInit+0xf0>)
 8003df4:	f043 0304 	orr.w	r3, r3, #4
 8003df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dfa:	4b30      	ldr	r3, [pc, #192]	@ (8003ebc <HAL_TIM_MspPostInit+0xf0>)
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DEADTIME_TR_Pin;
 8003e06:	2301      	movs	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e12:	2300      	movs	r3, #0
 8003e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003e16:	2302      	movs	r3, #2
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_TR_GPIO_Port, &GPIO_InitStruct);
 8003e1a:	f107 0314 	add.w	r3, r7, #20
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4827      	ldr	r0, [pc, #156]	@ (8003ec0 <HAL_TIM_MspPostInit+0xf4>)
 8003e22:	f002 fdcb 	bl	80069bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003e26:	e043      	b.n	8003eb0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a25      	ldr	r2, [pc, #148]	@ (8003ec4 <HAL_TIM_MspPostInit+0xf8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d11d      	bne.n	8003e6e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e32:	4b22      	ldr	r3, [pc, #136]	@ (8003ebc <HAL_TIM_MspPostInit+0xf0>)
 8003e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e36:	4a21      	ldr	r2, [pc, #132]	@ (8003ebc <HAL_TIM_MspPostInit+0xf0>)
 8003e38:	f043 0308 	orr.w	r3, r3, #8
 8003e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8003ebc <HAL_TIM_MspPostInit+0xf0>)
 8003e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8003e4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e50:	2302      	movs	r3, #2
 8003e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8003e60:	f107 0314 	add.w	r3, r7, #20
 8003e64:	4619      	mov	r1, r3
 8003e66:	4818      	ldr	r0, [pc, #96]	@ (8003ec8 <HAL_TIM_MspPostInit+0xfc>)
 8003e68:	f002 fda8 	bl	80069bc <HAL_GPIO_Init>
}
 8003e6c:	e020      	b.n	8003eb0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a16      	ldr	r2, [pc, #88]	@ (8003ecc <HAL_TIM_MspPostInit+0x100>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d11b      	bne.n	8003eb0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e78:	4b10      	ldr	r3, [pc, #64]	@ (8003ebc <HAL_TIM_MspPostInit+0xf0>)
 8003e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8003ebc <HAL_TIM_MspPostInit+0xf0>)
 8003e7e:	f043 0304 	orr.w	r3, r3, #4
 8003e82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e84:	4b0d      	ldr	r3, [pc, #52]	@ (8003ebc <HAL_TIM_MspPostInit+0xf0>)
 8003e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEADTIME_HC_Pin;
 8003e90:	2380      	movs	r3, #128	@ 0x80
 8003e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e94:	2302      	movs	r3, #2
 8003e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_HC_GPIO_Port, &GPIO_InitStruct);
 8003ea4:	f107 0314 	add.w	r3, r7, #20
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4805      	ldr	r0, [pc, #20]	@ (8003ec0 <HAL_TIM_MspPostInit+0xf4>)
 8003eac:	f002 fd86 	bl	80069bc <HAL_GPIO_Init>
}
 8003eb0:	bf00      	nop
 8003eb2:	3728      	adds	r7, #40	@ 0x28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40012c00 	.word	0x40012c00
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	48000800 	.word	0x48000800
 8003ec4:	40000800 	.word	0x40000800
 8003ec8:	48000c00 	.word	0x48000c00
 8003ecc:	40013400 	.word	0x40013400

08003ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b09e      	sub	sp, #120	@ 0x78
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ee8:	f107 0310 	add.w	r3, r7, #16
 8003eec:	2254      	movs	r2, #84	@ 0x54
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f00d fc28 	bl	8011746 <memset>
  if(huart->Instance==UART4)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1f      	ldr	r2, [pc, #124]	@ (8003f78 <HAL_UART_MspInit+0xa8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d136      	bne.n	8003f6e <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003f00:	2308      	movs	r3, #8
 8003f02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_HSI;
 8003f04:	2380      	movs	r3, #128	@ 0x80
 8003f06:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f08:	f107 0310 	add.w	r3, r7, #16
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f005 fa39 	bl	8009384 <HAL_RCCEx_PeriphCLKConfig>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f18:	f7ff fbba 	bl	8003690 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003f1c:	4b17      	ldr	r3, [pc, #92]	@ (8003f7c <HAL_UART_MspInit+0xac>)
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f20:	4a16      	ldr	r2, [pc, #88]	@ (8003f7c <HAL_UART_MspInit+0xac>)
 8003f22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f26:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f28:	4b14      	ldr	r3, [pc, #80]	@ (8003f7c <HAL_UART_MspInit+0xac>)
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f34:	4b11      	ldr	r3, [pc, #68]	@ (8003f7c <HAL_UART_MspInit+0xac>)
 8003f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f38:	4a10      	ldr	r2, [pc, #64]	@ (8003f7c <HAL_UART_MspInit+0xac>)
 8003f3a:	f043 0304 	orr.w	r3, r3, #4
 8003f3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f40:	4b0e      	ldr	r3, [pc, #56]	@ (8003f7c <HAL_UART_MspInit+0xac>)
 8003f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f4c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003f50:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f52:	2302      	movs	r3, #2
 8003f54:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003f5e:	2305      	movs	r3, #5
 8003f60:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f62:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003f66:	4619      	mov	r1, r3
 8003f68:	4805      	ldr	r0, [pc, #20]	@ (8003f80 <HAL_UART_MspInit+0xb0>)
 8003f6a:	f002 fd27 	bl	80069bc <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8003f6e:	bf00      	nop
 8003f70:	3778      	adds	r7, #120	@ 0x78
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40004c00 	.word	0x40004c00
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	48000800 	.word	0x48000800

08003f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f88:	bf00      	nop
 8003f8a:	e7fd      	b.n	8003f88 <NMI_Handler+0x4>

08003f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f90:	bf00      	nop
 8003f92:	e7fd      	b.n	8003f90 <HardFault_Handler+0x4>

08003f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f98:	bf00      	nop
 8003f9a:	e7fd      	b.n	8003f98 <MemManage_Handler+0x4>

08003f9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fa0:	bf00      	nop
 8003fa2:	e7fd      	b.n	8003fa0 <BusFault_Handler+0x4>

08003fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fa8:	bf00      	nop
 8003faa:	e7fd      	b.n	8003fa8 <UsageFault_Handler+0x4>

08003fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fb0:	bf00      	nop
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fbe:	bf00      	nop
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fda:	f000 f9af 	bl	800433c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fde:	bf00      	nop
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003fe8:	4802      	ldr	r0, [pc, #8]	@ (8003ff4 <DMA1_Channel1_IRQHandler+0x10>)
 8003fea:	f002 fb98 	bl	800671e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000564 	.word	0x20000564

08003ff8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8003ffc:	4802      	ldr	r0, [pc, #8]	@ (8004008 <DMA1_Channel2_IRQHandler+0x10>)
 8003ffe:	f002 fb8e 	bl	800671e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200005c4 	.word	0x200005c4

0800400c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8004010:	4802      	ldr	r0, [pc, #8]	@ (800401c <DMA1_Channel3_IRQHandler+0x10>)
 8004012:	f002 fb84 	bl	800671e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000624 	.word	0x20000624

08004020 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004024:	4802      	ldr	r0, [pc, #8]	@ (8004030 <DMA1_Channel4_IRQHandler+0x10>)
 8004026:	f002 fb7a 	bl	800671e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	200006d4 	.word	0x200006d4

08004034 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8004038:	4802      	ldr	r0, [pc, #8]	@ (8004044 <DMA1_Channel5_IRQHandler+0x10>)
 800403a:	f002 fb70 	bl	800671e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000734 	.word	0x20000734

08004048 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800404c:	4802      	ldr	r0, [pc, #8]	@ (8004058 <USB_LP_IRQHandler+0x10>)
 800404e:	f002 ff71 	bl	8006f34 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20002060 	.word	0x20002060

0800405c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004060:	4803      	ldr	r0, [pc, #12]	@ (8004070 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8004062:	f005 feb5 	bl	8009dd0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8004066:	4803      	ldr	r0, [pc, #12]	@ (8004074 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8004068:	f005 feb2 	bl	8009dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800406c:	bf00      	nop
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000794 	.word	0x20000794
 8004074:	20000910 	.word	0x20000910

08004078 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
					HEAT_SINK_TEMP = (ADC3_DMA_BUFFER[4]/4096)*3.3;//(Low_pass_filter(ADC3_DMA_BUFFER[4], HEAT_SINK_TEMP)/4096)*3.3;
					FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
					}*/

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800407c:	4803      	ldr	r0, [pc, #12]	@ (800408c <TIM6_DAC_IRQHandler+0x14>)
 800407e:	f005 fea7 	bl	8009dd0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8004082:	4803      	ldr	r0, [pc, #12]	@ (8004090 <TIM6_DAC_IRQHandler+0x18>)
 8004084:	f001 ffd8 	bl	8006038 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004088:	bf00      	nop
 800408a:	bd80      	pop	{r7, pc}
 800408c:	2000082c 	.word	0x2000082c
 8004090:	200006ac 	.word	0x200006ac

08004094 <_getpid>:
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
 8004098:	2301      	movs	r3, #1
 800409a:	4618      	mov	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <_kill>:
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
 80040ae:	f00d fbaf 	bl	8011810 <__errno>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2216      	movs	r2, #22
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	f04f 33ff 	mov.w	r3, #4294967295
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <_exit>:
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	f04f 31ff 	mov.w	r1, #4294967295
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff ffe7 	bl	80040a4 <_kill>
 80040d6:	bf00      	nop
 80040d8:	e7fd      	b.n	80040d6 <_exit+0x12>

080040da <_read>:
 80040da:	b580      	push	{r7, lr}
 80040dc:	b086      	sub	sp, #24
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	e00a      	b.n	8004102 <_read+0x28>
 80040ec:	f3af 8000 	nop.w
 80040f0:	4601      	mov	r1, r0
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	60ba      	str	r2, [r7, #8]
 80040f8:	b2ca      	uxtb	r2, r1
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	3301      	adds	r3, #1
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	dbf0      	blt.n	80040ec <_read+0x12>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <_write>:
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	e009      	b.n	800413a <_write+0x26>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	60ba      	str	r2, [r7, #8]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f3af 8000 	nop.w
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	3301      	adds	r3, #1
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	429a      	cmp	r2, r3
 8004140:	dbf1      	blt.n	8004126 <_write+0x12>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <_close>:
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	f04f 33ff 	mov.w	r3, #4294967295
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <_fstat>:
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004174:	605a      	str	r2, [r3, #4]
 8004176:	2300      	movs	r3, #0
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <_isatty>:
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	2301      	movs	r3, #1
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <_lseek>:
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	2300      	movs	r3, #0
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <_sbrk>:
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	4a14      	ldr	r2, [pc, #80]	@ (8004210 <_sbrk+0x5c>)
 80041be:	4b15      	ldr	r3, [pc, #84]	@ (8004214 <_sbrk+0x60>)
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	4b13      	ldr	r3, [pc, #76]	@ (8004218 <_sbrk+0x64>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <_sbrk+0x22>
 80041d0:	4b11      	ldr	r3, [pc, #68]	@ (8004218 <_sbrk+0x64>)
 80041d2:	4a12      	ldr	r2, [pc, #72]	@ (800421c <_sbrk+0x68>)
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	4b10      	ldr	r3, [pc, #64]	@ (8004218 <_sbrk+0x64>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4413      	add	r3, r2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d207      	bcs.n	80041f4 <_sbrk+0x40>
 80041e4:	f00d fb14 	bl	8011810 <__errno>
 80041e8:	4603      	mov	r3, r0
 80041ea:	220c      	movs	r2, #12
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	f04f 33ff 	mov.w	r3, #4294967295
 80041f2:	e009      	b.n	8004208 <_sbrk+0x54>
 80041f4:	4b08      	ldr	r3, [pc, #32]	@ (8004218 <_sbrk+0x64>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	4b07      	ldr	r3, [pc, #28]	@ (8004218 <_sbrk+0x64>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	4a05      	ldr	r2, [pc, #20]	@ (8004218 <_sbrk+0x64>)
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20020000 	.word	0x20020000
 8004214:	00000400 	.word	0x00000400
 8004218:	20000b84 	.word	0x20000b84
 800421c:	200026a8 	.word	0x200026a8

08004220 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004224:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <SystemInit+0x20>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422a:	4a05      	ldr	r2, [pc, #20]	@ (8004240 <SystemInit+0x20>)
 800422c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <Reset_Handler>:
 8004244:	480d      	ldr	r0, [pc, #52]	@ (800427c <LoopForever+0x2>)
 8004246:	4685      	mov	sp, r0
 8004248:	f7ff ffea 	bl	8004220 <SystemInit>
 800424c:	480c      	ldr	r0, [pc, #48]	@ (8004280 <LoopForever+0x6>)
 800424e:	490d      	ldr	r1, [pc, #52]	@ (8004284 <LoopForever+0xa>)
 8004250:	4a0d      	ldr	r2, [pc, #52]	@ (8004288 <LoopForever+0xe>)
 8004252:	2300      	movs	r3, #0
 8004254:	e002      	b.n	800425c <LoopCopyDataInit>

08004256 <CopyDataInit>:
 8004256:	58d4      	ldr	r4, [r2, r3]
 8004258:	50c4      	str	r4, [r0, r3]
 800425a:	3304      	adds	r3, #4

0800425c <LoopCopyDataInit>:
 800425c:	18c4      	adds	r4, r0, r3
 800425e:	428c      	cmp	r4, r1
 8004260:	d3f9      	bcc.n	8004256 <CopyDataInit>
 8004262:	4a0a      	ldr	r2, [pc, #40]	@ (800428c <LoopForever+0x12>)
 8004264:	4c0a      	ldr	r4, [pc, #40]	@ (8004290 <LoopForever+0x16>)
 8004266:	2300      	movs	r3, #0
 8004268:	e001      	b.n	800426e <LoopFillZerobss>

0800426a <FillZerobss>:
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	3204      	adds	r2, #4

0800426e <LoopFillZerobss>:
 800426e:	42a2      	cmp	r2, r4
 8004270:	d3fb      	bcc.n	800426a <FillZerobss>
 8004272:	f00d fad3 	bl	801181c <__libc_init_array>
 8004276:	f7fc fedf 	bl	8001038 <main>

0800427a <LoopForever>:
 800427a:	e7fe      	b.n	800427a <LoopForever>
 800427c:	20020000 	.word	0x20020000
 8004280:	20000000 	.word	0x20000000
 8004284:	20000398 	.word	0x20000398
 8004288:	08017388 	.word	0x08017388
 800428c:	20000398 	.word	0x20000398
 8004290:	200026a8 	.word	0x200026a8

08004294 <ADC1_2_IRQHandler>:
 8004294:	e7fe      	b.n	8004294 <ADC1_2_IRQHandler>

08004296 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042a0:	2003      	movs	r0, #3
 80042a2:	f001 fdfb 	bl	8005e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042a6:	2000      	movs	r0, #0
 80042a8:	f000 f80e 	bl	80042c8 <HAL_InitTick>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	71fb      	strb	r3, [r7, #7]
 80042b6:	e001      	b.n	80042bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80042b8:	f7ff f9f0 	bl	800369c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042bc:	79fb      	ldrb	r3, [r7, #7]

}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80042d4:	4b16      	ldr	r3, [pc, #88]	@ (8004330 <HAL_InitTick+0x68>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d022      	beq.n	8004322 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80042dc:	4b15      	ldr	r3, [pc, #84]	@ (8004334 <HAL_InitTick+0x6c>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b13      	ldr	r3, [pc, #76]	@ (8004330 <HAL_InitTick+0x68>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80042e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	4618      	mov	r0, r3
 80042f2:	f001 fe06 	bl	8005f02 <HAL_SYSTICK_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10f      	bne.n	800431c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b0f      	cmp	r3, #15
 8004300:	d809      	bhi.n	8004316 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004302:	2200      	movs	r2, #0
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	f04f 30ff 	mov.w	r0, #4294967295
 800430a:	f001 fdd2 	bl	8005eb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800430e:	4a0a      	ldr	r2, [pc, #40]	@ (8004338 <HAL_InitTick+0x70>)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	e007      	b.n	8004326 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
 800431a:	e004      	b.n	8004326 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
 8004320:	e001      	b.n	8004326 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004326:	7bfb      	ldrb	r3, [r7, #15]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20000044 	.word	0x20000044
 8004334:	2000003c 	.word	0x2000003c
 8004338:	20000040 	.word	0x20000040

0800433c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004340:	4b05      	ldr	r3, [pc, #20]	@ (8004358 <HAL_IncTick+0x1c>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b05      	ldr	r3, [pc, #20]	@ (800435c <HAL_IncTick+0x20>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4413      	add	r3, r2
 800434a:	4a03      	ldr	r2, [pc, #12]	@ (8004358 <HAL_IncTick+0x1c>)
 800434c:	6013      	str	r3, [r2, #0]
}
 800434e:	bf00      	nop
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	20000b88 	.word	0x20000b88
 800435c:	20000044 	.word	0x20000044

08004360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return uwTick;
 8004364:	4b03      	ldr	r3, [pc, #12]	@ (8004374 <HAL_GetTick+0x14>)
 8004366:	681b      	ldr	r3, [r3, #0]
}
 8004368:	4618      	mov	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20000b88 	.word	0x20000b88

08004378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004380:	f7ff ffee 	bl	8004360 <HAL_GetTick>
 8004384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d004      	beq.n	800439c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004392:	4b09      	ldr	r3, [pc, #36]	@ (80043b8 <HAL_Delay+0x40>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800439c:	bf00      	nop
 800439e:	f7ff ffdf 	bl	8004360 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d8f7      	bhi.n	800439e <HAL_Delay+0x26>
  {
  }
}
 80043ae:	bf00      	nop
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	20000044 	.word	0x20000044

080043bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	609a      	str	r2, [r3, #8]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	609a      	str	r2, [r3, #8]
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3360      	adds	r3, #96	@ 0x60
 8004436:	461a      	mov	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b08      	ldr	r3, [pc, #32]	@ (8004468 <LL_ADC_SetOffset+0x44>)
 8004446:	4013      	ands	r3, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	4313      	orrs	r3, r2
 8004454:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800445c:	bf00      	nop
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	03fff000 	.word	0x03fff000

0800446c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3360      	adds	r3, #96	@ 0x60
 800447a:	461a      	mov	r2, r3
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3360      	adds	r3, #96	@ 0x60
 80044a8:	461a      	mov	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	431a      	orrs	r2, r3
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80044c2:	bf00      	nop
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b087      	sub	sp, #28
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3360      	adds	r3, #96	@ 0x60
 80044de:	461a      	mov	r2, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80044f8:	bf00      	nop
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3360      	adds	r3, #96	@ 0x60
 8004514:	461a      	mov	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	431a      	orrs	r2, r3
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	615a      	str	r2, [r3, #20]
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004586:	b480      	push	{r7}
 8004588:	b087      	sub	sp, #28
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3330      	adds	r3, #48	@ 0x30
 8004596:	461a      	mov	r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	0a1b      	lsrs	r3, r3, #8
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	4413      	add	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	211f      	movs	r1, #31
 80045b2:	fa01 f303 	lsl.w	r3, r1, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	401a      	ands	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0e9b      	lsrs	r3, r3, #26
 80045be:	f003 011f 	and.w	r1, r3, #31
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	fa01 f303 	lsl.w	r3, r1, r3
 80045cc:	431a      	orrs	r2, r3
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80045de:	b480      	push	{r7}
 80045e0:	b087      	sub	sp, #28
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3314      	adds	r3, #20
 80045ee:	461a      	mov	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	0e5b      	lsrs	r3, r3, #25
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	4413      	add	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	0d1b      	lsrs	r3, r3, #20
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	2107      	movs	r1, #7
 800460c:	fa01 f303 	lsl.w	r3, r1, r3
 8004610:	43db      	mvns	r3, r3
 8004612:	401a      	ands	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	0d1b      	lsrs	r3, r3, #20
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	fa01 f303 	lsl.w	r3, r1, r3
 8004622:	431a      	orrs	r2, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004628:	bf00      	nop
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800464c:	43db      	mvns	r3, r3
 800464e:	401a      	ands	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f003 0318 	and.w	r3, r3, #24
 8004656:	4908      	ldr	r1, [pc, #32]	@ (8004678 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004658:	40d9      	lsrs	r1, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	400b      	ands	r3, r1
 800465e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004662:	431a      	orrs	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	0007ffff 	.word	0x0007ffff

0800467c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 031f 	and.w	r3, r3, #31
}
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80046a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6093      	str	r3, [r2, #8]
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046d0:	d101      	bne.n	80046d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80046f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004720:	d101      	bne.n	8004726 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004744:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004748:	f043 0201 	orr.w	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800476c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004770:	f043 0202 	orr.w	r2, r3, #2
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <LL_ADC_IsEnabled+0x18>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <LL_ADC_IsEnabled+0x1a>
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d101      	bne.n	80047c2 <LL_ADC_IsDisableOngoing+0x18>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <LL_ADC_IsDisableOngoing+0x1a>
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80047e4:	f043 0204 	orr.w	r2, r3, #4
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b04      	cmp	r3, #4
 800480a:	d101      	bne.n	8004810 <LL_ADC_REG_IsConversionOngoing+0x18>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b08      	cmp	r3, #8
 8004830:	d101      	bne.n	8004836 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004844:	b590      	push	{r4, r7, lr}
 8004846:	b089      	sub	sp, #36	@ 0x24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e1a9      	b.n	8004bb2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d109      	bne.n	8004880 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7fe ff39 	bl	80036e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff ff19 	bl	80046bc <LL_ADC_IsDeepPowerDownEnabled>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d004      	beq.n	800489a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff feff 	bl	8004698 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff ff34 	bl	800470c <LL_ADC_IsInternalRegulatorEnabled>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d115      	bne.n	80048d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff ff18 	bl	80046e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048b4:	4b9c      	ldr	r3, [pc, #624]	@ (8004b28 <HAL_ADC_Init+0x2e4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	099b      	lsrs	r3, r3, #6
 80048ba:	4a9c      	ldr	r2, [pc, #624]	@ (8004b2c <HAL_ADC_Init+0x2e8>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	099b      	lsrs	r3, r3, #6
 80048c2:	3301      	adds	r3, #1
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80048c8:	e002      	b.n	80048d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f9      	bne.n	80048ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff ff16 	bl	800470c <LL_ADC_IsInternalRegulatorEnabled>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10d      	bne.n	8004902 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ea:	f043 0210 	orr.w	r2, r3, #16
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f6:	f043 0201 	orr.w	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff ff76 	bl	80047f8 <LL_ADC_REG_IsConversionOngoing>
 800490c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b00      	cmp	r3, #0
 8004918:	f040 8142 	bne.w	8004ba0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f040 813e 	bne.w	8004ba0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004928:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800492c:	f043 0202 	orr.w	r2, r3, #2
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff23 	bl	8004784 <LL_ADC_IsEnabled>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d141      	bne.n	80049c8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800494c:	d004      	beq.n	8004958 <HAL_ADC_Init+0x114>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a77      	ldr	r2, [pc, #476]	@ (8004b30 <HAL_ADC_Init+0x2ec>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d10f      	bne.n	8004978 <HAL_ADC_Init+0x134>
 8004958:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800495c:	f7ff ff12 	bl	8004784 <LL_ADC_IsEnabled>
 8004960:	4604      	mov	r4, r0
 8004962:	4873      	ldr	r0, [pc, #460]	@ (8004b30 <HAL_ADC_Init+0x2ec>)
 8004964:	f7ff ff0e 	bl	8004784 <LL_ADC_IsEnabled>
 8004968:	4603      	mov	r3, r0
 800496a:	4323      	orrs	r3, r4
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf0c      	ite	eq
 8004970:	2301      	moveq	r3, #1
 8004972:	2300      	movne	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	e012      	b.n	800499e <HAL_ADC_Init+0x15a>
 8004978:	486e      	ldr	r0, [pc, #440]	@ (8004b34 <HAL_ADC_Init+0x2f0>)
 800497a:	f7ff ff03 	bl	8004784 <LL_ADC_IsEnabled>
 800497e:	4604      	mov	r4, r0
 8004980:	486d      	ldr	r0, [pc, #436]	@ (8004b38 <HAL_ADC_Init+0x2f4>)
 8004982:	f7ff feff 	bl	8004784 <LL_ADC_IsEnabled>
 8004986:	4603      	mov	r3, r0
 8004988:	431c      	orrs	r4, r3
 800498a:	486c      	ldr	r0, [pc, #432]	@ (8004b3c <HAL_ADC_Init+0x2f8>)
 800498c:	f7ff fefa 	bl	8004784 <LL_ADC_IsEnabled>
 8004990:	4603      	mov	r3, r0
 8004992:	4323      	orrs	r3, r4
 8004994:	2b00      	cmp	r3, #0
 8004996:	bf0c      	ite	eq
 8004998:	2301      	moveq	r3, #1
 800499a:	2300      	movne	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d012      	beq.n	80049c8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049aa:	d004      	beq.n	80049b6 <HAL_ADC_Init+0x172>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a5f      	ldr	r2, [pc, #380]	@ (8004b30 <HAL_ADC_Init+0x2ec>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d101      	bne.n	80049ba <HAL_ADC_Init+0x176>
 80049b6:	4a62      	ldr	r2, [pc, #392]	@ (8004b40 <HAL_ADC_Init+0x2fc>)
 80049b8:	e000      	b.n	80049bc <HAL_ADC_Init+0x178>
 80049ba:	4a62      	ldr	r2, [pc, #392]	@ (8004b44 <HAL_ADC_Init+0x300>)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	4619      	mov	r1, r3
 80049c2:	4610      	mov	r0, r2
 80049c4:	f7ff fcfa 	bl	80043bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	7f5b      	ldrb	r3, [r3, #29]
 80049cc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049d2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80049d8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80049de:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049e6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d106      	bne.n	8004a04 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fa:	3b01      	subs	r3, #1
 80049fc:	045b      	lsls	r3, r3, #17
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d009      	beq.n	8004a20 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a18:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	4b48      	ldr	r3, [pc, #288]	@ (8004b48 <HAL_ADC_Init+0x304>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6812      	ldr	r2, [r2, #0]
 8004a2e:	69b9      	ldr	r1, [r7, #24]
 8004a30:	430b      	orrs	r3, r1
 8004a32:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff fee5 	bl	800481e <LL_ADC_INJ_IsConversionOngoing>
 8004a54:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d17f      	bne.n	8004b5c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d17c      	bne.n	8004b5c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a66:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a6e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a7e:	f023 0302 	bic.w	r3, r3, #2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	69b9      	ldr	r1, [r7, #24]
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d017      	beq.n	8004ac4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004aa2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004aac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004ab0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6911      	ldr	r1, [r2, #16]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	430b      	orrs	r3, r1
 8004abe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004ac2:	e013      	b.n	8004aec <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004ad2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004ae4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ae8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d12a      	bne.n	8004b4c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b00:	f023 0304 	bic.w	r3, r3, #4
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b0c:	4311      	orrs	r1, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004b12:	4311      	orrs	r1, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0201 	orr.w	r2, r2, #1
 8004b24:	611a      	str	r2, [r3, #16]
 8004b26:	e019      	b.n	8004b5c <HAL_ADC_Init+0x318>
 8004b28:	2000003c 	.word	0x2000003c
 8004b2c:	053e2d63 	.word	0x053e2d63
 8004b30:	50000100 	.word	0x50000100
 8004b34:	50000400 	.word	0x50000400
 8004b38:	50000500 	.word	0x50000500
 8004b3c:	50000600 	.word	0x50000600
 8004b40:	50000300 	.word	0x50000300
 8004b44:	50000700 	.word	0x50000700
 8004b48:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d10c      	bne.n	8004b7e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6a:	f023 010f 	bic.w	r1, r3, #15
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	1e5a      	subs	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b7c:	e007      	b.n	8004b8e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 020f 	bic.w	r2, r2, #15
 8004b8c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b92:	f023 0303 	bic.w	r3, r3, #3
 8004b96:	f043 0201 	orr.w	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b9e:	e007      	b.n	8004bb0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba4:	f043 0210 	orr.w	r2, r3, #16
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3724      	adds	r7, #36	@ 0x24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd90      	pop	{r4, r7, pc}
 8004bba:	bf00      	nop

08004bbc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bd0:	d004      	beq.n	8004bdc <HAL_ADC_Start_DMA+0x20>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a5a      	ldr	r2, [pc, #360]	@ (8004d40 <HAL_ADC_Start_DMA+0x184>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d101      	bne.n	8004be0 <HAL_ADC_Start_DMA+0x24>
 8004bdc:	4b59      	ldr	r3, [pc, #356]	@ (8004d44 <HAL_ADC_Start_DMA+0x188>)
 8004bde:	e000      	b.n	8004be2 <HAL_ADC_Start_DMA+0x26>
 8004be0:	4b59      	ldr	r3, [pc, #356]	@ (8004d48 <HAL_ADC_Start_DMA+0x18c>)
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff fd4a 	bl	800467c <LL_ADC_GetMultimode>
 8004be8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff fe02 	bl	80047f8 <LL_ADC_REG_IsConversionOngoing>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f040 809b 	bne.w	8004d32 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_ADC_Start_DMA+0x4e>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e096      	b.n	8004d38 <HAL_ADC_Start_DMA+0x17c>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a4d      	ldr	r2, [pc, #308]	@ (8004d4c <HAL_ADC_Start_DMA+0x190>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d008      	beq.n	8004c2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b05      	cmp	r3, #5
 8004c26:	d002      	beq.n	8004c2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	2b09      	cmp	r3, #9
 8004c2c:	d17a      	bne.n	8004d24 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fcec 	bl	800560c <ADC_Enable>
 8004c34:	4603      	mov	r3, r0
 8004c36:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d16d      	bne.n	8004d1a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c42:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a3a      	ldr	r2, [pc, #232]	@ (8004d40 <HAL_ADC_Start_DMA+0x184>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d009      	beq.n	8004c70 <HAL_ADC_Start_DMA+0xb4>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a3b      	ldr	r2, [pc, #236]	@ (8004d50 <HAL_ADC_Start_DMA+0x194>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d002      	beq.n	8004c6c <HAL_ADC_Start_DMA+0xb0>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	e003      	b.n	8004c74 <HAL_ADC_Start_DMA+0xb8>
 8004c6c:	4b39      	ldr	r3, [pc, #228]	@ (8004d54 <HAL_ADC_Start_DMA+0x198>)
 8004c6e:	e001      	b.n	8004c74 <HAL_ADC_Start_DMA+0xb8>
 8004c70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d002      	beq.n	8004c82 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d105      	bne.n	8004c8e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c86:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d006      	beq.n	8004ca8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c9e:	f023 0206 	bic.w	r2, r3, #6
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	661a      	str	r2, [r3, #96]	@ 0x60
 8004ca6:	e002      	b.n	8004cae <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb2:	4a29      	ldr	r2, [pc, #164]	@ (8004d58 <HAL_ADC_Start_DMA+0x19c>)
 8004cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cba:	4a28      	ldr	r2, [pc, #160]	@ (8004d5c <HAL_ADC_Start_DMA+0x1a0>)
 8004cbc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc2:	4a27      	ldr	r2, [pc, #156]	@ (8004d60 <HAL_ADC_Start_DMA+0x1a4>)
 8004cc4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	221c      	movs	r2, #28
 8004ccc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0210 	orr.w	r2, r2, #16
 8004ce4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0201 	orr.w	r2, r2, #1
 8004cf4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3340      	adds	r3, #64	@ 0x40
 8004d00:	4619      	mov	r1, r3
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f001 fc8f 	bl	8006628 <HAL_DMA_Start_IT>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff fd5c 	bl	80047d0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004d18:	e00d      	b.n	8004d36 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004d22:	e008      	b.n	8004d36 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004d30:	e001      	b.n	8004d36 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d32:	2302      	movs	r3, #2
 8004d34:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	50000100 	.word	0x50000100
 8004d44:	50000300 	.word	0x50000300
 8004d48:	50000700 	.word	0x50000700
 8004d4c:	50000600 	.word	0x50000600
 8004d50:	50000500 	.word	0x50000500
 8004d54:	50000400 	.word	0x50000400
 8004d58:	080057f7 	.word	0x080057f7
 8004d5c:	080058cf 	.word	0x080058cf
 8004d60:	080058eb 	.word	0x080058eb

08004d64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b0b6      	sub	sp, #216	@ 0xd8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d102      	bne.n	8004db0 <HAL_ADC_ConfigChannel+0x24>
 8004daa:	2302      	movs	r3, #2
 8004dac:	f000 bc13 	b.w	80055d6 <HAL_ADC_ConfigChannel+0x84a>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff fd1b 	bl	80047f8 <LL_ADC_REG_IsConversionOngoing>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 83f3 	bne.w	80055b0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6859      	ldr	r1, [r3, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f7ff fbd5 	bl	8004586 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff fd09 	bl	80047f8 <LL_ADC_REG_IsConversionOngoing>
 8004de6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff fd15 	bl	800481e <LL_ADC_INJ_IsConversionOngoing>
 8004df4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004df8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f040 81d9 	bne.w	80051b4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f040 81d4 	bne.w	80051b4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e14:	d10f      	bne.n	8004e36 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	4619      	mov	r1, r3
 8004e22:	f7ff fbdc 	bl	80045de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fb83 	bl	800453a <LL_ADC_SetSamplingTimeCommonConfig>
 8004e34:	e00e      	b.n	8004e54 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6819      	ldr	r1, [r3, #0]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	461a      	mov	r2, r3
 8004e44:	f7ff fbcb 	bl	80045de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff fb73 	bl	800453a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	08db      	lsrs	r3, r3, #3
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d022      	beq.n	8004ebc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6919      	ldr	r1, [r3, #16]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004e86:	f7ff facd 	bl	8004424 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6919      	ldr	r1, [r3, #16]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f7ff fb19 	bl	80044ce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d102      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x126>
 8004eac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004eb0:	e000      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x128>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f7ff fb25 	bl	8004504 <LL_ADC_SetOffsetSaturation>
 8004eba:	e17b      	b.n	80051b4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fad2 	bl	800446c <LL_ADC_GetOffsetChannel>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <HAL_ADC_ConfigChannel+0x15c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fac7 	bl	800446c <LL_ADC_GetOffsetChannel>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	0e9b      	lsrs	r3, r3, #26
 8004ee2:	f003 021f 	and.w	r2, r3, #31
 8004ee6:	e01e      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x19a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2100      	movs	r1, #0
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff fabc 	bl	800446c <LL_ADC_GetOffsetChannel>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004efe:	fa93 f3a3 	rbit	r3, r3
 8004f02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004f16:	2320      	movs	r3, #32
 8004f18:	e004      	b.n	8004f24 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004f1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f1e:	fab3 f383 	clz	r3, r3
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d105      	bne.n	8004f3e <HAL_ADC_ConfigChannel+0x1b2>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	0e9b      	lsrs	r3, r3, #26
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	e018      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x1e4>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004f4a:	fa93 f3a3 	rbit	r3, r3
 8004f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004f5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004f62:	2320      	movs	r3, #32
 8004f64:	e004      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004f66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f6a:	fab3 f383 	clz	r3, r3
 8004f6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d106      	bne.n	8004f82 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fa8b 	bl	8004498 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2101      	movs	r1, #1
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff fa6f 	bl	800446c <LL_ADC_GetOffsetChannel>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x222>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff fa64 	bl	800446c <LL_ADC_GetOffsetChannel>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	0e9b      	lsrs	r3, r3, #26
 8004fa8:	f003 021f 	and.w	r2, r3, #31
 8004fac:	e01e      	b.n	8004fec <HAL_ADC_ConfigChannel+0x260>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff fa59 	bl	800446c <LL_ADC_GetOffsetChannel>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004fc4:	fa93 f3a3 	rbit	r3, r3
 8004fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004fcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004fd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004fdc:	2320      	movs	r3, #32
 8004fde:	e004      	b.n	8004fea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004fe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004fe4:	fab3 f383 	clz	r3, r3
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d105      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x278>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	0e9b      	lsrs	r3, r3, #26
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	e018      	b.n	8005036 <HAL_ADC_ConfigChannel+0x2aa>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005010:	fa93 f3a3 	rbit	r3, r3
 8005014:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005018:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800501c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005020:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005028:	2320      	movs	r3, #32
 800502a:	e004      	b.n	8005036 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800502c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005036:	429a      	cmp	r2, r3
 8005038:	d106      	bne.n	8005048 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2200      	movs	r2, #0
 8005040:	2101      	movs	r1, #1
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fa28 	bl	8004498 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2102      	movs	r1, #2
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff fa0c 	bl	800446c <LL_ADC_GetOffsetChannel>
 8005054:	4603      	mov	r3, r0
 8005056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x2e8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2102      	movs	r1, #2
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff fa01 	bl	800446c <LL_ADC_GetOffsetChannel>
 800506a:	4603      	mov	r3, r0
 800506c:	0e9b      	lsrs	r3, r3, #26
 800506e:	f003 021f 	and.w	r2, r3, #31
 8005072:	e01e      	b.n	80050b2 <HAL_ADC_ConfigChannel+0x326>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2102      	movs	r1, #2
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff f9f6 	bl	800446c <LL_ADC_GetOffsetChannel>
 8005080:	4603      	mov	r3, r0
 8005082:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005086:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800508a:	fa93 f3a3 	rbit	r3, r3
 800508e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005092:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005096:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800509a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80050a2:	2320      	movs	r3, #32
 80050a4:	e004      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80050a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80050aa:	fab3 f383 	clz	r3, r3
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d105      	bne.n	80050ca <HAL_ADC_ConfigChannel+0x33e>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	0e9b      	lsrs	r3, r3, #26
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	e016      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x36c>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80050d6:	fa93 f3a3 	rbit	r3, r3
 80050da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80050dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80050e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80050ea:	2320      	movs	r3, #32
 80050ec:	e004      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80050ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050f2:	fab3 f383 	clz	r3, r3
 80050f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d106      	bne.n	800510a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2200      	movs	r2, #0
 8005102:	2102      	movs	r1, #2
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff f9c7 	bl	8004498 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2103      	movs	r1, #3
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff f9ab 	bl	800446c <LL_ADC_GetOffsetChannel>
 8005116:	4603      	mov	r3, r0
 8005118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10a      	bne.n	8005136 <HAL_ADC_ConfigChannel+0x3aa>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2103      	movs	r1, #3
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff f9a0 	bl	800446c <LL_ADC_GetOffsetChannel>
 800512c:	4603      	mov	r3, r0
 800512e:	0e9b      	lsrs	r3, r3, #26
 8005130:	f003 021f 	and.w	r2, r3, #31
 8005134:	e017      	b.n	8005166 <HAL_ADC_ConfigChannel+0x3da>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2103      	movs	r1, #3
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff f995 	bl	800446c <LL_ADC_GetOffsetChannel>
 8005142:	4603      	mov	r3, r0
 8005144:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005146:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005148:	fa93 f3a3 	rbit	r3, r3
 800514c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800514e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005150:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005152:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005158:	2320      	movs	r3, #32
 800515a:	e003      	b.n	8005164 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800515c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800515e:	fab3 f383 	clz	r3, r3
 8005162:	b2db      	uxtb	r3, r3
 8005164:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800516e:	2b00      	cmp	r3, #0
 8005170:	d105      	bne.n	800517e <HAL_ADC_ConfigChannel+0x3f2>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	0e9b      	lsrs	r3, r3, #26
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	e011      	b.n	80051a2 <HAL_ADC_ConfigChannel+0x416>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005184:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005186:	fa93 f3a3 	rbit	r3, r3
 800518a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800518c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800518e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005196:	2320      	movs	r3, #32
 8005198:	e003      	b.n	80051a2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800519a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800519c:	fab3 f383 	clz	r3, r3
 80051a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d106      	bne.n	80051b4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	2103      	movs	r1, #3
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff f972 	bl	8004498 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff fae3 	bl	8004784 <LL_ADC_IsEnabled>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f040 813d 	bne.w	8005440 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6819      	ldr	r1, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f7ff fa2e 	bl	8004634 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	4aa2      	ldr	r2, [pc, #648]	@ (8005468 <HAL_ADC_ConfigChannel+0x6dc>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	f040 812e 	bne.w	8005440 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <HAL_ADC_ConfigChannel+0x480>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	0e9b      	lsrs	r3, r3, #26
 80051fa:	3301      	adds	r3, #1
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	2b09      	cmp	r3, #9
 8005202:	bf94      	ite	ls
 8005204:	2301      	movls	r3, #1
 8005206:	2300      	movhi	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	e019      	b.n	8005240 <HAL_ADC_ConfigChannel+0x4b4>
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005212:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005214:	fa93 f3a3 	rbit	r3, r3
 8005218:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800521a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800521c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800521e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005224:	2320      	movs	r3, #32
 8005226:	e003      	b.n	8005230 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005228:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800522a:	fab3 f383 	clz	r3, r3
 800522e:	b2db      	uxtb	r3, r3
 8005230:	3301      	adds	r3, #1
 8005232:	f003 031f 	and.w	r3, r3, #31
 8005236:	2b09      	cmp	r3, #9
 8005238:	bf94      	ite	ls
 800523a:	2301      	movls	r3, #1
 800523c:	2300      	movhi	r3, #0
 800523e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005240:	2b00      	cmp	r3, #0
 8005242:	d079      	beq.n	8005338 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800524c:	2b00      	cmp	r3, #0
 800524e:	d107      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x4d4>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	0e9b      	lsrs	r3, r3, #26
 8005256:	3301      	adds	r3, #1
 8005258:	069b      	lsls	r3, r3, #26
 800525a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800525e:	e015      	b.n	800528c <HAL_ADC_ConfigChannel+0x500>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005268:	fa93 f3a3 	rbit	r3, r3
 800526c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800526e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005270:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005278:	2320      	movs	r3, #32
 800527a:	e003      	b.n	8005284 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800527c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800527e:	fab3 f383 	clz	r3, r3
 8005282:	b2db      	uxtb	r3, r3
 8005284:	3301      	adds	r3, #1
 8005286:	069b      	lsls	r3, r3, #26
 8005288:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005294:	2b00      	cmp	r3, #0
 8005296:	d109      	bne.n	80052ac <HAL_ADC_ConfigChannel+0x520>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	0e9b      	lsrs	r3, r3, #26
 800529e:	3301      	adds	r3, #1
 80052a0:	f003 031f 	and.w	r3, r3, #31
 80052a4:	2101      	movs	r1, #1
 80052a6:	fa01 f303 	lsl.w	r3, r1, r3
 80052aa:	e017      	b.n	80052dc <HAL_ADC_ConfigChannel+0x550>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052b4:	fa93 f3a3 	rbit	r3, r3
 80052b8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80052ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80052be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80052c4:	2320      	movs	r3, #32
 80052c6:	e003      	b.n	80052d0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80052c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052ca:	fab3 f383 	clz	r3, r3
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	3301      	adds	r3, #1
 80052d2:	f003 031f 	and.w	r3, r3, #31
 80052d6:	2101      	movs	r1, #1
 80052d8:	fa01 f303 	lsl.w	r3, r1, r3
 80052dc:	ea42 0103 	orr.w	r1, r2, r3
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10a      	bne.n	8005302 <HAL_ADC_ConfigChannel+0x576>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	0e9b      	lsrs	r3, r3, #26
 80052f2:	3301      	adds	r3, #1
 80052f4:	f003 021f 	and.w	r2, r3, #31
 80052f8:	4613      	mov	r3, r2
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	4413      	add	r3, r2
 80052fe:	051b      	lsls	r3, r3, #20
 8005300:	e018      	b.n	8005334 <HAL_ADC_ConfigChannel+0x5a8>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530a:	fa93 f3a3 	rbit	r3, r3
 800530e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800531a:	2320      	movs	r3, #32
 800531c:	e003      	b.n	8005326 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800531e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005320:	fab3 f383 	clz	r3, r3
 8005324:	b2db      	uxtb	r3, r3
 8005326:	3301      	adds	r3, #1
 8005328:	f003 021f 	and.w	r2, r3, #31
 800532c:	4613      	mov	r3, r2
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	4413      	add	r3, r2
 8005332:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005334:	430b      	orrs	r3, r1
 8005336:	e07e      	b.n	8005436 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005340:	2b00      	cmp	r3, #0
 8005342:	d107      	bne.n	8005354 <HAL_ADC_ConfigChannel+0x5c8>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	0e9b      	lsrs	r3, r3, #26
 800534a:	3301      	adds	r3, #1
 800534c:	069b      	lsls	r3, r3, #26
 800534e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005352:	e015      	b.n	8005380 <HAL_ADC_ConfigChannel+0x5f4>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535c:	fa93 f3a3 	rbit	r3, r3
 8005360:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005364:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800536c:	2320      	movs	r3, #32
 800536e:	e003      	b.n	8005378 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005372:	fab3 f383 	clz	r3, r3
 8005376:	b2db      	uxtb	r3, r3
 8005378:	3301      	adds	r3, #1
 800537a:	069b      	lsls	r3, r3, #26
 800537c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005388:	2b00      	cmp	r3, #0
 800538a:	d109      	bne.n	80053a0 <HAL_ADC_ConfigChannel+0x614>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	0e9b      	lsrs	r3, r3, #26
 8005392:	3301      	adds	r3, #1
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	2101      	movs	r1, #1
 800539a:	fa01 f303 	lsl.w	r3, r1, r3
 800539e:	e017      	b.n	80053d0 <HAL_ADC_ConfigChannel+0x644>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	fa93 f3a3 	rbit	r3, r3
 80053ac:	61fb      	str	r3, [r7, #28]
  return result;
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80053b8:	2320      	movs	r3, #32
 80053ba:	e003      	b.n	80053c4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	fab3 f383 	clz	r3, r3
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	3301      	adds	r3, #1
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	2101      	movs	r1, #1
 80053cc:	fa01 f303 	lsl.w	r3, r1, r3
 80053d0:	ea42 0103 	orr.w	r1, r2, r3
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10d      	bne.n	80053fc <HAL_ADC_ConfigChannel+0x670>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	0e9b      	lsrs	r3, r3, #26
 80053e6:	3301      	adds	r3, #1
 80053e8:	f003 021f 	and.w	r2, r3, #31
 80053ec:	4613      	mov	r3, r2
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4413      	add	r3, r2
 80053f2:	3b1e      	subs	r3, #30
 80053f4:	051b      	lsls	r3, r3, #20
 80053f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80053fa:	e01b      	b.n	8005434 <HAL_ADC_ConfigChannel+0x6a8>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	fa93 f3a3 	rbit	r3, r3
 8005408:	613b      	str	r3, [r7, #16]
  return result;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005414:	2320      	movs	r3, #32
 8005416:	e003      	b.n	8005420 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	fab3 f383 	clz	r3, r3
 800541e:	b2db      	uxtb	r3, r3
 8005420:	3301      	adds	r3, #1
 8005422:	f003 021f 	and.w	r2, r3, #31
 8005426:	4613      	mov	r3, r2
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	4413      	add	r3, r2
 800542c:	3b1e      	subs	r3, #30
 800542e:	051b      	lsls	r3, r3, #20
 8005430:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005434:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800543a:	4619      	mov	r1, r3
 800543c:	f7ff f8cf 	bl	80045de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	4b09      	ldr	r3, [pc, #36]	@ (800546c <HAL_ADC_ConfigChannel+0x6e0>)
 8005446:	4013      	ands	r3, r2
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80be 	beq.w	80055ca <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005456:	d004      	beq.n	8005462 <HAL_ADC_ConfigChannel+0x6d6>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a04      	ldr	r2, [pc, #16]	@ (8005470 <HAL_ADC_ConfigChannel+0x6e4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d10a      	bne.n	8005478 <HAL_ADC_ConfigChannel+0x6ec>
 8005462:	4b04      	ldr	r3, [pc, #16]	@ (8005474 <HAL_ADC_ConfigChannel+0x6e8>)
 8005464:	e009      	b.n	800547a <HAL_ADC_ConfigChannel+0x6ee>
 8005466:	bf00      	nop
 8005468:	407f0000 	.word	0x407f0000
 800546c:	80080000 	.word	0x80080000
 8005470:	50000100 	.word	0x50000100
 8005474:	50000300 	.word	0x50000300
 8005478:	4b59      	ldr	r3, [pc, #356]	@ (80055e0 <HAL_ADC_ConfigChannel+0x854>)
 800547a:	4618      	mov	r0, r3
 800547c:	f7fe ffc4 	bl	8004408 <LL_ADC_GetCommonPathInternalCh>
 8005480:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a56      	ldr	r2, [pc, #344]	@ (80055e4 <HAL_ADC_ConfigChannel+0x858>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d004      	beq.n	8005498 <HAL_ADC_ConfigChannel+0x70c>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a55      	ldr	r2, [pc, #340]	@ (80055e8 <HAL_ADC_ConfigChannel+0x85c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d13a      	bne.n	800550e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800549c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d134      	bne.n	800550e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054ac:	d005      	beq.n	80054ba <HAL_ADC_ConfigChannel+0x72e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a4e      	ldr	r2, [pc, #312]	@ (80055ec <HAL_ADC_ConfigChannel+0x860>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	f040 8085 	bne.w	80055c4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054c2:	d004      	beq.n	80054ce <HAL_ADC_ConfigChannel+0x742>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a49      	ldr	r2, [pc, #292]	@ (80055f0 <HAL_ADC_ConfigChannel+0x864>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d101      	bne.n	80054d2 <HAL_ADC_ConfigChannel+0x746>
 80054ce:	4a49      	ldr	r2, [pc, #292]	@ (80055f4 <HAL_ADC_ConfigChannel+0x868>)
 80054d0:	e000      	b.n	80054d4 <HAL_ADC_ConfigChannel+0x748>
 80054d2:	4a43      	ldr	r2, [pc, #268]	@ (80055e0 <HAL_ADC_ConfigChannel+0x854>)
 80054d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f7fe ff7f 	bl	80043e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054e4:	4b44      	ldr	r3, [pc, #272]	@ (80055f8 <HAL_ADC_ConfigChannel+0x86c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	099b      	lsrs	r3, r3, #6
 80054ea:	4a44      	ldr	r2, [pc, #272]	@ (80055fc <HAL_ADC_ConfigChannel+0x870>)
 80054ec:	fba2 2303 	umull	r2, r3, r2, r3
 80054f0:	099b      	lsrs	r3, r3, #6
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	4613      	mov	r3, r2
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	4413      	add	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054fe:	e002      	b.n	8005506 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3b01      	subs	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f9      	bne.n	8005500 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800550c:	e05a      	b.n	80055c4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a3b      	ldr	r2, [pc, #236]	@ (8005600 <HAL_ADC_ConfigChannel+0x874>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d125      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005518:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800551c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d11f      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a31      	ldr	r2, [pc, #196]	@ (80055f0 <HAL_ADC_ConfigChannel+0x864>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d104      	bne.n	8005538 <HAL_ADC_ConfigChannel+0x7ac>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a34      	ldr	r2, [pc, #208]	@ (8005604 <HAL_ADC_ConfigChannel+0x878>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d047      	beq.n	80055c8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005540:	d004      	beq.n	800554c <HAL_ADC_ConfigChannel+0x7c0>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a2a      	ldr	r2, [pc, #168]	@ (80055f0 <HAL_ADC_ConfigChannel+0x864>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d101      	bne.n	8005550 <HAL_ADC_ConfigChannel+0x7c4>
 800554c:	4a29      	ldr	r2, [pc, #164]	@ (80055f4 <HAL_ADC_ConfigChannel+0x868>)
 800554e:	e000      	b.n	8005552 <HAL_ADC_ConfigChannel+0x7c6>
 8005550:	4a23      	ldr	r2, [pc, #140]	@ (80055e0 <HAL_ADC_ConfigChannel+0x854>)
 8005552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005556:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800555a:	4619      	mov	r1, r3
 800555c:	4610      	mov	r0, r2
 800555e:	f7fe ff40 	bl	80043e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005562:	e031      	b.n	80055c8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a27      	ldr	r2, [pc, #156]	@ (8005608 <HAL_ADC_ConfigChannel+0x87c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d12d      	bne.n	80055ca <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800556e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d127      	bne.n	80055ca <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1c      	ldr	r2, [pc, #112]	@ (80055f0 <HAL_ADC_ConfigChannel+0x864>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d022      	beq.n	80055ca <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800558c:	d004      	beq.n	8005598 <HAL_ADC_ConfigChannel+0x80c>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a17      	ldr	r2, [pc, #92]	@ (80055f0 <HAL_ADC_ConfigChannel+0x864>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d101      	bne.n	800559c <HAL_ADC_ConfigChannel+0x810>
 8005598:	4a16      	ldr	r2, [pc, #88]	@ (80055f4 <HAL_ADC_ConfigChannel+0x868>)
 800559a:	e000      	b.n	800559e <HAL_ADC_ConfigChannel+0x812>
 800559c:	4a10      	ldr	r2, [pc, #64]	@ (80055e0 <HAL_ADC_ConfigChannel+0x854>)
 800559e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80055a6:	4619      	mov	r1, r3
 80055a8:	4610      	mov	r0, r2
 80055aa:	f7fe ff1a 	bl	80043e2 <LL_ADC_SetCommonPathInternalCh>
 80055ae:	e00c      	b.n	80055ca <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b4:	f043 0220 	orr.w	r2, r3, #32
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80055c2:	e002      	b.n	80055ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055c4:	bf00      	nop
 80055c6:	e000      	b.n	80055ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80055d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	37d8      	adds	r7, #216	@ 0xd8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	50000700 	.word	0x50000700
 80055e4:	c3210000 	.word	0xc3210000
 80055e8:	90c00010 	.word	0x90c00010
 80055ec:	50000600 	.word	0x50000600
 80055f0:	50000100 	.word	0x50000100
 80055f4:	50000300 	.word	0x50000300
 80055f8:	2000003c 	.word	0x2000003c
 80055fc:	053e2d63 	.word	0x053e2d63
 8005600:	c7520000 	.word	0xc7520000
 8005604:	50000500 	.word	0x50000500
 8005608:	cb840000 	.word	0xcb840000

0800560c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005614:	2300      	movs	r3, #0
 8005616:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff f8b1 	bl	8004784 <LL_ADC_IsEnabled>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d176      	bne.n	8005716 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	4b3c      	ldr	r3, [pc, #240]	@ (8005720 <ADC_Enable+0x114>)
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00d      	beq.n	8005652 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800563a:	f043 0210 	orr.w	r2, r3, #16
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005646:	f043 0201 	orr.w	r2, r3, #1
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e062      	b.n	8005718 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff f86c 	bl	8004734 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005664:	d004      	beq.n	8005670 <ADC_Enable+0x64>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a2e      	ldr	r2, [pc, #184]	@ (8005724 <ADC_Enable+0x118>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d101      	bne.n	8005674 <ADC_Enable+0x68>
 8005670:	4b2d      	ldr	r3, [pc, #180]	@ (8005728 <ADC_Enable+0x11c>)
 8005672:	e000      	b.n	8005676 <ADC_Enable+0x6a>
 8005674:	4b2d      	ldr	r3, [pc, #180]	@ (800572c <ADC_Enable+0x120>)
 8005676:	4618      	mov	r0, r3
 8005678:	f7fe fec6 	bl	8004408 <LL_ADC_GetCommonPathInternalCh>
 800567c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800567e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005682:	2b00      	cmp	r3, #0
 8005684:	d013      	beq.n	80056ae <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005686:	4b2a      	ldr	r3, [pc, #168]	@ (8005730 <ADC_Enable+0x124>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	099b      	lsrs	r3, r3, #6
 800568c:	4a29      	ldr	r2, [pc, #164]	@ (8005734 <ADC_Enable+0x128>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	099b      	lsrs	r3, r3, #6
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	4613      	mov	r3, r2
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80056a0:	e002      	b.n	80056a8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f9      	bne.n	80056a2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80056ae:	f7fe fe57 	bl	8004360 <HAL_GetTick>
 80056b2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056b4:	e028      	b.n	8005708 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff f862 	bl	8004784 <LL_ADC_IsEnabled>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d104      	bne.n	80056d0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff f832 	bl	8004734 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80056d0:	f7fe fe46 	bl	8004360 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d914      	bls.n	8005708 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d00d      	beq.n	8005708 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f0:	f043 0210 	orr.w	r2, r3, #16
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056fc:	f043 0201 	orr.w	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e007      	b.n	8005718 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b01      	cmp	r3, #1
 8005714:	d1cf      	bne.n	80056b6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	8000003f 	.word	0x8000003f
 8005724:	50000100 	.word	0x50000100
 8005728:	50000300 	.word	0x50000300
 800572c:	50000700 	.word	0x50000700
 8005730:	2000003c 	.word	0x2000003c
 8005734:	053e2d63 	.word	0x053e2d63

08005738 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff f830 	bl	80047aa <LL_ADC_IsDisableOngoing>
 800574a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff f817 	bl	8004784 <LL_ADC_IsEnabled>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d047      	beq.n	80057ec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d144      	bne.n	80057ec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 030d 	and.w	r3, r3, #13
 800576c:	2b01      	cmp	r3, #1
 800576e:	d10c      	bne.n	800578a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f7fe fff1 	bl	800475c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2203      	movs	r2, #3
 8005780:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005782:	f7fe fded 	bl	8004360 <HAL_GetTick>
 8005786:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005788:	e029      	b.n	80057de <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800578e:	f043 0210 	orr.w	r2, r3, #16
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800579a:	f043 0201 	orr.w	r2, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e023      	b.n	80057ee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80057a6:	f7fe fddb 	bl	8004360 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d914      	bls.n	80057de <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00d      	beq.n	80057de <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c6:	f043 0210 	orr.w	r2, r3, #16
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d2:	f043 0201 	orr.w	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e007      	b.n	80057ee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1dc      	bne.n	80057a6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005802:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005808:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800580c:	2b00      	cmp	r3, #0
 800580e:	d14b      	bne.n	80058a8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005814:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d021      	beq.n	800586e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fe96 	bl	8004560 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d032      	beq.n	80058a0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d12b      	bne.n	80058a0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800584c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005858:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d11f      	bne.n	80058a0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005864:	f043 0201 	orr.w	r2, r3, #1
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800586c:	e018      	b.n	80058a0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d111      	bne.n	80058a0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005880:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800588c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005898:	f043 0201 	orr.w	r2, r3, #1
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f7fc ffd5 	bl	8002850 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80058a6:	e00e      	b.n	80058c6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f7ff fa5f 	bl	8004d78 <HAL_ADC_ErrorCallback>
}
 80058ba:	e004      	b.n	80058c6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	4798      	blx	r3
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058da:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff fa41 	bl	8004d64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80058e2:	bf00      	nop
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005908:	f043 0204 	orr.w	r2, r3, #4
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f7ff fa31 	bl	8004d78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005916:	bf00      	nop
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <LL_ADC_IsEnabled>:
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <LL_ADC_IsEnabled+0x18>
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <LL_ADC_IsEnabled+0x1a>
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <LL_ADC_StartCalibration>:
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005956:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005960:	4313      	orrs	r3, r2
 8005962:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	609a      	str	r2, [r3, #8]
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <LL_ADC_IsCalibrationOnGoing>:
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005986:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800598a:	d101      	bne.n	8005990 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <LL_ADC_REG_IsConversionOngoing>:
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d101      	bne.n	80059b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_ADCEx_Calibration_Start+0x1c>
 80059dc:	2302      	movs	r3, #2
 80059de:	e04d      	b.n	8005a7c <HAL_ADCEx_Calibration_Start+0xb8>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff fea5 	bl	8005738 <ADC_Disable>
 80059ee:	4603      	mov	r3, r0
 80059f0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d136      	bne.n	8005a66 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a00:	f023 0302 	bic.w	r3, r3, #2
 8005a04:	f043 0202 	orr.w	r2, r3, #2
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6839      	ldr	r1, [r7, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff ff96 	bl	8005944 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005a18:	e014      	b.n	8005a44 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4a18      	ldr	r2, [pc, #96]	@ (8005a84 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d90d      	bls.n	8005a44 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a2c:	f023 0312 	bic.w	r3, r3, #18
 8005a30:	f043 0210 	orr.w	r2, r3, #16
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e01b      	b.n	8005a7c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff ff94 	bl	8005976 <LL_ADC_IsCalibrationOnGoing>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e2      	bne.n	8005a1a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a58:	f023 0303 	bic.w	r3, r3, #3
 8005a5c:	f043 0201 	orr.w	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a64:	e005      	b.n	8005a72 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a6a:	f043 0210 	orr.w	r2, r3, #16
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	0004de01 	.word	0x0004de01

08005a88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005a88:	b590      	push	{r4, r7, lr}
 8005a8a:	b0a1      	sub	sp, #132	@ 0x84
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e0e7      	b.n	8005c76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005aae:	2300      	movs	r3, #0
 8005ab0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005abe:	d102      	bne.n	8005ac6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005ac0:	4b6f      	ldr	r3, [pc, #444]	@ (8005c80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ac2:	60bb      	str	r3, [r7, #8]
 8005ac4:	e009      	b.n	8005ada <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a6e      	ldr	r2, [pc, #440]	@ (8005c84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d102      	bne.n	8005ad6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005ad0:	4b6d      	ldr	r3, [pc, #436]	@ (8005c88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005ad2:	60bb      	str	r3, [r7, #8]
 8005ad4:	e001      	b.n	8005ada <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10b      	bne.n	8005af8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae4:	f043 0220 	orr.w	r2, r3, #32
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e0be      	b.n	8005c76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff ff4f 	bl	800599e <LL_ADC_REG_IsConversionOngoing>
 8005b00:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff ff49 	bl	800599e <LL_ADC_REG_IsConversionOngoing>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f040 80a0 	bne.w	8005c54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f040 809c 	bne.w	8005c54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b24:	d004      	beq.n	8005b30 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a55      	ldr	r2, [pc, #340]	@ (8005c80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d101      	bne.n	8005b34 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005b30:	4b56      	ldr	r3, [pc, #344]	@ (8005c8c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005b32:	e000      	b.n	8005b36 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005b34:	4b56      	ldr	r3, [pc, #344]	@ (8005c90 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005b36:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d04b      	beq.n	8005bd8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005b40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	6859      	ldr	r1, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005b52:	035b      	lsls	r3, r3, #13
 8005b54:	430b      	orrs	r3, r1
 8005b56:	431a      	orrs	r2, r3
 8005b58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b64:	d004      	beq.n	8005b70 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a45      	ldr	r2, [pc, #276]	@ (8005c80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d10f      	bne.n	8005b90 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005b70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005b74:	f7ff fed3 	bl	800591e <LL_ADC_IsEnabled>
 8005b78:	4604      	mov	r4, r0
 8005b7a:	4841      	ldr	r0, [pc, #260]	@ (8005c80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005b7c:	f7ff fecf 	bl	800591e <LL_ADC_IsEnabled>
 8005b80:	4603      	mov	r3, r0
 8005b82:	4323      	orrs	r3, r4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	bf0c      	ite	eq
 8005b88:	2301      	moveq	r3, #1
 8005b8a:	2300      	movne	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	e012      	b.n	8005bb6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005b90:	483c      	ldr	r0, [pc, #240]	@ (8005c84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005b92:	f7ff fec4 	bl	800591e <LL_ADC_IsEnabled>
 8005b96:	4604      	mov	r4, r0
 8005b98:	483b      	ldr	r0, [pc, #236]	@ (8005c88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005b9a:	f7ff fec0 	bl	800591e <LL_ADC_IsEnabled>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	431c      	orrs	r4, r3
 8005ba2:	483c      	ldr	r0, [pc, #240]	@ (8005c94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005ba4:	f7ff febb 	bl	800591e <LL_ADC_IsEnabled>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	4323      	orrs	r3, r4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	bf0c      	ite	eq
 8005bb0:	2301      	moveq	r3, #1
 8005bb2:	2300      	movne	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d056      	beq.n	8005c68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005bba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005bc2:	f023 030f 	bic.w	r3, r3, #15
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	6811      	ldr	r1, [r2, #0]
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	6892      	ldr	r2, [r2, #8]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bd4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005bd6:	e047      	b.n	8005c68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005bd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005be0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005be2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bec:	d004      	beq.n	8005bf8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a23      	ldr	r2, [pc, #140]	@ (8005c80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d10f      	bne.n	8005c18 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005bf8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005bfc:	f7ff fe8f 	bl	800591e <LL_ADC_IsEnabled>
 8005c00:	4604      	mov	r4, r0
 8005c02:	481f      	ldr	r0, [pc, #124]	@ (8005c80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c04:	f7ff fe8b 	bl	800591e <LL_ADC_IsEnabled>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	4323      	orrs	r3, r4
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	bf0c      	ite	eq
 8005c10:	2301      	moveq	r3, #1
 8005c12:	2300      	movne	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	e012      	b.n	8005c3e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005c18:	481a      	ldr	r0, [pc, #104]	@ (8005c84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005c1a:	f7ff fe80 	bl	800591e <LL_ADC_IsEnabled>
 8005c1e:	4604      	mov	r4, r0
 8005c20:	4819      	ldr	r0, [pc, #100]	@ (8005c88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005c22:	f7ff fe7c 	bl	800591e <LL_ADC_IsEnabled>
 8005c26:	4603      	mov	r3, r0
 8005c28:	431c      	orrs	r4, r3
 8005c2a:	481a      	ldr	r0, [pc, #104]	@ (8005c94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005c2c:	f7ff fe77 	bl	800591e <LL_ADC_IsEnabled>
 8005c30:	4603      	mov	r3, r0
 8005c32:	4323      	orrs	r3, r4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bf0c      	ite	eq
 8005c38:	2301      	moveq	r3, #1
 8005c3a:	2300      	movne	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d012      	beq.n	8005c68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005c42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005c4a:	f023 030f 	bic.w	r3, r3, #15
 8005c4e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005c50:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005c52:	e009      	b.n	8005c68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c58:	f043 0220 	orr.w	r2, r3, #32
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005c66:	e000      	b.n	8005c6a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005c68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005c72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3784      	adds	r7, #132	@ 0x84
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd90      	pop	{r4, r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	50000100 	.word	0x50000100
 8005c84:	50000400 	.word	0x50000400
 8005c88:	50000500 	.word	0x50000500
 8005c8c:	50000300 	.word	0x50000300
 8005c90:	50000700 	.word	0x50000700
 8005c94:	50000600 	.word	0x50000600

08005c98 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e023      	b.n	8005cf2 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fd fed8 	bl	8003a74 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
	...

08005cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d40 <__NVIC_SetPriorityGrouping+0x44>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d18:	4013      	ands	r3, r2
 8005d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d2e:	4a04      	ldr	r2, [pc, #16]	@ (8005d40 <__NVIC_SetPriorityGrouping+0x44>)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	60d3      	str	r3, [r2, #12]
}
 8005d34:	bf00      	nop
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	e000ed00 	.word	0xe000ed00

08005d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d48:	4b04      	ldr	r3, [pc, #16]	@ (8005d5c <__NVIC_GetPriorityGrouping+0x18>)
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	0a1b      	lsrs	r3, r3, #8
 8005d4e:	f003 0307 	and.w	r3, r3, #7
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	e000ed00 	.word	0xe000ed00

08005d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	db0b      	blt.n	8005d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d72:	79fb      	ldrb	r3, [r7, #7]
 8005d74:	f003 021f 	and.w	r2, r3, #31
 8005d78:	4907      	ldr	r1, [pc, #28]	@ (8005d98 <__NVIC_EnableIRQ+0x38>)
 8005d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	2001      	movs	r0, #1
 8005d82:	fa00 f202 	lsl.w	r2, r0, r2
 8005d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	e000e100 	.word	0xe000e100

08005d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4603      	mov	r3, r0
 8005da4:	6039      	str	r1, [r7, #0]
 8005da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	db0a      	blt.n	8005dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	490c      	ldr	r1, [pc, #48]	@ (8005de8 <__NVIC_SetPriority+0x4c>)
 8005db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dba:	0112      	lsls	r2, r2, #4
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dc4:	e00a      	b.n	8005ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	4908      	ldr	r1, [pc, #32]	@ (8005dec <__NVIC_SetPriority+0x50>)
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	3b04      	subs	r3, #4
 8005dd4:	0112      	lsls	r2, r2, #4
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	440b      	add	r3, r1
 8005dda:	761a      	strb	r2, [r3, #24]
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	e000e100 	.word	0xe000e100
 8005dec:	e000ed00 	.word	0xe000ed00

08005df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b089      	sub	sp, #36	@ 0x24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	f1c3 0307 	rsb	r3, r3, #7
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	bf28      	it	cs
 8005e0e:	2304      	movcs	r3, #4
 8005e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	3304      	adds	r3, #4
 8005e16:	2b06      	cmp	r3, #6
 8005e18:	d902      	bls.n	8005e20 <NVIC_EncodePriority+0x30>
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	3b03      	subs	r3, #3
 8005e1e:	e000      	b.n	8005e22 <NVIC_EncodePriority+0x32>
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e24:	f04f 32ff 	mov.w	r2, #4294967295
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2e:	43da      	mvns	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	401a      	ands	r2, r3
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e38:	f04f 31ff 	mov.w	r1, #4294967295
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e42:	43d9      	mvns	r1, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e48:	4313      	orrs	r3, r2
         );
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3724      	adds	r7, #36	@ 0x24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e68:	d301      	bcc.n	8005e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e00f      	b.n	8005e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005e98 <SysTick_Config+0x40>)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e76:	210f      	movs	r1, #15
 8005e78:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7c:	f7ff ff8e 	bl	8005d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e80:	4b05      	ldr	r3, [pc, #20]	@ (8005e98 <SysTick_Config+0x40>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e86:	4b04      	ldr	r3, [pc, #16]	@ (8005e98 <SysTick_Config+0x40>)
 8005e88:	2207      	movs	r2, #7
 8005e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	e000e010 	.word	0xe000e010

08005e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff ff29 	bl	8005cfc <__NVIC_SetPriorityGrouping>
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b086      	sub	sp, #24
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	4603      	mov	r3, r0
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	607a      	str	r2, [r7, #4]
 8005ebe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ec0:	f7ff ff40 	bl	8005d44 <__NVIC_GetPriorityGrouping>
 8005ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	6978      	ldr	r0, [r7, #20]
 8005ecc:	f7ff ff90 	bl	8005df0 <NVIC_EncodePriority>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff ff5f 	bl	8005d9c <__NVIC_SetPriority>
}
 8005ede:	bf00      	nop
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b082      	sub	sp, #8
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	4603      	mov	r3, r0
 8005eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff ff33 	bl	8005d60 <__NVIC_EnableIRQ>
}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff ffa4 	bl	8005e58 <SysTick_Config>
 8005f10:	4603      	mov	r3, r0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e014      	b.n	8005f56 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	791b      	ldrb	r3, [r3, #4]
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d105      	bne.n	8005f42 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7fd fdb9 	bl	8003ab4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2202      	movs	r2, #2
 8005f46:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e056      	b.n	8006022 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	795b      	ldrb	r3, [r3, #5]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d101      	bne.n	8005f80 <HAL_DAC_Start+0x20>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e050      	b.n	8006022 <HAL_DAC_Start+0xc2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6819      	ldr	r1, [r3, #0]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	f003 0310 	and.w	r3, r3, #16
 8005f98:	2201      	movs	r2, #1
 8005f9a:	409a      	lsls	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005fa4:	4b22      	ldr	r3, [pc, #136]	@ (8006030 <HAL_DAC_Start+0xd0>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	099b      	lsrs	r3, r3, #6
 8005faa:	4a22      	ldr	r2, [pc, #136]	@ (8006034 <HAL_DAC_Start+0xd4>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	099b      	lsrs	r3, r3, #6
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005fb6:	e002      	b.n	8005fbe <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1f9      	bne.n	8005fb8 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10f      	bne.n	8005fea <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d11d      	bne.n	8006014 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	605a      	str	r2, [r3, #4]
 8005fe8:	e014      	b.n	8006014 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	2102      	movs	r1, #2
 8005ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8006000:	429a      	cmp	r2, r3
 8006002:	d107      	bne.n	8006014 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0202 	orr.w	r2, r2, #2
 8006012:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	2000003c 	.word	0x2000003c
 8006034:	053e2d63 	.word	0x053e2d63

08006038 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800604e:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d01d      	beq.n	8006096 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d018      	beq.n	8006096 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2204      	movs	r2, #4
 8006068:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f043 0201 	orr.w	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800607e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800608e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f854 	bl	800613e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01d      	beq.n	80060dc <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d018      	beq.n	80060dc <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2204      	movs	r2, #4
 80060ae:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f043 0202 	orr.w	r2, r3, #2
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80060c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80060d4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f9f4 	bl	80064c4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80060dc:	bf00      	nop
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e018      	b.n	8006132 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d105      	bne.n	800611e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4413      	add	r3, r2
 8006118:	3308      	adds	r3, #8
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	e004      	b.n	8006128 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4413      	add	r3, r2
 8006124:	3314      	adds	r3, #20
 8006126:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	461a      	mov	r2, r3
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
	...

08006154 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08a      	sub	sp, #40	@ 0x28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <HAL_DAC_ConfigChannel+0x1c>
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e19e      	b.n	80064b2 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	795b      	ldrb	r3, [r3, #5]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_DAC_ConfigChannel+0x2c>
 800617c:	2302      	movs	r3, #2
 800617e:	e198      	b.n	80064b2 <HAL_DAC_ConfigChannel+0x35e>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2202      	movs	r2, #2
 800618a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	2b04      	cmp	r3, #4
 8006192:	d17a      	bne.n	800628a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006194:	f7fe f8e4 	bl	8004360 <HAL_GetTick>
 8006198:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d13d      	bne.n	800621c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80061a0:	e018      	b.n	80061d4 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80061a2:	f7fe f8dd 	bl	8004360 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d911      	bls.n	80061d4 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f043 0208 	orr.w	r2, r3, #8
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2203      	movs	r2, #3
 80061ce:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e16e      	b.n	80064b2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1df      	bne.n	80061a2 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80061ec:	e020      	b.n	8006230 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80061ee:	f7fe f8b7 	bl	8004360 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d90f      	bls.n	800621c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006202:	2b00      	cmp	r3, #0
 8006204:	da0a      	bge.n	800621c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f043 0208 	orr.w	r2, r3, #8
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2203      	movs	r2, #3
 8006216:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e14a      	b.n	80064b2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006222:	2b00      	cmp	r3, #0
 8006224:	dbe3      	blt.n	80061ee <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800622e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006240:	fa01 f303 	lsl.w	r3, r1, r3
 8006244:	43db      	mvns	r3, r3
 8006246:	ea02 0103 	and.w	r1, r2, r3
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	409a      	lsls	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f003 0310 	and.w	r3, r3, #16
 800626a:	21ff      	movs	r1, #255	@ 0xff
 800626c:	fa01 f303 	lsl.w	r3, r1, r3
 8006270:	43db      	mvns	r3, r3
 8006272:	ea02 0103 	and.w	r1, r2, r3
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	409a      	lsls	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d11d      	bne.n	80062ce <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006298:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	221f      	movs	r2, #31
 80062a2:	fa02 f303 	lsl.w	r3, r2, r3
 80062a6:	43db      	mvns	r3, r3
 80062a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062aa:	4013      	ands	r3, r2
 80062ac:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f003 0310 	and.w	r3, r3, #16
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	fa02 f303 	lsl.w	r3, r2, r3
 80062c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062c2:	4313      	orrs	r3, r2
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062cc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f003 0310 	and.w	r3, r3, #16
 80062dc:	2207      	movs	r2, #7
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	43db      	mvns	r3, r3
 80062e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e6:	4013      	ands	r3, r2
 80062e8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d102      	bne.n	80062f8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	623b      	str	r3, [r7, #32]
 80062f6:	e00f      	b.n	8006318 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d102      	bne.n	8006306 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006300:	2301      	movs	r3, #1
 8006302:	623b      	str	r3, [r7, #32]
 8006304:	e008      	b.n	8006318 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d102      	bne.n	8006314 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800630e:	2301      	movs	r3, #1
 8006310:	623b      	str	r3, [r7, #32]
 8006312:	e001      	b.n	8006318 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006314:	2300      	movs	r3, #0
 8006316:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	6a3a      	ldr	r2, [r7, #32]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f003 0310 	and.w	r3, r3, #16
 800632e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	43db      	mvns	r3, r3
 8006338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800633a:	4013      	ands	r3, r2
 800633c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	791b      	ldrb	r3, [r3, #4]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d102      	bne.n	800634c <HAL_DAC_ConfigChannel+0x1f8>
 8006346:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800634a:	e000      	b.n	800634e <HAL_DAC_ConfigChannel+0x1fa>
 800634c:	2300      	movs	r3, #0
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f003 0310 	and.w	r3, r3, #16
 800635a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800635e:	fa02 f303 	lsl.w	r3, r2, r3
 8006362:	43db      	mvns	r3, r3
 8006364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006366:	4013      	ands	r3, r2
 8006368:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	795b      	ldrb	r3, [r3, #5]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d102      	bne.n	8006378 <HAL_DAC_ConfigChannel+0x224>
 8006372:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006376:	e000      	b.n	800637a <HAL_DAC_ConfigChannel+0x226>
 8006378:	2300      	movs	r3, #0
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006386:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d114      	bne.n	80063ba <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006390:	f002 ff7a 	bl	8009288 <HAL_RCC_GetHCLKFreq>
 8006394:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	4a48      	ldr	r2, [pc, #288]	@ (80064bc <HAL_DAC_ConfigChannel+0x368>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d904      	bls.n	80063a8 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800639e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063a6:	e00f      	b.n	80063c8 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	4a45      	ldr	r2, [pc, #276]	@ (80064c0 <HAL_DAC_ConfigChannel+0x36c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d90a      	bls.n	80063c6 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80063b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b8:	e006      	b.n	80063c8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c0:	4313      	orrs	r3, r2
 80063c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80063c4:	e000      	b.n	80063c8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80063c6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063d6:	4313      	orrs	r3, r2
 80063d8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6819      	ldr	r1, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f003 0310 	and.w	r3, r3, #16
 80063ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	43da      	mvns	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	400a      	ands	r2, r1
 80063fe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f003 0310 	and.w	r3, r3, #16
 800640e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	43db      	mvns	r3, r3
 8006418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800641a:	4013      	ands	r3, r2
 800641c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006432:	4313      	orrs	r3, r2
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800643c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6819      	ldr	r1, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f003 0310 	and.w	r3, r3, #16
 800644a:	22c0      	movs	r2, #192	@ 0xc0
 800644c:	fa02 f303 	lsl.w	r3, r2, r3
 8006450:	43da      	mvns	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	400a      	ands	r2, r1
 8006458:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	089b      	lsrs	r3, r3, #2
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	089b      	lsrs	r3, r3, #2
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	4313      	orrs	r3, r2
 8006476:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f003 0310 	and.w	r3, r3, #16
 8006484:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8006488:	fa01 f303 	lsl.w	r3, r1, r3
 800648c:	43db      	mvns	r3, r3
 800648e:	ea02 0103 	and.w	r1, r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	409a      	lsls	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2201      	movs	r2, #1
 80064a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80064b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3728      	adds	r7, #40	@ 0x28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	09896800 	.word	0x09896800
 80064c0:	04c4b400 	.word	0x04c4b400

080064c4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e08d      	b.n	8006606 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	4b47      	ldr	r3, [pc, #284]	@ (8006610 <HAL_DMA_Init+0x138>)
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d80f      	bhi.n	8006516 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	4b45      	ldr	r3, [pc, #276]	@ (8006614 <HAL_DMA_Init+0x13c>)
 80064fe:	4413      	add	r3, r2
 8006500:	4a45      	ldr	r2, [pc, #276]	@ (8006618 <HAL_DMA_Init+0x140>)
 8006502:	fba2 2303 	umull	r2, r3, r2, r3
 8006506:	091b      	lsrs	r3, r3, #4
 8006508:	009a      	lsls	r2, r3, #2
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a42      	ldr	r2, [pc, #264]	@ (800661c <HAL_DMA_Init+0x144>)
 8006512:	641a      	str	r2, [r3, #64]	@ 0x40
 8006514:	e00e      	b.n	8006534 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	4b40      	ldr	r3, [pc, #256]	@ (8006620 <HAL_DMA_Init+0x148>)
 800651e:	4413      	add	r3, r2
 8006520:	4a3d      	ldr	r2, [pc, #244]	@ (8006618 <HAL_DMA_Init+0x140>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	091b      	lsrs	r3, r3, #4
 8006528:	009a      	lsls	r2, r3, #2
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a3c      	ldr	r2, [pc, #240]	@ (8006624 <HAL_DMA_Init+0x14c>)
 8006532:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800654a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800654e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f9b6 	bl	80068f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006594:	d102      	bne.n	800659c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80065b0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d010      	beq.n	80065dc <HAL_DMA_Init+0x104>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d80c      	bhi.n	80065dc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f9d6 	bl	8006974 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80065d8:	605a      	str	r2, [r3, #4]
 80065da:	e008      	b.n	80065ee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	40020407 	.word	0x40020407
 8006614:	bffdfff8 	.word	0xbffdfff8
 8006618:	cccccccd 	.word	0xcccccccd
 800661c:	40020000 	.word	0x40020000
 8006620:	bffdfbf8 	.word	0xbffdfbf8
 8006624:	40020400 	.word	0x40020400

08006628 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_DMA_Start_IT+0x20>
 8006644:	2302      	movs	r3, #2
 8006646:	e066      	b.n	8006716 <HAL_DMA_Start_IT+0xee>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b01      	cmp	r3, #1
 800665a:	d155      	bne.n	8006708 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0201 	bic.w	r2, r2, #1
 8006678:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	68b9      	ldr	r1, [r7, #8]
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f8fb 	bl	800687c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668a:	2b00      	cmp	r3, #0
 800668c:	d008      	beq.n	80066a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f042 020e 	orr.w	r2, r2, #14
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	e00f      	b.n	80066c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0204 	bic.w	r2, r2, #4
 80066ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 020a 	orr.w	r2, r2, #10
 80066be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d007      	beq.n	80066de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d007      	beq.n	80066f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f042 0201 	orr.w	r2, r2, #1
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	e005      	b.n	8006714 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006710:	2302      	movs	r3, #2
 8006712:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006714:	7dfb      	ldrb	r3, [r7, #23]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b084      	sub	sp, #16
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800673a:	f003 031f 	and.w	r3, r3, #31
 800673e:	2204      	movs	r2, #4
 8006740:	409a      	lsls	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4013      	ands	r3, r2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d026      	beq.n	8006798 <HAL_DMA_IRQHandler+0x7a>
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b00      	cmp	r3, #0
 8006752:	d021      	beq.n	8006798 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b00      	cmp	r3, #0
 8006760:	d107      	bne.n	8006772 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0204 	bic.w	r2, r2, #4
 8006770:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006776:	f003 021f 	and.w	r2, r3, #31
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677e:	2104      	movs	r1, #4
 8006780:	fa01 f202 	lsl.w	r2, r1, r2
 8006784:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678a:	2b00      	cmp	r3, #0
 800678c:	d071      	beq.n	8006872 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006796:	e06c      	b.n	8006872 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679c:	f003 031f 	and.w	r3, r3, #31
 80067a0:	2202      	movs	r2, #2
 80067a2:	409a      	lsls	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d02e      	beq.n	800680a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d029      	beq.n	800680a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10b      	bne.n	80067dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 020a 	bic.w	r2, r2, #10
 80067d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e0:	f003 021f 	and.w	r2, r3, #31
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e8:	2102      	movs	r1, #2
 80067ea:	fa01 f202 	lsl.w	r2, r1, r2
 80067ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d038      	beq.n	8006872 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006808:	e033      	b.n	8006872 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800680e:	f003 031f 	and.w	r3, r3, #31
 8006812:	2208      	movs	r2, #8
 8006814:	409a      	lsls	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4013      	ands	r3, r2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d02a      	beq.n	8006874 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	2b00      	cmp	r3, #0
 8006826:	d025      	beq.n	8006874 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 020e 	bic.w	r2, r2, #14
 8006836:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683c:	f003 021f 	and.w	r2, r3, #31
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006844:	2101      	movs	r1, #1
 8006846:	fa01 f202 	lsl.w	r2, r1, r2
 800684a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006872:	bf00      	nop
 8006874:	bf00      	nop
}
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006892:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006898:	2b00      	cmp	r3, #0
 800689a:	d004      	beq.n	80068a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80068a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068aa:	f003 021f 	and.w	r2, r3, #31
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b2:	2101      	movs	r1, #1
 80068b4:	fa01 f202 	lsl.w	r2, r1, r2
 80068b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b10      	cmp	r3, #16
 80068c8:	d108      	bne.n	80068dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80068da:	e007      	b.n	80068ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	60da      	str	r2, [r3, #12]
}
 80068ec:	bf00      	nop
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	4b16      	ldr	r3, [pc, #88]	@ (8006960 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006908:	429a      	cmp	r2, r3
 800690a:	d802      	bhi.n	8006912 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800690c:	4b15      	ldr	r3, [pc, #84]	@ (8006964 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	e001      	b.n	8006916 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006912:	4b15      	ldr	r3, [pc, #84]	@ (8006968 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006914:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	3b08      	subs	r3, #8
 8006922:	4a12      	ldr	r2, [pc, #72]	@ (800696c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006924:	fba2 2303 	umull	r2, r3, r2, r3
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006930:	089b      	lsrs	r3, r3, #2
 8006932:	009a      	lsls	r2, r3, #2
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	4413      	add	r3, r2
 8006938:	461a      	mov	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a0b      	ldr	r2, [pc, #44]	@ (8006970 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006942:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f003 031f 	and.w	r3, r3, #31
 800694a:	2201      	movs	r2, #1
 800694c:	409a      	lsls	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006952:	bf00      	nop
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	40020407 	.word	0x40020407
 8006964:	40020800 	.word	0x40020800
 8006968:	40020820 	.word	0x40020820
 800696c:	cccccccd 	.word	0xcccccccd
 8006970:	40020880 	.word	0x40020880

08006974 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4b0b      	ldr	r3, [pc, #44]	@ (80069b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006988:	4413      	add	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	461a      	mov	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a08      	ldr	r2, [pc, #32]	@ (80069b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006996:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3b01      	subs	r3, #1
 800699c:	f003 031f 	and.w	r3, r3, #31
 80069a0:	2201      	movs	r2, #1
 80069a2:	409a      	lsls	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80069a8:	bf00      	nop
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	1000823f 	.word	0x1000823f
 80069b8:	40020940 	.word	0x40020940

080069bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80069ca:	e15a      	b.n	8006c82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	2101      	movs	r1, #1
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	fa01 f303 	lsl.w	r3, r1, r3
 80069d8:	4013      	ands	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 814c 	beq.w	8006c7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f003 0303 	and.w	r3, r3, #3
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d005      	beq.n	80069fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d130      	bne.n	8006a5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	2203      	movs	r2, #3
 8006a08:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0c:	43db      	mvns	r3, r3
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4013      	ands	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a32:	2201      	movs	r2, #1
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3a:	43db      	mvns	r3, r3
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	091b      	lsrs	r3, r3, #4
 8006a48:	f003 0201 	and.w	r2, r3, #1
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d017      	beq.n	8006a9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	2203      	movs	r2, #3
 8006a76:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7a:	43db      	mvns	r3, r3
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d123      	bne.n	8006aee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	08da      	lsrs	r2, r3, #3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3208      	adds	r2, #8
 8006aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	220f      	movs	r2, #15
 8006abe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac2:	43db      	mvns	r3, r3
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	691a      	ldr	r2, [r3, #16]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f003 0307 	and.w	r3, r3, #7
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	08da      	lsrs	r2, r3, #3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3208      	adds	r2, #8
 8006ae8:	6939      	ldr	r1, [r7, #16]
 8006aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	2203      	movs	r2, #3
 8006afa:	fa02 f303 	lsl.w	r3, r2, r3
 8006afe:	43db      	mvns	r3, r3
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4013      	ands	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f003 0203 	and.w	r2, r3, #3
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	fa02 f303 	lsl.w	r3, r2, r3
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 80a6 	beq.w	8006c7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b30:	4b5b      	ldr	r3, [pc, #364]	@ (8006ca0 <HAL_GPIO_Init+0x2e4>)
 8006b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b34:	4a5a      	ldr	r2, [pc, #360]	@ (8006ca0 <HAL_GPIO_Init+0x2e4>)
 8006b36:	f043 0301 	orr.w	r3, r3, #1
 8006b3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8006b3c:	4b58      	ldr	r3, [pc, #352]	@ (8006ca0 <HAL_GPIO_Init+0x2e4>)
 8006b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	60bb      	str	r3, [r7, #8]
 8006b46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b48:	4a56      	ldr	r2, [pc, #344]	@ (8006ca4 <HAL_GPIO_Init+0x2e8>)
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	089b      	lsrs	r3, r3, #2
 8006b4e:	3302      	adds	r3, #2
 8006b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f003 0303 	and.w	r3, r3, #3
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	220f      	movs	r2, #15
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	43db      	mvns	r3, r3
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006b72:	d01f      	beq.n	8006bb4 <HAL_GPIO_Init+0x1f8>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a4c      	ldr	r2, [pc, #304]	@ (8006ca8 <HAL_GPIO_Init+0x2ec>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d019      	beq.n	8006bb0 <HAL_GPIO_Init+0x1f4>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a4b      	ldr	r2, [pc, #300]	@ (8006cac <HAL_GPIO_Init+0x2f0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <HAL_GPIO_Init+0x1f0>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a4a      	ldr	r2, [pc, #296]	@ (8006cb0 <HAL_GPIO_Init+0x2f4>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00d      	beq.n	8006ba8 <HAL_GPIO_Init+0x1ec>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a49      	ldr	r2, [pc, #292]	@ (8006cb4 <HAL_GPIO_Init+0x2f8>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d007      	beq.n	8006ba4 <HAL_GPIO_Init+0x1e8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a48      	ldr	r2, [pc, #288]	@ (8006cb8 <HAL_GPIO_Init+0x2fc>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d101      	bne.n	8006ba0 <HAL_GPIO_Init+0x1e4>
 8006b9c:	2305      	movs	r3, #5
 8006b9e:	e00a      	b.n	8006bb6 <HAL_GPIO_Init+0x1fa>
 8006ba0:	2306      	movs	r3, #6
 8006ba2:	e008      	b.n	8006bb6 <HAL_GPIO_Init+0x1fa>
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	e006      	b.n	8006bb6 <HAL_GPIO_Init+0x1fa>
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e004      	b.n	8006bb6 <HAL_GPIO_Init+0x1fa>
 8006bac:	2302      	movs	r3, #2
 8006bae:	e002      	b.n	8006bb6 <HAL_GPIO_Init+0x1fa>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <HAL_GPIO_Init+0x1fa>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	f002 0203 	and.w	r2, r2, #3
 8006bbc:	0092      	lsls	r2, r2, #2
 8006bbe:	4093      	lsls	r3, r2
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bc6:	4937      	ldr	r1, [pc, #220]	@ (8006ca4 <HAL_GPIO_Init+0x2e8>)
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	089b      	lsrs	r3, r3, #2
 8006bcc:	3302      	adds	r3, #2
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006bd4:	4b39      	ldr	r3, [pc, #228]	@ (8006cbc <HAL_GPIO_Init+0x300>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	43db      	mvns	r3, r3
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	4013      	ands	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006bf8:	4a30      	ldr	r2, [pc, #192]	@ (8006cbc <HAL_GPIO_Init+0x300>)
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8006cbc <HAL_GPIO_Init+0x300>)
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	43db      	mvns	r3, r3
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006c22:	4a26      	ldr	r2, [pc, #152]	@ (8006cbc <HAL_GPIO_Init+0x300>)
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006c28:	4b24      	ldr	r3, [pc, #144]	@ (8006cbc <HAL_GPIO_Init+0x300>)
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	43db      	mvns	r3, r3
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	4013      	ands	r3, r2
 8006c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8006cbc <HAL_GPIO_Init+0x300>)
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006c52:	4b1a      	ldr	r3, [pc, #104]	@ (8006cbc <HAL_GPIO_Init+0x300>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	43db      	mvns	r3, r3
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006c76:	4a11      	ldr	r2, [pc, #68]	@ (8006cbc <HAL_GPIO_Init+0x300>)
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f47f ae9d 	bne.w	80069cc <HAL_GPIO_Init+0x10>
  }
}
 8006c92:	bf00      	nop
 8006c94:	bf00      	nop
 8006c96:	371c      	adds	r7, #28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	40021000 	.word	0x40021000
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	48000400 	.word	0x48000400
 8006cac:	48000800 	.word	0x48000800
 8006cb0:	48000c00 	.word	0x48000c00
 8006cb4:	48001000 	.word	0x48001000
 8006cb8:	48001400 	.word	0x48001400
 8006cbc:	40010400 	.word	0x40010400

08006cc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	691a      	ldr	r2, [r3, #16]
 8006cd0:	887b      	ldrh	r3, [r7, #2]
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	73fb      	strb	r3, [r7, #15]
 8006cdc:	e001      	b.n	8006ce2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	807b      	strh	r3, [r7, #2]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d00:	787b      	ldrb	r3, [r7, #1]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006d06:	887a      	ldrh	r2, [r7, #2]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006d0c:	e002      	b.n	8006d14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006d0e:	887a      	ldrh	r2, [r7, #2]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006d32:	887a      	ldrh	r2, [r7, #2]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4013      	ands	r3, r2
 8006d38:	041a      	lsls	r2, r3, #16
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	43d9      	mvns	r1, r3
 8006d3e:	887b      	ldrh	r3, [r7, #2]
 8006d40:	400b      	ands	r3, r1
 8006d42:	431a      	orrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	619a      	str	r2, [r3, #24]
}
 8006d48:	bf00      	nop
 8006d4a:	3714      	adds	r7, #20
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e0c0      	b.n	8006ee8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f009 fa22 	bl	80101c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2203      	movs	r2, #3
 8006d84:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f005 f856 	bl	800be3e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]
 8006d96:	e03e      	b.n	8006e16 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d98:	7bfa      	ldrb	r2, [r7, #15]
 8006d9a:	6879      	ldr	r1, [r7, #4]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	440b      	add	r3, r1
 8006da6:	3311      	adds	r3, #17
 8006da8:	2201      	movs	r2, #1
 8006daa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006dac:	7bfa      	ldrb	r2, [r7, #15]
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	4613      	mov	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	440b      	add	r3, r1
 8006dba:	3310      	adds	r3, #16
 8006dbc:	7bfa      	ldrb	r2, [r7, #15]
 8006dbe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006dc0:	7bfa      	ldrb	r2, [r7, #15]
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	440b      	add	r3, r1
 8006dce:	3313      	adds	r3, #19
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006dd4:	7bfa      	ldrb	r2, [r7, #15]
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	440b      	add	r3, r1
 8006de2:	3320      	adds	r3, #32
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006de8:	7bfa      	ldrb	r2, [r7, #15]
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	440b      	add	r3, r1
 8006df6:	3324      	adds	r3, #36	@ 0x24
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	440b      	add	r3, r1
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	3301      	adds	r3, #1
 8006e14:	73fb      	strb	r3, [r7, #15]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	791b      	ldrb	r3, [r3, #4]
 8006e1a:	7bfa      	ldrb	r2, [r7, #15]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d3bb      	bcc.n	8006d98 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e20:	2300      	movs	r3, #0
 8006e22:	73fb      	strb	r3, [r7, #15]
 8006e24:	e044      	b.n	8006eb0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006e26:	7bfa      	ldrb	r2, [r7, #15]
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	440b      	add	r3, r1
 8006e34:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006e38:	2200      	movs	r2, #0
 8006e3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006e3c:	7bfa      	ldrb	r2, [r7, #15]
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	440b      	add	r3, r1
 8006e4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006e4e:	7bfa      	ldrb	r2, [r7, #15]
 8006e50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006e52:	7bfa      	ldrb	r2, [r7, #15]
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	440b      	add	r3, r1
 8006e60:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006e64:	2200      	movs	r2, #0
 8006e66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e68:	7bfa      	ldrb	r2, [r7, #15]
 8006e6a:	6879      	ldr	r1, [r7, #4]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	440b      	add	r3, r1
 8006e76:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e7e:	7bfa      	ldrb	r2, [r7, #15]
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	00db      	lsls	r3, r3, #3
 8006e8a:	440b      	add	r3, r1
 8006e8c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e94:	7bfa      	ldrb	r2, [r7, #15]
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	440b      	add	r3, r1
 8006ea2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	3301      	adds	r3, #1
 8006eae:	73fb      	strb	r3, [r7, #15]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	791b      	ldrb	r3, [r3, #4]
 8006eb4:	7bfa      	ldrb	r2, [r7, #15]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d3b5      	bcc.n	8006e26 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6818      	ldr	r0, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006ec6:	f004 ffd5 	bl	800be74 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	7a9b      	ldrb	r3, [r3, #10]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d102      	bne.n	8006ee6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 fc42 	bl	800876a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d101      	bne.n	8006f06 <HAL_PCD_Start+0x16>
 8006f02:	2302      	movs	r3, #2
 8006f04:	e012      	b.n	8006f2c <HAL_PCD_Start+0x3c>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f004 ff7c 	bl	800be10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f007 fa3d 	bl	800e39c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f007 fa42 	bl	800e3ca <USB_ReadInterrupts>
 8006f46:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fb06 	bl	8007564 <PCD_EP_ISR_Handler>

    return;
 8006f58:	e110      	b.n	800717c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d013      	beq.n	8006f8c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f76:	b292      	uxth	r2, r2
 8006f78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f009 f9b2 	bl	80102e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006f82:	2100      	movs	r1, #0
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f8fc 	bl	8007182 <HAL_PCD_SetAddress>

    return;
 8006f8a:	e0f7      	b.n	800717c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00c      	beq.n	8006fb0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006fa8:	b292      	uxth	r2, r2
 8006faa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006fae:	e0e5      	b.n	800717c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00c      	beq.n	8006fd4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fcc:	b292      	uxth	r2, r2
 8006fce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006fd2:	e0d3      	b.n	800717c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d034      	beq.n	8007048 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0204 	bic.w	r2, r2, #4
 8006ff0:	b292      	uxth	r2, r2
 8006ff2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 0208 	bic.w	r2, r2, #8
 8007008:	b292      	uxth	r2, r2
 800700a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8007014:	2b01      	cmp	r3, #1
 8007016:	d107      	bne.n	8007028 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007020:	2100      	movs	r1, #0
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f009 fb52 	bl	80106cc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f009 f995 	bl	8010358 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007036:	b29a      	uxth	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007040:	b292      	uxth	r2, r2
 8007042:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007046:	e099      	b.n	800717c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800704e:	2b00      	cmp	r3, #0
 8007050:	d027      	beq.n	80070a2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800705a:	b29a      	uxth	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f042 0208 	orr.w	r2, r2, #8
 8007064:	b292      	uxth	r2, r2
 8007066:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007072:	b29a      	uxth	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800707c:	b292      	uxth	r2, r2
 800707e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800708a:	b29a      	uxth	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f042 0204 	orr.w	r2, r2, #4
 8007094:	b292      	uxth	r2, r2
 8007096:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f009 f942 	bl	8010324 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80070a0:	e06c      	b.n	800717c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d040      	beq.n	800712e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070be:	b292      	uxth	r2, r2
 80070c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d12b      	bne.n	8007126 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f042 0204 	orr.w	r2, r2, #4
 80070e0:	b292      	uxth	r2, r2
 80070e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f042 0208 	orr.w	r2, r2, #8
 80070f8:	b292      	uxth	r2, r2
 80070fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800710e:	b29b      	uxth	r3, r3
 8007110:	089b      	lsrs	r3, r3, #2
 8007112:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800711c:	2101      	movs	r1, #1
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f009 fad4 	bl	80106cc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8007124:	e02a      	b.n	800717c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f009 f8fc 	bl	8010324 <HAL_PCD_SuspendCallback>
    return;
 800712c:	e026      	b.n	800717c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00f      	beq.n	8007158 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007140:	b29a      	uxth	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800714a:	b292      	uxth	r2, r2
 800714c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f009 f8ba 	bl	80102ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007156:	e011      	b.n	800717c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00c      	beq.n	800717c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800716a:	b29a      	uxth	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007174:	b292      	uxth	r2, r2
 8007176:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800717a:	bf00      	nop
  }
}
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b082      	sub	sp, #8
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	460b      	mov	r3, r1
 800718c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <HAL_PCD_SetAddress+0x1a>
 8007198:	2302      	movs	r3, #2
 800719a:	e012      	b.n	80071c2 <HAL_PCD_SetAddress+0x40>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	78fa      	ldrb	r2, [r7, #3]
 80071a8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	78fa      	ldrb	r2, [r7, #3]
 80071b0:	4611      	mov	r1, r2
 80071b2:	4618      	mov	r0, r3
 80071b4:	f007 f8de 	bl	800e374 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	4608      	mov	r0, r1
 80071d4:	4611      	mov	r1, r2
 80071d6:	461a      	mov	r2, r3
 80071d8:	4603      	mov	r3, r0
 80071da:	70fb      	strb	r3, [r7, #3]
 80071dc:	460b      	mov	r3, r1
 80071de:	803b      	strh	r3, [r7, #0]
 80071e0:	4613      	mov	r3, r2
 80071e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80071e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	da0e      	bge.n	800720e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	f003 0207 	and.w	r2, r3, #7
 80071f6:	4613      	mov	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4413      	add	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	3310      	adds	r3, #16
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	4413      	add	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2201      	movs	r2, #1
 800720a:	705a      	strb	r2, [r3, #1]
 800720c:	e00e      	b.n	800722c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800720e:	78fb      	ldrb	r3, [r7, #3]
 8007210:	f003 0207 	and.w	r2, r3, #7
 8007214:	4613      	mov	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	4413      	add	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	f003 0307 	and.w	r3, r3, #7
 8007232:	b2da      	uxtb	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007238:	883b      	ldrh	r3, [r7, #0]
 800723a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	78ba      	ldrb	r2, [r7, #2]
 8007246:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007248:	78bb      	ldrb	r3, [r7, #2]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d102      	bne.n	8007254 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800725a:	2b01      	cmp	r3, #1
 800725c:	d101      	bne.n	8007262 <HAL_PCD_EP_Open+0x98>
 800725e:	2302      	movs	r3, #2
 8007260:	e00e      	b.n	8007280 <HAL_PCD_EP_Open+0xb6>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68f9      	ldr	r1, [r7, #12]
 8007270:	4618      	mov	r0, r3
 8007272:	f004 fe1d 	bl	800beb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800727e:	7afb      	ldrb	r3, [r7, #11]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007298:	2b00      	cmp	r3, #0
 800729a:	da0e      	bge.n	80072ba <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800729c:	78fb      	ldrb	r3, [r7, #3]
 800729e:	f003 0207 	and.w	r2, r3, #7
 80072a2:	4613      	mov	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	00db      	lsls	r3, r3, #3
 80072aa:	3310      	adds	r3, #16
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	4413      	add	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	705a      	strb	r2, [r3, #1]
 80072b8:	e00e      	b.n	80072d8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072ba:	78fb      	ldrb	r3, [r7, #3]
 80072bc:	f003 0207 	and.w	r2, r3, #7
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	4413      	add	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80072d8:	78fb      	ldrb	r3, [r7, #3]
 80072da:	f003 0307 	and.w	r3, r3, #7
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <HAL_PCD_EP_Close+0x6a>
 80072ee:	2302      	movs	r3, #2
 80072f0:	e00e      	b.n	8007310 <HAL_PCD_EP_Close+0x88>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68f9      	ldr	r1, [r7, #12]
 8007300:	4618      	mov	r0, r3
 8007302:	f005 f999 	bl	800c638 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	607a      	str	r2, [r7, #4]
 8007322:	603b      	str	r3, [r7, #0]
 8007324:	460b      	mov	r3, r1
 8007326:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	f003 0207 	and.w	r2, r3, #7
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	00db      	lsls	r3, r3, #3
 8007336:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4413      	add	r3, r2
 800733e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2200      	movs	r2, #0
 8007350:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2200      	movs	r2, #0
 8007356:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007358:	7afb      	ldrb	r3, [r7, #11]
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	b2da      	uxtb	r2, r3
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6979      	ldr	r1, [r7, #20]
 800736a:	4618      	mov	r0, r3
 800736c:	f005 fb51 	bl	800ca12 <USB_EPStartXfer>

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3718      	adds	r7, #24
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	460b      	mov	r3, r1
 8007384:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007386:	78fb      	ldrb	r3, [r7, #3]
 8007388:	f003 0207 	and.w	r2, r3, #7
 800738c:	6879      	ldr	r1, [r7, #4]
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	440b      	add	r3, r1
 8007398:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800739c:	681b      	ldr	r3, [r3, #0]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b086      	sub	sp, #24
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	603b      	str	r3, [r7, #0]
 80073b6:	460b      	mov	r3, r1
 80073b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073ba:	7afb      	ldrb	r3, [r7, #11]
 80073bc:	f003 0207 	and.w	r2, r3, #7
 80073c0:	4613      	mov	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	3310      	adds	r3, #16
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4413      	add	r3, r2
 80073ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2200      	movs	r2, #0
 80073ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2201      	movs	r2, #1
 80073f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073f6:	7afb      	ldrb	r3, [r7, #11]
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6979      	ldr	r1, [r7, #20]
 8007408:	4618      	mov	r0, r3
 800740a:	f005 fb02 	bl	800ca12 <USB_EPStartXfer>

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	7912      	ldrb	r2, [r2, #4]
 800742e:	4293      	cmp	r3, r2
 8007430:	d901      	bls.n	8007436 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e03e      	b.n	80074b4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800743a:	2b00      	cmp	r3, #0
 800743c:	da0e      	bge.n	800745c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	f003 0207 	and.w	r2, r3, #7
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	3310      	adds	r3, #16
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	4413      	add	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2201      	movs	r2, #1
 8007458:	705a      	strb	r2, [r3, #1]
 800745a:	e00c      	b.n	8007476 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800745c:	78fa      	ldrb	r2, [r7, #3]
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	4413      	add	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2201      	movs	r2, #1
 800747a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	b2da      	uxtb	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800748e:	2b01      	cmp	r3, #1
 8007490:	d101      	bne.n	8007496 <HAL_PCD_EP_SetStall+0x7e>
 8007492:	2302      	movs	r3, #2
 8007494:	e00e      	b.n	80074b4 <HAL_PCD_EP_SetStall+0x9c>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68f9      	ldr	r1, [r7, #12]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f006 fe66 	bl	800e176 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80074c8:	78fb      	ldrb	r3, [r7, #3]
 80074ca:	f003 030f 	and.w	r3, r3, #15
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	7912      	ldrb	r2, [r2, #4]
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d901      	bls.n	80074da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e040      	b.n	800755c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80074da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	da0e      	bge.n	8007500 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074e2:	78fb      	ldrb	r3, [r7, #3]
 80074e4:	f003 0207 	and.w	r2, r3, #7
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	3310      	adds	r3, #16
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	4413      	add	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2201      	movs	r2, #1
 80074fc:	705a      	strb	r2, [r3, #1]
 80074fe:	e00e      	b.n	800751e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	f003 0207 	and.w	r2, r3, #7
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	00db      	lsls	r3, r3, #3
 800750e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	4413      	add	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	b2da      	uxtb	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007536:	2b01      	cmp	r3, #1
 8007538:	d101      	bne.n	800753e <HAL_PCD_EP_ClrStall+0x82>
 800753a:	2302      	movs	r3, #2
 800753c:	e00e      	b.n	800755c <HAL_PCD_EP_ClrStall+0xa0>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68f9      	ldr	r1, [r7, #12]
 800754c:	4618      	mov	r0, r3
 800754e:	f006 fe63 	bl	800e218 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b096      	sub	sp, #88	@ 0x58
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800756c:	e3ad      	b.n	8007cca <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007576:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800757a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800757e:	b2db      	uxtb	r3, r3
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8007588:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800758c:	2b00      	cmp	r3, #0
 800758e:	f040 816f 	bne.w	8007870 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007592:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007596:	f003 0310 	and.w	r3, r3, #16
 800759a:	2b00      	cmp	r3, #0
 800759c:	d14c      	bne.n	8007638 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80075aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ae:	81fb      	strh	r3, [r7, #14]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	89fb      	ldrh	r3, [r7, #14]
 80075b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075be:	b29b      	uxth	r3, r3
 80075c0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3310      	adds	r3, #16
 80075c6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	461a      	mov	r2, r3
 80075d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	4413      	add	r3, r2
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	6812      	ldr	r2, [r2, #0]
 80075e0:	4413      	add	r3, r2
 80075e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80075ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80075f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075f2:	695a      	ldr	r2, [r3, #20]
 80075f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075f6:	69db      	ldr	r3, [r3, #28]
 80075f8:	441a      	add	r2, r3
 80075fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075fc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80075fe:	2100      	movs	r1, #0
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f008 fe48 	bl	8010296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	7b1b      	ldrb	r3, [r3, #12]
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 835c 	beq.w	8007cca <PCD_EP_ISR_Handler+0x766>
 8007612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	2b00      	cmp	r3, #0
 8007618:	f040 8357 	bne.w	8007cca <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	7b1b      	ldrb	r3, [r3, #12]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007626:	b2da      	uxtb	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	731a      	strb	r2, [r3, #12]
 8007636:	e348      	b.n	8007cca <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800763e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800764a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800764e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007652:	2b00      	cmp	r3, #0
 8007654:	d032      	beq.n	80076bc <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800765e:	b29b      	uxth	r3, r3
 8007660:	461a      	mov	r2, r3
 8007662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	4413      	add	r3, r2
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	6812      	ldr	r2, [r2, #0]
 800766e:	4413      	add	r3, r2
 8007670:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800767a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800767c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800768a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800768c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800768e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007690:	b29b      	uxth	r3, r3
 8007692:	f006 feec 	bl	800e46e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	b29a      	uxth	r2, r3
 800769e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80076a2:	4013      	ands	r3, r2
 80076a4:	823b      	strh	r3, [r7, #16]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	8a3a      	ldrh	r2, [r7, #16]
 80076ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80076b0:	b292      	uxth	r2, r2
 80076b2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f008 fdc1 	bl	801023c <HAL_PCD_SetupStageCallback>
 80076ba:	e306      	b.n	8007cca <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80076bc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f280 8302 	bge.w	8007cca <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80076d2:	4013      	ands	r3, r2
 80076d4:	83fb      	strh	r3, [r7, #30]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	8bfa      	ldrh	r2, [r7, #30]
 80076dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80076e0:	b292      	uxth	r2, r2
 80076e2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	461a      	mov	r2, r3
 80076f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	4413      	add	r3, r2
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	6812      	ldr	r2, [r2, #0]
 80076fc:	4413      	add	r3, r2
 80076fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800770a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800770c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d019      	beq.n	8007748 <PCD_EP_ISR_Handler+0x1e4>
 8007714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d015      	beq.n	8007748 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6818      	ldr	r0, [r3, #0]
 8007720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007722:	6959      	ldr	r1, [r3, #20]
 8007724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007726:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800772a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800772c:	b29b      	uxth	r3, r3
 800772e:	f006 fe9e 	bl	800e46e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007734:	695a      	ldr	r2, [r3, #20]
 8007736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	441a      	add	r2, r3
 800773c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800773e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007740:	2100      	movs	r1, #0
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f008 fd8c 	bl	8010260 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007752:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 82b5 	bne.w	8007cca <PCD_EP_ISR_Handler+0x766>
 8007760:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007764:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007768:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800776c:	f000 82ad 	beq.w	8007cca <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	61bb      	str	r3, [r7, #24]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800777e:	b29b      	uxth	r3, r3
 8007780:	461a      	mov	r2, r3
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	4413      	add	r3, r2
 8007786:	61bb      	str	r3, [r7, #24]
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	b29b      	uxth	r3, r3
 8007796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800779a:	b29a      	uxth	r2, r3
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	801a      	strh	r2, [r3, #0]
 80077a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <PCD_EP_ISR_Handler+0x25a>
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	801a      	strh	r2, [r3, #0]
 80077bc:	e039      	b.n	8007832 <PCD_EP_ISR_Handler+0x2ce>
 80077be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80077c4:	d818      	bhi.n	80077f8 <PCD_EP_ISR_Handler+0x294>
 80077c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	085b      	lsrs	r3, r3, #1
 80077cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80077ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <PCD_EP_ISR_Handler+0x27c>
 80077da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077dc:	3301      	adds	r3, #1
 80077de:	647b      	str	r3, [r7, #68]	@ 0x44
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	029b      	lsls	r3, r3, #10
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	4313      	orrs	r3, r2
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	801a      	strh	r2, [r3, #0]
 80077f6:	e01c      	b.n	8007832 <PCD_EP_ISR_Handler+0x2ce>
 80077f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	095b      	lsrs	r3, r3, #5
 80077fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f003 031f 	and.w	r3, r3, #31
 8007808:	2b00      	cmp	r3, #0
 800780a:	d102      	bne.n	8007812 <PCD_EP_ISR_Handler+0x2ae>
 800780c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800780e:	3b01      	subs	r3, #1
 8007810:	647b      	str	r3, [r7, #68]	@ 0x44
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	b29a      	uxth	r2, r3
 8007818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800781a:	b29b      	uxth	r3, r3
 800781c:	029b      	lsls	r3, r3, #10
 800781e:	b29b      	uxth	r3, r3
 8007820:	4313      	orrs	r3, r2
 8007822:	b29b      	uxth	r3, r3
 8007824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800782c:	b29a      	uxth	r2, r3
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	b29b      	uxth	r3, r3
 800783a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800783e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007842:	827b      	strh	r3, [r7, #18]
 8007844:	8a7b      	ldrh	r3, [r7, #18]
 8007846:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800784a:	827b      	strh	r3, [r7, #18]
 800784c:	8a7b      	ldrh	r3, [r7, #18]
 800784e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007852:	827b      	strh	r3, [r7, #18]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	8a7b      	ldrh	r3, [r7, #18]
 800785a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800785e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800786a:	b29b      	uxth	r3, r3
 800786c:	8013      	strh	r3, [r2, #0]
 800786e:	e22c      	b.n	8007cca <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	461a      	mov	r2, r3
 8007876:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007884:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007888:	2b00      	cmp	r3, #0
 800788a:	f280 80f6 	bge.w	8007a7a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29a      	uxth	r2, r3
 80078a0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80078a4:	4013      	ands	r3, r2
 80078a6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80078bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80078c0:	b292      	uxth	r2, r2
 80078c2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80078c4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	4413      	add	r3, r2
 80078d8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80078da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078dc:	7b1b      	ldrb	r3, [r3, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d123      	bne.n	800792a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	461a      	mov	r2, r3
 80078ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	4413      	add	r3, r2
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6812      	ldr	r2, [r2, #0]
 80078fa:	4413      	add	r3, r2
 80078fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007906:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800790a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 808e 	beq.w	8007a30 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800791a:	6959      	ldr	r1, [r3, #20]
 800791c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800791e:	88da      	ldrh	r2, [r3, #6]
 8007920:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007924:	f006 fda3 	bl	800e46e <USB_ReadPMA>
 8007928:	e082      	b.n	8007a30 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800792a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800792c:	78db      	ldrb	r3, [r3, #3]
 800792e:	2b02      	cmp	r3, #2
 8007930:	d10a      	bne.n	8007948 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007932:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007936:	461a      	mov	r2, r3
 8007938:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f9d3 	bl	8007ce6 <HAL_PCD_EP_DB_Receive>
 8007940:	4603      	mov	r3, r0
 8007942:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8007946:	e073      	b.n	8007a30 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	b29b      	uxth	r3, r3
 800795a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800795e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007962:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	441a      	add	r2, r3
 8007974:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8007978:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800797c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007980:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007984:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007988:	b29b      	uxth	r3, r3
 800798a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	461a      	mov	r2, r3
 8007992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	b29b      	uxth	r3, r3
 800799e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d022      	beq.n	80079ec <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	461a      	mov	r2, r3
 80079b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	4413      	add	r3, r2
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	6812      	ldr	r2, [r2, #0]
 80079be:	4413      	add	r3, r2
 80079c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079ca:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80079ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d02c      	beq.n	8007a30 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079dc:	6959      	ldr	r1, [r3, #20]
 80079de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079e0:	891a      	ldrh	r2, [r3, #8]
 80079e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80079e6:	f006 fd42 	bl	800e46e <USB_ReadPMA>
 80079ea:	e021      	b.n	8007a30 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	461a      	mov	r2, r3
 80079f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	4413      	add	r3, r2
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6812      	ldr	r2, [r2, #0]
 8007a04:	4413      	add	r3, r2
 8007a06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a10:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007a14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d009      	beq.n	8007a30 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a22:	6959      	ldr	r1, [r3, #20]
 8007a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a26:	895a      	ldrh	r2, [r3, #10]
 8007a28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007a2c:	f006 fd1f 	bl	800e46e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a32:	69da      	ldr	r2, [r3, #28]
 8007a34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007a38:	441a      	add	r2, r3
 8007a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a3c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a40:	695a      	ldr	r2, [r3, #20]
 8007a42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007a46:	441a      	add	r2, r3
 8007a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a4a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <PCD_EP_ISR_Handler+0x4fc>
 8007a54:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8007a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d206      	bcs.n	8007a6e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f008 fbfa 	bl	8010260 <HAL_PCD_DataOutStageCallback>
 8007a6c:	e005      	b.n	8007a7a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a74:	4618      	mov	r0, r3
 8007a76:	f004 ffcc 	bl	800ca12 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007a7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 8121 	beq.w	8007cca <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8007a88:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	3310      	adds	r3, #16
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	4413      	add	r3, r2
 8007a9a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	881b      	ldrh	r3, [r3, #0]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ab6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	441a      	add	r2, r3
 8007ac8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ada:	78db      	ldrb	r3, [r3, #3]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	f040 80a2 	bne.w	8007c26 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8007ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aea:	7b1b      	ldrb	r3, [r3, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 8093 	beq.w	8007c18 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007af2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d046      	beq.n	8007b8c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d126      	bne.n	8007b54 <PCD_EP_ISR_Handler+0x5f0>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	461a      	mov	r2, r3
 8007b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1a:	4413      	add	r3, r2
 8007b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	00da      	lsls	r2, r3, #3
 8007b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b26:	4413      	add	r3, r2
 8007b28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b2c:	623b      	str	r3, [r7, #32]
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	801a      	strh	r2, [r3, #0]
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	801a      	strh	r2, [r3, #0]
 8007b52:	e061      	b.n	8007c18 <PCD_EP_ISR_Handler+0x6b4>
 8007b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b56:	785b      	ldrb	r3, [r3, #1]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d15d      	bne.n	8007c18 <PCD_EP_ISR_Handler+0x6b4>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b70:	4413      	add	r3, r2
 8007b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	00da      	lsls	r2, r3, #3
 8007b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b86:	2200      	movs	r2, #0
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	e045      	b.n	8007c18 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b94:	785b      	ldrb	r3, [r3, #1]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d126      	bne.n	8007be8 <PCD_EP_ISR_Handler+0x684>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	461a      	mov	r2, r3
 8007bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bae:	4413      	add	r3, r2
 8007bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	00da      	lsls	r2, r3, #3
 8007bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bba:	4413      	add	r3, r2
 8007bbc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007bc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd0:	801a      	strh	r2, [r3, #0]
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be4:	801a      	strh	r2, [r3, #0]
 8007be6:	e017      	b.n	8007c18 <PCD_EP_ISR_Handler+0x6b4>
 8007be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bea:	785b      	ldrb	r3, [r3, #1]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d113      	bne.n	8007c18 <PCD_EP_ISR_Handler+0x6b4>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bfe:	4413      	add	r3, r2
 8007c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	00da      	lsls	r2, r3, #3
 8007c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c14:	2200      	movs	r2, #0
 8007c16:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f008 fb39 	bl	8010296 <HAL_PCD_DataInStageCallback>
 8007c24:	e051      	b.n	8007cca <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007c26:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d144      	bne.n	8007cbc <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	4413      	add	r3, r2
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	6812      	ldr	r2, [r2, #0]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c56:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8007c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c5c:	699a      	ldr	r2, [r3, #24]
 8007c5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d907      	bls.n	8007c76 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8007c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c68:	699a      	ldr	r2, [r3, #24]
 8007c6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007c6e:	1ad2      	subs	r2, r2, r3
 8007c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c72:	619a      	str	r2, [r3, #24]
 8007c74:	e002      	b.n	8007c7c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8007c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c78:	2200      	movs	r2, #0
 8007c7a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d106      	bne.n	8007c92 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f008 fb03 	bl	8010296 <HAL_PCD_DataInStageCallback>
 8007c90:	e01b      	b.n	8007cca <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c94:	695a      	ldr	r2, [r3, #20]
 8007c96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007c9a:	441a      	add	r2, r3
 8007c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c9e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007ca8:	441a      	add	r2, r3
 8007caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cac:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f004 feac 	bl	800ca12 <USB_EPStartXfer>
 8007cba:	e006      	b.n	8007cca <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007cbc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f917 	bl	8007ef8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	b21b      	sxth	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f6ff ac49 	blt.w	800756e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3758      	adds	r7, #88	@ 0x58
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b088      	sub	sp, #32
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007cf4:	88fb      	ldrh	r3, [r7, #6]
 8007cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d07c      	beq.n	8007df8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	00db      	lsls	r3, r3, #3
 8007d10:	4413      	add	r3, r2
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	6812      	ldr	r2, [r2, #0]
 8007d16:	4413      	add	r3, r2
 8007d18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	699a      	ldr	r2, [r3, #24]
 8007d28:	8b7b      	ldrh	r3, [r7, #26]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d306      	bcc.n	8007d3c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	699a      	ldr	r2, [r3, #24]
 8007d32:	8b7b      	ldrh	r3, [r7, #26]
 8007d34:	1ad2      	subs	r2, r2, r3
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	619a      	str	r2, [r3, #24]
 8007d3a:	e002      	b.n	8007d42 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d123      	bne.n	8007d92 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d64:	833b      	strh	r3, [r7, #24]
 8007d66:	8b3b      	ldrh	r3, [r7, #24]
 8007d68:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d6c:	833b      	strh	r3, [r7, #24]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	441a      	add	r2, r3
 8007d7c:	8b3b      	ldrh	r3, [r7, #24]
 8007d7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007d92:	88fb      	ldrh	r3, [r7, #6]
 8007d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d01f      	beq.n	8007ddc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	461a      	mov	r2, r3
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007db6:	82fb      	strh	r3, [r7, #22]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	441a      	add	r2, r3
 8007dc6:	8afb      	ldrh	r3, [r7, #22]
 8007dc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007ddc:	8b7b      	ldrh	r3, [r7, #26]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 8085 	beq.w	8007eee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6818      	ldr	r0, [r3, #0]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	6959      	ldr	r1, [r3, #20]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	891a      	ldrh	r2, [r3, #8]
 8007df0:	8b7b      	ldrh	r3, [r7, #26]
 8007df2:	f006 fb3c 	bl	800e46e <USB_ReadPMA>
 8007df6:	e07a      	b.n	8007eee <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	461a      	mov	r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	4413      	add	r3, r2
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	6812      	ldr	r2, [r2, #0]
 8007e10:	4413      	add	r3, r2
 8007e12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e1c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	699a      	ldr	r2, [r3, #24]
 8007e22:	8b7b      	ldrh	r3, [r7, #26]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d306      	bcc.n	8007e36 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	699a      	ldr	r2, [r3, #24]
 8007e2c:	8b7b      	ldrh	r3, [r7, #26]
 8007e2e:	1ad2      	subs	r2, r2, r3
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	619a      	str	r2, [r3, #24]
 8007e34:	e002      	b.n	8007e3c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d123      	bne.n	8007e8c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e5e:	83fb      	strh	r3, [r7, #30]
 8007e60:	8bfb      	ldrh	r3, [r7, #30]
 8007e62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e66:	83fb      	strh	r3, [r7, #30]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	441a      	add	r2, r3
 8007e76:	8bfb      	ldrh	r3, [r7, #30]
 8007e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007e8c:	88fb      	ldrh	r3, [r7, #6]
 8007e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d11f      	bne.n	8007ed6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eb0:	83bb      	strh	r3, [r7, #28]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	441a      	add	r2, r3
 8007ec0:	8bbb      	ldrh	r3, [r7, #28]
 8007ec2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ec6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007eca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ece:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007ed6:	8b7b      	ldrh	r3, [r7, #26]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d008      	beq.n	8007eee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6818      	ldr	r0, [r3, #0]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	6959      	ldr	r1, [r3, #20]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	895a      	ldrh	r2, [r3, #10]
 8007ee8:	8b7b      	ldrh	r3, [r7, #26]
 8007eea:	f006 fac0 	bl	800e46e <USB_ReadPMA>
    }
  }

  return count;
 8007eee:	8b7b      	ldrh	r3, [r7, #26]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3720      	adds	r7, #32
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b0a4      	sub	sp, #144	@ 0x90
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	4613      	mov	r3, r2
 8007f04:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007f06:	88fb      	ldrh	r3, [r7, #6]
 8007f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 81db 	beq.w	80082c8 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	4413      	add	r3, r2
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007f30:	881b      	ldrh	r3, [r3, #0]
 8007f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f36:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d907      	bls.n	8007f56 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	619a      	str	r2, [r3, #24]
 8007f54:	e002      	b.n	8007f5c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f040 80b9 	bne.w	80080d8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	785b      	ldrb	r3, [r3, #1]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d126      	bne.n	8007fbc <HAL_PCD_EP_DB_Transmit+0xc4>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	461a      	mov	r2, r3
 8007f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f82:	4413      	add	r3, r2
 8007f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	00da      	lsls	r2, r3, #3
 8007f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f8e:	4413      	add	r3, r2
 8007f90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007f94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa4:	801a      	strh	r2, [r3, #0]
 8007fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb8:	801a      	strh	r2, [r3, #0]
 8007fba:	e01a      	b.n	8007ff2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	785b      	ldrb	r3, [r3, #1]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d116      	bne.n	8007ff2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd8:	4413      	add	r3, r2
 8007fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	00da      	lsls	r2, r3, #3
 8007fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007fea:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fee:	2200      	movs	r2, #0
 8007ff0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	785b      	ldrb	r3, [r3, #1]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d126      	bne.n	800804e <HAL_PCD_EP_DB_Transmit+0x156>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	61fb      	str	r3, [r7, #28]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800800e:	b29b      	uxth	r3, r3
 8008010:	461a      	mov	r2, r3
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	4413      	add	r3, r2
 8008016:	61fb      	str	r3, [r7, #28]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	00da      	lsls	r2, r3, #3
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	4413      	add	r3, r2
 8008022:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008026:	61bb      	str	r3, [r7, #24]
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b29b      	uxth	r3, r3
 800802e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008032:	b29a      	uxth	r2, r3
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	801a      	strh	r2, [r3, #0]
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	b29b      	uxth	r3, r3
 800803e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008046:	b29a      	uxth	r2, r3
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	801a      	strh	r2, [r3, #0]
 800804c:	e017      	b.n	800807e <HAL_PCD_EP_DB_Transmit+0x186>
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	785b      	ldrb	r3, [r3, #1]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d113      	bne.n	800807e <HAL_PCD_EP_DB_Transmit+0x186>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800805e:	b29b      	uxth	r3, r3
 8008060:	461a      	mov	r2, r3
 8008062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008064:	4413      	add	r3, r2
 8008066:	627b      	str	r3, [r7, #36]	@ 0x24
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	00da      	lsls	r2, r3, #3
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	4413      	add	r3, r2
 8008072:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008076:	623b      	str	r3, [r7, #32]
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	2200      	movs	r2, #0
 800807c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	4619      	mov	r1, r3
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f008 f906 	bl	8010296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800808a:	88fb      	ldrh	r3, [r7, #6]
 800808c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 82fa 	beq.w	800868a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080b0:	82fb      	strh	r3, [r7, #22]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	441a      	add	r2, r3
 80080c0:	8afb      	ldrh	r3, [r7, #22]
 80080c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	8013      	strh	r3, [r2, #0]
 80080d6:	e2d8      	b.n	800868a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80080d8:	88fb      	ldrh	r3, [r7, #6]
 80080da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d021      	beq.n	8008126 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	461a      	mov	r2, r3
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	441a      	add	r2, r3
 800810e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008116:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800811a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800811e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008122:	b29b      	uxth	r3, r3
 8008124:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800812c:	2b01      	cmp	r3, #1
 800812e:	f040 82ac 	bne.w	800868a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	695a      	ldr	r2, [r3, #20]
 8008136:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800813a:	441a      	add	r2, r3
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	69da      	ldr	r2, [r3, #28]
 8008144:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008148:	441a      	add	r2, r3
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	6a1a      	ldr	r2, [r3, #32]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	429a      	cmp	r2, r3
 8008158:	d30b      	bcc.n	8008172 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	6a1a      	ldr	r2, [r3, #32]
 8008166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800816a:	1ad2      	subs	r2, r2, r3
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	621a      	str	r2, [r3, #32]
 8008170:	e017      	b.n	80081a2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d108      	bne.n	800818c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800817a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800817e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800818a:	e00a      	b.n	80081a2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2200      	movs	r2, #0
 80081a0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	785b      	ldrb	r3, [r3, #1]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d165      	bne.n	8008276 <HAL_PCD_EP_DB_Transmit+0x37e>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	461a      	mov	r2, r3
 80081bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081be:	4413      	add	r3, r2
 80081c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	00da      	lsls	r2, r3, #3
 80081c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ca:	4413      	add	r3, r2
 80081cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081dc:	b29a      	uxth	r2, r3
 80081de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e0:	801a      	strh	r2, [r3, #0]
 80081e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <HAL_PCD_EP_DB_Transmit+0x308>
 80081ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ec:	881b      	ldrh	r3, [r3, #0]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fc:	801a      	strh	r2, [r3, #0]
 80081fe:	e057      	b.n	80082b0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008200:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008204:	2b3e      	cmp	r3, #62	@ 0x3e
 8008206:	d818      	bhi.n	800823a <HAL_PCD_EP_DB_Transmit+0x342>
 8008208:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800820c:	085b      	lsrs	r3, r3, #1
 800820e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008210:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <HAL_PCD_EP_DB_Transmit+0x32a>
 800821c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800821e:	3301      	adds	r3, #1
 8008220:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	b29a      	uxth	r2, r3
 8008228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800822a:	b29b      	uxth	r3, r3
 800822c:	029b      	lsls	r3, r3, #10
 800822e:	b29b      	uxth	r3, r3
 8008230:	4313      	orrs	r3, r2
 8008232:	b29a      	uxth	r2, r3
 8008234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008236:	801a      	strh	r2, [r3, #0]
 8008238:	e03a      	b.n	80082b0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800823a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008242:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008246:	f003 031f 	and.w	r3, r3, #31
 800824a:	2b00      	cmp	r3, #0
 800824c:	d102      	bne.n	8008254 <HAL_PCD_EP_DB_Transmit+0x35c>
 800824e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008250:	3b01      	subs	r3, #1
 8008252:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	b29a      	uxth	r2, r3
 800825a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800825c:	b29b      	uxth	r3, r3
 800825e:	029b      	lsls	r3, r3, #10
 8008260:	b29b      	uxth	r3, r3
 8008262:	4313      	orrs	r3, r2
 8008264:	b29b      	uxth	r3, r3
 8008266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800826a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800826e:	b29a      	uxth	r2, r3
 8008270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008272:	801a      	strh	r2, [r3, #0]
 8008274:	e01c      	b.n	80082b0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d118      	bne.n	80082b0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	647b      	str	r3, [r7, #68]	@ 0x44
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800828c:	b29b      	uxth	r3, r3
 800828e:	461a      	mov	r2, r3
 8008290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008292:	4413      	add	r3, r2
 8008294:	647b      	str	r3, [r7, #68]	@ 0x44
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	00da      	lsls	r2, r3, #3
 800829c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800829e:	4413      	add	r3, r2
 80082a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80082a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80082a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082ae:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	6959      	ldr	r1, [r3, #20]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	891a      	ldrh	r2, [r3, #8]
 80082bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	f006 f892 	bl	800e3ea <USB_WritePMA>
 80082c6:	e1e0      	b.n	800868a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	461a      	mov	r2, r3
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	4413      	add	r3, r2
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	6812      	ldr	r2, [r2, #0]
 80082e0:	4413      	add	r3, r2
 80082e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082ec:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	699a      	ldr	r2, [r3, #24]
 80082f4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d307      	bcc.n	800830c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	699a      	ldr	r2, [r3, #24]
 8008300:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008304:	1ad2      	subs	r2, r2, r3
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	619a      	str	r2, [r3, #24]
 800830a:	e002      	b.n	8008312 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2200      	movs	r2, #0
 8008310:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	2b00      	cmp	r3, #0
 8008318:	f040 80c0 	bne.w	800849c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	785b      	ldrb	r3, [r3, #1]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d126      	bne.n	8008372 <HAL_PCD_EP_DB_Transmit+0x47a>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008332:	b29b      	uxth	r3, r3
 8008334:	461a      	mov	r2, r3
 8008336:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008338:	4413      	add	r3, r2
 800833a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	00da      	lsls	r2, r3, #3
 8008342:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008344:	4413      	add	r3, r2
 8008346:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800834a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800834c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	b29b      	uxth	r3, r3
 8008352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008356:	b29a      	uxth	r2, r3
 8008358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800835a:	801a      	strh	r2, [r3, #0]
 800835c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	b29b      	uxth	r3, r3
 8008362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800836a:	b29a      	uxth	r2, r3
 800836c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800836e:	801a      	strh	r2, [r3, #0]
 8008370:	e01a      	b.n	80083a8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	785b      	ldrb	r3, [r3, #1]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d116      	bne.n	80083a8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008388:	b29b      	uxth	r3, r3
 800838a:	461a      	mov	r2, r3
 800838c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800838e:	4413      	add	r3, r2
 8008390:	667b      	str	r3, [r7, #100]	@ 0x64
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	00da      	lsls	r2, r3, #3
 8008398:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800839a:	4413      	add	r3, r2
 800839c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80083a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80083a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80083a4:	2200      	movs	r2, #0
 80083a6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	785b      	ldrb	r3, [r3, #1]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d12b      	bne.n	800840e <HAL_PCD_EP_DB_Transmit+0x516>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	461a      	mov	r2, r3
 80083c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083ca:	4413      	add	r3, r2
 80083cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	00da      	lsls	r2, r3, #3
 80083d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083d6:	4413      	add	r3, r2
 80083d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80083dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083f2:	801a      	strh	r2, [r3, #0]
 80083f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008404:	b29a      	uxth	r2, r3
 8008406:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800840a:	801a      	strh	r2, [r3, #0]
 800840c:	e017      	b.n	800843e <HAL_PCD_EP_DB_Transmit+0x546>
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	785b      	ldrb	r3, [r3, #1]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d113      	bne.n	800843e <HAL_PCD_EP_DB_Transmit+0x546>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800841e:	b29b      	uxth	r3, r3
 8008420:	461a      	mov	r2, r3
 8008422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008424:	4413      	add	r3, r2
 8008426:	677b      	str	r3, [r7, #116]	@ 0x74
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	00da      	lsls	r2, r3, #3
 800842e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008430:	4413      	add	r3, r2
 8008432:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008436:	673b      	str	r3, [r7, #112]	@ 0x70
 8008438:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800843a:	2200      	movs	r2, #0
 800843c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	4619      	mov	r1, r3
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f007 ff26 	bl	8010296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800844a:	88fb      	ldrh	r3, [r7, #6]
 800844c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008450:	2b00      	cmp	r3, #0
 8008452:	f040 811a 	bne.w	800868a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	b29b      	uxth	r3, r3
 8008468:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800846c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008470:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	441a      	add	r2, r3
 8008482:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008486:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800848a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800848e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008496:	b29b      	uxth	r3, r3
 8008498:	8013      	strh	r3, [r2, #0]
 800849a:	e0f6      	b.n	800868a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800849c:	88fb      	ldrh	r3, [r7, #6]
 800849e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d121      	bne.n	80084ea <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084c0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	461a      	mov	r2, r3
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	441a      	add	r2, r3
 80084d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80084d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80084e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	f040 80ca 	bne.w	800868a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	695a      	ldr	r2, [r3, #20]
 80084fa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80084fe:	441a      	add	r2, r3
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	69da      	ldr	r2, [r3, #28]
 8008508:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800850c:	441a      	add	r2, r3
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	6a1a      	ldr	r2, [r3, #32]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	429a      	cmp	r2, r3
 800851c:	d30b      	bcc.n	8008536 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	6a1a      	ldr	r2, [r3, #32]
 800852a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800852e:	1ad2      	subs	r2, r2, r3
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	621a      	str	r2, [r3, #32]
 8008534:	e017      	b.n	8008566 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d108      	bne.n	8008550 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800853e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008542:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800854e:	e00a      	b.n	8008566 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2200      	movs	r2, #0
 800855c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	657b      	str	r3, [r7, #84]	@ 0x54
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	785b      	ldrb	r3, [r3, #1]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d165      	bne.n	8008640 <HAL_PCD_EP_DB_Transmit+0x748>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008582:	b29b      	uxth	r3, r3
 8008584:	461a      	mov	r2, r3
 8008586:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008588:	4413      	add	r3, r2
 800858a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	00da      	lsls	r2, r3, #3
 8008592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008594:	4413      	add	r3, r2
 8008596:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800859a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800859c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085aa:	801a      	strh	r2, [r3, #0]
 80085ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10a      	bne.n	80085ca <HAL_PCD_EP_DB_Transmit+0x6d2>
 80085b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085c6:	801a      	strh	r2, [r3, #0]
 80085c8:	e054      	b.n	8008674 <HAL_PCD_EP_DB_Transmit+0x77c>
 80085ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80085d0:	d818      	bhi.n	8008604 <HAL_PCD_EP_DB_Transmit+0x70c>
 80085d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085d6:	085b      	lsrs	r3, r3, #1
 80085d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d002      	beq.n	80085ec <HAL_PCD_EP_DB_Transmit+0x6f4>
 80085e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085e8:	3301      	adds	r3, #1
 80085ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	029b      	lsls	r3, r3, #10
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	4313      	orrs	r3, r2
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008600:	801a      	strh	r2, [r3, #0]
 8008602:	e037      	b.n	8008674 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008604:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008608:	095b      	lsrs	r3, r3, #5
 800860a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800860c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008610:	f003 031f 	and.w	r3, r3, #31
 8008614:	2b00      	cmp	r3, #0
 8008616:	d102      	bne.n	800861e <HAL_PCD_EP_DB_Transmit+0x726>
 8008618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800861a:	3b01      	subs	r3, #1
 800861c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800861e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	b29a      	uxth	r2, r3
 8008624:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008626:	b29b      	uxth	r3, r3
 8008628:	029b      	lsls	r3, r3, #10
 800862a:	b29b      	uxth	r3, r3
 800862c:	4313      	orrs	r3, r2
 800862e:	b29b      	uxth	r3, r3
 8008630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008638:	b29a      	uxth	r2, r3
 800863a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800863c:	801a      	strh	r2, [r3, #0]
 800863e:	e019      	b.n	8008674 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	785b      	ldrb	r3, [r3, #1]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d115      	bne.n	8008674 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008650:	b29b      	uxth	r3, r3
 8008652:	461a      	mov	r2, r3
 8008654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008656:	4413      	add	r3, r2
 8008658:	657b      	str	r3, [r7, #84]	@ 0x54
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	00da      	lsls	r2, r3, #3
 8008660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008662:	4413      	add	r3, r2
 8008664:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008668:	653b      	str	r3, [r7, #80]	@ 0x50
 800866a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800866e:	b29a      	uxth	r2, r3
 8008670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008672:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6818      	ldr	r0, [r3, #0]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	6959      	ldr	r1, [r3, #20]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	895a      	ldrh	r2, [r3, #10]
 8008680:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008684:	b29b      	uxth	r3, r3
 8008686:	f005 feb0 	bl	800e3ea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4413      	add	r3, r2
 8008698:	881b      	ldrh	r3, [r3, #0]
 800869a:	b29b      	uxth	r3, r3
 800869c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086a4:	82bb      	strh	r3, [r7, #20]
 80086a6:	8abb      	ldrh	r3, [r7, #20]
 80086a8:	f083 0310 	eor.w	r3, r3, #16
 80086ac:	82bb      	strh	r3, [r7, #20]
 80086ae:	8abb      	ldrh	r3, [r7, #20]
 80086b0:	f083 0320 	eor.w	r3, r3, #32
 80086b4:	82bb      	strh	r3, [r7, #20]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	441a      	add	r2, r3
 80086c4:	8abb      	ldrh	r3, [r7, #20]
 80086c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3790      	adds	r7, #144	@ 0x90
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	607b      	str	r3, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	817b      	strh	r3, [r7, #10]
 80086f2:	4613      	mov	r3, r2
 80086f4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80086f6:	897b      	ldrh	r3, [r7, #10]
 80086f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00b      	beq.n	800871a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008702:	897b      	ldrh	r3, [r7, #10]
 8008704:	f003 0207 	and.w	r2, r3, #7
 8008708:	4613      	mov	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	3310      	adds	r3, #16
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	4413      	add	r3, r2
 8008716:	617b      	str	r3, [r7, #20]
 8008718:	e009      	b.n	800872e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800871a:	897a      	ldrh	r2, [r7, #10]
 800871c:	4613      	mov	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	00db      	lsls	r3, r3, #3
 8008724:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4413      	add	r3, r2
 800872c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800872e:	893b      	ldrh	r3, [r7, #8]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d107      	bne.n	8008744 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	2200      	movs	r2, #0
 8008738:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	b29a      	uxth	r2, r3
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	80da      	strh	r2, [r3, #6]
 8008742:	e00b      	b.n	800875c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2201      	movs	r2, #1
 8008748:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	b29a      	uxth	r2, r3
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	0c1b      	lsrs	r3, r3, #16
 8008756:	b29a      	uxth	r2, r3
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800878e:	b29b      	uxth	r3, r3
 8008790:	f043 0301 	orr.w	r3, r3, #1
 8008794:	b29a      	uxth	r2, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	f043 0302 	orr.w	r3, r3, #2
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
	...

080087c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d141      	bne.n	8008852 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80087ce:	4b4b      	ldr	r3, [pc, #300]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80087d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087da:	d131      	bne.n	8008840 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087dc:	4b47      	ldr	r3, [pc, #284]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087e2:	4a46      	ldr	r2, [pc, #280]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80087ec:	4b43      	ldr	r3, [pc, #268]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80087f4:	4a41      	ldr	r2, [pc, #260]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80087fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80087fc:	4b40      	ldr	r3, [pc, #256]	@ (8008900 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2232      	movs	r2, #50	@ 0x32
 8008802:	fb02 f303 	mul.w	r3, r2, r3
 8008806:	4a3f      	ldr	r2, [pc, #252]	@ (8008904 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008808:	fba2 2303 	umull	r2, r3, r2, r3
 800880c:	0c9b      	lsrs	r3, r3, #18
 800880e:	3301      	adds	r3, #1
 8008810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008812:	e002      	b.n	800881a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3b01      	subs	r3, #1
 8008818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800881a:	4b38      	ldr	r3, [pc, #224]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008826:	d102      	bne.n	800882e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1f2      	bne.n	8008814 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800882e:	4b33      	ldr	r3, [pc, #204]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800883a:	d158      	bne.n	80088ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e057      	b.n	80088f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008840:	4b2e      	ldr	r3, [pc, #184]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008846:	4a2d      	ldr	r2, [pc, #180]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800884c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008850:	e04d      	b.n	80088ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008858:	d141      	bne.n	80088de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800885a:	4b28      	ldr	r3, [pc, #160]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008866:	d131      	bne.n	80088cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008868:	4b24      	ldr	r3, [pc, #144]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800886a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800886e:	4a23      	ldr	r2, [pc, #140]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008874:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008878:	4b20      	ldr	r3, [pc, #128]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008880:	4a1e      	ldr	r2, [pc, #120]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008882:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008886:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008888:	4b1d      	ldr	r3, [pc, #116]	@ (8008900 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2232      	movs	r2, #50	@ 0x32
 800888e:	fb02 f303 	mul.w	r3, r2, r3
 8008892:	4a1c      	ldr	r2, [pc, #112]	@ (8008904 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008894:	fba2 2303 	umull	r2, r3, r2, r3
 8008898:	0c9b      	lsrs	r3, r3, #18
 800889a:	3301      	adds	r3, #1
 800889c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800889e:	e002      	b.n	80088a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80088a6:	4b15      	ldr	r3, [pc, #84]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088b2:	d102      	bne.n	80088ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1f2      	bne.n	80088a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80088ba:	4b10      	ldr	r3, [pc, #64]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088c6:	d112      	bne.n	80088ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e011      	b.n	80088f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80088cc:	4b0b      	ldr	r3, [pc, #44]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088d2:	4a0a      	ldr	r2, [pc, #40]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80088dc:	e007      	b.n	80088ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80088de:	4b07      	ldr	r3, [pc, #28]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80088e6:	4a05      	ldr	r2, [pc, #20]	@ (80088fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80088ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	40007000 	.word	0x40007000
 8008900:	2000003c 	.word	0x2000003c
 8008904:	431bde83 	.word	0x431bde83

08008908 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008908:	b480      	push	{r7}
 800890a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800890c:	4b05      	ldr	r3, [pc, #20]	@ (8008924 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	4a04      	ldr	r2, [pc, #16]	@ (8008924 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008912:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008916:	6093      	str	r3, [r2, #8]
}
 8008918:	bf00      	nop
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	40007000 	.word	0x40007000

08008928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b088      	sub	sp, #32
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e2fe      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d075      	beq.n	8008a32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008946:	4b97      	ldr	r3, [pc, #604]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f003 030c 	and.w	r3, r3, #12
 800894e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008950:	4b94      	ldr	r3, [pc, #592]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	f003 0303 	and.w	r3, r3, #3
 8008958:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	2b0c      	cmp	r3, #12
 800895e:	d102      	bne.n	8008966 <HAL_RCC_OscConfig+0x3e>
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	2b03      	cmp	r3, #3
 8008964:	d002      	beq.n	800896c <HAL_RCC_OscConfig+0x44>
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	2b08      	cmp	r3, #8
 800896a:	d10b      	bne.n	8008984 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800896c:	4b8d      	ldr	r3, [pc, #564]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d05b      	beq.n	8008a30 <HAL_RCC_OscConfig+0x108>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d157      	bne.n	8008a30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e2d9      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800898c:	d106      	bne.n	800899c <HAL_RCC_OscConfig+0x74>
 800898e:	4b85      	ldr	r3, [pc, #532]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a84      	ldr	r2, [pc, #528]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	e01d      	b.n	80089d8 <HAL_RCC_OscConfig+0xb0>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80089a4:	d10c      	bne.n	80089c0 <HAL_RCC_OscConfig+0x98>
 80089a6:	4b7f      	ldr	r3, [pc, #508]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a7e      	ldr	r2, [pc, #504]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 80089ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	4b7c      	ldr	r3, [pc, #496]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a7b      	ldr	r2, [pc, #492]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 80089b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089bc:	6013      	str	r3, [r2, #0]
 80089be:	e00b      	b.n	80089d8 <HAL_RCC_OscConfig+0xb0>
 80089c0:	4b78      	ldr	r3, [pc, #480]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a77      	ldr	r2, [pc, #476]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 80089c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	4b75      	ldr	r3, [pc, #468]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a74      	ldr	r2, [pc, #464]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 80089d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d013      	beq.n	8008a08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e0:	f7fb fcbe 	bl	8004360 <HAL_GetTick>
 80089e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089e6:	e008      	b.n	80089fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089e8:	f7fb fcba 	bl	8004360 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	2b64      	cmp	r3, #100	@ 0x64
 80089f4:	d901      	bls.n	80089fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e29e      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089fa:	4b6a      	ldr	r3, [pc, #424]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d0f0      	beq.n	80089e8 <HAL_RCC_OscConfig+0xc0>
 8008a06:	e014      	b.n	8008a32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a08:	f7fb fcaa 	bl	8004360 <HAL_GetTick>
 8008a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008a0e:	e008      	b.n	8008a22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a10:	f7fb fca6 	bl	8004360 <HAL_GetTick>
 8008a14:	4602      	mov	r2, r0
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	2b64      	cmp	r3, #100	@ 0x64
 8008a1c:	d901      	bls.n	8008a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e28a      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008a22:	4b60      	ldr	r3, [pc, #384]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1f0      	bne.n	8008a10 <HAL_RCC_OscConfig+0xe8>
 8008a2e:	e000      	b.n	8008a32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0302 	and.w	r3, r3, #2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d075      	beq.n	8008b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a3e:	4b59      	ldr	r3, [pc, #356]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f003 030c 	and.w	r3, r3, #12
 8008a46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a48:	4b56      	ldr	r3, [pc, #344]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	f003 0303 	and.w	r3, r3, #3
 8008a50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	2b0c      	cmp	r3, #12
 8008a56:	d102      	bne.n	8008a5e <HAL_RCC_OscConfig+0x136>
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d002      	beq.n	8008a64 <HAL_RCC_OscConfig+0x13c>
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	2b04      	cmp	r3, #4
 8008a62:	d11f      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a64:	4b4f      	ldr	r3, [pc, #316]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d005      	beq.n	8008a7c <HAL_RCC_OscConfig+0x154>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e25d      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a7c:	4b49      	ldr	r3, [pc, #292]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	061b      	lsls	r3, r3, #24
 8008a8a:	4946      	ldr	r1, [pc, #280]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008a90:	4b45      	ldr	r3, [pc, #276]	@ (8008ba8 <HAL_RCC_OscConfig+0x280>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fb fc17 	bl	80042c8 <HAL_InitTick>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d043      	beq.n	8008b28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e249      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d023      	beq.n	8008af4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008aac:	4b3d      	ldr	r3, [pc, #244]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a3c      	ldr	r2, [pc, #240]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008ab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab8:	f7fb fc52 	bl	8004360 <HAL_GetTick>
 8008abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008abe:	e008      	b.n	8008ad2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ac0:	f7fb fc4e 	bl	8004360 <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e232      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ad2:	4b34      	ldr	r3, [pc, #208]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0f0      	beq.n	8008ac0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ade:	4b31      	ldr	r3, [pc, #196]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	061b      	lsls	r3, r3, #24
 8008aec:	492d      	ldr	r1, [pc, #180]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	604b      	str	r3, [r1, #4]
 8008af2:	e01a      	b.n	8008b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008af4:	4b2b      	ldr	r3, [pc, #172]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a2a      	ldr	r2, [pc, #168]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008afa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b00:	f7fb fc2e 	bl	8004360 <HAL_GetTick>
 8008b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008b06:	e008      	b.n	8008b1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b08:	f7fb fc2a 	bl	8004360 <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d901      	bls.n	8008b1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e20e      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008b1a:	4b22      	ldr	r3, [pc, #136]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1f0      	bne.n	8008b08 <HAL_RCC_OscConfig+0x1e0>
 8008b26:	e000      	b.n	8008b2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0308 	and.w	r3, r3, #8
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d041      	beq.n	8008bba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d01c      	beq.n	8008b78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b3e:	4b19      	ldr	r3, [pc, #100]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b44:	4a17      	ldr	r2, [pc, #92]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008b46:	f043 0301 	orr.w	r3, r3, #1
 8008b4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b4e:	f7fb fc07 	bl	8004360 <HAL_GetTick>
 8008b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b54:	e008      	b.n	8008b68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b56:	f7fb fc03 	bl	8004360 <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d901      	bls.n	8008b68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e1e7      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b68:	4b0e      	ldr	r3, [pc, #56]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b6e:	f003 0302 	and.w	r3, r3, #2
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0ef      	beq.n	8008b56 <HAL_RCC_OscConfig+0x22e>
 8008b76:	e020      	b.n	8008bba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b78:	4b0a      	ldr	r3, [pc, #40]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b7e:	4a09      	ldr	r2, [pc, #36]	@ (8008ba4 <HAL_RCC_OscConfig+0x27c>)
 8008b80:	f023 0301 	bic.w	r3, r3, #1
 8008b84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b88:	f7fb fbea 	bl	8004360 <HAL_GetTick>
 8008b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b8e:	e00d      	b.n	8008bac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b90:	f7fb fbe6 	bl	8004360 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d906      	bls.n	8008bac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e1ca      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
 8008ba2:	bf00      	nop
 8008ba4:	40021000 	.word	0x40021000
 8008ba8:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008bac:	4b8c      	ldr	r3, [pc, #560]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1ea      	bne.n	8008b90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0304 	and.w	r3, r3, #4
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 80a6 	beq.w	8008d14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008bcc:	4b84      	ldr	r3, [pc, #528]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d101      	bne.n	8008bdc <HAL_RCC_OscConfig+0x2b4>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e000      	b.n	8008bde <HAL_RCC_OscConfig+0x2b6>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00d      	beq.n	8008bfe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008be2:	4b7f      	ldr	r3, [pc, #508]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008be6:	4a7e      	ldr	r2, [pc, #504]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bec:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bee:	4b7c      	ldr	r3, [pc, #496]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bfe:	4b79      	ldr	r3, [pc, #484]	@ (8008de4 <HAL_RCC_OscConfig+0x4bc>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d118      	bne.n	8008c3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c0a:	4b76      	ldr	r3, [pc, #472]	@ (8008de4 <HAL_RCC_OscConfig+0x4bc>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a75      	ldr	r2, [pc, #468]	@ (8008de4 <HAL_RCC_OscConfig+0x4bc>)
 8008c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c16:	f7fb fba3 	bl	8004360 <HAL_GetTick>
 8008c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c1c:	e008      	b.n	8008c30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c1e:	f7fb fb9f 	bl	8004360 <HAL_GetTick>
 8008c22:	4602      	mov	r2, r0
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d901      	bls.n	8008c30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e183      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c30:	4b6c      	ldr	r3, [pc, #432]	@ (8008de4 <HAL_RCC_OscConfig+0x4bc>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d0f0      	beq.n	8008c1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d108      	bne.n	8008c56 <HAL_RCC_OscConfig+0x32e>
 8008c44:	4b66      	ldr	r3, [pc, #408]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c4a:	4a65      	ldr	r2, [pc, #404]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008c4c:	f043 0301 	orr.w	r3, r3, #1
 8008c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c54:	e024      	b.n	8008ca0 <HAL_RCC_OscConfig+0x378>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	2b05      	cmp	r3, #5
 8008c5c:	d110      	bne.n	8008c80 <HAL_RCC_OscConfig+0x358>
 8008c5e:	4b60      	ldr	r3, [pc, #384]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c64:	4a5e      	ldr	r2, [pc, #376]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008c66:	f043 0304 	orr.w	r3, r3, #4
 8008c6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c74:	4a5a      	ldr	r2, [pc, #360]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008c76:	f043 0301 	orr.w	r3, r3, #1
 8008c7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c7e:	e00f      	b.n	8008ca0 <HAL_RCC_OscConfig+0x378>
 8008c80:	4b57      	ldr	r3, [pc, #348]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c86:	4a56      	ldr	r2, [pc, #344]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008c88:	f023 0301 	bic.w	r3, r3, #1
 8008c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c90:	4b53      	ldr	r3, [pc, #332]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c96:	4a52      	ldr	r2, [pc, #328]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008c98:	f023 0304 	bic.w	r3, r3, #4
 8008c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d016      	beq.n	8008cd6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ca8:	f7fb fb5a 	bl	8004360 <HAL_GetTick>
 8008cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cae:	e00a      	b.n	8008cc6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cb0:	f7fb fb56 	bl	8004360 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d901      	bls.n	8008cc6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e138      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cc6:	4b46      	ldr	r3, [pc, #280]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0ed      	beq.n	8008cb0 <HAL_RCC_OscConfig+0x388>
 8008cd4:	e015      	b.n	8008d02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cd6:	f7fb fb43 	bl	8004360 <HAL_GetTick>
 8008cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008cdc:	e00a      	b.n	8008cf4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cde:	f7fb fb3f 	bl	8004360 <HAL_GetTick>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d901      	bls.n	8008cf4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	e121      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cfa:	f003 0302 	and.w	r3, r3, #2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1ed      	bne.n	8008cde <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008d02:	7ffb      	ldrb	r3, [r7, #31]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d105      	bne.n	8008d14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d08:	4b35      	ldr	r3, [pc, #212]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d0c:	4a34      	ldr	r2, [pc, #208]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d12:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0320 	and.w	r3, r3, #32
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d03c      	beq.n	8008d9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01c      	beq.n	8008d62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008d28:	4b2d      	ldr	r3, [pc, #180]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008d30:	f043 0301 	orr.w	r3, r3, #1
 8008d34:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d38:	f7fb fb12 	bl	8004360 <HAL_GetTick>
 8008d3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008d3e:	e008      	b.n	8008d52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d40:	f7fb fb0e 	bl	8004360 <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d901      	bls.n	8008d52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e0f2      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008d52:	4b23      	ldr	r3, [pc, #140]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008d54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0ef      	beq.n	8008d40 <HAL_RCC_OscConfig+0x418>
 8008d60:	e01b      	b.n	8008d9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d62:	4b1f      	ldr	r3, [pc, #124]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d68:	4a1d      	ldr	r2, [pc, #116]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008d6a:	f023 0301 	bic.w	r3, r3, #1
 8008d6e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d72:	f7fb faf5 	bl	8004360 <HAL_GetTick>
 8008d76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008d78:	e008      	b.n	8008d8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d7a:	f7fb faf1 	bl	8004360 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d901      	bls.n	8008d8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e0d5      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008d8c:	4b14      	ldr	r3, [pc, #80]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1ef      	bne.n	8008d7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 80c9 	beq.w	8008f36 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008da4:	4b0e      	ldr	r3, [pc, #56]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	f003 030c 	and.w	r3, r3, #12
 8008dac:	2b0c      	cmp	r3, #12
 8008dae:	f000 8083 	beq.w	8008eb8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d15e      	bne.n	8008e78 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dba:	4b09      	ldr	r3, [pc, #36]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a08      	ldr	r2, [pc, #32]	@ (8008de0 <HAL_RCC_OscConfig+0x4b8>)
 8008dc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc6:	f7fb facb 	bl	8004360 <HAL_GetTick>
 8008dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dcc:	e00c      	b.n	8008de8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dce:	f7fb fac7 	bl	8004360 <HAL_GetTick>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d905      	bls.n	8008de8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e0ab      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
 8008de0:	40021000 	.word	0x40021000
 8008de4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008de8:	4b55      	ldr	r3, [pc, #340]	@ (8008f40 <HAL_RCC_OscConfig+0x618>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1ec      	bne.n	8008dce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008df4:	4b52      	ldr	r3, [pc, #328]	@ (8008f40 <HAL_RCC_OscConfig+0x618>)
 8008df6:	68da      	ldr	r2, [r3, #12]
 8008df8:	4b52      	ldr	r3, [pc, #328]	@ (8008f44 <HAL_RCC_OscConfig+0x61c>)
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	6a11      	ldr	r1, [r2, #32]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008e04:	3a01      	subs	r2, #1
 8008e06:	0112      	lsls	r2, r2, #4
 8008e08:	4311      	orrs	r1, r2
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008e0e:	0212      	lsls	r2, r2, #8
 8008e10:	4311      	orrs	r1, r2
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008e16:	0852      	lsrs	r2, r2, #1
 8008e18:	3a01      	subs	r2, #1
 8008e1a:	0552      	lsls	r2, r2, #21
 8008e1c:	4311      	orrs	r1, r2
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008e22:	0852      	lsrs	r2, r2, #1
 8008e24:	3a01      	subs	r2, #1
 8008e26:	0652      	lsls	r2, r2, #25
 8008e28:	4311      	orrs	r1, r2
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008e2e:	06d2      	lsls	r2, r2, #27
 8008e30:	430a      	orrs	r2, r1
 8008e32:	4943      	ldr	r1, [pc, #268]	@ (8008f40 <HAL_RCC_OscConfig+0x618>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e38:	4b41      	ldr	r3, [pc, #260]	@ (8008f40 <HAL_RCC_OscConfig+0x618>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a40      	ldr	r2, [pc, #256]	@ (8008f40 <HAL_RCC_OscConfig+0x618>)
 8008e3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008e44:	4b3e      	ldr	r3, [pc, #248]	@ (8008f40 <HAL_RCC_OscConfig+0x618>)
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	4a3d      	ldr	r2, [pc, #244]	@ (8008f40 <HAL_RCC_OscConfig+0x618>)
 8008e4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e50:	f7fb fa86 	bl	8004360 <HAL_GetTick>
 8008e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e56:	e008      	b.n	8008e6a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e58:	f7fb fa82 	bl	8004360 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d901      	bls.n	8008e6a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e066      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e6a:	4b35      	ldr	r3, [pc, #212]	@ (8008f40 <HAL_RCC_OscConfig+0x618>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d0f0      	beq.n	8008e58 <HAL_RCC_OscConfig+0x530>
 8008e76:	e05e      	b.n	8008f36 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e78:	4b31      	ldr	r3, [pc, #196]	@ (8008f40 <HAL_RCC_OscConfig+0x618>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a30      	ldr	r2, [pc, #192]	@ (8008f40 <HAL_RCC_OscConfig+0x618>)
 8008e7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e84:	f7fb fa6c 	bl	8004360 <HAL_GetTick>
 8008e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e8a:	e008      	b.n	8008e9e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e8c:	f7fb fa68 	bl	8004360 <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d901      	bls.n	8008e9e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e04c      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e9e:	4b28      	ldr	r3, [pc, #160]	@ (8008f40 <HAL_RCC_OscConfig+0x618>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1f0      	bne.n	8008e8c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008eaa:	4b25      	ldr	r3, [pc, #148]	@ (8008f40 <HAL_RCC_OscConfig+0x618>)
 8008eac:	68da      	ldr	r2, [r3, #12]
 8008eae:	4924      	ldr	r1, [pc, #144]	@ (8008f40 <HAL_RCC_OscConfig+0x618>)
 8008eb0:	4b25      	ldr	r3, [pc, #148]	@ (8008f48 <HAL_RCC_OscConfig+0x620>)
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	60cb      	str	r3, [r1, #12]
 8008eb6:	e03e      	b.n	8008f36 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	69db      	ldr	r3, [r3, #28]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d101      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e039      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8008f40 <HAL_RCC_OscConfig+0x618>)
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f003 0203 	and.w	r2, r3, #3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d12c      	bne.n	8008f32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d123      	bne.n	8008f32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d11b      	bne.n	8008f32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f04:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d113      	bne.n	8008f32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f14:	085b      	lsrs	r3, r3, #1
 8008f16:	3b01      	subs	r3, #1
 8008f18:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d109      	bne.n	8008f32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f28:	085b      	lsrs	r3, r3, #1
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d001      	beq.n	8008f36 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e000      	b.n	8008f38 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3720      	adds	r7, #32
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	40021000 	.word	0x40021000
 8008f44:	019f800c 	.word	0x019f800c
 8008f48:	feeefffc 	.word	0xfeeefffc

08008f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008f56:	2300      	movs	r3, #0
 8008f58:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d101      	bne.n	8008f64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e11e      	b.n	80091a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f64:	4b91      	ldr	r3, [pc, #580]	@ (80091ac <HAL_RCC_ClockConfig+0x260>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 030f 	and.w	r3, r3, #15
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d910      	bls.n	8008f94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f72:	4b8e      	ldr	r3, [pc, #568]	@ (80091ac <HAL_RCC_ClockConfig+0x260>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f023 020f 	bic.w	r2, r3, #15
 8008f7a:	498c      	ldr	r1, [pc, #560]	@ (80091ac <HAL_RCC_ClockConfig+0x260>)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f82:	4b8a      	ldr	r3, [pc, #552]	@ (80091ac <HAL_RCC_ClockConfig+0x260>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 030f 	and.w	r3, r3, #15
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d001      	beq.n	8008f94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e106      	b.n	80091a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d073      	beq.n	8009088 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d129      	bne.n	8008ffc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fa8:	4b81      	ldr	r3, [pc, #516]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e0f4      	b.n	80091a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008fb8:	f000 f99e 	bl	80092f8 <RCC_GetSysClockFreqFromPLLSource>
 8008fbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	4a7c      	ldr	r2, [pc, #496]	@ (80091b4 <HAL_RCC_ClockConfig+0x268>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d93f      	bls.n	8009046 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008fc6:	4b7a      	ldr	r3, [pc, #488]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d009      	beq.n	8008fe6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d033      	beq.n	8009046 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d12f      	bne.n	8009046 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008fe6:	4b72      	ldr	r3, [pc, #456]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fee:	4a70      	ldr	r2, [pc, #448]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 8008ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ff4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008ff6:	2380      	movs	r3, #128	@ 0x80
 8008ff8:	617b      	str	r3, [r7, #20]
 8008ffa:	e024      	b.n	8009046 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	2b02      	cmp	r3, #2
 8009002:	d107      	bne.n	8009014 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009004:	4b6a      	ldr	r3, [pc, #424]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d109      	bne.n	8009024 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e0c6      	b.n	80091a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009014:	4b66      	ldr	r3, [pc, #408]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e0be      	b.n	80091a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009024:	f000 f8ce 	bl	80091c4 <HAL_RCC_GetSysClockFreq>
 8009028:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	4a61      	ldr	r2, [pc, #388]	@ (80091b4 <HAL_RCC_ClockConfig+0x268>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d909      	bls.n	8009046 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009032:	4b5f      	ldr	r3, [pc, #380]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800903a:	4a5d      	ldr	r2, [pc, #372]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 800903c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009040:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009042:	2380      	movs	r3, #128	@ 0x80
 8009044:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009046:	4b5a      	ldr	r3, [pc, #360]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	f023 0203 	bic.w	r2, r3, #3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	4957      	ldr	r1, [pc, #348]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 8009054:	4313      	orrs	r3, r2
 8009056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009058:	f7fb f982 	bl	8004360 <HAL_GetTick>
 800905c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800905e:	e00a      	b.n	8009076 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009060:	f7fb f97e 	bl	8004360 <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800906e:	4293      	cmp	r3, r2
 8009070:	d901      	bls.n	8009076 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	e095      	b.n	80091a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009076:	4b4e      	ldr	r3, [pc, #312]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f003 020c 	and.w	r2, r3, #12
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	429a      	cmp	r2, r3
 8009086:	d1eb      	bne.n	8009060 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0302 	and.w	r3, r3, #2
 8009090:	2b00      	cmp	r3, #0
 8009092:	d023      	beq.n	80090dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0304 	and.w	r3, r3, #4
 800909c:	2b00      	cmp	r3, #0
 800909e:	d005      	beq.n	80090ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090a0:	4b43      	ldr	r3, [pc, #268]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	4a42      	ldr	r2, [pc, #264]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 80090a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80090aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0308 	and.w	r3, r3, #8
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d007      	beq.n	80090c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80090b8:	4b3d      	ldr	r3, [pc, #244]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80090c0:	4a3b      	ldr	r2, [pc, #236]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 80090c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80090c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090c8:	4b39      	ldr	r3, [pc, #228]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	4936      	ldr	r1, [pc, #216]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	608b      	str	r3, [r1, #8]
 80090da:	e008      	b.n	80090ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	2b80      	cmp	r3, #128	@ 0x80
 80090e0:	d105      	bne.n	80090ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80090e2:	4b33      	ldr	r3, [pc, #204]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	4a32      	ldr	r2, [pc, #200]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 80090e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090ee:	4b2f      	ldr	r3, [pc, #188]	@ (80091ac <HAL_RCC_ClockConfig+0x260>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 030f 	and.w	r3, r3, #15
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d21d      	bcs.n	8009138 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090fc:	4b2b      	ldr	r3, [pc, #172]	@ (80091ac <HAL_RCC_ClockConfig+0x260>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f023 020f 	bic.w	r2, r3, #15
 8009104:	4929      	ldr	r1, [pc, #164]	@ (80091ac <HAL_RCC_ClockConfig+0x260>)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	4313      	orrs	r3, r2
 800910a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800910c:	f7fb f928 	bl	8004360 <HAL_GetTick>
 8009110:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009112:	e00a      	b.n	800912a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009114:	f7fb f924 	bl	8004360 <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009122:	4293      	cmp	r3, r2
 8009124:	d901      	bls.n	800912a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009126:	2303      	movs	r3, #3
 8009128:	e03b      	b.n	80091a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800912a:	4b20      	ldr	r3, [pc, #128]	@ (80091ac <HAL_RCC_ClockConfig+0x260>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 030f 	and.w	r3, r3, #15
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	429a      	cmp	r2, r3
 8009136:	d1ed      	bne.n	8009114 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 0304 	and.w	r3, r3, #4
 8009140:	2b00      	cmp	r3, #0
 8009142:	d008      	beq.n	8009156 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009144:	4b1a      	ldr	r3, [pc, #104]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	4917      	ldr	r1, [pc, #92]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 8009152:	4313      	orrs	r3, r2
 8009154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0308 	and.w	r3, r3, #8
 800915e:	2b00      	cmp	r3, #0
 8009160:	d009      	beq.n	8009176 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009162:	4b13      	ldr	r3, [pc, #76]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	00db      	lsls	r3, r3, #3
 8009170:	490f      	ldr	r1, [pc, #60]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 8009172:	4313      	orrs	r3, r2
 8009174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009176:	f000 f825 	bl	80091c4 <HAL_RCC_GetSysClockFreq>
 800917a:	4602      	mov	r2, r0
 800917c:	4b0c      	ldr	r3, [pc, #48]	@ (80091b0 <HAL_RCC_ClockConfig+0x264>)
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	091b      	lsrs	r3, r3, #4
 8009182:	f003 030f 	and.w	r3, r3, #15
 8009186:	490c      	ldr	r1, [pc, #48]	@ (80091b8 <HAL_RCC_ClockConfig+0x26c>)
 8009188:	5ccb      	ldrb	r3, [r1, r3]
 800918a:	f003 031f 	and.w	r3, r3, #31
 800918e:	fa22 f303 	lsr.w	r3, r2, r3
 8009192:	4a0a      	ldr	r2, [pc, #40]	@ (80091bc <HAL_RCC_ClockConfig+0x270>)
 8009194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009196:	4b0a      	ldr	r3, [pc, #40]	@ (80091c0 <HAL_RCC_ClockConfig+0x274>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4618      	mov	r0, r3
 800919c:	f7fb f894 	bl	80042c8 <HAL_InitTick>
 80091a0:	4603      	mov	r3, r0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3718      	adds	r7, #24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	40022000 	.word	0x40022000
 80091b0:	40021000 	.word	0x40021000
 80091b4:	04c4b400 	.word	0x04c4b400
 80091b8:	08016eb8 	.word	0x08016eb8
 80091bc:	2000003c 	.word	0x2000003c
 80091c0:	20000040 	.word	0x20000040

080091c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80091ca:	4b2c      	ldr	r3, [pc, #176]	@ (800927c <HAL_RCC_GetSysClockFreq+0xb8>)
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f003 030c 	and.w	r3, r3, #12
 80091d2:	2b04      	cmp	r3, #4
 80091d4:	d102      	bne.n	80091dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80091d6:	4b2a      	ldr	r3, [pc, #168]	@ (8009280 <HAL_RCC_GetSysClockFreq+0xbc>)
 80091d8:	613b      	str	r3, [r7, #16]
 80091da:	e047      	b.n	800926c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80091dc:	4b27      	ldr	r3, [pc, #156]	@ (800927c <HAL_RCC_GetSysClockFreq+0xb8>)
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	f003 030c 	and.w	r3, r3, #12
 80091e4:	2b08      	cmp	r3, #8
 80091e6:	d102      	bne.n	80091ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80091e8:	4b26      	ldr	r3, [pc, #152]	@ (8009284 <HAL_RCC_GetSysClockFreq+0xc0>)
 80091ea:	613b      	str	r3, [r7, #16]
 80091ec:	e03e      	b.n	800926c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80091ee:	4b23      	ldr	r3, [pc, #140]	@ (800927c <HAL_RCC_GetSysClockFreq+0xb8>)
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f003 030c 	and.w	r3, r3, #12
 80091f6:	2b0c      	cmp	r3, #12
 80091f8:	d136      	bne.n	8009268 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80091fa:	4b20      	ldr	r3, [pc, #128]	@ (800927c <HAL_RCC_GetSysClockFreq+0xb8>)
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	f003 0303 	and.w	r3, r3, #3
 8009202:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009204:	4b1d      	ldr	r3, [pc, #116]	@ (800927c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	091b      	lsrs	r3, r3, #4
 800920a:	f003 030f 	and.w	r3, r3, #15
 800920e:	3301      	adds	r3, #1
 8009210:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b03      	cmp	r3, #3
 8009216:	d10c      	bne.n	8009232 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009218:	4a1a      	ldr	r2, [pc, #104]	@ (8009284 <HAL_RCC_GetSysClockFreq+0xc0>)
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009220:	4a16      	ldr	r2, [pc, #88]	@ (800927c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009222:	68d2      	ldr	r2, [r2, #12]
 8009224:	0a12      	lsrs	r2, r2, #8
 8009226:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800922a:	fb02 f303 	mul.w	r3, r2, r3
 800922e:	617b      	str	r3, [r7, #20]
      break;
 8009230:	e00c      	b.n	800924c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009232:	4a13      	ldr	r2, [pc, #76]	@ (8009280 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	fbb2 f3f3 	udiv	r3, r2, r3
 800923a:	4a10      	ldr	r2, [pc, #64]	@ (800927c <HAL_RCC_GetSysClockFreq+0xb8>)
 800923c:	68d2      	ldr	r2, [r2, #12]
 800923e:	0a12      	lsrs	r2, r2, #8
 8009240:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009244:	fb02 f303 	mul.w	r3, r2, r3
 8009248:	617b      	str	r3, [r7, #20]
      break;
 800924a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800924c:	4b0b      	ldr	r3, [pc, #44]	@ (800927c <HAL_RCC_GetSysClockFreq+0xb8>)
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	0e5b      	lsrs	r3, r3, #25
 8009252:	f003 0303 	and.w	r3, r3, #3
 8009256:	3301      	adds	r3, #1
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	fbb2 f3f3 	udiv	r3, r2, r3
 8009264:	613b      	str	r3, [r7, #16]
 8009266:	e001      	b.n	800926c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800926c:	693b      	ldr	r3, [r7, #16]
}
 800926e:	4618      	mov	r0, r3
 8009270:	371c      	adds	r7, #28
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	40021000 	.word	0x40021000
 8009280:	00f42400 	.word	0x00f42400
 8009284:	016e3600 	.word	0x016e3600

08009288 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009288:	b480      	push	{r7}
 800928a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800928c:	4b03      	ldr	r3, [pc, #12]	@ (800929c <HAL_RCC_GetHCLKFreq+0x14>)
 800928e:	681b      	ldr	r3, [r3, #0]
}
 8009290:	4618      	mov	r0, r3
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	2000003c 	.word	0x2000003c

080092a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80092a4:	f7ff fff0 	bl	8009288 <HAL_RCC_GetHCLKFreq>
 80092a8:	4602      	mov	r2, r0
 80092aa:	4b06      	ldr	r3, [pc, #24]	@ (80092c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	0a1b      	lsrs	r3, r3, #8
 80092b0:	f003 0307 	and.w	r3, r3, #7
 80092b4:	4904      	ldr	r1, [pc, #16]	@ (80092c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80092b6:	5ccb      	ldrb	r3, [r1, r3]
 80092b8:	f003 031f 	and.w	r3, r3, #31
 80092bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	40021000 	.word	0x40021000
 80092c8:	08016ec8 	.word	0x08016ec8

080092cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80092d0:	f7ff ffda 	bl	8009288 <HAL_RCC_GetHCLKFreq>
 80092d4:	4602      	mov	r2, r0
 80092d6:	4b06      	ldr	r3, [pc, #24]	@ (80092f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	0adb      	lsrs	r3, r3, #11
 80092dc:	f003 0307 	and.w	r3, r3, #7
 80092e0:	4904      	ldr	r1, [pc, #16]	@ (80092f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80092e2:	5ccb      	ldrb	r3, [r1, r3]
 80092e4:	f003 031f 	and.w	r3, r3, #31
 80092e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	40021000 	.word	0x40021000
 80092f4:	08016ec8 	.word	0x08016ec8

080092f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b087      	sub	sp, #28
 80092fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80092fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f003 0303 	and.w	r3, r3, #3
 8009306:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009308:	4b1b      	ldr	r3, [pc, #108]	@ (8009378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	091b      	lsrs	r3, r3, #4
 800930e:	f003 030f 	and.w	r3, r3, #15
 8009312:	3301      	adds	r3, #1
 8009314:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	2b03      	cmp	r3, #3
 800931a:	d10c      	bne.n	8009336 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800931c:	4a17      	ldr	r2, [pc, #92]	@ (800937c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	fbb2 f3f3 	udiv	r3, r2, r3
 8009324:	4a14      	ldr	r2, [pc, #80]	@ (8009378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009326:	68d2      	ldr	r2, [r2, #12]
 8009328:	0a12      	lsrs	r2, r2, #8
 800932a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800932e:	fb02 f303 	mul.w	r3, r2, r3
 8009332:	617b      	str	r3, [r7, #20]
    break;
 8009334:	e00c      	b.n	8009350 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009336:	4a12      	ldr	r2, [pc, #72]	@ (8009380 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	fbb2 f3f3 	udiv	r3, r2, r3
 800933e:	4a0e      	ldr	r2, [pc, #56]	@ (8009378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009340:	68d2      	ldr	r2, [r2, #12]
 8009342:	0a12      	lsrs	r2, r2, #8
 8009344:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009348:	fb02 f303 	mul.w	r3, r2, r3
 800934c:	617b      	str	r3, [r7, #20]
    break;
 800934e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009350:	4b09      	ldr	r3, [pc, #36]	@ (8009378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	0e5b      	lsrs	r3, r3, #25
 8009356:	f003 0303 	and.w	r3, r3, #3
 800935a:	3301      	adds	r3, #1
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	fbb2 f3f3 	udiv	r3, r2, r3
 8009368:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800936a:	687b      	ldr	r3, [r7, #4]
}
 800936c:	4618      	mov	r0, r3
 800936e:	371c      	adds	r7, #28
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr
 8009378:	40021000 	.word	0x40021000
 800937c:	016e3600 	.word	0x016e3600
 8009380:	00f42400 	.word	0x00f42400

08009384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800938c:	2300      	movs	r3, #0
 800938e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009390:	2300      	movs	r3, #0
 8009392:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800939c:	2b00      	cmp	r3, #0
 800939e:	f000 8098 	beq.w	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093a2:	2300      	movs	r3, #0
 80093a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093a6:	4b43      	ldr	r3, [pc, #268]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10d      	bne.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093b2:	4b40      	ldr	r3, [pc, #256]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093b6:	4a3f      	ldr	r2, [pc, #252]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80093be:	4b3d      	ldr	r3, [pc, #244]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093c6:	60bb      	str	r3, [r7, #8]
 80093c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093ca:	2301      	movs	r3, #1
 80093cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093ce:	4b3a      	ldr	r3, [pc, #232]	@ (80094b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a39      	ldr	r2, [pc, #228]	@ (80094b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80093d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093da:	f7fa ffc1 	bl	8004360 <HAL_GetTick>
 80093de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093e0:	e009      	b.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093e2:	f7fa ffbd 	bl	8004360 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d902      	bls.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	74fb      	strb	r3, [r7, #19]
        break;
 80093f4:	e005      	b.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093f6:	4b30      	ldr	r3, [pc, #192]	@ (80094b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d0ef      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009402:	7cfb      	ldrb	r3, [r7, #19]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d159      	bne.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009408:	4b2a      	ldr	r3, [pc, #168]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800940a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800940e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009412:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d01e      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	429a      	cmp	r2, r3
 8009422:	d019      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009424:	4b23      	ldr	r3, [pc, #140]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800942a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800942e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009430:	4b20      	ldr	r3, [pc, #128]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009436:	4a1f      	ldr	r2, [pc, #124]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800943c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009440:	4b1c      	ldr	r3, [pc, #112]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009446:	4a1b      	ldr	r2, [pc, #108]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800944c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009450:	4a18      	ldr	r2, [pc, #96]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	2b00      	cmp	r3, #0
 8009460:	d016      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009462:	f7fa ff7d 	bl	8004360 <HAL_GetTick>
 8009466:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009468:	e00b      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800946a:	f7fa ff79 	bl	8004360 <HAL_GetTick>
 800946e:	4602      	mov	r2, r0
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009478:	4293      	cmp	r3, r2
 800947a:	d902      	bls.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800947c:	2303      	movs	r3, #3
 800947e:	74fb      	strb	r3, [r7, #19]
            break;
 8009480:	e006      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009482:	4b0c      	ldr	r3, [pc, #48]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b00      	cmp	r3, #0
 800948e:	d0ec      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009490:	7cfb      	ldrb	r3, [r7, #19]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10b      	bne.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009496:	4b07      	ldr	r3, [pc, #28]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800949c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094a4:	4903      	ldr	r1, [pc, #12]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80094ac:	e008      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80094ae:	7cfb      	ldrb	r3, [r7, #19]
 80094b0:	74bb      	strb	r3, [r7, #18]
 80094b2:	e005      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80094b4:	40021000 	.word	0x40021000
 80094b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094bc:	7cfb      	ldrb	r3, [r7, #19]
 80094be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094c0:	7c7b      	ldrb	r3, [r7, #17]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d105      	bne.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094c6:	4ba7      	ldr	r3, [pc, #668]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ca:	4aa6      	ldr	r2, [pc, #664]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00a      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094de:	4ba1      	ldr	r3, [pc, #644]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e4:	f023 0203 	bic.w	r2, r3, #3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	499d      	ldr	r1, [pc, #628]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 0302 	and.w	r3, r3, #2
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00a      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009500:	4b98      	ldr	r3, [pc, #608]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009506:	f023 020c 	bic.w	r2, r3, #12
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	4995      	ldr	r1, [pc, #596]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009510:	4313      	orrs	r3, r2
 8009512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 0304 	and.w	r3, r3, #4
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00a      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009522:	4b90      	ldr	r3, [pc, #576]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009528:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	498c      	ldr	r1, [pc, #560]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009532:	4313      	orrs	r3, r2
 8009534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 0308 	and.w	r3, r3, #8
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00a      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009544:	4b87      	ldr	r3, [pc, #540]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800954a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	4984      	ldr	r1, [pc, #528]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009554:	4313      	orrs	r3, r2
 8009556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0310 	and.w	r3, r3, #16
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00a      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009566:	4b7f      	ldr	r3, [pc, #508]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800956c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	695b      	ldr	r3, [r3, #20]
 8009574:	497b      	ldr	r1, [pc, #492]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009576:	4313      	orrs	r3, r2
 8009578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0320 	and.w	r3, r3, #32
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00a      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009588:	4b76      	ldr	r3, [pc, #472]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800958a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800958e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	4973      	ldr	r1, [pc, #460]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009598:	4313      	orrs	r3, r2
 800959a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00a      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80095aa:	4b6e      	ldr	r3, [pc, #440]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	69db      	ldr	r3, [r3, #28]
 80095b8:	496a      	ldr	r1, [pc, #424]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d00a      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80095cc:	4b65      	ldr	r3, [pc, #404]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	4962      	ldr	r1, [pc, #392]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00a      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80095ee:	4b5d      	ldr	r3, [pc, #372]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095fc:	4959      	ldr	r1, [pc, #356]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00a      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009610:	4b54      	ldr	r3, [pc, #336]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009612:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009616:	f023 0203 	bic.w	r2, r3, #3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800961e:	4951      	ldr	r1, [pc, #324]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009620:	4313      	orrs	r3, r2
 8009622:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00a      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009632:	4b4c      	ldr	r3, [pc, #304]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009638:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009640:	4948      	ldr	r1, [pc, #288]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009642:	4313      	orrs	r3, r2
 8009644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009650:	2b00      	cmp	r3, #0
 8009652:	d015      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009654:	4b43      	ldr	r3, [pc, #268]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800965a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009662:	4940      	ldr	r1, [pc, #256]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009664:	4313      	orrs	r3, r2
 8009666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800966e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009672:	d105      	bne.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009674:	4b3b      	ldr	r3, [pc, #236]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	4a3a      	ldr	r2, [pc, #232]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800967a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800967e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009688:	2b00      	cmp	r3, #0
 800968a:	d015      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800968c:	4b35      	ldr	r3, [pc, #212]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800968e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009692:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800969a:	4932      	ldr	r1, [pc, #200]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800969c:	4313      	orrs	r3, r2
 800969e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096aa:	d105      	bne.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096ac:	4b2d      	ldr	r3, [pc, #180]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	4a2c      	ldr	r2, [pc, #176]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096b6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d015      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80096c4:	4b27      	ldr	r3, [pc, #156]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d2:	4924      	ldr	r1, [pc, #144]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096d4:	4313      	orrs	r3, r2
 80096d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80096e2:	d105      	bne.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096e4:	4b1f      	ldr	r3, [pc, #124]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	4a1e      	ldr	r2, [pc, #120]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d015      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096fc:	4b19      	ldr	r3, [pc, #100]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009702:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800970a:	4916      	ldr	r1, [pc, #88]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800970c:	4313      	orrs	r3, r2
 800970e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009716:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800971a:	d105      	bne.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800971c:	4b11      	ldr	r3, [pc, #68]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	4a10      	ldr	r2, [pc, #64]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009726:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d019      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009734:	4b0b      	ldr	r3, [pc, #44]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800973a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009742:	4908      	ldr	r1, [pc, #32]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009744:	4313      	orrs	r3, r2
 8009746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800974e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009752:	d109      	bne.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009754:	4b03      	ldr	r3, [pc, #12]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	4a02      	ldr	r2, [pc, #8]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800975a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800975e:	60d3      	str	r3, [r2, #12]
 8009760:	e002      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009762:	bf00      	nop
 8009764:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d015      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009774:	4b29      	ldr	r3, [pc, #164]	@ (800981c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800977a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009782:	4926      	ldr	r1, [pc, #152]	@ (800981c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009784:	4313      	orrs	r3, r2
 8009786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800978e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009792:	d105      	bne.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009794:	4b21      	ldr	r3, [pc, #132]	@ (800981c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	4a20      	ldr	r2, [pc, #128]	@ (800981c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800979a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800979e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d015      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80097ac:	4b1b      	ldr	r3, [pc, #108]	@ (800981c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097b2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097ba:	4918      	ldr	r1, [pc, #96]	@ (800981c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097bc:	4313      	orrs	r3, r2
 80097be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ca:	d105      	bne.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80097cc:	4b13      	ldr	r3, [pc, #76]	@ (800981c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	4a12      	ldr	r2, [pc, #72]	@ (800981c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d015      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80097e4:	4b0d      	ldr	r3, [pc, #52]	@ (800981c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097f2:	490a      	ldr	r1, [pc, #40]	@ (800981c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097f4:	4313      	orrs	r3, r2
 80097f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009802:	d105      	bne.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009804:	4b05      	ldr	r3, [pc, #20]	@ (800981c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	4a04      	ldr	r2, [pc, #16]	@ (800981c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800980a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800980e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009810:	7cbb      	ldrb	r3, [r7, #18]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	40021000 	.word	0x40021000

08009820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e049      	b.n	80098c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d106      	bne.n	800984c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7fa fa42 	bl	8003cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3304      	adds	r3, #4
 800985c:	4619      	mov	r1, r3
 800985e:	4610      	mov	r0, r2
 8009860:	f000 fe58 	bl	800a514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d001      	beq.n	80098e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e04c      	b.n	8009982 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2202      	movs	r2, #2
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a26      	ldr	r2, [pc, #152]	@ (8009990 <HAL_TIM_Base_Start+0xc0>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d022      	beq.n	8009940 <HAL_TIM_Base_Start+0x70>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009902:	d01d      	beq.n	8009940 <HAL_TIM_Base_Start+0x70>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a22      	ldr	r2, [pc, #136]	@ (8009994 <HAL_TIM_Base_Start+0xc4>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d018      	beq.n	8009940 <HAL_TIM_Base_Start+0x70>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a21      	ldr	r2, [pc, #132]	@ (8009998 <HAL_TIM_Base_Start+0xc8>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d013      	beq.n	8009940 <HAL_TIM_Base_Start+0x70>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a1f      	ldr	r2, [pc, #124]	@ (800999c <HAL_TIM_Base_Start+0xcc>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d00e      	beq.n	8009940 <HAL_TIM_Base_Start+0x70>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a1e      	ldr	r2, [pc, #120]	@ (80099a0 <HAL_TIM_Base_Start+0xd0>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d009      	beq.n	8009940 <HAL_TIM_Base_Start+0x70>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a1c      	ldr	r2, [pc, #112]	@ (80099a4 <HAL_TIM_Base_Start+0xd4>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d004      	beq.n	8009940 <HAL_TIM_Base_Start+0x70>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a1b      	ldr	r2, [pc, #108]	@ (80099a8 <HAL_TIM_Base_Start+0xd8>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d115      	bne.n	800996c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	689a      	ldr	r2, [r3, #8]
 8009946:	4b19      	ldr	r3, [pc, #100]	@ (80099ac <HAL_TIM_Base_Start+0xdc>)
 8009948:	4013      	ands	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b06      	cmp	r3, #6
 8009950:	d015      	beq.n	800997e <HAL_TIM_Base_Start+0xae>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009958:	d011      	beq.n	800997e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f042 0201 	orr.w	r2, r2, #1
 8009968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800996a:	e008      	b.n	800997e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f042 0201 	orr.w	r2, r2, #1
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	e000      	b.n	8009980 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800997e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	40012c00 	.word	0x40012c00
 8009994:	40000400 	.word	0x40000400
 8009998:	40000800 	.word	0x40000800
 800999c:	40000c00 	.word	0x40000c00
 80099a0:	40013400 	.word	0x40013400
 80099a4:	40014000 	.word	0x40014000
 80099a8:	40015000 	.word	0x40015000
 80099ac:	00010007 	.word	0x00010007

080099b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d001      	beq.n	80099c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e054      	b.n	8009a72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68da      	ldr	r2, [r3, #12]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f042 0201 	orr.w	r2, r2, #1
 80099de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a26      	ldr	r2, [pc, #152]	@ (8009a80 <HAL_TIM_Base_Start_IT+0xd0>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d022      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099f2:	d01d      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a22      	ldr	r2, [pc, #136]	@ (8009a84 <HAL_TIM_Base_Start_IT+0xd4>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d018      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a21      	ldr	r2, [pc, #132]	@ (8009a88 <HAL_TIM_Base_Start_IT+0xd8>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d013      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8009a8c <HAL_TIM_Base_Start_IT+0xdc>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d00e      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a1e      	ldr	r2, [pc, #120]	@ (8009a90 <HAL_TIM_Base_Start_IT+0xe0>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d009      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a1c      	ldr	r2, [pc, #112]	@ (8009a94 <HAL_TIM_Base_Start_IT+0xe4>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d004      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8009a98 <HAL_TIM_Base_Start_IT+0xe8>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d115      	bne.n	8009a5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	689a      	ldr	r2, [r3, #8]
 8009a36:	4b19      	ldr	r3, [pc, #100]	@ (8009a9c <HAL_TIM_Base_Start_IT+0xec>)
 8009a38:	4013      	ands	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2b06      	cmp	r3, #6
 8009a40:	d015      	beq.n	8009a6e <HAL_TIM_Base_Start_IT+0xbe>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a48:	d011      	beq.n	8009a6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f042 0201 	orr.w	r2, r2, #1
 8009a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a5a:	e008      	b.n	8009a6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f042 0201 	orr.w	r2, r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	e000      	b.n	8009a70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	40012c00 	.word	0x40012c00
 8009a84:	40000400 	.word	0x40000400
 8009a88:	40000800 	.word	0x40000800
 8009a8c:	40000c00 	.word	0x40000c00
 8009a90:	40013400 	.word	0x40013400
 8009a94:	40014000 	.word	0x40014000
 8009a98:	40015000 	.word	0x40015000
 8009a9c:	00010007 	.word	0x00010007

08009aa0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68da      	ldr	r2, [r3, #12]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f022 0201 	bic.w	r2, r2, #1
 8009ab6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6a1a      	ldr	r2, [r3, #32]
 8009abe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10f      	bne.n	8009ae8 <HAL_TIM_Base_Stop_IT+0x48>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6a1a      	ldr	r2, [r3, #32]
 8009ace:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d107      	bne.n	8009ae8 <HAL_TIM_Base_Stop_IT+0x48>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f022 0201 	bic.w	r2, r2, #1
 8009ae6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b082      	sub	sp, #8
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e049      	b.n	8009ba4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d106      	bne.n	8009b2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7fa f899 	bl	8003c5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2202      	movs	r2, #2
 8009b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	3304      	adds	r3, #4
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	4610      	mov	r0, r2
 8009b3e:	f000 fce9 	bl	800a514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d109      	bne.n	8009bd0 <HAL_TIM_PWM_Start+0x24>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	bf14      	ite	ne
 8009bc8:	2301      	movne	r3, #1
 8009bca:	2300      	moveq	r3, #0
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	e03c      	b.n	8009c4a <HAL_TIM_PWM_Start+0x9e>
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	2b04      	cmp	r3, #4
 8009bd4:	d109      	bne.n	8009bea <HAL_TIM_PWM_Start+0x3e>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	bf14      	ite	ne
 8009be2:	2301      	movne	r3, #1
 8009be4:	2300      	moveq	r3, #0
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	e02f      	b.n	8009c4a <HAL_TIM_PWM_Start+0x9e>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	2b08      	cmp	r3, #8
 8009bee:	d109      	bne.n	8009c04 <HAL_TIM_PWM_Start+0x58>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	bf14      	ite	ne
 8009bfc:	2301      	movne	r3, #1
 8009bfe:	2300      	moveq	r3, #0
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	e022      	b.n	8009c4a <HAL_TIM_PWM_Start+0x9e>
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	2b0c      	cmp	r3, #12
 8009c08:	d109      	bne.n	8009c1e <HAL_TIM_PWM_Start+0x72>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	bf14      	ite	ne
 8009c16:	2301      	movne	r3, #1
 8009c18:	2300      	moveq	r3, #0
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	e015      	b.n	8009c4a <HAL_TIM_PWM_Start+0x9e>
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	2b10      	cmp	r3, #16
 8009c22:	d109      	bne.n	8009c38 <HAL_TIM_PWM_Start+0x8c>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	bf14      	ite	ne
 8009c30:	2301      	movne	r3, #1
 8009c32:	2300      	moveq	r3, #0
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	e008      	b.n	8009c4a <HAL_TIM_PWM_Start+0x9e>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	bf14      	ite	ne
 8009c44:	2301      	movne	r3, #1
 8009c46:	2300      	moveq	r3, #0
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e0a6      	b.n	8009da0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d104      	bne.n	8009c62 <HAL_TIM_PWM_Start+0xb6>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c60:	e023      	b.n	8009caa <HAL_TIM_PWM_Start+0xfe>
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	d104      	bne.n	8009c72 <HAL_TIM_PWM_Start+0xc6>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c70:	e01b      	b.n	8009caa <HAL_TIM_PWM_Start+0xfe>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b08      	cmp	r3, #8
 8009c76:	d104      	bne.n	8009c82 <HAL_TIM_PWM_Start+0xd6>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c80:	e013      	b.n	8009caa <HAL_TIM_PWM_Start+0xfe>
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b0c      	cmp	r3, #12
 8009c86:	d104      	bne.n	8009c92 <HAL_TIM_PWM_Start+0xe6>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c90:	e00b      	b.n	8009caa <HAL_TIM_PWM_Start+0xfe>
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2b10      	cmp	r3, #16
 8009c96:	d104      	bne.n	8009ca2 <HAL_TIM_PWM_Start+0xf6>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ca0:	e003      	b.n	8009caa <HAL_TIM_PWM_Start+0xfe>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f001 f8a8 	bl	800ae08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a3a      	ldr	r2, [pc, #232]	@ (8009da8 <HAL_TIM_PWM_Start+0x1fc>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d018      	beq.n	8009cf4 <HAL_TIM_PWM_Start+0x148>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a39      	ldr	r2, [pc, #228]	@ (8009dac <HAL_TIM_PWM_Start+0x200>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d013      	beq.n	8009cf4 <HAL_TIM_PWM_Start+0x148>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a37      	ldr	r2, [pc, #220]	@ (8009db0 <HAL_TIM_PWM_Start+0x204>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d00e      	beq.n	8009cf4 <HAL_TIM_PWM_Start+0x148>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a36      	ldr	r2, [pc, #216]	@ (8009db4 <HAL_TIM_PWM_Start+0x208>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d009      	beq.n	8009cf4 <HAL_TIM_PWM_Start+0x148>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a34      	ldr	r2, [pc, #208]	@ (8009db8 <HAL_TIM_PWM_Start+0x20c>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d004      	beq.n	8009cf4 <HAL_TIM_PWM_Start+0x148>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a33      	ldr	r2, [pc, #204]	@ (8009dbc <HAL_TIM_PWM_Start+0x210>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d101      	bne.n	8009cf8 <HAL_TIM_PWM_Start+0x14c>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e000      	b.n	8009cfa <HAL_TIM_PWM_Start+0x14e>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d007      	beq.n	8009d0e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a25      	ldr	r2, [pc, #148]	@ (8009da8 <HAL_TIM_PWM_Start+0x1fc>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d022      	beq.n	8009d5e <HAL_TIM_PWM_Start+0x1b2>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d20:	d01d      	beq.n	8009d5e <HAL_TIM_PWM_Start+0x1b2>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a26      	ldr	r2, [pc, #152]	@ (8009dc0 <HAL_TIM_PWM_Start+0x214>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d018      	beq.n	8009d5e <HAL_TIM_PWM_Start+0x1b2>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a24      	ldr	r2, [pc, #144]	@ (8009dc4 <HAL_TIM_PWM_Start+0x218>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d013      	beq.n	8009d5e <HAL_TIM_PWM_Start+0x1b2>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a23      	ldr	r2, [pc, #140]	@ (8009dc8 <HAL_TIM_PWM_Start+0x21c>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d00e      	beq.n	8009d5e <HAL_TIM_PWM_Start+0x1b2>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a19      	ldr	r2, [pc, #100]	@ (8009dac <HAL_TIM_PWM_Start+0x200>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d009      	beq.n	8009d5e <HAL_TIM_PWM_Start+0x1b2>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a18      	ldr	r2, [pc, #96]	@ (8009db0 <HAL_TIM_PWM_Start+0x204>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d004      	beq.n	8009d5e <HAL_TIM_PWM_Start+0x1b2>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a18      	ldr	r2, [pc, #96]	@ (8009dbc <HAL_TIM_PWM_Start+0x210>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d115      	bne.n	8009d8a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	689a      	ldr	r2, [r3, #8]
 8009d64:	4b19      	ldr	r3, [pc, #100]	@ (8009dcc <HAL_TIM_PWM_Start+0x220>)
 8009d66:	4013      	ands	r3, r2
 8009d68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2b06      	cmp	r3, #6
 8009d6e:	d015      	beq.n	8009d9c <HAL_TIM_PWM_Start+0x1f0>
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d76:	d011      	beq.n	8009d9c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f042 0201 	orr.w	r2, r2, #1
 8009d86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d88:	e008      	b.n	8009d9c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f042 0201 	orr.w	r2, r2, #1
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	e000      	b.n	8009d9e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	40012c00 	.word	0x40012c00
 8009dac:	40013400 	.word	0x40013400
 8009db0:	40014000 	.word	0x40014000
 8009db4:	40014400 	.word	0x40014400
 8009db8:	40014800 	.word	0x40014800
 8009dbc:	40015000 	.word	0x40015000
 8009dc0:	40000400 	.word	0x40000400
 8009dc4:	40000800 	.word	0x40000800
 8009dc8:	40000c00 	.word	0x40000c00
 8009dcc:	00010007 	.word	0x00010007

08009dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	f003 0302 	and.w	r3, r3, #2
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d020      	beq.n	8009e34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f003 0302 	and.w	r3, r3, #2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d01b      	beq.n	8009e34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f06f 0202 	mvn.w	r2, #2
 8009e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	f003 0303 	and.w	r3, r3, #3
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fb5c 	bl	800a4d8 <HAL_TIM_IC_CaptureCallback>
 8009e20:	e005      	b.n	8009e2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fb4e 	bl	800a4c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 fb5f 	bl	800a4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	f003 0304 	and.w	r3, r3, #4
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d020      	beq.n	8009e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f003 0304 	and.w	r3, r3, #4
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d01b      	beq.n	8009e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f06f 0204 	mvn.w	r2, #4
 8009e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2202      	movs	r2, #2
 8009e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	699b      	ldr	r3, [r3, #24]
 8009e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d003      	beq.n	8009e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fb36 	bl	800a4d8 <HAL_TIM_IC_CaptureCallback>
 8009e6c:	e005      	b.n	8009e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fb28 	bl	800a4c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 fb39 	bl	800a4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	f003 0308 	and.w	r3, r3, #8
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d020      	beq.n	8009ecc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f003 0308 	and.w	r3, r3, #8
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d01b      	beq.n	8009ecc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f06f 0208 	mvn.w	r2, #8
 8009e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2204      	movs	r2, #4
 8009ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	f003 0303 	and.w	r3, r3, #3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d003      	beq.n	8009eba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fb10 	bl	800a4d8 <HAL_TIM_IC_CaptureCallback>
 8009eb8:	e005      	b.n	8009ec6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fb02 	bl	800a4c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 fb13 	bl	800a4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	f003 0310 	and.w	r3, r3, #16
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d020      	beq.n	8009f18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f003 0310 	and.w	r3, r3, #16
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d01b      	beq.n	8009f18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f06f 0210 	mvn.w	r2, #16
 8009ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2208      	movs	r2, #8
 8009eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	69db      	ldr	r3, [r3, #28]
 8009ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 faea 	bl	800a4d8 <HAL_TIM_IC_CaptureCallback>
 8009f04:	e005      	b.n	8009f12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fadc 	bl	800a4c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 faed 	bl	800a4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	f003 0301 	and.w	r3, r3, #1
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00c      	beq.n	8009f3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f003 0301 	and.w	r3, r3, #1
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d007      	beq.n	8009f3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f06f 0201 	mvn.w	r2, #1
 8009f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7f8 fdb2 	bl	8002aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d104      	bne.n	8009f50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00c      	beq.n	8009f6a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d007      	beq.n	8009f6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f001 f8a9 	bl	800b0bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00c      	beq.n	8009f8e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d007      	beq.n	8009f8e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f001 f8a1 	bl	800b0d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00c      	beq.n	8009fb2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d007      	beq.n	8009fb2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 faa7 	bl	800a500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	f003 0320 	and.w	r3, r3, #32
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00c      	beq.n	8009fd6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f003 0320 	and.w	r3, r3, #32
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d007      	beq.n	8009fd6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f06f 0220 	mvn.w	r2, #32
 8009fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f001 f869 	bl	800b0a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00c      	beq.n	8009ffa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d007      	beq.n	8009ffa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 f875 	bl	800b0e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00c      	beq.n	800a01e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d007      	beq.n	800a01e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f001 f86d 	bl	800b0f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00c      	beq.n	800a042 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d007      	beq.n	800a042 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a03a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f001 f865 	bl	800b10c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00c      	beq.n	800a066 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a052:	2b00      	cmp	r3, #0
 800a054:	d007      	beq.n	800a066 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a05e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 f85d 	bl	800b120 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a066:	bf00      	nop
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
	...

0800a070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a086:	2b01      	cmp	r3, #1
 800a088:	d101      	bne.n	800a08e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a08a:	2302      	movs	r3, #2
 800a08c:	e0ff      	b.n	800a28e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b14      	cmp	r3, #20
 800a09a:	f200 80f0 	bhi.w	800a27e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a09e:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a4:	0800a0f9 	.word	0x0800a0f9
 800a0a8:	0800a27f 	.word	0x0800a27f
 800a0ac:	0800a27f 	.word	0x0800a27f
 800a0b0:	0800a27f 	.word	0x0800a27f
 800a0b4:	0800a139 	.word	0x0800a139
 800a0b8:	0800a27f 	.word	0x0800a27f
 800a0bc:	0800a27f 	.word	0x0800a27f
 800a0c0:	0800a27f 	.word	0x0800a27f
 800a0c4:	0800a17b 	.word	0x0800a17b
 800a0c8:	0800a27f 	.word	0x0800a27f
 800a0cc:	0800a27f 	.word	0x0800a27f
 800a0d0:	0800a27f 	.word	0x0800a27f
 800a0d4:	0800a1bb 	.word	0x0800a1bb
 800a0d8:	0800a27f 	.word	0x0800a27f
 800a0dc:	0800a27f 	.word	0x0800a27f
 800a0e0:	0800a27f 	.word	0x0800a27f
 800a0e4:	0800a1fd 	.word	0x0800a1fd
 800a0e8:	0800a27f 	.word	0x0800a27f
 800a0ec:	0800a27f 	.word	0x0800a27f
 800a0f0:	0800a27f 	.word	0x0800a27f
 800a0f4:	0800a23d 	.word	0x0800a23d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68b9      	ldr	r1, [r7, #8]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f000 fabc 	bl	800a67c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	699a      	ldr	r2, [r3, #24]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f042 0208 	orr.w	r2, r2, #8
 800a112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	699a      	ldr	r2, [r3, #24]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f022 0204 	bic.w	r2, r2, #4
 800a122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6999      	ldr	r1, [r3, #24]
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	691a      	ldr	r2, [r3, #16]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	430a      	orrs	r2, r1
 800a134:	619a      	str	r2, [r3, #24]
      break;
 800a136:	e0a5      	b.n	800a284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68b9      	ldr	r1, [r7, #8]
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 fb36 	bl	800a7b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699a      	ldr	r2, [r3, #24]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	699a      	ldr	r2, [r3, #24]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	6999      	ldr	r1, [r3, #24]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	021a      	lsls	r2, r3, #8
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	430a      	orrs	r2, r1
 800a176:	619a      	str	r2, [r3, #24]
      break;
 800a178:	e084      	b.n	800a284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68b9      	ldr	r1, [r7, #8]
 800a180:	4618      	mov	r0, r3
 800a182:	f000 fba9 	bl	800a8d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	69da      	ldr	r2, [r3, #28]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f042 0208 	orr.w	r2, r2, #8
 800a194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	69da      	ldr	r2, [r3, #28]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f022 0204 	bic.w	r2, r2, #4
 800a1a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	69d9      	ldr	r1, [r3, #28]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	691a      	ldr	r2, [r3, #16]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	61da      	str	r2, [r3, #28]
      break;
 800a1b8:	e064      	b.n	800a284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68b9      	ldr	r1, [r7, #8]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f000 fc1b 	bl	800a9fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	69da      	ldr	r2, [r3, #28]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	69da      	ldr	r2, [r3, #28]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	69d9      	ldr	r1, [r3, #28]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	021a      	lsls	r2, r3, #8
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	430a      	orrs	r2, r1
 800a1f8:	61da      	str	r2, [r3, #28]
      break;
 800a1fa:	e043      	b.n	800a284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68b9      	ldr	r1, [r7, #8]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 fc8e 	bl	800ab24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f042 0208 	orr.w	r2, r2, #8
 800a216:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f022 0204 	bic.w	r2, r2, #4
 800a226:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	691a      	ldr	r2, [r3, #16]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	430a      	orrs	r2, r1
 800a238:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a23a:	e023      	b.n	800a284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68b9      	ldr	r1, [r7, #8]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fcd8 	bl	800abf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a256:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a266:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	021a      	lsls	r2, r3, #8
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	430a      	orrs	r2, r1
 800a27a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a27c:	e002      	b.n	800a284 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	75fb      	strb	r3, [r7, #23]
      break;
 800a282:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3718      	adds	r7, #24
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop

0800a298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d101      	bne.n	800a2b4 <HAL_TIM_ConfigClockSource+0x1c>
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	e0f6      	b.n	800a4a2 <HAL_TIM_ConfigClockSource+0x20a>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a2d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a2d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a6f      	ldr	r2, [pc, #444]	@ (800a4ac <HAL_TIM_ConfigClockSource+0x214>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	f000 80c1 	beq.w	800a476 <HAL_TIM_ConfigClockSource+0x1de>
 800a2f4:	4a6d      	ldr	r2, [pc, #436]	@ (800a4ac <HAL_TIM_ConfigClockSource+0x214>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	f200 80c6 	bhi.w	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2fc:	4a6c      	ldr	r2, [pc, #432]	@ (800a4b0 <HAL_TIM_ConfigClockSource+0x218>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	f000 80b9 	beq.w	800a476 <HAL_TIM_ConfigClockSource+0x1de>
 800a304:	4a6a      	ldr	r2, [pc, #424]	@ (800a4b0 <HAL_TIM_ConfigClockSource+0x218>)
 800a306:	4293      	cmp	r3, r2
 800a308:	f200 80be 	bhi.w	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a30c:	4a69      	ldr	r2, [pc, #420]	@ (800a4b4 <HAL_TIM_ConfigClockSource+0x21c>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	f000 80b1 	beq.w	800a476 <HAL_TIM_ConfigClockSource+0x1de>
 800a314:	4a67      	ldr	r2, [pc, #412]	@ (800a4b4 <HAL_TIM_ConfigClockSource+0x21c>)
 800a316:	4293      	cmp	r3, r2
 800a318:	f200 80b6 	bhi.w	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a31c:	4a66      	ldr	r2, [pc, #408]	@ (800a4b8 <HAL_TIM_ConfigClockSource+0x220>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	f000 80a9 	beq.w	800a476 <HAL_TIM_ConfigClockSource+0x1de>
 800a324:	4a64      	ldr	r2, [pc, #400]	@ (800a4b8 <HAL_TIM_ConfigClockSource+0x220>)
 800a326:	4293      	cmp	r3, r2
 800a328:	f200 80ae 	bhi.w	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a32c:	4a63      	ldr	r2, [pc, #396]	@ (800a4bc <HAL_TIM_ConfigClockSource+0x224>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	f000 80a1 	beq.w	800a476 <HAL_TIM_ConfigClockSource+0x1de>
 800a334:	4a61      	ldr	r2, [pc, #388]	@ (800a4bc <HAL_TIM_ConfigClockSource+0x224>)
 800a336:	4293      	cmp	r3, r2
 800a338:	f200 80a6 	bhi.w	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a33c:	4a60      	ldr	r2, [pc, #384]	@ (800a4c0 <HAL_TIM_ConfigClockSource+0x228>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	f000 8099 	beq.w	800a476 <HAL_TIM_ConfigClockSource+0x1de>
 800a344:	4a5e      	ldr	r2, [pc, #376]	@ (800a4c0 <HAL_TIM_ConfigClockSource+0x228>)
 800a346:	4293      	cmp	r3, r2
 800a348:	f200 809e 	bhi.w	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a34c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a350:	f000 8091 	beq.w	800a476 <HAL_TIM_ConfigClockSource+0x1de>
 800a354:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a358:	f200 8096 	bhi.w	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a35c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a360:	f000 8089 	beq.w	800a476 <HAL_TIM_ConfigClockSource+0x1de>
 800a364:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a368:	f200 808e 	bhi.w	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a36c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a370:	d03e      	beq.n	800a3f0 <HAL_TIM_ConfigClockSource+0x158>
 800a372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a376:	f200 8087 	bhi.w	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a37a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a37e:	f000 8086 	beq.w	800a48e <HAL_TIM_ConfigClockSource+0x1f6>
 800a382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a386:	d87f      	bhi.n	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a388:	2b70      	cmp	r3, #112	@ 0x70
 800a38a:	d01a      	beq.n	800a3c2 <HAL_TIM_ConfigClockSource+0x12a>
 800a38c:	2b70      	cmp	r3, #112	@ 0x70
 800a38e:	d87b      	bhi.n	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a390:	2b60      	cmp	r3, #96	@ 0x60
 800a392:	d050      	beq.n	800a436 <HAL_TIM_ConfigClockSource+0x19e>
 800a394:	2b60      	cmp	r3, #96	@ 0x60
 800a396:	d877      	bhi.n	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a398:	2b50      	cmp	r3, #80	@ 0x50
 800a39a:	d03c      	beq.n	800a416 <HAL_TIM_ConfigClockSource+0x17e>
 800a39c:	2b50      	cmp	r3, #80	@ 0x50
 800a39e:	d873      	bhi.n	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3a0:	2b40      	cmp	r3, #64	@ 0x40
 800a3a2:	d058      	beq.n	800a456 <HAL_TIM_ConfigClockSource+0x1be>
 800a3a4:	2b40      	cmp	r3, #64	@ 0x40
 800a3a6:	d86f      	bhi.n	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3a8:	2b30      	cmp	r3, #48	@ 0x30
 800a3aa:	d064      	beq.n	800a476 <HAL_TIM_ConfigClockSource+0x1de>
 800a3ac:	2b30      	cmp	r3, #48	@ 0x30
 800a3ae:	d86b      	bhi.n	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3b0:	2b20      	cmp	r3, #32
 800a3b2:	d060      	beq.n	800a476 <HAL_TIM_ConfigClockSource+0x1de>
 800a3b4:	2b20      	cmp	r3, #32
 800a3b6:	d867      	bhi.n	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d05c      	beq.n	800a476 <HAL_TIM_ConfigClockSource+0x1de>
 800a3bc:	2b10      	cmp	r3, #16
 800a3be:	d05a      	beq.n	800a476 <HAL_TIM_ConfigClockSource+0x1de>
 800a3c0:	e062      	b.n	800a488 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a3d2:	f000 fcf9 	bl	800adc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a3e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	609a      	str	r2, [r3, #8]
      break;
 800a3ee:	e04f      	b.n	800a490 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a400:	f000 fce2 	bl	800adc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689a      	ldr	r2, [r3, #8]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a412:	609a      	str	r2, [r3, #8]
      break;
 800a414:	e03c      	b.n	800a490 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a422:	461a      	mov	r2, r3
 800a424:	f000 fc54 	bl	800acd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2150      	movs	r1, #80	@ 0x50
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 fcad 	bl	800ad8e <TIM_ITRx_SetConfig>
      break;
 800a434:	e02c      	b.n	800a490 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a442:	461a      	mov	r2, r3
 800a444:	f000 fc73 	bl	800ad2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2160      	movs	r1, #96	@ 0x60
 800a44e:	4618      	mov	r0, r3
 800a450:	f000 fc9d 	bl	800ad8e <TIM_ITRx_SetConfig>
      break;
 800a454:	e01c      	b.n	800a490 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a462:	461a      	mov	r2, r3
 800a464:	f000 fc34 	bl	800acd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2140      	movs	r1, #64	@ 0x40
 800a46e:	4618      	mov	r0, r3
 800a470:	f000 fc8d 	bl	800ad8e <TIM_ITRx_SetConfig>
      break;
 800a474:	e00c      	b.n	800a490 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4619      	mov	r1, r3
 800a480:	4610      	mov	r0, r2
 800a482:	f000 fc84 	bl	800ad8e <TIM_ITRx_SetConfig>
      break;
 800a486:	e003      	b.n	800a490 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	73fb      	strb	r3, [r7, #15]
      break;
 800a48c:	e000      	b.n	800a490 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a48e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	00100070 	.word	0x00100070
 800a4b0:	00100060 	.word	0x00100060
 800a4b4:	00100050 	.word	0x00100050
 800a4b8:	00100040 	.word	0x00100040
 800a4bc:	00100030 	.word	0x00100030
 800a4c0:	00100020 	.word	0x00100020

0800a4c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a508:	bf00      	nop
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a4c      	ldr	r2, [pc, #304]	@ (800a658 <TIM_Base_SetConfig+0x144>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d017      	beq.n	800a55c <TIM_Base_SetConfig+0x48>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a532:	d013      	beq.n	800a55c <TIM_Base_SetConfig+0x48>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a49      	ldr	r2, [pc, #292]	@ (800a65c <TIM_Base_SetConfig+0x148>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d00f      	beq.n	800a55c <TIM_Base_SetConfig+0x48>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a48      	ldr	r2, [pc, #288]	@ (800a660 <TIM_Base_SetConfig+0x14c>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d00b      	beq.n	800a55c <TIM_Base_SetConfig+0x48>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a47      	ldr	r2, [pc, #284]	@ (800a664 <TIM_Base_SetConfig+0x150>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d007      	beq.n	800a55c <TIM_Base_SetConfig+0x48>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a46      	ldr	r2, [pc, #280]	@ (800a668 <TIM_Base_SetConfig+0x154>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d003      	beq.n	800a55c <TIM_Base_SetConfig+0x48>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a45      	ldr	r2, [pc, #276]	@ (800a66c <TIM_Base_SetConfig+0x158>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d108      	bne.n	800a56e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a39      	ldr	r2, [pc, #228]	@ (800a658 <TIM_Base_SetConfig+0x144>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d023      	beq.n	800a5be <TIM_Base_SetConfig+0xaa>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a57c:	d01f      	beq.n	800a5be <TIM_Base_SetConfig+0xaa>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a36      	ldr	r2, [pc, #216]	@ (800a65c <TIM_Base_SetConfig+0x148>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d01b      	beq.n	800a5be <TIM_Base_SetConfig+0xaa>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a35      	ldr	r2, [pc, #212]	@ (800a660 <TIM_Base_SetConfig+0x14c>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d017      	beq.n	800a5be <TIM_Base_SetConfig+0xaa>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a34      	ldr	r2, [pc, #208]	@ (800a664 <TIM_Base_SetConfig+0x150>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d013      	beq.n	800a5be <TIM_Base_SetConfig+0xaa>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a33      	ldr	r2, [pc, #204]	@ (800a668 <TIM_Base_SetConfig+0x154>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d00f      	beq.n	800a5be <TIM_Base_SetConfig+0xaa>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a33      	ldr	r2, [pc, #204]	@ (800a670 <TIM_Base_SetConfig+0x15c>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d00b      	beq.n	800a5be <TIM_Base_SetConfig+0xaa>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a32      	ldr	r2, [pc, #200]	@ (800a674 <TIM_Base_SetConfig+0x160>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d007      	beq.n	800a5be <TIM_Base_SetConfig+0xaa>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a31      	ldr	r2, [pc, #196]	@ (800a678 <TIM_Base_SetConfig+0x164>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d003      	beq.n	800a5be <TIM_Base_SetConfig+0xaa>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a2c      	ldr	r2, [pc, #176]	@ (800a66c <TIM_Base_SetConfig+0x158>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d108      	bne.n	800a5d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	689a      	ldr	r2, [r3, #8]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a18      	ldr	r2, [pc, #96]	@ (800a658 <TIM_Base_SetConfig+0x144>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d013      	beq.n	800a624 <TIM_Base_SetConfig+0x110>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a1a      	ldr	r2, [pc, #104]	@ (800a668 <TIM_Base_SetConfig+0x154>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d00f      	beq.n	800a624 <TIM_Base_SetConfig+0x110>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a1a      	ldr	r2, [pc, #104]	@ (800a670 <TIM_Base_SetConfig+0x15c>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d00b      	beq.n	800a624 <TIM_Base_SetConfig+0x110>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a19      	ldr	r2, [pc, #100]	@ (800a674 <TIM_Base_SetConfig+0x160>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d007      	beq.n	800a624 <TIM_Base_SetConfig+0x110>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a18      	ldr	r2, [pc, #96]	@ (800a678 <TIM_Base_SetConfig+0x164>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d003      	beq.n	800a624 <TIM_Base_SetConfig+0x110>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a13      	ldr	r2, [pc, #76]	@ (800a66c <TIM_Base_SetConfig+0x158>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d103      	bne.n	800a62c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	691a      	ldr	r2, [r3, #16]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	f003 0301 	and.w	r3, r3, #1
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d105      	bne.n	800a64a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	f023 0201 	bic.w	r2, r3, #1
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	611a      	str	r2, [r3, #16]
  }
}
 800a64a:	bf00      	nop
 800a64c:	3714      	adds	r7, #20
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	40012c00 	.word	0x40012c00
 800a65c:	40000400 	.word	0x40000400
 800a660:	40000800 	.word	0x40000800
 800a664:	40000c00 	.word	0x40000c00
 800a668:	40013400 	.word	0x40013400
 800a66c:	40015000 	.word	0x40015000
 800a670:	40014000 	.word	0x40014000
 800a674:	40014400 	.word	0x40014400
 800a678:	40014800 	.word	0x40014800

0800a67c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b087      	sub	sp, #28
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a1b      	ldr	r3, [r3, #32]
 800a690:	f023 0201 	bic.w	r2, r3, #1
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	699b      	ldr	r3, [r3, #24]
 800a6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f023 0303 	bic.w	r3, r3, #3
 800a6b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f023 0302 	bic.w	r3, r3, #2
 800a6c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a30      	ldr	r2, [pc, #192]	@ (800a798 <TIM_OC1_SetConfig+0x11c>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d013      	beq.n	800a704 <TIM_OC1_SetConfig+0x88>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a2f      	ldr	r2, [pc, #188]	@ (800a79c <TIM_OC1_SetConfig+0x120>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d00f      	beq.n	800a704 <TIM_OC1_SetConfig+0x88>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a2e      	ldr	r2, [pc, #184]	@ (800a7a0 <TIM_OC1_SetConfig+0x124>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d00b      	beq.n	800a704 <TIM_OC1_SetConfig+0x88>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a2d      	ldr	r2, [pc, #180]	@ (800a7a4 <TIM_OC1_SetConfig+0x128>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d007      	beq.n	800a704 <TIM_OC1_SetConfig+0x88>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a2c      	ldr	r2, [pc, #176]	@ (800a7a8 <TIM_OC1_SetConfig+0x12c>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d003      	beq.n	800a704 <TIM_OC1_SetConfig+0x88>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a2b      	ldr	r2, [pc, #172]	@ (800a7ac <TIM_OC1_SetConfig+0x130>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d10c      	bne.n	800a71e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f023 0308 	bic.w	r3, r3, #8
 800a70a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	697a      	ldr	r2, [r7, #20]
 800a712:	4313      	orrs	r3, r2
 800a714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	f023 0304 	bic.w	r3, r3, #4
 800a71c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a1d      	ldr	r2, [pc, #116]	@ (800a798 <TIM_OC1_SetConfig+0x11c>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d013      	beq.n	800a74e <TIM_OC1_SetConfig+0xd2>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a1c      	ldr	r2, [pc, #112]	@ (800a79c <TIM_OC1_SetConfig+0x120>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d00f      	beq.n	800a74e <TIM_OC1_SetConfig+0xd2>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a1b      	ldr	r2, [pc, #108]	@ (800a7a0 <TIM_OC1_SetConfig+0x124>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d00b      	beq.n	800a74e <TIM_OC1_SetConfig+0xd2>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a1a      	ldr	r2, [pc, #104]	@ (800a7a4 <TIM_OC1_SetConfig+0x128>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d007      	beq.n	800a74e <TIM_OC1_SetConfig+0xd2>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a19      	ldr	r2, [pc, #100]	@ (800a7a8 <TIM_OC1_SetConfig+0x12c>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d003      	beq.n	800a74e <TIM_OC1_SetConfig+0xd2>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a18      	ldr	r2, [pc, #96]	@ (800a7ac <TIM_OC1_SetConfig+0x130>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d111      	bne.n	800a772 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a75c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	4313      	orrs	r3, r2
 800a766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	693a      	ldr	r2, [r7, #16]
 800a76e:	4313      	orrs	r3, r2
 800a770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	685a      	ldr	r2, [r3, #4]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	621a      	str	r2, [r3, #32]
}
 800a78c:	bf00      	nop
 800a78e:	371c      	adds	r7, #28
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	40012c00 	.word	0x40012c00
 800a79c:	40013400 	.word	0x40013400
 800a7a0:	40014000 	.word	0x40014000
 800a7a4:	40014400 	.word	0x40014400
 800a7a8:	40014800 	.word	0x40014800
 800a7ac:	40015000 	.word	0x40015000

0800a7b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b087      	sub	sp, #28
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a1b      	ldr	r3, [r3, #32]
 800a7be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a1b      	ldr	r3, [r3, #32]
 800a7c4:	f023 0210 	bic.w	r2, r3, #16
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a7de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	021b      	lsls	r3, r3, #8
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	f023 0320 	bic.w	r3, r3, #32
 800a7fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	011b      	lsls	r3, r3, #4
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	4313      	orrs	r3, r2
 800a80a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a2c      	ldr	r2, [pc, #176]	@ (800a8c0 <TIM_OC2_SetConfig+0x110>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d007      	beq.n	800a824 <TIM_OC2_SetConfig+0x74>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a2b      	ldr	r2, [pc, #172]	@ (800a8c4 <TIM_OC2_SetConfig+0x114>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d003      	beq.n	800a824 <TIM_OC2_SetConfig+0x74>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a2a      	ldr	r2, [pc, #168]	@ (800a8c8 <TIM_OC2_SetConfig+0x118>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d10d      	bne.n	800a840 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a82a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	011b      	lsls	r3, r3, #4
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	4313      	orrs	r3, r2
 800a836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a83e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a1f      	ldr	r2, [pc, #124]	@ (800a8c0 <TIM_OC2_SetConfig+0x110>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d013      	beq.n	800a870 <TIM_OC2_SetConfig+0xc0>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a1e      	ldr	r2, [pc, #120]	@ (800a8c4 <TIM_OC2_SetConfig+0x114>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d00f      	beq.n	800a870 <TIM_OC2_SetConfig+0xc0>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a1e      	ldr	r2, [pc, #120]	@ (800a8cc <TIM_OC2_SetConfig+0x11c>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d00b      	beq.n	800a870 <TIM_OC2_SetConfig+0xc0>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a1d      	ldr	r2, [pc, #116]	@ (800a8d0 <TIM_OC2_SetConfig+0x120>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d007      	beq.n	800a870 <TIM_OC2_SetConfig+0xc0>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a1c      	ldr	r2, [pc, #112]	@ (800a8d4 <TIM_OC2_SetConfig+0x124>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d003      	beq.n	800a870 <TIM_OC2_SetConfig+0xc0>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a17      	ldr	r2, [pc, #92]	@ (800a8c8 <TIM_OC2_SetConfig+0x118>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d113      	bne.n	800a898 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a87e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	4313      	orrs	r3, r2
 800a88a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	693a      	ldr	r2, [r7, #16]
 800a894:	4313      	orrs	r3, r2
 800a896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	693a      	ldr	r2, [r7, #16]
 800a89c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	697a      	ldr	r2, [r7, #20]
 800a8b0:	621a      	str	r2, [r3, #32]
}
 800a8b2:	bf00      	nop
 800a8b4:	371c      	adds	r7, #28
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	40012c00 	.word	0x40012c00
 800a8c4:	40013400 	.word	0x40013400
 800a8c8:	40015000 	.word	0x40015000
 800a8cc:	40014000 	.word	0x40014000
 800a8d0:	40014400 	.word	0x40014400
 800a8d4:	40014800 	.word	0x40014800

0800a8d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b087      	sub	sp, #28
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a1b      	ldr	r3, [r3, #32]
 800a8ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	69db      	ldr	r3, [r3, #28]
 800a8fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a90a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f023 0303 	bic.w	r3, r3, #3
 800a912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	021b      	lsls	r3, r3, #8
 800a92c:	697a      	ldr	r2, [r7, #20]
 800a92e:	4313      	orrs	r3, r2
 800a930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a2b      	ldr	r2, [pc, #172]	@ (800a9e4 <TIM_OC3_SetConfig+0x10c>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d007      	beq.n	800a94a <TIM_OC3_SetConfig+0x72>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a2a      	ldr	r2, [pc, #168]	@ (800a9e8 <TIM_OC3_SetConfig+0x110>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d003      	beq.n	800a94a <TIM_OC3_SetConfig+0x72>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a29      	ldr	r2, [pc, #164]	@ (800a9ec <TIM_OC3_SetConfig+0x114>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d10d      	bne.n	800a966 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	021b      	lsls	r3, r3, #8
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a1e      	ldr	r2, [pc, #120]	@ (800a9e4 <TIM_OC3_SetConfig+0x10c>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d013      	beq.n	800a996 <TIM_OC3_SetConfig+0xbe>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a1d      	ldr	r2, [pc, #116]	@ (800a9e8 <TIM_OC3_SetConfig+0x110>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d00f      	beq.n	800a996 <TIM_OC3_SetConfig+0xbe>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a1d      	ldr	r2, [pc, #116]	@ (800a9f0 <TIM_OC3_SetConfig+0x118>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d00b      	beq.n	800a996 <TIM_OC3_SetConfig+0xbe>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a1c      	ldr	r2, [pc, #112]	@ (800a9f4 <TIM_OC3_SetConfig+0x11c>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d007      	beq.n	800a996 <TIM_OC3_SetConfig+0xbe>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4a1b      	ldr	r2, [pc, #108]	@ (800a9f8 <TIM_OC3_SetConfig+0x120>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d003      	beq.n	800a996 <TIM_OC3_SetConfig+0xbe>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4a16      	ldr	r2, [pc, #88]	@ (800a9ec <TIM_OC3_SetConfig+0x114>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d113      	bne.n	800a9be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a99c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a9a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	695b      	ldr	r3, [r3, #20]
 800a9aa:	011b      	lsls	r3, r3, #4
 800a9ac:	693a      	ldr	r2, [r7, #16]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	699b      	ldr	r3, [r3, #24]
 800a9b6:	011b      	lsls	r3, r3, #4
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	693a      	ldr	r2, [r7, #16]
 800a9c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	685a      	ldr	r2, [r3, #4]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	621a      	str	r2, [r3, #32]
}
 800a9d8:	bf00      	nop
 800a9da:	371c      	adds	r7, #28
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr
 800a9e4:	40012c00 	.word	0x40012c00
 800a9e8:	40013400 	.word	0x40013400
 800a9ec:	40015000 	.word	0x40015000
 800a9f0:	40014000 	.word	0x40014000
 800a9f4:	40014400 	.word	0x40014400
 800a9f8:	40014800 	.word	0x40014800

0800a9fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b087      	sub	sp, #28
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a1b      	ldr	r3, [r3, #32]
 800aa10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	69db      	ldr	r3, [r3, #28]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	021b      	lsls	r3, r3, #8
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	031b      	lsls	r3, r3, #12
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a2c      	ldr	r2, [pc, #176]	@ (800ab0c <TIM_OC4_SetConfig+0x110>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d007      	beq.n	800aa70 <TIM_OC4_SetConfig+0x74>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a2b      	ldr	r2, [pc, #172]	@ (800ab10 <TIM_OC4_SetConfig+0x114>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d003      	beq.n	800aa70 <TIM_OC4_SetConfig+0x74>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a2a      	ldr	r2, [pc, #168]	@ (800ab14 <TIM_OC4_SetConfig+0x118>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d10d      	bne.n	800aa8c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aa76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	031b      	lsls	r3, r3, #12
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a1f      	ldr	r2, [pc, #124]	@ (800ab0c <TIM_OC4_SetConfig+0x110>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d013      	beq.n	800aabc <TIM_OC4_SetConfig+0xc0>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a1e      	ldr	r2, [pc, #120]	@ (800ab10 <TIM_OC4_SetConfig+0x114>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d00f      	beq.n	800aabc <TIM_OC4_SetConfig+0xc0>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a1e      	ldr	r2, [pc, #120]	@ (800ab18 <TIM_OC4_SetConfig+0x11c>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d00b      	beq.n	800aabc <TIM_OC4_SetConfig+0xc0>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a1d      	ldr	r2, [pc, #116]	@ (800ab1c <TIM_OC4_SetConfig+0x120>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d007      	beq.n	800aabc <TIM_OC4_SetConfig+0xc0>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a1c      	ldr	r2, [pc, #112]	@ (800ab20 <TIM_OC4_SetConfig+0x124>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d003      	beq.n	800aabc <TIM_OC4_SetConfig+0xc0>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a17      	ldr	r2, [pc, #92]	@ (800ab14 <TIM_OC4_SetConfig+0x118>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d113      	bne.n	800aae4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aac2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aaca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	695b      	ldr	r3, [r3, #20]
 800aad0:	019b      	lsls	r3, r3, #6
 800aad2:	693a      	ldr	r2, [r7, #16]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	019b      	lsls	r3, r3, #6
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	693a      	ldr	r2, [r7, #16]
 800aae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	685a      	ldr	r2, [r3, #4]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	621a      	str	r2, [r3, #32]
}
 800aafe:	bf00      	nop
 800ab00:	371c      	adds	r7, #28
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	40012c00 	.word	0x40012c00
 800ab10:	40013400 	.word	0x40013400
 800ab14:	40015000 	.word	0x40015000
 800ab18:	40014000 	.word	0x40014000
 800ab1c:	40014400 	.word	0x40014400
 800ab20:	40014800 	.word	0x40014800

0800ab24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a1b      	ldr	r3, [r3, #32]
 800ab32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a1b      	ldr	r3, [r3, #32]
 800ab38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ab68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	041b      	lsls	r3, r3, #16
 800ab70:	693a      	ldr	r2, [r7, #16]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a19      	ldr	r2, [pc, #100]	@ (800abe0 <TIM_OC5_SetConfig+0xbc>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d013      	beq.n	800aba6 <TIM_OC5_SetConfig+0x82>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a18      	ldr	r2, [pc, #96]	@ (800abe4 <TIM_OC5_SetConfig+0xc0>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d00f      	beq.n	800aba6 <TIM_OC5_SetConfig+0x82>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a17      	ldr	r2, [pc, #92]	@ (800abe8 <TIM_OC5_SetConfig+0xc4>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d00b      	beq.n	800aba6 <TIM_OC5_SetConfig+0x82>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a16      	ldr	r2, [pc, #88]	@ (800abec <TIM_OC5_SetConfig+0xc8>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d007      	beq.n	800aba6 <TIM_OC5_SetConfig+0x82>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a15      	ldr	r2, [pc, #84]	@ (800abf0 <TIM_OC5_SetConfig+0xcc>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d003      	beq.n	800aba6 <TIM_OC5_SetConfig+0x82>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a14      	ldr	r2, [pc, #80]	@ (800abf4 <TIM_OC5_SetConfig+0xd0>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d109      	bne.n	800abba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800abac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	021b      	lsls	r3, r3, #8
 800abb4:	697a      	ldr	r2, [r7, #20]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	621a      	str	r2, [r3, #32]
}
 800abd4:	bf00      	nop
 800abd6:	371c      	adds	r7, #28
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr
 800abe0:	40012c00 	.word	0x40012c00
 800abe4:	40013400 	.word	0x40013400
 800abe8:	40014000 	.word	0x40014000
 800abec:	40014400 	.word	0x40014400
 800abf0:	40014800 	.word	0x40014800
 800abf4:	40015000 	.word	0x40015000

0800abf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b087      	sub	sp, #28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a1b      	ldr	r3, [r3, #32]
 800ac0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	021b      	lsls	r3, r3, #8
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	051b      	lsls	r3, r3, #20
 800ac46:	693a      	ldr	r2, [r7, #16]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a1a      	ldr	r2, [pc, #104]	@ (800acb8 <TIM_OC6_SetConfig+0xc0>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d013      	beq.n	800ac7c <TIM_OC6_SetConfig+0x84>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a19      	ldr	r2, [pc, #100]	@ (800acbc <TIM_OC6_SetConfig+0xc4>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d00f      	beq.n	800ac7c <TIM_OC6_SetConfig+0x84>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a18      	ldr	r2, [pc, #96]	@ (800acc0 <TIM_OC6_SetConfig+0xc8>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d00b      	beq.n	800ac7c <TIM_OC6_SetConfig+0x84>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a17      	ldr	r2, [pc, #92]	@ (800acc4 <TIM_OC6_SetConfig+0xcc>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d007      	beq.n	800ac7c <TIM_OC6_SetConfig+0x84>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a16      	ldr	r2, [pc, #88]	@ (800acc8 <TIM_OC6_SetConfig+0xd0>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d003      	beq.n	800ac7c <TIM_OC6_SetConfig+0x84>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a15      	ldr	r2, [pc, #84]	@ (800accc <TIM_OC6_SetConfig+0xd4>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d109      	bne.n	800ac90 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	695b      	ldr	r3, [r3, #20]
 800ac88:	029b      	lsls	r3, r3, #10
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	685a      	ldr	r2, [r3, #4]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	621a      	str	r2, [r3, #32]
}
 800acaa:	bf00      	nop
 800acac:	371c      	adds	r7, #28
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	40012c00 	.word	0x40012c00
 800acbc:	40013400 	.word	0x40013400
 800acc0:	40014000 	.word	0x40014000
 800acc4:	40014400 	.word	0x40014400
 800acc8:	40014800 	.word	0x40014800
 800accc:	40015000 	.word	0x40015000

0800acd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b087      	sub	sp, #28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6a1b      	ldr	r3, [r3, #32]
 800ace0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	f023 0201 	bic.w	r2, r3, #1
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800acfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	011b      	lsls	r3, r3, #4
 800ad00:	693a      	ldr	r2, [r7, #16]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	f023 030a 	bic.w	r3, r3, #10
 800ad0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad0e:	697a      	ldr	r2, [r7, #20]
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	621a      	str	r2, [r3, #32]
}
 800ad22:	bf00      	nop
 800ad24:	371c      	adds	r7, #28
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b087      	sub	sp, #28
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	60f8      	str	r0, [r7, #12]
 800ad36:	60b9      	str	r1, [r7, #8]
 800ad38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6a1b      	ldr	r3, [r3, #32]
 800ad3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6a1b      	ldr	r3, [r3, #32]
 800ad44:	f023 0210 	bic.w	r2, r3, #16
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	699b      	ldr	r3, [r3, #24]
 800ad50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	031b      	lsls	r3, r3, #12
 800ad5e:	693a      	ldr	r2, [r7, #16]
 800ad60:	4313      	orrs	r3, r2
 800ad62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ad6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	011b      	lsls	r3, r3, #4
 800ad70:	697a      	ldr	r2, [r7, #20]
 800ad72:	4313      	orrs	r3, r2
 800ad74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	693a      	ldr	r2, [r7, #16]
 800ad7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	697a      	ldr	r2, [r7, #20]
 800ad80:	621a      	str	r2, [r3, #32]
}
 800ad82:	bf00      	nop
 800ad84:	371c      	adds	r7, #28
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b085      	sub	sp, #20
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ada4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ada8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	4313      	orrs	r3, r2
 800adb0:	f043 0307 	orr.w	r3, r3, #7
 800adb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	609a      	str	r2, [r3, #8]
}
 800adbc:	bf00      	nop
 800adbe:	3714      	adds	r7, #20
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800adc8:	b480      	push	{r7}
 800adca:	b087      	sub	sp, #28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
 800add4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ade2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	021a      	lsls	r2, r3, #8
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	431a      	orrs	r2, r3
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	4313      	orrs	r3, r2
 800adf0:	697a      	ldr	r2, [r7, #20]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	609a      	str	r2, [r3, #8]
}
 800adfc:	bf00      	nop
 800adfe:	371c      	adds	r7, #28
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	f003 031f 	and.w	r3, r3, #31
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6a1a      	ldr	r2, [r3, #32]
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	43db      	mvns	r3, r3
 800ae2a:	401a      	ands	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6a1a      	ldr	r2, [r3, #32]
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f003 031f 	and.w	r3, r3, #31
 800ae3a:	6879      	ldr	r1, [r7, #4]
 800ae3c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae40:	431a      	orrs	r2, r3
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	621a      	str	r2, [r3, #32]
}
 800ae46:	bf00      	nop
 800ae48:	371c      	adds	r7, #28
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
	...

0800ae54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d101      	bne.n	800ae6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae68:	2302      	movs	r3, #2
 800ae6a:	e074      	b.n	800af56 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2202      	movs	r2, #2
 800ae78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a34      	ldr	r2, [pc, #208]	@ (800af64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d009      	beq.n	800aeaa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a33      	ldr	r2, [pc, #204]	@ (800af68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d004      	beq.n	800aeaa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a31      	ldr	r2, [pc, #196]	@ (800af6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d108      	bne.n	800aebc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800aeb0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800aec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	4313      	orrs	r3, r2
 800aed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a21      	ldr	r2, [pc, #132]	@ (800af64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d022      	beq.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aeec:	d01d      	beq.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a1f      	ldr	r2, [pc, #124]	@ (800af70 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d018      	beq.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a1d      	ldr	r2, [pc, #116]	@ (800af74 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d013      	beq.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a1c      	ldr	r2, [pc, #112]	@ (800af78 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d00e      	beq.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a15      	ldr	r2, [pc, #84]	@ (800af68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d009      	beq.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a18      	ldr	r2, [pc, #96]	@ (800af7c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d004      	beq.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a11      	ldr	r2, [pc, #68]	@ (800af6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d10c      	bne.n	800af44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	4313      	orrs	r3, r2
 800af3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68ba      	ldr	r2, [r7, #8]
 800af42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	40012c00 	.word	0x40012c00
 800af68:	40013400 	.word	0x40013400
 800af6c:	40015000 	.word	0x40015000
 800af70:	40000400 	.word	0x40000400
 800af74:	40000800 	.word	0x40000800
 800af78:	40000c00 	.word	0x40000c00
 800af7c:	40014000 	.word	0x40014000

0800af80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af94:	2b01      	cmp	r3, #1
 800af96:	d101      	bne.n	800af9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af98:	2302      	movs	r3, #2
 800af9a:	e078      	b.n	800b08e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	4313      	orrs	r3, r2
 800afb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	4313      	orrs	r3, r2
 800afcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4313      	orrs	r3, r2
 800afda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	691b      	ldr	r3, [r3, #16]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	695b      	ldr	r3, [r3, #20]
 800aff4:	4313      	orrs	r3, r2
 800aff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b002:	4313      	orrs	r3, r2
 800b004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	699b      	ldr	r3, [r3, #24]
 800b010:	041b      	lsls	r3, r3, #16
 800b012:	4313      	orrs	r3, r2
 800b014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	69db      	ldr	r3, [r3, #28]
 800b020:	4313      	orrs	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a1c      	ldr	r2, [pc, #112]	@ (800b09c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d009      	beq.n	800b042 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a1b      	ldr	r2, [pc, #108]	@ (800b0a0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d004      	beq.n	800b042 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a19      	ldr	r2, [pc, #100]	@ (800b0a4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d11c      	bne.n	800b07c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b04c:	051b      	lsls	r3, r3, #20
 800b04e:	4313      	orrs	r3, r2
 800b050:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	6a1b      	ldr	r3, [r3, #32]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b06a:	4313      	orrs	r3, r2
 800b06c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b078:	4313      	orrs	r3, r2
 800b07a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3714      	adds	r7, #20
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	40012c00 	.word	0x40012c00
 800b0a0:	40013400 	.word	0x40013400
 800b0a4:	40015000 	.word	0x40015000

0800b0a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0b0:	bf00      	nop
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b0ec:	bf00      	nop
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b114:	bf00      	nop
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b128:	bf00      	nop
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e042      	b.n	800b1cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d106      	bne.n	800b15e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7f8 feb9 	bl	8003ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2224      	movs	r2, #36	@ 0x24
 800b162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f022 0201 	bic.w	r2, r2, #1
 800b174:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d002      	beq.n	800b184 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 fb24 	bl	800b7cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f825 	bl	800b1d4 <UART_SetConfig>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d101      	bne.n	800b194 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b190:	2301      	movs	r3, #1
 800b192:	e01b      	b.n	800b1cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	685a      	ldr	r2, [r3, #4]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b1a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	689a      	ldr	r2, [r3, #8]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b1b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f042 0201 	orr.w	r2, r2, #1
 800b1c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fba3 	bl	800b910 <UART_CheckIdleState>
 800b1ca:	4603      	mov	r3, r0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1d8:	b08c      	sub	sp, #48	@ 0x30
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	689a      	ldr	r2, [r3, #8]
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	431a      	orrs	r2, r3
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	431a      	orrs	r2, r3
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	69db      	ldr	r3, [r3, #28]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	4baa      	ldr	r3, [pc, #680]	@ (800b4ac <UART_SetConfig+0x2d8>)
 800b204:	4013      	ands	r3, r2
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	6812      	ldr	r2, [r2, #0]
 800b20a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b20c:	430b      	orrs	r3, r1
 800b20e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	68da      	ldr	r2, [r3, #12]
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	430a      	orrs	r2, r1
 800b224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	699b      	ldr	r3, [r3, #24]
 800b22a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a9f      	ldr	r2, [pc, #636]	@ (800b4b0 <UART_SetConfig+0x2dc>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d004      	beq.n	800b240 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b23c:	4313      	orrs	r3, r2
 800b23e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b24a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	6812      	ldr	r2, [r2, #0]
 800b252:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b254:	430b      	orrs	r3, r1
 800b256:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b25e:	f023 010f 	bic.w	r1, r3, #15
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	430a      	orrs	r2, r1
 800b26c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a90      	ldr	r2, [pc, #576]	@ (800b4b4 <UART_SetConfig+0x2e0>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d125      	bne.n	800b2c4 <UART_SetConfig+0xf0>
 800b278:	4b8f      	ldr	r3, [pc, #572]	@ (800b4b8 <UART_SetConfig+0x2e4>)
 800b27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b27e:	f003 0303 	and.w	r3, r3, #3
 800b282:	2b03      	cmp	r3, #3
 800b284:	d81a      	bhi.n	800b2bc <UART_SetConfig+0xe8>
 800b286:	a201      	add	r2, pc, #4	@ (adr r2, 800b28c <UART_SetConfig+0xb8>)
 800b288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28c:	0800b29d 	.word	0x0800b29d
 800b290:	0800b2ad 	.word	0x0800b2ad
 800b294:	0800b2a5 	.word	0x0800b2a5
 800b298:	0800b2b5 	.word	0x0800b2b5
 800b29c:	2301      	movs	r3, #1
 800b29e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2a2:	e116      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2aa:	e112      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b2ac:	2304      	movs	r3, #4
 800b2ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2b2:	e10e      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b2b4:	2308      	movs	r3, #8
 800b2b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2ba:	e10a      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b2bc:	2310      	movs	r3, #16
 800b2be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2c2:	e106      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a7c      	ldr	r2, [pc, #496]	@ (800b4bc <UART_SetConfig+0x2e8>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d138      	bne.n	800b340 <UART_SetConfig+0x16c>
 800b2ce:	4b7a      	ldr	r3, [pc, #488]	@ (800b4b8 <UART_SetConfig+0x2e4>)
 800b2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2d4:	f003 030c 	and.w	r3, r3, #12
 800b2d8:	2b0c      	cmp	r3, #12
 800b2da:	d82d      	bhi.n	800b338 <UART_SetConfig+0x164>
 800b2dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b2e4 <UART_SetConfig+0x110>)
 800b2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e2:	bf00      	nop
 800b2e4:	0800b319 	.word	0x0800b319
 800b2e8:	0800b339 	.word	0x0800b339
 800b2ec:	0800b339 	.word	0x0800b339
 800b2f0:	0800b339 	.word	0x0800b339
 800b2f4:	0800b329 	.word	0x0800b329
 800b2f8:	0800b339 	.word	0x0800b339
 800b2fc:	0800b339 	.word	0x0800b339
 800b300:	0800b339 	.word	0x0800b339
 800b304:	0800b321 	.word	0x0800b321
 800b308:	0800b339 	.word	0x0800b339
 800b30c:	0800b339 	.word	0x0800b339
 800b310:	0800b339 	.word	0x0800b339
 800b314:	0800b331 	.word	0x0800b331
 800b318:	2300      	movs	r3, #0
 800b31a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b31e:	e0d8      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b320:	2302      	movs	r3, #2
 800b322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b326:	e0d4      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b328:	2304      	movs	r3, #4
 800b32a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b32e:	e0d0      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b330:	2308      	movs	r3, #8
 800b332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b336:	e0cc      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b338:	2310      	movs	r3, #16
 800b33a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b33e:	e0c8      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a5e      	ldr	r2, [pc, #376]	@ (800b4c0 <UART_SetConfig+0x2ec>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d125      	bne.n	800b396 <UART_SetConfig+0x1c2>
 800b34a:	4b5b      	ldr	r3, [pc, #364]	@ (800b4b8 <UART_SetConfig+0x2e4>)
 800b34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b350:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b354:	2b30      	cmp	r3, #48	@ 0x30
 800b356:	d016      	beq.n	800b386 <UART_SetConfig+0x1b2>
 800b358:	2b30      	cmp	r3, #48	@ 0x30
 800b35a:	d818      	bhi.n	800b38e <UART_SetConfig+0x1ba>
 800b35c:	2b20      	cmp	r3, #32
 800b35e:	d00a      	beq.n	800b376 <UART_SetConfig+0x1a2>
 800b360:	2b20      	cmp	r3, #32
 800b362:	d814      	bhi.n	800b38e <UART_SetConfig+0x1ba>
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <UART_SetConfig+0x19a>
 800b368:	2b10      	cmp	r3, #16
 800b36a:	d008      	beq.n	800b37e <UART_SetConfig+0x1aa>
 800b36c:	e00f      	b.n	800b38e <UART_SetConfig+0x1ba>
 800b36e:	2300      	movs	r3, #0
 800b370:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b374:	e0ad      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b376:	2302      	movs	r3, #2
 800b378:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b37c:	e0a9      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b37e:	2304      	movs	r3, #4
 800b380:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b384:	e0a5      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b386:	2308      	movs	r3, #8
 800b388:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b38c:	e0a1      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b38e:	2310      	movs	r3, #16
 800b390:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b394:	e09d      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a4a      	ldr	r2, [pc, #296]	@ (800b4c4 <UART_SetConfig+0x2f0>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d125      	bne.n	800b3ec <UART_SetConfig+0x218>
 800b3a0:	4b45      	ldr	r3, [pc, #276]	@ (800b4b8 <UART_SetConfig+0x2e4>)
 800b3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b3aa:	2bc0      	cmp	r3, #192	@ 0xc0
 800b3ac:	d016      	beq.n	800b3dc <UART_SetConfig+0x208>
 800b3ae:	2bc0      	cmp	r3, #192	@ 0xc0
 800b3b0:	d818      	bhi.n	800b3e4 <UART_SetConfig+0x210>
 800b3b2:	2b80      	cmp	r3, #128	@ 0x80
 800b3b4:	d00a      	beq.n	800b3cc <UART_SetConfig+0x1f8>
 800b3b6:	2b80      	cmp	r3, #128	@ 0x80
 800b3b8:	d814      	bhi.n	800b3e4 <UART_SetConfig+0x210>
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d002      	beq.n	800b3c4 <UART_SetConfig+0x1f0>
 800b3be:	2b40      	cmp	r3, #64	@ 0x40
 800b3c0:	d008      	beq.n	800b3d4 <UART_SetConfig+0x200>
 800b3c2:	e00f      	b.n	800b3e4 <UART_SetConfig+0x210>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3ca:	e082      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3d2:	e07e      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b3d4:	2304      	movs	r3, #4
 800b3d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3da:	e07a      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b3dc:	2308      	movs	r3, #8
 800b3de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3e2:	e076      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b3e4:	2310      	movs	r3, #16
 800b3e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3ea:	e072      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a35      	ldr	r2, [pc, #212]	@ (800b4c8 <UART_SetConfig+0x2f4>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d12a      	bne.n	800b44c <UART_SetConfig+0x278>
 800b3f6:	4b30      	ldr	r3, [pc, #192]	@ (800b4b8 <UART_SetConfig+0x2e4>)
 800b3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b400:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b404:	d01a      	beq.n	800b43c <UART_SetConfig+0x268>
 800b406:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b40a:	d81b      	bhi.n	800b444 <UART_SetConfig+0x270>
 800b40c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b410:	d00c      	beq.n	800b42c <UART_SetConfig+0x258>
 800b412:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b416:	d815      	bhi.n	800b444 <UART_SetConfig+0x270>
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d003      	beq.n	800b424 <UART_SetConfig+0x250>
 800b41c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b420:	d008      	beq.n	800b434 <UART_SetConfig+0x260>
 800b422:	e00f      	b.n	800b444 <UART_SetConfig+0x270>
 800b424:	2300      	movs	r3, #0
 800b426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b42a:	e052      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b42c:	2302      	movs	r3, #2
 800b42e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b432:	e04e      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b434:	2304      	movs	r3, #4
 800b436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b43a:	e04a      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b43c:	2308      	movs	r3, #8
 800b43e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b442:	e046      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b444:	2310      	movs	r3, #16
 800b446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b44a:	e042      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a17      	ldr	r2, [pc, #92]	@ (800b4b0 <UART_SetConfig+0x2dc>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d13a      	bne.n	800b4cc <UART_SetConfig+0x2f8>
 800b456:	4b18      	ldr	r3, [pc, #96]	@ (800b4b8 <UART_SetConfig+0x2e4>)
 800b458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b45c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b460:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b464:	d01a      	beq.n	800b49c <UART_SetConfig+0x2c8>
 800b466:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b46a:	d81b      	bhi.n	800b4a4 <UART_SetConfig+0x2d0>
 800b46c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b470:	d00c      	beq.n	800b48c <UART_SetConfig+0x2b8>
 800b472:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b476:	d815      	bhi.n	800b4a4 <UART_SetConfig+0x2d0>
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d003      	beq.n	800b484 <UART_SetConfig+0x2b0>
 800b47c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b480:	d008      	beq.n	800b494 <UART_SetConfig+0x2c0>
 800b482:	e00f      	b.n	800b4a4 <UART_SetConfig+0x2d0>
 800b484:	2300      	movs	r3, #0
 800b486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b48a:	e022      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b48c:	2302      	movs	r3, #2
 800b48e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b492:	e01e      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b494:	2304      	movs	r3, #4
 800b496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b49a:	e01a      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b49c:	2308      	movs	r3, #8
 800b49e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4a2:	e016      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b4a4:	2310      	movs	r3, #16
 800b4a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4aa:	e012      	b.n	800b4d2 <UART_SetConfig+0x2fe>
 800b4ac:	cfff69f3 	.word	0xcfff69f3
 800b4b0:	40008000 	.word	0x40008000
 800b4b4:	40013800 	.word	0x40013800
 800b4b8:	40021000 	.word	0x40021000
 800b4bc:	40004400 	.word	0x40004400
 800b4c0:	40004800 	.word	0x40004800
 800b4c4:	40004c00 	.word	0x40004c00
 800b4c8:	40005000 	.word	0x40005000
 800b4cc:	2310      	movs	r3, #16
 800b4ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4aae      	ldr	r2, [pc, #696]	@ (800b790 <UART_SetConfig+0x5bc>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	f040 8097 	bne.w	800b60c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b4de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b4e2:	2b08      	cmp	r3, #8
 800b4e4:	d823      	bhi.n	800b52e <UART_SetConfig+0x35a>
 800b4e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4ec <UART_SetConfig+0x318>)
 800b4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ec:	0800b511 	.word	0x0800b511
 800b4f0:	0800b52f 	.word	0x0800b52f
 800b4f4:	0800b519 	.word	0x0800b519
 800b4f8:	0800b52f 	.word	0x0800b52f
 800b4fc:	0800b51f 	.word	0x0800b51f
 800b500:	0800b52f 	.word	0x0800b52f
 800b504:	0800b52f 	.word	0x0800b52f
 800b508:	0800b52f 	.word	0x0800b52f
 800b50c:	0800b527 	.word	0x0800b527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b510:	f7fd fec6 	bl	80092a0 <HAL_RCC_GetPCLK1Freq>
 800b514:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b516:	e010      	b.n	800b53a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b518:	4b9e      	ldr	r3, [pc, #632]	@ (800b794 <UART_SetConfig+0x5c0>)
 800b51a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b51c:	e00d      	b.n	800b53a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b51e:	f7fd fe51 	bl	80091c4 <HAL_RCC_GetSysClockFreq>
 800b522:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b524:	e009      	b.n	800b53a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b52a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b52c:	e005      	b.n	800b53a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b52e:	2300      	movs	r3, #0
 800b530:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b538:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f000 8130 	beq.w	800b7a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b546:	4a94      	ldr	r2, [pc, #592]	@ (800b798 <UART_SetConfig+0x5c4>)
 800b548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b54c:	461a      	mov	r2, r3
 800b54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b550:	fbb3 f3f2 	udiv	r3, r3, r2
 800b554:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	685a      	ldr	r2, [r3, #4]
 800b55a:	4613      	mov	r3, r2
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	4413      	add	r3, r2
 800b560:	69ba      	ldr	r2, [r7, #24]
 800b562:	429a      	cmp	r2, r3
 800b564:	d305      	bcc.n	800b572 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b56c:	69ba      	ldr	r2, [r7, #24]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d903      	bls.n	800b57a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b578:	e113      	b.n	800b7a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57c:	2200      	movs	r2, #0
 800b57e:	60bb      	str	r3, [r7, #8]
 800b580:	60fa      	str	r2, [r7, #12]
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b586:	4a84      	ldr	r2, [pc, #528]	@ (800b798 <UART_SetConfig+0x5c4>)
 800b588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	2200      	movs	r2, #0
 800b590:	603b      	str	r3, [r7, #0]
 800b592:	607a      	str	r2, [r7, #4]
 800b594:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b598:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b59c:	f7f5 fb9c 	bl	8000cd8 <__aeabi_uldivmod>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	f04f 0200 	mov.w	r2, #0
 800b5ac:	f04f 0300 	mov.w	r3, #0
 800b5b0:	020b      	lsls	r3, r1, #8
 800b5b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b5b6:	0202      	lsls	r2, r0, #8
 800b5b8:	6979      	ldr	r1, [r7, #20]
 800b5ba:	6849      	ldr	r1, [r1, #4]
 800b5bc:	0849      	lsrs	r1, r1, #1
 800b5be:	2000      	movs	r0, #0
 800b5c0:	460c      	mov	r4, r1
 800b5c2:	4605      	mov	r5, r0
 800b5c4:	eb12 0804 	adds.w	r8, r2, r4
 800b5c8:	eb43 0905 	adc.w	r9, r3, r5
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	469a      	mov	sl, r3
 800b5d4:	4693      	mov	fp, r2
 800b5d6:	4652      	mov	r2, sl
 800b5d8:	465b      	mov	r3, fp
 800b5da:	4640      	mov	r0, r8
 800b5dc:	4649      	mov	r1, r9
 800b5de:	f7f5 fb7b 	bl	8000cd8 <__aeabi_uldivmod>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5f0:	d308      	bcc.n	800b604 <UART_SetConfig+0x430>
 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5f8:	d204      	bcs.n	800b604 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	6a3a      	ldr	r2, [r7, #32]
 800b600:	60da      	str	r2, [r3, #12]
 800b602:	e0ce      	b.n	800b7a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b60a:	e0ca      	b.n	800b7a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	69db      	ldr	r3, [r3, #28]
 800b610:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b614:	d166      	bne.n	800b6e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b616:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b61a:	2b08      	cmp	r3, #8
 800b61c:	d827      	bhi.n	800b66e <UART_SetConfig+0x49a>
 800b61e:	a201      	add	r2, pc, #4	@ (adr r2, 800b624 <UART_SetConfig+0x450>)
 800b620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b624:	0800b649 	.word	0x0800b649
 800b628:	0800b651 	.word	0x0800b651
 800b62c:	0800b659 	.word	0x0800b659
 800b630:	0800b66f 	.word	0x0800b66f
 800b634:	0800b65f 	.word	0x0800b65f
 800b638:	0800b66f 	.word	0x0800b66f
 800b63c:	0800b66f 	.word	0x0800b66f
 800b640:	0800b66f 	.word	0x0800b66f
 800b644:	0800b667 	.word	0x0800b667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b648:	f7fd fe2a 	bl	80092a0 <HAL_RCC_GetPCLK1Freq>
 800b64c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b64e:	e014      	b.n	800b67a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b650:	f7fd fe3c 	bl	80092cc <HAL_RCC_GetPCLK2Freq>
 800b654:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b656:	e010      	b.n	800b67a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b658:	4b4e      	ldr	r3, [pc, #312]	@ (800b794 <UART_SetConfig+0x5c0>)
 800b65a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b65c:	e00d      	b.n	800b67a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b65e:	f7fd fdb1 	bl	80091c4 <HAL_RCC_GetSysClockFreq>
 800b662:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b664:	e009      	b.n	800b67a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b66a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b66c:	e005      	b.n	800b67a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b66e:	2300      	movs	r3, #0
 800b670:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b672:	2301      	movs	r3, #1
 800b674:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b678:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f000 8090 	beq.w	800b7a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b686:	4a44      	ldr	r2, [pc, #272]	@ (800b798 <UART_SetConfig+0x5c4>)
 800b688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b68c:	461a      	mov	r2, r3
 800b68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b690:	fbb3 f3f2 	udiv	r3, r3, r2
 800b694:	005a      	lsls	r2, r3, #1
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	085b      	lsrs	r3, r3, #1
 800b69c:	441a      	add	r2, r3
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6a8:	6a3b      	ldr	r3, [r7, #32]
 800b6aa:	2b0f      	cmp	r3, #15
 800b6ac:	d916      	bls.n	800b6dc <UART_SetConfig+0x508>
 800b6ae:	6a3b      	ldr	r3, [r7, #32]
 800b6b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6b4:	d212      	bcs.n	800b6dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b6b6:	6a3b      	ldr	r3, [r7, #32]
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	f023 030f 	bic.w	r3, r3, #15
 800b6be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b6c0:	6a3b      	ldr	r3, [r7, #32]
 800b6c2:	085b      	lsrs	r3, r3, #1
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	f003 0307 	and.w	r3, r3, #7
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	8bfb      	ldrh	r3, [r7, #30]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	8bfa      	ldrh	r2, [r7, #30]
 800b6d8:	60da      	str	r2, [r3, #12]
 800b6da:	e062      	b.n	800b7a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b6e2:	e05e      	b.n	800b7a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b6e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b6e8:	2b08      	cmp	r3, #8
 800b6ea:	d828      	bhi.n	800b73e <UART_SetConfig+0x56a>
 800b6ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b6f4 <UART_SetConfig+0x520>)
 800b6ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f2:	bf00      	nop
 800b6f4:	0800b719 	.word	0x0800b719
 800b6f8:	0800b721 	.word	0x0800b721
 800b6fc:	0800b729 	.word	0x0800b729
 800b700:	0800b73f 	.word	0x0800b73f
 800b704:	0800b72f 	.word	0x0800b72f
 800b708:	0800b73f 	.word	0x0800b73f
 800b70c:	0800b73f 	.word	0x0800b73f
 800b710:	0800b73f 	.word	0x0800b73f
 800b714:	0800b737 	.word	0x0800b737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b718:	f7fd fdc2 	bl	80092a0 <HAL_RCC_GetPCLK1Freq>
 800b71c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b71e:	e014      	b.n	800b74a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b720:	f7fd fdd4 	bl	80092cc <HAL_RCC_GetPCLK2Freq>
 800b724:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b726:	e010      	b.n	800b74a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b728:	4b1a      	ldr	r3, [pc, #104]	@ (800b794 <UART_SetConfig+0x5c0>)
 800b72a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b72c:	e00d      	b.n	800b74a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b72e:	f7fd fd49 	bl	80091c4 <HAL_RCC_GetSysClockFreq>
 800b732:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b734:	e009      	b.n	800b74a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b73a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b73c:	e005      	b.n	800b74a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b73e:	2300      	movs	r3, #0
 800b740:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b742:	2301      	movs	r3, #1
 800b744:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b748:	bf00      	nop
    }

    if (pclk != 0U)
 800b74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d028      	beq.n	800b7a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b754:	4a10      	ldr	r2, [pc, #64]	@ (800b798 <UART_SetConfig+0x5c4>)
 800b756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b75a:	461a      	mov	r2, r3
 800b75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b75e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	085b      	lsrs	r3, r3, #1
 800b768:	441a      	add	r2, r3
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b772:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b774:	6a3b      	ldr	r3, [r7, #32]
 800b776:	2b0f      	cmp	r3, #15
 800b778:	d910      	bls.n	800b79c <UART_SetConfig+0x5c8>
 800b77a:	6a3b      	ldr	r3, [r7, #32]
 800b77c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b780:	d20c      	bcs.n	800b79c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b782:	6a3b      	ldr	r3, [r7, #32]
 800b784:	b29a      	uxth	r2, r3
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	60da      	str	r2, [r3, #12]
 800b78c:	e009      	b.n	800b7a2 <UART_SetConfig+0x5ce>
 800b78e:	bf00      	nop
 800b790:	40008000 	.word	0x40008000
 800b794:	00f42400 	.word	0x00f42400
 800b798:	08016ed0 	.word	0x08016ed0
      }
      else
      {
        ret = HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b7be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3730      	adds	r7, #48	@ 0x30
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b7cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7d8:	f003 0308 	and.w	r3, r3, #8
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00a      	beq.n	800b7f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	430a      	orrs	r2, r1
 800b7f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7fa:	f003 0301 	and.w	r3, r3, #1
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00a      	beq.n	800b818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	430a      	orrs	r2, r1
 800b816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b81c:	f003 0302 	and.w	r3, r3, #2
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00a      	beq.n	800b83a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	430a      	orrs	r2, r1
 800b838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b83e:	f003 0304 	and.w	r3, r3, #4
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00a      	beq.n	800b85c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	430a      	orrs	r2, r1
 800b85a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b860:	f003 0310 	and.w	r3, r3, #16
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00a      	beq.n	800b87e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	430a      	orrs	r2, r1
 800b87c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b882:	f003 0320 	and.w	r3, r3, #32
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00a      	beq.n	800b8a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	430a      	orrs	r2, r1
 800b89e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d01a      	beq.n	800b8e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	430a      	orrs	r2, r1
 800b8c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b8ca:	d10a      	bne.n	800b8e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	430a      	orrs	r2, r1
 800b8e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00a      	beq.n	800b904 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	430a      	orrs	r2, r1
 800b902:	605a      	str	r2, [r3, #4]
  }
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b098      	sub	sp, #96	@ 0x60
 800b914:	af02      	add	r7, sp, #8
 800b916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b920:	f7f8 fd1e 	bl	8004360 <HAL_GetTick>
 800b924:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f003 0308 	and.w	r3, r3, #8
 800b930:	2b08      	cmp	r3, #8
 800b932:	d12f      	bne.n	800b994 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b934:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b93c:	2200      	movs	r2, #0
 800b93e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 f88e 	bl	800ba64 <UART_WaitOnFlagUntilTimeout>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d022      	beq.n	800b994 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b956:	e853 3f00 	ldrex	r3, [r3]
 800b95a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b95c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b95e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b962:	653b      	str	r3, [r7, #80]	@ 0x50
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	461a      	mov	r2, r3
 800b96a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b96c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b96e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b970:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b972:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b974:	e841 2300 	strex	r3, r2, [r1]
 800b978:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b97a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1e6      	bne.n	800b94e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2220      	movs	r2, #32
 800b984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b990:	2303      	movs	r3, #3
 800b992:	e063      	b.n	800ba5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 0304 	and.w	r3, r3, #4
 800b99e:	2b04      	cmp	r3, #4
 800b9a0:	d149      	bne.n	800ba36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f857 	bl	800ba64 <UART_WaitOnFlagUntilTimeout>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d03c      	beq.n	800ba36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c4:	e853 3f00 	ldrex	r3, [r3]
 800b9c8:	623b      	str	r3, [r7, #32]
   return(result);
 800b9ca:	6a3b      	ldr	r3, [r7, #32]
 800b9cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9da:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9e2:	e841 2300 	strex	r3, r2, [r1]
 800b9e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1e6      	bne.n	800b9bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	3308      	adds	r3, #8
 800b9f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	e853 3f00 	ldrex	r3, [r3]
 800b9fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f023 0301 	bic.w	r3, r3, #1
 800ba04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	3308      	adds	r3, #8
 800ba0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba0e:	61fa      	str	r2, [r7, #28]
 800ba10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba12:	69b9      	ldr	r1, [r7, #24]
 800ba14:	69fa      	ldr	r2, [r7, #28]
 800ba16:	e841 2300 	strex	r3, r2, [r1]
 800ba1a:	617b      	str	r3, [r7, #20]
   return(result);
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1e5      	bne.n	800b9ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2220      	movs	r2, #32
 800ba26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba32:	2303      	movs	r3, #3
 800ba34:	e012      	b.n	800ba5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2220      	movs	r2, #32
 800ba3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2220      	movs	r2, #32
 800ba42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3758      	adds	r7, #88	@ 0x58
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	603b      	str	r3, [r7, #0]
 800ba70:	4613      	mov	r3, r2
 800ba72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba74:	e04f      	b.n	800bb16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba7c:	d04b      	beq.n	800bb16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba7e:	f7f8 fc6f 	bl	8004360 <HAL_GetTick>
 800ba82:	4602      	mov	r2, r0
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	69ba      	ldr	r2, [r7, #24]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d302      	bcc.n	800ba94 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d101      	bne.n	800ba98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ba94:	2303      	movs	r3, #3
 800ba96:	e04e      	b.n	800bb36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f003 0304 	and.w	r3, r3, #4
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d037      	beq.n	800bb16 <UART_WaitOnFlagUntilTimeout+0xb2>
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	2b80      	cmp	r3, #128	@ 0x80
 800baaa:	d034      	beq.n	800bb16 <UART_WaitOnFlagUntilTimeout+0xb2>
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	2b40      	cmp	r3, #64	@ 0x40
 800bab0:	d031      	beq.n	800bb16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	69db      	ldr	r3, [r3, #28]
 800bab8:	f003 0308 	and.w	r3, r3, #8
 800babc:	2b08      	cmp	r3, #8
 800babe:	d110      	bne.n	800bae2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2208      	movs	r2, #8
 800bac6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f000 f838 	bl	800bb3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2208      	movs	r2, #8
 800bad2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	e029      	b.n	800bb36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	69db      	ldr	r3, [r3, #28]
 800bae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800baec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800baf0:	d111      	bne.n	800bb16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bafa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f000 f81e 	bl	800bb3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2220      	movs	r2, #32
 800bb06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bb12:	2303      	movs	r3, #3
 800bb14:	e00f      	b.n	800bb36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	69da      	ldr	r2, [r3, #28]
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	4013      	ands	r3, r2
 800bb20:	68ba      	ldr	r2, [r7, #8]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	bf0c      	ite	eq
 800bb26:	2301      	moveq	r3, #1
 800bb28:	2300      	movne	r3, #0
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	79fb      	ldrb	r3, [r7, #7]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d0a0      	beq.n	800ba76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb3e:	b480      	push	{r7}
 800bb40:	b095      	sub	sp, #84	@ 0x54
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb4e:	e853 3f00 	ldrex	r3, [r3]
 800bb52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bb5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	461a      	mov	r2, r3
 800bb62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb64:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bb6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bb6c:	e841 2300 	strex	r3, r2, [r1]
 800bb70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1e6      	bne.n	800bb46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	3308      	adds	r3, #8
 800bb7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	e853 3f00 	ldrex	r3, [r3]
 800bb86:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb8e:	f023 0301 	bic.w	r3, r3, #1
 800bb92:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	3308      	adds	r3, #8
 800bb9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bba4:	e841 2300 	strex	r3, r2, [r1]
 800bba8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d1e3      	bne.n	800bb78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d118      	bne.n	800bbea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	e853 3f00 	ldrex	r3, [r3]
 800bbc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	f023 0310 	bic.w	r3, r3, #16
 800bbcc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbd6:	61bb      	str	r3, [r7, #24]
 800bbd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbda:	6979      	ldr	r1, [r7, #20]
 800bbdc:	69ba      	ldr	r2, [r7, #24]
 800bbde:	e841 2300 	strex	r3, r2, [r1]
 800bbe2:	613b      	str	r3, [r7, #16]
   return(result);
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1e6      	bne.n	800bbb8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2220      	movs	r2, #32
 800bbee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bbfe:	bf00      	nop
 800bc00:	3754      	adds	r7, #84	@ 0x54
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	b085      	sub	sp, #20
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d101      	bne.n	800bc20 <HAL_UARTEx_DisableFifoMode+0x16>
 800bc1c:	2302      	movs	r3, #2
 800bc1e:	e027      	b.n	800bc70 <HAL_UARTEx_DisableFifoMode+0x66>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2201      	movs	r2, #1
 800bc24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2224      	movs	r2, #36	@ 0x24
 800bc2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f022 0201 	bic.w	r2, r2, #1
 800bc46:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bc4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2220      	movs	r2, #32
 800bc62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d101      	bne.n	800bc94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc90:	2302      	movs	r3, #2
 800bc92:	e02d      	b.n	800bcf0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2224      	movs	r2, #36	@ 0x24
 800bca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f022 0201 	bic.w	r2, r2, #1
 800bcba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	683a      	ldr	r2, [r7, #0]
 800bccc:	430a      	orrs	r2, r1
 800bcce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 f84f 	bl	800bd74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2220      	movs	r2, #32
 800bce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3710      	adds	r7, #16
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d101      	bne.n	800bd10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd0c:	2302      	movs	r3, #2
 800bd0e:	e02d      	b.n	800bd6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2224      	movs	r2, #36	@ 0x24
 800bd1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f022 0201 	bic.w	r2, r2, #1
 800bd36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	430a      	orrs	r2, r1
 800bd4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 f811 	bl	800bd74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2220      	movs	r2, #32
 800bd5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d108      	bne.n	800bd96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd94:	e031      	b.n	800bdfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd96:	2308      	movs	r3, #8
 800bd98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd9a:	2308      	movs	r3, #8
 800bd9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	0e5b      	lsrs	r3, r3, #25
 800bda6:	b2db      	uxtb	r3, r3
 800bda8:	f003 0307 	and.w	r3, r3, #7
 800bdac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	0f5b      	lsrs	r3, r3, #29
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	f003 0307 	and.w	r3, r3, #7
 800bdbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdbe:	7bbb      	ldrb	r3, [r7, #14]
 800bdc0:	7b3a      	ldrb	r2, [r7, #12]
 800bdc2:	4911      	ldr	r1, [pc, #68]	@ (800be08 <UARTEx_SetNbDataToProcess+0x94>)
 800bdc4:	5c8a      	ldrb	r2, [r1, r2]
 800bdc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bdca:	7b3a      	ldrb	r2, [r7, #12]
 800bdcc:	490f      	ldr	r1, [pc, #60]	@ (800be0c <UARTEx_SetNbDataToProcess+0x98>)
 800bdce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bddc:	7bfb      	ldrb	r3, [r7, #15]
 800bdde:	7b7a      	ldrb	r2, [r7, #13]
 800bde0:	4909      	ldr	r1, [pc, #36]	@ (800be08 <UARTEx_SetNbDataToProcess+0x94>)
 800bde2:	5c8a      	ldrb	r2, [r1, r2]
 800bde4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bde8:	7b7a      	ldrb	r2, [r7, #13]
 800bdea:	4908      	ldr	r1, [pc, #32]	@ (800be0c <UARTEx_SetNbDataToProcess+0x98>)
 800bdec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bdee:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdf2:	b29a      	uxth	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bdfa:	bf00      	nop
 800bdfc:	3714      	adds	r7, #20
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	08016ee8 	.word	0x08016ee8
 800be0c:	08016ef0 	.word	0x08016ef0

0800be10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800be20:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800be24:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	b29a      	uxth	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	3714      	adds	r7, #20
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr

0800be3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800be3e:	b480      	push	{r7}
 800be40:	b085      	sub	sp, #20
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800be46:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800be4a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800be52:	b29a      	uxth	r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	b29b      	uxth	r3, r3
 800be58:	43db      	mvns	r3, r3
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	4013      	ands	r3, r2
 800be5e:	b29a      	uxth	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3714      	adds	r7, #20
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	1d3b      	adds	r3, r7, #4
 800be7e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2201      	movs	r2, #1
 800be86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bea2:	2300      	movs	r3, #0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3714      	adds	r7, #20
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b09d      	sub	sp, #116	@ 0x74
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800beba:	2300      	movs	r3, #0
 800bebc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4413      	add	r3, r2
 800beca:	881b      	ldrh	r3, [r3, #0]
 800becc:	b29b      	uxth	r3, r3
 800bece:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800bed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bed6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	78db      	ldrb	r3, [r3, #3]
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d81f      	bhi.n	800bf22 <USB_ActivateEndpoint+0x72>
 800bee2:	a201      	add	r2, pc, #4	@ (adr r2, 800bee8 <USB_ActivateEndpoint+0x38>)
 800bee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee8:	0800bef9 	.word	0x0800bef9
 800beec:	0800bf15 	.word	0x0800bf15
 800bef0:	0800bf2b 	.word	0x0800bf2b
 800bef4:	0800bf07 	.word	0x0800bf07
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bef8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800befc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bf00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bf04:	e012      	b.n	800bf2c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bf06:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bf0a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bf0e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bf12:	e00b      	b.n	800bf2c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bf14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bf18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bf1c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bf20:	e004      	b.n	800bf2c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800bf28:	e000      	b.n	800bf2c <USB_ActivateEndpoint+0x7c>
      break;
 800bf2a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	441a      	add	r2, r3
 800bf36:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bf3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	4413      	add	r3, r2
 800bf58:	881b      	ldrh	r3, [r3, #0]
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	b21b      	sxth	r3, r3
 800bf5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf66:	b21a      	sxth	r2, r3
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	b21b      	sxth	r3, r3
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	b21b      	sxth	r3, r3
 800bf72:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	441a      	add	r2, r3
 800bf80:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800bf84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	7b1b      	ldrb	r3, [r3, #12]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f040 8178 	bne.w	800c292 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	785b      	ldrb	r3, [r3, #1]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f000 8084 	beq.w	800c0b4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	61bb      	str	r3, [r7, #24]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	461a      	mov	r2, r3
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	61bb      	str	r3, [r7, #24]
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	00da      	lsls	r2, r3, #3
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	4413      	add	r3, r2
 800bfca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bfce:	617b      	str	r3, [r7, #20]
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	88db      	ldrh	r3, [r3, #6]
 800bfd4:	085b      	lsrs	r3, r3, #1
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	005b      	lsls	r3, r3, #1
 800bfda:	b29a      	uxth	r2, r3
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	4413      	add	r3, r2
 800bfea:	881b      	ldrh	r3, [r3, #0]
 800bfec:	827b      	strh	r3, [r7, #18]
 800bfee:	8a7b      	ldrh	r3, [r7, #18]
 800bff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d01b      	beq.n	800c030 <USB_ActivateEndpoint+0x180>
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4413      	add	r3, r2
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	b29b      	uxth	r3, r3
 800c006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c00a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c00e:	823b      	strh	r3, [r7, #16]
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	441a      	add	r2, r3
 800c01a:	8a3b      	ldrh	r3, [r7, #16]
 800c01c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c020:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c028:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	78db      	ldrb	r3, [r3, #3]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d020      	beq.n	800c07a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4413      	add	r3, r2
 800c042:	881b      	ldrh	r3, [r3, #0]
 800c044:	b29b      	uxth	r3, r3
 800c046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c04a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c04e:	81bb      	strh	r3, [r7, #12]
 800c050:	89bb      	ldrh	r3, [r7, #12]
 800c052:	f083 0320 	eor.w	r3, r3, #32
 800c056:	81bb      	strh	r3, [r7, #12]
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	441a      	add	r2, r3
 800c062:	89bb      	ldrh	r3, [r7, #12]
 800c064:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c068:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c06c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c074:	b29b      	uxth	r3, r3
 800c076:	8013      	strh	r3, [r2, #0]
 800c078:	e2d5      	b.n	800c626 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	4413      	add	r3, r2
 800c084:	881b      	ldrh	r3, [r3, #0]
 800c086:	b29b      	uxth	r3, r3
 800c088:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c08c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c090:	81fb      	strh	r3, [r7, #14]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	441a      	add	r2, r3
 800c09c:	89fb      	ldrh	r3, [r7, #14]
 800c09e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	8013      	strh	r3, [r2, #0]
 800c0b2:	e2b8      	b.n	800c626 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c4:	4413      	add	r3, r2
 800c0c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	00da      	lsls	r2, r3, #3
 800c0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d0:	4413      	add	r3, r2
 800c0d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c0d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	88db      	ldrh	r3, [r3, #6]
 800c0dc:	085b      	lsrs	r3, r3, #1
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	005b      	lsls	r3, r3, #1
 800c0e2:	b29a      	uxth	r2, r3
 800c0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0e6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f8:	4413      	add	r3, r2
 800c0fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	00da      	lsls	r2, r3, #3
 800c102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c104:	4413      	add	r3, r2
 800c106:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c10a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c10e:	881b      	ldrh	r3, [r3, #0]
 800c110:	b29b      	uxth	r3, r3
 800c112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c116:	b29a      	uxth	r2, r3
 800c118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11a:	801a      	strh	r2, [r3, #0]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d10a      	bne.n	800c13a <USB_ActivateEndpoint+0x28a>
 800c124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c126:	881b      	ldrh	r3, [r3, #0]
 800c128:	b29b      	uxth	r3, r3
 800c12a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c12e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c132:	b29a      	uxth	r2, r3
 800c134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c136:	801a      	strh	r2, [r3, #0]
 800c138:	e039      	b.n	800c1ae <USB_ActivateEndpoint+0x2fe>
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c140:	d818      	bhi.n	800c174 <USB_ActivateEndpoint+0x2c4>
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	691b      	ldr	r3, [r3, #16]
 800c146:	085b      	lsrs	r3, r3, #1
 800c148:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	f003 0301 	and.w	r3, r3, #1
 800c152:	2b00      	cmp	r3, #0
 800c154:	d002      	beq.n	800c15c <USB_ActivateEndpoint+0x2ac>
 800c156:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c158:	3301      	adds	r3, #1
 800c15a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c15e:	881b      	ldrh	r3, [r3, #0]
 800c160:	b29a      	uxth	r2, r3
 800c162:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c164:	b29b      	uxth	r3, r3
 800c166:	029b      	lsls	r3, r3, #10
 800c168:	b29b      	uxth	r3, r3
 800c16a:	4313      	orrs	r3, r2
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c170:	801a      	strh	r2, [r3, #0]
 800c172:	e01c      	b.n	800c1ae <USB_ActivateEndpoint+0x2fe>
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	691b      	ldr	r3, [r3, #16]
 800c178:	095b      	lsrs	r3, r3, #5
 800c17a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	f003 031f 	and.w	r3, r3, #31
 800c184:	2b00      	cmp	r3, #0
 800c186:	d102      	bne.n	800c18e <USB_ActivateEndpoint+0x2de>
 800c188:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c18a:	3b01      	subs	r3, #1
 800c18c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c190:	881b      	ldrh	r3, [r3, #0]
 800c192:	b29a      	uxth	r2, r3
 800c194:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c196:	b29b      	uxth	r3, r3
 800c198:	029b      	lsls	r3, r3, #10
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	4313      	orrs	r3, r2
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	4413      	add	r3, r2
 800c1b8:	881b      	ldrh	r3, [r3, #0]
 800c1ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c1bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c1be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d01b      	beq.n	800c1fe <USB_ActivateEndpoint+0x34e>
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	4413      	add	r3, r2
 800c1d0:	881b      	ldrh	r3, [r3, #0]
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1dc:	843b      	strh	r3, [r7, #32]
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	441a      	add	r2, r3
 800c1e8:	8c3b      	ldrh	r3, [r7, #32]
 800c1ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c1f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d124      	bne.n	800c250 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	4413      	add	r3, r2
 800c210:	881b      	ldrh	r3, [r3, #0]
 800c212:	b29b      	uxth	r3, r3
 800c214:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c21c:	83bb      	strh	r3, [r7, #28]
 800c21e:	8bbb      	ldrh	r3, [r7, #28]
 800c220:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c224:	83bb      	strh	r3, [r7, #28]
 800c226:	8bbb      	ldrh	r3, [r7, #28]
 800c228:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c22c:	83bb      	strh	r3, [r7, #28]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	441a      	add	r2, r3
 800c238:	8bbb      	ldrh	r3, [r7, #28]
 800c23a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c23e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	8013      	strh	r3, [r2, #0]
 800c24e:	e1ea      	b.n	800c626 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4413      	add	r3, r2
 800c25a:	881b      	ldrh	r3, [r3, #0]
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c266:	83fb      	strh	r3, [r7, #30]
 800c268:	8bfb      	ldrh	r3, [r7, #30]
 800c26a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c26e:	83fb      	strh	r3, [r7, #30]
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	441a      	add	r2, r3
 800c27a:	8bfb      	ldrh	r3, [r7, #30]
 800c27c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c280:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c284:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	8013      	strh	r3, [r2, #0]
 800c290:	e1c9      	b.n	800c626 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	78db      	ldrb	r3, [r3, #3]
 800c296:	2b02      	cmp	r3, #2
 800c298:	d11e      	bne.n	800c2d8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	4413      	add	r3, r2
 800c2a4:	881b      	ldrh	r3, [r3, #0]
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2b0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	441a      	add	r2, r3
 800c2be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c2c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c2ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	8013      	strh	r3, [r2, #0]
 800c2d6:	e01d      	b.n	800c314 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	4413      	add	r3, r2
 800c2e2:	881b      	ldrh	r3, [r3, #0]
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c2ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2ee:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	441a      	add	r2, r3
 800c2fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c300:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c304:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c308:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c30c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c310:	b29b      	uxth	r3, r3
 800c312:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c31e:	b29b      	uxth	r3, r3
 800c320:	461a      	mov	r2, r3
 800c322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c324:	4413      	add	r3, r2
 800c326:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	00da      	lsls	r2, r3, #3
 800c32e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c330:	4413      	add	r3, r2
 800c332:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c336:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	891b      	ldrh	r3, [r3, #8]
 800c33c:	085b      	lsrs	r3, r3, #1
 800c33e:	b29b      	uxth	r3, r3
 800c340:	005b      	lsls	r3, r3, #1
 800c342:	b29a      	uxth	r2, r3
 800c344:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c346:	801a      	strh	r2, [r3, #0]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c352:	b29b      	uxth	r3, r3
 800c354:	461a      	mov	r2, r3
 800c356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c358:	4413      	add	r3, r2
 800c35a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	00da      	lsls	r2, r3, #3
 800c362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c364:	4413      	add	r3, r2
 800c366:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c36a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	895b      	ldrh	r3, [r3, #10]
 800c370:	085b      	lsrs	r3, r3, #1
 800c372:	b29b      	uxth	r3, r3
 800c374:	005b      	lsls	r3, r3, #1
 800c376:	b29a      	uxth	r2, r3
 800c378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c37a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	785b      	ldrb	r3, [r3, #1]
 800c380:	2b00      	cmp	r3, #0
 800c382:	f040 8093 	bne.w	800c4ac <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	4413      	add	r3, r2
 800c390:	881b      	ldrh	r3, [r3, #0]
 800c392:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c396:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c39a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d01b      	beq.n	800c3da <USB_ActivateEndpoint+0x52a>
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	4413      	add	r3, r2
 800c3ac:	881b      	ldrh	r3, [r3, #0]
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	441a      	add	r2, r3
 800c3c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c3c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c3d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	4413      	add	r3, r2
 800c3e4:	881b      	ldrh	r3, [r3, #0]
 800c3e6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c3e8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c3ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d01b      	beq.n	800c42a <USB_ActivateEndpoint+0x57a>
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	881b      	ldrh	r3, [r3, #0]
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c408:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	441a      	add	r2, r3
 800c414:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c416:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c41a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c41e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c422:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c426:	b29b      	uxth	r3, r3
 800c428:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	4413      	add	r3, r2
 800c434:	881b      	ldrh	r3, [r3, #0]
 800c436:	b29b      	uxth	r3, r3
 800c438:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c43c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c440:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c442:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c444:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c448:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c44a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c44c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c450:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	009b      	lsls	r3, r3, #2
 800c45a:	441a      	add	r2, r3
 800c45c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c45e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c46a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c46e:	b29b      	uxth	r3, r3
 800c470:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4413      	add	r3, r2
 800c47c:	881b      	ldrh	r3, [r3, #0]
 800c47e:	b29b      	uxth	r3, r3
 800c480:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c484:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c488:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	441a      	add	r2, r3
 800c494:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c496:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c49a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c49e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	8013      	strh	r3, [r2, #0]
 800c4aa:	e0bc      	b.n	800c626 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	4413      	add	r3, r2
 800c4b6:	881b      	ldrh	r3, [r3, #0]
 800c4b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c4bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c4c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d01d      	beq.n	800c504 <USB_ActivateEndpoint+0x654>
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4413      	add	r3, r2
 800c4d2:	881b      	ldrh	r3, [r3, #0]
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4de:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	441a      	add	r2, r3
 800c4ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c4f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c4fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c500:	b29b      	uxth	r3, r3
 800c502:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4413      	add	r3, r2
 800c50e:	881b      	ldrh	r3, [r3, #0]
 800c510:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c514:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d01d      	beq.n	800c55c <USB_ActivateEndpoint+0x6ac>
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	4413      	add	r3, r2
 800c52a:	881b      	ldrh	r3, [r3, #0]
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c536:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	441a      	add	r2, r3
 800c544:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c54c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c554:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c558:	b29b      	uxth	r3, r3
 800c55a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	78db      	ldrb	r3, [r3, #3]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d024      	beq.n	800c5ae <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	4413      	add	r3, r2
 800c56e:	881b      	ldrh	r3, [r3, #0]
 800c570:	b29b      	uxth	r3, r3
 800c572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c576:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c57a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c57e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c582:	f083 0320 	eor.w	r3, r3, #32
 800c586:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	441a      	add	r2, r3
 800c594:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c598:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c59c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	8013      	strh	r3, [r2, #0]
 800c5ac:	e01d      	b.n	800c5ea <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	009b      	lsls	r3, r3, #2
 800c5b6:	4413      	add	r3, r2
 800c5b8:	881b      	ldrh	r3, [r3, #0]
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5c4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	441a      	add	r2, r3
 800c5d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c5d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	4413      	add	r3, r2
 800c5f4:	881b      	ldrh	r3, [r3, #0]
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c5fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c600:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	441a      	add	r2, r3
 800c60e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c612:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c616:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c61a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c61e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c622:	b29b      	uxth	r3, r3
 800c624:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c626:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3774      	adds	r7, #116	@ 0x74
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop

0800c638 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c638:	b480      	push	{r7}
 800c63a:	b08d      	sub	sp, #52	@ 0x34
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	7b1b      	ldrb	r3, [r3, #12]
 800c646:	2b00      	cmp	r3, #0
 800c648:	f040 808e 	bne.w	800c768 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	785b      	ldrb	r3, [r3, #1]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d044      	beq.n	800c6de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	4413      	add	r3, r2
 800c65e:	881b      	ldrh	r3, [r3, #0]
 800c660:	81bb      	strh	r3, [r7, #12]
 800c662:	89bb      	ldrh	r3, [r7, #12]
 800c664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d01b      	beq.n	800c6a4 <USB_DeactivateEndpoint+0x6c>
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	4413      	add	r3, r2
 800c676:	881b      	ldrh	r3, [r3, #0]
 800c678:	b29b      	uxth	r3, r3
 800c67a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c67e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c682:	817b      	strh	r3, [r7, #10]
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	441a      	add	r2, r3
 800c68e:	897b      	ldrh	r3, [r7, #10]
 800c690:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c694:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c698:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c69c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	4413      	add	r3, r2
 800c6ae:	881b      	ldrh	r3, [r3, #0]
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6ba:	813b      	strh	r3, [r7, #8]
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	441a      	add	r2, r3
 800c6c6:	893b      	ldrh	r3, [r7, #8]
 800c6c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	8013      	strh	r3, [r2, #0]
 800c6dc:	e192      	b.n	800ca04 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	881b      	ldrh	r3, [r3, #0]
 800c6ea:	827b      	strh	r3, [r7, #18]
 800c6ec:	8a7b      	ldrh	r3, [r7, #18]
 800c6ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d01b      	beq.n	800c72e <USB_DeactivateEndpoint+0xf6>
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	881b      	ldrh	r3, [r3, #0]
 800c702:	b29b      	uxth	r3, r3
 800c704:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c70c:	823b      	strh	r3, [r7, #16]
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	441a      	add	r2, r3
 800c718:	8a3b      	ldrh	r3, [r7, #16]
 800c71a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c71e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	4413      	add	r3, r2
 800c738:	881b      	ldrh	r3, [r3, #0]
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c744:	81fb      	strh	r3, [r7, #14]
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	441a      	add	r2, r3
 800c750:	89fb      	ldrh	r3, [r7, #14]
 800c752:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c756:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c75a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c75e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c762:	b29b      	uxth	r3, r3
 800c764:	8013      	strh	r3, [r2, #0]
 800c766:	e14d      	b.n	800ca04 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	785b      	ldrb	r3, [r3, #1]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	f040 80a5 	bne.w	800c8bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	881b      	ldrh	r3, [r3, #0]
 800c77e:	843b      	strh	r3, [r7, #32]
 800c780:	8c3b      	ldrh	r3, [r7, #32]
 800c782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c786:	2b00      	cmp	r3, #0
 800c788:	d01b      	beq.n	800c7c2 <USB_DeactivateEndpoint+0x18a>
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	881b      	ldrh	r3, [r3, #0]
 800c796:	b29b      	uxth	r3, r3
 800c798:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c79c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7a0:	83fb      	strh	r3, [r7, #30]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	441a      	add	r2, r3
 800c7ac:	8bfb      	ldrh	r3, [r7, #30]
 800c7ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c7ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	4413      	add	r3, r2
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	83bb      	strh	r3, [r7, #28]
 800c7d0:	8bbb      	ldrh	r3, [r7, #28]
 800c7d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d01b      	beq.n	800c812 <USB_DeactivateEndpoint+0x1da>
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	4413      	add	r3, r2
 800c7e4:	881b      	ldrh	r3, [r3, #0]
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7f0:	837b      	strh	r3, [r7, #26]
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	441a      	add	r2, r3
 800c7fc:	8b7b      	ldrh	r3, [r7, #26]
 800c7fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c80a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c80e:	b29b      	uxth	r3, r3
 800c810:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	4413      	add	r3, r2
 800c81c:	881b      	ldrh	r3, [r3, #0]
 800c81e:	b29b      	uxth	r3, r3
 800c820:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c828:	833b      	strh	r3, [r7, #24]
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	441a      	add	r2, r3
 800c834:	8b3b      	ldrh	r3, [r7, #24]
 800c836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c83a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c83e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c842:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c846:	b29b      	uxth	r3, r3
 800c848:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	4413      	add	r3, r2
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	b29b      	uxth	r3, r3
 800c858:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c85c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c860:	82fb      	strh	r3, [r7, #22]
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	441a      	add	r2, r3
 800c86c:	8afb      	ldrh	r3, [r7, #22]
 800c86e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c87a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c87e:	b29b      	uxth	r3, r3
 800c880:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	4413      	add	r3, r2
 800c88c:	881b      	ldrh	r3, [r3, #0]
 800c88e:	b29b      	uxth	r3, r3
 800c890:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c894:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c898:	82bb      	strh	r3, [r7, #20]
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	441a      	add	r2, r3
 800c8a4:	8abb      	ldrh	r3, [r7, #20]
 800c8a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	8013      	strh	r3, [r2, #0]
 800c8ba:	e0a3      	b.n	800ca04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	4413      	add	r3, r2
 800c8c6:	881b      	ldrh	r3, [r3, #0]
 800c8c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c8ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c8cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d01b      	beq.n	800c90c <USB_DeactivateEndpoint+0x2d4>
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	4413      	add	r3, r2
 800c8de:	881b      	ldrh	r3, [r3, #0]
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8ea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	441a      	add	r2, r3
 800c8f6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c8f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c900:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c908:	b29b      	uxth	r3, r3
 800c90a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	4413      	add	r3, r2
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c91a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c91c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c920:	2b00      	cmp	r3, #0
 800c922:	d01b      	beq.n	800c95c <USB_DeactivateEndpoint+0x324>
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4413      	add	r3, r2
 800c92e:	881b      	ldrh	r3, [r3, #0]
 800c930:	b29b      	uxth	r3, r3
 800c932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c93a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	441a      	add	r2, r3
 800c946:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c94c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c954:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c958:	b29b      	uxth	r3, r3
 800c95a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	4413      	add	r3, r2
 800c966:	881b      	ldrh	r3, [r3, #0]
 800c968:	b29b      	uxth	r3, r3
 800c96a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c96e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c972:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	441a      	add	r2, r3
 800c97e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c988:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c98c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c990:	b29b      	uxth	r3, r3
 800c992:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	4413      	add	r3, r2
 800c99e:	881b      	ldrh	r3, [r3, #0]
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	009b      	lsls	r3, r3, #2
 800c9b4:	441a      	add	r2, r3
 800c9b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	4413      	add	r3, r2
 800c9d6:	881b      	ldrh	r3, [r3, #0]
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c9de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9e2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	441a      	add	r2, r3
 800c9ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c9f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3734      	adds	r7, #52	@ 0x34
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr

0800ca12 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b0c2      	sub	sp, #264	@ 0x108
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca20:	6018      	str	r0, [r3, #0]
 800ca22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca2a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ca2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	785b      	ldrb	r3, [r3, #1]
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	f040 86b7 	bne.w	800d7ac <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ca3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	699a      	ldr	r2, [r3, #24]
 800ca4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	691b      	ldr	r3, [r3, #16]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d908      	bls.n	800ca6c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800ca5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	691b      	ldr	r3, [r3, #16]
 800ca66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800ca6a:	e007      	b.n	800ca7c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800ca6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	699b      	ldr	r3, [r3, #24]
 800ca78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ca7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	7b1b      	ldrb	r3, [r3, #12]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d13a      	bne.n	800cb02 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ca8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	6959      	ldr	r1, [r3, #20]
 800ca98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	88da      	ldrh	r2, [r3, #6]
 800caa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800caae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cab2:	6800      	ldr	r0, [r0, #0]
 800cab4:	f001 fc99 	bl	800e3ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cabc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	613b      	str	r3, [r7, #16]
 800cac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cac8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	461a      	mov	r2, r3
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	4413      	add	r3, r2
 800cada:	613b      	str	r3, [r7, #16]
 800cadc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	00da      	lsls	r2, r3, #3
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	4413      	add	r3, r2
 800caee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800caf2:	60fb      	str	r3, [r7, #12]
 800caf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caf8:	b29a      	uxth	r2, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	801a      	strh	r2, [r3, #0]
 800cafe:	f000 be1f 	b.w	800d740 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cb02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	78db      	ldrb	r3, [r3, #3]
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	f040 8462 	bne.w	800d3d8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cb14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	6a1a      	ldr	r2, [r3, #32]
 800cb20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	f240 83df 	bls.w	800d2f0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cb32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	4413      	add	r3, r2
 800cb4c:	881b      	ldrh	r3, [r3, #0]
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb58:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800cb5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	441a      	add	r2, r3
 800cb76:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800cb7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb82:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cb86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cb8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	6a1a      	ldr	r2, [r3, #32]
 800cb9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb9e:	1ad2      	subs	r2, r2, r3
 800cba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cbac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4413      	add	r3, r2
 800cbc6:	881b      	ldrh	r3, [r3, #0]
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f000 81c7 	beq.w	800cf62 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cbd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	785b      	ldrb	r3, [r3, #1]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d177      	bne.n	800cce0 <USB_EPStartXfer+0x2ce>
 800cbf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cbfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc10:	4413      	add	r3, r2
 800cc12:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	00da      	lsls	r2, r3, #3
 800cc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc24:	4413      	add	r3, r2
 800cc26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cc2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2e:	881b      	ldrh	r3, [r3, #0]
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3a:	801a      	strh	r2, [r3, #0]
 800cc3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10a      	bne.n	800cc5a <USB_EPStartXfer+0x248>
 800cc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc46:	881b      	ldrh	r3, [r3, #0]
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc56:	801a      	strh	r2, [r3, #0]
 800cc58:	e067      	b.n	800cd2a <USB_EPStartXfer+0x318>
 800cc5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc5e:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc60:	d81c      	bhi.n	800cc9c <USB_EPStartXfer+0x28a>
 800cc62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc66:	085b      	lsrs	r3, r3, #1
 800cc68:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cc6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d004      	beq.n	800cc82 <USB_EPStartXfer+0x270>
 800cc78:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc84:	881b      	ldrh	r3, [r3, #0]
 800cc86:	b29a      	uxth	r2, r3
 800cc88:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	029b      	lsls	r3, r3, #10
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	4313      	orrs	r3, r2
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc98:	801a      	strh	r2, [r3, #0]
 800cc9a:	e046      	b.n	800cd2a <USB_EPStartXfer+0x318>
 800cc9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cca0:	095b      	lsrs	r3, r3, #5
 800cca2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccaa:	f003 031f 	and.w	r3, r3, #31
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d104      	bne.n	800ccbc <USB_EPStartXfer+0x2aa>
 800ccb2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbe:	881b      	ldrh	r3, [r3, #0]
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	029b      	lsls	r3, r3, #10
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	4313      	orrs	r3, r2
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccdc:	801a      	strh	r2, [r3, #0]
 800ccde:	e024      	b.n	800cd2a <USB_EPStartXfer+0x318>
 800cce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	785b      	ldrb	r3, [r3, #1]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d11c      	bne.n	800cd2a <USB_EPStartXfer+0x318>
 800ccf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	461a      	mov	r2, r3
 800cd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd04:	4413      	add	r3, r2
 800cd06:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	00da      	lsls	r2, r3, #3
 800cd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd18:	4413      	add	r3, r2
 800cd1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cd1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cd2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	895b      	ldrh	r3, [r3, #10]
 800cd36:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	6959      	ldr	r1, [r3, #20]
 800cd46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cd50:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cd54:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cd58:	6800      	ldr	r0, [r0, #0]
 800cd5a:	f001 fb46 	bl	800e3ea <USB_WritePMA>
            ep->xfer_buff += len;
 800cd5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	695a      	ldr	r2, [r3, #20]
 800cd6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd6e:	441a      	add	r2, r3
 800cd70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cd7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	6a1a      	ldr	r2, [r3, #32]
 800cd88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	691b      	ldr	r3, [r3, #16]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d90f      	bls.n	800cdb8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800cd98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	6a1a      	ldr	r2, [r3, #32]
 800cda4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cda8:	1ad2      	subs	r2, r2, r3
 800cdaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	621a      	str	r2, [r3, #32]
 800cdb6:	e00e      	b.n	800cdd6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800cdb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	6a1b      	ldr	r3, [r3, #32]
 800cdc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800cdc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cdd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	785b      	ldrb	r3, [r3, #1]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d177      	bne.n	800ced6 <USB_EPStartXfer+0x4c4>
 800cde6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	61bb      	str	r3, [r7, #24]
 800cdf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	461a      	mov	r2, r3
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	4413      	add	r3, r2
 800ce08:	61bb      	str	r3, [r7, #24]
 800ce0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	00da      	lsls	r2, r3, #3
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce20:	617b      	str	r3, [r7, #20]
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	881b      	ldrh	r3, [r3, #0]
 800ce26:	b29b      	uxth	r3, r3
 800ce28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	801a      	strh	r2, [r3, #0]
 800ce32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d10a      	bne.n	800ce50 <USB_EPStartXfer+0x43e>
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	881b      	ldrh	r3, [r3, #0]
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce48:	b29a      	uxth	r2, r3
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	801a      	strh	r2, [r3, #0]
 800ce4e:	e06d      	b.n	800cf2c <USB_EPStartXfer+0x51a>
 800ce50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce54:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce56:	d81c      	bhi.n	800ce92 <USB_EPStartXfer+0x480>
 800ce58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce5c:	085b      	lsrs	r3, r3, #1
 800ce5e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ce62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce66:	f003 0301 	and.w	r3, r3, #1
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d004      	beq.n	800ce78 <USB_EPStartXfer+0x466>
 800ce6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ce72:	3301      	adds	r3, #1
 800ce74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	881b      	ldrh	r3, [r3, #0]
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ce82:	b29b      	uxth	r3, r3
 800ce84:	029b      	lsls	r3, r3, #10
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	801a      	strh	r2, [r3, #0]
 800ce90:	e04c      	b.n	800cf2c <USB_EPStartXfer+0x51a>
 800ce92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce96:	095b      	lsrs	r3, r3, #5
 800ce98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ce9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cea0:	f003 031f 	and.w	r3, r3, #31
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d104      	bne.n	800ceb2 <USB_EPStartXfer+0x4a0>
 800cea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ceac:	3b01      	subs	r3, #1
 800ceae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	881b      	ldrh	r3, [r3, #0]
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	029b      	lsls	r3, r3, #10
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	4313      	orrs	r3, r2
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ceca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cece:	b29a      	uxth	r2, r3
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	801a      	strh	r2, [r3, #0]
 800ced4:	e02a      	b.n	800cf2c <USB_EPStartXfer+0x51a>
 800ced6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ceda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	785b      	ldrb	r3, [r3, #1]
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d122      	bne.n	800cf2c <USB_EPStartXfer+0x51a>
 800cee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ceea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	623b      	str	r3, [r7, #32]
 800cef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cef6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	461a      	mov	r2, r3
 800cf04:	6a3b      	ldr	r3, [r7, #32]
 800cf06:	4413      	add	r3, r2
 800cf08:	623b      	str	r3, [r7, #32]
 800cf0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	00da      	lsls	r2, r3, #3
 800cf18:	6a3b      	ldr	r3, [r7, #32]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cf20:	61fb      	str	r3, [r7, #28]
 800cf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf26:	b29a      	uxth	r2, r3
 800cf28:	69fb      	ldr	r3, [r7, #28]
 800cf2a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cf2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	891b      	ldrh	r3, [r3, #8]
 800cf38:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	6959      	ldr	r1, [r3, #20]
 800cf48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cf52:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cf56:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cf5a:	6800      	ldr	r0, [r0, #0]
 800cf5c:	f001 fa45 	bl	800e3ea <USB_WritePMA>
 800cf60:	e3ee      	b.n	800d740 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cf62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	785b      	ldrb	r3, [r3, #1]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d177      	bne.n	800d062 <USB_EPStartXfer+0x650>
 800cf72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cf7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	461a      	mov	r2, r3
 800cf90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf92:	4413      	add	r3, r2
 800cf94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cf96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	00da      	lsls	r2, r3, #3
 800cfa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfa6:	4413      	add	r3, r2
 800cfa8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cfac:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfb0:	881b      	ldrh	r3, [r3, #0]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfbc:	801a      	strh	r2, [r3, #0]
 800cfbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d10a      	bne.n	800cfdc <USB_EPStartXfer+0x5ca>
 800cfc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfc8:	881b      	ldrh	r3, [r3, #0]
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfd8:	801a      	strh	r2, [r3, #0]
 800cfda:	e06d      	b.n	800d0b8 <USB_EPStartXfer+0x6a6>
 800cfdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfe0:	2b3e      	cmp	r3, #62	@ 0x3e
 800cfe2:	d81c      	bhi.n	800d01e <USB_EPStartXfer+0x60c>
 800cfe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfe8:	085b      	lsrs	r3, r3, #1
 800cfea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cfee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cff2:	f003 0301 	and.w	r3, r3, #1
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d004      	beq.n	800d004 <USB_EPStartXfer+0x5f2>
 800cffa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cffe:	3301      	adds	r3, #1
 800d000:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d006:	881b      	ldrh	r3, [r3, #0]
 800d008:	b29a      	uxth	r2, r3
 800d00a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d00e:	b29b      	uxth	r3, r3
 800d010:	029b      	lsls	r3, r3, #10
 800d012:	b29b      	uxth	r3, r3
 800d014:	4313      	orrs	r3, r2
 800d016:	b29a      	uxth	r2, r3
 800d018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d01a:	801a      	strh	r2, [r3, #0]
 800d01c:	e04c      	b.n	800d0b8 <USB_EPStartXfer+0x6a6>
 800d01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d022:	095b      	lsrs	r3, r3, #5
 800d024:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d02c:	f003 031f 	and.w	r3, r3, #31
 800d030:	2b00      	cmp	r3, #0
 800d032:	d104      	bne.n	800d03e <USB_EPStartXfer+0x62c>
 800d034:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d038:	3b01      	subs	r3, #1
 800d03a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d03e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d040:	881b      	ldrh	r3, [r3, #0]
 800d042:	b29a      	uxth	r2, r3
 800d044:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d048:	b29b      	uxth	r3, r3
 800d04a:	029b      	lsls	r3, r3, #10
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	4313      	orrs	r3, r2
 800d050:	b29b      	uxth	r3, r3
 800d052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d05e:	801a      	strh	r2, [r3, #0]
 800d060:	e02a      	b.n	800d0b8 <USB_EPStartXfer+0x6a6>
 800d062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	785b      	ldrb	r3, [r3, #1]
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d122      	bne.n	800d0b8 <USB_EPStartXfer+0x6a6>
 800d072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d076:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d07e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d082:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	461a      	mov	r2, r3
 800d090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d092:	4413      	add	r3, r2
 800d094:	653b      	str	r3, [r7, #80]	@ 0x50
 800d096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d09a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	00da      	lsls	r2, r3, #3
 800d0a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0a6:	4413      	add	r3, r2
 800d0a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d0ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d0ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d0b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	891b      	ldrh	r3, [r3, #8]
 800d0c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d0c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	6959      	ldr	r1, [r3, #20]
 800d0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d0de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d0e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d0e6:	6800      	ldr	r0, [r0, #0]
 800d0e8:	f001 f97f 	bl	800e3ea <USB_WritePMA>
            ep->xfer_buff += len;
 800d0ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	695a      	ldr	r2, [r3, #20]
 800d0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0fc:	441a      	add	r2, r3
 800d0fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d10a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d10e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	6a1a      	ldr	r2, [r3, #32]
 800d116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d11a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	691b      	ldr	r3, [r3, #16]
 800d122:	429a      	cmp	r2, r3
 800d124:	d90f      	bls.n	800d146 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d12a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	6a1a      	ldr	r2, [r3, #32]
 800d132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d136:	1ad2      	subs	r2, r2, r3
 800d138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d13c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	621a      	str	r2, [r3, #32]
 800d144:	e00e      	b.n	800d164 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d14a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	6a1b      	ldr	r3, [r3, #32]
 800d152:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d15a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2200      	movs	r2, #0
 800d162:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d168:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	785b      	ldrb	r3, [r3, #1]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d177      	bne.n	800d270 <USB_EPStartXfer+0x85e>
 800d180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d184:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d18c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d190:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	461a      	mov	r2, r3
 800d19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a0:	4413      	add	r3, r2
 800d1a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d1a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	00da      	lsls	r2, r3, #3
 800d1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b4:	4413      	add	r3, r2
 800d1b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d1ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1c6:	b29a      	uxth	r2, r3
 800d1c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ca:	801a      	strh	r2, [r3, #0]
 800d1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10a      	bne.n	800d1ea <USB_EPStartXfer+0x7d8>
 800d1d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1d6:	881b      	ldrh	r3, [r3, #0]
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1e2:	b29a      	uxth	r2, r3
 800d1e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1e6:	801a      	strh	r2, [r3, #0]
 800d1e8:	e067      	b.n	800d2ba <USB_EPStartXfer+0x8a8>
 800d1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1f0:	d81c      	bhi.n	800d22c <USB_EPStartXfer+0x81a>
 800d1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1f6:	085b      	lsrs	r3, r3, #1
 800d1f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d1fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d200:	f003 0301 	and.w	r3, r3, #1
 800d204:	2b00      	cmp	r3, #0
 800d206:	d004      	beq.n	800d212 <USB_EPStartXfer+0x800>
 800d208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d20c:	3301      	adds	r3, #1
 800d20e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d214:	881b      	ldrh	r3, [r3, #0]
 800d216:	b29a      	uxth	r2, r3
 800d218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	029b      	lsls	r3, r3, #10
 800d220:	b29b      	uxth	r3, r3
 800d222:	4313      	orrs	r3, r2
 800d224:	b29a      	uxth	r2, r3
 800d226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d228:	801a      	strh	r2, [r3, #0]
 800d22a:	e046      	b.n	800d2ba <USB_EPStartXfer+0x8a8>
 800d22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d230:	095b      	lsrs	r3, r3, #5
 800d232:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d23a:	f003 031f 	and.w	r3, r3, #31
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d104      	bne.n	800d24c <USB_EPStartXfer+0x83a>
 800d242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d246:	3b01      	subs	r3, #1
 800d248:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d24e:	881b      	ldrh	r3, [r3, #0]
 800d250:	b29a      	uxth	r2, r3
 800d252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d256:	b29b      	uxth	r3, r3
 800d258:	029b      	lsls	r3, r3, #10
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	4313      	orrs	r3, r2
 800d25e:	b29b      	uxth	r3, r3
 800d260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d268:	b29a      	uxth	r2, r3
 800d26a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d26c:	801a      	strh	r2, [r3, #0]
 800d26e:	e024      	b.n	800d2ba <USB_EPStartXfer+0x8a8>
 800d270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	785b      	ldrb	r3, [r3, #1]
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d11c      	bne.n	800d2ba <USB_EPStartXfer+0x8a8>
 800d280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d284:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d28e:	b29b      	uxth	r3, r3
 800d290:	461a      	mov	r2, r3
 800d292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d294:	4413      	add	r3, r2
 800d296:	643b      	str	r3, [r7, #64]	@ 0x40
 800d298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d29c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	00da      	lsls	r2, r3, #3
 800d2a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2a8:	4413      	add	r3, r2
 800d2aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d2ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	895b      	ldrh	r3, [r3, #10]
 800d2c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d2ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	6959      	ldr	r1, [r3, #20]
 800d2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d2e0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d2e4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d2e8:	6800      	ldr	r0, [r0, #0]
 800d2ea:	f001 f87e 	bl	800e3ea <USB_WritePMA>
 800d2ee:	e227      	b.n	800d740 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	6a1b      	ldr	r3, [r3, #32]
 800d2fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d304:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d308:	681a      	ldr	r2, [r3, #0]
 800d30a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d30e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	4413      	add	r3, r2
 800d31a:	881b      	ldrh	r3, [r3, #0]
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d326:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d32a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d32e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	441a      	add	r2, r3
 800d344:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d348:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d34c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d350:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d358:	b29b      	uxth	r3, r3
 800d35a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d35c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d360:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d36c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d376:	b29b      	uxth	r3, r3
 800d378:	461a      	mov	r2, r3
 800d37a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d37c:	4413      	add	r3, r2
 800d37e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	00da      	lsls	r2, r3, #3
 800d38e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d390:	4413      	add	r3, r2
 800d392:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d396:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d3a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d3a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	891b      	ldrh	r3, [r3, #8]
 800d3ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d3b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	6959      	ldr	r1, [r3, #20]
 800d3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d3c8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d3cc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d3d0:	6800      	ldr	r0, [r0, #0]
 800d3d2:	f001 f80a 	bl	800e3ea <USB_WritePMA>
 800d3d6:	e1b3      	b.n	800d740 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d3d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	6a1a      	ldr	r2, [r3, #32]
 800d3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3e8:	1ad2      	subs	r2, r2, r3
 800d3ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d3f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	4413      	add	r3, r2
 800d410:	881b      	ldrh	r3, [r3, #0]
 800d412:	b29b      	uxth	r3, r3
 800d414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d418:	2b00      	cmp	r3, #0
 800d41a:	f000 80c6 	beq.w	800d5aa <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d41e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d422:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	673b      	str	r3, [r7, #112]	@ 0x70
 800d42a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d42e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	785b      	ldrb	r3, [r3, #1]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d177      	bne.n	800d52a <USB_EPStartXfer+0xb18>
 800d43a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d43e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d44a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d454:	b29b      	uxth	r3, r3
 800d456:	461a      	mov	r2, r3
 800d458:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d45a:	4413      	add	r3, r2
 800d45c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d45e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	00da      	lsls	r2, r3, #3
 800d46c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d46e:	4413      	add	r3, r2
 800d470:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d474:	667b      	str	r3, [r7, #100]	@ 0x64
 800d476:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d480:	b29a      	uxth	r2, r3
 800d482:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d484:	801a      	strh	r2, [r3, #0]
 800d486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10a      	bne.n	800d4a4 <USB_EPStartXfer+0xa92>
 800d48e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d490:	881b      	ldrh	r3, [r3, #0]
 800d492:	b29b      	uxth	r3, r3
 800d494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d4a0:	801a      	strh	r2, [r3, #0]
 800d4a2:	e067      	b.n	800d574 <USB_EPStartXfer+0xb62>
 800d4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4a8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d4aa:	d81c      	bhi.n	800d4e6 <USB_EPStartXfer+0xad4>
 800d4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4b0:	085b      	lsrs	r3, r3, #1
 800d4b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4ba:	f003 0301 	and.w	r3, r3, #1
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d004      	beq.n	800d4cc <USB_EPStartXfer+0xaba>
 800d4c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d4cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d4ce:	881b      	ldrh	r3, [r3, #0]
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	029b      	lsls	r3, r3, #10
 800d4da:	b29b      	uxth	r3, r3
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	b29a      	uxth	r2, r3
 800d4e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d4e2:	801a      	strh	r2, [r3, #0]
 800d4e4:	e046      	b.n	800d574 <USB_EPStartXfer+0xb62>
 800d4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4ea:	095b      	lsrs	r3, r3, #5
 800d4ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4f4:	f003 031f 	and.w	r3, r3, #31
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d104      	bne.n	800d506 <USB_EPStartXfer+0xaf4>
 800d4fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d500:	3b01      	subs	r3, #1
 800d502:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d506:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d508:	881b      	ldrh	r3, [r3, #0]
 800d50a:	b29a      	uxth	r2, r3
 800d50c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d510:	b29b      	uxth	r3, r3
 800d512:	029b      	lsls	r3, r3, #10
 800d514:	b29b      	uxth	r3, r3
 800d516:	4313      	orrs	r3, r2
 800d518:	b29b      	uxth	r3, r3
 800d51a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d51e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d522:	b29a      	uxth	r2, r3
 800d524:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d526:	801a      	strh	r2, [r3, #0]
 800d528:	e024      	b.n	800d574 <USB_EPStartXfer+0xb62>
 800d52a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d52e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	785b      	ldrb	r3, [r3, #1]
 800d536:	2b01      	cmp	r3, #1
 800d538:	d11c      	bne.n	800d574 <USB_EPStartXfer+0xb62>
 800d53a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d53e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d548:	b29b      	uxth	r3, r3
 800d54a:	461a      	mov	r2, r3
 800d54c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d54e:	4413      	add	r3, r2
 800d550:	673b      	str	r3, [r7, #112]	@ 0x70
 800d552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	00da      	lsls	r2, r3, #3
 800d560:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d562:	4413      	add	r3, r2
 800d564:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d568:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d56e:	b29a      	uxth	r2, r3
 800d570:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d572:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	895b      	ldrh	r3, [r3, #10]
 800d580:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	6959      	ldr	r1, [r3, #20]
 800d590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d594:	b29b      	uxth	r3, r3
 800d596:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d59a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d59e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d5a2:	6800      	ldr	r0, [r0, #0]
 800d5a4:	f000 ff21 	bl	800e3ea <USB_WritePMA>
 800d5a8:	e0ca      	b.n	800d740 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d5aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	785b      	ldrb	r3, [r3, #1]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d177      	bne.n	800d6aa <USB_EPStartXfer+0xc98>
 800d5ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d5c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d5da:	4413      	add	r3, r2
 800d5dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d5de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	00da      	lsls	r2, r3, #3
 800d5ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d5ee:	4413      	add	r3, r2
 800d5f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d5f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d5f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5f8:	881b      	ldrh	r3, [r3, #0]
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d600:	b29a      	uxth	r2, r3
 800d602:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d604:	801a      	strh	r2, [r3, #0]
 800d606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d10a      	bne.n	800d624 <USB_EPStartXfer+0xc12>
 800d60e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d610:	881b      	ldrh	r3, [r3, #0]
 800d612:	b29b      	uxth	r3, r3
 800d614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d620:	801a      	strh	r2, [r3, #0]
 800d622:	e073      	b.n	800d70c <USB_EPStartXfer+0xcfa>
 800d624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d628:	2b3e      	cmp	r3, #62	@ 0x3e
 800d62a:	d81c      	bhi.n	800d666 <USB_EPStartXfer+0xc54>
 800d62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d630:	085b      	lsrs	r3, r3, #1
 800d632:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d63a:	f003 0301 	and.w	r3, r3, #1
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d004      	beq.n	800d64c <USB_EPStartXfer+0xc3a>
 800d642:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d646:	3301      	adds	r3, #1
 800d648:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d64c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d64e:	881b      	ldrh	r3, [r3, #0]
 800d650:	b29a      	uxth	r2, r3
 800d652:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d656:	b29b      	uxth	r3, r3
 800d658:	029b      	lsls	r3, r3, #10
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	4313      	orrs	r3, r2
 800d65e:	b29a      	uxth	r2, r3
 800d660:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d662:	801a      	strh	r2, [r3, #0]
 800d664:	e052      	b.n	800d70c <USB_EPStartXfer+0xcfa>
 800d666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d66a:	095b      	lsrs	r3, r3, #5
 800d66c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d674:	f003 031f 	and.w	r3, r3, #31
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d104      	bne.n	800d686 <USB_EPStartXfer+0xc74>
 800d67c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d680:	3b01      	subs	r3, #1
 800d682:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d686:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d690:	b29b      	uxth	r3, r3
 800d692:	029b      	lsls	r3, r3, #10
 800d694:	b29b      	uxth	r3, r3
 800d696:	4313      	orrs	r3, r2
 800d698:	b29b      	uxth	r3, r3
 800d69a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d69e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6a6:	801a      	strh	r2, [r3, #0]
 800d6a8:	e030      	b.n	800d70c <USB_EPStartXfer+0xcfa>
 800d6aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	785b      	ldrb	r3, [r3, #1]
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d128      	bne.n	800d70c <USB_EPStartXfer+0xcfa>
 800d6ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d6c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	461a      	mov	r2, r3
 800d6da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d6de:	4413      	add	r3, r2
 800d6e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d6e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	00da      	lsls	r2, r3, #3
 800d6f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d6f6:	4413      	add	r3, r2
 800d6f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d6fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d704:	b29a      	uxth	r2, r3
 800d706:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d70a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d70c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	891b      	ldrh	r3, [r3, #8]
 800d718:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d71c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6959      	ldr	r1, [r3, #20]
 800d728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d732:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d736:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d73a:	6800      	ldr	r0, [r0, #0]
 800d73c:	f000 fe55 	bl	800e3ea <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d744:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d74e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	4413      	add	r3, r2
 800d75a:	881b      	ldrh	r3, [r3, #0]
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d762:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d766:	817b      	strh	r3, [r7, #10]
 800d768:	897b      	ldrh	r3, [r7, #10]
 800d76a:	f083 0310 	eor.w	r3, r3, #16
 800d76e:	817b      	strh	r3, [r7, #10]
 800d770:	897b      	ldrh	r3, [r7, #10]
 800d772:	f083 0320 	eor.w	r3, r3, #32
 800d776:	817b      	strh	r3, [r7, #10]
 800d778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d77c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	009b      	lsls	r3, r3, #2
 800d790:	441a      	add	r2, r3
 800d792:	897b      	ldrh	r3, [r7, #10]
 800d794:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d798:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d79c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	8013      	strh	r3, [r2, #0]
 800d7a8:	f000 bcdf 	b.w	800e16a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d7ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	7b1b      	ldrb	r3, [r3, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	f040 80bc 	bne.w	800d936 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d7be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	699a      	ldr	r2, [r3, #24]
 800d7ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	691b      	ldr	r3, [r3, #16]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d917      	bls.n	800d80a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d7da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	691b      	ldr	r3, [r3, #16]
 800d7e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800d7ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	699a      	ldr	r2, [r3, #24]
 800d7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7fa:	1ad2      	subs	r2, r2, r3
 800d7fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	619a      	str	r2, [r3, #24]
 800d808:	e00e      	b.n	800d828 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d80a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d80e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	699b      	ldr	r3, [r3, #24]
 800d816:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800d81a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d81e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2200      	movs	r2, #0
 800d826:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d82c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d83a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d844:	b29b      	uxth	r3, r3
 800d846:	461a      	mov	r2, r3
 800d848:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d84c:	4413      	add	r3, r2
 800d84e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	00da      	lsls	r2, r3, #3
 800d860:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d864:	4413      	add	r3, r2
 800d866:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d86a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d86e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d872:	881b      	ldrh	r3, [r3, #0]
 800d874:	b29b      	uxth	r3, r3
 800d876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d87a:	b29a      	uxth	r2, r3
 800d87c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d880:	801a      	strh	r2, [r3, #0]
 800d882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d886:	2b00      	cmp	r3, #0
 800d888:	d10d      	bne.n	800d8a6 <USB_EPStartXfer+0xe94>
 800d88a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d88e:	881b      	ldrh	r3, [r3, #0]
 800d890:	b29b      	uxth	r3, r3
 800d892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d8a0:	801a      	strh	r2, [r3, #0]
 800d8a2:	f000 bc28 	b.w	800e0f6 <USB_EPStartXfer+0x16e4>
 800d8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8aa:	2b3e      	cmp	r3, #62	@ 0x3e
 800d8ac:	d81f      	bhi.n	800d8ee <USB_EPStartXfer+0xedc>
 800d8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8b2:	085b      	lsrs	r3, r3, #1
 800d8b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8bc:	f003 0301 	and.w	r3, r3, #1
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d004      	beq.n	800d8ce <USB_EPStartXfer+0xebc>
 800d8c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d8ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d8d2:	881b      	ldrh	r3, [r3, #0]
 800d8d4:	b29a      	uxth	r2, r3
 800d8d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	029b      	lsls	r3, r3, #10
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d8e8:	801a      	strh	r2, [r3, #0]
 800d8ea:	f000 bc04 	b.w	800e0f6 <USB_EPStartXfer+0x16e4>
 800d8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8f2:	095b      	lsrs	r3, r3, #5
 800d8f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8fc:	f003 031f 	and.w	r3, r3, #31
 800d900:	2b00      	cmp	r3, #0
 800d902:	d104      	bne.n	800d90e <USB_EPStartXfer+0xefc>
 800d904:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d908:	3b01      	subs	r3, #1
 800d90a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d90e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d912:	881b      	ldrh	r3, [r3, #0]
 800d914:	b29a      	uxth	r2, r3
 800d916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	029b      	lsls	r3, r3, #10
 800d91e:	b29b      	uxth	r3, r3
 800d920:	4313      	orrs	r3, r2
 800d922:	b29b      	uxth	r3, r3
 800d924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d92c:	b29a      	uxth	r2, r3
 800d92e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d932:	801a      	strh	r2, [r3, #0]
 800d934:	e3df      	b.n	800e0f6 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d93a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	78db      	ldrb	r3, [r3, #3]
 800d942:	2b02      	cmp	r3, #2
 800d944:	f040 8218 	bne.w	800dd78 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d94c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	785b      	ldrb	r3, [r3, #1]
 800d954:	2b00      	cmp	r3, #0
 800d956:	f040 809d 	bne.w	800da94 <USB_EPStartXfer+0x1082>
 800d95a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d95e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d96c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d976:	b29b      	uxth	r3, r3
 800d978:	461a      	mov	r2, r3
 800d97a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d97e:	4413      	add	r3, r2
 800d980:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	781b      	ldrb	r3, [r3, #0]
 800d990:	00da      	lsls	r2, r3, #3
 800d992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d996:	4413      	add	r3, r2
 800d998:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d99c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d9a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9a4:	881b      	ldrh	r3, [r3, #0]
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9b2:	801a      	strh	r2, [r3, #0]
 800d9b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	691b      	ldr	r3, [r3, #16]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d10c      	bne.n	800d9de <USB_EPStartXfer+0xfcc>
 800d9c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9c8:	881b      	ldrh	r3, [r3, #0]
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9da:	801a      	strh	r2, [r3, #0]
 800d9dc:	e08f      	b.n	800dafe <USB_EPStartXfer+0x10ec>
 800d9de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	2b3e      	cmp	r3, #62	@ 0x3e
 800d9ec:	d826      	bhi.n	800da3c <USB_EPStartXfer+0x102a>
 800d9ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	691b      	ldr	r3, [r3, #16]
 800d9fa:	085b      	lsrs	r3, r3, #1
 800d9fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800da00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	691b      	ldr	r3, [r3, #16]
 800da0c:	f003 0301 	and.w	r3, r3, #1
 800da10:	2b00      	cmp	r3, #0
 800da12:	d004      	beq.n	800da1e <USB_EPStartXfer+0x100c>
 800da14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da18:	3301      	adds	r3, #1
 800da1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800da1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da22:	881b      	ldrh	r3, [r3, #0]
 800da24:	b29a      	uxth	r2, r3
 800da26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	029b      	lsls	r3, r3, #10
 800da2e:	b29b      	uxth	r3, r3
 800da30:	4313      	orrs	r3, r2
 800da32:	b29a      	uxth	r2, r3
 800da34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da38:	801a      	strh	r2, [r3, #0]
 800da3a:	e060      	b.n	800dafe <USB_EPStartXfer+0x10ec>
 800da3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	691b      	ldr	r3, [r3, #16]
 800da48:	095b      	lsrs	r3, r3, #5
 800da4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800da4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	691b      	ldr	r3, [r3, #16]
 800da5a:	f003 031f 	and.w	r3, r3, #31
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d104      	bne.n	800da6c <USB_EPStartXfer+0x105a>
 800da62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da66:	3b01      	subs	r3, #1
 800da68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800da6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da70:	881b      	ldrh	r3, [r3, #0]
 800da72:	b29a      	uxth	r2, r3
 800da74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da78:	b29b      	uxth	r3, r3
 800da7a:	029b      	lsls	r3, r3, #10
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	4313      	orrs	r3, r2
 800da80:	b29b      	uxth	r3, r3
 800da82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da8a:	b29a      	uxth	r2, r3
 800da8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da90:	801a      	strh	r2, [r3, #0]
 800da92:	e034      	b.n	800dafe <USB_EPStartXfer+0x10ec>
 800da94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	785b      	ldrb	r3, [r3, #1]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d12c      	bne.n	800dafe <USB_EPStartXfer+0x10ec>
 800daa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dab6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	461a      	mov	r2, r3
 800dac4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dac8:	4413      	add	r3, r2
 800daca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	00da      	lsls	r2, r3, #3
 800dadc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dae0:	4413      	add	r3, r2
 800dae2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dae6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800daea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	691b      	ldr	r3, [r3, #16]
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800dafc:	801a      	strh	r2, [r3, #0]
 800dafe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800db0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	785b      	ldrb	r3, [r3, #1]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	f040 809d 	bne.w	800dc58 <USB_EPStartXfer+0x1246>
 800db1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800db2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	461a      	mov	r2, r3
 800db3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800db42:	4413      	add	r3, r2
 800db44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800db48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	00da      	lsls	r2, r3, #3
 800db56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800db5a:	4413      	add	r3, r2
 800db5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800db60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800db64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db68:	881b      	ldrh	r3, [r3, #0]
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db70:	b29a      	uxth	r2, r3
 800db72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db76:	801a      	strh	r2, [r3, #0]
 800db78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	691b      	ldr	r3, [r3, #16]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d10c      	bne.n	800dba2 <USB_EPStartXfer+0x1190>
 800db88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db8c:	881b      	ldrh	r3, [r3, #0]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db98:	b29a      	uxth	r2, r3
 800db9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db9e:	801a      	strh	r2, [r3, #0]
 800dba0:	e088      	b.n	800dcb4 <USB_EPStartXfer+0x12a2>
 800dba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	2b3e      	cmp	r3, #62	@ 0x3e
 800dbb0:	d826      	bhi.n	800dc00 <USB_EPStartXfer+0x11ee>
 800dbb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	691b      	ldr	r3, [r3, #16]
 800dbbe:	085b      	lsrs	r3, r3, #1
 800dbc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dbc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	691b      	ldr	r3, [r3, #16]
 800dbd0:	f003 0301 	and.w	r3, r3, #1
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d004      	beq.n	800dbe2 <USB_EPStartXfer+0x11d0>
 800dbd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dbdc:	3301      	adds	r3, #1
 800dbde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dbe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dbe6:	881b      	ldrh	r3, [r3, #0]
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	029b      	lsls	r3, r3, #10
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	b29a      	uxth	r2, r3
 800dbf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dbfc:	801a      	strh	r2, [r3, #0]
 800dbfe:	e059      	b.n	800dcb4 <USB_EPStartXfer+0x12a2>
 800dc00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	691b      	ldr	r3, [r3, #16]
 800dc0c:	095b      	lsrs	r3, r3, #5
 800dc0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dc12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	691b      	ldr	r3, [r3, #16]
 800dc1e:	f003 031f 	and.w	r3, r3, #31
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d104      	bne.n	800dc30 <USB_EPStartXfer+0x121e>
 800dc26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dc30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dc34:	881b      	ldrh	r3, [r3, #0]
 800dc36:	b29a      	uxth	r2, r3
 800dc38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	029b      	lsls	r3, r3, #10
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	4313      	orrs	r3, r2
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc4e:	b29a      	uxth	r2, r3
 800dc50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dc54:	801a      	strh	r2, [r3, #0]
 800dc56:	e02d      	b.n	800dcb4 <USB_EPStartXfer+0x12a2>
 800dc58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	785b      	ldrb	r3, [r3, #1]
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d125      	bne.n	800dcb4 <USB_EPStartXfer+0x12a2>
 800dc68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	461a      	mov	r2, r3
 800dc7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dc7e:	4413      	add	r3, r2
 800dc80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dc84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	00da      	lsls	r2, r3, #3
 800dc92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dc96:	4413      	add	r3, r2
 800dc98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dc9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	691b      	ldr	r3, [r3, #16]
 800dcac:	b29a      	uxth	r2, r3
 800dcae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dcb2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800dcb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	69db      	ldr	r3, [r3, #28]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f000 8218 	beq.w	800e0f6 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800dcc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	4413      	add	r3, r2
 800dce0:	881b      	ldrh	r3, [r3, #0]
 800dce2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dce6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dcea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d005      	beq.n	800dcfe <USB_EPStartXfer+0x12ec>
 800dcf2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dcf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10d      	bne.n	800dd1a <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dcfe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dd02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f040 81f5 	bne.w	800e0f6 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dd0c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dd10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f040 81ee 	bne.w	800e0f6 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800dd1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	009b      	lsls	r3, r3, #2
 800dd32:	4413      	add	r3, r2
 800dd34:	881b      	ldrh	r3, [r3, #0]
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd40:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800dd44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	009b      	lsls	r3, r3, #2
 800dd5c:	441a      	add	r2, r3
 800dd5e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800dd62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	8013      	strh	r3, [r2, #0]
 800dd76:	e1be      	b.n	800e0f6 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800dd78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	78db      	ldrb	r3, [r3, #3]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	f040 81b4 	bne.w	800e0f2 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800dd8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	699a      	ldr	r2, [r3, #24]
 800dd96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	691b      	ldr	r3, [r3, #16]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d917      	bls.n	800ddd6 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800dda6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800ddb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	699a      	ldr	r2, [r3, #24]
 800ddc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddc6:	1ad2      	subs	r2, r2, r3
 800ddc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	619a      	str	r2, [r3, #24]
 800ddd4:	e00e      	b.n	800ddf4 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800ddd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	699b      	ldr	r3, [r3, #24]
 800dde2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800dde6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ddf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	785b      	ldrb	r3, [r3, #1]
 800de00:	2b00      	cmp	r3, #0
 800de02:	f040 8085 	bne.w	800df10 <USB_EPStartXfer+0x14fe>
 800de06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800de14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de22:	b29b      	uxth	r3, r3
 800de24:	461a      	mov	r2, r3
 800de26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800de2a:	4413      	add	r3, r2
 800de2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800de30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	00da      	lsls	r2, r3, #3
 800de3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800de42:	4413      	add	r3, r2
 800de44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800de48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800de4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800de50:	881b      	ldrh	r3, [r3, #0]
 800de52:	b29b      	uxth	r3, r3
 800de54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de58:	b29a      	uxth	r2, r3
 800de5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800de5e:	801a      	strh	r2, [r3, #0]
 800de60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de64:	2b00      	cmp	r3, #0
 800de66:	d10c      	bne.n	800de82 <USB_EPStartXfer+0x1470>
 800de68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800de6c:	881b      	ldrh	r3, [r3, #0]
 800de6e:	b29b      	uxth	r3, r3
 800de70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de78:	b29a      	uxth	r2, r3
 800de7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800de7e:	801a      	strh	r2, [r3, #0]
 800de80:	e077      	b.n	800df72 <USB_EPStartXfer+0x1560>
 800de82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de86:	2b3e      	cmp	r3, #62	@ 0x3e
 800de88:	d81e      	bhi.n	800dec8 <USB_EPStartXfer+0x14b6>
 800de8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de8e:	085b      	lsrs	r3, r3, #1
 800de90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800de94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de98:	f003 0301 	and.w	r3, r3, #1
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d004      	beq.n	800deaa <USB_EPStartXfer+0x1498>
 800dea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dea4:	3301      	adds	r3, #1
 800dea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800deaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800deae:	881b      	ldrh	r3, [r3, #0]
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	029b      	lsls	r3, r3, #10
 800deba:	b29b      	uxth	r3, r3
 800debc:	4313      	orrs	r3, r2
 800debe:	b29a      	uxth	r2, r3
 800dec0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dec4:	801a      	strh	r2, [r3, #0]
 800dec6:	e054      	b.n	800df72 <USB_EPStartXfer+0x1560>
 800dec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800decc:	095b      	lsrs	r3, r3, #5
 800dece:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ded2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ded6:	f003 031f 	and.w	r3, r3, #31
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d104      	bne.n	800dee8 <USB_EPStartXfer+0x14d6>
 800dede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dee2:	3b01      	subs	r3, #1
 800dee4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dee8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800deec:	881b      	ldrh	r3, [r3, #0]
 800deee:	b29a      	uxth	r2, r3
 800def0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800def4:	b29b      	uxth	r3, r3
 800def6:	029b      	lsls	r3, r3, #10
 800def8:	b29b      	uxth	r3, r3
 800defa:	4313      	orrs	r3, r2
 800defc:	b29b      	uxth	r3, r3
 800defe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df06:	b29a      	uxth	r2, r3
 800df08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800df0c:	801a      	strh	r2, [r3, #0]
 800df0e:	e030      	b.n	800df72 <USB_EPStartXfer+0x1560>
 800df10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	785b      	ldrb	r3, [r3, #1]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d128      	bne.n	800df72 <USB_EPStartXfer+0x1560>
 800df20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800df2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	461a      	mov	r2, r3
 800df40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df44:	4413      	add	r3, r2
 800df46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800df4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	00da      	lsls	r2, r3, #3
 800df58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df5c:	4413      	add	r3, r2
 800df5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800df62:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800df66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800df70:	801a      	strh	r2, [r3, #0]
 800df72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800df80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	785b      	ldrb	r3, [r3, #1]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f040 8085 	bne.w	800e09c <USB_EPStartXfer+0x168a>
 800df92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800dfa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800dfb6:	4413      	add	r3, r2
 800dfb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800dfbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	00da      	lsls	r2, r3, #3
 800dfca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800dfce:	4413      	add	r3, r2
 800dfd0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dfd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dfd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dfdc:	881b      	ldrh	r3, [r3, #0]
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dfe4:	b29a      	uxth	r2, r3
 800dfe6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dfea:	801a      	strh	r2, [r3, #0]
 800dfec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d10c      	bne.n	800e00e <USB_EPStartXfer+0x15fc>
 800dff4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dff8:	881b      	ldrh	r3, [r3, #0]
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e004:	b29a      	uxth	r2, r3
 800e006:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e00a:	801a      	strh	r2, [r3, #0]
 800e00c:	e073      	b.n	800e0f6 <USB_EPStartXfer+0x16e4>
 800e00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e012:	2b3e      	cmp	r3, #62	@ 0x3e
 800e014:	d81e      	bhi.n	800e054 <USB_EPStartXfer+0x1642>
 800e016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e01a:	085b      	lsrs	r3, r3, #1
 800e01c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e024:	f003 0301 	and.w	r3, r3, #1
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d004      	beq.n	800e036 <USB_EPStartXfer+0x1624>
 800e02c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e030:	3301      	adds	r3, #1
 800e032:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e036:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e03a:	881b      	ldrh	r3, [r3, #0]
 800e03c:	b29a      	uxth	r2, r3
 800e03e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e042:	b29b      	uxth	r3, r3
 800e044:	029b      	lsls	r3, r3, #10
 800e046:	b29b      	uxth	r3, r3
 800e048:	4313      	orrs	r3, r2
 800e04a:	b29a      	uxth	r2, r3
 800e04c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e050:	801a      	strh	r2, [r3, #0]
 800e052:	e050      	b.n	800e0f6 <USB_EPStartXfer+0x16e4>
 800e054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e058:	095b      	lsrs	r3, r3, #5
 800e05a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e062:	f003 031f 	and.w	r3, r3, #31
 800e066:	2b00      	cmp	r3, #0
 800e068:	d104      	bne.n	800e074 <USB_EPStartXfer+0x1662>
 800e06a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e06e:	3b01      	subs	r3, #1
 800e070:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e074:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e078:	881b      	ldrh	r3, [r3, #0]
 800e07a:	b29a      	uxth	r2, r3
 800e07c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e080:	b29b      	uxth	r3, r3
 800e082:	029b      	lsls	r3, r3, #10
 800e084:	b29b      	uxth	r3, r3
 800e086:	4313      	orrs	r3, r2
 800e088:	b29b      	uxth	r3, r3
 800e08a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e08e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e092:	b29a      	uxth	r2, r3
 800e094:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e098:	801a      	strh	r2, [r3, #0]
 800e09a:	e02c      	b.n	800e0f6 <USB_EPStartXfer+0x16e4>
 800e09c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	785b      	ldrb	r3, [r3, #1]
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d124      	bne.n	800e0f6 <USB_EPStartXfer+0x16e4>
 800e0ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	461a      	mov	r2, r3
 800e0be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e0c2:	4413      	add	r3, r2
 800e0c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e0c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	00da      	lsls	r2, r3, #3
 800e0d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e0da:	4413      	add	r3, r2
 800e0dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e0e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0e8:	b29a      	uxth	r2, r3
 800e0ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e0ee:	801a      	strh	r2, [r3, #0]
 800e0f0:	e001      	b.n	800e0f6 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	e03a      	b.n	800e16c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e0f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	4413      	add	r3, r2
 800e110:	881b      	ldrh	r3, [r3, #0]
 800e112:	b29b      	uxth	r3, r3
 800e114:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e11c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e120:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e124:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e128:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e12c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e130:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e134:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e13c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	441a      	add	r2, r3
 800e152:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e156:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e15a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e15e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e166:	b29b      	uxth	r3, r3
 800e168:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e16a:	2300      	movs	r3, #0
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e176:	b480      	push	{r7}
 800e178:	b085      	sub	sp, #20
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
 800e17e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	785b      	ldrb	r3, [r3, #1]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d020      	beq.n	800e1ca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	4413      	add	r3, r2
 800e192:	881b      	ldrh	r3, [r3, #0]
 800e194:	b29b      	uxth	r3, r3
 800e196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e19a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e19e:	81bb      	strh	r3, [r7, #12]
 800e1a0:	89bb      	ldrh	r3, [r7, #12]
 800e1a2:	f083 0310 	eor.w	r3, r3, #16
 800e1a6:	81bb      	strh	r3, [r7, #12]
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	009b      	lsls	r3, r3, #2
 800e1b0:	441a      	add	r2, r3
 800e1b2:	89bb      	ldrh	r3, [r7, #12]
 800e1b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	8013      	strh	r3, [r2, #0]
 800e1c8:	e01f      	b.n	800e20a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	009b      	lsls	r3, r3, #2
 800e1d2:	4413      	add	r3, r2
 800e1d4:	881b      	ldrh	r3, [r3, #0]
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e1dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1e0:	81fb      	strh	r3, [r7, #14]
 800e1e2:	89fb      	ldrh	r3, [r7, #14]
 800e1e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e1e8:	81fb      	strh	r3, [r7, #14]
 800e1ea:	687a      	ldr	r2, [r7, #4]
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	009b      	lsls	r3, r3, #2
 800e1f2:	441a      	add	r2, r3
 800e1f4:	89fb      	ldrh	r3, [r7, #14]
 800e1f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e206:	b29b      	uxth	r3, r3
 800e208:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e20a:	2300      	movs	r3, #0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3714      	adds	r7, #20
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e218:	b480      	push	{r7}
 800e21a:	b087      	sub	sp, #28
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	7b1b      	ldrb	r3, [r3, #12]
 800e226:	2b00      	cmp	r3, #0
 800e228:	f040 809d 	bne.w	800e366 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	785b      	ldrb	r3, [r3, #1]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d04c      	beq.n	800e2ce <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	009b      	lsls	r3, r3, #2
 800e23c:	4413      	add	r3, r2
 800e23e:	881b      	ldrh	r3, [r3, #0]
 800e240:	823b      	strh	r3, [r7, #16]
 800e242:	8a3b      	ldrh	r3, [r7, #16]
 800e244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d01b      	beq.n	800e284 <USB_EPClearStall+0x6c>
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	4413      	add	r3, r2
 800e256:	881b      	ldrh	r3, [r3, #0]
 800e258:	b29b      	uxth	r3, r3
 800e25a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e25e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e262:	81fb      	strh	r3, [r7, #14]
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	009b      	lsls	r3, r3, #2
 800e26c:	441a      	add	r2, r3
 800e26e:	89fb      	ldrh	r3, [r7, #14]
 800e270:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e274:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e278:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e27c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e280:	b29b      	uxth	r3, r3
 800e282:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	78db      	ldrb	r3, [r3, #3]
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d06c      	beq.n	800e366 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	4413      	add	r3, r2
 800e296:	881b      	ldrh	r3, [r3, #0]
 800e298:	b29b      	uxth	r3, r3
 800e29a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e29e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e2a2:	81bb      	strh	r3, [r7, #12]
 800e2a4:	89bb      	ldrh	r3, [r7, #12]
 800e2a6:	f083 0320 	eor.w	r3, r3, #32
 800e2aa:	81bb      	strh	r3, [r7, #12]
 800e2ac:	687a      	ldr	r2, [r7, #4]
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	441a      	add	r2, r3
 800e2b6:	89bb      	ldrh	r3, [r7, #12]
 800e2b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e2bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e2c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	8013      	strh	r3, [r2, #0]
 800e2cc:	e04b      	b.n	800e366 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	4413      	add	r3, r2
 800e2d8:	881b      	ldrh	r3, [r3, #0]
 800e2da:	82fb      	strh	r3, [r7, #22]
 800e2dc:	8afb      	ldrh	r3, [r7, #22]
 800e2de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d01b      	beq.n	800e31e <USB_EPClearStall+0x106>
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	009b      	lsls	r3, r3, #2
 800e2ee:	4413      	add	r3, r2
 800e2f0:	881b      	ldrh	r3, [r3, #0]
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2fc:	82bb      	strh	r3, [r7, #20]
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	441a      	add	r2, r3
 800e308:	8abb      	ldrh	r3, [r7, #20]
 800e30a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e30e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e312:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4413      	add	r3, r2
 800e328:	881b      	ldrh	r3, [r3, #0]
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e334:	827b      	strh	r3, [r7, #18]
 800e336:	8a7b      	ldrh	r3, [r7, #18]
 800e338:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e33c:	827b      	strh	r3, [r7, #18]
 800e33e:	8a7b      	ldrh	r3, [r7, #18]
 800e340:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e344:	827b      	strh	r3, [r7, #18]
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	009b      	lsls	r3, r3, #2
 800e34e:	441a      	add	r2, r3
 800e350:	8a7b      	ldrh	r3, [r7, #18]
 800e352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e35a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e35e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e362:	b29b      	uxth	r3, r3
 800e364:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	371c      	adds	r7, #28
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr

0800e374 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	460b      	mov	r3, r1
 800e37e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e380:	78fb      	ldrb	r3, [r7, #3]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d103      	bne.n	800e38e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2280      	movs	r2, #128	@ 0x80
 800e38a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e38e:	2300      	movs	r3, #0
}
 800e390:	4618      	mov	r0, r3
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3b4:	b29a      	uxth	r2, r3
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e3bc:	2300      	movs	r3, #0
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	370c      	adds	r7, #12
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c8:	4770      	bx	lr

0800e3ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e3ca:	b480      	push	{r7}
 800e3cc:	b085      	sub	sp, #20
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3714      	adds	r7, #20
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr

0800e3ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e3ea:	b480      	push	{r7}
 800e3ec:	b08b      	sub	sp, #44	@ 0x2c
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	60f8      	str	r0, [r7, #12]
 800e3f2:	60b9      	str	r1, [r7, #8]
 800e3f4:	4611      	mov	r1, r2
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	80fb      	strh	r3, [r7, #6]
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e400:	88bb      	ldrh	r3, [r7, #4]
 800e402:	3301      	adds	r3, #1
 800e404:	085b      	lsrs	r3, r3, #1
 800e406:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e410:	88fa      	ldrh	r2, [r7, #6]
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	4413      	add	r3, r2
 800e416:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e41a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e41c:	69bb      	ldr	r3, [r7, #24]
 800e41e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e420:	e01b      	b.n	800e45a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e422:	69fb      	ldr	r3, [r7, #28]
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e428:	69fb      	ldr	r3, [r7, #28]
 800e42a:	3301      	adds	r3, #1
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	021b      	lsls	r3, r3, #8
 800e430:	b21a      	sxth	r2, r3
 800e432:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e436:	4313      	orrs	r3, r2
 800e438:	b21b      	sxth	r3, r3
 800e43a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e43c:	6a3b      	ldr	r3, [r7, #32]
 800e43e:	8a7a      	ldrh	r2, [r7, #18]
 800e440:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e442:	6a3b      	ldr	r3, [r7, #32]
 800e444:	3302      	adds	r3, #2
 800e446:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e448:	69fb      	ldr	r3, [r7, #28]
 800e44a:	3301      	adds	r3, #1
 800e44c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e44e:	69fb      	ldr	r3, [r7, #28]
 800e450:	3301      	adds	r3, #1
 800e452:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e456:	3b01      	subs	r3, #1
 800e458:	627b      	str	r3, [r7, #36]	@ 0x24
 800e45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d1e0      	bne.n	800e422 <USB_WritePMA+0x38>
  }
}
 800e460:	bf00      	nop
 800e462:	bf00      	nop
 800e464:	372c      	adds	r7, #44	@ 0x2c
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr

0800e46e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e46e:	b480      	push	{r7}
 800e470:	b08b      	sub	sp, #44	@ 0x2c
 800e472:	af00      	add	r7, sp, #0
 800e474:	60f8      	str	r0, [r7, #12]
 800e476:	60b9      	str	r1, [r7, #8]
 800e478:	4611      	mov	r1, r2
 800e47a:	461a      	mov	r2, r3
 800e47c:	460b      	mov	r3, r1
 800e47e:	80fb      	strh	r3, [r7, #6]
 800e480:	4613      	mov	r3, r2
 800e482:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e484:	88bb      	ldrh	r3, [r7, #4]
 800e486:	085b      	lsrs	r3, r3, #1
 800e488:	b29b      	uxth	r3, r3
 800e48a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e494:	88fa      	ldrh	r2, [r7, #6]
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	4413      	add	r3, r2
 800e49a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e49e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e4a0:	69bb      	ldr	r3, [r7, #24]
 800e4a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4a4:	e018      	b.n	800e4d8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e4a6:	6a3b      	ldr	r3, [r7, #32]
 800e4a8:	881b      	ldrh	r3, [r3, #0]
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e4ae:	6a3b      	ldr	r3, [r7, #32]
 800e4b0:	3302      	adds	r3, #2
 800e4b2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	b2da      	uxtb	r2, r3
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e4bc:	69fb      	ldr	r3, [r7, #28]
 800e4be:	3301      	adds	r3, #1
 800e4c0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	0a1b      	lsrs	r3, r3, #8
 800e4c6:	b2da      	uxtb	r2, r3
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d4:	3b01      	subs	r3, #1
 800e4d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d1e3      	bne.n	800e4a6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e4de:	88bb      	ldrh	r3, [r7, #4]
 800e4e0:	f003 0301 	and.w	r3, r3, #1
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d007      	beq.n	800e4fa <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e4ea:	6a3b      	ldr	r3, [r7, #32]
 800e4ec:	881b      	ldrh	r3, [r3, #0]
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	b2da      	uxtb	r2, r3
 800e4f6:	69fb      	ldr	r3, [r7, #28]
 800e4f8:	701a      	strb	r2, [r3, #0]
  }
}
 800e4fa:	bf00      	nop
 800e4fc:	372c      	adds	r7, #44	@ 0x2c
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr

0800e506 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e506:	b580      	push	{r7, lr}
 800e508:	b084      	sub	sp, #16
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
 800e50e:	460b      	mov	r3, r1
 800e510:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e512:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e516:	f002 f90f 	bl	8010738 <USBD_static_malloc>
 800e51a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d105      	bne.n	800e52e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800e52a:	2302      	movs	r3, #2
 800e52c:	e066      	b.n	800e5fc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	68fa      	ldr	r2, [r7, #12]
 800e532:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	7c1b      	ldrb	r3, [r3, #16]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d119      	bne.n	800e572 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e53e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e542:	2202      	movs	r2, #2
 800e544:	2181      	movs	r1, #129	@ 0x81
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f001 ff9d 	bl	8010486 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2201      	movs	r2, #1
 800e550:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e552:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e556:	2202      	movs	r2, #2
 800e558:	2101      	movs	r1, #1
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f001 ff93 	bl	8010486 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2201      	movs	r2, #1
 800e564:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2210      	movs	r2, #16
 800e56c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800e570:	e016      	b.n	800e5a0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e572:	2340      	movs	r3, #64	@ 0x40
 800e574:	2202      	movs	r2, #2
 800e576:	2181      	movs	r1, #129	@ 0x81
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f001 ff84 	bl	8010486 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2201      	movs	r2, #1
 800e582:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e584:	2340      	movs	r3, #64	@ 0x40
 800e586:	2202      	movs	r2, #2
 800e588:	2101      	movs	r1, #1
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f001 ff7b 	bl	8010486 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2201      	movs	r2, #1
 800e594:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2210      	movs	r2, #16
 800e59c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e5a0:	2308      	movs	r3, #8
 800e5a2:	2203      	movs	r2, #3
 800e5a4:	2182      	movs	r1, #130	@ 0x82
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f001 ff6d 	bl	8010486 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	7c1b      	ldrb	r3, [r3, #16]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d109      	bne.n	800e5ea <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e5dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e5e0:	2101      	movs	r1, #1
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f002 f83e 	bl	8010664 <USBD_LL_PrepareReceive>
 800e5e8:	e007      	b.n	800e5fa <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e5f0:	2340      	movs	r3, #64	@ 0x40
 800e5f2:	2101      	movs	r1, #1
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f002 f835 	bl	8010664 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e5fa:	2300      	movs	r3, #0
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	460b      	mov	r3, r1
 800e60e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e610:	2181      	movs	r1, #129	@ 0x81
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f001 ff5d 	bl	80104d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e61e:	2101      	movs	r1, #1
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f001 ff56 	bl	80104d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2200      	movs	r2, #0
 800e62a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e62e:	2182      	movs	r1, #130	@ 0x82
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f001 ff4e 	bl	80104d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2200      	movs	r2, #0
 800e63a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2200      	movs	r2, #0
 800e642:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00e      	beq.n	800e66e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e660:	4618      	mov	r0, r3
 800e662:	f002 f877 	bl	8010754 <USBD_static_free>
    pdev->pClassData = NULL;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2200      	movs	r2, #0
 800e66a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e66e:	2300      	movs	r3, #0
}
 800e670:	4618      	mov	r0, r3
 800e672:	3708      	adds	r7, #8
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b086      	sub	sp, #24
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e688:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e68a:	2300      	movs	r3, #0
 800e68c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e68e:	2300      	movs	r3, #0
 800e690:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e692:	2300      	movs	r3, #0
 800e694:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d101      	bne.n	800e6a0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e69c:	2303      	movs	r3, #3
 800e69e:	e0af      	b.n	800e800 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d03f      	beq.n	800e72c <USBD_CDC_Setup+0xb4>
 800e6ac:	2b20      	cmp	r3, #32
 800e6ae:	f040 809f 	bne.w	800e7f0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	88db      	ldrh	r3, [r3, #6]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d02e      	beq.n	800e718 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	b25b      	sxtb	r3, r3
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	da16      	bge.n	800e6f2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e6ca:	689b      	ldr	r3, [r3, #8]
 800e6cc:	683a      	ldr	r2, [r7, #0]
 800e6ce:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e6d0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e6d2:	683a      	ldr	r2, [r7, #0]
 800e6d4:	88d2      	ldrh	r2, [r2, #6]
 800e6d6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	88db      	ldrh	r3, [r3, #6]
 800e6dc:	2b07      	cmp	r3, #7
 800e6de:	bf28      	it	cs
 800e6e0:	2307      	movcs	r3, #7
 800e6e2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	89fa      	ldrh	r2, [r7, #14]
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f001 facd 	bl	800fc8a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e6f0:	e085      	b.n	800e7fe <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	785a      	ldrb	r2, [r3, #1]
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	88db      	ldrh	r3, [r3, #6]
 800e700:	b2da      	uxtb	r2, r3
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e708:	6939      	ldr	r1, [r7, #16]
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	88db      	ldrh	r3, [r3, #6]
 800e70e:	461a      	mov	r2, r3
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f001 fae6 	bl	800fce2 <USBD_CtlPrepareRx>
      break;
 800e716:	e072      	b.n	800e7fe <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e71e:	689b      	ldr	r3, [r3, #8]
 800e720:	683a      	ldr	r2, [r7, #0]
 800e722:	7850      	ldrb	r0, [r2, #1]
 800e724:	2200      	movs	r2, #0
 800e726:	6839      	ldr	r1, [r7, #0]
 800e728:	4798      	blx	r3
      break;
 800e72a:	e068      	b.n	800e7fe <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	785b      	ldrb	r3, [r3, #1]
 800e730:	2b0b      	cmp	r3, #11
 800e732:	d852      	bhi.n	800e7da <USBD_CDC_Setup+0x162>
 800e734:	a201      	add	r2, pc, #4	@ (adr r2, 800e73c <USBD_CDC_Setup+0xc4>)
 800e736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e73a:	bf00      	nop
 800e73c:	0800e76d 	.word	0x0800e76d
 800e740:	0800e7e9 	.word	0x0800e7e9
 800e744:	0800e7db 	.word	0x0800e7db
 800e748:	0800e7db 	.word	0x0800e7db
 800e74c:	0800e7db 	.word	0x0800e7db
 800e750:	0800e7db 	.word	0x0800e7db
 800e754:	0800e7db 	.word	0x0800e7db
 800e758:	0800e7db 	.word	0x0800e7db
 800e75c:	0800e7db 	.word	0x0800e7db
 800e760:	0800e7db 	.word	0x0800e7db
 800e764:	0800e797 	.word	0x0800e797
 800e768:	0800e7c1 	.word	0x0800e7c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e772:	b2db      	uxtb	r3, r3
 800e774:	2b03      	cmp	r3, #3
 800e776:	d107      	bne.n	800e788 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e778:	f107 030a 	add.w	r3, r7, #10
 800e77c:	2202      	movs	r2, #2
 800e77e:	4619      	mov	r1, r3
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f001 fa82 	bl	800fc8a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e786:	e032      	b.n	800e7ee <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e788:	6839      	ldr	r1, [r7, #0]
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f001 fa0c 	bl	800fba8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e790:	2303      	movs	r3, #3
 800e792:	75fb      	strb	r3, [r7, #23]
          break;
 800e794:	e02b      	b.n	800e7ee <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	2b03      	cmp	r3, #3
 800e7a0:	d107      	bne.n	800e7b2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e7a2:	f107 030d 	add.w	r3, r7, #13
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f001 fa6d 	bl	800fc8a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e7b0:	e01d      	b.n	800e7ee <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e7b2:	6839      	ldr	r1, [r7, #0]
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f001 f9f7 	bl	800fba8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e7ba:	2303      	movs	r3, #3
 800e7bc:	75fb      	strb	r3, [r7, #23]
          break;
 800e7be:	e016      	b.n	800e7ee <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	2b03      	cmp	r3, #3
 800e7ca:	d00f      	beq.n	800e7ec <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e7cc:	6839      	ldr	r1, [r7, #0]
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f001 f9ea 	bl	800fba8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e7d4:	2303      	movs	r3, #3
 800e7d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e7d8:	e008      	b.n	800e7ec <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e7da:	6839      	ldr	r1, [r7, #0]
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f001 f9e3 	bl	800fba8 <USBD_CtlError>
          ret = USBD_FAIL;
 800e7e2:	2303      	movs	r3, #3
 800e7e4:	75fb      	strb	r3, [r7, #23]
          break;
 800e7e6:	e002      	b.n	800e7ee <USBD_CDC_Setup+0x176>
          break;
 800e7e8:	bf00      	nop
 800e7ea:	e008      	b.n	800e7fe <USBD_CDC_Setup+0x186>
          break;
 800e7ec:	bf00      	nop
      }
      break;
 800e7ee:	e006      	b.n	800e7fe <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e7f0:	6839      	ldr	r1, [r7, #0]
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f001 f9d8 	bl	800fba8 <USBD_CtlError>
      ret = USBD_FAIL;
 800e7f8:	2303      	movs	r3, #3
 800e7fa:	75fb      	strb	r3, [r7, #23]
      break;
 800e7fc:	bf00      	nop
  }

  return (uint8_t)ret;
 800e7fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800e800:	4618      	mov	r0, r3
 800e802:	3718      	adds	r7, #24
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	460b      	mov	r3, r1
 800e812:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e81a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e822:	2b00      	cmp	r3, #0
 800e824:	d101      	bne.n	800e82a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e826:	2303      	movs	r3, #3
 800e828:	e04f      	b.n	800e8ca <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e830:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e832:	78fa      	ldrb	r2, [r7, #3]
 800e834:	6879      	ldr	r1, [r7, #4]
 800e836:	4613      	mov	r3, r2
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	4413      	add	r3, r2
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	440b      	add	r3, r1
 800e840:	3318      	adds	r3, #24
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d029      	beq.n	800e89c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e848:	78fa      	ldrb	r2, [r7, #3]
 800e84a:	6879      	ldr	r1, [r7, #4]
 800e84c:	4613      	mov	r3, r2
 800e84e:	009b      	lsls	r3, r3, #2
 800e850:	4413      	add	r3, r2
 800e852:	009b      	lsls	r3, r3, #2
 800e854:	440b      	add	r3, r1
 800e856:	3318      	adds	r3, #24
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	78f9      	ldrb	r1, [r7, #3]
 800e85c:	68f8      	ldr	r0, [r7, #12]
 800e85e:	460b      	mov	r3, r1
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	440b      	add	r3, r1
 800e864:	00db      	lsls	r3, r3, #3
 800e866:	4403      	add	r3, r0
 800e868:	3320      	adds	r3, #32
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	fbb2 f1f3 	udiv	r1, r2, r3
 800e870:	fb01 f303 	mul.w	r3, r1, r3
 800e874:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e876:	2b00      	cmp	r3, #0
 800e878:	d110      	bne.n	800e89c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e87a:	78fa      	ldrb	r2, [r7, #3]
 800e87c:	6879      	ldr	r1, [r7, #4]
 800e87e:	4613      	mov	r3, r2
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	4413      	add	r3, r2
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	440b      	add	r3, r1
 800e888:	3318      	adds	r3, #24
 800e88a:	2200      	movs	r2, #0
 800e88c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e88e:	78f9      	ldrb	r1, [r7, #3]
 800e890:	2300      	movs	r3, #0
 800e892:	2200      	movs	r2, #0
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f001 fec4 	bl	8010622 <USBD_LL_Transmit>
 800e89a:	e015      	b.n	800e8c8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e8aa:	691b      	ldr	r3, [r3, #16]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d00b      	beq.n	800e8c8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e8b6:	691b      	ldr	r3, [r3, #16]
 800e8b8:	68ba      	ldr	r2, [r7, #8]
 800e8ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e8be:	68ba      	ldr	r2, [r7, #8]
 800e8c0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e8c4:	78fa      	ldrb	r2, [r7, #3]
 800e8c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e8c8:	2300      	movs	r3, #0
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e8d2:	b580      	push	{r7, lr}
 800e8d4:	b084      	sub	sp, #16
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	6078      	str	r0, [r7, #4]
 800e8da:	460b      	mov	r3, r1
 800e8dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e8e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d101      	bne.n	800e8f4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e8f0:	2303      	movs	r3, #3
 800e8f2:	e015      	b.n	800e920 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e8f4:	78fb      	ldrb	r3, [r7, #3]
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f001 fed4 	bl	80106a6 <USBD_LL_GetRxDataSize>
 800e8fe:	4602      	mov	r2, r0
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e90c:	68db      	ldr	r3, [r3, #12]
 800e90e:	68fa      	ldr	r2, [r7, #12]
 800e910:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e914:	68fa      	ldr	r2, [r7, #12]
 800e916:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e91a:	4611      	mov	r1, r2
 800e91c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e91e:	2300      	movs	r3, #0
}
 800e920:	4618      	mov	r0, r3
 800e922:	3710      	adds	r7, #16
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}

0800e928 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e936:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d101      	bne.n	800e942 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e93e:	2303      	movs	r3, #3
 800e940:	e01a      	b.n	800e978 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d014      	beq.n	800e976 <USBD_CDC_EP0_RxReady+0x4e>
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e952:	2bff      	cmp	r3, #255	@ 0xff
 800e954:	d00f      	beq.n	800e976 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	68fa      	ldr	r2, [r7, #12]
 800e960:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800e964:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e966:	68fa      	ldr	r2, [r7, #12]
 800e968:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e96c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	22ff      	movs	r2, #255	@ 0xff
 800e972:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e976:	2300      	movs	r3, #0
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3710      	adds	r7, #16
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}

0800e980 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e980:	b480      	push	{r7}
 800e982:	b083      	sub	sp, #12
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2243      	movs	r2, #67	@ 0x43
 800e98c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e98e:	4b03      	ldr	r3, [pc, #12]	@ (800e99c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e990:	4618      	mov	r0, r3
 800e992:	370c      	adds	r7, #12
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr
 800e99c:	200000d0 	.word	0x200000d0

0800e9a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b083      	sub	sp, #12
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2243      	movs	r2, #67	@ 0x43
 800e9ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e9ae:	4b03      	ldr	r3, [pc, #12]	@ (800e9bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	370c      	adds	r7, #12
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr
 800e9bc:	2000008c 	.word	0x2000008c

0800e9c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2243      	movs	r2, #67	@ 0x43
 800e9cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e9ce:	4b03      	ldr	r3, [pc, #12]	@ (800e9dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	370c      	adds	r7, #12
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr
 800e9dc:	20000114 	.word	0x20000114

0800e9e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b083      	sub	sp, #12
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	220a      	movs	r2, #10
 800e9ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e9ee:	4b03      	ldr	r3, [pc, #12]	@ (800e9fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr
 800e9fc:	20000048 	.word	0x20000048

0800ea00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d101      	bne.n	800ea14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ea10:	2303      	movs	r3, #3
 800ea12:	e004      	b.n	800ea1e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	683a      	ldr	r2, [r7, #0]
 800ea18:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800ea1c:	2300      	movs	r3, #0
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	370c      	adds	r7, #12
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr

0800ea2a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ea2a:	b480      	push	{r7}
 800ea2c:	b087      	sub	sp, #28
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	60f8      	str	r0, [r7, #12]
 800ea32:	60b9      	str	r1, [r7, #8]
 800ea34:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ea3c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d101      	bne.n	800ea48 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ea44:	2303      	movs	r3, #3
 800ea46:	e008      	b.n	800ea5a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	68ba      	ldr	r2, [r7, #8]
 800ea4c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	687a      	ldr	r2, [r7, #4]
 800ea54:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ea58:	2300      	movs	r3, #0
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	371c      	adds	r7, #28
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr

0800ea66 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ea66:	b480      	push	{r7}
 800ea68:	b085      	sub	sp, #20
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
 800ea6e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ea76:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d101      	bne.n	800ea82 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ea7e:	2303      	movs	r3, #3
 800ea80:	e004      	b.n	800ea8c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	683a      	ldr	r2, [r7, #0]
 800ea86:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ea8a:	2300      	movs	r3, #0
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3714      	adds	r7, #20
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr

0800ea98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eaa6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d101      	bne.n	800eaba <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eab6:	2303      	movs	r3, #3
 800eab8:	e01a      	b.n	800eaf0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d114      	bne.n	800eaee <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	2201      	movs	r2, #1
 800eac8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800eae2:	2181      	movs	r1, #129	@ 0x81
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f001 fd9c 	bl	8010622 <USBD_LL_Transmit>

    ret = USBD_OK;
 800eaea:	2300      	movs	r3, #0
 800eaec:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800eaee:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3710      	adds	r7, #16
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eb06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d101      	bne.n	800eb16 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800eb12:	2303      	movs	r3, #3
 800eb14:	e016      	b.n	800eb44 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	7c1b      	ldrb	r3, [r3, #16]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d109      	bne.n	800eb32 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eb24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eb28:	2101      	movs	r1, #1
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f001 fd9a 	bl	8010664 <USBD_LL_PrepareReceive>
 800eb30:	e007      	b.n	800eb42 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eb38:	2340      	movs	r3, #64	@ 0x40
 800eb3a:	2101      	movs	r1, #1
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f001 fd91 	bl	8010664 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eb42:	2300      	movs	r3, #0
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3710      	adds	r7, #16
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b086      	sub	sp, #24
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	60f8      	str	r0, [r7, #12]
 800eb54:	60b9      	str	r1, [r7, #8]
 800eb56:	4613      	mov	r3, r2
 800eb58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d101      	bne.n	800eb64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800eb60:	2303      	movs	r3, #3
 800eb62:	e01f      	b.n	800eba4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2200      	movs	r2, #0
 800eb78:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d003      	beq.n	800eb8a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	68ba      	ldr	r2, [r7, #8]
 800eb86:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	79fa      	ldrb	r2, [r7, #7]
 800eb96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	f001 fbf9 	bl	8010390 <USBD_LL_Init>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800eba2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3718      	adds	r7, #24
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d101      	bne.n	800ebc4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ebc0:	2303      	movs	r3, #3
 800ebc2:	e016      	b.n	800ebf2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	683a      	ldr	r2, [r7, #0]
 800ebc8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00b      	beq.n	800ebf0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebe0:	f107 020e 	add.w	r2, r7, #14
 800ebe4:	4610      	mov	r0, r2
 800ebe6:	4798      	blx	r3
 800ebe8:	4602      	mov	r2, r0
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b082      	sub	sp, #8
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f001 fc24 	bl	8010450 <USBD_LL_Start>
 800ec08:	4603      	mov	r3, r0
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}

0800ec12 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ec12:	b480      	push	{r7}
 800ec14:	b083      	sub	sp, #12
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec1a:	2300      	movs	r3, #0
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	370c      	adds	r7, #12
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr

0800ec28 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	460b      	mov	r3, r1
 800ec32:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ec34:	2303      	movs	r3, #3
 800ec36:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d009      	beq.n	800ec56 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	78fa      	ldrb	r2, [r7, #3]
 800ec4c:	4611      	mov	r1, r2
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	4798      	blx	r3
 800ec52:	4603      	mov	r3, r0
 800ec54:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ec56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3710      	adds	r7, #16
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	460b      	mov	r3, r1
 800ec6a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d007      	beq.n	800ec86 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	78fa      	ldrb	r2, [r7, #3]
 800ec80:	4611      	mov	r1, r2
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	4798      	blx	r3
  }

  return USBD_OK;
 800ec86:	2300      	movs	r3, #0
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3708      	adds	r7, #8
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eca0:	6839      	ldr	r1, [r7, #0]
 800eca2:	4618      	mov	r0, r3
 800eca4:	f000 ff46 	bl	800fb34 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2201      	movs	r2, #1
 800ecac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ecc4:	f003 031f 	and.w	r3, r3, #31
 800ecc8:	2b02      	cmp	r3, #2
 800ecca:	d01a      	beq.n	800ed02 <USBD_LL_SetupStage+0x72>
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	d822      	bhi.n	800ed16 <USBD_LL_SetupStage+0x86>
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d002      	beq.n	800ecda <USBD_LL_SetupStage+0x4a>
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d00a      	beq.n	800ecee <USBD_LL_SetupStage+0x5e>
 800ecd8:	e01d      	b.n	800ed16 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ece0:	4619      	mov	r1, r3
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f000 f9ee 	bl	800f0c4 <USBD_StdDevReq>
 800ece8:	4603      	mov	r3, r0
 800ecea:	73fb      	strb	r3, [r7, #15]
      break;
 800ecec:	e020      	b.n	800ed30 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f000 fa52 	bl	800f1a0 <USBD_StdItfReq>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	73fb      	strb	r3, [r7, #15]
      break;
 800ed00:	e016      	b.n	800ed30 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ed08:	4619      	mov	r1, r3
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f000 fa91 	bl	800f232 <USBD_StdEPReq>
 800ed10:	4603      	mov	r3, r0
 800ed12:	73fb      	strb	r3, [r7, #15]
      break;
 800ed14:	e00c      	b.n	800ed30 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ed1c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	4619      	mov	r1, r3
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f001 fbf3 	bl	8010510 <USBD_LL_StallEP>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ed2e:	bf00      	nop
  }

  return ret;
 800ed30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3710      	adds	r7, #16
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}

0800ed3a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b086      	sub	sp, #24
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	60f8      	str	r0, [r7, #12]
 800ed42:	460b      	mov	r3, r1
 800ed44:	607a      	str	r2, [r7, #4]
 800ed46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ed48:	7afb      	ldrb	r3, [r7, #11]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d138      	bne.n	800edc0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ed54:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ed5c:	2b03      	cmp	r3, #3
 800ed5e:	d14a      	bne.n	800edf6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	689a      	ldr	r2, [r3, #8]
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d913      	bls.n	800ed94 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	689a      	ldr	r2, [r3, #8]
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	1ad2      	subs	r2, r2, r3
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	68da      	ldr	r2, [r3, #12]
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	689b      	ldr	r3, [r3, #8]
 800ed82:	4293      	cmp	r3, r2
 800ed84:	bf28      	it	cs
 800ed86:	4613      	movcs	r3, r2
 800ed88:	461a      	mov	r2, r3
 800ed8a:	6879      	ldr	r1, [r7, #4]
 800ed8c:	68f8      	ldr	r0, [r7, #12]
 800ed8e:	f000 ffc5 	bl	800fd1c <USBD_CtlContinueRx>
 800ed92:	e030      	b.n	800edf6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed9a:	b2db      	uxtb	r3, r3
 800ed9c:	2b03      	cmp	r3, #3
 800ed9e:	d10b      	bne.n	800edb8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eda6:	691b      	ldr	r3, [r3, #16]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d005      	beq.n	800edb8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edb2:	691b      	ldr	r3, [r3, #16]
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f000 ffc0 	bl	800fd3e <USBD_CtlSendStatus>
 800edbe:	e01a      	b.n	800edf6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	2b03      	cmp	r3, #3
 800edca:	d114      	bne.n	800edf6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edd2:	699b      	ldr	r3, [r3, #24]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d00e      	beq.n	800edf6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edde:	699b      	ldr	r3, [r3, #24]
 800ede0:	7afa      	ldrb	r2, [r7, #11]
 800ede2:	4611      	mov	r1, r2
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	4798      	blx	r3
 800ede8:	4603      	mov	r3, r0
 800edea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800edec:	7dfb      	ldrb	r3, [r7, #23]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d001      	beq.n	800edf6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800edf2:	7dfb      	ldrb	r3, [r7, #23]
 800edf4:	e000      	b.n	800edf8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800edf6:	2300      	movs	r3, #0
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3718      	adds	r7, #24
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b086      	sub	sp, #24
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	460b      	mov	r3, r1
 800ee0a:	607a      	str	r2, [r7, #4]
 800ee0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ee0e:	7afb      	ldrb	r3, [r7, #11]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d16b      	bne.n	800eeec <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	3314      	adds	r3, #20
 800ee18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ee20:	2b02      	cmp	r3, #2
 800ee22:	d156      	bne.n	800eed2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ee24:	693b      	ldr	r3, [r7, #16]
 800ee26:	689a      	ldr	r2, [r3, #8]
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d914      	bls.n	800ee5a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	689a      	ldr	r2, [r3, #8]
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	1ad2      	subs	r2, r2, r3
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	461a      	mov	r2, r3
 800ee44:	6879      	ldr	r1, [r7, #4]
 800ee46:	68f8      	ldr	r0, [r7, #12]
 800ee48:	f000 ff3a 	bl	800fcc0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	2200      	movs	r2, #0
 800ee50:	2100      	movs	r1, #0
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f001 fc06 	bl	8010664 <USBD_LL_PrepareReceive>
 800ee58:	e03b      	b.n	800eed2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	68da      	ldr	r2, [r3, #12]
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	689b      	ldr	r3, [r3, #8]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d11c      	bne.n	800eea0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	685a      	ldr	r2, [r3, #4]
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d316      	bcc.n	800eea0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	685a      	ldr	r2, [r3, #4]
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d20f      	bcs.n	800eea0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ee80:	2200      	movs	r2, #0
 800ee82:	2100      	movs	r1, #0
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	f000 ff1b 	bl	800fcc0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee92:	2300      	movs	r3, #0
 800ee94:	2200      	movs	r2, #0
 800ee96:	2100      	movs	r1, #0
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	f001 fbe3 	bl	8010664 <USBD_LL_PrepareReceive>
 800ee9e:	e018      	b.n	800eed2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	2b03      	cmp	r3, #3
 800eeaa:	d10b      	bne.n	800eec4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eeb2:	68db      	ldr	r3, [r3, #12]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d005      	beq.n	800eec4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eebe:	68db      	ldr	r3, [r3, #12]
 800eec0:	68f8      	ldr	r0, [r7, #12]
 800eec2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eec4:	2180      	movs	r1, #128	@ 0x80
 800eec6:	68f8      	ldr	r0, [r7, #12]
 800eec8:	f001 fb22 	bl	8010510 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eecc:	68f8      	ldr	r0, [r7, #12]
 800eece:	f000 ff49 	bl	800fd64 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d122      	bne.n	800ef22 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800eedc:	68f8      	ldr	r0, [r7, #12]
 800eede:	f7ff fe98 	bl	800ec12 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2200      	movs	r2, #0
 800eee6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800eeea:	e01a      	b.n	800ef22 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eef2:	b2db      	uxtb	r3, r3
 800eef4:	2b03      	cmp	r3, #3
 800eef6:	d114      	bne.n	800ef22 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eefe:	695b      	ldr	r3, [r3, #20]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d00e      	beq.n	800ef22 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef0a:	695b      	ldr	r3, [r3, #20]
 800ef0c:	7afa      	ldrb	r2, [r7, #11]
 800ef0e:	4611      	mov	r1, r2
 800ef10:	68f8      	ldr	r0, [r7, #12]
 800ef12:	4798      	blx	r3
 800ef14:	4603      	mov	r3, r0
 800ef16:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ef18:	7dfb      	ldrb	r3, [r7, #23]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d001      	beq.n	800ef22 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ef1e:	7dfb      	ldrb	r3, [r7, #23]
 800ef20:	e000      	b.n	800ef24 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ef22:	2300      	movs	r3, #0
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3718      	adds	r7, #24
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}

0800ef2c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2201      	movs	r2, #1
 800ef38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2200      	movs	r2, #0
 800ef48:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d101      	bne.n	800ef60 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ef5c:	2303      	movs	r3, #3
 800ef5e:	e02f      	b.n	800efc0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d00f      	beq.n	800ef8a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d009      	beq.n	800ef8a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	6852      	ldr	r2, [r2, #4]
 800ef82:	b2d2      	uxtb	r2, r2
 800ef84:	4611      	mov	r1, r2
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef8a:	2340      	movs	r3, #64	@ 0x40
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	2100      	movs	r1, #0
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f001 fa78 	bl	8010486 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2201      	movs	r2, #1
 800ef9a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2240      	movs	r2, #64	@ 0x40
 800efa2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800efa6:	2340      	movs	r3, #64	@ 0x40
 800efa8:	2200      	movs	r2, #0
 800efaa:	2180      	movs	r1, #128	@ 0x80
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f001 fa6a 	bl	8010486 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2201      	movs	r2, #1
 800efb6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2240      	movs	r2, #64	@ 0x40
 800efbc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800efbe:	2300      	movs	r3, #0
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	3708      	adds	r7, #8
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}

0800efc8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800efc8:	b480      	push	{r7}
 800efca:	b083      	sub	sp, #12
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	460b      	mov	r3, r1
 800efd2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	78fa      	ldrb	r2, [r7, #3]
 800efd8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800efda:	2300      	movs	r3, #0
}
 800efdc:	4618      	mov	r0, r3
 800efde:	370c      	adds	r7, #12
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800efe8:	b480      	push	{r7}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eff6:	b2da      	uxtb	r2, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2204      	movs	r2, #4
 800f002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f006:	2300      	movs	r3, #0
}
 800f008:	4618      	mov	r0, r3
 800f00a:	370c      	adds	r7, #12
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr

0800f014 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f022:	b2db      	uxtb	r3, r3
 800f024:	2b04      	cmp	r3, #4
 800f026:	d106      	bne.n	800f036 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f02e:	b2da      	uxtb	r2, r3
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f036:	2300      	movs	r3, #0
}
 800f038:	4618      	mov	r0, r3
 800f03a:	370c      	adds	r7, #12
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr

0800f044 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f052:	2b00      	cmp	r3, #0
 800f054:	d101      	bne.n	800f05a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f056:	2303      	movs	r3, #3
 800f058:	e012      	b.n	800f080 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f060:	b2db      	uxtb	r3, r3
 800f062:	2b03      	cmp	r3, #3
 800f064:	d10b      	bne.n	800f07e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f06c:	69db      	ldr	r3, [r3, #28]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d005      	beq.n	800f07e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f078:	69db      	ldr	r3, [r3, #28]
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f07e:	2300      	movs	r3, #0
}
 800f080:	4618      	mov	r0, r3
 800f082:	3708      	adds	r7, #8
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f088:	b480      	push	{r7}
 800f08a:	b087      	sub	sp, #28
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	3301      	adds	r3, #1
 800f09e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f0a6:	8a3b      	ldrh	r3, [r7, #16]
 800f0a8:	021b      	lsls	r3, r3, #8
 800f0aa:	b21a      	sxth	r2, r3
 800f0ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f0b0:	4313      	orrs	r3, r2
 800f0b2:	b21b      	sxth	r3, r3
 800f0b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f0b6:	89fb      	ldrh	r3, [r7, #14]
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	371c      	adds	r7, #28
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr

0800f0c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f0da:	2b40      	cmp	r3, #64	@ 0x40
 800f0dc:	d005      	beq.n	800f0ea <USBD_StdDevReq+0x26>
 800f0de:	2b40      	cmp	r3, #64	@ 0x40
 800f0e0:	d853      	bhi.n	800f18a <USBD_StdDevReq+0xc6>
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d00b      	beq.n	800f0fe <USBD_StdDevReq+0x3a>
 800f0e6:	2b20      	cmp	r3, #32
 800f0e8:	d14f      	bne.n	800f18a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0f0:	689b      	ldr	r3, [r3, #8]
 800f0f2:	6839      	ldr	r1, [r7, #0]
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	4798      	blx	r3
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	73fb      	strb	r3, [r7, #15]
      break;
 800f0fc:	e04a      	b.n	800f194 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	785b      	ldrb	r3, [r3, #1]
 800f102:	2b09      	cmp	r3, #9
 800f104:	d83b      	bhi.n	800f17e <USBD_StdDevReq+0xba>
 800f106:	a201      	add	r2, pc, #4	@ (adr r2, 800f10c <USBD_StdDevReq+0x48>)
 800f108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f10c:	0800f161 	.word	0x0800f161
 800f110:	0800f175 	.word	0x0800f175
 800f114:	0800f17f 	.word	0x0800f17f
 800f118:	0800f16b 	.word	0x0800f16b
 800f11c:	0800f17f 	.word	0x0800f17f
 800f120:	0800f13f 	.word	0x0800f13f
 800f124:	0800f135 	.word	0x0800f135
 800f128:	0800f17f 	.word	0x0800f17f
 800f12c:	0800f157 	.word	0x0800f157
 800f130:	0800f149 	.word	0x0800f149
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f134:	6839      	ldr	r1, [r7, #0]
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 f9de 	bl	800f4f8 <USBD_GetDescriptor>
          break;
 800f13c:	e024      	b.n	800f188 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f13e:	6839      	ldr	r1, [r7, #0]
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 fb6d 	bl	800f820 <USBD_SetAddress>
          break;
 800f146:	e01f      	b.n	800f188 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f148:	6839      	ldr	r1, [r7, #0]
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f000 fbac 	bl	800f8a8 <USBD_SetConfig>
 800f150:	4603      	mov	r3, r0
 800f152:	73fb      	strb	r3, [r7, #15]
          break;
 800f154:	e018      	b.n	800f188 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f156:	6839      	ldr	r1, [r7, #0]
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 fc4b 	bl	800f9f4 <USBD_GetConfig>
          break;
 800f15e:	e013      	b.n	800f188 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f160:	6839      	ldr	r1, [r7, #0]
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 fc7c 	bl	800fa60 <USBD_GetStatus>
          break;
 800f168:	e00e      	b.n	800f188 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f16a:	6839      	ldr	r1, [r7, #0]
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 fcab 	bl	800fac8 <USBD_SetFeature>
          break;
 800f172:	e009      	b.n	800f188 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f174:	6839      	ldr	r1, [r7, #0]
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 fcba 	bl	800faf0 <USBD_ClrFeature>
          break;
 800f17c:	e004      	b.n	800f188 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f17e:	6839      	ldr	r1, [r7, #0]
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f000 fd11 	bl	800fba8 <USBD_CtlError>
          break;
 800f186:	bf00      	nop
      }
      break;
 800f188:	e004      	b.n	800f194 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f18a:	6839      	ldr	r1, [r7, #0]
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f000 fd0b 	bl	800fba8 <USBD_CtlError>
      break;
 800f192:	bf00      	nop
  }

  return ret;
 800f194:	7bfb      	ldrb	r3, [r7, #15]
}
 800f196:	4618      	mov	r0, r3
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop

0800f1a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f1b6:	2b40      	cmp	r3, #64	@ 0x40
 800f1b8:	d005      	beq.n	800f1c6 <USBD_StdItfReq+0x26>
 800f1ba:	2b40      	cmp	r3, #64	@ 0x40
 800f1bc:	d82f      	bhi.n	800f21e <USBD_StdItfReq+0x7e>
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d001      	beq.n	800f1c6 <USBD_StdItfReq+0x26>
 800f1c2:	2b20      	cmp	r3, #32
 800f1c4:	d12b      	bne.n	800f21e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1cc:	b2db      	uxtb	r3, r3
 800f1ce:	3b01      	subs	r3, #1
 800f1d0:	2b02      	cmp	r3, #2
 800f1d2:	d81d      	bhi.n	800f210 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	889b      	ldrh	r3, [r3, #4]
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	2b01      	cmp	r3, #1
 800f1dc:	d813      	bhi.n	800f206 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1e4:	689b      	ldr	r3, [r3, #8]
 800f1e6:	6839      	ldr	r1, [r7, #0]
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	4798      	blx	r3
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	88db      	ldrh	r3, [r3, #6]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d110      	bne.n	800f21a <USBD_StdItfReq+0x7a>
 800f1f8:	7bfb      	ldrb	r3, [r7, #15]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d10d      	bne.n	800f21a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f000 fd9d 	bl	800fd3e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f204:	e009      	b.n	800f21a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f206:	6839      	ldr	r1, [r7, #0]
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f000 fccd 	bl	800fba8 <USBD_CtlError>
          break;
 800f20e:	e004      	b.n	800f21a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f210:	6839      	ldr	r1, [r7, #0]
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 fcc8 	bl	800fba8 <USBD_CtlError>
          break;
 800f218:	e000      	b.n	800f21c <USBD_StdItfReq+0x7c>
          break;
 800f21a:	bf00      	nop
      }
      break;
 800f21c:	e004      	b.n	800f228 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f21e:	6839      	ldr	r1, [r7, #0]
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 fcc1 	bl	800fba8 <USBD_CtlError>
      break;
 800f226:	bf00      	nop
  }

  return ret;
 800f228:	7bfb      	ldrb	r3, [r7, #15]
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3710      	adds	r7, #16
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f232:	b580      	push	{r7, lr}
 800f234:	b084      	sub	sp, #16
 800f236:	af00      	add	r7, sp, #0
 800f238:	6078      	str	r0, [r7, #4]
 800f23a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f23c:	2300      	movs	r3, #0
 800f23e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	889b      	ldrh	r3, [r3, #4]
 800f244:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f24e:	2b40      	cmp	r3, #64	@ 0x40
 800f250:	d007      	beq.n	800f262 <USBD_StdEPReq+0x30>
 800f252:	2b40      	cmp	r3, #64	@ 0x40
 800f254:	f200 8145 	bhi.w	800f4e2 <USBD_StdEPReq+0x2b0>
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00c      	beq.n	800f276 <USBD_StdEPReq+0x44>
 800f25c:	2b20      	cmp	r3, #32
 800f25e:	f040 8140 	bne.w	800f4e2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f268:	689b      	ldr	r3, [r3, #8]
 800f26a:	6839      	ldr	r1, [r7, #0]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	4798      	blx	r3
 800f270:	4603      	mov	r3, r0
 800f272:	73fb      	strb	r3, [r7, #15]
      break;
 800f274:	e13a      	b.n	800f4ec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	785b      	ldrb	r3, [r3, #1]
 800f27a:	2b03      	cmp	r3, #3
 800f27c:	d007      	beq.n	800f28e <USBD_StdEPReq+0x5c>
 800f27e:	2b03      	cmp	r3, #3
 800f280:	f300 8129 	bgt.w	800f4d6 <USBD_StdEPReq+0x2a4>
 800f284:	2b00      	cmp	r3, #0
 800f286:	d07f      	beq.n	800f388 <USBD_StdEPReq+0x156>
 800f288:	2b01      	cmp	r3, #1
 800f28a:	d03c      	beq.n	800f306 <USBD_StdEPReq+0xd4>
 800f28c:	e123      	b.n	800f4d6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f294:	b2db      	uxtb	r3, r3
 800f296:	2b02      	cmp	r3, #2
 800f298:	d002      	beq.n	800f2a0 <USBD_StdEPReq+0x6e>
 800f29a:	2b03      	cmp	r3, #3
 800f29c:	d016      	beq.n	800f2cc <USBD_StdEPReq+0x9a>
 800f29e:	e02c      	b.n	800f2fa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f2a0:	7bbb      	ldrb	r3, [r7, #14]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d00d      	beq.n	800f2c2 <USBD_StdEPReq+0x90>
 800f2a6:	7bbb      	ldrb	r3, [r7, #14]
 800f2a8:	2b80      	cmp	r3, #128	@ 0x80
 800f2aa:	d00a      	beq.n	800f2c2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2ac:	7bbb      	ldrb	r3, [r7, #14]
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f001 f92d 	bl	8010510 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f2b6:	2180      	movs	r1, #128	@ 0x80
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f001 f929 	bl	8010510 <USBD_LL_StallEP>
 800f2be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f2c0:	e020      	b.n	800f304 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f2c2:	6839      	ldr	r1, [r7, #0]
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f000 fc6f 	bl	800fba8 <USBD_CtlError>
              break;
 800f2ca:	e01b      	b.n	800f304 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	885b      	ldrh	r3, [r3, #2]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d10e      	bne.n	800f2f2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f2d4:	7bbb      	ldrb	r3, [r7, #14]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00b      	beq.n	800f2f2 <USBD_StdEPReq+0xc0>
 800f2da:	7bbb      	ldrb	r3, [r7, #14]
 800f2dc:	2b80      	cmp	r3, #128	@ 0x80
 800f2de:	d008      	beq.n	800f2f2 <USBD_StdEPReq+0xc0>
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	88db      	ldrh	r3, [r3, #6]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d104      	bne.n	800f2f2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2e8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f001 f90f 	bl	8010510 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f000 fd23 	bl	800fd3e <USBD_CtlSendStatus>

              break;
 800f2f8:	e004      	b.n	800f304 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f2fa:	6839      	ldr	r1, [r7, #0]
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 fc53 	bl	800fba8 <USBD_CtlError>
              break;
 800f302:	bf00      	nop
          }
          break;
 800f304:	e0ec      	b.n	800f4e0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	2b02      	cmp	r3, #2
 800f310:	d002      	beq.n	800f318 <USBD_StdEPReq+0xe6>
 800f312:	2b03      	cmp	r3, #3
 800f314:	d016      	beq.n	800f344 <USBD_StdEPReq+0x112>
 800f316:	e030      	b.n	800f37a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f318:	7bbb      	ldrb	r3, [r7, #14]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d00d      	beq.n	800f33a <USBD_StdEPReq+0x108>
 800f31e:	7bbb      	ldrb	r3, [r7, #14]
 800f320:	2b80      	cmp	r3, #128	@ 0x80
 800f322:	d00a      	beq.n	800f33a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f324:	7bbb      	ldrb	r3, [r7, #14]
 800f326:	4619      	mov	r1, r3
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f001 f8f1 	bl	8010510 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f32e:	2180      	movs	r1, #128	@ 0x80
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f001 f8ed 	bl	8010510 <USBD_LL_StallEP>
 800f336:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f338:	e025      	b.n	800f386 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f33a:	6839      	ldr	r1, [r7, #0]
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 fc33 	bl	800fba8 <USBD_CtlError>
              break;
 800f342:	e020      	b.n	800f386 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	885b      	ldrh	r3, [r3, #2]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d11b      	bne.n	800f384 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f34c:	7bbb      	ldrb	r3, [r7, #14]
 800f34e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f352:	2b00      	cmp	r3, #0
 800f354:	d004      	beq.n	800f360 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f356:	7bbb      	ldrb	r3, [r7, #14]
 800f358:	4619      	mov	r1, r3
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f001 f8f7 	bl	801054e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 fcec 	bl	800fd3e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f36c:	689b      	ldr	r3, [r3, #8]
 800f36e:	6839      	ldr	r1, [r7, #0]
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	4798      	blx	r3
 800f374:	4603      	mov	r3, r0
 800f376:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f378:	e004      	b.n	800f384 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f37a:	6839      	ldr	r1, [r7, #0]
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f000 fc13 	bl	800fba8 <USBD_CtlError>
              break;
 800f382:	e000      	b.n	800f386 <USBD_StdEPReq+0x154>
              break;
 800f384:	bf00      	nop
          }
          break;
 800f386:	e0ab      	b.n	800f4e0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f38e:	b2db      	uxtb	r3, r3
 800f390:	2b02      	cmp	r3, #2
 800f392:	d002      	beq.n	800f39a <USBD_StdEPReq+0x168>
 800f394:	2b03      	cmp	r3, #3
 800f396:	d032      	beq.n	800f3fe <USBD_StdEPReq+0x1cc>
 800f398:	e097      	b.n	800f4ca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f39a:	7bbb      	ldrb	r3, [r7, #14]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d007      	beq.n	800f3b0 <USBD_StdEPReq+0x17e>
 800f3a0:	7bbb      	ldrb	r3, [r7, #14]
 800f3a2:	2b80      	cmp	r3, #128	@ 0x80
 800f3a4:	d004      	beq.n	800f3b0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f3a6:	6839      	ldr	r1, [r7, #0]
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f000 fbfd 	bl	800fba8 <USBD_CtlError>
                break;
 800f3ae:	e091      	b.n	800f4d4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	da0b      	bge.n	800f3d0 <USBD_StdEPReq+0x19e>
 800f3b8:	7bbb      	ldrb	r3, [r7, #14]
 800f3ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f3be:	4613      	mov	r3, r2
 800f3c0:	009b      	lsls	r3, r3, #2
 800f3c2:	4413      	add	r3, r2
 800f3c4:	009b      	lsls	r3, r3, #2
 800f3c6:	3310      	adds	r3, #16
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	3304      	adds	r3, #4
 800f3ce:	e00b      	b.n	800f3e8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f3d0:	7bbb      	ldrb	r3, [r7, #14]
 800f3d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3d6:	4613      	mov	r3, r2
 800f3d8:	009b      	lsls	r3, r3, #2
 800f3da:	4413      	add	r3, r2
 800f3dc:	009b      	lsls	r3, r3, #2
 800f3de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	3304      	adds	r3, #4
 800f3e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	2202      	movs	r2, #2
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 fc47 	bl	800fc8a <USBD_CtlSendData>
              break;
 800f3fc:	e06a      	b.n	800f4d4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f3fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f402:	2b00      	cmp	r3, #0
 800f404:	da11      	bge.n	800f42a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f406:	7bbb      	ldrb	r3, [r7, #14]
 800f408:	f003 020f 	and.w	r2, r3, #15
 800f40c:	6879      	ldr	r1, [r7, #4]
 800f40e:	4613      	mov	r3, r2
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	4413      	add	r3, r2
 800f414:	009b      	lsls	r3, r3, #2
 800f416:	440b      	add	r3, r1
 800f418:	3324      	adds	r3, #36	@ 0x24
 800f41a:	881b      	ldrh	r3, [r3, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d117      	bne.n	800f450 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f420:	6839      	ldr	r1, [r7, #0]
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f000 fbc0 	bl	800fba8 <USBD_CtlError>
                  break;
 800f428:	e054      	b.n	800f4d4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f42a:	7bbb      	ldrb	r3, [r7, #14]
 800f42c:	f003 020f 	and.w	r2, r3, #15
 800f430:	6879      	ldr	r1, [r7, #4]
 800f432:	4613      	mov	r3, r2
 800f434:	009b      	lsls	r3, r3, #2
 800f436:	4413      	add	r3, r2
 800f438:	009b      	lsls	r3, r3, #2
 800f43a:	440b      	add	r3, r1
 800f43c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f440:	881b      	ldrh	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d104      	bne.n	800f450 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f446:	6839      	ldr	r1, [r7, #0]
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f000 fbad 	bl	800fba8 <USBD_CtlError>
                  break;
 800f44e:	e041      	b.n	800f4d4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f454:	2b00      	cmp	r3, #0
 800f456:	da0b      	bge.n	800f470 <USBD_StdEPReq+0x23e>
 800f458:	7bbb      	ldrb	r3, [r7, #14]
 800f45a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f45e:	4613      	mov	r3, r2
 800f460:	009b      	lsls	r3, r3, #2
 800f462:	4413      	add	r3, r2
 800f464:	009b      	lsls	r3, r3, #2
 800f466:	3310      	adds	r3, #16
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	4413      	add	r3, r2
 800f46c:	3304      	adds	r3, #4
 800f46e:	e00b      	b.n	800f488 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f470:	7bbb      	ldrb	r3, [r7, #14]
 800f472:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f476:	4613      	mov	r3, r2
 800f478:	009b      	lsls	r3, r3, #2
 800f47a:	4413      	add	r3, r2
 800f47c:	009b      	lsls	r3, r3, #2
 800f47e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	4413      	add	r3, r2
 800f486:	3304      	adds	r3, #4
 800f488:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f48a:	7bbb      	ldrb	r3, [r7, #14]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d002      	beq.n	800f496 <USBD_StdEPReq+0x264>
 800f490:	7bbb      	ldrb	r3, [r7, #14]
 800f492:	2b80      	cmp	r3, #128	@ 0x80
 800f494:	d103      	bne.n	800f49e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	2200      	movs	r2, #0
 800f49a:	601a      	str	r2, [r3, #0]
 800f49c:	e00e      	b.n	800f4bc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f49e:	7bbb      	ldrb	r3, [r7, #14]
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f001 f872 	bl	801058c <USBD_LL_IsStallEP>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d003      	beq.n	800f4b6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	2201      	movs	r2, #1
 800f4b2:	601a      	str	r2, [r3, #0]
 800f4b4:	e002      	b.n	800f4bc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	2202      	movs	r2, #2
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f000 fbe1 	bl	800fc8a <USBD_CtlSendData>
              break;
 800f4c8:	e004      	b.n	800f4d4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f4ca:	6839      	ldr	r1, [r7, #0]
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f000 fb6b 	bl	800fba8 <USBD_CtlError>
              break;
 800f4d2:	bf00      	nop
          }
          break;
 800f4d4:	e004      	b.n	800f4e0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f4d6:	6839      	ldr	r1, [r7, #0]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 fb65 	bl	800fba8 <USBD_CtlError>
          break;
 800f4de:	bf00      	nop
      }
      break;
 800f4e0:	e004      	b.n	800f4ec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f4e2:	6839      	ldr	r1, [r7, #0]
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 fb5f 	bl	800fba8 <USBD_CtlError>
      break;
 800f4ea:	bf00      	nop
  }

  return ret;
 800f4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	3710      	adds	r7, #16
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
	...

0800f4f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f502:	2300      	movs	r3, #0
 800f504:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f506:	2300      	movs	r3, #0
 800f508:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f50a:	2300      	movs	r3, #0
 800f50c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	885b      	ldrh	r3, [r3, #2]
 800f512:	0a1b      	lsrs	r3, r3, #8
 800f514:	b29b      	uxth	r3, r3
 800f516:	3b01      	subs	r3, #1
 800f518:	2b0e      	cmp	r3, #14
 800f51a:	f200 8152 	bhi.w	800f7c2 <USBD_GetDescriptor+0x2ca>
 800f51e:	a201      	add	r2, pc, #4	@ (adr r2, 800f524 <USBD_GetDescriptor+0x2c>)
 800f520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f524:	0800f595 	.word	0x0800f595
 800f528:	0800f5ad 	.word	0x0800f5ad
 800f52c:	0800f5ed 	.word	0x0800f5ed
 800f530:	0800f7c3 	.word	0x0800f7c3
 800f534:	0800f7c3 	.word	0x0800f7c3
 800f538:	0800f763 	.word	0x0800f763
 800f53c:	0800f78f 	.word	0x0800f78f
 800f540:	0800f7c3 	.word	0x0800f7c3
 800f544:	0800f7c3 	.word	0x0800f7c3
 800f548:	0800f7c3 	.word	0x0800f7c3
 800f54c:	0800f7c3 	.word	0x0800f7c3
 800f550:	0800f7c3 	.word	0x0800f7c3
 800f554:	0800f7c3 	.word	0x0800f7c3
 800f558:	0800f7c3 	.word	0x0800f7c3
 800f55c:	0800f561 	.word	0x0800f561
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f566:	69db      	ldr	r3, [r3, #28]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d00b      	beq.n	800f584 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f572:	69db      	ldr	r3, [r3, #28]
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	7c12      	ldrb	r2, [r2, #16]
 800f578:	f107 0108 	add.w	r1, r7, #8
 800f57c:	4610      	mov	r0, r2
 800f57e:	4798      	blx	r3
 800f580:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f582:	e126      	b.n	800f7d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f584:	6839      	ldr	r1, [r7, #0]
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 fb0e 	bl	800fba8 <USBD_CtlError>
        err++;
 800f58c:	7afb      	ldrb	r3, [r7, #11]
 800f58e:	3301      	adds	r3, #1
 800f590:	72fb      	strb	r3, [r7, #11]
      break;
 800f592:	e11e      	b.n	800f7d2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	7c12      	ldrb	r2, [r2, #16]
 800f5a0:	f107 0108 	add.w	r1, r7, #8
 800f5a4:	4610      	mov	r0, r2
 800f5a6:	4798      	blx	r3
 800f5a8:	60f8      	str	r0, [r7, #12]
      break;
 800f5aa:	e112      	b.n	800f7d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	7c1b      	ldrb	r3, [r3, #16]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d10d      	bne.n	800f5d0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5bc:	f107 0208 	add.w	r2, r7, #8
 800f5c0:	4610      	mov	r0, r2
 800f5c2:	4798      	blx	r3
 800f5c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	2202      	movs	r2, #2
 800f5cc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f5ce:	e100      	b.n	800f7d2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5d8:	f107 0208 	add.w	r2, r7, #8
 800f5dc:	4610      	mov	r0, r2
 800f5de:	4798      	blx	r3
 800f5e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	2202      	movs	r2, #2
 800f5e8:	701a      	strb	r2, [r3, #0]
      break;
 800f5ea:	e0f2      	b.n	800f7d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	885b      	ldrh	r3, [r3, #2]
 800f5f0:	b2db      	uxtb	r3, r3
 800f5f2:	2b05      	cmp	r3, #5
 800f5f4:	f200 80ac 	bhi.w	800f750 <USBD_GetDescriptor+0x258>
 800f5f8:	a201      	add	r2, pc, #4	@ (adr r2, 800f600 <USBD_GetDescriptor+0x108>)
 800f5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5fe:	bf00      	nop
 800f600:	0800f619 	.word	0x0800f619
 800f604:	0800f64d 	.word	0x0800f64d
 800f608:	0800f681 	.word	0x0800f681
 800f60c:	0800f6b5 	.word	0x0800f6b5
 800f610:	0800f6e9 	.word	0x0800f6e9
 800f614:	0800f71d 	.word	0x0800f71d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d00b      	beq.n	800f63c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f62a:	685b      	ldr	r3, [r3, #4]
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	7c12      	ldrb	r2, [r2, #16]
 800f630:	f107 0108 	add.w	r1, r7, #8
 800f634:	4610      	mov	r0, r2
 800f636:	4798      	blx	r3
 800f638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f63a:	e091      	b.n	800f760 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f63c:	6839      	ldr	r1, [r7, #0]
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f000 fab2 	bl	800fba8 <USBD_CtlError>
            err++;
 800f644:	7afb      	ldrb	r3, [r7, #11]
 800f646:	3301      	adds	r3, #1
 800f648:	72fb      	strb	r3, [r7, #11]
          break;
 800f64a:	e089      	b.n	800f760 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f652:	689b      	ldr	r3, [r3, #8]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d00b      	beq.n	800f670 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f65e:	689b      	ldr	r3, [r3, #8]
 800f660:	687a      	ldr	r2, [r7, #4]
 800f662:	7c12      	ldrb	r2, [r2, #16]
 800f664:	f107 0108 	add.w	r1, r7, #8
 800f668:	4610      	mov	r0, r2
 800f66a:	4798      	blx	r3
 800f66c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f66e:	e077      	b.n	800f760 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f670:	6839      	ldr	r1, [r7, #0]
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f000 fa98 	bl	800fba8 <USBD_CtlError>
            err++;
 800f678:	7afb      	ldrb	r3, [r7, #11]
 800f67a:	3301      	adds	r3, #1
 800f67c:	72fb      	strb	r3, [r7, #11]
          break;
 800f67e:	e06f      	b.n	800f760 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d00b      	beq.n	800f6a4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f692:	68db      	ldr	r3, [r3, #12]
 800f694:	687a      	ldr	r2, [r7, #4]
 800f696:	7c12      	ldrb	r2, [r2, #16]
 800f698:	f107 0108 	add.w	r1, r7, #8
 800f69c:	4610      	mov	r0, r2
 800f69e:	4798      	blx	r3
 800f6a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6a2:	e05d      	b.n	800f760 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f6a4:	6839      	ldr	r1, [r7, #0]
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f000 fa7e 	bl	800fba8 <USBD_CtlError>
            err++;
 800f6ac:	7afb      	ldrb	r3, [r7, #11]
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	72fb      	strb	r3, [r7, #11]
          break;
 800f6b2:	e055      	b.n	800f760 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6ba:	691b      	ldr	r3, [r3, #16]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d00b      	beq.n	800f6d8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6c6:	691b      	ldr	r3, [r3, #16]
 800f6c8:	687a      	ldr	r2, [r7, #4]
 800f6ca:	7c12      	ldrb	r2, [r2, #16]
 800f6cc:	f107 0108 	add.w	r1, r7, #8
 800f6d0:	4610      	mov	r0, r2
 800f6d2:	4798      	blx	r3
 800f6d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6d6:	e043      	b.n	800f760 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f6d8:	6839      	ldr	r1, [r7, #0]
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 fa64 	bl	800fba8 <USBD_CtlError>
            err++;
 800f6e0:	7afb      	ldrb	r3, [r7, #11]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	72fb      	strb	r3, [r7, #11]
          break;
 800f6e6:	e03b      	b.n	800f760 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6ee:	695b      	ldr	r3, [r3, #20]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d00b      	beq.n	800f70c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6fa:	695b      	ldr	r3, [r3, #20]
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	7c12      	ldrb	r2, [r2, #16]
 800f700:	f107 0108 	add.w	r1, r7, #8
 800f704:	4610      	mov	r0, r2
 800f706:	4798      	blx	r3
 800f708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f70a:	e029      	b.n	800f760 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f70c:	6839      	ldr	r1, [r7, #0]
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f000 fa4a 	bl	800fba8 <USBD_CtlError>
            err++;
 800f714:	7afb      	ldrb	r3, [r7, #11]
 800f716:	3301      	adds	r3, #1
 800f718:	72fb      	strb	r3, [r7, #11]
          break;
 800f71a:	e021      	b.n	800f760 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f722:	699b      	ldr	r3, [r3, #24]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d00b      	beq.n	800f740 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f72e:	699b      	ldr	r3, [r3, #24]
 800f730:	687a      	ldr	r2, [r7, #4]
 800f732:	7c12      	ldrb	r2, [r2, #16]
 800f734:	f107 0108 	add.w	r1, r7, #8
 800f738:	4610      	mov	r0, r2
 800f73a:	4798      	blx	r3
 800f73c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f73e:	e00f      	b.n	800f760 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f740:	6839      	ldr	r1, [r7, #0]
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f000 fa30 	bl	800fba8 <USBD_CtlError>
            err++;
 800f748:	7afb      	ldrb	r3, [r7, #11]
 800f74a:	3301      	adds	r3, #1
 800f74c:	72fb      	strb	r3, [r7, #11]
          break;
 800f74e:	e007      	b.n	800f760 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f750:	6839      	ldr	r1, [r7, #0]
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f000 fa28 	bl	800fba8 <USBD_CtlError>
          err++;
 800f758:	7afb      	ldrb	r3, [r7, #11]
 800f75a:	3301      	adds	r3, #1
 800f75c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f75e:	bf00      	nop
      }
      break;
 800f760:	e037      	b.n	800f7d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	7c1b      	ldrb	r3, [r3, #16]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d109      	bne.n	800f77e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f772:	f107 0208 	add.w	r2, r7, #8
 800f776:	4610      	mov	r0, r2
 800f778:	4798      	blx	r3
 800f77a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f77c:	e029      	b.n	800f7d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f77e:	6839      	ldr	r1, [r7, #0]
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f000 fa11 	bl	800fba8 <USBD_CtlError>
        err++;
 800f786:	7afb      	ldrb	r3, [r7, #11]
 800f788:	3301      	adds	r3, #1
 800f78a:	72fb      	strb	r3, [r7, #11]
      break;
 800f78c:	e021      	b.n	800f7d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	7c1b      	ldrb	r3, [r3, #16]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d10d      	bne.n	800f7b2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f79c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f79e:	f107 0208 	add.w	r2, r7, #8
 800f7a2:	4610      	mov	r0, r2
 800f7a4:	4798      	blx	r3
 800f7a6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	2207      	movs	r2, #7
 800f7ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7b0:	e00f      	b.n	800f7d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f7b2:	6839      	ldr	r1, [r7, #0]
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 f9f7 	bl	800fba8 <USBD_CtlError>
        err++;
 800f7ba:	7afb      	ldrb	r3, [r7, #11]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	72fb      	strb	r3, [r7, #11]
      break;
 800f7c0:	e007      	b.n	800f7d2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f7c2:	6839      	ldr	r1, [r7, #0]
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f000 f9ef 	bl	800fba8 <USBD_CtlError>
      err++;
 800f7ca:	7afb      	ldrb	r3, [r7, #11]
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	72fb      	strb	r3, [r7, #11]
      break;
 800f7d0:	bf00      	nop
  }

  if (err != 0U)
 800f7d2:	7afb      	ldrb	r3, [r7, #11]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d11e      	bne.n	800f816 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	88db      	ldrh	r3, [r3, #6]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d016      	beq.n	800f80e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f7e0:	893b      	ldrh	r3, [r7, #8]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d00e      	beq.n	800f804 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	88da      	ldrh	r2, [r3, #6]
 800f7ea:	893b      	ldrh	r3, [r7, #8]
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	bf28      	it	cs
 800f7f0:	4613      	movcs	r3, r2
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f7f6:	893b      	ldrh	r3, [r7, #8]
 800f7f8:	461a      	mov	r2, r3
 800f7fa:	68f9      	ldr	r1, [r7, #12]
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f000 fa44 	bl	800fc8a <USBD_CtlSendData>
 800f802:	e009      	b.n	800f818 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f804:	6839      	ldr	r1, [r7, #0]
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f000 f9ce 	bl	800fba8 <USBD_CtlError>
 800f80c:	e004      	b.n	800f818 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f000 fa95 	bl	800fd3e <USBD_CtlSendStatus>
 800f814:	e000      	b.n	800f818 <USBD_GetDescriptor+0x320>
    return;
 800f816:	bf00      	nop
  }
}
 800f818:	3710      	adds	r7, #16
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
 800f81e:	bf00      	nop

0800f820 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b084      	sub	sp, #16
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	889b      	ldrh	r3, [r3, #4]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d131      	bne.n	800f896 <USBD_SetAddress+0x76>
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	88db      	ldrh	r3, [r3, #6]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d12d      	bne.n	800f896 <USBD_SetAddress+0x76>
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	885b      	ldrh	r3, [r3, #2]
 800f83e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f840:	d829      	bhi.n	800f896 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	885b      	ldrh	r3, [r3, #2]
 800f846:	b2db      	uxtb	r3, r3
 800f848:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f84c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f854:	b2db      	uxtb	r3, r3
 800f856:	2b03      	cmp	r3, #3
 800f858:	d104      	bne.n	800f864 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f85a:	6839      	ldr	r1, [r7, #0]
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f000 f9a3 	bl	800fba8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f862:	e01d      	b.n	800f8a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	7bfa      	ldrb	r2, [r7, #15]
 800f868:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f86c:	7bfb      	ldrb	r3, [r7, #15]
 800f86e:	4619      	mov	r1, r3
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 feb7 	bl	80105e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f000 fa61 	bl	800fd3e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f87c:	7bfb      	ldrb	r3, [r7, #15]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d004      	beq.n	800f88c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2202      	movs	r2, #2
 800f886:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f88a:	e009      	b.n	800f8a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2201      	movs	r2, #1
 800f890:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f894:	e004      	b.n	800f8a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f896:	6839      	ldr	r1, [r7, #0]
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f000 f985 	bl	800fba8 <USBD_CtlError>
  }
}
 800f89e:	bf00      	nop
 800f8a0:	bf00      	nop
 800f8a2:	3710      	adds	r7, #16
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}

0800f8a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b084      	sub	sp, #16
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	885b      	ldrh	r3, [r3, #2]
 800f8ba:	b2da      	uxtb	r2, r3
 800f8bc:	4b4c      	ldr	r3, [pc, #304]	@ (800f9f0 <USBD_SetConfig+0x148>)
 800f8be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f8c0:	4b4b      	ldr	r3, [pc, #300]	@ (800f9f0 <USBD_SetConfig+0x148>)
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d905      	bls.n	800f8d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f8c8:	6839      	ldr	r1, [r7, #0]
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f000 f96c 	bl	800fba8 <USBD_CtlError>
    return USBD_FAIL;
 800f8d0:	2303      	movs	r3, #3
 800f8d2:	e088      	b.n	800f9e6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8da:	b2db      	uxtb	r3, r3
 800f8dc:	2b02      	cmp	r3, #2
 800f8de:	d002      	beq.n	800f8e6 <USBD_SetConfig+0x3e>
 800f8e0:	2b03      	cmp	r3, #3
 800f8e2:	d025      	beq.n	800f930 <USBD_SetConfig+0x88>
 800f8e4:	e071      	b.n	800f9ca <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f8e6:	4b42      	ldr	r3, [pc, #264]	@ (800f9f0 <USBD_SetConfig+0x148>)
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d01c      	beq.n	800f928 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f8ee:	4b40      	ldr	r3, [pc, #256]	@ (800f9f0 <USBD_SetConfig+0x148>)
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f8f8:	4b3d      	ldr	r3, [pc, #244]	@ (800f9f0 <USBD_SetConfig+0x148>)
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f7ff f992 	bl	800ec28 <USBD_SetClassConfig>
 800f904:	4603      	mov	r3, r0
 800f906:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f908:	7bfb      	ldrb	r3, [r7, #15]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d004      	beq.n	800f918 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f90e:	6839      	ldr	r1, [r7, #0]
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f000 f949 	bl	800fba8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f916:	e065      	b.n	800f9e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f000 fa10 	bl	800fd3e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2203      	movs	r2, #3
 800f922:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f926:	e05d      	b.n	800f9e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 fa08 	bl	800fd3e <USBD_CtlSendStatus>
      break;
 800f92e:	e059      	b.n	800f9e4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f930:	4b2f      	ldr	r3, [pc, #188]	@ (800f9f0 <USBD_SetConfig+0x148>)
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d112      	bne.n	800f95e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2202      	movs	r2, #2
 800f93c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f940:	4b2b      	ldr	r3, [pc, #172]	@ (800f9f0 <USBD_SetConfig+0x148>)
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	461a      	mov	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f94a:	4b29      	ldr	r3, [pc, #164]	@ (800f9f0 <USBD_SetConfig+0x148>)
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	4619      	mov	r1, r3
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7ff f985 	bl	800ec60 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 f9f1 	bl	800fd3e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f95c:	e042      	b.n	800f9e4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f95e:	4b24      	ldr	r3, [pc, #144]	@ (800f9f0 <USBD_SetConfig+0x148>)
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	461a      	mov	r2, r3
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d02a      	beq.n	800f9c2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	b2db      	uxtb	r3, r3
 800f972:	4619      	mov	r1, r3
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7ff f973 	bl	800ec60 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f97a:	4b1d      	ldr	r3, [pc, #116]	@ (800f9f0 <USBD_SetConfig+0x148>)
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	461a      	mov	r2, r3
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f984:	4b1a      	ldr	r3, [pc, #104]	@ (800f9f0 <USBD_SetConfig+0x148>)
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	4619      	mov	r1, r3
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f7ff f94c 	bl	800ec28 <USBD_SetClassConfig>
 800f990:	4603      	mov	r3, r0
 800f992:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f994:	7bfb      	ldrb	r3, [r7, #15]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d00f      	beq.n	800f9ba <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f99a:	6839      	ldr	r1, [r7, #0]
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f000 f903 	bl	800fba8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	b2db      	uxtb	r3, r3
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f7ff f958 	bl	800ec60 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2202      	movs	r2, #2
 800f9b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f9b8:	e014      	b.n	800f9e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f000 f9bf 	bl	800fd3e <USBD_CtlSendStatus>
      break;
 800f9c0:	e010      	b.n	800f9e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f000 f9bb 	bl	800fd3e <USBD_CtlSendStatus>
      break;
 800f9c8:	e00c      	b.n	800f9e4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f9ca:	6839      	ldr	r1, [r7, #0]
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f000 f8eb 	bl	800fba8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9d2:	4b07      	ldr	r3, [pc, #28]	@ (800f9f0 <USBD_SetConfig+0x148>)
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7ff f941 	bl	800ec60 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f9de:	2303      	movs	r3, #3
 800f9e0:	73fb      	strb	r3, [r7, #15]
      break;
 800f9e2:	bf00      	nop
  }

  return ret;
 800f9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3710      	adds	r7, #16
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	bf00      	nop
 800f9f0:	20000b8c 	.word	0x20000b8c

0800f9f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	88db      	ldrh	r3, [r3, #6]
 800fa02:	2b01      	cmp	r3, #1
 800fa04:	d004      	beq.n	800fa10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fa06:	6839      	ldr	r1, [r7, #0]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 f8cd 	bl	800fba8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fa0e:	e023      	b.n	800fa58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa16:	b2db      	uxtb	r3, r3
 800fa18:	2b02      	cmp	r3, #2
 800fa1a:	dc02      	bgt.n	800fa22 <USBD_GetConfig+0x2e>
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	dc03      	bgt.n	800fa28 <USBD_GetConfig+0x34>
 800fa20:	e015      	b.n	800fa4e <USBD_GetConfig+0x5a>
 800fa22:	2b03      	cmp	r3, #3
 800fa24:	d00b      	beq.n	800fa3e <USBD_GetConfig+0x4a>
 800fa26:	e012      	b.n	800fa4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	3308      	adds	r3, #8
 800fa32:	2201      	movs	r2, #1
 800fa34:	4619      	mov	r1, r3
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 f927 	bl	800fc8a <USBD_CtlSendData>
        break;
 800fa3c:	e00c      	b.n	800fa58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	3304      	adds	r3, #4
 800fa42:	2201      	movs	r2, #1
 800fa44:	4619      	mov	r1, r3
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f000 f91f 	bl	800fc8a <USBD_CtlSendData>
        break;
 800fa4c:	e004      	b.n	800fa58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fa4e:	6839      	ldr	r1, [r7, #0]
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f000 f8a9 	bl	800fba8 <USBD_CtlError>
        break;
 800fa56:	bf00      	nop
}
 800fa58:	bf00      	nop
 800fa5a:	3708      	adds	r7, #8
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	3b01      	subs	r3, #1
 800fa74:	2b02      	cmp	r3, #2
 800fa76:	d81e      	bhi.n	800fab6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	88db      	ldrh	r3, [r3, #6]
 800fa7c:	2b02      	cmp	r3, #2
 800fa7e:	d004      	beq.n	800fa8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fa80:	6839      	ldr	r1, [r7, #0]
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f000 f890 	bl	800fba8 <USBD_CtlError>
        break;
 800fa88:	e01a      	b.n	800fac0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d005      	beq.n	800faa6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	68db      	ldr	r3, [r3, #12]
 800fa9e:	f043 0202 	orr.w	r2, r3, #2
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	330c      	adds	r3, #12
 800faaa:	2202      	movs	r2, #2
 800faac:	4619      	mov	r1, r3
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f000 f8eb 	bl	800fc8a <USBD_CtlSendData>
      break;
 800fab4:	e004      	b.n	800fac0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fab6:	6839      	ldr	r1, [r7, #0]
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f000 f875 	bl	800fba8 <USBD_CtlError>
      break;
 800fabe:	bf00      	nop
  }
}
 800fac0:	bf00      	nop
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	885b      	ldrh	r3, [r3, #2]
 800fad6:	2b01      	cmp	r3, #1
 800fad8:	d106      	bne.n	800fae8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2201      	movs	r2, #1
 800fade:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 f92b 	bl	800fd3e <USBD_CtlSendStatus>
  }
}
 800fae8:	bf00      	nop
 800faea:	3708      	adds	r7, #8
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	3b01      	subs	r3, #1
 800fb04:	2b02      	cmp	r3, #2
 800fb06:	d80b      	bhi.n	800fb20 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	885b      	ldrh	r3, [r3, #2]
 800fb0c:	2b01      	cmp	r3, #1
 800fb0e:	d10c      	bne.n	800fb2a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2200      	movs	r2, #0
 800fb14:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 f910 	bl	800fd3e <USBD_CtlSendStatus>
      }
      break;
 800fb1e:	e004      	b.n	800fb2a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fb20:	6839      	ldr	r1, [r7, #0]
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f000 f840 	bl	800fba8 <USBD_CtlError>
      break;
 800fb28:	e000      	b.n	800fb2c <USBD_ClrFeature+0x3c>
      break;
 800fb2a:	bf00      	nop
  }
}
 800fb2c:	bf00      	nop
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b084      	sub	sp, #16
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	781a      	ldrb	r2, [r3, #0]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	781a      	ldrb	r2, [r3, #0]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fb5e:	68f8      	ldr	r0, [r7, #12]
 800fb60:	f7ff fa92 	bl	800f088 <SWAPBYTE>
 800fb64:	4603      	mov	r3, r0
 800fb66:	461a      	mov	r2, r3
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	3301      	adds	r3, #1
 800fb70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	3301      	adds	r3, #1
 800fb76:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fb78:	68f8      	ldr	r0, [r7, #12]
 800fb7a:	f7ff fa85 	bl	800f088 <SWAPBYTE>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	461a      	mov	r2, r3
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	3301      	adds	r3, #1
 800fb8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	3301      	adds	r3, #1
 800fb90:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fb92:	68f8      	ldr	r0, [r7, #12]
 800fb94:	f7ff fa78 	bl	800f088 <SWAPBYTE>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	80da      	strh	r2, [r3, #6]
}
 800fba0:	bf00      	nop
 800fba2:	3710      	adds	r7, #16
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}

0800fba8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fbb2:	2180      	movs	r1, #128	@ 0x80
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f000 fcab 	bl	8010510 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fbba:	2100      	movs	r1, #0
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f000 fca7 	bl	8010510 <USBD_LL_StallEP>
}
 800fbc2:	bf00      	nop
 800fbc4:	3708      	adds	r7, #8
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}

0800fbca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fbca:	b580      	push	{r7, lr}
 800fbcc:	b086      	sub	sp, #24
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	60f8      	str	r0, [r7, #12]
 800fbd2:	60b9      	str	r1, [r7, #8]
 800fbd4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d036      	beq.n	800fc4e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fbe4:	6938      	ldr	r0, [r7, #16]
 800fbe6:	f000 f836 	bl	800fc56 <USBD_GetLen>
 800fbea:	4603      	mov	r3, r0
 800fbec:	3301      	adds	r3, #1
 800fbee:	b29b      	uxth	r3, r3
 800fbf0:	005b      	lsls	r3, r3, #1
 800fbf2:	b29a      	uxth	r2, r3
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fbf8:	7dfb      	ldrb	r3, [r7, #23]
 800fbfa:	68ba      	ldr	r2, [r7, #8]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	687a      	ldr	r2, [r7, #4]
 800fc00:	7812      	ldrb	r2, [r2, #0]
 800fc02:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc04:	7dfb      	ldrb	r3, [r7, #23]
 800fc06:	3301      	adds	r3, #1
 800fc08:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc0a:	7dfb      	ldrb	r3, [r7, #23]
 800fc0c:	68ba      	ldr	r2, [r7, #8]
 800fc0e:	4413      	add	r3, r2
 800fc10:	2203      	movs	r2, #3
 800fc12:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc14:	7dfb      	ldrb	r3, [r7, #23]
 800fc16:	3301      	adds	r3, #1
 800fc18:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fc1a:	e013      	b.n	800fc44 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fc1c:	7dfb      	ldrb	r3, [r7, #23]
 800fc1e:	68ba      	ldr	r2, [r7, #8]
 800fc20:	4413      	add	r3, r2
 800fc22:	693a      	ldr	r2, [r7, #16]
 800fc24:	7812      	ldrb	r2, [r2, #0]
 800fc26:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	3301      	adds	r3, #1
 800fc2c:	613b      	str	r3, [r7, #16]
    idx++;
 800fc2e:	7dfb      	ldrb	r3, [r7, #23]
 800fc30:	3301      	adds	r3, #1
 800fc32:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fc34:	7dfb      	ldrb	r3, [r7, #23]
 800fc36:	68ba      	ldr	r2, [r7, #8]
 800fc38:	4413      	add	r3, r2
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	701a      	strb	r2, [r3, #0]
    idx++;
 800fc3e:	7dfb      	ldrb	r3, [r7, #23]
 800fc40:	3301      	adds	r3, #1
 800fc42:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d1e7      	bne.n	800fc1c <USBD_GetString+0x52>
 800fc4c:	e000      	b.n	800fc50 <USBD_GetString+0x86>
    return;
 800fc4e:	bf00      	nop
  }
}
 800fc50:	3718      	adds	r7, #24
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}

0800fc56 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fc56:	b480      	push	{r7}
 800fc58:	b085      	sub	sp, #20
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fc66:	e005      	b.n	800fc74 <USBD_GetLen+0x1e>
  {
    len++;
 800fc68:	7bfb      	ldrb	r3, [r7, #15]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	3301      	adds	r3, #1
 800fc72:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fc74:	68bb      	ldr	r3, [r7, #8]
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d1f5      	bne.n	800fc68 <USBD_GetLen+0x12>
  }

  return len;
 800fc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc7e:	4618      	mov	r0, r3
 800fc80:	3714      	adds	r7, #20
 800fc82:	46bd      	mov	sp, r7
 800fc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc88:	4770      	bx	lr

0800fc8a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b084      	sub	sp, #16
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	60f8      	str	r0, [r7, #12]
 800fc92:	60b9      	str	r1, [r7, #8]
 800fc94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	2202      	movs	r2, #2
 800fc9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	687a      	ldr	r2, [r7, #4]
 800fca8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	68ba      	ldr	r2, [r7, #8]
 800fcae:	2100      	movs	r1, #0
 800fcb0:	68f8      	ldr	r0, [r7, #12]
 800fcb2:	f000 fcb6 	bl	8010622 <USBD_LL_Transmit>

  return USBD_OK;
 800fcb6:	2300      	movs	r3, #0
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3710      	adds	r7, #16
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b084      	sub	sp, #16
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	60f8      	str	r0, [r7, #12]
 800fcc8:	60b9      	str	r1, [r7, #8]
 800fcca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	68ba      	ldr	r2, [r7, #8]
 800fcd0:	2100      	movs	r1, #0
 800fcd2:	68f8      	ldr	r0, [r7, #12]
 800fcd4:	f000 fca5 	bl	8010622 <USBD_LL_Transmit>

  return USBD_OK;
 800fcd8:	2300      	movs	r3, #0
}
 800fcda:	4618      	mov	r0, r3
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}

0800fce2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fce2:	b580      	push	{r7, lr}
 800fce4:	b084      	sub	sp, #16
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	60f8      	str	r0, [r7, #12]
 800fcea:	60b9      	str	r1, [r7, #8]
 800fcec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	2203      	movs	r2, #3
 800fcf2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	687a      	ldr	r2, [r7, #4]
 800fcfa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	68ba      	ldr	r2, [r7, #8]
 800fd0a:	2100      	movs	r1, #0
 800fd0c:	68f8      	ldr	r0, [r7, #12]
 800fd0e:	f000 fca9 	bl	8010664 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd12:	2300      	movs	r3, #0
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3710      	adds	r7, #16
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}

0800fd1c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b084      	sub	sp, #16
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	60f8      	str	r0, [r7, #12]
 800fd24:	60b9      	str	r1, [r7, #8]
 800fd26:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	68ba      	ldr	r2, [r7, #8]
 800fd2c:	2100      	movs	r1, #0
 800fd2e:	68f8      	ldr	r0, [r7, #12]
 800fd30:	f000 fc98 	bl	8010664 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd34:	2300      	movs	r3, #0
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3710      	adds	r7, #16
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b082      	sub	sp, #8
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2204      	movs	r2, #4
 800fd4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fd4e:	2300      	movs	r3, #0
 800fd50:	2200      	movs	r2, #0
 800fd52:	2100      	movs	r1, #0
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f000 fc64 	bl	8010622 <USBD_LL_Transmit>

  return USBD_OK;
 800fd5a:	2300      	movs	r3, #0
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3708      	adds	r7, #8
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}

0800fd64 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2205      	movs	r2, #5
 800fd70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd74:	2300      	movs	r3, #0
 800fd76:	2200      	movs	r2, #0
 800fd78:	2100      	movs	r1, #0
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f000 fc72 	bl	8010664 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd80:	2300      	movs	r3, #0
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3708      	adds	r7, #8
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
	...

0800fd8c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800fd90:	2200      	movs	r2, #0
 800fd92:	4912      	ldr	r1, [pc, #72]	@ (800fddc <MX_USB_Device_Init+0x50>)
 800fd94:	4812      	ldr	r0, [pc, #72]	@ (800fde0 <MX_USB_Device_Init+0x54>)
 800fd96:	f7fe fed9 	bl	800eb4c <USBD_Init>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d001      	beq.n	800fda4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800fda0:	f7f3 fc76 	bl	8003690 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800fda4:	490f      	ldr	r1, [pc, #60]	@ (800fde4 <MX_USB_Device_Init+0x58>)
 800fda6:	480e      	ldr	r0, [pc, #56]	@ (800fde0 <MX_USB_Device_Init+0x54>)
 800fda8:	f7fe ff00 	bl	800ebac <USBD_RegisterClass>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d001      	beq.n	800fdb6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800fdb2:	f7f3 fc6d 	bl	8003690 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800fdb6:	490c      	ldr	r1, [pc, #48]	@ (800fde8 <MX_USB_Device_Init+0x5c>)
 800fdb8:	4809      	ldr	r0, [pc, #36]	@ (800fde0 <MX_USB_Device_Init+0x54>)
 800fdba:	f7fe fe21 	bl	800ea00 <USBD_CDC_RegisterInterface>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d001      	beq.n	800fdc8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800fdc4:	f7f3 fc64 	bl	8003690 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800fdc8:	4805      	ldr	r0, [pc, #20]	@ (800fde0 <MX_USB_Device_Init+0x54>)
 800fdca:	f7fe ff16 	bl	800ebfa <USBD_Start>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d001      	beq.n	800fdd8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800fdd4:	f7f3 fc5c 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800fdd8:	bf00      	nop
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	2000016c 	.word	0x2000016c
 800fde0:	20000b90 	.word	0x20000b90
 800fde4:	20000054 	.word	0x20000054
 800fde8:	20000158 	.word	0x20000158

0800fdec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	4905      	ldr	r1, [pc, #20]	@ (800fe08 <CDC_Init_FS+0x1c>)
 800fdf4:	4805      	ldr	r0, [pc, #20]	@ (800fe0c <CDC_Init_FS+0x20>)
 800fdf6:	f7fe fe18 	bl	800ea2a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fdfa:	4905      	ldr	r1, [pc, #20]	@ (800fe10 <CDC_Init_FS+0x24>)
 800fdfc:	4803      	ldr	r0, [pc, #12]	@ (800fe0c <CDC_Init_FS+0x20>)
 800fdfe:	f7fe fe32 	bl	800ea66 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fe02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	20001660 	.word	0x20001660
 800fe0c:	20000b90 	.word	0x20000b90
 800fe10:	20000e60 	.word	0x20000e60

0800fe14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fe14:	b480      	push	{r7}
 800fe16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fe18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr

0800fe24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b083      	sub	sp, #12
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	6039      	str	r1, [r7, #0]
 800fe2e:	71fb      	strb	r3, [r7, #7]
 800fe30:	4613      	mov	r3, r2
 800fe32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fe34:	79fb      	ldrb	r3, [r7, #7]
 800fe36:	2b23      	cmp	r3, #35	@ 0x23
 800fe38:	d84a      	bhi.n	800fed0 <CDC_Control_FS+0xac>
 800fe3a:	a201      	add	r2, pc, #4	@ (adr r2, 800fe40 <CDC_Control_FS+0x1c>)
 800fe3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe40:	0800fed1 	.word	0x0800fed1
 800fe44:	0800fed1 	.word	0x0800fed1
 800fe48:	0800fed1 	.word	0x0800fed1
 800fe4c:	0800fed1 	.word	0x0800fed1
 800fe50:	0800fed1 	.word	0x0800fed1
 800fe54:	0800fed1 	.word	0x0800fed1
 800fe58:	0800fed1 	.word	0x0800fed1
 800fe5c:	0800fed1 	.word	0x0800fed1
 800fe60:	0800fed1 	.word	0x0800fed1
 800fe64:	0800fed1 	.word	0x0800fed1
 800fe68:	0800fed1 	.word	0x0800fed1
 800fe6c:	0800fed1 	.word	0x0800fed1
 800fe70:	0800fed1 	.word	0x0800fed1
 800fe74:	0800fed1 	.word	0x0800fed1
 800fe78:	0800fed1 	.word	0x0800fed1
 800fe7c:	0800fed1 	.word	0x0800fed1
 800fe80:	0800fed1 	.word	0x0800fed1
 800fe84:	0800fed1 	.word	0x0800fed1
 800fe88:	0800fed1 	.word	0x0800fed1
 800fe8c:	0800fed1 	.word	0x0800fed1
 800fe90:	0800fed1 	.word	0x0800fed1
 800fe94:	0800fed1 	.word	0x0800fed1
 800fe98:	0800fed1 	.word	0x0800fed1
 800fe9c:	0800fed1 	.word	0x0800fed1
 800fea0:	0800fed1 	.word	0x0800fed1
 800fea4:	0800fed1 	.word	0x0800fed1
 800fea8:	0800fed1 	.word	0x0800fed1
 800feac:	0800fed1 	.word	0x0800fed1
 800feb0:	0800fed1 	.word	0x0800fed1
 800feb4:	0800fed1 	.word	0x0800fed1
 800feb8:	0800fed1 	.word	0x0800fed1
 800febc:	0800fed1 	.word	0x0800fed1
 800fec0:	0800fed1 	.word	0x0800fed1
 800fec4:	0800fed1 	.word	0x0800fed1
 800fec8:	0800fed1 	.word	0x0800fed1
 800fecc:	0800fed1 	.word	0x0800fed1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fed0:	bf00      	nop
  }

  return (USBD_OK);
 800fed2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr

0800fee0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
 800fee8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > sizeof(USB_RX_Buffer)) {
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fef2:	d903      	bls.n	800fefc <CDC_Receive_FS+0x1c>
	          *Len = sizeof(USB_RX_Buffer);  // Prevent buffer overflow
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fefa:	601a      	str	r2, [r3, #0]
	      }
	      memcpy(USB_RX_Buffer, Buf, *Len);
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	461a      	mov	r2, r3
 800ff02:	6879      	ldr	r1, [r7, #4]
 800ff04:	4808      	ldr	r0, [pc, #32]	@ (800ff28 <CDC_Receive_FS+0x48>)
 800ff06:	f001 fcb0 	bl	801186a <memcpy>

	      dataReceivedFlag = 1;
 800ff0a:	4b08      	ldr	r3, [pc, #32]	@ (800ff2c <CDC_Receive_FS+0x4c>)
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	601a      	str	r2, [r3, #0]

	      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ff10:	6879      	ldr	r1, [r7, #4]
 800ff12:	4807      	ldr	r0, [pc, #28]	@ (800ff30 <CDC_Receive_FS+0x50>)
 800ff14:	f7fe fda7 	bl	800ea66 <USBD_CDC_SetRxBuffer>
	      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ff18:	4805      	ldr	r0, [pc, #20]	@ (800ff30 <CDC_Receive_FS+0x50>)
 800ff1a:	f7fe fded 	bl	800eaf8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ff1e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	20000a98 	.word	0x20000a98
 800ff2c:	20000b58 	.word	0x20000b58
 800ff30:	20000b90 	.word	0x20000b90

0800ff34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ff40:	2300      	movs	r3, #0
 800ff42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ff44:	4b0d      	ldr	r3, [pc, #52]	@ (800ff7c <CDC_Transmit_FS+0x48>)
 800ff46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ff4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d001      	beq.n	800ff5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ff56:	2301      	movs	r3, #1
 800ff58:	e00b      	b.n	800ff72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ff5a:	887b      	ldrh	r3, [r7, #2]
 800ff5c:	461a      	mov	r2, r3
 800ff5e:	6879      	ldr	r1, [r7, #4]
 800ff60:	4806      	ldr	r0, [pc, #24]	@ (800ff7c <CDC_Transmit_FS+0x48>)
 800ff62:	f7fe fd62 	bl	800ea2a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ff66:	4805      	ldr	r0, [pc, #20]	@ (800ff7c <CDC_Transmit_FS+0x48>)
 800ff68:	f7fe fd96 	bl	800ea98 <USBD_CDC_TransmitPacket>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ff70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	3710      	adds	r7, #16
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	20000b90 	.word	0x20000b90

0800ff80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b087      	sub	sp, #28
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	60f8      	str	r0, [r7, #12]
 800ff88:	60b9      	str	r1, [r7, #8]
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ff92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	371c      	adds	r7, #28
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa0:	4770      	bx	lr
	...

0800ffa4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b083      	sub	sp, #12
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	4603      	mov	r3, r0
 800ffac:	6039      	str	r1, [r7, #0]
 800ffae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	2212      	movs	r2, #18
 800ffb4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ffb6:	4b03      	ldr	r3, [pc, #12]	@ (800ffc4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	370c      	adds	r7, #12
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr
 800ffc4:	2000018c 	.word	0x2000018c

0800ffc8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b083      	sub	sp, #12
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	4603      	mov	r3, r0
 800ffd0:	6039      	str	r1, [r7, #0]
 800ffd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	2204      	movs	r2, #4
 800ffd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ffda:	4b03      	ldr	r3, [pc, #12]	@ (800ffe8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	370c      	adds	r7, #12
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr
 800ffe8:	200001a0 	.word	0x200001a0

0800ffec <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	4603      	mov	r3, r0
 800fff4:	6039      	str	r1, [r7, #0]
 800fff6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fff8:	79fb      	ldrb	r3, [r7, #7]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d105      	bne.n	801000a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800fffe:	683a      	ldr	r2, [r7, #0]
 8010000:	4907      	ldr	r1, [pc, #28]	@ (8010020 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010002:	4808      	ldr	r0, [pc, #32]	@ (8010024 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010004:	f7ff fde1 	bl	800fbca <USBD_GetString>
 8010008:	e004      	b.n	8010014 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801000a:	683a      	ldr	r2, [r7, #0]
 801000c:	4904      	ldr	r1, [pc, #16]	@ (8010020 <USBD_CDC_ProductStrDescriptor+0x34>)
 801000e:	4805      	ldr	r0, [pc, #20]	@ (8010024 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010010:	f7ff fddb 	bl	800fbca <USBD_GetString>
  }
  return USBD_StrDesc;
 8010014:	4b02      	ldr	r3, [pc, #8]	@ (8010020 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8010016:	4618      	mov	r0, r3
 8010018:	3708      	adds	r7, #8
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
 801001e:	bf00      	nop
 8010020:	20001e60 	.word	0x20001e60
 8010024:	08016e64 	.word	0x08016e64

08010028 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
 801002e:	4603      	mov	r3, r0
 8010030:	6039      	str	r1, [r7, #0]
 8010032:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010034:	683a      	ldr	r2, [r7, #0]
 8010036:	4904      	ldr	r1, [pc, #16]	@ (8010048 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8010038:	4804      	ldr	r0, [pc, #16]	@ (801004c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801003a:	f7ff fdc6 	bl	800fbca <USBD_GetString>
  return USBD_StrDesc;
 801003e:	4b02      	ldr	r3, [pc, #8]	@ (8010048 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010040:	4618      	mov	r0, r3
 8010042:	3708      	adds	r7, #8
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}
 8010048:	20001e60 	.word	0x20001e60
 801004c:	08016e7c 	.word	0x08016e7c

08010050 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	4603      	mov	r3, r0
 8010058:	6039      	str	r1, [r7, #0]
 801005a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	221a      	movs	r2, #26
 8010060:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010062:	f000 f843 	bl	80100ec <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010066:	4b02      	ldr	r3, [pc, #8]	@ (8010070 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8010068:	4618      	mov	r0, r3
 801006a:	3708      	adds	r7, #8
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	200001a4 	.word	0x200001a4

08010074 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	4603      	mov	r3, r0
 801007c:	6039      	str	r1, [r7, #0]
 801007e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010080:	79fb      	ldrb	r3, [r7, #7]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d105      	bne.n	8010092 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010086:	683a      	ldr	r2, [r7, #0]
 8010088:	4907      	ldr	r1, [pc, #28]	@ (80100a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801008a:	4808      	ldr	r0, [pc, #32]	@ (80100ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 801008c:	f7ff fd9d 	bl	800fbca <USBD_GetString>
 8010090:	e004      	b.n	801009c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010092:	683a      	ldr	r2, [r7, #0]
 8010094:	4904      	ldr	r1, [pc, #16]	@ (80100a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010096:	4805      	ldr	r0, [pc, #20]	@ (80100ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010098:	f7ff fd97 	bl	800fbca <USBD_GetString>
  }
  return USBD_StrDesc;
 801009c:	4b02      	ldr	r3, [pc, #8]	@ (80100a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3708      	adds	r7, #8
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	20001e60 	.word	0x20001e60
 80100ac:	08016e90 	.word	0x08016e90

080100b0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	4603      	mov	r3, r0
 80100b8:	6039      	str	r1, [r7, #0]
 80100ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80100bc:	79fb      	ldrb	r3, [r7, #7]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d105      	bne.n	80100ce <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80100c2:	683a      	ldr	r2, [r7, #0]
 80100c4:	4907      	ldr	r1, [pc, #28]	@ (80100e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80100c6:	4808      	ldr	r0, [pc, #32]	@ (80100e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80100c8:	f7ff fd7f 	bl	800fbca <USBD_GetString>
 80100cc:	e004      	b.n	80100d8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80100ce:	683a      	ldr	r2, [r7, #0]
 80100d0:	4904      	ldr	r1, [pc, #16]	@ (80100e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80100d2:	4805      	ldr	r0, [pc, #20]	@ (80100e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80100d4:	f7ff fd79 	bl	800fbca <USBD_GetString>
  }
  return USBD_StrDesc;
 80100d8:	4b02      	ldr	r3, [pc, #8]	@ (80100e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80100da:	4618      	mov	r0, r3
 80100dc:	3708      	adds	r7, #8
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}
 80100e2:	bf00      	nop
 80100e4:	20001e60 	.word	0x20001e60
 80100e8:	08016e9c 	.word	0x08016e9c

080100ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80100f2:	4b0f      	ldr	r3, [pc, #60]	@ (8010130 <Get_SerialNum+0x44>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80100f8:	4b0e      	ldr	r3, [pc, #56]	@ (8010134 <Get_SerialNum+0x48>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80100fe:	4b0e      	ldr	r3, [pc, #56]	@ (8010138 <Get_SerialNum+0x4c>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010104:	68fa      	ldr	r2, [r7, #12]
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	4413      	add	r3, r2
 801010a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d009      	beq.n	8010126 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010112:	2208      	movs	r2, #8
 8010114:	4909      	ldr	r1, [pc, #36]	@ (801013c <Get_SerialNum+0x50>)
 8010116:	68f8      	ldr	r0, [r7, #12]
 8010118:	f000 f814 	bl	8010144 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801011c:	2204      	movs	r2, #4
 801011e:	4908      	ldr	r1, [pc, #32]	@ (8010140 <Get_SerialNum+0x54>)
 8010120:	68b8      	ldr	r0, [r7, #8]
 8010122:	f000 f80f 	bl	8010144 <IntToUnicode>
  }
}
 8010126:	bf00      	nop
 8010128:	3710      	adds	r7, #16
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	1fff7590 	.word	0x1fff7590
 8010134:	1fff7594 	.word	0x1fff7594
 8010138:	1fff7598 	.word	0x1fff7598
 801013c:	200001a6 	.word	0x200001a6
 8010140:	200001b6 	.word	0x200001b6

08010144 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010144:	b480      	push	{r7}
 8010146:	b087      	sub	sp, #28
 8010148:	af00      	add	r7, sp, #0
 801014a:	60f8      	str	r0, [r7, #12]
 801014c:	60b9      	str	r1, [r7, #8]
 801014e:	4613      	mov	r3, r2
 8010150:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010152:	2300      	movs	r3, #0
 8010154:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010156:	2300      	movs	r3, #0
 8010158:	75fb      	strb	r3, [r7, #23]
 801015a:	e027      	b.n	80101ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	0f1b      	lsrs	r3, r3, #28
 8010160:	2b09      	cmp	r3, #9
 8010162:	d80b      	bhi.n	801017c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	0f1b      	lsrs	r3, r3, #28
 8010168:	b2da      	uxtb	r2, r3
 801016a:	7dfb      	ldrb	r3, [r7, #23]
 801016c:	005b      	lsls	r3, r3, #1
 801016e:	4619      	mov	r1, r3
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	440b      	add	r3, r1
 8010174:	3230      	adds	r2, #48	@ 0x30
 8010176:	b2d2      	uxtb	r2, r2
 8010178:	701a      	strb	r2, [r3, #0]
 801017a:	e00a      	b.n	8010192 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	0f1b      	lsrs	r3, r3, #28
 8010180:	b2da      	uxtb	r2, r3
 8010182:	7dfb      	ldrb	r3, [r7, #23]
 8010184:	005b      	lsls	r3, r3, #1
 8010186:	4619      	mov	r1, r3
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	440b      	add	r3, r1
 801018c:	3237      	adds	r2, #55	@ 0x37
 801018e:	b2d2      	uxtb	r2, r2
 8010190:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	011b      	lsls	r3, r3, #4
 8010196:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010198:	7dfb      	ldrb	r3, [r7, #23]
 801019a:	005b      	lsls	r3, r3, #1
 801019c:	3301      	adds	r3, #1
 801019e:	68ba      	ldr	r2, [r7, #8]
 80101a0:	4413      	add	r3, r2
 80101a2:	2200      	movs	r2, #0
 80101a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80101a6:	7dfb      	ldrb	r3, [r7, #23]
 80101a8:	3301      	adds	r3, #1
 80101aa:	75fb      	strb	r3, [r7, #23]
 80101ac:	7dfa      	ldrb	r2, [r7, #23]
 80101ae:	79fb      	ldrb	r3, [r7, #7]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d3d3      	bcc.n	801015c <IntToUnicode+0x18>
  }
}
 80101b4:	bf00      	nop
 80101b6:	bf00      	nop
 80101b8:	371c      	adds	r7, #28
 80101ba:	46bd      	mov	sp, r7
 80101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c0:	4770      	bx	lr
	...

080101c4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b098      	sub	sp, #96	@ 0x60
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80101cc:	f107 030c 	add.w	r3, r7, #12
 80101d0:	2254      	movs	r2, #84	@ 0x54
 80101d2:	2100      	movs	r1, #0
 80101d4:	4618      	mov	r0, r3
 80101d6:	f001 fab6 	bl	8011746 <memset>
  if(pcdHandle->Instance==USB)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	4a15      	ldr	r2, [pc, #84]	@ (8010234 <HAL_PCD_MspInit+0x70>)
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d122      	bne.n	801022a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80101e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80101e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80101ea:	2300      	movs	r3, #0
 80101ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80101ee:	f107 030c 	add.w	r3, r7, #12
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7f9 f8c6 	bl	8009384 <HAL_RCCEx_PeriphCLKConfig>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d001      	beq.n	8010202 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80101fe:	f7f3 fa47 	bl	8003690 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010202:	4b0d      	ldr	r3, [pc, #52]	@ (8010238 <HAL_PCD_MspInit+0x74>)
 8010204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010206:	4a0c      	ldr	r2, [pc, #48]	@ (8010238 <HAL_PCD_MspInit+0x74>)
 8010208:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801020c:	6593      	str	r3, [r2, #88]	@ 0x58
 801020e:	4b0a      	ldr	r3, [pc, #40]	@ (8010238 <HAL_PCD_MspInit+0x74>)
 8010210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010212:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010216:	60bb      	str	r3, [r7, #8]
 8010218:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801021a:	2200      	movs	r2, #0
 801021c:	2100      	movs	r1, #0
 801021e:	2014      	movs	r0, #20
 8010220:	f7f5 fe47 	bl	8005eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010224:	2014      	movs	r0, #20
 8010226:	f7f5 fe5e 	bl	8005ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801022a:	bf00      	nop
 801022c:	3760      	adds	r7, #96	@ 0x60
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	40005c00 	.word	0x40005c00
 8010238:	40021000 	.word	0x40021000

0801023c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8010250:	4619      	mov	r1, r3
 8010252:	4610      	mov	r0, r2
 8010254:	f7fe fd1c 	bl	800ec90 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010258:	bf00      	nop
 801025a:	3708      	adds	r7, #8
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b082      	sub	sp, #8
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	460b      	mov	r3, r1
 801026a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010272:	78fa      	ldrb	r2, [r7, #3]
 8010274:	6879      	ldr	r1, [r7, #4]
 8010276:	4613      	mov	r3, r2
 8010278:	009b      	lsls	r3, r3, #2
 801027a:	4413      	add	r3, r2
 801027c:	00db      	lsls	r3, r3, #3
 801027e:	440b      	add	r3, r1
 8010280:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010284:	681a      	ldr	r2, [r3, #0]
 8010286:	78fb      	ldrb	r3, [r7, #3]
 8010288:	4619      	mov	r1, r3
 801028a:	f7fe fd56 	bl	800ed3a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801028e:	bf00      	nop
 8010290:	3708      	adds	r7, #8
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}

08010296 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010296:	b580      	push	{r7, lr}
 8010298:	b082      	sub	sp, #8
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
 801029e:	460b      	mov	r3, r1
 80102a0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80102a8:	78fa      	ldrb	r2, [r7, #3]
 80102aa:	6879      	ldr	r1, [r7, #4]
 80102ac:	4613      	mov	r3, r2
 80102ae:	009b      	lsls	r3, r3, #2
 80102b0:	4413      	add	r3, r2
 80102b2:	00db      	lsls	r3, r3, #3
 80102b4:	440b      	add	r3, r1
 80102b6:	3324      	adds	r3, #36	@ 0x24
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	78fb      	ldrb	r3, [r7, #3]
 80102bc:	4619      	mov	r1, r3
 80102be:	f7fe fd9f 	bl	800ee00 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80102c2:	bf00      	nop
 80102c4:	3708      	adds	r7, #8
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}

080102ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102ca:	b580      	push	{r7, lr}
 80102cc:	b082      	sub	sp, #8
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80102d8:	4618      	mov	r0, r3
 80102da:	f7fe feb3 	bl	800f044 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80102de:	bf00      	nop
 80102e0:	3708      	adds	r7, #8
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}

080102e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102e6:	b580      	push	{r7, lr}
 80102e8:	b084      	sub	sp, #16
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80102ee:	2301      	movs	r3, #1
 80102f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	795b      	ldrb	r3, [r3, #5]
 80102f6:	2b02      	cmp	r3, #2
 80102f8:	d001      	beq.n	80102fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80102fa:	f7f3 f9c9 	bl	8003690 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010304:	7bfa      	ldrb	r2, [r7, #15]
 8010306:	4611      	mov	r1, r2
 8010308:	4618      	mov	r0, r3
 801030a:	f7fe fe5d 	bl	800efc8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010314:	4618      	mov	r0, r3
 8010316:	f7fe fe09 	bl	800ef2c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801031a:	bf00      	nop
 801031c:	3710      	adds	r7, #16
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
	...

08010324 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010332:	4618      	mov	r0, r3
 8010334:	f7fe fe58 	bl	800efe8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	7a5b      	ldrb	r3, [r3, #9]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d005      	beq.n	801034c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010340:	4b04      	ldr	r3, [pc, #16]	@ (8010354 <HAL_PCD_SuspendCallback+0x30>)
 8010342:	691b      	ldr	r3, [r3, #16]
 8010344:	4a03      	ldr	r2, [pc, #12]	@ (8010354 <HAL_PCD_SuspendCallback+0x30>)
 8010346:	f043 0306 	orr.w	r3, r3, #6
 801034a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801034c:	bf00      	nop
 801034e:	3708      	adds	r7, #8
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}
 8010354:	e000ed00 	.word	0xe000ed00

08010358 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	7a5b      	ldrb	r3, [r3, #9]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d007      	beq.n	8010378 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010368:	4b08      	ldr	r3, [pc, #32]	@ (801038c <HAL_PCD_ResumeCallback+0x34>)
 801036a:	691b      	ldr	r3, [r3, #16]
 801036c:	4a07      	ldr	r2, [pc, #28]	@ (801038c <HAL_PCD_ResumeCallback+0x34>)
 801036e:	f023 0306 	bic.w	r3, r3, #6
 8010372:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010374:	f000 f9f8 	bl	8010768 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801037e:	4618      	mov	r0, r3
 8010380:	f7fe fe48 	bl	800f014 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010384:	bf00      	nop
 8010386:	3708      	adds	r7, #8
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}
 801038c:	e000ed00 	.word	0xe000ed00

08010390 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010398:	4a2b      	ldr	r2, [pc, #172]	@ (8010448 <USBD_LL_Init+0xb8>)
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4a29      	ldr	r2, [pc, #164]	@ (8010448 <USBD_LL_Init+0xb8>)
 80103a4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 80103a8:	4b27      	ldr	r3, [pc, #156]	@ (8010448 <USBD_LL_Init+0xb8>)
 80103aa:	4a28      	ldr	r2, [pc, #160]	@ (801044c <USBD_LL_Init+0xbc>)
 80103ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80103ae:	4b26      	ldr	r3, [pc, #152]	@ (8010448 <USBD_LL_Init+0xb8>)
 80103b0:	2208      	movs	r2, #8
 80103b2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80103b4:	4b24      	ldr	r3, [pc, #144]	@ (8010448 <USBD_LL_Init+0xb8>)
 80103b6:	2202      	movs	r2, #2
 80103b8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80103ba:	4b23      	ldr	r3, [pc, #140]	@ (8010448 <USBD_LL_Init+0xb8>)
 80103bc:	2202      	movs	r2, #2
 80103be:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80103c0:	4b21      	ldr	r3, [pc, #132]	@ (8010448 <USBD_LL_Init+0xb8>)
 80103c2:	2200      	movs	r2, #0
 80103c4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80103c6:	4b20      	ldr	r3, [pc, #128]	@ (8010448 <USBD_LL_Init+0xb8>)
 80103c8:	2200      	movs	r2, #0
 80103ca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80103cc:	4b1e      	ldr	r3, [pc, #120]	@ (8010448 <USBD_LL_Init+0xb8>)
 80103ce:	2200      	movs	r2, #0
 80103d0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80103d2:	4b1d      	ldr	r3, [pc, #116]	@ (8010448 <USBD_LL_Init+0xb8>)
 80103d4:	2200      	movs	r2, #0
 80103d6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80103d8:	481b      	ldr	r0, [pc, #108]	@ (8010448 <USBD_LL_Init+0xb8>)
 80103da:	f7f6 fcbb 	bl	8006d54 <HAL_PCD_Init>
 80103de:	4603      	mov	r3, r0
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d001      	beq.n	80103e8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80103e4:	f7f3 f954 	bl	8003690 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80103ee:	2318      	movs	r3, #24
 80103f0:	2200      	movs	r2, #0
 80103f2:	2100      	movs	r1, #0
 80103f4:	f7f8 f976 	bl	80086e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80103fe:	2358      	movs	r3, #88	@ 0x58
 8010400:	2200      	movs	r2, #0
 8010402:	2180      	movs	r1, #128	@ 0x80
 8010404:	f7f8 f96e 	bl	80086e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801040e:	23c0      	movs	r3, #192	@ 0xc0
 8010410:	2200      	movs	r2, #0
 8010412:	2181      	movs	r1, #129	@ 0x81
 8010414:	f7f8 f966 	bl	80086e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801041e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8010422:	2200      	movs	r2, #0
 8010424:	2101      	movs	r1, #1
 8010426:	f7f8 f95d 	bl	80086e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010430:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010434:	2200      	movs	r2, #0
 8010436:	2182      	movs	r1, #130	@ 0x82
 8010438:	f7f8 f954 	bl	80086e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801043c:	2300      	movs	r3, #0
}
 801043e:	4618      	mov	r0, r3
 8010440:	3708      	adds	r7, #8
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
 8010446:	bf00      	nop
 8010448:	20002060 	.word	0x20002060
 801044c:	40005c00 	.word	0x40005c00

08010450 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010458:	2300      	movs	r3, #0
 801045a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801045c:	2300      	movs	r3, #0
 801045e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010466:	4618      	mov	r0, r3
 8010468:	f7f6 fd42 	bl	8006ef0 <HAL_PCD_Start>
 801046c:	4603      	mov	r3, r0
 801046e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010470:	7bfb      	ldrb	r3, [r7, #15]
 8010472:	4618      	mov	r0, r3
 8010474:	f000 f97e 	bl	8010774 <USBD_Get_USB_Status>
 8010478:	4603      	mov	r3, r0
 801047a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801047c:	7bbb      	ldrb	r3, [r7, #14]
}
 801047e:	4618      	mov	r0, r3
 8010480:	3710      	adds	r7, #16
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}

08010486 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010486:	b580      	push	{r7, lr}
 8010488:	b084      	sub	sp, #16
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	4608      	mov	r0, r1
 8010490:	4611      	mov	r1, r2
 8010492:	461a      	mov	r2, r3
 8010494:	4603      	mov	r3, r0
 8010496:	70fb      	strb	r3, [r7, #3]
 8010498:	460b      	mov	r3, r1
 801049a:	70bb      	strb	r3, [r7, #2]
 801049c:	4613      	mov	r3, r2
 801049e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104a0:	2300      	movs	r3, #0
 80104a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104a4:	2300      	movs	r3, #0
 80104a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80104ae:	78bb      	ldrb	r3, [r7, #2]
 80104b0:	883a      	ldrh	r2, [r7, #0]
 80104b2:	78f9      	ldrb	r1, [r7, #3]
 80104b4:	f7f6 fe89 	bl	80071ca <HAL_PCD_EP_Open>
 80104b8:	4603      	mov	r3, r0
 80104ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104bc:	7bfb      	ldrb	r3, [r7, #15]
 80104be:	4618      	mov	r0, r3
 80104c0:	f000 f958 	bl	8010774 <USBD_Get_USB_Status>
 80104c4:	4603      	mov	r3, r0
 80104c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3710      	adds	r7, #16
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}

080104d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104d2:	b580      	push	{r7, lr}
 80104d4:	b084      	sub	sp, #16
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
 80104da:	460b      	mov	r3, r1
 80104dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104de:	2300      	movs	r3, #0
 80104e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104e2:	2300      	movs	r3, #0
 80104e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80104ec:	78fa      	ldrb	r2, [r7, #3]
 80104ee:	4611      	mov	r1, r2
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7f6 fec9 	bl	8007288 <HAL_PCD_EP_Close>
 80104f6:	4603      	mov	r3, r0
 80104f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104fa:	7bfb      	ldrb	r3, [r7, #15]
 80104fc:	4618      	mov	r0, r3
 80104fe:	f000 f939 	bl	8010774 <USBD_Get_USB_Status>
 8010502:	4603      	mov	r3, r0
 8010504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010506:	7bbb      	ldrb	r3, [r7, #14]
}
 8010508:	4618      	mov	r0, r3
 801050a:	3710      	adds	r7, #16
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	460b      	mov	r3, r1
 801051a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801051c:	2300      	movs	r3, #0
 801051e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010520:	2300      	movs	r3, #0
 8010522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801052a:	78fa      	ldrb	r2, [r7, #3]
 801052c:	4611      	mov	r1, r2
 801052e:	4618      	mov	r0, r3
 8010530:	f7f6 ff72 	bl	8007418 <HAL_PCD_EP_SetStall>
 8010534:	4603      	mov	r3, r0
 8010536:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010538:	7bfb      	ldrb	r3, [r7, #15]
 801053a:	4618      	mov	r0, r3
 801053c:	f000 f91a 	bl	8010774 <USBD_Get_USB_Status>
 8010540:	4603      	mov	r3, r0
 8010542:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010544:	7bbb      	ldrb	r3, [r7, #14]
}
 8010546:	4618      	mov	r0, r3
 8010548:	3710      	adds	r7, #16
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}

0801054e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801054e:	b580      	push	{r7, lr}
 8010550:	b084      	sub	sp, #16
 8010552:	af00      	add	r7, sp, #0
 8010554:	6078      	str	r0, [r7, #4]
 8010556:	460b      	mov	r3, r1
 8010558:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801055a:	2300      	movs	r3, #0
 801055c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801055e:	2300      	movs	r3, #0
 8010560:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010568:	78fa      	ldrb	r2, [r7, #3]
 801056a:	4611      	mov	r1, r2
 801056c:	4618      	mov	r0, r3
 801056e:	f7f6 ffa5 	bl	80074bc <HAL_PCD_EP_ClrStall>
 8010572:	4603      	mov	r3, r0
 8010574:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010576:	7bfb      	ldrb	r3, [r7, #15]
 8010578:	4618      	mov	r0, r3
 801057a:	f000 f8fb 	bl	8010774 <USBD_Get_USB_Status>
 801057e:	4603      	mov	r3, r0
 8010580:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010582:	7bbb      	ldrb	r3, [r7, #14]
}
 8010584:	4618      	mov	r0, r3
 8010586:	3710      	adds	r7, #16
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801058c:	b480      	push	{r7}
 801058e:	b085      	sub	sp, #20
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	460b      	mov	r3, r1
 8010596:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801059e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80105a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	da0b      	bge.n	80105c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80105a8:	78fb      	ldrb	r3, [r7, #3]
 80105aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80105ae:	68f9      	ldr	r1, [r7, #12]
 80105b0:	4613      	mov	r3, r2
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	4413      	add	r3, r2
 80105b6:	00db      	lsls	r3, r3, #3
 80105b8:	440b      	add	r3, r1
 80105ba:	3312      	adds	r3, #18
 80105bc:	781b      	ldrb	r3, [r3, #0]
 80105be:	e00b      	b.n	80105d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80105c0:	78fb      	ldrb	r3, [r7, #3]
 80105c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80105c6:	68f9      	ldr	r1, [r7, #12]
 80105c8:	4613      	mov	r3, r2
 80105ca:	009b      	lsls	r3, r3, #2
 80105cc:	4413      	add	r3, r2
 80105ce:	00db      	lsls	r3, r3, #3
 80105d0:	440b      	add	r3, r1
 80105d2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80105d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3714      	adds	r7, #20
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr

080105e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b084      	sub	sp, #16
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	460b      	mov	r3, r1
 80105ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105f0:	2300      	movs	r3, #0
 80105f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105f4:	2300      	movs	r3, #0
 80105f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80105fe:	78fa      	ldrb	r2, [r7, #3]
 8010600:	4611      	mov	r1, r2
 8010602:	4618      	mov	r0, r3
 8010604:	f7f6 fdbd 	bl	8007182 <HAL_PCD_SetAddress>
 8010608:	4603      	mov	r3, r0
 801060a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801060c:	7bfb      	ldrb	r3, [r7, #15]
 801060e:	4618      	mov	r0, r3
 8010610:	f000 f8b0 	bl	8010774 <USBD_Get_USB_Status>
 8010614:	4603      	mov	r3, r0
 8010616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010618:	7bbb      	ldrb	r3, [r7, #14]
}
 801061a:	4618      	mov	r0, r3
 801061c:	3710      	adds	r7, #16
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}

08010622 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010622:	b580      	push	{r7, lr}
 8010624:	b086      	sub	sp, #24
 8010626:	af00      	add	r7, sp, #0
 8010628:	60f8      	str	r0, [r7, #12]
 801062a:	607a      	str	r2, [r7, #4]
 801062c:	603b      	str	r3, [r7, #0]
 801062e:	460b      	mov	r3, r1
 8010630:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010632:	2300      	movs	r3, #0
 8010634:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010636:	2300      	movs	r3, #0
 8010638:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010640:	7af9      	ldrb	r1, [r7, #11]
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	687a      	ldr	r2, [r7, #4]
 8010646:	f7f6 feb0 	bl	80073aa <HAL_PCD_EP_Transmit>
 801064a:	4603      	mov	r3, r0
 801064c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801064e:	7dfb      	ldrb	r3, [r7, #23]
 8010650:	4618      	mov	r0, r3
 8010652:	f000 f88f 	bl	8010774 <USBD_Get_USB_Status>
 8010656:	4603      	mov	r3, r0
 8010658:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801065a:	7dbb      	ldrb	r3, [r7, #22]
}
 801065c:	4618      	mov	r0, r3
 801065e:	3718      	adds	r7, #24
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}

08010664 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b086      	sub	sp, #24
 8010668:	af00      	add	r7, sp, #0
 801066a:	60f8      	str	r0, [r7, #12]
 801066c:	607a      	str	r2, [r7, #4]
 801066e:	603b      	str	r3, [r7, #0]
 8010670:	460b      	mov	r3, r1
 8010672:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010674:	2300      	movs	r3, #0
 8010676:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010678:	2300      	movs	r3, #0
 801067a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010682:	7af9      	ldrb	r1, [r7, #11]
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	687a      	ldr	r2, [r7, #4]
 8010688:	f7f6 fe46 	bl	8007318 <HAL_PCD_EP_Receive>
 801068c:	4603      	mov	r3, r0
 801068e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010690:	7dfb      	ldrb	r3, [r7, #23]
 8010692:	4618      	mov	r0, r3
 8010694:	f000 f86e 	bl	8010774 <USBD_Get_USB_Status>
 8010698:	4603      	mov	r3, r0
 801069a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801069c:	7dbb      	ldrb	r3, [r7, #22]
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3718      	adds	r7, #24
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}

080106a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106a6:	b580      	push	{r7, lr}
 80106a8:	b082      	sub	sp, #8
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
 80106ae:	460b      	mov	r3, r1
 80106b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80106b8:	78fa      	ldrb	r2, [r7, #3]
 80106ba:	4611      	mov	r1, r2
 80106bc:	4618      	mov	r0, r3
 80106be:	f7f6 fe5c 	bl	800737a <HAL_PCD_EP_GetRxCount>
 80106c2:	4603      	mov	r3, r0
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3708      	adds	r7, #8
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	460b      	mov	r3, r1
 80106d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80106d8:	78fb      	ldrb	r3, [r7, #3]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d002      	beq.n	80106e4 <HAL_PCDEx_LPM_Callback+0x18>
 80106de:	2b01      	cmp	r3, #1
 80106e0:	d013      	beq.n	801070a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80106e2:	e023      	b.n	801072c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	7a5b      	ldrb	r3, [r3, #9]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d007      	beq.n	80106fc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80106ec:	f000 f83c 	bl	8010768 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80106f0:	4b10      	ldr	r3, [pc, #64]	@ (8010734 <HAL_PCDEx_LPM_Callback+0x68>)
 80106f2:	691b      	ldr	r3, [r3, #16]
 80106f4:	4a0f      	ldr	r2, [pc, #60]	@ (8010734 <HAL_PCDEx_LPM_Callback+0x68>)
 80106f6:	f023 0306 	bic.w	r3, r3, #6
 80106fa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010702:	4618      	mov	r0, r3
 8010704:	f7fe fc86 	bl	800f014 <USBD_LL_Resume>
    break;
 8010708:	e010      	b.n	801072c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010710:	4618      	mov	r0, r3
 8010712:	f7fe fc69 	bl	800efe8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	7a5b      	ldrb	r3, [r3, #9]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d005      	beq.n	801072a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801071e:	4b05      	ldr	r3, [pc, #20]	@ (8010734 <HAL_PCDEx_LPM_Callback+0x68>)
 8010720:	691b      	ldr	r3, [r3, #16]
 8010722:	4a04      	ldr	r2, [pc, #16]	@ (8010734 <HAL_PCDEx_LPM_Callback+0x68>)
 8010724:	f043 0306 	orr.w	r3, r3, #6
 8010728:	6113      	str	r3, [r2, #16]
    break;
 801072a:	bf00      	nop
}
 801072c:	bf00      	nop
 801072e:	3708      	adds	r7, #8
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}
 8010734:	e000ed00 	.word	0xe000ed00

08010738 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010738:	b480      	push	{r7}
 801073a:	b083      	sub	sp, #12
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010740:	4b03      	ldr	r3, [pc, #12]	@ (8010750 <USBD_static_malloc+0x18>)
}
 8010742:	4618      	mov	r0, r3
 8010744:	370c      	adds	r7, #12
 8010746:	46bd      	mov	sp, r7
 8010748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074c:	4770      	bx	lr
 801074e:	bf00      	nop
 8010750:	2000233c 	.word	0x2000233c

08010754 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010754:	b480      	push	{r7}
 8010756:	b083      	sub	sp, #12
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]

}
 801075c:	bf00      	nop
 801075e:	370c      	adds	r7, #12
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr

08010768 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801076c:	f7f1 f880 	bl	8001870 <SystemClock_Config>
}
 8010770:	bf00      	nop
 8010772:	bd80      	pop	{r7, pc}

08010774 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010774:	b480      	push	{r7}
 8010776:	b085      	sub	sp, #20
 8010778:	af00      	add	r7, sp, #0
 801077a:	4603      	mov	r3, r0
 801077c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801077e:	2300      	movs	r3, #0
 8010780:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010782:	79fb      	ldrb	r3, [r7, #7]
 8010784:	2b03      	cmp	r3, #3
 8010786:	d817      	bhi.n	80107b8 <USBD_Get_USB_Status+0x44>
 8010788:	a201      	add	r2, pc, #4	@ (adr r2, 8010790 <USBD_Get_USB_Status+0x1c>)
 801078a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801078e:	bf00      	nop
 8010790:	080107a1 	.word	0x080107a1
 8010794:	080107a7 	.word	0x080107a7
 8010798:	080107ad 	.word	0x080107ad
 801079c:	080107b3 	.word	0x080107b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80107a0:	2300      	movs	r3, #0
 80107a2:	73fb      	strb	r3, [r7, #15]
    break;
 80107a4:	e00b      	b.n	80107be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80107a6:	2303      	movs	r3, #3
 80107a8:	73fb      	strb	r3, [r7, #15]
    break;
 80107aa:	e008      	b.n	80107be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80107ac:	2301      	movs	r3, #1
 80107ae:	73fb      	strb	r3, [r7, #15]
    break;
 80107b0:	e005      	b.n	80107be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80107b2:	2303      	movs	r3, #3
 80107b4:	73fb      	strb	r3, [r7, #15]
    break;
 80107b6:	e002      	b.n	80107be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80107b8:	2303      	movs	r3, #3
 80107ba:	73fb      	strb	r3, [r7, #15]
    break;
 80107bc:	bf00      	nop
  }
  return usb_status;
 80107be:	7bfb      	ldrb	r3, [r7, #15]
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3714      	adds	r7, #20
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr

080107cc <__cvt>:
 80107cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107d0:	ec57 6b10 	vmov	r6, r7, d0
 80107d4:	2f00      	cmp	r7, #0
 80107d6:	460c      	mov	r4, r1
 80107d8:	4619      	mov	r1, r3
 80107da:	463b      	mov	r3, r7
 80107dc:	bfbb      	ittet	lt
 80107de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80107e2:	461f      	movlt	r7, r3
 80107e4:	2300      	movge	r3, #0
 80107e6:	232d      	movlt	r3, #45	@ 0x2d
 80107e8:	700b      	strb	r3, [r1, #0]
 80107ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80107ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80107f0:	4691      	mov	r9, r2
 80107f2:	f023 0820 	bic.w	r8, r3, #32
 80107f6:	bfbc      	itt	lt
 80107f8:	4632      	movlt	r2, r6
 80107fa:	4616      	movlt	r6, r2
 80107fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010800:	d005      	beq.n	801080e <__cvt+0x42>
 8010802:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010806:	d100      	bne.n	801080a <__cvt+0x3e>
 8010808:	3401      	adds	r4, #1
 801080a:	2102      	movs	r1, #2
 801080c:	e000      	b.n	8010810 <__cvt+0x44>
 801080e:	2103      	movs	r1, #3
 8010810:	ab03      	add	r3, sp, #12
 8010812:	9301      	str	r3, [sp, #4]
 8010814:	ab02      	add	r3, sp, #8
 8010816:	9300      	str	r3, [sp, #0]
 8010818:	ec47 6b10 	vmov	d0, r6, r7
 801081c:	4653      	mov	r3, sl
 801081e:	4622      	mov	r2, r4
 8010820:	f001 f8c2 	bl	80119a8 <_dtoa_r>
 8010824:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010828:	4605      	mov	r5, r0
 801082a:	d119      	bne.n	8010860 <__cvt+0x94>
 801082c:	f019 0f01 	tst.w	r9, #1
 8010830:	d00e      	beq.n	8010850 <__cvt+0x84>
 8010832:	eb00 0904 	add.w	r9, r0, r4
 8010836:	2200      	movs	r2, #0
 8010838:	2300      	movs	r3, #0
 801083a:	4630      	mov	r0, r6
 801083c:	4639      	mov	r1, r7
 801083e:	f7f0 f96b 	bl	8000b18 <__aeabi_dcmpeq>
 8010842:	b108      	cbz	r0, 8010848 <__cvt+0x7c>
 8010844:	f8cd 900c 	str.w	r9, [sp, #12]
 8010848:	2230      	movs	r2, #48	@ 0x30
 801084a:	9b03      	ldr	r3, [sp, #12]
 801084c:	454b      	cmp	r3, r9
 801084e:	d31e      	bcc.n	801088e <__cvt+0xc2>
 8010850:	9b03      	ldr	r3, [sp, #12]
 8010852:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010854:	1b5b      	subs	r3, r3, r5
 8010856:	4628      	mov	r0, r5
 8010858:	6013      	str	r3, [r2, #0]
 801085a:	b004      	add	sp, #16
 801085c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010860:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010864:	eb00 0904 	add.w	r9, r0, r4
 8010868:	d1e5      	bne.n	8010836 <__cvt+0x6a>
 801086a:	7803      	ldrb	r3, [r0, #0]
 801086c:	2b30      	cmp	r3, #48	@ 0x30
 801086e:	d10a      	bne.n	8010886 <__cvt+0xba>
 8010870:	2200      	movs	r2, #0
 8010872:	2300      	movs	r3, #0
 8010874:	4630      	mov	r0, r6
 8010876:	4639      	mov	r1, r7
 8010878:	f7f0 f94e 	bl	8000b18 <__aeabi_dcmpeq>
 801087c:	b918      	cbnz	r0, 8010886 <__cvt+0xba>
 801087e:	f1c4 0401 	rsb	r4, r4, #1
 8010882:	f8ca 4000 	str.w	r4, [sl]
 8010886:	f8da 3000 	ldr.w	r3, [sl]
 801088a:	4499      	add	r9, r3
 801088c:	e7d3      	b.n	8010836 <__cvt+0x6a>
 801088e:	1c59      	adds	r1, r3, #1
 8010890:	9103      	str	r1, [sp, #12]
 8010892:	701a      	strb	r2, [r3, #0]
 8010894:	e7d9      	b.n	801084a <__cvt+0x7e>

08010896 <__exponent>:
 8010896:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010898:	2900      	cmp	r1, #0
 801089a:	bfba      	itte	lt
 801089c:	4249      	neglt	r1, r1
 801089e:	232d      	movlt	r3, #45	@ 0x2d
 80108a0:	232b      	movge	r3, #43	@ 0x2b
 80108a2:	2909      	cmp	r1, #9
 80108a4:	7002      	strb	r2, [r0, #0]
 80108a6:	7043      	strb	r3, [r0, #1]
 80108a8:	dd29      	ble.n	80108fe <__exponent+0x68>
 80108aa:	f10d 0307 	add.w	r3, sp, #7
 80108ae:	461d      	mov	r5, r3
 80108b0:	270a      	movs	r7, #10
 80108b2:	461a      	mov	r2, r3
 80108b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80108b8:	fb07 1416 	mls	r4, r7, r6, r1
 80108bc:	3430      	adds	r4, #48	@ 0x30
 80108be:	f802 4c01 	strb.w	r4, [r2, #-1]
 80108c2:	460c      	mov	r4, r1
 80108c4:	2c63      	cmp	r4, #99	@ 0x63
 80108c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80108ca:	4631      	mov	r1, r6
 80108cc:	dcf1      	bgt.n	80108b2 <__exponent+0x1c>
 80108ce:	3130      	adds	r1, #48	@ 0x30
 80108d0:	1e94      	subs	r4, r2, #2
 80108d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80108d6:	1c41      	adds	r1, r0, #1
 80108d8:	4623      	mov	r3, r4
 80108da:	42ab      	cmp	r3, r5
 80108dc:	d30a      	bcc.n	80108f4 <__exponent+0x5e>
 80108de:	f10d 0309 	add.w	r3, sp, #9
 80108e2:	1a9b      	subs	r3, r3, r2
 80108e4:	42ac      	cmp	r4, r5
 80108e6:	bf88      	it	hi
 80108e8:	2300      	movhi	r3, #0
 80108ea:	3302      	adds	r3, #2
 80108ec:	4403      	add	r3, r0
 80108ee:	1a18      	subs	r0, r3, r0
 80108f0:	b003      	add	sp, #12
 80108f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80108f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80108fc:	e7ed      	b.n	80108da <__exponent+0x44>
 80108fe:	2330      	movs	r3, #48	@ 0x30
 8010900:	3130      	adds	r1, #48	@ 0x30
 8010902:	7083      	strb	r3, [r0, #2]
 8010904:	70c1      	strb	r1, [r0, #3]
 8010906:	1d03      	adds	r3, r0, #4
 8010908:	e7f1      	b.n	80108ee <__exponent+0x58>
	...

0801090c <_printf_float>:
 801090c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010910:	b08d      	sub	sp, #52	@ 0x34
 8010912:	460c      	mov	r4, r1
 8010914:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010918:	4616      	mov	r6, r2
 801091a:	461f      	mov	r7, r3
 801091c:	4605      	mov	r5, r0
 801091e:	f000 ff2d 	bl	801177c <_localeconv_r>
 8010922:	6803      	ldr	r3, [r0, #0]
 8010924:	9304      	str	r3, [sp, #16]
 8010926:	4618      	mov	r0, r3
 8010928:	f7ef fcca 	bl	80002c0 <strlen>
 801092c:	2300      	movs	r3, #0
 801092e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010930:	f8d8 3000 	ldr.w	r3, [r8]
 8010934:	9005      	str	r0, [sp, #20]
 8010936:	3307      	adds	r3, #7
 8010938:	f023 0307 	bic.w	r3, r3, #7
 801093c:	f103 0208 	add.w	r2, r3, #8
 8010940:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010944:	f8d4 b000 	ldr.w	fp, [r4]
 8010948:	f8c8 2000 	str.w	r2, [r8]
 801094c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010950:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010954:	9307      	str	r3, [sp, #28]
 8010956:	f8cd 8018 	str.w	r8, [sp, #24]
 801095a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801095e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010962:	4b9c      	ldr	r3, [pc, #624]	@ (8010bd4 <_printf_float+0x2c8>)
 8010964:	f04f 32ff 	mov.w	r2, #4294967295
 8010968:	f7f0 f908 	bl	8000b7c <__aeabi_dcmpun>
 801096c:	bb70      	cbnz	r0, 80109cc <_printf_float+0xc0>
 801096e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010972:	4b98      	ldr	r3, [pc, #608]	@ (8010bd4 <_printf_float+0x2c8>)
 8010974:	f04f 32ff 	mov.w	r2, #4294967295
 8010978:	f7f0 f8e2 	bl	8000b40 <__aeabi_dcmple>
 801097c:	bb30      	cbnz	r0, 80109cc <_printf_float+0xc0>
 801097e:	2200      	movs	r2, #0
 8010980:	2300      	movs	r3, #0
 8010982:	4640      	mov	r0, r8
 8010984:	4649      	mov	r1, r9
 8010986:	f7f0 f8d1 	bl	8000b2c <__aeabi_dcmplt>
 801098a:	b110      	cbz	r0, 8010992 <_printf_float+0x86>
 801098c:	232d      	movs	r3, #45	@ 0x2d
 801098e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010992:	4a91      	ldr	r2, [pc, #580]	@ (8010bd8 <_printf_float+0x2cc>)
 8010994:	4b91      	ldr	r3, [pc, #580]	@ (8010bdc <_printf_float+0x2d0>)
 8010996:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801099a:	bf94      	ite	ls
 801099c:	4690      	movls	r8, r2
 801099e:	4698      	movhi	r8, r3
 80109a0:	2303      	movs	r3, #3
 80109a2:	6123      	str	r3, [r4, #16]
 80109a4:	f02b 0304 	bic.w	r3, fp, #4
 80109a8:	6023      	str	r3, [r4, #0]
 80109aa:	f04f 0900 	mov.w	r9, #0
 80109ae:	9700      	str	r7, [sp, #0]
 80109b0:	4633      	mov	r3, r6
 80109b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80109b4:	4621      	mov	r1, r4
 80109b6:	4628      	mov	r0, r5
 80109b8:	f000 f9d2 	bl	8010d60 <_printf_common>
 80109bc:	3001      	adds	r0, #1
 80109be:	f040 808d 	bne.w	8010adc <_printf_float+0x1d0>
 80109c2:	f04f 30ff 	mov.w	r0, #4294967295
 80109c6:	b00d      	add	sp, #52	@ 0x34
 80109c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109cc:	4642      	mov	r2, r8
 80109ce:	464b      	mov	r3, r9
 80109d0:	4640      	mov	r0, r8
 80109d2:	4649      	mov	r1, r9
 80109d4:	f7f0 f8d2 	bl	8000b7c <__aeabi_dcmpun>
 80109d8:	b140      	cbz	r0, 80109ec <_printf_float+0xe0>
 80109da:	464b      	mov	r3, r9
 80109dc:	2b00      	cmp	r3, #0
 80109de:	bfbc      	itt	lt
 80109e0:	232d      	movlt	r3, #45	@ 0x2d
 80109e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80109e6:	4a7e      	ldr	r2, [pc, #504]	@ (8010be0 <_printf_float+0x2d4>)
 80109e8:	4b7e      	ldr	r3, [pc, #504]	@ (8010be4 <_printf_float+0x2d8>)
 80109ea:	e7d4      	b.n	8010996 <_printf_float+0x8a>
 80109ec:	6863      	ldr	r3, [r4, #4]
 80109ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80109f2:	9206      	str	r2, [sp, #24]
 80109f4:	1c5a      	adds	r2, r3, #1
 80109f6:	d13b      	bne.n	8010a70 <_printf_float+0x164>
 80109f8:	2306      	movs	r3, #6
 80109fa:	6063      	str	r3, [r4, #4]
 80109fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010a00:	2300      	movs	r3, #0
 8010a02:	6022      	str	r2, [r4, #0]
 8010a04:	9303      	str	r3, [sp, #12]
 8010a06:	ab0a      	add	r3, sp, #40	@ 0x28
 8010a08:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010a0c:	ab09      	add	r3, sp, #36	@ 0x24
 8010a0e:	9300      	str	r3, [sp, #0]
 8010a10:	6861      	ldr	r1, [r4, #4]
 8010a12:	ec49 8b10 	vmov	d0, r8, r9
 8010a16:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	f7ff fed6 	bl	80107cc <__cvt>
 8010a20:	9b06      	ldr	r3, [sp, #24]
 8010a22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010a24:	2b47      	cmp	r3, #71	@ 0x47
 8010a26:	4680      	mov	r8, r0
 8010a28:	d129      	bne.n	8010a7e <_printf_float+0x172>
 8010a2a:	1cc8      	adds	r0, r1, #3
 8010a2c:	db02      	blt.n	8010a34 <_printf_float+0x128>
 8010a2e:	6863      	ldr	r3, [r4, #4]
 8010a30:	4299      	cmp	r1, r3
 8010a32:	dd41      	ble.n	8010ab8 <_printf_float+0x1ac>
 8010a34:	f1aa 0a02 	sub.w	sl, sl, #2
 8010a38:	fa5f fa8a 	uxtb.w	sl, sl
 8010a3c:	3901      	subs	r1, #1
 8010a3e:	4652      	mov	r2, sl
 8010a40:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010a44:	9109      	str	r1, [sp, #36]	@ 0x24
 8010a46:	f7ff ff26 	bl	8010896 <__exponent>
 8010a4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a4c:	1813      	adds	r3, r2, r0
 8010a4e:	2a01      	cmp	r2, #1
 8010a50:	4681      	mov	r9, r0
 8010a52:	6123      	str	r3, [r4, #16]
 8010a54:	dc02      	bgt.n	8010a5c <_printf_float+0x150>
 8010a56:	6822      	ldr	r2, [r4, #0]
 8010a58:	07d2      	lsls	r2, r2, #31
 8010a5a:	d501      	bpl.n	8010a60 <_printf_float+0x154>
 8010a5c:	3301      	adds	r3, #1
 8010a5e:	6123      	str	r3, [r4, #16]
 8010a60:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d0a2      	beq.n	80109ae <_printf_float+0xa2>
 8010a68:	232d      	movs	r3, #45	@ 0x2d
 8010a6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a6e:	e79e      	b.n	80109ae <_printf_float+0xa2>
 8010a70:	9a06      	ldr	r2, [sp, #24]
 8010a72:	2a47      	cmp	r2, #71	@ 0x47
 8010a74:	d1c2      	bne.n	80109fc <_printf_float+0xf0>
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d1c0      	bne.n	80109fc <_printf_float+0xf0>
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	e7bd      	b.n	80109fa <_printf_float+0xee>
 8010a7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010a82:	d9db      	bls.n	8010a3c <_printf_float+0x130>
 8010a84:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010a88:	d118      	bne.n	8010abc <_printf_float+0x1b0>
 8010a8a:	2900      	cmp	r1, #0
 8010a8c:	6863      	ldr	r3, [r4, #4]
 8010a8e:	dd0b      	ble.n	8010aa8 <_printf_float+0x19c>
 8010a90:	6121      	str	r1, [r4, #16]
 8010a92:	b913      	cbnz	r3, 8010a9a <_printf_float+0x18e>
 8010a94:	6822      	ldr	r2, [r4, #0]
 8010a96:	07d0      	lsls	r0, r2, #31
 8010a98:	d502      	bpl.n	8010aa0 <_printf_float+0x194>
 8010a9a:	3301      	adds	r3, #1
 8010a9c:	440b      	add	r3, r1
 8010a9e:	6123      	str	r3, [r4, #16]
 8010aa0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010aa2:	f04f 0900 	mov.w	r9, #0
 8010aa6:	e7db      	b.n	8010a60 <_printf_float+0x154>
 8010aa8:	b913      	cbnz	r3, 8010ab0 <_printf_float+0x1a4>
 8010aaa:	6822      	ldr	r2, [r4, #0]
 8010aac:	07d2      	lsls	r2, r2, #31
 8010aae:	d501      	bpl.n	8010ab4 <_printf_float+0x1a8>
 8010ab0:	3302      	adds	r3, #2
 8010ab2:	e7f4      	b.n	8010a9e <_printf_float+0x192>
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	e7f2      	b.n	8010a9e <_printf_float+0x192>
 8010ab8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010abc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010abe:	4299      	cmp	r1, r3
 8010ac0:	db05      	blt.n	8010ace <_printf_float+0x1c2>
 8010ac2:	6823      	ldr	r3, [r4, #0]
 8010ac4:	6121      	str	r1, [r4, #16]
 8010ac6:	07d8      	lsls	r0, r3, #31
 8010ac8:	d5ea      	bpl.n	8010aa0 <_printf_float+0x194>
 8010aca:	1c4b      	adds	r3, r1, #1
 8010acc:	e7e7      	b.n	8010a9e <_printf_float+0x192>
 8010ace:	2900      	cmp	r1, #0
 8010ad0:	bfd4      	ite	le
 8010ad2:	f1c1 0202 	rsble	r2, r1, #2
 8010ad6:	2201      	movgt	r2, #1
 8010ad8:	4413      	add	r3, r2
 8010ada:	e7e0      	b.n	8010a9e <_printf_float+0x192>
 8010adc:	6823      	ldr	r3, [r4, #0]
 8010ade:	055a      	lsls	r2, r3, #21
 8010ae0:	d407      	bmi.n	8010af2 <_printf_float+0x1e6>
 8010ae2:	6923      	ldr	r3, [r4, #16]
 8010ae4:	4642      	mov	r2, r8
 8010ae6:	4631      	mov	r1, r6
 8010ae8:	4628      	mov	r0, r5
 8010aea:	47b8      	blx	r7
 8010aec:	3001      	adds	r0, #1
 8010aee:	d12b      	bne.n	8010b48 <_printf_float+0x23c>
 8010af0:	e767      	b.n	80109c2 <_printf_float+0xb6>
 8010af2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010af6:	f240 80dd 	bls.w	8010cb4 <_printf_float+0x3a8>
 8010afa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010afe:	2200      	movs	r2, #0
 8010b00:	2300      	movs	r3, #0
 8010b02:	f7f0 f809 	bl	8000b18 <__aeabi_dcmpeq>
 8010b06:	2800      	cmp	r0, #0
 8010b08:	d033      	beq.n	8010b72 <_printf_float+0x266>
 8010b0a:	4a37      	ldr	r2, [pc, #220]	@ (8010be8 <_printf_float+0x2dc>)
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	4631      	mov	r1, r6
 8010b10:	4628      	mov	r0, r5
 8010b12:	47b8      	blx	r7
 8010b14:	3001      	adds	r0, #1
 8010b16:	f43f af54 	beq.w	80109c2 <_printf_float+0xb6>
 8010b1a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010b1e:	4543      	cmp	r3, r8
 8010b20:	db02      	blt.n	8010b28 <_printf_float+0x21c>
 8010b22:	6823      	ldr	r3, [r4, #0]
 8010b24:	07d8      	lsls	r0, r3, #31
 8010b26:	d50f      	bpl.n	8010b48 <_printf_float+0x23c>
 8010b28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b2c:	4631      	mov	r1, r6
 8010b2e:	4628      	mov	r0, r5
 8010b30:	47b8      	blx	r7
 8010b32:	3001      	adds	r0, #1
 8010b34:	f43f af45 	beq.w	80109c2 <_printf_float+0xb6>
 8010b38:	f04f 0900 	mov.w	r9, #0
 8010b3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010b40:	f104 0a1a 	add.w	sl, r4, #26
 8010b44:	45c8      	cmp	r8, r9
 8010b46:	dc09      	bgt.n	8010b5c <_printf_float+0x250>
 8010b48:	6823      	ldr	r3, [r4, #0]
 8010b4a:	079b      	lsls	r3, r3, #30
 8010b4c:	f100 8103 	bmi.w	8010d56 <_printf_float+0x44a>
 8010b50:	68e0      	ldr	r0, [r4, #12]
 8010b52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b54:	4298      	cmp	r0, r3
 8010b56:	bfb8      	it	lt
 8010b58:	4618      	movlt	r0, r3
 8010b5a:	e734      	b.n	80109c6 <_printf_float+0xba>
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	4652      	mov	r2, sl
 8010b60:	4631      	mov	r1, r6
 8010b62:	4628      	mov	r0, r5
 8010b64:	47b8      	blx	r7
 8010b66:	3001      	adds	r0, #1
 8010b68:	f43f af2b 	beq.w	80109c2 <_printf_float+0xb6>
 8010b6c:	f109 0901 	add.w	r9, r9, #1
 8010b70:	e7e8      	b.n	8010b44 <_printf_float+0x238>
 8010b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	dc39      	bgt.n	8010bec <_printf_float+0x2e0>
 8010b78:	4a1b      	ldr	r2, [pc, #108]	@ (8010be8 <_printf_float+0x2dc>)
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	4631      	mov	r1, r6
 8010b7e:	4628      	mov	r0, r5
 8010b80:	47b8      	blx	r7
 8010b82:	3001      	adds	r0, #1
 8010b84:	f43f af1d 	beq.w	80109c2 <_printf_float+0xb6>
 8010b88:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010b8c:	ea59 0303 	orrs.w	r3, r9, r3
 8010b90:	d102      	bne.n	8010b98 <_printf_float+0x28c>
 8010b92:	6823      	ldr	r3, [r4, #0]
 8010b94:	07d9      	lsls	r1, r3, #31
 8010b96:	d5d7      	bpl.n	8010b48 <_printf_float+0x23c>
 8010b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b9c:	4631      	mov	r1, r6
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	47b8      	blx	r7
 8010ba2:	3001      	adds	r0, #1
 8010ba4:	f43f af0d 	beq.w	80109c2 <_printf_float+0xb6>
 8010ba8:	f04f 0a00 	mov.w	sl, #0
 8010bac:	f104 0b1a 	add.w	fp, r4, #26
 8010bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bb2:	425b      	negs	r3, r3
 8010bb4:	4553      	cmp	r3, sl
 8010bb6:	dc01      	bgt.n	8010bbc <_printf_float+0x2b0>
 8010bb8:	464b      	mov	r3, r9
 8010bba:	e793      	b.n	8010ae4 <_printf_float+0x1d8>
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	465a      	mov	r2, fp
 8010bc0:	4631      	mov	r1, r6
 8010bc2:	4628      	mov	r0, r5
 8010bc4:	47b8      	blx	r7
 8010bc6:	3001      	adds	r0, #1
 8010bc8:	f43f aefb 	beq.w	80109c2 <_printf_float+0xb6>
 8010bcc:	f10a 0a01 	add.w	sl, sl, #1
 8010bd0:	e7ee      	b.n	8010bb0 <_printf_float+0x2a4>
 8010bd2:	bf00      	nop
 8010bd4:	7fefffff 	.word	0x7fefffff
 8010bd8:	08016ef8 	.word	0x08016ef8
 8010bdc:	08016efc 	.word	0x08016efc
 8010be0:	08016f00 	.word	0x08016f00
 8010be4:	08016f04 	.word	0x08016f04
 8010be8:	08017298 	.word	0x08017298
 8010bec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010bee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010bf2:	4553      	cmp	r3, sl
 8010bf4:	bfa8      	it	ge
 8010bf6:	4653      	movge	r3, sl
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	4699      	mov	r9, r3
 8010bfc:	dc36      	bgt.n	8010c6c <_printf_float+0x360>
 8010bfe:	f04f 0b00 	mov.w	fp, #0
 8010c02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c06:	f104 021a 	add.w	r2, r4, #26
 8010c0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010c0c:	9306      	str	r3, [sp, #24]
 8010c0e:	eba3 0309 	sub.w	r3, r3, r9
 8010c12:	455b      	cmp	r3, fp
 8010c14:	dc31      	bgt.n	8010c7a <_printf_float+0x36e>
 8010c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c18:	459a      	cmp	sl, r3
 8010c1a:	dc3a      	bgt.n	8010c92 <_printf_float+0x386>
 8010c1c:	6823      	ldr	r3, [r4, #0]
 8010c1e:	07da      	lsls	r2, r3, #31
 8010c20:	d437      	bmi.n	8010c92 <_printf_float+0x386>
 8010c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c24:	ebaa 0903 	sub.w	r9, sl, r3
 8010c28:	9b06      	ldr	r3, [sp, #24]
 8010c2a:	ebaa 0303 	sub.w	r3, sl, r3
 8010c2e:	4599      	cmp	r9, r3
 8010c30:	bfa8      	it	ge
 8010c32:	4699      	movge	r9, r3
 8010c34:	f1b9 0f00 	cmp.w	r9, #0
 8010c38:	dc33      	bgt.n	8010ca2 <_printf_float+0x396>
 8010c3a:	f04f 0800 	mov.w	r8, #0
 8010c3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c42:	f104 0b1a 	add.w	fp, r4, #26
 8010c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c48:	ebaa 0303 	sub.w	r3, sl, r3
 8010c4c:	eba3 0309 	sub.w	r3, r3, r9
 8010c50:	4543      	cmp	r3, r8
 8010c52:	f77f af79 	ble.w	8010b48 <_printf_float+0x23c>
 8010c56:	2301      	movs	r3, #1
 8010c58:	465a      	mov	r2, fp
 8010c5a:	4631      	mov	r1, r6
 8010c5c:	4628      	mov	r0, r5
 8010c5e:	47b8      	blx	r7
 8010c60:	3001      	adds	r0, #1
 8010c62:	f43f aeae 	beq.w	80109c2 <_printf_float+0xb6>
 8010c66:	f108 0801 	add.w	r8, r8, #1
 8010c6a:	e7ec      	b.n	8010c46 <_printf_float+0x33a>
 8010c6c:	4642      	mov	r2, r8
 8010c6e:	4631      	mov	r1, r6
 8010c70:	4628      	mov	r0, r5
 8010c72:	47b8      	blx	r7
 8010c74:	3001      	adds	r0, #1
 8010c76:	d1c2      	bne.n	8010bfe <_printf_float+0x2f2>
 8010c78:	e6a3      	b.n	80109c2 <_printf_float+0xb6>
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	4631      	mov	r1, r6
 8010c7e:	4628      	mov	r0, r5
 8010c80:	9206      	str	r2, [sp, #24]
 8010c82:	47b8      	blx	r7
 8010c84:	3001      	adds	r0, #1
 8010c86:	f43f ae9c 	beq.w	80109c2 <_printf_float+0xb6>
 8010c8a:	9a06      	ldr	r2, [sp, #24]
 8010c8c:	f10b 0b01 	add.w	fp, fp, #1
 8010c90:	e7bb      	b.n	8010c0a <_printf_float+0x2fe>
 8010c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c96:	4631      	mov	r1, r6
 8010c98:	4628      	mov	r0, r5
 8010c9a:	47b8      	blx	r7
 8010c9c:	3001      	adds	r0, #1
 8010c9e:	d1c0      	bne.n	8010c22 <_printf_float+0x316>
 8010ca0:	e68f      	b.n	80109c2 <_printf_float+0xb6>
 8010ca2:	9a06      	ldr	r2, [sp, #24]
 8010ca4:	464b      	mov	r3, r9
 8010ca6:	4442      	add	r2, r8
 8010ca8:	4631      	mov	r1, r6
 8010caa:	4628      	mov	r0, r5
 8010cac:	47b8      	blx	r7
 8010cae:	3001      	adds	r0, #1
 8010cb0:	d1c3      	bne.n	8010c3a <_printf_float+0x32e>
 8010cb2:	e686      	b.n	80109c2 <_printf_float+0xb6>
 8010cb4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010cb8:	f1ba 0f01 	cmp.w	sl, #1
 8010cbc:	dc01      	bgt.n	8010cc2 <_printf_float+0x3b6>
 8010cbe:	07db      	lsls	r3, r3, #31
 8010cc0:	d536      	bpl.n	8010d30 <_printf_float+0x424>
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	4642      	mov	r2, r8
 8010cc6:	4631      	mov	r1, r6
 8010cc8:	4628      	mov	r0, r5
 8010cca:	47b8      	blx	r7
 8010ccc:	3001      	adds	r0, #1
 8010cce:	f43f ae78 	beq.w	80109c2 <_printf_float+0xb6>
 8010cd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010cd6:	4631      	mov	r1, r6
 8010cd8:	4628      	mov	r0, r5
 8010cda:	47b8      	blx	r7
 8010cdc:	3001      	adds	r0, #1
 8010cde:	f43f ae70 	beq.w	80109c2 <_printf_float+0xb6>
 8010ce2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	2300      	movs	r3, #0
 8010cea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010cee:	f7ef ff13 	bl	8000b18 <__aeabi_dcmpeq>
 8010cf2:	b9c0      	cbnz	r0, 8010d26 <_printf_float+0x41a>
 8010cf4:	4653      	mov	r3, sl
 8010cf6:	f108 0201 	add.w	r2, r8, #1
 8010cfa:	4631      	mov	r1, r6
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	47b8      	blx	r7
 8010d00:	3001      	adds	r0, #1
 8010d02:	d10c      	bne.n	8010d1e <_printf_float+0x412>
 8010d04:	e65d      	b.n	80109c2 <_printf_float+0xb6>
 8010d06:	2301      	movs	r3, #1
 8010d08:	465a      	mov	r2, fp
 8010d0a:	4631      	mov	r1, r6
 8010d0c:	4628      	mov	r0, r5
 8010d0e:	47b8      	blx	r7
 8010d10:	3001      	adds	r0, #1
 8010d12:	f43f ae56 	beq.w	80109c2 <_printf_float+0xb6>
 8010d16:	f108 0801 	add.w	r8, r8, #1
 8010d1a:	45d0      	cmp	r8, sl
 8010d1c:	dbf3      	blt.n	8010d06 <_printf_float+0x3fa>
 8010d1e:	464b      	mov	r3, r9
 8010d20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010d24:	e6df      	b.n	8010ae6 <_printf_float+0x1da>
 8010d26:	f04f 0800 	mov.w	r8, #0
 8010d2a:	f104 0b1a 	add.w	fp, r4, #26
 8010d2e:	e7f4      	b.n	8010d1a <_printf_float+0x40e>
 8010d30:	2301      	movs	r3, #1
 8010d32:	4642      	mov	r2, r8
 8010d34:	e7e1      	b.n	8010cfa <_printf_float+0x3ee>
 8010d36:	2301      	movs	r3, #1
 8010d38:	464a      	mov	r2, r9
 8010d3a:	4631      	mov	r1, r6
 8010d3c:	4628      	mov	r0, r5
 8010d3e:	47b8      	blx	r7
 8010d40:	3001      	adds	r0, #1
 8010d42:	f43f ae3e 	beq.w	80109c2 <_printf_float+0xb6>
 8010d46:	f108 0801 	add.w	r8, r8, #1
 8010d4a:	68e3      	ldr	r3, [r4, #12]
 8010d4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010d4e:	1a5b      	subs	r3, r3, r1
 8010d50:	4543      	cmp	r3, r8
 8010d52:	dcf0      	bgt.n	8010d36 <_printf_float+0x42a>
 8010d54:	e6fc      	b.n	8010b50 <_printf_float+0x244>
 8010d56:	f04f 0800 	mov.w	r8, #0
 8010d5a:	f104 0919 	add.w	r9, r4, #25
 8010d5e:	e7f4      	b.n	8010d4a <_printf_float+0x43e>

08010d60 <_printf_common>:
 8010d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d64:	4616      	mov	r6, r2
 8010d66:	4698      	mov	r8, r3
 8010d68:	688a      	ldr	r2, [r1, #8]
 8010d6a:	690b      	ldr	r3, [r1, #16]
 8010d6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010d70:	4293      	cmp	r3, r2
 8010d72:	bfb8      	it	lt
 8010d74:	4613      	movlt	r3, r2
 8010d76:	6033      	str	r3, [r6, #0]
 8010d78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010d7c:	4607      	mov	r7, r0
 8010d7e:	460c      	mov	r4, r1
 8010d80:	b10a      	cbz	r2, 8010d86 <_printf_common+0x26>
 8010d82:	3301      	adds	r3, #1
 8010d84:	6033      	str	r3, [r6, #0]
 8010d86:	6823      	ldr	r3, [r4, #0]
 8010d88:	0699      	lsls	r1, r3, #26
 8010d8a:	bf42      	ittt	mi
 8010d8c:	6833      	ldrmi	r3, [r6, #0]
 8010d8e:	3302      	addmi	r3, #2
 8010d90:	6033      	strmi	r3, [r6, #0]
 8010d92:	6825      	ldr	r5, [r4, #0]
 8010d94:	f015 0506 	ands.w	r5, r5, #6
 8010d98:	d106      	bne.n	8010da8 <_printf_common+0x48>
 8010d9a:	f104 0a19 	add.w	sl, r4, #25
 8010d9e:	68e3      	ldr	r3, [r4, #12]
 8010da0:	6832      	ldr	r2, [r6, #0]
 8010da2:	1a9b      	subs	r3, r3, r2
 8010da4:	42ab      	cmp	r3, r5
 8010da6:	dc26      	bgt.n	8010df6 <_printf_common+0x96>
 8010da8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010dac:	6822      	ldr	r2, [r4, #0]
 8010dae:	3b00      	subs	r3, #0
 8010db0:	bf18      	it	ne
 8010db2:	2301      	movne	r3, #1
 8010db4:	0692      	lsls	r2, r2, #26
 8010db6:	d42b      	bmi.n	8010e10 <_printf_common+0xb0>
 8010db8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010dbc:	4641      	mov	r1, r8
 8010dbe:	4638      	mov	r0, r7
 8010dc0:	47c8      	blx	r9
 8010dc2:	3001      	adds	r0, #1
 8010dc4:	d01e      	beq.n	8010e04 <_printf_common+0xa4>
 8010dc6:	6823      	ldr	r3, [r4, #0]
 8010dc8:	6922      	ldr	r2, [r4, #16]
 8010dca:	f003 0306 	and.w	r3, r3, #6
 8010dce:	2b04      	cmp	r3, #4
 8010dd0:	bf02      	ittt	eq
 8010dd2:	68e5      	ldreq	r5, [r4, #12]
 8010dd4:	6833      	ldreq	r3, [r6, #0]
 8010dd6:	1aed      	subeq	r5, r5, r3
 8010dd8:	68a3      	ldr	r3, [r4, #8]
 8010dda:	bf0c      	ite	eq
 8010ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010de0:	2500      	movne	r5, #0
 8010de2:	4293      	cmp	r3, r2
 8010de4:	bfc4      	itt	gt
 8010de6:	1a9b      	subgt	r3, r3, r2
 8010de8:	18ed      	addgt	r5, r5, r3
 8010dea:	2600      	movs	r6, #0
 8010dec:	341a      	adds	r4, #26
 8010dee:	42b5      	cmp	r5, r6
 8010df0:	d11a      	bne.n	8010e28 <_printf_common+0xc8>
 8010df2:	2000      	movs	r0, #0
 8010df4:	e008      	b.n	8010e08 <_printf_common+0xa8>
 8010df6:	2301      	movs	r3, #1
 8010df8:	4652      	mov	r2, sl
 8010dfa:	4641      	mov	r1, r8
 8010dfc:	4638      	mov	r0, r7
 8010dfe:	47c8      	blx	r9
 8010e00:	3001      	adds	r0, #1
 8010e02:	d103      	bne.n	8010e0c <_printf_common+0xac>
 8010e04:	f04f 30ff 	mov.w	r0, #4294967295
 8010e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e0c:	3501      	adds	r5, #1
 8010e0e:	e7c6      	b.n	8010d9e <_printf_common+0x3e>
 8010e10:	18e1      	adds	r1, r4, r3
 8010e12:	1c5a      	adds	r2, r3, #1
 8010e14:	2030      	movs	r0, #48	@ 0x30
 8010e16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010e1a:	4422      	add	r2, r4
 8010e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010e20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010e24:	3302      	adds	r3, #2
 8010e26:	e7c7      	b.n	8010db8 <_printf_common+0x58>
 8010e28:	2301      	movs	r3, #1
 8010e2a:	4622      	mov	r2, r4
 8010e2c:	4641      	mov	r1, r8
 8010e2e:	4638      	mov	r0, r7
 8010e30:	47c8      	blx	r9
 8010e32:	3001      	adds	r0, #1
 8010e34:	d0e6      	beq.n	8010e04 <_printf_common+0xa4>
 8010e36:	3601      	adds	r6, #1
 8010e38:	e7d9      	b.n	8010dee <_printf_common+0x8e>
	...

08010e3c <_printf_i>:
 8010e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e40:	7e0f      	ldrb	r7, [r1, #24]
 8010e42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010e44:	2f78      	cmp	r7, #120	@ 0x78
 8010e46:	4691      	mov	r9, r2
 8010e48:	4680      	mov	r8, r0
 8010e4a:	460c      	mov	r4, r1
 8010e4c:	469a      	mov	sl, r3
 8010e4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010e52:	d807      	bhi.n	8010e64 <_printf_i+0x28>
 8010e54:	2f62      	cmp	r7, #98	@ 0x62
 8010e56:	d80a      	bhi.n	8010e6e <_printf_i+0x32>
 8010e58:	2f00      	cmp	r7, #0
 8010e5a:	f000 80d2 	beq.w	8011002 <_printf_i+0x1c6>
 8010e5e:	2f58      	cmp	r7, #88	@ 0x58
 8010e60:	f000 80b9 	beq.w	8010fd6 <_printf_i+0x19a>
 8010e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010e68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010e6c:	e03a      	b.n	8010ee4 <_printf_i+0xa8>
 8010e6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010e72:	2b15      	cmp	r3, #21
 8010e74:	d8f6      	bhi.n	8010e64 <_printf_i+0x28>
 8010e76:	a101      	add	r1, pc, #4	@ (adr r1, 8010e7c <_printf_i+0x40>)
 8010e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e7c:	08010ed5 	.word	0x08010ed5
 8010e80:	08010ee9 	.word	0x08010ee9
 8010e84:	08010e65 	.word	0x08010e65
 8010e88:	08010e65 	.word	0x08010e65
 8010e8c:	08010e65 	.word	0x08010e65
 8010e90:	08010e65 	.word	0x08010e65
 8010e94:	08010ee9 	.word	0x08010ee9
 8010e98:	08010e65 	.word	0x08010e65
 8010e9c:	08010e65 	.word	0x08010e65
 8010ea0:	08010e65 	.word	0x08010e65
 8010ea4:	08010e65 	.word	0x08010e65
 8010ea8:	08010fe9 	.word	0x08010fe9
 8010eac:	08010f13 	.word	0x08010f13
 8010eb0:	08010fa3 	.word	0x08010fa3
 8010eb4:	08010e65 	.word	0x08010e65
 8010eb8:	08010e65 	.word	0x08010e65
 8010ebc:	0801100b 	.word	0x0801100b
 8010ec0:	08010e65 	.word	0x08010e65
 8010ec4:	08010f13 	.word	0x08010f13
 8010ec8:	08010e65 	.word	0x08010e65
 8010ecc:	08010e65 	.word	0x08010e65
 8010ed0:	08010fab 	.word	0x08010fab
 8010ed4:	6833      	ldr	r3, [r6, #0]
 8010ed6:	1d1a      	adds	r2, r3, #4
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	6032      	str	r2, [r6, #0]
 8010edc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ee0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	e09d      	b.n	8011024 <_printf_i+0x1e8>
 8010ee8:	6833      	ldr	r3, [r6, #0]
 8010eea:	6820      	ldr	r0, [r4, #0]
 8010eec:	1d19      	adds	r1, r3, #4
 8010eee:	6031      	str	r1, [r6, #0]
 8010ef0:	0606      	lsls	r6, r0, #24
 8010ef2:	d501      	bpl.n	8010ef8 <_printf_i+0xbc>
 8010ef4:	681d      	ldr	r5, [r3, #0]
 8010ef6:	e003      	b.n	8010f00 <_printf_i+0xc4>
 8010ef8:	0645      	lsls	r5, r0, #25
 8010efa:	d5fb      	bpl.n	8010ef4 <_printf_i+0xb8>
 8010efc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010f00:	2d00      	cmp	r5, #0
 8010f02:	da03      	bge.n	8010f0c <_printf_i+0xd0>
 8010f04:	232d      	movs	r3, #45	@ 0x2d
 8010f06:	426d      	negs	r5, r5
 8010f08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f0c:	4859      	ldr	r0, [pc, #356]	@ (8011074 <_printf_i+0x238>)
 8010f0e:	230a      	movs	r3, #10
 8010f10:	e011      	b.n	8010f36 <_printf_i+0xfa>
 8010f12:	6821      	ldr	r1, [r4, #0]
 8010f14:	6833      	ldr	r3, [r6, #0]
 8010f16:	0608      	lsls	r0, r1, #24
 8010f18:	f853 5b04 	ldr.w	r5, [r3], #4
 8010f1c:	d402      	bmi.n	8010f24 <_printf_i+0xe8>
 8010f1e:	0649      	lsls	r1, r1, #25
 8010f20:	bf48      	it	mi
 8010f22:	b2ad      	uxthmi	r5, r5
 8010f24:	2f6f      	cmp	r7, #111	@ 0x6f
 8010f26:	4853      	ldr	r0, [pc, #332]	@ (8011074 <_printf_i+0x238>)
 8010f28:	6033      	str	r3, [r6, #0]
 8010f2a:	bf14      	ite	ne
 8010f2c:	230a      	movne	r3, #10
 8010f2e:	2308      	moveq	r3, #8
 8010f30:	2100      	movs	r1, #0
 8010f32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010f36:	6866      	ldr	r6, [r4, #4]
 8010f38:	60a6      	str	r6, [r4, #8]
 8010f3a:	2e00      	cmp	r6, #0
 8010f3c:	bfa2      	ittt	ge
 8010f3e:	6821      	ldrge	r1, [r4, #0]
 8010f40:	f021 0104 	bicge.w	r1, r1, #4
 8010f44:	6021      	strge	r1, [r4, #0]
 8010f46:	b90d      	cbnz	r5, 8010f4c <_printf_i+0x110>
 8010f48:	2e00      	cmp	r6, #0
 8010f4a:	d04b      	beq.n	8010fe4 <_printf_i+0x1a8>
 8010f4c:	4616      	mov	r6, r2
 8010f4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010f52:	fb03 5711 	mls	r7, r3, r1, r5
 8010f56:	5dc7      	ldrb	r7, [r0, r7]
 8010f58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010f5c:	462f      	mov	r7, r5
 8010f5e:	42bb      	cmp	r3, r7
 8010f60:	460d      	mov	r5, r1
 8010f62:	d9f4      	bls.n	8010f4e <_printf_i+0x112>
 8010f64:	2b08      	cmp	r3, #8
 8010f66:	d10b      	bne.n	8010f80 <_printf_i+0x144>
 8010f68:	6823      	ldr	r3, [r4, #0]
 8010f6a:	07df      	lsls	r7, r3, #31
 8010f6c:	d508      	bpl.n	8010f80 <_printf_i+0x144>
 8010f6e:	6923      	ldr	r3, [r4, #16]
 8010f70:	6861      	ldr	r1, [r4, #4]
 8010f72:	4299      	cmp	r1, r3
 8010f74:	bfde      	ittt	le
 8010f76:	2330      	movle	r3, #48	@ 0x30
 8010f78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010f7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010f80:	1b92      	subs	r2, r2, r6
 8010f82:	6122      	str	r2, [r4, #16]
 8010f84:	f8cd a000 	str.w	sl, [sp]
 8010f88:	464b      	mov	r3, r9
 8010f8a:	aa03      	add	r2, sp, #12
 8010f8c:	4621      	mov	r1, r4
 8010f8e:	4640      	mov	r0, r8
 8010f90:	f7ff fee6 	bl	8010d60 <_printf_common>
 8010f94:	3001      	adds	r0, #1
 8010f96:	d14a      	bne.n	801102e <_printf_i+0x1f2>
 8010f98:	f04f 30ff 	mov.w	r0, #4294967295
 8010f9c:	b004      	add	sp, #16
 8010f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fa2:	6823      	ldr	r3, [r4, #0]
 8010fa4:	f043 0320 	orr.w	r3, r3, #32
 8010fa8:	6023      	str	r3, [r4, #0]
 8010faa:	4833      	ldr	r0, [pc, #204]	@ (8011078 <_printf_i+0x23c>)
 8010fac:	2778      	movs	r7, #120	@ 0x78
 8010fae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010fb2:	6823      	ldr	r3, [r4, #0]
 8010fb4:	6831      	ldr	r1, [r6, #0]
 8010fb6:	061f      	lsls	r7, r3, #24
 8010fb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8010fbc:	d402      	bmi.n	8010fc4 <_printf_i+0x188>
 8010fbe:	065f      	lsls	r7, r3, #25
 8010fc0:	bf48      	it	mi
 8010fc2:	b2ad      	uxthmi	r5, r5
 8010fc4:	6031      	str	r1, [r6, #0]
 8010fc6:	07d9      	lsls	r1, r3, #31
 8010fc8:	bf44      	itt	mi
 8010fca:	f043 0320 	orrmi.w	r3, r3, #32
 8010fce:	6023      	strmi	r3, [r4, #0]
 8010fd0:	b11d      	cbz	r5, 8010fda <_printf_i+0x19e>
 8010fd2:	2310      	movs	r3, #16
 8010fd4:	e7ac      	b.n	8010f30 <_printf_i+0xf4>
 8010fd6:	4827      	ldr	r0, [pc, #156]	@ (8011074 <_printf_i+0x238>)
 8010fd8:	e7e9      	b.n	8010fae <_printf_i+0x172>
 8010fda:	6823      	ldr	r3, [r4, #0]
 8010fdc:	f023 0320 	bic.w	r3, r3, #32
 8010fe0:	6023      	str	r3, [r4, #0]
 8010fe2:	e7f6      	b.n	8010fd2 <_printf_i+0x196>
 8010fe4:	4616      	mov	r6, r2
 8010fe6:	e7bd      	b.n	8010f64 <_printf_i+0x128>
 8010fe8:	6833      	ldr	r3, [r6, #0]
 8010fea:	6825      	ldr	r5, [r4, #0]
 8010fec:	6961      	ldr	r1, [r4, #20]
 8010fee:	1d18      	adds	r0, r3, #4
 8010ff0:	6030      	str	r0, [r6, #0]
 8010ff2:	062e      	lsls	r6, r5, #24
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	d501      	bpl.n	8010ffc <_printf_i+0x1c0>
 8010ff8:	6019      	str	r1, [r3, #0]
 8010ffa:	e002      	b.n	8011002 <_printf_i+0x1c6>
 8010ffc:	0668      	lsls	r0, r5, #25
 8010ffe:	d5fb      	bpl.n	8010ff8 <_printf_i+0x1bc>
 8011000:	8019      	strh	r1, [r3, #0]
 8011002:	2300      	movs	r3, #0
 8011004:	6123      	str	r3, [r4, #16]
 8011006:	4616      	mov	r6, r2
 8011008:	e7bc      	b.n	8010f84 <_printf_i+0x148>
 801100a:	6833      	ldr	r3, [r6, #0]
 801100c:	1d1a      	adds	r2, r3, #4
 801100e:	6032      	str	r2, [r6, #0]
 8011010:	681e      	ldr	r6, [r3, #0]
 8011012:	6862      	ldr	r2, [r4, #4]
 8011014:	2100      	movs	r1, #0
 8011016:	4630      	mov	r0, r6
 8011018:	f7ef f902 	bl	8000220 <memchr>
 801101c:	b108      	cbz	r0, 8011022 <_printf_i+0x1e6>
 801101e:	1b80      	subs	r0, r0, r6
 8011020:	6060      	str	r0, [r4, #4]
 8011022:	6863      	ldr	r3, [r4, #4]
 8011024:	6123      	str	r3, [r4, #16]
 8011026:	2300      	movs	r3, #0
 8011028:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801102c:	e7aa      	b.n	8010f84 <_printf_i+0x148>
 801102e:	6923      	ldr	r3, [r4, #16]
 8011030:	4632      	mov	r2, r6
 8011032:	4649      	mov	r1, r9
 8011034:	4640      	mov	r0, r8
 8011036:	47d0      	blx	sl
 8011038:	3001      	adds	r0, #1
 801103a:	d0ad      	beq.n	8010f98 <_printf_i+0x15c>
 801103c:	6823      	ldr	r3, [r4, #0]
 801103e:	079b      	lsls	r3, r3, #30
 8011040:	d413      	bmi.n	801106a <_printf_i+0x22e>
 8011042:	68e0      	ldr	r0, [r4, #12]
 8011044:	9b03      	ldr	r3, [sp, #12]
 8011046:	4298      	cmp	r0, r3
 8011048:	bfb8      	it	lt
 801104a:	4618      	movlt	r0, r3
 801104c:	e7a6      	b.n	8010f9c <_printf_i+0x160>
 801104e:	2301      	movs	r3, #1
 8011050:	4632      	mov	r2, r6
 8011052:	4649      	mov	r1, r9
 8011054:	4640      	mov	r0, r8
 8011056:	47d0      	blx	sl
 8011058:	3001      	adds	r0, #1
 801105a:	d09d      	beq.n	8010f98 <_printf_i+0x15c>
 801105c:	3501      	adds	r5, #1
 801105e:	68e3      	ldr	r3, [r4, #12]
 8011060:	9903      	ldr	r1, [sp, #12]
 8011062:	1a5b      	subs	r3, r3, r1
 8011064:	42ab      	cmp	r3, r5
 8011066:	dcf2      	bgt.n	801104e <_printf_i+0x212>
 8011068:	e7eb      	b.n	8011042 <_printf_i+0x206>
 801106a:	2500      	movs	r5, #0
 801106c:	f104 0619 	add.w	r6, r4, #25
 8011070:	e7f5      	b.n	801105e <_printf_i+0x222>
 8011072:	bf00      	nop
 8011074:	08016f08 	.word	0x08016f08
 8011078:	08016f19 	.word	0x08016f19

0801107c <_scanf_float>:
 801107c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011080:	b087      	sub	sp, #28
 8011082:	4617      	mov	r7, r2
 8011084:	9303      	str	r3, [sp, #12]
 8011086:	688b      	ldr	r3, [r1, #8]
 8011088:	1e5a      	subs	r2, r3, #1
 801108a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801108e:	bf81      	itttt	hi
 8011090:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011094:	eb03 0b05 	addhi.w	fp, r3, r5
 8011098:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801109c:	608b      	strhi	r3, [r1, #8]
 801109e:	680b      	ldr	r3, [r1, #0]
 80110a0:	460a      	mov	r2, r1
 80110a2:	f04f 0500 	mov.w	r5, #0
 80110a6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80110aa:	f842 3b1c 	str.w	r3, [r2], #28
 80110ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80110b2:	4680      	mov	r8, r0
 80110b4:	460c      	mov	r4, r1
 80110b6:	bf98      	it	ls
 80110b8:	f04f 0b00 	movls.w	fp, #0
 80110bc:	9201      	str	r2, [sp, #4]
 80110be:	4616      	mov	r6, r2
 80110c0:	46aa      	mov	sl, r5
 80110c2:	46a9      	mov	r9, r5
 80110c4:	9502      	str	r5, [sp, #8]
 80110c6:	68a2      	ldr	r2, [r4, #8]
 80110c8:	b152      	cbz	r2, 80110e0 <_scanf_float+0x64>
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80110d0:	d864      	bhi.n	801119c <_scanf_float+0x120>
 80110d2:	2b40      	cmp	r3, #64	@ 0x40
 80110d4:	d83c      	bhi.n	8011150 <_scanf_float+0xd4>
 80110d6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80110da:	b2c8      	uxtb	r0, r1
 80110dc:	280e      	cmp	r0, #14
 80110de:	d93a      	bls.n	8011156 <_scanf_float+0xda>
 80110e0:	f1b9 0f00 	cmp.w	r9, #0
 80110e4:	d003      	beq.n	80110ee <_scanf_float+0x72>
 80110e6:	6823      	ldr	r3, [r4, #0]
 80110e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80110ec:	6023      	str	r3, [r4, #0]
 80110ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80110f2:	f1ba 0f01 	cmp.w	sl, #1
 80110f6:	f200 8117 	bhi.w	8011328 <_scanf_float+0x2ac>
 80110fa:	9b01      	ldr	r3, [sp, #4]
 80110fc:	429e      	cmp	r6, r3
 80110fe:	f200 8108 	bhi.w	8011312 <_scanf_float+0x296>
 8011102:	2001      	movs	r0, #1
 8011104:	b007      	add	sp, #28
 8011106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801110a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801110e:	2a0d      	cmp	r2, #13
 8011110:	d8e6      	bhi.n	80110e0 <_scanf_float+0x64>
 8011112:	a101      	add	r1, pc, #4	@ (adr r1, 8011118 <_scanf_float+0x9c>)
 8011114:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011118:	0801125f 	.word	0x0801125f
 801111c:	080110e1 	.word	0x080110e1
 8011120:	080110e1 	.word	0x080110e1
 8011124:	080110e1 	.word	0x080110e1
 8011128:	080112bf 	.word	0x080112bf
 801112c:	08011297 	.word	0x08011297
 8011130:	080110e1 	.word	0x080110e1
 8011134:	080110e1 	.word	0x080110e1
 8011138:	0801126d 	.word	0x0801126d
 801113c:	080110e1 	.word	0x080110e1
 8011140:	080110e1 	.word	0x080110e1
 8011144:	080110e1 	.word	0x080110e1
 8011148:	080110e1 	.word	0x080110e1
 801114c:	08011225 	.word	0x08011225
 8011150:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8011154:	e7db      	b.n	801110e <_scanf_float+0x92>
 8011156:	290e      	cmp	r1, #14
 8011158:	d8c2      	bhi.n	80110e0 <_scanf_float+0x64>
 801115a:	a001      	add	r0, pc, #4	@ (adr r0, 8011160 <_scanf_float+0xe4>)
 801115c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011160:	08011215 	.word	0x08011215
 8011164:	080110e1 	.word	0x080110e1
 8011168:	08011215 	.word	0x08011215
 801116c:	080112ab 	.word	0x080112ab
 8011170:	080110e1 	.word	0x080110e1
 8011174:	080111bd 	.word	0x080111bd
 8011178:	080111fb 	.word	0x080111fb
 801117c:	080111fb 	.word	0x080111fb
 8011180:	080111fb 	.word	0x080111fb
 8011184:	080111fb 	.word	0x080111fb
 8011188:	080111fb 	.word	0x080111fb
 801118c:	080111fb 	.word	0x080111fb
 8011190:	080111fb 	.word	0x080111fb
 8011194:	080111fb 	.word	0x080111fb
 8011198:	080111fb 	.word	0x080111fb
 801119c:	2b6e      	cmp	r3, #110	@ 0x6e
 801119e:	d809      	bhi.n	80111b4 <_scanf_float+0x138>
 80111a0:	2b60      	cmp	r3, #96	@ 0x60
 80111a2:	d8b2      	bhi.n	801110a <_scanf_float+0x8e>
 80111a4:	2b54      	cmp	r3, #84	@ 0x54
 80111a6:	d07b      	beq.n	80112a0 <_scanf_float+0x224>
 80111a8:	2b59      	cmp	r3, #89	@ 0x59
 80111aa:	d199      	bne.n	80110e0 <_scanf_float+0x64>
 80111ac:	2d07      	cmp	r5, #7
 80111ae:	d197      	bne.n	80110e0 <_scanf_float+0x64>
 80111b0:	2508      	movs	r5, #8
 80111b2:	e02c      	b.n	801120e <_scanf_float+0x192>
 80111b4:	2b74      	cmp	r3, #116	@ 0x74
 80111b6:	d073      	beq.n	80112a0 <_scanf_float+0x224>
 80111b8:	2b79      	cmp	r3, #121	@ 0x79
 80111ba:	e7f6      	b.n	80111aa <_scanf_float+0x12e>
 80111bc:	6821      	ldr	r1, [r4, #0]
 80111be:	05c8      	lsls	r0, r1, #23
 80111c0:	d51b      	bpl.n	80111fa <_scanf_float+0x17e>
 80111c2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80111c6:	6021      	str	r1, [r4, #0]
 80111c8:	f109 0901 	add.w	r9, r9, #1
 80111cc:	f1bb 0f00 	cmp.w	fp, #0
 80111d0:	d003      	beq.n	80111da <_scanf_float+0x15e>
 80111d2:	3201      	adds	r2, #1
 80111d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80111d8:	60a2      	str	r2, [r4, #8]
 80111da:	68a3      	ldr	r3, [r4, #8]
 80111dc:	3b01      	subs	r3, #1
 80111de:	60a3      	str	r3, [r4, #8]
 80111e0:	6923      	ldr	r3, [r4, #16]
 80111e2:	3301      	adds	r3, #1
 80111e4:	6123      	str	r3, [r4, #16]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	3b01      	subs	r3, #1
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	607b      	str	r3, [r7, #4]
 80111ee:	f340 8087 	ble.w	8011300 <_scanf_float+0x284>
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	3301      	adds	r3, #1
 80111f6:	603b      	str	r3, [r7, #0]
 80111f8:	e765      	b.n	80110c6 <_scanf_float+0x4a>
 80111fa:	eb1a 0105 	adds.w	r1, sl, r5
 80111fe:	f47f af6f 	bne.w	80110e0 <_scanf_float+0x64>
 8011202:	6822      	ldr	r2, [r4, #0]
 8011204:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011208:	6022      	str	r2, [r4, #0]
 801120a:	460d      	mov	r5, r1
 801120c:	468a      	mov	sl, r1
 801120e:	f806 3b01 	strb.w	r3, [r6], #1
 8011212:	e7e2      	b.n	80111da <_scanf_float+0x15e>
 8011214:	6822      	ldr	r2, [r4, #0]
 8011216:	0610      	lsls	r0, r2, #24
 8011218:	f57f af62 	bpl.w	80110e0 <_scanf_float+0x64>
 801121c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011220:	6022      	str	r2, [r4, #0]
 8011222:	e7f4      	b.n	801120e <_scanf_float+0x192>
 8011224:	f1ba 0f00 	cmp.w	sl, #0
 8011228:	d10e      	bne.n	8011248 <_scanf_float+0x1cc>
 801122a:	f1b9 0f00 	cmp.w	r9, #0
 801122e:	d10e      	bne.n	801124e <_scanf_float+0x1d2>
 8011230:	6822      	ldr	r2, [r4, #0]
 8011232:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011236:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801123a:	d108      	bne.n	801124e <_scanf_float+0x1d2>
 801123c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011240:	6022      	str	r2, [r4, #0]
 8011242:	f04f 0a01 	mov.w	sl, #1
 8011246:	e7e2      	b.n	801120e <_scanf_float+0x192>
 8011248:	f1ba 0f02 	cmp.w	sl, #2
 801124c:	d055      	beq.n	80112fa <_scanf_float+0x27e>
 801124e:	2d01      	cmp	r5, #1
 8011250:	d002      	beq.n	8011258 <_scanf_float+0x1dc>
 8011252:	2d04      	cmp	r5, #4
 8011254:	f47f af44 	bne.w	80110e0 <_scanf_float+0x64>
 8011258:	3501      	adds	r5, #1
 801125a:	b2ed      	uxtb	r5, r5
 801125c:	e7d7      	b.n	801120e <_scanf_float+0x192>
 801125e:	f1ba 0f01 	cmp.w	sl, #1
 8011262:	f47f af3d 	bne.w	80110e0 <_scanf_float+0x64>
 8011266:	f04f 0a02 	mov.w	sl, #2
 801126a:	e7d0      	b.n	801120e <_scanf_float+0x192>
 801126c:	b97d      	cbnz	r5, 801128e <_scanf_float+0x212>
 801126e:	f1b9 0f00 	cmp.w	r9, #0
 8011272:	f47f af38 	bne.w	80110e6 <_scanf_float+0x6a>
 8011276:	6822      	ldr	r2, [r4, #0]
 8011278:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801127c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011280:	f040 8108 	bne.w	8011494 <_scanf_float+0x418>
 8011284:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011288:	6022      	str	r2, [r4, #0]
 801128a:	2501      	movs	r5, #1
 801128c:	e7bf      	b.n	801120e <_scanf_float+0x192>
 801128e:	2d03      	cmp	r5, #3
 8011290:	d0e2      	beq.n	8011258 <_scanf_float+0x1dc>
 8011292:	2d05      	cmp	r5, #5
 8011294:	e7de      	b.n	8011254 <_scanf_float+0x1d8>
 8011296:	2d02      	cmp	r5, #2
 8011298:	f47f af22 	bne.w	80110e0 <_scanf_float+0x64>
 801129c:	2503      	movs	r5, #3
 801129e:	e7b6      	b.n	801120e <_scanf_float+0x192>
 80112a0:	2d06      	cmp	r5, #6
 80112a2:	f47f af1d 	bne.w	80110e0 <_scanf_float+0x64>
 80112a6:	2507      	movs	r5, #7
 80112a8:	e7b1      	b.n	801120e <_scanf_float+0x192>
 80112aa:	6822      	ldr	r2, [r4, #0]
 80112ac:	0591      	lsls	r1, r2, #22
 80112ae:	f57f af17 	bpl.w	80110e0 <_scanf_float+0x64>
 80112b2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80112b6:	6022      	str	r2, [r4, #0]
 80112b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80112bc:	e7a7      	b.n	801120e <_scanf_float+0x192>
 80112be:	6822      	ldr	r2, [r4, #0]
 80112c0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80112c4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80112c8:	d006      	beq.n	80112d8 <_scanf_float+0x25c>
 80112ca:	0550      	lsls	r0, r2, #21
 80112cc:	f57f af08 	bpl.w	80110e0 <_scanf_float+0x64>
 80112d0:	f1b9 0f00 	cmp.w	r9, #0
 80112d4:	f000 80de 	beq.w	8011494 <_scanf_float+0x418>
 80112d8:	0591      	lsls	r1, r2, #22
 80112da:	bf58      	it	pl
 80112dc:	9902      	ldrpl	r1, [sp, #8]
 80112de:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80112e2:	bf58      	it	pl
 80112e4:	eba9 0101 	subpl.w	r1, r9, r1
 80112e8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80112ec:	bf58      	it	pl
 80112ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80112f2:	6022      	str	r2, [r4, #0]
 80112f4:	f04f 0900 	mov.w	r9, #0
 80112f8:	e789      	b.n	801120e <_scanf_float+0x192>
 80112fa:	f04f 0a03 	mov.w	sl, #3
 80112fe:	e786      	b.n	801120e <_scanf_float+0x192>
 8011300:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011304:	4639      	mov	r1, r7
 8011306:	4640      	mov	r0, r8
 8011308:	4798      	blx	r3
 801130a:	2800      	cmp	r0, #0
 801130c:	f43f aedb 	beq.w	80110c6 <_scanf_float+0x4a>
 8011310:	e6e6      	b.n	80110e0 <_scanf_float+0x64>
 8011312:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011316:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801131a:	463a      	mov	r2, r7
 801131c:	4640      	mov	r0, r8
 801131e:	4798      	blx	r3
 8011320:	6923      	ldr	r3, [r4, #16]
 8011322:	3b01      	subs	r3, #1
 8011324:	6123      	str	r3, [r4, #16]
 8011326:	e6e8      	b.n	80110fa <_scanf_float+0x7e>
 8011328:	1e6b      	subs	r3, r5, #1
 801132a:	2b06      	cmp	r3, #6
 801132c:	d824      	bhi.n	8011378 <_scanf_float+0x2fc>
 801132e:	2d02      	cmp	r5, #2
 8011330:	d836      	bhi.n	80113a0 <_scanf_float+0x324>
 8011332:	9b01      	ldr	r3, [sp, #4]
 8011334:	429e      	cmp	r6, r3
 8011336:	f67f aee4 	bls.w	8011102 <_scanf_float+0x86>
 801133a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801133e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011342:	463a      	mov	r2, r7
 8011344:	4640      	mov	r0, r8
 8011346:	4798      	blx	r3
 8011348:	6923      	ldr	r3, [r4, #16]
 801134a:	3b01      	subs	r3, #1
 801134c:	6123      	str	r3, [r4, #16]
 801134e:	e7f0      	b.n	8011332 <_scanf_float+0x2b6>
 8011350:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011354:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011358:	463a      	mov	r2, r7
 801135a:	4640      	mov	r0, r8
 801135c:	4798      	blx	r3
 801135e:	6923      	ldr	r3, [r4, #16]
 8011360:	3b01      	subs	r3, #1
 8011362:	6123      	str	r3, [r4, #16]
 8011364:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011368:	fa5f fa8a 	uxtb.w	sl, sl
 801136c:	f1ba 0f02 	cmp.w	sl, #2
 8011370:	d1ee      	bne.n	8011350 <_scanf_float+0x2d4>
 8011372:	3d03      	subs	r5, #3
 8011374:	b2ed      	uxtb	r5, r5
 8011376:	1b76      	subs	r6, r6, r5
 8011378:	6823      	ldr	r3, [r4, #0]
 801137a:	05da      	lsls	r2, r3, #23
 801137c:	d530      	bpl.n	80113e0 <_scanf_float+0x364>
 801137e:	055b      	lsls	r3, r3, #21
 8011380:	d511      	bpl.n	80113a6 <_scanf_float+0x32a>
 8011382:	9b01      	ldr	r3, [sp, #4]
 8011384:	429e      	cmp	r6, r3
 8011386:	f67f aebc 	bls.w	8011102 <_scanf_float+0x86>
 801138a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801138e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011392:	463a      	mov	r2, r7
 8011394:	4640      	mov	r0, r8
 8011396:	4798      	blx	r3
 8011398:	6923      	ldr	r3, [r4, #16]
 801139a:	3b01      	subs	r3, #1
 801139c:	6123      	str	r3, [r4, #16]
 801139e:	e7f0      	b.n	8011382 <_scanf_float+0x306>
 80113a0:	46aa      	mov	sl, r5
 80113a2:	46b3      	mov	fp, r6
 80113a4:	e7de      	b.n	8011364 <_scanf_float+0x2e8>
 80113a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80113aa:	6923      	ldr	r3, [r4, #16]
 80113ac:	2965      	cmp	r1, #101	@ 0x65
 80113ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80113b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80113b6:	6123      	str	r3, [r4, #16]
 80113b8:	d00c      	beq.n	80113d4 <_scanf_float+0x358>
 80113ba:	2945      	cmp	r1, #69	@ 0x45
 80113bc:	d00a      	beq.n	80113d4 <_scanf_float+0x358>
 80113be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80113c2:	463a      	mov	r2, r7
 80113c4:	4640      	mov	r0, r8
 80113c6:	4798      	blx	r3
 80113c8:	6923      	ldr	r3, [r4, #16]
 80113ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80113ce:	3b01      	subs	r3, #1
 80113d0:	1eb5      	subs	r5, r6, #2
 80113d2:	6123      	str	r3, [r4, #16]
 80113d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80113d8:	463a      	mov	r2, r7
 80113da:	4640      	mov	r0, r8
 80113dc:	4798      	blx	r3
 80113de:	462e      	mov	r6, r5
 80113e0:	6822      	ldr	r2, [r4, #0]
 80113e2:	f012 0210 	ands.w	r2, r2, #16
 80113e6:	d001      	beq.n	80113ec <_scanf_float+0x370>
 80113e8:	2000      	movs	r0, #0
 80113ea:	e68b      	b.n	8011104 <_scanf_float+0x88>
 80113ec:	7032      	strb	r2, [r6, #0]
 80113ee:	6823      	ldr	r3, [r4, #0]
 80113f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80113f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80113f8:	d11c      	bne.n	8011434 <_scanf_float+0x3b8>
 80113fa:	9b02      	ldr	r3, [sp, #8]
 80113fc:	454b      	cmp	r3, r9
 80113fe:	eba3 0209 	sub.w	r2, r3, r9
 8011402:	d123      	bne.n	801144c <_scanf_float+0x3d0>
 8011404:	9901      	ldr	r1, [sp, #4]
 8011406:	2200      	movs	r2, #0
 8011408:	4640      	mov	r0, r8
 801140a:	f002 fc45 	bl	8013c98 <_strtod_r>
 801140e:	9b03      	ldr	r3, [sp, #12]
 8011410:	6821      	ldr	r1, [r4, #0]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f011 0f02 	tst.w	r1, #2
 8011418:	ec57 6b10 	vmov	r6, r7, d0
 801141c:	f103 0204 	add.w	r2, r3, #4
 8011420:	d01f      	beq.n	8011462 <_scanf_float+0x3e6>
 8011422:	9903      	ldr	r1, [sp, #12]
 8011424:	600a      	str	r2, [r1, #0]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	e9c3 6700 	strd	r6, r7, [r3]
 801142c:	68e3      	ldr	r3, [r4, #12]
 801142e:	3301      	adds	r3, #1
 8011430:	60e3      	str	r3, [r4, #12]
 8011432:	e7d9      	b.n	80113e8 <_scanf_float+0x36c>
 8011434:	9b04      	ldr	r3, [sp, #16]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d0e4      	beq.n	8011404 <_scanf_float+0x388>
 801143a:	9905      	ldr	r1, [sp, #20]
 801143c:	230a      	movs	r3, #10
 801143e:	3101      	adds	r1, #1
 8011440:	4640      	mov	r0, r8
 8011442:	f002 fca9 	bl	8013d98 <_strtol_r>
 8011446:	9b04      	ldr	r3, [sp, #16]
 8011448:	9e05      	ldr	r6, [sp, #20]
 801144a:	1ac2      	subs	r2, r0, r3
 801144c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011450:	429e      	cmp	r6, r3
 8011452:	bf28      	it	cs
 8011454:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011458:	4910      	ldr	r1, [pc, #64]	@ (801149c <_scanf_float+0x420>)
 801145a:	4630      	mov	r0, r6
 801145c:	f000 f8e4 	bl	8011628 <siprintf>
 8011460:	e7d0      	b.n	8011404 <_scanf_float+0x388>
 8011462:	f011 0f04 	tst.w	r1, #4
 8011466:	9903      	ldr	r1, [sp, #12]
 8011468:	600a      	str	r2, [r1, #0]
 801146a:	d1dc      	bne.n	8011426 <_scanf_float+0x3aa>
 801146c:	681d      	ldr	r5, [r3, #0]
 801146e:	4632      	mov	r2, r6
 8011470:	463b      	mov	r3, r7
 8011472:	4630      	mov	r0, r6
 8011474:	4639      	mov	r1, r7
 8011476:	f7ef fb81 	bl	8000b7c <__aeabi_dcmpun>
 801147a:	b128      	cbz	r0, 8011488 <_scanf_float+0x40c>
 801147c:	4808      	ldr	r0, [pc, #32]	@ (80114a0 <_scanf_float+0x424>)
 801147e:	f000 fa03 	bl	8011888 <nanf>
 8011482:	ed85 0a00 	vstr	s0, [r5]
 8011486:	e7d1      	b.n	801142c <_scanf_float+0x3b0>
 8011488:	4630      	mov	r0, r6
 801148a:	4639      	mov	r1, r7
 801148c:	f7ef fbd4 	bl	8000c38 <__aeabi_d2f>
 8011490:	6028      	str	r0, [r5, #0]
 8011492:	e7cb      	b.n	801142c <_scanf_float+0x3b0>
 8011494:	f04f 0900 	mov.w	r9, #0
 8011498:	e629      	b.n	80110ee <_scanf_float+0x72>
 801149a:	bf00      	nop
 801149c:	08016f2a 	.word	0x08016f2a
 80114a0:	080172e0 	.word	0x080172e0

080114a4 <std>:
 80114a4:	2300      	movs	r3, #0
 80114a6:	b510      	push	{r4, lr}
 80114a8:	4604      	mov	r4, r0
 80114aa:	e9c0 3300 	strd	r3, r3, [r0]
 80114ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80114b2:	6083      	str	r3, [r0, #8]
 80114b4:	8181      	strh	r1, [r0, #12]
 80114b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80114b8:	81c2      	strh	r2, [r0, #14]
 80114ba:	6183      	str	r3, [r0, #24]
 80114bc:	4619      	mov	r1, r3
 80114be:	2208      	movs	r2, #8
 80114c0:	305c      	adds	r0, #92	@ 0x5c
 80114c2:	f000 f940 	bl	8011746 <memset>
 80114c6:	4b0d      	ldr	r3, [pc, #52]	@ (80114fc <std+0x58>)
 80114c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80114ca:	4b0d      	ldr	r3, [pc, #52]	@ (8011500 <std+0x5c>)
 80114cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80114ce:	4b0d      	ldr	r3, [pc, #52]	@ (8011504 <std+0x60>)
 80114d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80114d2:	4b0d      	ldr	r3, [pc, #52]	@ (8011508 <std+0x64>)
 80114d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80114d6:	4b0d      	ldr	r3, [pc, #52]	@ (801150c <std+0x68>)
 80114d8:	6224      	str	r4, [r4, #32]
 80114da:	429c      	cmp	r4, r3
 80114dc:	d006      	beq.n	80114ec <std+0x48>
 80114de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80114e2:	4294      	cmp	r4, r2
 80114e4:	d002      	beq.n	80114ec <std+0x48>
 80114e6:	33d0      	adds	r3, #208	@ 0xd0
 80114e8:	429c      	cmp	r4, r3
 80114ea:	d105      	bne.n	80114f8 <std+0x54>
 80114ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80114f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114f4:	f000 b9b6 	b.w	8011864 <__retarget_lock_init_recursive>
 80114f8:	bd10      	pop	{r4, pc}
 80114fa:	bf00      	nop
 80114fc:	080116bd 	.word	0x080116bd
 8011500:	080116e3 	.word	0x080116e3
 8011504:	0801171b 	.word	0x0801171b
 8011508:	0801173f 	.word	0x0801173f
 801150c:	2000255c 	.word	0x2000255c

08011510 <stdio_exit_handler>:
 8011510:	4a02      	ldr	r2, [pc, #8]	@ (801151c <stdio_exit_handler+0xc>)
 8011512:	4903      	ldr	r1, [pc, #12]	@ (8011520 <stdio_exit_handler+0x10>)
 8011514:	4803      	ldr	r0, [pc, #12]	@ (8011524 <stdio_exit_handler+0x14>)
 8011516:	f000 b869 	b.w	80115ec <_fwalk_sglue>
 801151a:	bf00      	nop
 801151c:	200001c0 	.word	0x200001c0
 8011520:	08014789 	.word	0x08014789
 8011524:	200001d0 	.word	0x200001d0

08011528 <cleanup_stdio>:
 8011528:	6841      	ldr	r1, [r0, #4]
 801152a:	4b0c      	ldr	r3, [pc, #48]	@ (801155c <cleanup_stdio+0x34>)
 801152c:	4299      	cmp	r1, r3
 801152e:	b510      	push	{r4, lr}
 8011530:	4604      	mov	r4, r0
 8011532:	d001      	beq.n	8011538 <cleanup_stdio+0x10>
 8011534:	f003 f928 	bl	8014788 <_fflush_r>
 8011538:	68a1      	ldr	r1, [r4, #8]
 801153a:	4b09      	ldr	r3, [pc, #36]	@ (8011560 <cleanup_stdio+0x38>)
 801153c:	4299      	cmp	r1, r3
 801153e:	d002      	beq.n	8011546 <cleanup_stdio+0x1e>
 8011540:	4620      	mov	r0, r4
 8011542:	f003 f921 	bl	8014788 <_fflush_r>
 8011546:	68e1      	ldr	r1, [r4, #12]
 8011548:	4b06      	ldr	r3, [pc, #24]	@ (8011564 <cleanup_stdio+0x3c>)
 801154a:	4299      	cmp	r1, r3
 801154c:	d004      	beq.n	8011558 <cleanup_stdio+0x30>
 801154e:	4620      	mov	r0, r4
 8011550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011554:	f003 b918 	b.w	8014788 <_fflush_r>
 8011558:	bd10      	pop	{r4, pc}
 801155a:	bf00      	nop
 801155c:	2000255c 	.word	0x2000255c
 8011560:	200025c4 	.word	0x200025c4
 8011564:	2000262c 	.word	0x2000262c

08011568 <global_stdio_init.part.0>:
 8011568:	b510      	push	{r4, lr}
 801156a:	4b0b      	ldr	r3, [pc, #44]	@ (8011598 <global_stdio_init.part.0+0x30>)
 801156c:	4c0b      	ldr	r4, [pc, #44]	@ (801159c <global_stdio_init.part.0+0x34>)
 801156e:	4a0c      	ldr	r2, [pc, #48]	@ (80115a0 <global_stdio_init.part.0+0x38>)
 8011570:	601a      	str	r2, [r3, #0]
 8011572:	4620      	mov	r0, r4
 8011574:	2200      	movs	r2, #0
 8011576:	2104      	movs	r1, #4
 8011578:	f7ff ff94 	bl	80114a4 <std>
 801157c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011580:	2201      	movs	r2, #1
 8011582:	2109      	movs	r1, #9
 8011584:	f7ff ff8e 	bl	80114a4 <std>
 8011588:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801158c:	2202      	movs	r2, #2
 801158e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011592:	2112      	movs	r1, #18
 8011594:	f7ff bf86 	b.w	80114a4 <std>
 8011598:	20002694 	.word	0x20002694
 801159c:	2000255c 	.word	0x2000255c
 80115a0:	08011511 	.word	0x08011511

080115a4 <__sfp_lock_acquire>:
 80115a4:	4801      	ldr	r0, [pc, #4]	@ (80115ac <__sfp_lock_acquire+0x8>)
 80115a6:	f000 b95e 	b.w	8011866 <__retarget_lock_acquire_recursive>
 80115aa:	bf00      	nop
 80115ac:	2000269d 	.word	0x2000269d

080115b0 <__sfp_lock_release>:
 80115b0:	4801      	ldr	r0, [pc, #4]	@ (80115b8 <__sfp_lock_release+0x8>)
 80115b2:	f000 b959 	b.w	8011868 <__retarget_lock_release_recursive>
 80115b6:	bf00      	nop
 80115b8:	2000269d 	.word	0x2000269d

080115bc <__sinit>:
 80115bc:	b510      	push	{r4, lr}
 80115be:	4604      	mov	r4, r0
 80115c0:	f7ff fff0 	bl	80115a4 <__sfp_lock_acquire>
 80115c4:	6a23      	ldr	r3, [r4, #32]
 80115c6:	b11b      	cbz	r3, 80115d0 <__sinit+0x14>
 80115c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115cc:	f7ff bff0 	b.w	80115b0 <__sfp_lock_release>
 80115d0:	4b04      	ldr	r3, [pc, #16]	@ (80115e4 <__sinit+0x28>)
 80115d2:	6223      	str	r3, [r4, #32]
 80115d4:	4b04      	ldr	r3, [pc, #16]	@ (80115e8 <__sinit+0x2c>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d1f5      	bne.n	80115c8 <__sinit+0xc>
 80115dc:	f7ff ffc4 	bl	8011568 <global_stdio_init.part.0>
 80115e0:	e7f2      	b.n	80115c8 <__sinit+0xc>
 80115e2:	bf00      	nop
 80115e4:	08011529 	.word	0x08011529
 80115e8:	20002694 	.word	0x20002694

080115ec <_fwalk_sglue>:
 80115ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115f0:	4607      	mov	r7, r0
 80115f2:	4688      	mov	r8, r1
 80115f4:	4614      	mov	r4, r2
 80115f6:	2600      	movs	r6, #0
 80115f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80115fc:	f1b9 0901 	subs.w	r9, r9, #1
 8011600:	d505      	bpl.n	801160e <_fwalk_sglue+0x22>
 8011602:	6824      	ldr	r4, [r4, #0]
 8011604:	2c00      	cmp	r4, #0
 8011606:	d1f7      	bne.n	80115f8 <_fwalk_sglue+0xc>
 8011608:	4630      	mov	r0, r6
 801160a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801160e:	89ab      	ldrh	r3, [r5, #12]
 8011610:	2b01      	cmp	r3, #1
 8011612:	d907      	bls.n	8011624 <_fwalk_sglue+0x38>
 8011614:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011618:	3301      	adds	r3, #1
 801161a:	d003      	beq.n	8011624 <_fwalk_sglue+0x38>
 801161c:	4629      	mov	r1, r5
 801161e:	4638      	mov	r0, r7
 8011620:	47c0      	blx	r8
 8011622:	4306      	orrs	r6, r0
 8011624:	3568      	adds	r5, #104	@ 0x68
 8011626:	e7e9      	b.n	80115fc <_fwalk_sglue+0x10>

08011628 <siprintf>:
 8011628:	b40e      	push	{r1, r2, r3}
 801162a:	b500      	push	{lr}
 801162c:	b09c      	sub	sp, #112	@ 0x70
 801162e:	ab1d      	add	r3, sp, #116	@ 0x74
 8011630:	9002      	str	r0, [sp, #8]
 8011632:	9006      	str	r0, [sp, #24]
 8011634:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011638:	4809      	ldr	r0, [pc, #36]	@ (8011660 <siprintf+0x38>)
 801163a:	9107      	str	r1, [sp, #28]
 801163c:	9104      	str	r1, [sp, #16]
 801163e:	4909      	ldr	r1, [pc, #36]	@ (8011664 <siprintf+0x3c>)
 8011640:	f853 2b04 	ldr.w	r2, [r3], #4
 8011644:	9105      	str	r1, [sp, #20]
 8011646:	6800      	ldr	r0, [r0, #0]
 8011648:	9301      	str	r3, [sp, #4]
 801164a:	a902      	add	r1, sp, #8
 801164c:	f002 fc02 	bl	8013e54 <_svfiprintf_r>
 8011650:	9b02      	ldr	r3, [sp, #8]
 8011652:	2200      	movs	r2, #0
 8011654:	701a      	strb	r2, [r3, #0]
 8011656:	b01c      	add	sp, #112	@ 0x70
 8011658:	f85d eb04 	ldr.w	lr, [sp], #4
 801165c:	b003      	add	sp, #12
 801165e:	4770      	bx	lr
 8011660:	200001cc 	.word	0x200001cc
 8011664:	ffff0208 	.word	0xffff0208

08011668 <siscanf>:
 8011668:	b40e      	push	{r1, r2, r3}
 801166a:	b530      	push	{r4, r5, lr}
 801166c:	b09c      	sub	sp, #112	@ 0x70
 801166e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8011670:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011674:	f854 5b04 	ldr.w	r5, [r4], #4
 8011678:	f8ad 2014 	strh.w	r2, [sp, #20]
 801167c:	9002      	str	r0, [sp, #8]
 801167e:	9006      	str	r0, [sp, #24]
 8011680:	f7ee fe1e 	bl	80002c0 <strlen>
 8011684:	4b0b      	ldr	r3, [pc, #44]	@ (80116b4 <siscanf+0x4c>)
 8011686:	9003      	str	r0, [sp, #12]
 8011688:	9007      	str	r0, [sp, #28]
 801168a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801168c:	480a      	ldr	r0, [pc, #40]	@ (80116b8 <siscanf+0x50>)
 801168e:	9401      	str	r4, [sp, #4]
 8011690:	2300      	movs	r3, #0
 8011692:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011694:	9314      	str	r3, [sp, #80]	@ 0x50
 8011696:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801169a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801169e:	462a      	mov	r2, r5
 80116a0:	4623      	mov	r3, r4
 80116a2:	a902      	add	r1, sp, #8
 80116a4:	6800      	ldr	r0, [r0, #0]
 80116a6:	f002 fd29 	bl	80140fc <__ssvfiscanf_r>
 80116aa:	b01c      	add	sp, #112	@ 0x70
 80116ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80116b0:	b003      	add	sp, #12
 80116b2:	4770      	bx	lr
 80116b4:	080116df 	.word	0x080116df
 80116b8:	200001cc 	.word	0x200001cc

080116bc <__sread>:
 80116bc:	b510      	push	{r4, lr}
 80116be:	460c      	mov	r4, r1
 80116c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116c4:	f000 f880 	bl	80117c8 <_read_r>
 80116c8:	2800      	cmp	r0, #0
 80116ca:	bfab      	itete	ge
 80116cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80116ce:	89a3      	ldrhlt	r3, [r4, #12]
 80116d0:	181b      	addge	r3, r3, r0
 80116d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80116d6:	bfac      	ite	ge
 80116d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80116da:	81a3      	strhlt	r3, [r4, #12]
 80116dc:	bd10      	pop	{r4, pc}

080116de <__seofread>:
 80116de:	2000      	movs	r0, #0
 80116e0:	4770      	bx	lr

080116e2 <__swrite>:
 80116e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116e6:	461f      	mov	r7, r3
 80116e8:	898b      	ldrh	r3, [r1, #12]
 80116ea:	05db      	lsls	r3, r3, #23
 80116ec:	4605      	mov	r5, r0
 80116ee:	460c      	mov	r4, r1
 80116f0:	4616      	mov	r6, r2
 80116f2:	d505      	bpl.n	8011700 <__swrite+0x1e>
 80116f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116f8:	2302      	movs	r3, #2
 80116fa:	2200      	movs	r2, #0
 80116fc:	f000 f852 	bl	80117a4 <_lseek_r>
 8011700:	89a3      	ldrh	r3, [r4, #12]
 8011702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801170a:	81a3      	strh	r3, [r4, #12]
 801170c:	4632      	mov	r2, r6
 801170e:	463b      	mov	r3, r7
 8011710:	4628      	mov	r0, r5
 8011712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011716:	f000 b869 	b.w	80117ec <_write_r>

0801171a <__sseek>:
 801171a:	b510      	push	{r4, lr}
 801171c:	460c      	mov	r4, r1
 801171e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011722:	f000 f83f 	bl	80117a4 <_lseek_r>
 8011726:	1c43      	adds	r3, r0, #1
 8011728:	89a3      	ldrh	r3, [r4, #12]
 801172a:	bf15      	itete	ne
 801172c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801172e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011732:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011736:	81a3      	strheq	r3, [r4, #12]
 8011738:	bf18      	it	ne
 801173a:	81a3      	strhne	r3, [r4, #12]
 801173c:	bd10      	pop	{r4, pc}

0801173e <__sclose>:
 801173e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011742:	f000 b81f 	b.w	8011784 <_close_r>

08011746 <memset>:
 8011746:	4402      	add	r2, r0
 8011748:	4603      	mov	r3, r0
 801174a:	4293      	cmp	r3, r2
 801174c:	d100      	bne.n	8011750 <memset+0xa>
 801174e:	4770      	bx	lr
 8011750:	f803 1b01 	strb.w	r1, [r3], #1
 8011754:	e7f9      	b.n	801174a <memset+0x4>

08011756 <strncmp>:
 8011756:	b510      	push	{r4, lr}
 8011758:	b16a      	cbz	r2, 8011776 <strncmp+0x20>
 801175a:	3901      	subs	r1, #1
 801175c:	1884      	adds	r4, r0, r2
 801175e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011762:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011766:	429a      	cmp	r2, r3
 8011768:	d103      	bne.n	8011772 <strncmp+0x1c>
 801176a:	42a0      	cmp	r0, r4
 801176c:	d001      	beq.n	8011772 <strncmp+0x1c>
 801176e:	2a00      	cmp	r2, #0
 8011770:	d1f5      	bne.n	801175e <strncmp+0x8>
 8011772:	1ad0      	subs	r0, r2, r3
 8011774:	bd10      	pop	{r4, pc}
 8011776:	4610      	mov	r0, r2
 8011778:	e7fc      	b.n	8011774 <strncmp+0x1e>
	...

0801177c <_localeconv_r>:
 801177c:	4800      	ldr	r0, [pc, #0]	@ (8011780 <_localeconv_r+0x4>)
 801177e:	4770      	bx	lr
 8011780:	2000030c 	.word	0x2000030c

08011784 <_close_r>:
 8011784:	b538      	push	{r3, r4, r5, lr}
 8011786:	4d06      	ldr	r5, [pc, #24]	@ (80117a0 <_close_r+0x1c>)
 8011788:	2300      	movs	r3, #0
 801178a:	4604      	mov	r4, r0
 801178c:	4608      	mov	r0, r1
 801178e:	602b      	str	r3, [r5, #0]
 8011790:	f7f2 fcdc 	bl	800414c <_close>
 8011794:	1c43      	adds	r3, r0, #1
 8011796:	d102      	bne.n	801179e <_close_r+0x1a>
 8011798:	682b      	ldr	r3, [r5, #0]
 801179a:	b103      	cbz	r3, 801179e <_close_r+0x1a>
 801179c:	6023      	str	r3, [r4, #0]
 801179e:	bd38      	pop	{r3, r4, r5, pc}
 80117a0:	20002698 	.word	0x20002698

080117a4 <_lseek_r>:
 80117a4:	b538      	push	{r3, r4, r5, lr}
 80117a6:	4d07      	ldr	r5, [pc, #28]	@ (80117c4 <_lseek_r+0x20>)
 80117a8:	4604      	mov	r4, r0
 80117aa:	4608      	mov	r0, r1
 80117ac:	4611      	mov	r1, r2
 80117ae:	2200      	movs	r2, #0
 80117b0:	602a      	str	r2, [r5, #0]
 80117b2:	461a      	mov	r2, r3
 80117b4:	f7f2 fcf1 	bl	800419a <_lseek>
 80117b8:	1c43      	adds	r3, r0, #1
 80117ba:	d102      	bne.n	80117c2 <_lseek_r+0x1e>
 80117bc:	682b      	ldr	r3, [r5, #0]
 80117be:	b103      	cbz	r3, 80117c2 <_lseek_r+0x1e>
 80117c0:	6023      	str	r3, [r4, #0]
 80117c2:	bd38      	pop	{r3, r4, r5, pc}
 80117c4:	20002698 	.word	0x20002698

080117c8 <_read_r>:
 80117c8:	b538      	push	{r3, r4, r5, lr}
 80117ca:	4d07      	ldr	r5, [pc, #28]	@ (80117e8 <_read_r+0x20>)
 80117cc:	4604      	mov	r4, r0
 80117ce:	4608      	mov	r0, r1
 80117d0:	4611      	mov	r1, r2
 80117d2:	2200      	movs	r2, #0
 80117d4:	602a      	str	r2, [r5, #0]
 80117d6:	461a      	mov	r2, r3
 80117d8:	f7f2 fc7f 	bl	80040da <_read>
 80117dc:	1c43      	adds	r3, r0, #1
 80117de:	d102      	bne.n	80117e6 <_read_r+0x1e>
 80117e0:	682b      	ldr	r3, [r5, #0]
 80117e2:	b103      	cbz	r3, 80117e6 <_read_r+0x1e>
 80117e4:	6023      	str	r3, [r4, #0]
 80117e6:	bd38      	pop	{r3, r4, r5, pc}
 80117e8:	20002698 	.word	0x20002698

080117ec <_write_r>:
 80117ec:	b538      	push	{r3, r4, r5, lr}
 80117ee:	4d07      	ldr	r5, [pc, #28]	@ (801180c <_write_r+0x20>)
 80117f0:	4604      	mov	r4, r0
 80117f2:	4608      	mov	r0, r1
 80117f4:	4611      	mov	r1, r2
 80117f6:	2200      	movs	r2, #0
 80117f8:	602a      	str	r2, [r5, #0]
 80117fa:	461a      	mov	r2, r3
 80117fc:	f7f2 fc8a 	bl	8004114 <_write>
 8011800:	1c43      	adds	r3, r0, #1
 8011802:	d102      	bne.n	801180a <_write_r+0x1e>
 8011804:	682b      	ldr	r3, [r5, #0]
 8011806:	b103      	cbz	r3, 801180a <_write_r+0x1e>
 8011808:	6023      	str	r3, [r4, #0]
 801180a:	bd38      	pop	{r3, r4, r5, pc}
 801180c:	20002698 	.word	0x20002698

08011810 <__errno>:
 8011810:	4b01      	ldr	r3, [pc, #4]	@ (8011818 <__errno+0x8>)
 8011812:	6818      	ldr	r0, [r3, #0]
 8011814:	4770      	bx	lr
 8011816:	bf00      	nop
 8011818:	200001cc 	.word	0x200001cc

0801181c <__libc_init_array>:
 801181c:	b570      	push	{r4, r5, r6, lr}
 801181e:	4d0d      	ldr	r5, [pc, #52]	@ (8011854 <__libc_init_array+0x38>)
 8011820:	4c0d      	ldr	r4, [pc, #52]	@ (8011858 <__libc_init_array+0x3c>)
 8011822:	1b64      	subs	r4, r4, r5
 8011824:	10a4      	asrs	r4, r4, #2
 8011826:	2600      	movs	r6, #0
 8011828:	42a6      	cmp	r6, r4
 801182a:	d109      	bne.n	8011840 <__libc_init_array+0x24>
 801182c:	4d0b      	ldr	r5, [pc, #44]	@ (801185c <__libc_init_array+0x40>)
 801182e:	4c0c      	ldr	r4, [pc, #48]	@ (8011860 <__libc_init_array+0x44>)
 8011830:	f005 f97e 	bl	8016b30 <_init>
 8011834:	1b64      	subs	r4, r4, r5
 8011836:	10a4      	asrs	r4, r4, #2
 8011838:	2600      	movs	r6, #0
 801183a:	42a6      	cmp	r6, r4
 801183c:	d105      	bne.n	801184a <__libc_init_array+0x2e>
 801183e:	bd70      	pop	{r4, r5, r6, pc}
 8011840:	f855 3b04 	ldr.w	r3, [r5], #4
 8011844:	4798      	blx	r3
 8011846:	3601      	adds	r6, #1
 8011848:	e7ee      	b.n	8011828 <__libc_init_array+0xc>
 801184a:	f855 3b04 	ldr.w	r3, [r5], #4
 801184e:	4798      	blx	r3
 8011850:	3601      	adds	r6, #1
 8011852:	e7f2      	b.n	801183a <__libc_init_array+0x1e>
 8011854:	08017380 	.word	0x08017380
 8011858:	08017380 	.word	0x08017380
 801185c:	08017380 	.word	0x08017380
 8011860:	08017384 	.word	0x08017384

08011864 <__retarget_lock_init_recursive>:
 8011864:	4770      	bx	lr

08011866 <__retarget_lock_acquire_recursive>:
 8011866:	4770      	bx	lr

08011868 <__retarget_lock_release_recursive>:
 8011868:	4770      	bx	lr

0801186a <memcpy>:
 801186a:	440a      	add	r2, r1
 801186c:	4291      	cmp	r1, r2
 801186e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011872:	d100      	bne.n	8011876 <memcpy+0xc>
 8011874:	4770      	bx	lr
 8011876:	b510      	push	{r4, lr}
 8011878:	f811 4b01 	ldrb.w	r4, [r1], #1
 801187c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011880:	4291      	cmp	r1, r2
 8011882:	d1f9      	bne.n	8011878 <memcpy+0xe>
 8011884:	bd10      	pop	{r4, pc}
	...

08011888 <nanf>:
 8011888:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011890 <nanf+0x8>
 801188c:	4770      	bx	lr
 801188e:	bf00      	nop
 8011890:	7fc00000 	.word	0x7fc00000

08011894 <quorem>:
 8011894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011898:	6903      	ldr	r3, [r0, #16]
 801189a:	690c      	ldr	r4, [r1, #16]
 801189c:	42a3      	cmp	r3, r4
 801189e:	4607      	mov	r7, r0
 80118a0:	db7e      	blt.n	80119a0 <quorem+0x10c>
 80118a2:	3c01      	subs	r4, #1
 80118a4:	f101 0814 	add.w	r8, r1, #20
 80118a8:	00a3      	lsls	r3, r4, #2
 80118aa:	f100 0514 	add.w	r5, r0, #20
 80118ae:	9300      	str	r3, [sp, #0]
 80118b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80118b4:	9301      	str	r3, [sp, #4]
 80118b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80118ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80118be:	3301      	adds	r3, #1
 80118c0:	429a      	cmp	r2, r3
 80118c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80118c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80118ca:	d32e      	bcc.n	801192a <quorem+0x96>
 80118cc:	f04f 0a00 	mov.w	sl, #0
 80118d0:	46c4      	mov	ip, r8
 80118d2:	46ae      	mov	lr, r5
 80118d4:	46d3      	mov	fp, sl
 80118d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80118da:	b298      	uxth	r0, r3
 80118dc:	fb06 a000 	mla	r0, r6, r0, sl
 80118e0:	0c02      	lsrs	r2, r0, #16
 80118e2:	0c1b      	lsrs	r3, r3, #16
 80118e4:	fb06 2303 	mla	r3, r6, r3, r2
 80118e8:	f8de 2000 	ldr.w	r2, [lr]
 80118ec:	b280      	uxth	r0, r0
 80118ee:	b292      	uxth	r2, r2
 80118f0:	1a12      	subs	r2, r2, r0
 80118f2:	445a      	add	r2, fp
 80118f4:	f8de 0000 	ldr.w	r0, [lr]
 80118f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011902:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011906:	b292      	uxth	r2, r2
 8011908:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801190c:	45e1      	cmp	r9, ip
 801190e:	f84e 2b04 	str.w	r2, [lr], #4
 8011912:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011916:	d2de      	bcs.n	80118d6 <quorem+0x42>
 8011918:	9b00      	ldr	r3, [sp, #0]
 801191a:	58eb      	ldr	r3, [r5, r3]
 801191c:	b92b      	cbnz	r3, 801192a <quorem+0x96>
 801191e:	9b01      	ldr	r3, [sp, #4]
 8011920:	3b04      	subs	r3, #4
 8011922:	429d      	cmp	r5, r3
 8011924:	461a      	mov	r2, r3
 8011926:	d32f      	bcc.n	8011988 <quorem+0xf4>
 8011928:	613c      	str	r4, [r7, #16]
 801192a:	4638      	mov	r0, r7
 801192c:	f001 f9c4 	bl	8012cb8 <__mcmp>
 8011930:	2800      	cmp	r0, #0
 8011932:	db25      	blt.n	8011980 <quorem+0xec>
 8011934:	4629      	mov	r1, r5
 8011936:	2000      	movs	r0, #0
 8011938:	f858 2b04 	ldr.w	r2, [r8], #4
 801193c:	f8d1 c000 	ldr.w	ip, [r1]
 8011940:	fa1f fe82 	uxth.w	lr, r2
 8011944:	fa1f f38c 	uxth.w	r3, ip
 8011948:	eba3 030e 	sub.w	r3, r3, lr
 801194c:	4403      	add	r3, r0
 801194e:	0c12      	lsrs	r2, r2, #16
 8011950:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011954:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011958:	b29b      	uxth	r3, r3
 801195a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801195e:	45c1      	cmp	r9, r8
 8011960:	f841 3b04 	str.w	r3, [r1], #4
 8011964:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011968:	d2e6      	bcs.n	8011938 <quorem+0xa4>
 801196a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801196e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011972:	b922      	cbnz	r2, 801197e <quorem+0xea>
 8011974:	3b04      	subs	r3, #4
 8011976:	429d      	cmp	r5, r3
 8011978:	461a      	mov	r2, r3
 801197a:	d30b      	bcc.n	8011994 <quorem+0x100>
 801197c:	613c      	str	r4, [r7, #16]
 801197e:	3601      	adds	r6, #1
 8011980:	4630      	mov	r0, r6
 8011982:	b003      	add	sp, #12
 8011984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011988:	6812      	ldr	r2, [r2, #0]
 801198a:	3b04      	subs	r3, #4
 801198c:	2a00      	cmp	r2, #0
 801198e:	d1cb      	bne.n	8011928 <quorem+0x94>
 8011990:	3c01      	subs	r4, #1
 8011992:	e7c6      	b.n	8011922 <quorem+0x8e>
 8011994:	6812      	ldr	r2, [r2, #0]
 8011996:	3b04      	subs	r3, #4
 8011998:	2a00      	cmp	r2, #0
 801199a:	d1ef      	bne.n	801197c <quorem+0xe8>
 801199c:	3c01      	subs	r4, #1
 801199e:	e7ea      	b.n	8011976 <quorem+0xe2>
 80119a0:	2000      	movs	r0, #0
 80119a2:	e7ee      	b.n	8011982 <quorem+0xee>
 80119a4:	0000      	movs	r0, r0
	...

080119a8 <_dtoa_r>:
 80119a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ac:	69c7      	ldr	r7, [r0, #28]
 80119ae:	b099      	sub	sp, #100	@ 0x64
 80119b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80119b4:	ec55 4b10 	vmov	r4, r5, d0
 80119b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80119ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80119bc:	4683      	mov	fp, r0
 80119be:	920e      	str	r2, [sp, #56]	@ 0x38
 80119c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80119c2:	b97f      	cbnz	r7, 80119e4 <_dtoa_r+0x3c>
 80119c4:	2010      	movs	r0, #16
 80119c6:	f000 fdfd 	bl	80125c4 <malloc>
 80119ca:	4602      	mov	r2, r0
 80119cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80119d0:	b920      	cbnz	r0, 80119dc <_dtoa_r+0x34>
 80119d2:	4ba7      	ldr	r3, [pc, #668]	@ (8011c70 <_dtoa_r+0x2c8>)
 80119d4:	21ef      	movs	r1, #239	@ 0xef
 80119d6:	48a7      	ldr	r0, [pc, #668]	@ (8011c74 <_dtoa_r+0x2cc>)
 80119d8:	f002 ffa6 	bl	8014928 <__assert_func>
 80119dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80119e0:	6007      	str	r7, [r0, #0]
 80119e2:	60c7      	str	r7, [r0, #12]
 80119e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80119e8:	6819      	ldr	r1, [r3, #0]
 80119ea:	b159      	cbz	r1, 8011a04 <_dtoa_r+0x5c>
 80119ec:	685a      	ldr	r2, [r3, #4]
 80119ee:	604a      	str	r2, [r1, #4]
 80119f0:	2301      	movs	r3, #1
 80119f2:	4093      	lsls	r3, r2
 80119f4:	608b      	str	r3, [r1, #8]
 80119f6:	4658      	mov	r0, fp
 80119f8:	f000 feda 	bl	80127b0 <_Bfree>
 80119fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011a00:	2200      	movs	r2, #0
 8011a02:	601a      	str	r2, [r3, #0]
 8011a04:	1e2b      	subs	r3, r5, #0
 8011a06:	bfb9      	ittee	lt
 8011a08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011a0c:	9303      	strlt	r3, [sp, #12]
 8011a0e:	2300      	movge	r3, #0
 8011a10:	6033      	strge	r3, [r6, #0]
 8011a12:	9f03      	ldr	r7, [sp, #12]
 8011a14:	4b98      	ldr	r3, [pc, #608]	@ (8011c78 <_dtoa_r+0x2d0>)
 8011a16:	bfbc      	itt	lt
 8011a18:	2201      	movlt	r2, #1
 8011a1a:	6032      	strlt	r2, [r6, #0]
 8011a1c:	43bb      	bics	r3, r7
 8011a1e:	d112      	bne.n	8011a46 <_dtoa_r+0x9e>
 8011a20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011a22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011a26:	6013      	str	r3, [r2, #0]
 8011a28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011a2c:	4323      	orrs	r3, r4
 8011a2e:	f000 854d 	beq.w	80124cc <_dtoa_r+0xb24>
 8011a32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011a34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011c8c <_dtoa_r+0x2e4>
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	f000 854f 	beq.w	80124dc <_dtoa_r+0xb34>
 8011a3e:	f10a 0303 	add.w	r3, sl, #3
 8011a42:	f000 bd49 	b.w	80124d8 <_dtoa_r+0xb30>
 8011a46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	ec51 0b17 	vmov	r0, r1, d7
 8011a50:	2300      	movs	r3, #0
 8011a52:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011a56:	f7ef f85f 	bl	8000b18 <__aeabi_dcmpeq>
 8011a5a:	4680      	mov	r8, r0
 8011a5c:	b158      	cbz	r0, 8011a76 <_dtoa_r+0xce>
 8011a5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011a60:	2301      	movs	r3, #1
 8011a62:	6013      	str	r3, [r2, #0]
 8011a64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011a66:	b113      	cbz	r3, 8011a6e <_dtoa_r+0xc6>
 8011a68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011a6a:	4b84      	ldr	r3, [pc, #528]	@ (8011c7c <_dtoa_r+0x2d4>)
 8011a6c:	6013      	str	r3, [r2, #0]
 8011a6e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011c90 <_dtoa_r+0x2e8>
 8011a72:	f000 bd33 	b.w	80124dc <_dtoa_r+0xb34>
 8011a76:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011a7a:	aa16      	add	r2, sp, #88	@ 0x58
 8011a7c:	a917      	add	r1, sp, #92	@ 0x5c
 8011a7e:	4658      	mov	r0, fp
 8011a80:	f001 fa3a 	bl	8012ef8 <__d2b>
 8011a84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011a88:	4681      	mov	r9, r0
 8011a8a:	2e00      	cmp	r6, #0
 8011a8c:	d077      	beq.n	8011b7e <_dtoa_r+0x1d6>
 8011a8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011a90:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011a98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011a9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011aa0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011aa4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	2200      	movs	r2, #0
 8011aac:	4b74      	ldr	r3, [pc, #464]	@ (8011c80 <_dtoa_r+0x2d8>)
 8011aae:	f7ee fc13 	bl	80002d8 <__aeabi_dsub>
 8011ab2:	a369      	add	r3, pc, #420	@ (adr r3, 8011c58 <_dtoa_r+0x2b0>)
 8011ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab8:	f7ee fdc6 	bl	8000648 <__aeabi_dmul>
 8011abc:	a368      	add	r3, pc, #416	@ (adr r3, 8011c60 <_dtoa_r+0x2b8>)
 8011abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac2:	f7ee fc0b 	bl	80002dc <__adddf3>
 8011ac6:	4604      	mov	r4, r0
 8011ac8:	4630      	mov	r0, r6
 8011aca:	460d      	mov	r5, r1
 8011acc:	f7ee fd52 	bl	8000574 <__aeabi_i2d>
 8011ad0:	a365      	add	r3, pc, #404	@ (adr r3, 8011c68 <_dtoa_r+0x2c0>)
 8011ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad6:	f7ee fdb7 	bl	8000648 <__aeabi_dmul>
 8011ada:	4602      	mov	r2, r0
 8011adc:	460b      	mov	r3, r1
 8011ade:	4620      	mov	r0, r4
 8011ae0:	4629      	mov	r1, r5
 8011ae2:	f7ee fbfb 	bl	80002dc <__adddf3>
 8011ae6:	4604      	mov	r4, r0
 8011ae8:	460d      	mov	r5, r1
 8011aea:	f7ef f85d 	bl	8000ba8 <__aeabi_d2iz>
 8011aee:	2200      	movs	r2, #0
 8011af0:	4607      	mov	r7, r0
 8011af2:	2300      	movs	r3, #0
 8011af4:	4620      	mov	r0, r4
 8011af6:	4629      	mov	r1, r5
 8011af8:	f7ef f818 	bl	8000b2c <__aeabi_dcmplt>
 8011afc:	b140      	cbz	r0, 8011b10 <_dtoa_r+0x168>
 8011afe:	4638      	mov	r0, r7
 8011b00:	f7ee fd38 	bl	8000574 <__aeabi_i2d>
 8011b04:	4622      	mov	r2, r4
 8011b06:	462b      	mov	r3, r5
 8011b08:	f7ef f806 	bl	8000b18 <__aeabi_dcmpeq>
 8011b0c:	b900      	cbnz	r0, 8011b10 <_dtoa_r+0x168>
 8011b0e:	3f01      	subs	r7, #1
 8011b10:	2f16      	cmp	r7, #22
 8011b12:	d851      	bhi.n	8011bb8 <_dtoa_r+0x210>
 8011b14:	4b5b      	ldr	r3, [pc, #364]	@ (8011c84 <_dtoa_r+0x2dc>)
 8011b16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b22:	f7ef f803 	bl	8000b2c <__aeabi_dcmplt>
 8011b26:	2800      	cmp	r0, #0
 8011b28:	d048      	beq.n	8011bbc <_dtoa_r+0x214>
 8011b2a:	3f01      	subs	r7, #1
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8011b30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011b32:	1b9b      	subs	r3, r3, r6
 8011b34:	1e5a      	subs	r2, r3, #1
 8011b36:	bf44      	itt	mi
 8011b38:	f1c3 0801 	rsbmi	r8, r3, #1
 8011b3c:	2300      	movmi	r3, #0
 8011b3e:	9208      	str	r2, [sp, #32]
 8011b40:	bf54      	ite	pl
 8011b42:	f04f 0800 	movpl.w	r8, #0
 8011b46:	9308      	strmi	r3, [sp, #32]
 8011b48:	2f00      	cmp	r7, #0
 8011b4a:	db39      	blt.n	8011bc0 <_dtoa_r+0x218>
 8011b4c:	9b08      	ldr	r3, [sp, #32]
 8011b4e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011b50:	443b      	add	r3, r7
 8011b52:	9308      	str	r3, [sp, #32]
 8011b54:	2300      	movs	r3, #0
 8011b56:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b5a:	2b09      	cmp	r3, #9
 8011b5c:	d864      	bhi.n	8011c28 <_dtoa_r+0x280>
 8011b5e:	2b05      	cmp	r3, #5
 8011b60:	bfc4      	itt	gt
 8011b62:	3b04      	subgt	r3, #4
 8011b64:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b68:	f1a3 0302 	sub.w	r3, r3, #2
 8011b6c:	bfcc      	ite	gt
 8011b6e:	2400      	movgt	r4, #0
 8011b70:	2401      	movle	r4, #1
 8011b72:	2b03      	cmp	r3, #3
 8011b74:	d863      	bhi.n	8011c3e <_dtoa_r+0x296>
 8011b76:	e8df f003 	tbb	[pc, r3]
 8011b7a:	372a      	.short	0x372a
 8011b7c:	5535      	.short	0x5535
 8011b7e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011b82:	441e      	add	r6, r3
 8011b84:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011b88:	2b20      	cmp	r3, #32
 8011b8a:	bfc1      	itttt	gt
 8011b8c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011b90:	409f      	lslgt	r7, r3
 8011b92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011b96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011b9a:	bfd6      	itet	le
 8011b9c:	f1c3 0320 	rsble	r3, r3, #32
 8011ba0:	ea47 0003 	orrgt.w	r0, r7, r3
 8011ba4:	fa04 f003 	lslle.w	r0, r4, r3
 8011ba8:	f7ee fcd4 	bl	8000554 <__aeabi_ui2d>
 8011bac:	2201      	movs	r2, #1
 8011bae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011bb2:	3e01      	subs	r6, #1
 8011bb4:	9214      	str	r2, [sp, #80]	@ 0x50
 8011bb6:	e777      	b.n	8011aa8 <_dtoa_r+0x100>
 8011bb8:	2301      	movs	r3, #1
 8011bba:	e7b8      	b.n	8011b2e <_dtoa_r+0x186>
 8011bbc:	9012      	str	r0, [sp, #72]	@ 0x48
 8011bbe:	e7b7      	b.n	8011b30 <_dtoa_r+0x188>
 8011bc0:	427b      	negs	r3, r7
 8011bc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	eba8 0807 	sub.w	r8, r8, r7
 8011bca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011bcc:	e7c4      	b.n	8011b58 <_dtoa_r+0x1b0>
 8011bce:	2300      	movs	r3, #0
 8011bd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011bd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	dc35      	bgt.n	8011c44 <_dtoa_r+0x29c>
 8011bd8:	2301      	movs	r3, #1
 8011bda:	9300      	str	r3, [sp, #0]
 8011bdc:	9307      	str	r3, [sp, #28]
 8011bde:	461a      	mov	r2, r3
 8011be0:	920e      	str	r2, [sp, #56]	@ 0x38
 8011be2:	e00b      	b.n	8011bfc <_dtoa_r+0x254>
 8011be4:	2301      	movs	r3, #1
 8011be6:	e7f3      	b.n	8011bd0 <_dtoa_r+0x228>
 8011be8:	2300      	movs	r3, #0
 8011bea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011bec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bee:	18fb      	adds	r3, r7, r3
 8011bf0:	9300      	str	r3, [sp, #0]
 8011bf2:	3301      	adds	r3, #1
 8011bf4:	2b01      	cmp	r3, #1
 8011bf6:	9307      	str	r3, [sp, #28]
 8011bf8:	bfb8      	it	lt
 8011bfa:	2301      	movlt	r3, #1
 8011bfc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011c00:	2100      	movs	r1, #0
 8011c02:	2204      	movs	r2, #4
 8011c04:	f102 0514 	add.w	r5, r2, #20
 8011c08:	429d      	cmp	r5, r3
 8011c0a:	d91f      	bls.n	8011c4c <_dtoa_r+0x2a4>
 8011c0c:	6041      	str	r1, [r0, #4]
 8011c0e:	4658      	mov	r0, fp
 8011c10:	f000 fd8e 	bl	8012730 <_Balloc>
 8011c14:	4682      	mov	sl, r0
 8011c16:	2800      	cmp	r0, #0
 8011c18:	d13c      	bne.n	8011c94 <_dtoa_r+0x2ec>
 8011c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8011c88 <_dtoa_r+0x2e0>)
 8011c1c:	4602      	mov	r2, r0
 8011c1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8011c22:	e6d8      	b.n	80119d6 <_dtoa_r+0x2e>
 8011c24:	2301      	movs	r3, #1
 8011c26:	e7e0      	b.n	8011bea <_dtoa_r+0x242>
 8011c28:	2401      	movs	r4, #1
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011c30:	f04f 33ff 	mov.w	r3, #4294967295
 8011c34:	9300      	str	r3, [sp, #0]
 8011c36:	9307      	str	r3, [sp, #28]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	2312      	movs	r3, #18
 8011c3c:	e7d0      	b.n	8011be0 <_dtoa_r+0x238>
 8011c3e:	2301      	movs	r3, #1
 8011c40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c42:	e7f5      	b.n	8011c30 <_dtoa_r+0x288>
 8011c44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c46:	9300      	str	r3, [sp, #0]
 8011c48:	9307      	str	r3, [sp, #28]
 8011c4a:	e7d7      	b.n	8011bfc <_dtoa_r+0x254>
 8011c4c:	3101      	adds	r1, #1
 8011c4e:	0052      	lsls	r2, r2, #1
 8011c50:	e7d8      	b.n	8011c04 <_dtoa_r+0x25c>
 8011c52:	bf00      	nop
 8011c54:	f3af 8000 	nop.w
 8011c58:	636f4361 	.word	0x636f4361
 8011c5c:	3fd287a7 	.word	0x3fd287a7
 8011c60:	8b60c8b3 	.word	0x8b60c8b3
 8011c64:	3fc68a28 	.word	0x3fc68a28
 8011c68:	509f79fb 	.word	0x509f79fb
 8011c6c:	3fd34413 	.word	0x3fd34413
 8011c70:	08016f3c 	.word	0x08016f3c
 8011c74:	08016f53 	.word	0x08016f53
 8011c78:	7ff00000 	.word	0x7ff00000
 8011c7c:	08017299 	.word	0x08017299
 8011c80:	3ff80000 	.word	0x3ff80000
 8011c84:	08017050 	.word	0x08017050
 8011c88:	08016fab 	.word	0x08016fab
 8011c8c:	08016f38 	.word	0x08016f38
 8011c90:	08017298 	.word	0x08017298
 8011c94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011c98:	6018      	str	r0, [r3, #0]
 8011c9a:	9b07      	ldr	r3, [sp, #28]
 8011c9c:	2b0e      	cmp	r3, #14
 8011c9e:	f200 80a4 	bhi.w	8011dea <_dtoa_r+0x442>
 8011ca2:	2c00      	cmp	r4, #0
 8011ca4:	f000 80a1 	beq.w	8011dea <_dtoa_r+0x442>
 8011ca8:	2f00      	cmp	r7, #0
 8011caa:	dd33      	ble.n	8011d14 <_dtoa_r+0x36c>
 8011cac:	4bad      	ldr	r3, [pc, #692]	@ (8011f64 <_dtoa_r+0x5bc>)
 8011cae:	f007 020f 	and.w	r2, r7, #15
 8011cb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011cb6:	ed93 7b00 	vldr	d7, [r3]
 8011cba:	05f8      	lsls	r0, r7, #23
 8011cbc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011cc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011cc4:	d516      	bpl.n	8011cf4 <_dtoa_r+0x34c>
 8011cc6:	4ba8      	ldr	r3, [pc, #672]	@ (8011f68 <_dtoa_r+0x5c0>)
 8011cc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ccc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011cd0:	f7ee fde4 	bl	800089c <__aeabi_ddiv>
 8011cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011cd8:	f004 040f 	and.w	r4, r4, #15
 8011cdc:	2603      	movs	r6, #3
 8011cde:	4da2      	ldr	r5, [pc, #648]	@ (8011f68 <_dtoa_r+0x5c0>)
 8011ce0:	b954      	cbnz	r4, 8011cf8 <_dtoa_r+0x350>
 8011ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011cea:	f7ee fdd7 	bl	800089c <__aeabi_ddiv>
 8011cee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011cf2:	e028      	b.n	8011d46 <_dtoa_r+0x39e>
 8011cf4:	2602      	movs	r6, #2
 8011cf6:	e7f2      	b.n	8011cde <_dtoa_r+0x336>
 8011cf8:	07e1      	lsls	r1, r4, #31
 8011cfa:	d508      	bpl.n	8011d0e <_dtoa_r+0x366>
 8011cfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011d00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d04:	f7ee fca0 	bl	8000648 <__aeabi_dmul>
 8011d08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011d0c:	3601      	adds	r6, #1
 8011d0e:	1064      	asrs	r4, r4, #1
 8011d10:	3508      	adds	r5, #8
 8011d12:	e7e5      	b.n	8011ce0 <_dtoa_r+0x338>
 8011d14:	f000 80d2 	beq.w	8011ebc <_dtoa_r+0x514>
 8011d18:	427c      	negs	r4, r7
 8011d1a:	4b92      	ldr	r3, [pc, #584]	@ (8011f64 <_dtoa_r+0x5bc>)
 8011d1c:	4d92      	ldr	r5, [pc, #584]	@ (8011f68 <_dtoa_r+0x5c0>)
 8011d1e:	f004 020f 	and.w	r2, r4, #15
 8011d22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011d2e:	f7ee fc8b 	bl	8000648 <__aeabi_dmul>
 8011d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d36:	1124      	asrs	r4, r4, #4
 8011d38:	2300      	movs	r3, #0
 8011d3a:	2602      	movs	r6, #2
 8011d3c:	2c00      	cmp	r4, #0
 8011d3e:	f040 80b2 	bne.w	8011ea6 <_dtoa_r+0x4fe>
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d1d3      	bne.n	8011cee <_dtoa_r+0x346>
 8011d46:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011d48:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	f000 80b7 	beq.w	8011ec0 <_dtoa_r+0x518>
 8011d52:	4b86      	ldr	r3, [pc, #536]	@ (8011f6c <_dtoa_r+0x5c4>)
 8011d54:	2200      	movs	r2, #0
 8011d56:	4620      	mov	r0, r4
 8011d58:	4629      	mov	r1, r5
 8011d5a:	f7ee fee7 	bl	8000b2c <__aeabi_dcmplt>
 8011d5e:	2800      	cmp	r0, #0
 8011d60:	f000 80ae 	beq.w	8011ec0 <_dtoa_r+0x518>
 8011d64:	9b07      	ldr	r3, [sp, #28]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	f000 80aa 	beq.w	8011ec0 <_dtoa_r+0x518>
 8011d6c:	9b00      	ldr	r3, [sp, #0]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	dd37      	ble.n	8011de2 <_dtoa_r+0x43a>
 8011d72:	1e7b      	subs	r3, r7, #1
 8011d74:	9304      	str	r3, [sp, #16]
 8011d76:	4620      	mov	r0, r4
 8011d78:	4b7d      	ldr	r3, [pc, #500]	@ (8011f70 <_dtoa_r+0x5c8>)
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	4629      	mov	r1, r5
 8011d7e:	f7ee fc63 	bl	8000648 <__aeabi_dmul>
 8011d82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d86:	9c00      	ldr	r4, [sp, #0]
 8011d88:	3601      	adds	r6, #1
 8011d8a:	4630      	mov	r0, r6
 8011d8c:	f7ee fbf2 	bl	8000574 <__aeabi_i2d>
 8011d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011d94:	f7ee fc58 	bl	8000648 <__aeabi_dmul>
 8011d98:	4b76      	ldr	r3, [pc, #472]	@ (8011f74 <_dtoa_r+0x5cc>)
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	f7ee fa9e 	bl	80002dc <__adddf3>
 8011da0:	4605      	mov	r5, r0
 8011da2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011da6:	2c00      	cmp	r4, #0
 8011da8:	f040 808d 	bne.w	8011ec6 <_dtoa_r+0x51e>
 8011dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011db0:	4b71      	ldr	r3, [pc, #452]	@ (8011f78 <_dtoa_r+0x5d0>)
 8011db2:	2200      	movs	r2, #0
 8011db4:	f7ee fa90 	bl	80002d8 <__aeabi_dsub>
 8011db8:	4602      	mov	r2, r0
 8011dba:	460b      	mov	r3, r1
 8011dbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011dc0:	462a      	mov	r2, r5
 8011dc2:	4633      	mov	r3, r6
 8011dc4:	f7ee fed0 	bl	8000b68 <__aeabi_dcmpgt>
 8011dc8:	2800      	cmp	r0, #0
 8011dca:	f040 828b 	bne.w	80122e4 <_dtoa_r+0x93c>
 8011dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011dd2:	462a      	mov	r2, r5
 8011dd4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011dd8:	f7ee fea8 	bl	8000b2c <__aeabi_dcmplt>
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	f040 8128 	bne.w	8012032 <_dtoa_r+0x68a>
 8011de2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011de6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011dea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	f2c0 815a 	blt.w	80120a6 <_dtoa_r+0x6fe>
 8011df2:	2f0e      	cmp	r7, #14
 8011df4:	f300 8157 	bgt.w	80120a6 <_dtoa_r+0x6fe>
 8011df8:	4b5a      	ldr	r3, [pc, #360]	@ (8011f64 <_dtoa_r+0x5bc>)
 8011dfa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011dfe:	ed93 7b00 	vldr	d7, [r3]
 8011e02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	ed8d 7b00 	vstr	d7, [sp]
 8011e0a:	da03      	bge.n	8011e14 <_dtoa_r+0x46c>
 8011e0c:	9b07      	ldr	r3, [sp, #28]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	f340 8101 	ble.w	8012016 <_dtoa_r+0x66e>
 8011e14:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011e18:	4656      	mov	r6, sl
 8011e1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e1e:	4620      	mov	r0, r4
 8011e20:	4629      	mov	r1, r5
 8011e22:	f7ee fd3b 	bl	800089c <__aeabi_ddiv>
 8011e26:	f7ee febf 	bl	8000ba8 <__aeabi_d2iz>
 8011e2a:	4680      	mov	r8, r0
 8011e2c:	f7ee fba2 	bl	8000574 <__aeabi_i2d>
 8011e30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e34:	f7ee fc08 	bl	8000648 <__aeabi_dmul>
 8011e38:	4602      	mov	r2, r0
 8011e3a:	460b      	mov	r3, r1
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	4629      	mov	r1, r5
 8011e40:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011e44:	f7ee fa48 	bl	80002d8 <__aeabi_dsub>
 8011e48:	f806 4b01 	strb.w	r4, [r6], #1
 8011e4c:	9d07      	ldr	r5, [sp, #28]
 8011e4e:	eba6 040a 	sub.w	r4, r6, sl
 8011e52:	42a5      	cmp	r5, r4
 8011e54:	4602      	mov	r2, r0
 8011e56:	460b      	mov	r3, r1
 8011e58:	f040 8117 	bne.w	801208a <_dtoa_r+0x6e2>
 8011e5c:	f7ee fa3e 	bl	80002dc <__adddf3>
 8011e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e64:	4604      	mov	r4, r0
 8011e66:	460d      	mov	r5, r1
 8011e68:	f7ee fe7e 	bl	8000b68 <__aeabi_dcmpgt>
 8011e6c:	2800      	cmp	r0, #0
 8011e6e:	f040 80f9 	bne.w	8012064 <_dtoa_r+0x6bc>
 8011e72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e76:	4620      	mov	r0, r4
 8011e78:	4629      	mov	r1, r5
 8011e7a:	f7ee fe4d 	bl	8000b18 <__aeabi_dcmpeq>
 8011e7e:	b118      	cbz	r0, 8011e88 <_dtoa_r+0x4e0>
 8011e80:	f018 0f01 	tst.w	r8, #1
 8011e84:	f040 80ee 	bne.w	8012064 <_dtoa_r+0x6bc>
 8011e88:	4649      	mov	r1, r9
 8011e8a:	4658      	mov	r0, fp
 8011e8c:	f000 fc90 	bl	80127b0 <_Bfree>
 8011e90:	2300      	movs	r3, #0
 8011e92:	7033      	strb	r3, [r6, #0]
 8011e94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011e96:	3701      	adds	r7, #1
 8011e98:	601f      	str	r7, [r3, #0]
 8011e9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	f000 831d 	beq.w	80124dc <_dtoa_r+0xb34>
 8011ea2:	601e      	str	r6, [r3, #0]
 8011ea4:	e31a      	b.n	80124dc <_dtoa_r+0xb34>
 8011ea6:	07e2      	lsls	r2, r4, #31
 8011ea8:	d505      	bpl.n	8011eb6 <_dtoa_r+0x50e>
 8011eaa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011eae:	f7ee fbcb 	bl	8000648 <__aeabi_dmul>
 8011eb2:	3601      	adds	r6, #1
 8011eb4:	2301      	movs	r3, #1
 8011eb6:	1064      	asrs	r4, r4, #1
 8011eb8:	3508      	adds	r5, #8
 8011eba:	e73f      	b.n	8011d3c <_dtoa_r+0x394>
 8011ebc:	2602      	movs	r6, #2
 8011ebe:	e742      	b.n	8011d46 <_dtoa_r+0x39e>
 8011ec0:	9c07      	ldr	r4, [sp, #28]
 8011ec2:	9704      	str	r7, [sp, #16]
 8011ec4:	e761      	b.n	8011d8a <_dtoa_r+0x3e2>
 8011ec6:	4b27      	ldr	r3, [pc, #156]	@ (8011f64 <_dtoa_r+0x5bc>)
 8011ec8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011eca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011ece:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011ed2:	4454      	add	r4, sl
 8011ed4:	2900      	cmp	r1, #0
 8011ed6:	d053      	beq.n	8011f80 <_dtoa_r+0x5d8>
 8011ed8:	4928      	ldr	r1, [pc, #160]	@ (8011f7c <_dtoa_r+0x5d4>)
 8011eda:	2000      	movs	r0, #0
 8011edc:	f7ee fcde 	bl	800089c <__aeabi_ddiv>
 8011ee0:	4633      	mov	r3, r6
 8011ee2:	462a      	mov	r2, r5
 8011ee4:	f7ee f9f8 	bl	80002d8 <__aeabi_dsub>
 8011ee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011eec:	4656      	mov	r6, sl
 8011eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ef2:	f7ee fe59 	bl	8000ba8 <__aeabi_d2iz>
 8011ef6:	4605      	mov	r5, r0
 8011ef8:	f7ee fb3c 	bl	8000574 <__aeabi_i2d>
 8011efc:	4602      	mov	r2, r0
 8011efe:	460b      	mov	r3, r1
 8011f00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f04:	f7ee f9e8 	bl	80002d8 <__aeabi_dsub>
 8011f08:	3530      	adds	r5, #48	@ 0x30
 8011f0a:	4602      	mov	r2, r0
 8011f0c:	460b      	mov	r3, r1
 8011f0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011f12:	f806 5b01 	strb.w	r5, [r6], #1
 8011f16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011f1a:	f7ee fe07 	bl	8000b2c <__aeabi_dcmplt>
 8011f1e:	2800      	cmp	r0, #0
 8011f20:	d171      	bne.n	8012006 <_dtoa_r+0x65e>
 8011f22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011f26:	4911      	ldr	r1, [pc, #68]	@ (8011f6c <_dtoa_r+0x5c4>)
 8011f28:	2000      	movs	r0, #0
 8011f2a:	f7ee f9d5 	bl	80002d8 <__aeabi_dsub>
 8011f2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011f32:	f7ee fdfb 	bl	8000b2c <__aeabi_dcmplt>
 8011f36:	2800      	cmp	r0, #0
 8011f38:	f040 8095 	bne.w	8012066 <_dtoa_r+0x6be>
 8011f3c:	42a6      	cmp	r6, r4
 8011f3e:	f43f af50 	beq.w	8011de2 <_dtoa_r+0x43a>
 8011f42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011f46:	4b0a      	ldr	r3, [pc, #40]	@ (8011f70 <_dtoa_r+0x5c8>)
 8011f48:	2200      	movs	r2, #0
 8011f4a:	f7ee fb7d 	bl	8000648 <__aeabi_dmul>
 8011f4e:	4b08      	ldr	r3, [pc, #32]	@ (8011f70 <_dtoa_r+0x5c8>)
 8011f50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011f54:	2200      	movs	r2, #0
 8011f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f5a:	f7ee fb75 	bl	8000648 <__aeabi_dmul>
 8011f5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f62:	e7c4      	b.n	8011eee <_dtoa_r+0x546>
 8011f64:	08017050 	.word	0x08017050
 8011f68:	08017028 	.word	0x08017028
 8011f6c:	3ff00000 	.word	0x3ff00000
 8011f70:	40240000 	.word	0x40240000
 8011f74:	401c0000 	.word	0x401c0000
 8011f78:	40140000 	.word	0x40140000
 8011f7c:	3fe00000 	.word	0x3fe00000
 8011f80:	4631      	mov	r1, r6
 8011f82:	4628      	mov	r0, r5
 8011f84:	f7ee fb60 	bl	8000648 <__aeabi_dmul>
 8011f88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011f8c:	9415      	str	r4, [sp, #84]	@ 0x54
 8011f8e:	4656      	mov	r6, sl
 8011f90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f94:	f7ee fe08 	bl	8000ba8 <__aeabi_d2iz>
 8011f98:	4605      	mov	r5, r0
 8011f9a:	f7ee faeb 	bl	8000574 <__aeabi_i2d>
 8011f9e:	4602      	mov	r2, r0
 8011fa0:	460b      	mov	r3, r1
 8011fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fa6:	f7ee f997 	bl	80002d8 <__aeabi_dsub>
 8011faa:	3530      	adds	r5, #48	@ 0x30
 8011fac:	f806 5b01 	strb.w	r5, [r6], #1
 8011fb0:	4602      	mov	r2, r0
 8011fb2:	460b      	mov	r3, r1
 8011fb4:	42a6      	cmp	r6, r4
 8011fb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011fba:	f04f 0200 	mov.w	r2, #0
 8011fbe:	d124      	bne.n	801200a <_dtoa_r+0x662>
 8011fc0:	4bac      	ldr	r3, [pc, #688]	@ (8012274 <_dtoa_r+0x8cc>)
 8011fc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011fc6:	f7ee f989 	bl	80002dc <__adddf3>
 8011fca:	4602      	mov	r2, r0
 8011fcc:	460b      	mov	r3, r1
 8011fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fd2:	f7ee fdc9 	bl	8000b68 <__aeabi_dcmpgt>
 8011fd6:	2800      	cmp	r0, #0
 8011fd8:	d145      	bne.n	8012066 <_dtoa_r+0x6be>
 8011fda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011fde:	49a5      	ldr	r1, [pc, #660]	@ (8012274 <_dtoa_r+0x8cc>)
 8011fe0:	2000      	movs	r0, #0
 8011fe2:	f7ee f979 	bl	80002d8 <__aeabi_dsub>
 8011fe6:	4602      	mov	r2, r0
 8011fe8:	460b      	mov	r3, r1
 8011fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fee:	f7ee fd9d 	bl	8000b2c <__aeabi_dcmplt>
 8011ff2:	2800      	cmp	r0, #0
 8011ff4:	f43f aef5 	beq.w	8011de2 <_dtoa_r+0x43a>
 8011ff8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011ffa:	1e73      	subs	r3, r6, #1
 8011ffc:	9315      	str	r3, [sp, #84]	@ 0x54
 8011ffe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012002:	2b30      	cmp	r3, #48	@ 0x30
 8012004:	d0f8      	beq.n	8011ff8 <_dtoa_r+0x650>
 8012006:	9f04      	ldr	r7, [sp, #16]
 8012008:	e73e      	b.n	8011e88 <_dtoa_r+0x4e0>
 801200a:	4b9b      	ldr	r3, [pc, #620]	@ (8012278 <_dtoa_r+0x8d0>)
 801200c:	f7ee fb1c 	bl	8000648 <__aeabi_dmul>
 8012010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012014:	e7bc      	b.n	8011f90 <_dtoa_r+0x5e8>
 8012016:	d10c      	bne.n	8012032 <_dtoa_r+0x68a>
 8012018:	4b98      	ldr	r3, [pc, #608]	@ (801227c <_dtoa_r+0x8d4>)
 801201a:	2200      	movs	r2, #0
 801201c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012020:	f7ee fb12 	bl	8000648 <__aeabi_dmul>
 8012024:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012028:	f7ee fd94 	bl	8000b54 <__aeabi_dcmpge>
 801202c:	2800      	cmp	r0, #0
 801202e:	f000 8157 	beq.w	80122e0 <_dtoa_r+0x938>
 8012032:	2400      	movs	r4, #0
 8012034:	4625      	mov	r5, r4
 8012036:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012038:	43db      	mvns	r3, r3
 801203a:	9304      	str	r3, [sp, #16]
 801203c:	4656      	mov	r6, sl
 801203e:	2700      	movs	r7, #0
 8012040:	4621      	mov	r1, r4
 8012042:	4658      	mov	r0, fp
 8012044:	f000 fbb4 	bl	80127b0 <_Bfree>
 8012048:	2d00      	cmp	r5, #0
 801204a:	d0dc      	beq.n	8012006 <_dtoa_r+0x65e>
 801204c:	b12f      	cbz	r7, 801205a <_dtoa_r+0x6b2>
 801204e:	42af      	cmp	r7, r5
 8012050:	d003      	beq.n	801205a <_dtoa_r+0x6b2>
 8012052:	4639      	mov	r1, r7
 8012054:	4658      	mov	r0, fp
 8012056:	f000 fbab 	bl	80127b0 <_Bfree>
 801205a:	4629      	mov	r1, r5
 801205c:	4658      	mov	r0, fp
 801205e:	f000 fba7 	bl	80127b0 <_Bfree>
 8012062:	e7d0      	b.n	8012006 <_dtoa_r+0x65e>
 8012064:	9704      	str	r7, [sp, #16]
 8012066:	4633      	mov	r3, r6
 8012068:	461e      	mov	r6, r3
 801206a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801206e:	2a39      	cmp	r2, #57	@ 0x39
 8012070:	d107      	bne.n	8012082 <_dtoa_r+0x6da>
 8012072:	459a      	cmp	sl, r3
 8012074:	d1f8      	bne.n	8012068 <_dtoa_r+0x6c0>
 8012076:	9a04      	ldr	r2, [sp, #16]
 8012078:	3201      	adds	r2, #1
 801207a:	9204      	str	r2, [sp, #16]
 801207c:	2230      	movs	r2, #48	@ 0x30
 801207e:	f88a 2000 	strb.w	r2, [sl]
 8012082:	781a      	ldrb	r2, [r3, #0]
 8012084:	3201      	adds	r2, #1
 8012086:	701a      	strb	r2, [r3, #0]
 8012088:	e7bd      	b.n	8012006 <_dtoa_r+0x65e>
 801208a:	4b7b      	ldr	r3, [pc, #492]	@ (8012278 <_dtoa_r+0x8d0>)
 801208c:	2200      	movs	r2, #0
 801208e:	f7ee fadb 	bl	8000648 <__aeabi_dmul>
 8012092:	2200      	movs	r2, #0
 8012094:	2300      	movs	r3, #0
 8012096:	4604      	mov	r4, r0
 8012098:	460d      	mov	r5, r1
 801209a:	f7ee fd3d 	bl	8000b18 <__aeabi_dcmpeq>
 801209e:	2800      	cmp	r0, #0
 80120a0:	f43f aebb 	beq.w	8011e1a <_dtoa_r+0x472>
 80120a4:	e6f0      	b.n	8011e88 <_dtoa_r+0x4e0>
 80120a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80120a8:	2a00      	cmp	r2, #0
 80120aa:	f000 80db 	beq.w	8012264 <_dtoa_r+0x8bc>
 80120ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80120b0:	2a01      	cmp	r2, #1
 80120b2:	f300 80bf 	bgt.w	8012234 <_dtoa_r+0x88c>
 80120b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80120b8:	2a00      	cmp	r2, #0
 80120ba:	f000 80b7 	beq.w	801222c <_dtoa_r+0x884>
 80120be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80120c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80120c4:	4646      	mov	r6, r8
 80120c6:	9a08      	ldr	r2, [sp, #32]
 80120c8:	2101      	movs	r1, #1
 80120ca:	441a      	add	r2, r3
 80120cc:	4658      	mov	r0, fp
 80120ce:	4498      	add	r8, r3
 80120d0:	9208      	str	r2, [sp, #32]
 80120d2:	f000 fc6b 	bl	80129ac <__i2b>
 80120d6:	4605      	mov	r5, r0
 80120d8:	b15e      	cbz	r6, 80120f2 <_dtoa_r+0x74a>
 80120da:	9b08      	ldr	r3, [sp, #32]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	dd08      	ble.n	80120f2 <_dtoa_r+0x74a>
 80120e0:	42b3      	cmp	r3, r6
 80120e2:	9a08      	ldr	r2, [sp, #32]
 80120e4:	bfa8      	it	ge
 80120e6:	4633      	movge	r3, r6
 80120e8:	eba8 0803 	sub.w	r8, r8, r3
 80120ec:	1af6      	subs	r6, r6, r3
 80120ee:	1ad3      	subs	r3, r2, r3
 80120f0:	9308      	str	r3, [sp, #32]
 80120f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120f4:	b1f3      	cbz	r3, 8012134 <_dtoa_r+0x78c>
 80120f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	f000 80b7 	beq.w	801226c <_dtoa_r+0x8c4>
 80120fe:	b18c      	cbz	r4, 8012124 <_dtoa_r+0x77c>
 8012100:	4629      	mov	r1, r5
 8012102:	4622      	mov	r2, r4
 8012104:	4658      	mov	r0, fp
 8012106:	f000 fd11 	bl	8012b2c <__pow5mult>
 801210a:	464a      	mov	r2, r9
 801210c:	4601      	mov	r1, r0
 801210e:	4605      	mov	r5, r0
 8012110:	4658      	mov	r0, fp
 8012112:	f000 fc61 	bl	80129d8 <__multiply>
 8012116:	4649      	mov	r1, r9
 8012118:	9004      	str	r0, [sp, #16]
 801211a:	4658      	mov	r0, fp
 801211c:	f000 fb48 	bl	80127b0 <_Bfree>
 8012120:	9b04      	ldr	r3, [sp, #16]
 8012122:	4699      	mov	r9, r3
 8012124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012126:	1b1a      	subs	r2, r3, r4
 8012128:	d004      	beq.n	8012134 <_dtoa_r+0x78c>
 801212a:	4649      	mov	r1, r9
 801212c:	4658      	mov	r0, fp
 801212e:	f000 fcfd 	bl	8012b2c <__pow5mult>
 8012132:	4681      	mov	r9, r0
 8012134:	2101      	movs	r1, #1
 8012136:	4658      	mov	r0, fp
 8012138:	f000 fc38 	bl	80129ac <__i2b>
 801213c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801213e:	4604      	mov	r4, r0
 8012140:	2b00      	cmp	r3, #0
 8012142:	f000 81cf 	beq.w	80124e4 <_dtoa_r+0xb3c>
 8012146:	461a      	mov	r2, r3
 8012148:	4601      	mov	r1, r0
 801214a:	4658      	mov	r0, fp
 801214c:	f000 fcee 	bl	8012b2c <__pow5mult>
 8012150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012152:	2b01      	cmp	r3, #1
 8012154:	4604      	mov	r4, r0
 8012156:	f300 8095 	bgt.w	8012284 <_dtoa_r+0x8dc>
 801215a:	9b02      	ldr	r3, [sp, #8]
 801215c:	2b00      	cmp	r3, #0
 801215e:	f040 8087 	bne.w	8012270 <_dtoa_r+0x8c8>
 8012162:	9b03      	ldr	r3, [sp, #12]
 8012164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012168:	2b00      	cmp	r3, #0
 801216a:	f040 8089 	bne.w	8012280 <_dtoa_r+0x8d8>
 801216e:	9b03      	ldr	r3, [sp, #12]
 8012170:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012174:	0d1b      	lsrs	r3, r3, #20
 8012176:	051b      	lsls	r3, r3, #20
 8012178:	b12b      	cbz	r3, 8012186 <_dtoa_r+0x7de>
 801217a:	9b08      	ldr	r3, [sp, #32]
 801217c:	3301      	adds	r3, #1
 801217e:	9308      	str	r3, [sp, #32]
 8012180:	f108 0801 	add.w	r8, r8, #1
 8012184:	2301      	movs	r3, #1
 8012186:	930a      	str	r3, [sp, #40]	@ 0x28
 8012188:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801218a:	2b00      	cmp	r3, #0
 801218c:	f000 81b0 	beq.w	80124f0 <_dtoa_r+0xb48>
 8012190:	6923      	ldr	r3, [r4, #16]
 8012192:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012196:	6918      	ldr	r0, [r3, #16]
 8012198:	f000 fbbc 	bl	8012914 <__hi0bits>
 801219c:	f1c0 0020 	rsb	r0, r0, #32
 80121a0:	9b08      	ldr	r3, [sp, #32]
 80121a2:	4418      	add	r0, r3
 80121a4:	f010 001f 	ands.w	r0, r0, #31
 80121a8:	d077      	beq.n	801229a <_dtoa_r+0x8f2>
 80121aa:	f1c0 0320 	rsb	r3, r0, #32
 80121ae:	2b04      	cmp	r3, #4
 80121b0:	dd6b      	ble.n	801228a <_dtoa_r+0x8e2>
 80121b2:	9b08      	ldr	r3, [sp, #32]
 80121b4:	f1c0 001c 	rsb	r0, r0, #28
 80121b8:	4403      	add	r3, r0
 80121ba:	4480      	add	r8, r0
 80121bc:	4406      	add	r6, r0
 80121be:	9308      	str	r3, [sp, #32]
 80121c0:	f1b8 0f00 	cmp.w	r8, #0
 80121c4:	dd05      	ble.n	80121d2 <_dtoa_r+0x82a>
 80121c6:	4649      	mov	r1, r9
 80121c8:	4642      	mov	r2, r8
 80121ca:	4658      	mov	r0, fp
 80121cc:	f000 fd08 	bl	8012be0 <__lshift>
 80121d0:	4681      	mov	r9, r0
 80121d2:	9b08      	ldr	r3, [sp, #32]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	dd05      	ble.n	80121e4 <_dtoa_r+0x83c>
 80121d8:	4621      	mov	r1, r4
 80121da:	461a      	mov	r2, r3
 80121dc:	4658      	mov	r0, fp
 80121de:	f000 fcff 	bl	8012be0 <__lshift>
 80121e2:	4604      	mov	r4, r0
 80121e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d059      	beq.n	801229e <_dtoa_r+0x8f6>
 80121ea:	4621      	mov	r1, r4
 80121ec:	4648      	mov	r0, r9
 80121ee:	f000 fd63 	bl	8012cb8 <__mcmp>
 80121f2:	2800      	cmp	r0, #0
 80121f4:	da53      	bge.n	801229e <_dtoa_r+0x8f6>
 80121f6:	1e7b      	subs	r3, r7, #1
 80121f8:	9304      	str	r3, [sp, #16]
 80121fa:	4649      	mov	r1, r9
 80121fc:	2300      	movs	r3, #0
 80121fe:	220a      	movs	r2, #10
 8012200:	4658      	mov	r0, fp
 8012202:	f000 faf7 	bl	80127f4 <__multadd>
 8012206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012208:	4681      	mov	r9, r0
 801220a:	2b00      	cmp	r3, #0
 801220c:	f000 8172 	beq.w	80124f4 <_dtoa_r+0xb4c>
 8012210:	2300      	movs	r3, #0
 8012212:	4629      	mov	r1, r5
 8012214:	220a      	movs	r2, #10
 8012216:	4658      	mov	r0, fp
 8012218:	f000 faec 	bl	80127f4 <__multadd>
 801221c:	9b00      	ldr	r3, [sp, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	4605      	mov	r5, r0
 8012222:	dc67      	bgt.n	80122f4 <_dtoa_r+0x94c>
 8012224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012226:	2b02      	cmp	r3, #2
 8012228:	dc41      	bgt.n	80122ae <_dtoa_r+0x906>
 801222a:	e063      	b.n	80122f4 <_dtoa_r+0x94c>
 801222c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801222e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012232:	e746      	b.n	80120c2 <_dtoa_r+0x71a>
 8012234:	9b07      	ldr	r3, [sp, #28]
 8012236:	1e5c      	subs	r4, r3, #1
 8012238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801223a:	42a3      	cmp	r3, r4
 801223c:	bfbf      	itttt	lt
 801223e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012240:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012242:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012244:	1ae3      	sublt	r3, r4, r3
 8012246:	bfb4      	ite	lt
 8012248:	18d2      	addlt	r2, r2, r3
 801224a:	1b1c      	subge	r4, r3, r4
 801224c:	9b07      	ldr	r3, [sp, #28]
 801224e:	bfbc      	itt	lt
 8012250:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012252:	2400      	movlt	r4, #0
 8012254:	2b00      	cmp	r3, #0
 8012256:	bfb5      	itete	lt
 8012258:	eba8 0603 	sublt.w	r6, r8, r3
 801225c:	9b07      	ldrge	r3, [sp, #28]
 801225e:	2300      	movlt	r3, #0
 8012260:	4646      	movge	r6, r8
 8012262:	e730      	b.n	80120c6 <_dtoa_r+0x71e>
 8012264:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012266:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012268:	4646      	mov	r6, r8
 801226a:	e735      	b.n	80120d8 <_dtoa_r+0x730>
 801226c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801226e:	e75c      	b.n	801212a <_dtoa_r+0x782>
 8012270:	2300      	movs	r3, #0
 8012272:	e788      	b.n	8012186 <_dtoa_r+0x7de>
 8012274:	3fe00000 	.word	0x3fe00000
 8012278:	40240000 	.word	0x40240000
 801227c:	40140000 	.word	0x40140000
 8012280:	9b02      	ldr	r3, [sp, #8]
 8012282:	e780      	b.n	8012186 <_dtoa_r+0x7de>
 8012284:	2300      	movs	r3, #0
 8012286:	930a      	str	r3, [sp, #40]	@ 0x28
 8012288:	e782      	b.n	8012190 <_dtoa_r+0x7e8>
 801228a:	d099      	beq.n	80121c0 <_dtoa_r+0x818>
 801228c:	9a08      	ldr	r2, [sp, #32]
 801228e:	331c      	adds	r3, #28
 8012290:	441a      	add	r2, r3
 8012292:	4498      	add	r8, r3
 8012294:	441e      	add	r6, r3
 8012296:	9208      	str	r2, [sp, #32]
 8012298:	e792      	b.n	80121c0 <_dtoa_r+0x818>
 801229a:	4603      	mov	r3, r0
 801229c:	e7f6      	b.n	801228c <_dtoa_r+0x8e4>
 801229e:	9b07      	ldr	r3, [sp, #28]
 80122a0:	9704      	str	r7, [sp, #16]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	dc20      	bgt.n	80122e8 <_dtoa_r+0x940>
 80122a6:	9300      	str	r3, [sp, #0]
 80122a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122aa:	2b02      	cmp	r3, #2
 80122ac:	dd1e      	ble.n	80122ec <_dtoa_r+0x944>
 80122ae:	9b00      	ldr	r3, [sp, #0]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	f47f aec0 	bne.w	8012036 <_dtoa_r+0x68e>
 80122b6:	4621      	mov	r1, r4
 80122b8:	2205      	movs	r2, #5
 80122ba:	4658      	mov	r0, fp
 80122bc:	f000 fa9a 	bl	80127f4 <__multadd>
 80122c0:	4601      	mov	r1, r0
 80122c2:	4604      	mov	r4, r0
 80122c4:	4648      	mov	r0, r9
 80122c6:	f000 fcf7 	bl	8012cb8 <__mcmp>
 80122ca:	2800      	cmp	r0, #0
 80122cc:	f77f aeb3 	ble.w	8012036 <_dtoa_r+0x68e>
 80122d0:	4656      	mov	r6, sl
 80122d2:	2331      	movs	r3, #49	@ 0x31
 80122d4:	f806 3b01 	strb.w	r3, [r6], #1
 80122d8:	9b04      	ldr	r3, [sp, #16]
 80122da:	3301      	adds	r3, #1
 80122dc:	9304      	str	r3, [sp, #16]
 80122de:	e6ae      	b.n	801203e <_dtoa_r+0x696>
 80122e0:	9c07      	ldr	r4, [sp, #28]
 80122e2:	9704      	str	r7, [sp, #16]
 80122e4:	4625      	mov	r5, r4
 80122e6:	e7f3      	b.n	80122d0 <_dtoa_r+0x928>
 80122e8:	9b07      	ldr	r3, [sp, #28]
 80122ea:	9300      	str	r3, [sp, #0]
 80122ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	f000 8104 	beq.w	80124fc <_dtoa_r+0xb54>
 80122f4:	2e00      	cmp	r6, #0
 80122f6:	dd05      	ble.n	8012304 <_dtoa_r+0x95c>
 80122f8:	4629      	mov	r1, r5
 80122fa:	4632      	mov	r2, r6
 80122fc:	4658      	mov	r0, fp
 80122fe:	f000 fc6f 	bl	8012be0 <__lshift>
 8012302:	4605      	mov	r5, r0
 8012304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012306:	2b00      	cmp	r3, #0
 8012308:	d05a      	beq.n	80123c0 <_dtoa_r+0xa18>
 801230a:	6869      	ldr	r1, [r5, #4]
 801230c:	4658      	mov	r0, fp
 801230e:	f000 fa0f 	bl	8012730 <_Balloc>
 8012312:	4606      	mov	r6, r0
 8012314:	b928      	cbnz	r0, 8012322 <_dtoa_r+0x97a>
 8012316:	4b84      	ldr	r3, [pc, #528]	@ (8012528 <_dtoa_r+0xb80>)
 8012318:	4602      	mov	r2, r0
 801231a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801231e:	f7ff bb5a 	b.w	80119d6 <_dtoa_r+0x2e>
 8012322:	692a      	ldr	r2, [r5, #16]
 8012324:	3202      	adds	r2, #2
 8012326:	0092      	lsls	r2, r2, #2
 8012328:	f105 010c 	add.w	r1, r5, #12
 801232c:	300c      	adds	r0, #12
 801232e:	f7ff fa9c 	bl	801186a <memcpy>
 8012332:	2201      	movs	r2, #1
 8012334:	4631      	mov	r1, r6
 8012336:	4658      	mov	r0, fp
 8012338:	f000 fc52 	bl	8012be0 <__lshift>
 801233c:	f10a 0301 	add.w	r3, sl, #1
 8012340:	9307      	str	r3, [sp, #28]
 8012342:	9b00      	ldr	r3, [sp, #0]
 8012344:	4453      	add	r3, sl
 8012346:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012348:	9b02      	ldr	r3, [sp, #8]
 801234a:	f003 0301 	and.w	r3, r3, #1
 801234e:	462f      	mov	r7, r5
 8012350:	930a      	str	r3, [sp, #40]	@ 0x28
 8012352:	4605      	mov	r5, r0
 8012354:	9b07      	ldr	r3, [sp, #28]
 8012356:	4621      	mov	r1, r4
 8012358:	3b01      	subs	r3, #1
 801235a:	4648      	mov	r0, r9
 801235c:	9300      	str	r3, [sp, #0]
 801235e:	f7ff fa99 	bl	8011894 <quorem>
 8012362:	4639      	mov	r1, r7
 8012364:	9002      	str	r0, [sp, #8]
 8012366:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801236a:	4648      	mov	r0, r9
 801236c:	f000 fca4 	bl	8012cb8 <__mcmp>
 8012370:	462a      	mov	r2, r5
 8012372:	9008      	str	r0, [sp, #32]
 8012374:	4621      	mov	r1, r4
 8012376:	4658      	mov	r0, fp
 8012378:	f000 fcba 	bl	8012cf0 <__mdiff>
 801237c:	68c2      	ldr	r2, [r0, #12]
 801237e:	4606      	mov	r6, r0
 8012380:	bb02      	cbnz	r2, 80123c4 <_dtoa_r+0xa1c>
 8012382:	4601      	mov	r1, r0
 8012384:	4648      	mov	r0, r9
 8012386:	f000 fc97 	bl	8012cb8 <__mcmp>
 801238a:	4602      	mov	r2, r0
 801238c:	4631      	mov	r1, r6
 801238e:	4658      	mov	r0, fp
 8012390:	920e      	str	r2, [sp, #56]	@ 0x38
 8012392:	f000 fa0d 	bl	80127b0 <_Bfree>
 8012396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012398:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801239a:	9e07      	ldr	r6, [sp, #28]
 801239c:	ea43 0102 	orr.w	r1, r3, r2
 80123a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80123a2:	4319      	orrs	r1, r3
 80123a4:	d110      	bne.n	80123c8 <_dtoa_r+0xa20>
 80123a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80123aa:	d029      	beq.n	8012400 <_dtoa_r+0xa58>
 80123ac:	9b08      	ldr	r3, [sp, #32]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	dd02      	ble.n	80123b8 <_dtoa_r+0xa10>
 80123b2:	9b02      	ldr	r3, [sp, #8]
 80123b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80123b8:	9b00      	ldr	r3, [sp, #0]
 80123ba:	f883 8000 	strb.w	r8, [r3]
 80123be:	e63f      	b.n	8012040 <_dtoa_r+0x698>
 80123c0:	4628      	mov	r0, r5
 80123c2:	e7bb      	b.n	801233c <_dtoa_r+0x994>
 80123c4:	2201      	movs	r2, #1
 80123c6:	e7e1      	b.n	801238c <_dtoa_r+0x9e4>
 80123c8:	9b08      	ldr	r3, [sp, #32]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	db04      	blt.n	80123d8 <_dtoa_r+0xa30>
 80123ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80123d0:	430b      	orrs	r3, r1
 80123d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80123d4:	430b      	orrs	r3, r1
 80123d6:	d120      	bne.n	801241a <_dtoa_r+0xa72>
 80123d8:	2a00      	cmp	r2, #0
 80123da:	dded      	ble.n	80123b8 <_dtoa_r+0xa10>
 80123dc:	4649      	mov	r1, r9
 80123de:	2201      	movs	r2, #1
 80123e0:	4658      	mov	r0, fp
 80123e2:	f000 fbfd 	bl	8012be0 <__lshift>
 80123e6:	4621      	mov	r1, r4
 80123e8:	4681      	mov	r9, r0
 80123ea:	f000 fc65 	bl	8012cb8 <__mcmp>
 80123ee:	2800      	cmp	r0, #0
 80123f0:	dc03      	bgt.n	80123fa <_dtoa_r+0xa52>
 80123f2:	d1e1      	bne.n	80123b8 <_dtoa_r+0xa10>
 80123f4:	f018 0f01 	tst.w	r8, #1
 80123f8:	d0de      	beq.n	80123b8 <_dtoa_r+0xa10>
 80123fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80123fe:	d1d8      	bne.n	80123b2 <_dtoa_r+0xa0a>
 8012400:	9a00      	ldr	r2, [sp, #0]
 8012402:	2339      	movs	r3, #57	@ 0x39
 8012404:	7013      	strb	r3, [r2, #0]
 8012406:	4633      	mov	r3, r6
 8012408:	461e      	mov	r6, r3
 801240a:	3b01      	subs	r3, #1
 801240c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012410:	2a39      	cmp	r2, #57	@ 0x39
 8012412:	d052      	beq.n	80124ba <_dtoa_r+0xb12>
 8012414:	3201      	adds	r2, #1
 8012416:	701a      	strb	r2, [r3, #0]
 8012418:	e612      	b.n	8012040 <_dtoa_r+0x698>
 801241a:	2a00      	cmp	r2, #0
 801241c:	dd07      	ble.n	801242e <_dtoa_r+0xa86>
 801241e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012422:	d0ed      	beq.n	8012400 <_dtoa_r+0xa58>
 8012424:	9a00      	ldr	r2, [sp, #0]
 8012426:	f108 0301 	add.w	r3, r8, #1
 801242a:	7013      	strb	r3, [r2, #0]
 801242c:	e608      	b.n	8012040 <_dtoa_r+0x698>
 801242e:	9b07      	ldr	r3, [sp, #28]
 8012430:	9a07      	ldr	r2, [sp, #28]
 8012432:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012436:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012438:	4293      	cmp	r3, r2
 801243a:	d028      	beq.n	801248e <_dtoa_r+0xae6>
 801243c:	4649      	mov	r1, r9
 801243e:	2300      	movs	r3, #0
 8012440:	220a      	movs	r2, #10
 8012442:	4658      	mov	r0, fp
 8012444:	f000 f9d6 	bl	80127f4 <__multadd>
 8012448:	42af      	cmp	r7, r5
 801244a:	4681      	mov	r9, r0
 801244c:	f04f 0300 	mov.w	r3, #0
 8012450:	f04f 020a 	mov.w	r2, #10
 8012454:	4639      	mov	r1, r7
 8012456:	4658      	mov	r0, fp
 8012458:	d107      	bne.n	801246a <_dtoa_r+0xac2>
 801245a:	f000 f9cb 	bl	80127f4 <__multadd>
 801245e:	4607      	mov	r7, r0
 8012460:	4605      	mov	r5, r0
 8012462:	9b07      	ldr	r3, [sp, #28]
 8012464:	3301      	adds	r3, #1
 8012466:	9307      	str	r3, [sp, #28]
 8012468:	e774      	b.n	8012354 <_dtoa_r+0x9ac>
 801246a:	f000 f9c3 	bl	80127f4 <__multadd>
 801246e:	4629      	mov	r1, r5
 8012470:	4607      	mov	r7, r0
 8012472:	2300      	movs	r3, #0
 8012474:	220a      	movs	r2, #10
 8012476:	4658      	mov	r0, fp
 8012478:	f000 f9bc 	bl	80127f4 <__multadd>
 801247c:	4605      	mov	r5, r0
 801247e:	e7f0      	b.n	8012462 <_dtoa_r+0xaba>
 8012480:	9b00      	ldr	r3, [sp, #0]
 8012482:	2b00      	cmp	r3, #0
 8012484:	bfcc      	ite	gt
 8012486:	461e      	movgt	r6, r3
 8012488:	2601      	movle	r6, #1
 801248a:	4456      	add	r6, sl
 801248c:	2700      	movs	r7, #0
 801248e:	4649      	mov	r1, r9
 8012490:	2201      	movs	r2, #1
 8012492:	4658      	mov	r0, fp
 8012494:	f000 fba4 	bl	8012be0 <__lshift>
 8012498:	4621      	mov	r1, r4
 801249a:	4681      	mov	r9, r0
 801249c:	f000 fc0c 	bl	8012cb8 <__mcmp>
 80124a0:	2800      	cmp	r0, #0
 80124a2:	dcb0      	bgt.n	8012406 <_dtoa_r+0xa5e>
 80124a4:	d102      	bne.n	80124ac <_dtoa_r+0xb04>
 80124a6:	f018 0f01 	tst.w	r8, #1
 80124aa:	d1ac      	bne.n	8012406 <_dtoa_r+0xa5e>
 80124ac:	4633      	mov	r3, r6
 80124ae:	461e      	mov	r6, r3
 80124b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80124b4:	2a30      	cmp	r2, #48	@ 0x30
 80124b6:	d0fa      	beq.n	80124ae <_dtoa_r+0xb06>
 80124b8:	e5c2      	b.n	8012040 <_dtoa_r+0x698>
 80124ba:	459a      	cmp	sl, r3
 80124bc:	d1a4      	bne.n	8012408 <_dtoa_r+0xa60>
 80124be:	9b04      	ldr	r3, [sp, #16]
 80124c0:	3301      	adds	r3, #1
 80124c2:	9304      	str	r3, [sp, #16]
 80124c4:	2331      	movs	r3, #49	@ 0x31
 80124c6:	f88a 3000 	strb.w	r3, [sl]
 80124ca:	e5b9      	b.n	8012040 <_dtoa_r+0x698>
 80124cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80124ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801252c <_dtoa_r+0xb84>
 80124d2:	b11b      	cbz	r3, 80124dc <_dtoa_r+0xb34>
 80124d4:	f10a 0308 	add.w	r3, sl, #8
 80124d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80124da:	6013      	str	r3, [r2, #0]
 80124dc:	4650      	mov	r0, sl
 80124de:	b019      	add	sp, #100	@ 0x64
 80124e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	f77f ae37 	ble.w	801215a <_dtoa_r+0x7b2>
 80124ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80124f0:	2001      	movs	r0, #1
 80124f2:	e655      	b.n	80121a0 <_dtoa_r+0x7f8>
 80124f4:	9b00      	ldr	r3, [sp, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	f77f aed6 	ble.w	80122a8 <_dtoa_r+0x900>
 80124fc:	4656      	mov	r6, sl
 80124fe:	4621      	mov	r1, r4
 8012500:	4648      	mov	r0, r9
 8012502:	f7ff f9c7 	bl	8011894 <quorem>
 8012506:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801250a:	f806 8b01 	strb.w	r8, [r6], #1
 801250e:	9b00      	ldr	r3, [sp, #0]
 8012510:	eba6 020a 	sub.w	r2, r6, sl
 8012514:	4293      	cmp	r3, r2
 8012516:	ddb3      	ble.n	8012480 <_dtoa_r+0xad8>
 8012518:	4649      	mov	r1, r9
 801251a:	2300      	movs	r3, #0
 801251c:	220a      	movs	r2, #10
 801251e:	4658      	mov	r0, fp
 8012520:	f000 f968 	bl	80127f4 <__multadd>
 8012524:	4681      	mov	r9, r0
 8012526:	e7ea      	b.n	80124fe <_dtoa_r+0xb56>
 8012528:	08016fab 	.word	0x08016fab
 801252c:	08016f2f 	.word	0x08016f2f

08012530 <_free_r>:
 8012530:	b538      	push	{r3, r4, r5, lr}
 8012532:	4605      	mov	r5, r0
 8012534:	2900      	cmp	r1, #0
 8012536:	d041      	beq.n	80125bc <_free_r+0x8c>
 8012538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801253c:	1f0c      	subs	r4, r1, #4
 801253e:	2b00      	cmp	r3, #0
 8012540:	bfb8      	it	lt
 8012542:	18e4      	addlt	r4, r4, r3
 8012544:	f000 f8e8 	bl	8012718 <__malloc_lock>
 8012548:	4a1d      	ldr	r2, [pc, #116]	@ (80125c0 <_free_r+0x90>)
 801254a:	6813      	ldr	r3, [r2, #0]
 801254c:	b933      	cbnz	r3, 801255c <_free_r+0x2c>
 801254e:	6063      	str	r3, [r4, #4]
 8012550:	6014      	str	r4, [r2, #0]
 8012552:	4628      	mov	r0, r5
 8012554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012558:	f000 b8e4 	b.w	8012724 <__malloc_unlock>
 801255c:	42a3      	cmp	r3, r4
 801255e:	d908      	bls.n	8012572 <_free_r+0x42>
 8012560:	6820      	ldr	r0, [r4, #0]
 8012562:	1821      	adds	r1, r4, r0
 8012564:	428b      	cmp	r3, r1
 8012566:	bf01      	itttt	eq
 8012568:	6819      	ldreq	r1, [r3, #0]
 801256a:	685b      	ldreq	r3, [r3, #4]
 801256c:	1809      	addeq	r1, r1, r0
 801256e:	6021      	streq	r1, [r4, #0]
 8012570:	e7ed      	b.n	801254e <_free_r+0x1e>
 8012572:	461a      	mov	r2, r3
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	b10b      	cbz	r3, 801257c <_free_r+0x4c>
 8012578:	42a3      	cmp	r3, r4
 801257a:	d9fa      	bls.n	8012572 <_free_r+0x42>
 801257c:	6811      	ldr	r1, [r2, #0]
 801257e:	1850      	adds	r0, r2, r1
 8012580:	42a0      	cmp	r0, r4
 8012582:	d10b      	bne.n	801259c <_free_r+0x6c>
 8012584:	6820      	ldr	r0, [r4, #0]
 8012586:	4401      	add	r1, r0
 8012588:	1850      	adds	r0, r2, r1
 801258a:	4283      	cmp	r3, r0
 801258c:	6011      	str	r1, [r2, #0]
 801258e:	d1e0      	bne.n	8012552 <_free_r+0x22>
 8012590:	6818      	ldr	r0, [r3, #0]
 8012592:	685b      	ldr	r3, [r3, #4]
 8012594:	6053      	str	r3, [r2, #4]
 8012596:	4408      	add	r0, r1
 8012598:	6010      	str	r0, [r2, #0]
 801259a:	e7da      	b.n	8012552 <_free_r+0x22>
 801259c:	d902      	bls.n	80125a4 <_free_r+0x74>
 801259e:	230c      	movs	r3, #12
 80125a0:	602b      	str	r3, [r5, #0]
 80125a2:	e7d6      	b.n	8012552 <_free_r+0x22>
 80125a4:	6820      	ldr	r0, [r4, #0]
 80125a6:	1821      	adds	r1, r4, r0
 80125a8:	428b      	cmp	r3, r1
 80125aa:	bf04      	itt	eq
 80125ac:	6819      	ldreq	r1, [r3, #0]
 80125ae:	685b      	ldreq	r3, [r3, #4]
 80125b0:	6063      	str	r3, [r4, #4]
 80125b2:	bf04      	itt	eq
 80125b4:	1809      	addeq	r1, r1, r0
 80125b6:	6021      	streq	r1, [r4, #0]
 80125b8:	6054      	str	r4, [r2, #4]
 80125ba:	e7ca      	b.n	8012552 <_free_r+0x22>
 80125bc:	bd38      	pop	{r3, r4, r5, pc}
 80125be:	bf00      	nop
 80125c0:	200026a4 	.word	0x200026a4

080125c4 <malloc>:
 80125c4:	4b02      	ldr	r3, [pc, #8]	@ (80125d0 <malloc+0xc>)
 80125c6:	4601      	mov	r1, r0
 80125c8:	6818      	ldr	r0, [r3, #0]
 80125ca:	f000 b825 	b.w	8012618 <_malloc_r>
 80125ce:	bf00      	nop
 80125d0:	200001cc 	.word	0x200001cc

080125d4 <sbrk_aligned>:
 80125d4:	b570      	push	{r4, r5, r6, lr}
 80125d6:	4e0f      	ldr	r6, [pc, #60]	@ (8012614 <sbrk_aligned+0x40>)
 80125d8:	460c      	mov	r4, r1
 80125da:	6831      	ldr	r1, [r6, #0]
 80125dc:	4605      	mov	r5, r0
 80125de:	b911      	cbnz	r1, 80125e6 <sbrk_aligned+0x12>
 80125e0:	f002 f988 	bl	80148f4 <_sbrk_r>
 80125e4:	6030      	str	r0, [r6, #0]
 80125e6:	4621      	mov	r1, r4
 80125e8:	4628      	mov	r0, r5
 80125ea:	f002 f983 	bl	80148f4 <_sbrk_r>
 80125ee:	1c43      	adds	r3, r0, #1
 80125f0:	d103      	bne.n	80125fa <sbrk_aligned+0x26>
 80125f2:	f04f 34ff 	mov.w	r4, #4294967295
 80125f6:	4620      	mov	r0, r4
 80125f8:	bd70      	pop	{r4, r5, r6, pc}
 80125fa:	1cc4      	adds	r4, r0, #3
 80125fc:	f024 0403 	bic.w	r4, r4, #3
 8012600:	42a0      	cmp	r0, r4
 8012602:	d0f8      	beq.n	80125f6 <sbrk_aligned+0x22>
 8012604:	1a21      	subs	r1, r4, r0
 8012606:	4628      	mov	r0, r5
 8012608:	f002 f974 	bl	80148f4 <_sbrk_r>
 801260c:	3001      	adds	r0, #1
 801260e:	d1f2      	bne.n	80125f6 <sbrk_aligned+0x22>
 8012610:	e7ef      	b.n	80125f2 <sbrk_aligned+0x1e>
 8012612:	bf00      	nop
 8012614:	200026a0 	.word	0x200026a0

08012618 <_malloc_r>:
 8012618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801261c:	1ccd      	adds	r5, r1, #3
 801261e:	f025 0503 	bic.w	r5, r5, #3
 8012622:	3508      	adds	r5, #8
 8012624:	2d0c      	cmp	r5, #12
 8012626:	bf38      	it	cc
 8012628:	250c      	movcc	r5, #12
 801262a:	2d00      	cmp	r5, #0
 801262c:	4606      	mov	r6, r0
 801262e:	db01      	blt.n	8012634 <_malloc_r+0x1c>
 8012630:	42a9      	cmp	r1, r5
 8012632:	d904      	bls.n	801263e <_malloc_r+0x26>
 8012634:	230c      	movs	r3, #12
 8012636:	6033      	str	r3, [r6, #0]
 8012638:	2000      	movs	r0, #0
 801263a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801263e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012714 <_malloc_r+0xfc>
 8012642:	f000 f869 	bl	8012718 <__malloc_lock>
 8012646:	f8d8 3000 	ldr.w	r3, [r8]
 801264a:	461c      	mov	r4, r3
 801264c:	bb44      	cbnz	r4, 80126a0 <_malloc_r+0x88>
 801264e:	4629      	mov	r1, r5
 8012650:	4630      	mov	r0, r6
 8012652:	f7ff ffbf 	bl	80125d4 <sbrk_aligned>
 8012656:	1c43      	adds	r3, r0, #1
 8012658:	4604      	mov	r4, r0
 801265a:	d158      	bne.n	801270e <_malloc_r+0xf6>
 801265c:	f8d8 4000 	ldr.w	r4, [r8]
 8012660:	4627      	mov	r7, r4
 8012662:	2f00      	cmp	r7, #0
 8012664:	d143      	bne.n	80126ee <_malloc_r+0xd6>
 8012666:	2c00      	cmp	r4, #0
 8012668:	d04b      	beq.n	8012702 <_malloc_r+0xea>
 801266a:	6823      	ldr	r3, [r4, #0]
 801266c:	4639      	mov	r1, r7
 801266e:	4630      	mov	r0, r6
 8012670:	eb04 0903 	add.w	r9, r4, r3
 8012674:	f002 f93e 	bl	80148f4 <_sbrk_r>
 8012678:	4581      	cmp	r9, r0
 801267a:	d142      	bne.n	8012702 <_malloc_r+0xea>
 801267c:	6821      	ldr	r1, [r4, #0]
 801267e:	1a6d      	subs	r5, r5, r1
 8012680:	4629      	mov	r1, r5
 8012682:	4630      	mov	r0, r6
 8012684:	f7ff ffa6 	bl	80125d4 <sbrk_aligned>
 8012688:	3001      	adds	r0, #1
 801268a:	d03a      	beq.n	8012702 <_malloc_r+0xea>
 801268c:	6823      	ldr	r3, [r4, #0]
 801268e:	442b      	add	r3, r5
 8012690:	6023      	str	r3, [r4, #0]
 8012692:	f8d8 3000 	ldr.w	r3, [r8]
 8012696:	685a      	ldr	r2, [r3, #4]
 8012698:	bb62      	cbnz	r2, 80126f4 <_malloc_r+0xdc>
 801269a:	f8c8 7000 	str.w	r7, [r8]
 801269e:	e00f      	b.n	80126c0 <_malloc_r+0xa8>
 80126a0:	6822      	ldr	r2, [r4, #0]
 80126a2:	1b52      	subs	r2, r2, r5
 80126a4:	d420      	bmi.n	80126e8 <_malloc_r+0xd0>
 80126a6:	2a0b      	cmp	r2, #11
 80126a8:	d917      	bls.n	80126da <_malloc_r+0xc2>
 80126aa:	1961      	adds	r1, r4, r5
 80126ac:	42a3      	cmp	r3, r4
 80126ae:	6025      	str	r5, [r4, #0]
 80126b0:	bf18      	it	ne
 80126b2:	6059      	strne	r1, [r3, #4]
 80126b4:	6863      	ldr	r3, [r4, #4]
 80126b6:	bf08      	it	eq
 80126b8:	f8c8 1000 	streq.w	r1, [r8]
 80126bc:	5162      	str	r2, [r4, r5]
 80126be:	604b      	str	r3, [r1, #4]
 80126c0:	4630      	mov	r0, r6
 80126c2:	f000 f82f 	bl	8012724 <__malloc_unlock>
 80126c6:	f104 000b 	add.w	r0, r4, #11
 80126ca:	1d23      	adds	r3, r4, #4
 80126cc:	f020 0007 	bic.w	r0, r0, #7
 80126d0:	1ac2      	subs	r2, r0, r3
 80126d2:	bf1c      	itt	ne
 80126d4:	1a1b      	subne	r3, r3, r0
 80126d6:	50a3      	strne	r3, [r4, r2]
 80126d8:	e7af      	b.n	801263a <_malloc_r+0x22>
 80126da:	6862      	ldr	r2, [r4, #4]
 80126dc:	42a3      	cmp	r3, r4
 80126de:	bf0c      	ite	eq
 80126e0:	f8c8 2000 	streq.w	r2, [r8]
 80126e4:	605a      	strne	r2, [r3, #4]
 80126e6:	e7eb      	b.n	80126c0 <_malloc_r+0xa8>
 80126e8:	4623      	mov	r3, r4
 80126ea:	6864      	ldr	r4, [r4, #4]
 80126ec:	e7ae      	b.n	801264c <_malloc_r+0x34>
 80126ee:	463c      	mov	r4, r7
 80126f0:	687f      	ldr	r7, [r7, #4]
 80126f2:	e7b6      	b.n	8012662 <_malloc_r+0x4a>
 80126f4:	461a      	mov	r2, r3
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	42a3      	cmp	r3, r4
 80126fa:	d1fb      	bne.n	80126f4 <_malloc_r+0xdc>
 80126fc:	2300      	movs	r3, #0
 80126fe:	6053      	str	r3, [r2, #4]
 8012700:	e7de      	b.n	80126c0 <_malloc_r+0xa8>
 8012702:	230c      	movs	r3, #12
 8012704:	6033      	str	r3, [r6, #0]
 8012706:	4630      	mov	r0, r6
 8012708:	f000 f80c 	bl	8012724 <__malloc_unlock>
 801270c:	e794      	b.n	8012638 <_malloc_r+0x20>
 801270e:	6005      	str	r5, [r0, #0]
 8012710:	e7d6      	b.n	80126c0 <_malloc_r+0xa8>
 8012712:	bf00      	nop
 8012714:	200026a4 	.word	0x200026a4

08012718 <__malloc_lock>:
 8012718:	4801      	ldr	r0, [pc, #4]	@ (8012720 <__malloc_lock+0x8>)
 801271a:	f7ff b8a4 	b.w	8011866 <__retarget_lock_acquire_recursive>
 801271e:	bf00      	nop
 8012720:	2000269c 	.word	0x2000269c

08012724 <__malloc_unlock>:
 8012724:	4801      	ldr	r0, [pc, #4]	@ (801272c <__malloc_unlock+0x8>)
 8012726:	f7ff b89f 	b.w	8011868 <__retarget_lock_release_recursive>
 801272a:	bf00      	nop
 801272c:	2000269c 	.word	0x2000269c

08012730 <_Balloc>:
 8012730:	b570      	push	{r4, r5, r6, lr}
 8012732:	69c6      	ldr	r6, [r0, #28]
 8012734:	4604      	mov	r4, r0
 8012736:	460d      	mov	r5, r1
 8012738:	b976      	cbnz	r6, 8012758 <_Balloc+0x28>
 801273a:	2010      	movs	r0, #16
 801273c:	f7ff ff42 	bl	80125c4 <malloc>
 8012740:	4602      	mov	r2, r0
 8012742:	61e0      	str	r0, [r4, #28]
 8012744:	b920      	cbnz	r0, 8012750 <_Balloc+0x20>
 8012746:	4b18      	ldr	r3, [pc, #96]	@ (80127a8 <_Balloc+0x78>)
 8012748:	4818      	ldr	r0, [pc, #96]	@ (80127ac <_Balloc+0x7c>)
 801274a:	216b      	movs	r1, #107	@ 0x6b
 801274c:	f002 f8ec 	bl	8014928 <__assert_func>
 8012750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012754:	6006      	str	r6, [r0, #0]
 8012756:	60c6      	str	r6, [r0, #12]
 8012758:	69e6      	ldr	r6, [r4, #28]
 801275a:	68f3      	ldr	r3, [r6, #12]
 801275c:	b183      	cbz	r3, 8012780 <_Balloc+0x50>
 801275e:	69e3      	ldr	r3, [r4, #28]
 8012760:	68db      	ldr	r3, [r3, #12]
 8012762:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012766:	b9b8      	cbnz	r0, 8012798 <_Balloc+0x68>
 8012768:	2101      	movs	r1, #1
 801276a:	fa01 f605 	lsl.w	r6, r1, r5
 801276e:	1d72      	adds	r2, r6, #5
 8012770:	0092      	lsls	r2, r2, #2
 8012772:	4620      	mov	r0, r4
 8012774:	f002 f8f6 	bl	8014964 <_calloc_r>
 8012778:	b160      	cbz	r0, 8012794 <_Balloc+0x64>
 801277a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801277e:	e00e      	b.n	801279e <_Balloc+0x6e>
 8012780:	2221      	movs	r2, #33	@ 0x21
 8012782:	2104      	movs	r1, #4
 8012784:	4620      	mov	r0, r4
 8012786:	f002 f8ed 	bl	8014964 <_calloc_r>
 801278a:	69e3      	ldr	r3, [r4, #28]
 801278c:	60f0      	str	r0, [r6, #12]
 801278e:	68db      	ldr	r3, [r3, #12]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d1e4      	bne.n	801275e <_Balloc+0x2e>
 8012794:	2000      	movs	r0, #0
 8012796:	bd70      	pop	{r4, r5, r6, pc}
 8012798:	6802      	ldr	r2, [r0, #0]
 801279a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801279e:	2300      	movs	r3, #0
 80127a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80127a4:	e7f7      	b.n	8012796 <_Balloc+0x66>
 80127a6:	bf00      	nop
 80127a8:	08016f3c 	.word	0x08016f3c
 80127ac:	08016fbc 	.word	0x08016fbc

080127b0 <_Bfree>:
 80127b0:	b570      	push	{r4, r5, r6, lr}
 80127b2:	69c6      	ldr	r6, [r0, #28]
 80127b4:	4605      	mov	r5, r0
 80127b6:	460c      	mov	r4, r1
 80127b8:	b976      	cbnz	r6, 80127d8 <_Bfree+0x28>
 80127ba:	2010      	movs	r0, #16
 80127bc:	f7ff ff02 	bl	80125c4 <malloc>
 80127c0:	4602      	mov	r2, r0
 80127c2:	61e8      	str	r0, [r5, #28]
 80127c4:	b920      	cbnz	r0, 80127d0 <_Bfree+0x20>
 80127c6:	4b09      	ldr	r3, [pc, #36]	@ (80127ec <_Bfree+0x3c>)
 80127c8:	4809      	ldr	r0, [pc, #36]	@ (80127f0 <_Bfree+0x40>)
 80127ca:	218f      	movs	r1, #143	@ 0x8f
 80127cc:	f002 f8ac 	bl	8014928 <__assert_func>
 80127d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127d4:	6006      	str	r6, [r0, #0]
 80127d6:	60c6      	str	r6, [r0, #12]
 80127d8:	b13c      	cbz	r4, 80127ea <_Bfree+0x3a>
 80127da:	69eb      	ldr	r3, [r5, #28]
 80127dc:	6862      	ldr	r2, [r4, #4]
 80127de:	68db      	ldr	r3, [r3, #12]
 80127e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80127e4:	6021      	str	r1, [r4, #0]
 80127e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80127ea:	bd70      	pop	{r4, r5, r6, pc}
 80127ec:	08016f3c 	.word	0x08016f3c
 80127f0:	08016fbc 	.word	0x08016fbc

080127f4 <__multadd>:
 80127f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127f8:	690d      	ldr	r5, [r1, #16]
 80127fa:	4607      	mov	r7, r0
 80127fc:	460c      	mov	r4, r1
 80127fe:	461e      	mov	r6, r3
 8012800:	f101 0c14 	add.w	ip, r1, #20
 8012804:	2000      	movs	r0, #0
 8012806:	f8dc 3000 	ldr.w	r3, [ip]
 801280a:	b299      	uxth	r1, r3
 801280c:	fb02 6101 	mla	r1, r2, r1, r6
 8012810:	0c1e      	lsrs	r6, r3, #16
 8012812:	0c0b      	lsrs	r3, r1, #16
 8012814:	fb02 3306 	mla	r3, r2, r6, r3
 8012818:	b289      	uxth	r1, r1
 801281a:	3001      	adds	r0, #1
 801281c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012820:	4285      	cmp	r5, r0
 8012822:	f84c 1b04 	str.w	r1, [ip], #4
 8012826:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801282a:	dcec      	bgt.n	8012806 <__multadd+0x12>
 801282c:	b30e      	cbz	r6, 8012872 <__multadd+0x7e>
 801282e:	68a3      	ldr	r3, [r4, #8]
 8012830:	42ab      	cmp	r3, r5
 8012832:	dc19      	bgt.n	8012868 <__multadd+0x74>
 8012834:	6861      	ldr	r1, [r4, #4]
 8012836:	4638      	mov	r0, r7
 8012838:	3101      	adds	r1, #1
 801283a:	f7ff ff79 	bl	8012730 <_Balloc>
 801283e:	4680      	mov	r8, r0
 8012840:	b928      	cbnz	r0, 801284e <__multadd+0x5a>
 8012842:	4602      	mov	r2, r0
 8012844:	4b0c      	ldr	r3, [pc, #48]	@ (8012878 <__multadd+0x84>)
 8012846:	480d      	ldr	r0, [pc, #52]	@ (801287c <__multadd+0x88>)
 8012848:	21ba      	movs	r1, #186	@ 0xba
 801284a:	f002 f86d 	bl	8014928 <__assert_func>
 801284e:	6922      	ldr	r2, [r4, #16]
 8012850:	3202      	adds	r2, #2
 8012852:	f104 010c 	add.w	r1, r4, #12
 8012856:	0092      	lsls	r2, r2, #2
 8012858:	300c      	adds	r0, #12
 801285a:	f7ff f806 	bl	801186a <memcpy>
 801285e:	4621      	mov	r1, r4
 8012860:	4638      	mov	r0, r7
 8012862:	f7ff ffa5 	bl	80127b0 <_Bfree>
 8012866:	4644      	mov	r4, r8
 8012868:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801286c:	3501      	adds	r5, #1
 801286e:	615e      	str	r6, [r3, #20]
 8012870:	6125      	str	r5, [r4, #16]
 8012872:	4620      	mov	r0, r4
 8012874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012878:	08016fab 	.word	0x08016fab
 801287c:	08016fbc 	.word	0x08016fbc

08012880 <__s2b>:
 8012880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012884:	460c      	mov	r4, r1
 8012886:	4615      	mov	r5, r2
 8012888:	461f      	mov	r7, r3
 801288a:	2209      	movs	r2, #9
 801288c:	3308      	adds	r3, #8
 801288e:	4606      	mov	r6, r0
 8012890:	fb93 f3f2 	sdiv	r3, r3, r2
 8012894:	2100      	movs	r1, #0
 8012896:	2201      	movs	r2, #1
 8012898:	429a      	cmp	r2, r3
 801289a:	db09      	blt.n	80128b0 <__s2b+0x30>
 801289c:	4630      	mov	r0, r6
 801289e:	f7ff ff47 	bl	8012730 <_Balloc>
 80128a2:	b940      	cbnz	r0, 80128b6 <__s2b+0x36>
 80128a4:	4602      	mov	r2, r0
 80128a6:	4b19      	ldr	r3, [pc, #100]	@ (801290c <__s2b+0x8c>)
 80128a8:	4819      	ldr	r0, [pc, #100]	@ (8012910 <__s2b+0x90>)
 80128aa:	21d3      	movs	r1, #211	@ 0xd3
 80128ac:	f002 f83c 	bl	8014928 <__assert_func>
 80128b0:	0052      	lsls	r2, r2, #1
 80128b2:	3101      	adds	r1, #1
 80128b4:	e7f0      	b.n	8012898 <__s2b+0x18>
 80128b6:	9b08      	ldr	r3, [sp, #32]
 80128b8:	6143      	str	r3, [r0, #20]
 80128ba:	2d09      	cmp	r5, #9
 80128bc:	f04f 0301 	mov.w	r3, #1
 80128c0:	6103      	str	r3, [r0, #16]
 80128c2:	dd16      	ble.n	80128f2 <__s2b+0x72>
 80128c4:	f104 0909 	add.w	r9, r4, #9
 80128c8:	46c8      	mov	r8, r9
 80128ca:	442c      	add	r4, r5
 80128cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80128d0:	4601      	mov	r1, r0
 80128d2:	3b30      	subs	r3, #48	@ 0x30
 80128d4:	220a      	movs	r2, #10
 80128d6:	4630      	mov	r0, r6
 80128d8:	f7ff ff8c 	bl	80127f4 <__multadd>
 80128dc:	45a0      	cmp	r8, r4
 80128de:	d1f5      	bne.n	80128cc <__s2b+0x4c>
 80128e0:	f1a5 0408 	sub.w	r4, r5, #8
 80128e4:	444c      	add	r4, r9
 80128e6:	1b2d      	subs	r5, r5, r4
 80128e8:	1963      	adds	r3, r4, r5
 80128ea:	42bb      	cmp	r3, r7
 80128ec:	db04      	blt.n	80128f8 <__s2b+0x78>
 80128ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128f2:	340a      	adds	r4, #10
 80128f4:	2509      	movs	r5, #9
 80128f6:	e7f6      	b.n	80128e6 <__s2b+0x66>
 80128f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80128fc:	4601      	mov	r1, r0
 80128fe:	3b30      	subs	r3, #48	@ 0x30
 8012900:	220a      	movs	r2, #10
 8012902:	4630      	mov	r0, r6
 8012904:	f7ff ff76 	bl	80127f4 <__multadd>
 8012908:	e7ee      	b.n	80128e8 <__s2b+0x68>
 801290a:	bf00      	nop
 801290c:	08016fab 	.word	0x08016fab
 8012910:	08016fbc 	.word	0x08016fbc

08012914 <__hi0bits>:
 8012914:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012918:	4603      	mov	r3, r0
 801291a:	bf36      	itet	cc
 801291c:	0403      	lslcc	r3, r0, #16
 801291e:	2000      	movcs	r0, #0
 8012920:	2010      	movcc	r0, #16
 8012922:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012926:	bf3c      	itt	cc
 8012928:	021b      	lslcc	r3, r3, #8
 801292a:	3008      	addcc	r0, #8
 801292c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012930:	bf3c      	itt	cc
 8012932:	011b      	lslcc	r3, r3, #4
 8012934:	3004      	addcc	r0, #4
 8012936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801293a:	bf3c      	itt	cc
 801293c:	009b      	lslcc	r3, r3, #2
 801293e:	3002      	addcc	r0, #2
 8012940:	2b00      	cmp	r3, #0
 8012942:	db05      	blt.n	8012950 <__hi0bits+0x3c>
 8012944:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012948:	f100 0001 	add.w	r0, r0, #1
 801294c:	bf08      	it	eq
 801294e:	2020      	moveq	r0, #32
 8012950:	4770      	bx	lr

08012952 <__lo0bits>:
 8012952:	6803      	ldr	r3, [r0, #0]
 8012954:	4602      	mov	r2, r0
 8012956:	f013 0007 	ands.w	r0, r3, #7
 801295a:	d00b      	beq.n	8012974 <__lo0bits+0x22>
 801295c:	07d9      	lsls	r1, r3, #31
 801295e:	d421      	bmi.n	80129a4 <__lo0bits+0x52>
 8012960:	0798      	lsls	r0, r3, #30
 8012962:	bf49      	itett	mi
 8012964:	085b      	lsrmi	r3, r3, #1
 8012966:	089b      	lsrpl	r3, r3, #2
 8012968:	2001      	movmi	r0, #1
 801296a:	6013      	strmi	r3, [r2, #0]
 801296c:	bf5c      	itt	pl
 801296e:	6013      	strpl	r3, [r2, #0]
 8012970:	2002      	movpl	r0, #2
 8012972:	4770      	bx	lr
 8012974:	b299      	uxth	r1, r3
 8012976:	b909      	cbnz	r1, 801297c <__lo0bits+0x2a>
 8012978:	0c1b      	lsrs	r3, r3, #16
 801297a:	2010      	movs	r0, #16
 801297c:	b2d9      	uxtb	r1, r3
 801297e:	b909      	cbnz	r1, 8012984 <__lo0bits+0x32>
 8012980:	3008      	adds	r0, #8
 8012982:	0a1b      	lsrs	r3, r3, #8
 8012984:	0719      	lsls	r1, r3, #28
 8012986:	bf04      	itt	eq
 8012988:	091b      	lsreq	r3, r3, #4
 801298a:	3004      	addeq	r0, #4
 801298c:	0799      	lsls	r1, r3, #30
 801298e:	bf04      	itt	eq
 8012990:	089b      	lsreq	r3, r3, #2
 8012992:	3002      	addeq	r0, #2
 8012994:	07d9      	lsls	r1, r3, #31
 8012996:	d403      	bmi.n	80129a0 <__lo0bits+0x4e>
 8012998:	085b      	lsrs	r3, r3, #1
 801299a:	f100 0001 	add.w	r0, r0, #1
 801299e:	d003      	beq.n	80129a8 <__lo0bits+0x56>
 80129a0:	6013      	str	r3, [r2, #0]
 80129a2:	4770      	bx	lr
 80129a4:	2000      	movs	r0, #0
 80129a6:	4770      	bx	lr
 80129a8:	2020      	movs	r0, #32
 80129aa:	4770      	bx	lr

080129ac <__i2b>:
 80129ac:	b510      	push	{r4, lr}
 80129ae:	460c      	mov	r4, r1
 80129b0:	2101      	movs	r1, #1
 80129b2:	f7ff febd 	bl	8012730 <_Balloc>
 80129b6:	4602      	mov	r2, r0
 80129b8:	b928      	cbnz	r0, 80129c6 <__i2b+0x1a>
 80129ba:	4b05      	ldr	r3, [pc, #20]	@ (80129d0 <__i2b+0x24>)
 80129bc:	4805      	ldr	r0, [pc, #20]	@ (80129d4 <__i2b+0x28>)
 80129be:	f240 1145 	movw	r1, #325	@ 0x145
 80129c2:	f001 ffb1 	bl	8014928 <__assert_func>
 80129c6:	2301      	movs	r3, #1
 80129c8:	6144      	str	r4, [r0, #20]
 80129ca:	6103      	str	r3, [r0, #16]
 80129cc:	bd10      	pop	{r4, pc}
 80129ce:	bf00      	nop
 80129d0:	08016fab 	.word	0x08016fab
 80129d4:	08016fbc 	.word	0x08016fbc

080129d8 <__multiply>:
 80129d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129dc:	4614      	mov	r4, r2
 80129de:	690a      	ldr	r2, [r1, #16]
 80129e0:	6923      	ldr	r3, [r4, #16]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	bfa8      	it	ge
 80129e6:	4623      	movge	r3, r4
 80129e8:	460f      	mov	r7, r1
 80129ea:	bfa4      	itt	ge
 80129ec:	460c      	movge	r4, r1
 80129ee:	461f      	movge	r7, r3
 80129f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80129f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80129f8:	68a3      	ldr	r3, [r4, #8]
 80129fa:	6861      	ldr	r1, [r4, #4]
 80129fc:	eb0a 0609 	add.w	r6, sl, r9
 8012a00:	42b3      	cmp	r3, r6
 8012a02:	b085      	sub	sp, #20
 8012a04:	bfb8      	it	lt
 8012a06:	3101      	addlt	r1, #1
 8012a08:	f7ff fe92 	bl	8012730 <_Balloc>
 8012a0c:	b930      	cbnz	r0, 8012a1c <__multiply+0x44>
 8012a0e:	4602      	mov	r2, r0
 8012a10:	4b44      	ldr	r3, [pc, #272]	@ (8012b24 <__multiply+0x14c>)
 8012a12:	4845      	ldr	r0, [pc, #276]	@ (8012b28 <__multiply+0x150>)
 8012a14:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012a18:	f001 ff86 	bl	8014928 <__assert_func>
 8012a1c:	f100 0514 	add.w	r5, r0, #20
 8012a20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012a24:	462b      	mov	r3, r5
 8012a26:	2200      	movs	r2, #0
 8012a28:	4543      	cmp	r3, r8
 8012a2a:	d321      	bcc.n	8012a70 <__multiply+0x98>
 8012a2c:	f107 0114 	add.w	r1, r7, #20
 8012a30:	f104 0214 	add.w	r2, r4, #20
 8012a34:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012a38:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012a3c:	9302      	str	r3, [sp, #8]
 8012a3e:	1b13      	subs	r3, r2, r4
 8012a40:	3b15      	subs	r3, #21
 8012a42:	f023 0303 	bic.w	r3, r3, #3
 8012a46:	3304      	adds	r3, #4
 8012a48:	f104 0715 	add.w	r7, r4, #21
 8012a4c:	42ba      	cmp	r2, r7
 8012a4e:	bf38      	it	cc
 8012a50:	2304      	movcc	r3, #4
 8012a52:	9301      	str	r3, [sp, #4]
 8012a54:	9b02      	ldr	r3, [sp, #8]
 8012a56:	9103      	str	r1, [sp, #12]
 8012a58:	428b      	cmp	r3, r1
 8012a5a:	d80c      	bhi.n	8012a76 <__multiply+0x9e>
 8012a5c:	2e00      	cmp	r6, #0
 8012a5e:	dd03      	ble.n	8012a68 <__multiply+0x90>
 8012a60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d05b      	beq.n	8012b20 <__multiply+0x148>
 8012a68:	6106      	str	r6, [r0, #16]
 8012a6a:	b005      	add	sp, #20
 8012a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a70:	f843 2b04 	str.w	r2, [r3], #4
 8012a74:	e7d8      	b.n	8012a28 <__multiply+0x50>
 8012a76:	f8b1 a000 	ldrh.w	sl, [r1]
 8012a7a:	f1ba 0f00 	cmp.w	sl, #0
 8012a7e:	d024      	beq.n	8012aca <__multiply+0xf2>
 8012a80:	f104 0e14 	add.w	lr, r4, #20
 8012a84:	46a9      	mov	r9, r5
 8012a86:	f04f 0c00 	mov.w	ip, #0
 8012a8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012a8e:	f8d9 3000 	ldr.w	r3, [r9]
 8012a92:	fa1f fb87 	uxth.w	fp, r7
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	fb0a 330b 	mla	r3, sl, fp, r3
 8012a9c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012aa0:	f8d9 7000 	ldr.w	r7, [r9]
 8012aa4:	4463      	add	r3, ip
 8012aa6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012aaa:	fb0a c70b 	mla	r7, sl, fp, ip
 8012aae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012ab2:	b29b      	uxth	r3, r3
 8012ab4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012ab8:	4572      	cmp	r2, lr
 8012aba:	f849 3b04 	str.w	r3, [r9], #4
 8012abe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012ac2:	d8e2      	bhi.n	8012a8a <__multiply+0xb2>
 8012ac4:	9b01      	ldr	r3, [sp, #4]
 8012ac6:	f845 c003 	str.w	ip, [r5, r3]
 8012aca:	9b03      	ldr	r3, [sp, #12]
 8012acc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012ad0:	3104      	adds	r1, #4
 8012ad2:	f1b9 0f00 	cmp.w	r9, #0
 8012ad6:	d021      	beq.n	8012b1c <__multiply+0x144>
 8012ad8:	682b      	ldr	r3, [r5, #0]
 8012ada:	f104 0c14 	add.w	ip, r4, #20
 8012ade:	46ae      	mov	lr, r5
 8012ae0:	f04f 0a00 	mov.w	sl, #0
 8012ae4:	f8bc b000 	ldrh.w	fp, [ip]
 8012ae8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012aec:	fb09 770b 	mla	r7, r9, fp, r7
 8012af0:	4457      	add	r7, sl
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012af8:	f84e 3b04 	str.w	r3, [lr], #4
 8012afc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012b00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012b04:	f8be 3000 	ldrh.w	r3, [lr]
 8012b08:	fb09 330a 	mla	r3, r9, sl, r3
 8012b0c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012b10:	4562      	cmp	r2, ip
 8012b12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012b16:	d8e5      	bhi.n	8012ae4 <__multiply+0x10c>
 8012b18:	9f01      	ldr	r7, [sp, #4]
 8012b1a:	51eb      	str	r3, [r5, r7]
 8012b1c:	3504      	adds	r5, #4
 8012b1e:	e799      	b.n	8012a54 <__multiply+0x7c>
 8012b20:	3e01      	subs	r6, #1
 8012b22:	e79b      	b.n	8012a5c <__multiply+0x84>
 8012b24:	08016fab 	.word	0x08016fab
 8012b28:	08016fbc 	.word	0x08016fbc

08012b2c <__pow5mult>:
 8012b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b30:	4615      	mov	r5, r2
 8012b32:	f012 0203 	ands.w	r2, r2, #3
 8012b36:	4607      	mov	r7, r0
 8012b38:	460e      	mov	r6, r1
 8012b3a:	d007      	beq.n	8012b4c <__pow5mult+0x20>
 8012b3c:	4c25      	ldr	r4, [pc, #148]	@ (8012bd4 <__pow5mult+0xa8>)
 8012b3e:	3a01      	subs	r2, #1
 8012b40:	2300      	movs	r3, #0
 8012b42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b46:	f7ff fe55 	bl	80127f4 <__multadd>
 8012b4a:	4606      	mov	r6, r0
 8012b4c:	10ad      	asrs	r5, r5, #2
 8012b4e:	d03d      	beq.n	8012bcc <__pow5mult+0xa0>
 8012b50:	69fc      	ldr	r4, [r7, #28]
 8012b52:	b97c      	cbnz	r4, 8012b74 <__pow5mult+0x48>
 8012b54:	2010      	movs	r0, #16
 8012b56:	f7ff fd35 	bl	80125c4 <malloc>
 8012b5a:	4602      	mov	r2, r0
 8012b5c:	61f8      	str	r0, [r7, #28]
 8012b5e:	b928      	cbnz	r0, 8012b6c <__pow5mult+0x40>
 8012b60:	4b1d      	ldr	r3, [pc, #116]	@ (8012bd8 <__pow5mult+0xac>)
 8012b62:	481e      	ldr	r0, [pc, #120]	@ (8012bdc <__pow5mult+0xb0>)
 8012b64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012b68:	f001 fede 	bl	8014928 <__assert_func>
 8012b6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012b70:	6004      	str	r4, [r0, #0]
 8012b72:	60c4      	str	r4, [r0, #12]
 8012b74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012b78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012b7c:	b94c      	cbnz	r4, 8012b92 <__pow5mult+0x66>
 8012b7e:	f240 2171 	movw	r1, #625	@ 0x271
 8012b82:	4638      	mov	r0, r7
 8012b84:	f7ff ff12 	bl	80129ac <__i2b>
 8012b88:	2300      	movs	r3, #0
 8012b8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8012b8e:	4604      	mov	r4, r0
 8012b90:	6003      	str	r3, [r0, #0]
 8012b92:	f04f 0900 	mov.w	r9, #0
 8012b96:	07eb      	lsls	r3, r5, #31
 8012b98:	d50a      	bpl.n	8012bb0 <__pow5mult+0x84>
 8012b9a:	4631      	mov	r1, r6
 8012b9c:	4622      	mov	r2, r4
 8012b9e:	4638      	mov	r0, r7
 8012ba0:	f7ff ff1a 	bl	80129d8 <__multiply>
 8012ba4:	4631      	mov	r1, r6
 8012ba6:	4680      	mov	r8, r0
 8012ba8:	4638      	mov	r0, r7
 8012baa:	f7ff fe01 	bl	80127b0 <_Bfree>
 8012bae:	4646      	mov	r6, r8
 8012bb0:	106d      	asrs	r5, r5, #1
 8012bb2:	d00b      	beq.n	8012bcc <__pow5mult+0xa0>
 8012bb4:	6820      	ldr	r0, [r4, #0]
 8012bb6:	b938      	cbnz	r0, 8012bc8 <__pow5mult+0x9c>
 8012bb8:	4622      	mov	r2, r4
 8012bba:	4621      	mov	r1, r4
 8012bbc:	4638      	mov	r0, r7
 8012bbe:	f7ff ff0b 	bl	80129d8 <__multiply>
 8012bc2:	6020      	str	r0, [r4, #0]
 8012bc4:	f8c0 9000 	str.w	r9, [r0]
 8012bc8:	4604      	mov	r4, r0
 8012bca:	e7e4      	b.n	8012b96 <__pow5mult+0x6a>
 8012bcc:	4630      	mov	r0, r6
 8012bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bd2:	bf00      	nop
 8012bd4:	08017018 	.word	0x08017018
 8012bd8:	08016f3c 	.word	0x08016f3c
 8012bdc:	08016fbc 	.word	0x08016fbc

08012be0 <__lshift>:
 8012be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012be4:	460c      	mov	r4, r1
 8012be6:	6849      	ldr	r1, [r1, #4]
 8012be8:	6923      	ldr	r3, [r4, #16]
 8012bea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012bee:	68a3      	ldr	r3, [r4, #8]
 8012bf0:	4607      	mov	r7, r0
 8012bf2:	4691      	mov	r9, r2
 8012bf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012bf8:	f108 0601 	add.w	r6, r8, #1
 8012bfc:	42b3      	cmp	r3, r6
 8012bfe:	db0b      	blt.n	8012c18 <__lshift+0x38>
 8012c00:	4638      	mov	r0, r7
 8012c02:	f7ff fd95 	bl	8012730 <_Balloc>
 8012c06:	4605      	mov	r5, r0
 8012c08:	b948      	cbnz	r0, 8012c1e <__lshift+0x3e>
 8012c0a:	4602      	mov	r2, r0
 8012c0c:	4b28      	ldr	r3, [pc, #160]	@ (8012cb0 <__lshift+0xd0>)
 8012c0e:	4829      	ldr	r0, [pc, #164]	@ (8012cb4 <__lshift+0xd4>)
 8012c10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012c14:	f001 fe88 	bl	8014928 <__assert_func>
 8012c18:	3101      	adds	r1, #1
 8012c1a:	005b      	lsls	r3, r3, #1
 8012c1c:	e7ee      	b.n	8012bfc <__lshift+0x1c>
 8012c1e:	2300      	movs	r3, #0
 8012c20:	f100 0114 	add.w	r1, r0, #20
 8012c24:	f100 0210 	add.w	r2, r0, #16
 8012c28:	4618      	mov	r0, r3
 8012c2a:	4553      	cmp	r3, sl
 8012c2c:	db33      	blt.n	8012c96 <__lshift+0xb6>
 8012c2e:	6920      	ldr	r0, [r4, #16]
 8012c30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012c34:	f104 0314 	add.w	r3, r4, #20
 8012c38:	f019 091f 	ands.w	r9, r9, #31
 8012c3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012c40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012c44:	d02b      	beq.n	8012c9e <__lshift+0xbe>
 8012c46:	f1c9 0e20 	rsb	lr, r9, #32
 8012c4a:	468a      	mov	sl, r1
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	6818      	ldr	r0, [r3, #0]
 8012c50:	fa00 f009 	lsl.w	r0, r0, r9
 8012c54:	4310      	orrs	r0, r2
 8012c56:	f84a 0b04 	str.w	r0, [sl], #4
 8012c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c5e:	459c      	cmp	ip, r3
 8012c60:	fa22 f20e 	lsr.w	r2, r2, lr
 8012c64:	d8f3      	bhi.n	8012c4e <__lshift+0x6e>
 8012c66:	ebac 0304 	sub.w	r3, ip, r4
 8012c6a:	3b15      	subs	r3, #21
 8012c6c:	f023 0303 	bic.w	r3, r3, #3
 8012c70:	3304      	adds	r3, #4
 8012c72:	f104 0015 	add.w	r0, r4, #21
 8012c76:	4584      	cmp	ip, r0
 8012c78:	bf38      	it	cc
 8012c7a:	2304      	movcc	r3, #4
 8012c7c:	50ca      	str	r2, [r1, r3]
 8012c7e:	b10a      	cbz	r2, 8012c84 <__lshift+0xa4>
 8012c80:	f108 0602 	add.w	r6, r8, #2
 8012c84:	3e01      	subs	r6, #1
 8012c86:	4638      	mov	r0, r7
 8012c88:	612e      	str	r6, [r5, #16]
 8012c8a:	4621      	mov	r1, r4
 8012c8c:	f7ff fd90 	bl	80127b0 <_Bfree>
 8012c90:	4628      	mov	r0, r5
 8012c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c96:	f842 0f04 	str.w	r0, [r2, #4]!
 8012c9a:	3301      	adds	r3, #1
 8012c9c:	e7c5      	b.n	8012c2a <__lshift+0x4a>
 8012c9e:	3904      	subs	r1, #4
 8012ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ca4:	f841 2f04 	str.w	r2, [r1, #4]!
 8012ca8:	459c      	cmp	ip, r3
 8012caa:	d8f9      	bhi.n	8012ca0 <__lshift+0xc0>
 8012cac:	e7ea      	b.n	8012c84 <__lshift+0xa4>
 8012cae:	bf00      	nop
 8012cb0:	08016fab 	.word	0x08016fab
 8012cb4:	08016fbc 	.word	0x08016fbc

08012cb8 <__mcmp>:
 8012cb8:	690a      	ldr	r2, [r1, #16]
 8012cba:	4603      	mov	r3, r0
 8012cbc:	6900      	ldr	r0, [r0, #16]
 8012cbe:	1a80      	subs	r0, r0, r2
 8012cc0:	b530      	push	{r4, r5, lr}
 8012cc2:	d10e      	bne.n	8012ce2 <__mcmp+0x2a>
 8012cc4:	3314      	adds	r3, #20
 8012cc6:	3114      	adds	r1, #20
 8012cc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012ccc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012cd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012cd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012cd8:	4295      	cmp	r5, r2
 8012cda:	d003      	beq.n	8012ce4 <__mcmp+0x2c>
 8012cdc:	d205      	bcs.n	8012cea <__mcmp+0x32>
 8012cde:	f04f 30ff 	mov.w	r0, #4294967295
 8012ce2:	bd30      	pop	{r4, r5, pc}
 8012ce4:	42a3      	cmp	r3, r4
 8012ce6:	d3f3      	bcc.n	8012cd0 <__mcmp+0x18>
 8012ce8:	e7fb      	b.n	8012ce2 <__mcmp+0x2a>
 8012cea:	2001      	movs	r0, #1
 8012cec:	e7f9      	b.n	8012ce2 <__mcmp+0x2a>
	...

08012cf0 <__mdiff>:
 8012cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cf4:	4689      	mov	r9, r1
 8012cf6:	4606      	mov	r6, r0
 8012cf8:	4611      	mov	r1, r2
 8012cfa:	4648      	mov	r0, r9
 8012cfc:	4614      	mov	r4, r2
 8012cfe:	f7ff ffdb 	bl	8012cb8 <__mcmp>
 8012d02:	1e05      	subs	r5, r0, #0
 8012d04:	d112      	bne.n	8012d2c <__mdiff+0x3c>
 8012d06:	4629      	mov	r1, r5
 8012d08:	4630      	mov	r0, r6
 8012d0a:	f7ff fd11 	bl	8012730 <_Balloc>
 8012d0e:	4602      	mov	r2, r0
 8012d10:	b928      	cbnz	r0, 8012d1e <__mdiff+0x2e>
 8012d12:	4b3f      	ldr	r3, [pc, #252]	@ (8012e10 <__mdiff+0x120>)
 8012d14:	f240 2137 	movw	r1, #567	@ 0x237
 8012d18:	483e      	ldr	r0, [pc, #248]	@ (8012e14 <__mdiff+0x124>)
 8012d1a:	f001 fe05 	bl	8014928 <__assert_func>
 8012d1e:	2301      	movs	r3, #1
 8012d20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012d24:	4610      	mov	r0, r2
 8012d26:	b003      	add	sp, #12
 8012d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d2c:	bfbc      	itt	lt
 8012d2e:	464b      	movlt	r3, r9
 8012d30:	46a1      	movlt	r9, r4
 8012d32:	4630      	mov	r0, r6
 8012d34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012d38:	bfba      	itte	lt
 8012d3a:	461c      	movlt	r4, r3
 8012d3c:	2501      	movlt	r5, #1
 8012d3e:	2500      	movge	r5, #0
 8012d40:	f7ff fcf6 	bl	8012730 <_Balloc>
 8012d44:	4602      	mov	r2, r0
 8012d46:	b918      	cbnz	r0, 8012d50 <__mdiff+0x60>
 8012d48:	4b31      	ldr	r3, [pc, #196]	@ (8012e10 <__mdiff+0x120>)
 8012d4a:	f240 2145 	movw	r1, #581	@ 0x245
 8012d4e:	e7e3      	b.n	8012d18 <__mdiff+0x28>
 8012d50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012d54:	6926      	ldr	r6, [r4, #16]
 8012d56:	60c5      	str	r5, [r0, #12]
 8012d58:	f109 0310 	add.w	r3, r9, #16
 8012d5c:	f109 0514 	add.w	r5, r9, #20
 8012d60:	f104 0e14 	add.w	lr, r4, #20
 8012d64:	f100 0b14 	add.w	fp, r0, #20
 8012d68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012d6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012d70:	9301      	str	r3, [sp, #4]
 8012d72:	46d9      	mov	r9, fp
 8012d74:	f04f 0c00 	mov.w	ip, #0
 8012d78:	9b01      	ldr	r3, [sp, #4]
 8012d7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012d7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012d82:	9301      	str	r3, [sp, #4]
 8012d84:	fa1f f38a 	uxth.w	r3, sl
 8012d88:	4619      	mov	r1, r3
 8012d8a:	b283      	uxth	r3, r0
 8012d8c:	1acb      	subs	r3, r1, r3
 8012d8e:	0c00      	lsrs	r0, r0, #16
 8012d90:	4463      	add	r3, ip
 8012d92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012d96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012d9a:	b29b      	uxth	r3, r3
 8012d9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012da0:	4576      	cmp	r6, lr
 8012da2:	f849 3b04 	str.w	r3, [r9], #4
 8012da6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012daa:	d8e5      	bhi.n	8012d78 <__mdiff+0x88>
 8012dac:	1b33      	subs	r3, r6, r4
 8012dae:	3b15      	subs	r3, #21
 8012db0:	f023 0303 	bic.w	r3, r3, #3
 8012db4:	3415      	adds	r4, #21
 8012db6:	3304      	adds	r3, #4
 8012db8:	42a6      	cmp	r6, r4
 8012dba:	bf38      	it	cc
 8012dbc:	2304      	movcc	r3, #4
 8012dbe:	441d      	add	r5, r3
 8012dc0:	445b      	add	r3, fp
 8012dc2:	461e      	mov	r6, r3
 8012dc4:	462c      	mov	r4, r5
 8012dc6:	4544      	cmp	r4, r8
 8012dc8:	d30e      	bcc.n	8012de8 <__mdiff+0xf8>
 8012dca:	f108 0103 	add.w	r1, r8, #3
 8012dce:	1b49      	subs	r1, r1, r5
 8012dd0:	f021 0103 	bic.w	r1, r1, #3
 8012dd4:	3d03      	subs	r5, #3
 8012dd6:	45a8      	cmp	r8, r5
 8012dd8:	bf38      	it	cc
 8012dda:	2100      	movcc	r1, #0
 8012ddc:	440b      	add	r3, r1
 8012dde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012de2:	b191      	cbz	r1, 8012e0a <__mdiff+0x11a>
 8012de4:	6117      	str	r7, [r2, #16]
 8012de6:	e79d      	b.n	8012d24 <__mdiff+0x34>
 8012de8:	f854 1b04 	ldr.w	r1, [r4], #4
 8012dec:	46e6      	mov	lr, ip
 8012dee:	0c08      	lsrs	r0, r1, #16
 8012df0:	fa1c fc81 	uxtah	ip, ip, r1
 8012df4:	4471      	add	r1, lr
 8012df6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012dfa:	b289      	uxth	r1, r1
 8012dfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012e00:	f846 1b04 	str.w	r1, [r6], #4
 8012e04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012e08:	e7dd      	b.n	8012dc6 <__mdiff+0xd6>
 8012e0a:	3f01      	subs	r7, #1
 8012e0c:	e7e7      	b.n	8012dde <__mdiff+0xee>
 8012e0e:	bf00      	nop
 8012e10:	08016fab 	.word	0x08016fab
 8012e14:	08016fbc 	.word	0x08016fbc

08012e18 <__ulp>:
 8012e18:	b082      	sub	sp, #8
 8012e1a:	ed8d 0b00 	vstr	d0, [sp]
 8012e1e:	9a01      	ldr	r2, [sp, #4]
 8012e20:	4b0f      	ldr	r3, [pc, #60]	@ (8012e60 <__ulp+0x48>)
 8012e22:	4013      	ands	r3, r2
 8012e24:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	dc08      	bgt.n	8012e3e <__ulp+0x26>
 8012e2c:	425b      	negs	r3, r3
 8012e2e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012e32:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012e36:	da04      	bge.n	8012e42 <__ulp+0x2a>
 8012e38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012e3c:	4113      	asrs	r3, r2
 8012e3e:	2200      	movs	r2, #0
 8012e40:	e008      	b.n	8012e54 <__ulp+0x3c>
 8012e42:	f1a2 0314 	sub.w	r3, r2, #20
 8012e46:	2b1e      	cmp	r3, #30
 8012e48:	bfda      	itte	le
 8012e4a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012e4e:	40da      	lsrle	r2, r3
 8012e50:	2201      	movgt	r2, #1
 8012e52:	2300      	movs	r3, #0
 8012e54:	4619      	mov	r1, r3
 8012e56:	4610      	mov	r0, r2
 8012e58:	ec41 0b10 	vmov	d0, r0, r1
 8012e5c:	b002      	add	sp, #8
 8012e5e:	4770      	bx	lr
 8012e60:	7ff00000 	.word	0x7ff00000

08012e64 <__b2d>:
 8012e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e68:	6906      	ldr	r6, [r0, #16]
 8012e6a:	f100 0814 	add.w	r8, r0, #20
 8012e6e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012e72:	1f37      	subs	r7, r6, #4
 8012e74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012e78:	4610      	mov	r0, r2
 8012e7a:	f7ff fd4b 	bl	8012914 <__hi0bits>
 8012e7e:	f1c0 0320 	rsb	r3, r0, #32
 8012e82:	280a      	cmp	r0, #10
 8012e84:	600b      	str	r3, [r1, #0]
 8012e86:	491b      	ldr	r1, [pc, #108]	@ (8012ef4 <__b2d+0x90>)
 8012e88:	dc15      	bgt.n	8012eb6 <__b2d+0x52>
 8012e8a:	f1c0 0c0b 	rsb	ip, r0, #11
 8012e8e:	fa22 f30c 	lsr.w	r3, r2, ip
 8012e92:	45b8      	cmp	r8, r7
 8012e94:	ea43 0501 	orr.w	r5, r3, r1
 8012e98:	bf34      	ite	cc
 8012e9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012e9e:	2300      	movcs	r3, #0
 8012ea0:	3015      	adds	r0, #21
 8012ea2:	fa02 f000 	lsl.w	r0, r2, r0
 8012ea6:	fa23 f30c 	lsr.w	r3, r3, ip
 8012eaa:	4303      	orrs	r3, r0
 8012eac:	461c      	mov	r4, r3
 8012eae:	ec45 4b10 	vmov	d0, r4, r5
 8012eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eb6:	45b8      	cmp	r8, r7
 8012eb8:	bf3a      	itte	cc
 8012eba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012ebe:	f1a6 0708 	subcc.w	r7, r6, #8
 8012ec2:	2300      	movcs	r3, #0
 8012ec4:	380b      	subs	r0, #11
 8012ec6:	d012      	beq.n	8012eee <__b2d+0x8a>
 8012ec8:	f1c0 0120 	rsb	r1, r0, #32
 8012ecc:	fa23 f401 	lsr.w	r4, r3, r1
 8012ed0:	4082      	lsls	r2, r0
 8012ed2:	4322      	orrs	r2, r4
 8012ed4:	4547      	cmp	r7, r8
 8012ed6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012eda:	bf8c      	ite	hi
 8012edc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012ee0:	2200      	movls	r2, #0
 8012ee2:	4083      	lsls	r3, r0
 8012ee4:	40ca      	lsrs	r2, r1
 8012ee6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012eea:	4313      	orrs	r3, r2
 8012eec:	e7de      	b.n	8012eac <__b2d+0x48>
 8012eee:	ea42 0501 	orr.w	r5, r2, r1
 8012ef2:	e7db      	b.n	8012eac <__b2d+0x48>
 8012ef4:	3ff00000 	.word	0x3ff00000

08012ef8 <__d2b>:
 8012ef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012efc:	460f      	mov	r7, r1
 8012efe:	2101      	movs	r1, #1
 8012f00:	ec59 8b10 	vmov	r8, r9, d0
 8012f04:	4616      	mov	r6, r2
 8012f06:	f7ff fc13 	bl	8012730 <_Balloc>
 8012f0a:	4604      	mov	r4, r0
 8012f0c:	b930      	cbnz	r0, 8012f1c <__d2b+0x24>
 8012f0e:	4602      	mov	r2, r0
 8012f10:	4b23      	ldr	r3, [pc, #140]	@ (8012fa0 <__d2b+0xa8>)
 8012f12:	4824      	ldr	r0, [pc, #144]	@ (8012fa4 <__d2b+0xac>)
 8012f14:	f240 310f 	movw	r1, #783	@ 0x30f
 8012f18:	f001 fd06 	bl	8014928 <__assert_func>
 8012f1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012f20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012f24:	b10d      	cbz	r5, 8012f2a <__d2b+0x32>
 8012f26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012f2a:	9301      	str	r3, [sp, #4]
 8012f2c:	f1b8 0300 	subs.w	r3, r8, #0
 8012f30:	d023      	beq.n	8012f7a <__d2b+0x82>
 8012f32:	4668      	mov	r0, sp
 8012f34:	9300      	str	r3, [sp, #0]
 8012f36:	f7ff fd0c 	bl	8012952 <__lo0bits>
 8012f3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012f3e:	b1d0      	cbz	r0, 8012f76 <__d2b+0x7e>
 8012f40:	f1c0 0320 	rsb	r3, r0, #32
 8012f44:	fa02 f303 	lsl.w	r3, r2, r3
 8012f48:	430b      	orrs	r3, r1
 8012f4a:	40c2      	lsrs	r2, r0
 8012f4c:	6163      	str	r3, [r4, #20]
 8012f4e:	9201      	str	r2, [sp, #4]
 8012f50:	9b01      	ldr	r3, [sp, #4]
 8012f52:	61a3      	str	r3, [r4, #24]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	bf0c      	ite	eq
 8012f58:	2201      	moveq	r2, #1
 8012f5a:	2202      	movne	r2, #2
 8012f5c:	6122      	str	r2, [r4, #16]
 8012f5e:	b1a5      	cbz	r5, 8012f8a <__d2b+0x92>
 8012f60:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012f64:	4405      	add	r5, r0
 8012f66:	603d      	str	r5, [r7, #0]
 8012f68:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012f6c:	6030      	str	r0, [r6, #0]
 8012f6e:	4620      	mov	r0, r4
 8012f70:	b003      	add	sp, #12
 8012f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f76:	6161      	str	r1, [r4, #20]
 8012f78:	e7ea      	b.n	8012f50 <__d2b+0x58>
 8012f7a:	a801      	add	r0, sp, #4
 8012f7c:	f7ff fce9 	bl	8012952 <__lo0bits>
 8012f80:	9b01      	ldr	r3, [sp, #4]
 8012f82:	6163      	str	r3, [r4, #20]
 8012f84:	3020      	adds	r0, #32
 8012f86:	2201      	movs	r2, #1
 8012f88:	e7e8      	b.n	8012f5c <__d2b+0x64>
 8012f8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012f8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012f92:	6038      	str	r0, [r7, #0]
 8012f94:	6918      	ldr	r0, [r3, #16]
 8012f96:	f7ff fcbd 	bl	8012914 <__hi0bits>
 8012f9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012f9e:	e7e5      	b.n	8012f6c <__d2b+0x74>
 8012fa0:	08016fab 	.word	0x08016fab
 8012fa4:	08016fbc 	.word	0x08016fbc

08012fa8 <__ratio>:
 8012fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fac:	b085      	sub	sp, #20
 8012fae:	e9cd 1000 	strd	r1, r0, [sp]
 8012fb2:	a902      	add	r1, sp, #8
 8012fb4:	f7ff ff56 	bl	8012e64 <__b2d>
 8012fb8:	9800      	ldr	r0, [sp, #0]
 8012fba:	a903      	add	r1, sp, #12
 8012fbc:	ec55 4b10 	vmov	r4, r5, d0
 8012fc0:	f7ff ff50 	bl	8012e64 <__b2d>
 8012fc4:	9b01      	ldr	r3, [sp, #4]
 8012fc6:	6919      	ldr	r1, [r3, #16]
 8012fc8:	9b00      	ldr	r3, [sp, #0]
 8012fca:	691b      	ldr	r3, [r3, #16]
 8012fcc:	1ac9      	subs	r1, r1, r3
 8012fce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012fd2:	1a9b      	subs	r3, r3, r2
 8012fd4:	ec5b ab10 	vmov	sl, fp, d0
 8012fd8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	bfce      	itee	gt
 8012fe0:	462a      	movgt	r2, r5
 8012fe2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012fe6:	465a      	movle	r2, fp
 8012fe8:	462f      	mov	r7, r5
 8012fea:	46d9      	mov	r9, fp
 8012fec:	bfcc      	ite	gt
 8012fee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012ff2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012ff6:	464b      	mov	r3, r9
 8012ff8:	4652      	mov	r2, sl
 8012ffa:	4620      	mov	r0, r4
 8012ffc:	4639      	mov	r1, r7
 8012ffe:	f7ed fc4d 	bl	800089c <__aeabi_ddiv>
 8013002:	ec41 0b10 	vmov	d0, r0, r1
 8013006:	b005      	add	sp, #20
 8013008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801300c <__copybits>:
 801300c:	3901      	subs	r1, #1
 801300e:	b570      	push	{r4, r5, r6, lr}
 8013010:	1149      	asrs	r1, r1, #5
 8013012:	6914      	ldr	r4, [r2, #16]
 8013014:	3101      	adds	r1, #1
 8013016:	f102 0314 	add.w	r3, r2, #20
 801301a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801301e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013022:	1f05      	subs	r5, r0, #4
 8013024:	42a3      	cmp	r3, r4
 8013026:	d30c      	bcc.n	8013042 <__copybits+0x36>
 8013028:	1aa3      	subs	r3, r4, r2
 801302a:	3b11      	subs	r3, #17
 801302c:	f023 0303 	bic.w	r3, r3, #3
 8013030:	3211      	adds	r2, #17
 8013032:	42a2      	cmp	r2, r4
 8013034:	bf88      	it	hi
 8013036:	2300      	movhi	r3, #0
 8013038:	4418      	add	r0, r3
 801303a:	2300      	movs	r3, #0
 801303c:	4288      	cmp	r0, r1
 801303e:	d305      	bcc.n	801304c <__copybits+0x40>
 8013040:	bd70      	pop	{r4, r5, r6, pc}
 8013042:	f853 6b04 	ldr.w	r6, [r3], #4
 8013046:	f845 6f04 	str.w	r6, [r5, #4]!
 801304a:	e7eb      	b.n	8013024 <__copybits+0x18>
 801304c:	f840 3b04 	str.w	r3, [r0], #4
 8013050:	e7f4      	b.n	801303c <__copybits+0x30>

08013052 <__any_on>:
 8013052:	f100 0214 	add.w	r2, r0, #20
 8013056:	6900      	ldr	r0, [r0, #16]
 8013058:	114b      	asrs	r3, r1, #5
 801305a:	4298      	cmp	r0, r3
 801305c:	b510      	push	{r4, lr}
 801305e:	db11      	blt.n	8013084 <__any_on+0x32>
 8013060:	dd0a      	ble.n	8013078 <__any_on+0x26>
 8013062:	f011 011f 	ands.w	r1, r1, #31
 8013066:	d007      	beq.n	8013078 <__any_on+0x26>
 8013068:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801306c:	fa24 f001 	lsr.w	r0, r4, r1
 8013070:	fa00 f101 	lsl.w	r1, r0, r1
 8013074:	428c      	cmp	r4, r1
 8013076:	d10b      	bne.n	8013090 <__any_on+0x3e>
 8013078:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801307c:	4293      	cmp	r3, r2
 801307e:	d803      	bhi.n	8013088 <__any_on+0x36>
 8013080:	2000      	movs	r0, #0
 8013082:	bd10      	pop	{r4, pc}
 8013084:	4603      	mov	r3, r0
 8013086:	e7f7      	b.n	8013078 <__any_on+0x26>
 8013088:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801308c:	2900      	cmp	r1, #0
 801308e:	d0f5      	beq.n	801307c <__any_on+0x2a>
 8013090:	2001      	movs	r0, #1
 8013092:	e7f6      	b.n	8013082 <__any_on+0x30>

08013094 <sulp>:
 8013094:	b570      	push	{r4, r5, r6, lr}
 8013096:	4604      	mov	r4, r0
 8013098:	460d      	mov	r5, r1
 801309a:	ec45 4b10 	vmov	d0, r4, r5
 801309e:	4616      	mov	r6, r2
 80130a0:	f7ff feba 	bl	8012e18 <__ulp>
 80130a4:	ec51 0b10 	vmov	r0, r1, d0
 80130a8:	b17e      	cbz	r6, 80130ca <sulp+0x36>
 80130aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80130ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	dd09      	ble.n	80130ca <sulp+0x36>
 80130b6:	051b      	lsls	r3, r3, #20
 80130b8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80130bc:	2400      	movs	r4, #0
 80130be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80130c2:	4622      	mov	r2, r4
 80130c4:	462b      	mov	r3, r5
 80130c6:	f7ed fabf 	bl	8000648 <__aeabi_dmul>
 80130ca:	ec41 0b10 	vmov	d0, r0, r1
 80130ce:	bd70      	pop	{r4, r5, r6, pc}

080130d0 <_strtod_l>:
 80130d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130d4:	b09f      	sub	sp, #124	@ 0x7c
 80130d6:	460c      	mov	r4, r1
 80130d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80130da:	2200      	movs	r2, #0
 80130dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80130de:	9005      	str	r0, [sp, #20]
 80130e0:	f04f 0a00 	mov.w	sl, #0
 80130e4:	f04f 0b00 	mov.w	fp, #0
 80130e8:	460a      	mov	r2, r1
 80130ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80130ec:	7811      	ldrb	r1, [r2, #0]
 80130ee:	292b      	cmp	r1, #43	@ 0x2b
 80130f0:	d04a      	beq.n	8013188 <_strtod_l+0xb8>
 80130f2:	d838      	bhi.n	8013166 <_strtod_l+0x96>
 80130f4:	290d      	cmp	r1, #13
 80130f6:	d832      	bhi.n	801315e <_strtod_l+0x8e>
 80130f8:	2908      	cmp	r1, #8
 80130fa:	d832      	bhi.n	8013162 <_strtod_l+0x92>
 80130fc:	2900      	cmp	r1, #0
 80130fe:	d03b      	beq.n	8013178 <_strtod_l+0xa8>
 8013100:	2200      	movs	r2, #0
 8013102:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013104:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8013106:	782a      	ldrb	r2, [r5, #0]
 8013108:	2a30      	cmp	r2, #48	@ 0x30
 801310a:	f040 80b3 	bne.w	8013274 <_strtod_l+0x1a4>
 801310e:	786a      	ldrb	r2, [r5, #1]
 8013110:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013114:	2a58      	cmp	r2, #88	@ 0x58
 8013116:	d16e      	bne.n	80131f6 <_strtod_l+0x126>
 8013118:	9302      	str	r3, [sp, #8]
 801311a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801311c:	9301      	str	r3, [sp, #4]
 801311e:	ab1a      	add	r3, sp, #104	@ 0x68
 8013120:	9300      	str	r3, [sp, #0]
 8013122:	4a8e      	ldr	r2, [pc, #568]	@ (801335c <_strtod_l+0x28c>)
 8013124:	9805      	ldr	r0, [sp, #20]
 8013126:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013128:	a919      	add	r1, sp, #100	@ 0x64
 801312a:	f001 fc97 	bl	8014a5c <__gethex>
 801312e:	f010 060f 	ands.w	r6, r0, #15
 8013132:	4604      	mov	r4, r0
 8013134:	d005      	beq.n	8013142 <_strtod_l+0x72>
 8013136:	2e06      	cmp	r6, #6
 8013138:	d128      	bne.n	801318c <_strtod_l+0xbc>
 801313a:	3501      	adds	r5, #1
 801313c:	2300      	movs	r3, #0
 801313e:	9519      	str	r5, [sp, #100]	@ 0x64
 8013140:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013142:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013144:	2b00      	cmp	r3, #0
 8013146:	f040 858e 	bne.w	8013c66 <_strtod_l+0xb96>
 801314a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801314c:	b1cb      	cbz	r3, 8013182 <_strtod_l+0xb2>
 801314e:	4652      	mov	r2, sl
 8013150:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8013154:	ec43 2b10 	vmov	d0, r2, r3
 8013158:	b01f      	add	sp, #124	@ 0x7c
 801315a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801315e:	2920      	cmp	r1, #32
 8013160:	d1ce      	bne.n	8013100 <_strtod_l+0x30>
 8013162:	3201      	adds	r2, #1
 8013164:	e7c1      	b.n	80130ea <_strtod_l+0x1a>
 8013166:	292d      	cmp	r1, #45	@ 0x2d
 8013168:	d1ca      	bne.n	8013100 <_strtod_l+0x30>
 801316a:	2101      	movs	r1, #1
 801316c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801316e:	1c51      	adds	r1, r2, #1
 8013170:	9119      	str	r1, [sp, #100]	@ 0x64
 8013172:	7852      	ldrb	r2, [r2, #1]
 8013174:	2a00      	cmp	r2, #0
 8013176:	d1c5      	bne.n	8013104 <_strtod_l+0x34>
 8013178:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801317a:	9419      	str	r4, [sp, #100]	@ 0x64
 801317c:	2b00      	cmp	r3, #0
 801317e:	f040 8570 	bne.w	8013c62 <_strtod_l+0xb92>
 8013182:	4652      	mov	r2, sl
 8013184:	465b      	mov	r3, fp
 8013186:	e7e5      	b.n	8013154 <_strtod_l+0x84>
 8013188:	2100      	movs	r1, #0
 801318a:	e7ef      	b.n	801316c <_strtod_l+0x9c>
 801318c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801318e:	b13a      	cbz	r2, 80131a0 <_strtod_l+0xd0>
 8013190:	2135      	movs	r1, #53	@ 0x35
 8013192:	a81c      	add	r0, sp, #112	@ 0x70
 8013194:	f7ff ff3a 	bl	801300c <__copybits>
 8013198:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801319a:	9805      	ldr	r0, [sp, #20]
 801319c:	f7ff fb08 	bl	80127b0 <_Bfree>
 80131a0:	3e01      	subs	r6, #1
 80131a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80131a4:	2e04      	cmp	r6, #4
 80131a6:	d806      	bhi.n	80131b6 <_strtod_l+0xe6>
 80131a8:	e8df f006 	tbb	[pc, r6]
 80131ac:	201d0314 	.word	0x201d0314
 80131b0:	14          	.byte	0x14
 80131b1:	00          	.byte	0x00
 80131b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80131b6:	05e1      	lsls	r1, r4, #23
 80131b8:	bf48      	it	mi
 80131ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80131be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80131c2:	0d1b      	lsrs	r3, r3, #20
 80131c4:	051b      	lsls	r3, r3, #20
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d1bb      	bne.n	8013142 <_strtod_l+0x72>
 80131ca:	f7fe fb21 	bl	8011810 <__errno>
 80131ce:	2322      	movs	r3, #34	@ 0x22
 80131d0:	6003      	str	r3, [r0, #0]
 80131d2:	e7b6      	b.n	8013142 <_strtod_l+0x72>
 80131d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80131d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80131dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80131e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80131e4:	e7e7      	b.n	80131b6 <_strtod_l+0xe6>
 80131e6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8013364 <_strtod_l+0x294>
 80131ea:	e7e4      	b.n	80131b6 <_strtod_l+0xe6>
 80131ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80131f0:	f04f 3aff 	mov.w	sl, #4294967295
 80131f4:	e7df      	b.n	80131b6 <_strtod_l+0xe6>
 80131f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80131f8:	1c5a      	adds	r2, r3, #1
 80131fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80131fc:	785b      	ldrb	r3, [r3, #1]
 80131fe:	2b30      	cmp	r3, #48	@ 0x30
 8013200:	d0f9      	beq.n	80131f6 <_strtod_l+0x126>
 8013202:	2b00      	cmp	r3, #0
 8013204:	d09d      	beq.n	8013142 <_strtod_l+0x72>
 8013206:	2301      	movs	r3, #1
 8013208:	9309      	str	r3, [sp, #36]	@ 0x24
 801320a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801320c:	930c      	str	r3, [sp, #48]	@ 0x30
 801320e:	2300      	movs	r3, #0
 8013210:	9308      	str	r3, [sp, #32]
 8013212:	930a      	str	r3, [sp, #40]	@ 0x28
 8013214:	461f      	mov	r7, r3
 8013216:	220a      	movs	r2, #10
 8013218:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801321a:	7805      	ldrb	r5, [r0, #0]
 801321c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013220:	b2d9      	uxtb	r1, r3
 8013222:	2909      	cmp	r1, #9
 8013224:	d928      	bls.n	8013278 <_strtod_l+0x1a8>
 8013226:	494e      	ldr	r1, [pc, #312]	@ (8013360 <_strtod_l+0x290>)
 8013228:	2201      	movs	r2, #1
 801322a:	f7fe fa94 	bl	8011756 <strncmp>
 801322e:	2800      	cmp	r0, #0
 8013230:	d032      	beq.n	8013298 <_strtod_l+0x1c8>
 8013232:	2000      	movs	r0, #0
 8013234:	462a      	mov	r2, r5
 8013236:	4681      	mov	r9, r0
 8013238:	463d      	mov	r5, r7
 801323a:	4603      	mov	r3, r0
 801323c:	2a65      	cmp	r2, #101	@ 0x65
 801323e:	d001      	beq.n	8013244 <_strtod_l+0x174>
 8013240:	2a45      	cmp	r2, #69	@ 0x45
 8013242:	d114      	bne.n	801326e <_strtod_l+0x19e>
 8013244:	b91d      	cbnz	r5, 801324e <_strtod_l+0x17e>
 8013246:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013248:	4302      	orrs	r2, r0
 801324a:	d095      	beq.n	8013178 <_strtod_l+0xa8>
 801324c:	2500      	movs	r5, #0
 801324e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013250:	1c62      	adds	r2, r4, #1
 8013252:	9219      	str	r2, [sp, #100]	@ 0x64
 8013254:	7862      	ldrb	r2, [r4, #1]
 8013256:	2a2b      	cmp	r2, #43	@ 0x2b
 8013258:	d077      	beq.n	801334a <_strtod_l+0x27a>
 801325a:	2a2d      	cmp	r2, #45	@ 0x2d
 801325c:	d07b      	beq.n	8013356 <_strtod_l+0x286>
 801325e:	f04f 0c00 	mov.w	ip, #0
 8013262:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013266:	2909      	cmp	r1, #9
 8013268:	f240 8082 	bls.w	8013370 <_strtod_l+0x2a0>
 801326c:	9419      	str	r4, [sp, #100]	@ 0x64
 801326e:	f04f 0800 	mov.w	r8, #0
 8013272:	e0a2      	b.n	80133ba <_strtod_l+0x2ea>
 8013274:	2300      	movs	r3, #0
 8013276:	e7c7      	b.n	8013208 <_strtod_l+0x138>
 8013278:	2f08      	cmp	r7, #8
 801327a:	bfd5      	itete	le
 801327c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801327e:	9908      	ldrgt	r1, [sp, #32]
 8013280:	fb02 3301 	mlale	r3, r2, r1, r3
 8013284:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013288:	f100 0001 	add.w	r0, r0, #1
 801328c:	bfd4      	ite	le
 801328e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8013290:	9308      	strgt	r3, [sp, #32]
 8013292:	3701      	adds	r7, #1
 8013294:	9019      	str	r0, [sp, #100]	@ 0x64
 8013296:	e7bf      	b.n	8013218 <_strtod_l+0x148>
 8013298:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801329a:	1c5a      	adds	r2, r3, #1
 801329c:	9219      	str	r2, [sp, #100]	@ 0x64
 801329e:	785a      	ldrb	r2, [r3, #1]
 80132a0:	b37f      	cbz	r7, 8013302 <_strtod_l+0x232>
 80132a2:	4681      	mov	r9, r0
 80132a4:	463d      	mov	r5, r7
 80132a6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80132aa:	2b09      	cmp	r3, #9
 80132ac:	d912      	bls.n	80132d4 <_strtod_l+0x204>
 80132ae:	2301      	movs	r3, #1
 80132b0:	e7c4      	b.n	801323c <_strtod_l+0x16c>
 80132b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132b4:	1c5a      	adds	r2, r3, #1
 80132b6:	9219      	str	r2, [sp, #100]	@ 0x64
 80132b8:	785a      	ldrb	r2, [r3, #1]
 80132ba:	3001      	adds	r0, #1
 80132bc:	2a30      	cmp	r2, #48	@ 0x30
 80132be:	d0f8      	beq.n	80132b2 <_strtod_l+0x1e2>
 80132c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80132c4:	2b08      	cmp	r3, #8
 80132c6:	f200 84d3 	bhi.w	8013c70 <_strtod_l+0xba0>
 80132ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80132ce:	4681      	mov	r9, r0
 80132d0:	2000      	movs	r0, #0
 80132d2:	4605      	mov	r5, r0
 80132d4:	3a30      	subs	r2, #48	@ 0x30
 80132d6:	f100 0301 	add.w	r3, r0, #1
 80132da:	d02a      	beq.n	8013332 <_strtod_l+0x262>
 80132dc:	4499      	add	r9, r3
 80132de:	eb00 0c05 	add.w	ip, r0, r5
 80132e2:	462b      	mov	r3, r5
 80132e4:	210a      	movs	r1, #10
 80132e6:	4563      	cmp	r3, ip
 80132e8:	d10d      	bne.n	8013306 <_strtod_l+0x236>
 80132ea:	1c69      	adds	r1, r5, #1
 80132ec:	4401      	add	r1, r0
 80132ee:	4428      	add	r0, r5
 80132f0:	2808      	cmp	r0, #8
 80132f2:	dc16      	bgt.n	8013322 <_strtod_l+0x252>
 80132f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80132f6:	230a      	movs	r3, #10
 80132f8:	fb03 2300 	mla	r3, r3, r0, r2
 80132fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80132fe:	2300      	movs	r3, #0
 8013300:	e018      	b.n	8013334 <_strtod_l+0x264>
 8013302:	4638      	mov	r0, r7
 8013304:	e7da      	b.n	80132bc <_strtod_l+0x1ec>
 8013306:	2b08      	cmp	r3, #8
 8013308:	f103 0301 	add.w	r3, r3, #1
 801330c:	dc03      	bgt.n	8013316 <_strtod_l+0x246>
 801330e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013310:	434e      	muls	r6, r1
 8013312:	960a      	str	r6, [sp, #40]	@ 0x28
 8013314:	e7e7      	b.n	80132e6 <_strtod_l+0x216>
 8013316:	2b10      	cmp	r3, #16
 8013318:	bfde      	ittt	le
 801331a:	9e08      	ldrle	r6, [sp, #32]
 801331c:	434e      	mulle	r6, r1
 801331e:	9608      	strle	r6, [sp, #32]
 8013320:	e7e1      	b.n	80132e6 <_strtod_l+0x216>
 8013322:	280f      	cmp	r0, #15
 8013324:	dceb      	bgt.n	80132fe <_strtod_l+0x22e>
 8013326:	9808      	ldr	r0, [sp, #32]
 8013328:	230a      	movs	r3, #10
 801332a:	fb03 2300 	mla	r3, r3, r0, r2
 801332e:	9308      	str	r3, [sp, #32]
 8013330:	e7e5      	b.n	80132fe <_strtod_l+0x22e>
 8013332:	4629      	mov	r1, r5
 8013334:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013336:	1c50      	adds	r0, r2, #1
 8013338:	9019      	str	r0, [sp, #100]	@ 0x64
 801333a:	7852      	ldrb	r2, [r2, #1]
 801333c:	4618      	mov	r0, r3
 801333e:	460d      	mov	r5, r1
 8013340:	e7b1      	b.n	80132a6 <_strtod_l+0x1d6>
 8013342:	f04f 0900 	mov.w	r9, #0
 8013346:	2301      	movs	r3, #1
 8013348:	e77d      	b.n	8013246 <_strtod_l+0x176>
 801334a:	f04f 0c00 	mov.w	ip, #0
 801334e:	1ca2      	adds	r2, r4, #2
 8013350:	9219      	str	r2, [sp, #100]	@ 0x64
 8013352:	78a2      	ldrb	r2, [r4, #2]
 8013354:	e785      	b.n	8013262 <_strtod_l+0x192>
 8013356:	f04f 0c01 	mov.w	ip, #1
 801335a:	e7f8      	b.n	801334e <_strtod_l+0x27e>
 801335c:	08017130 	.word	0x08017130
 8013360:	08017118 	.word	0x08017118
 8013364:	7ff00000 	.word	0x7ff00000
 8013368:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801336a:	1c51      	adds	r1, r2, #1
 801336c:	9119      	str	r1, [sp, #100]	@ 0x64
 801336e:	7852      	ldrb	r2, [r2, #1]
 8013370:	2a30      	cmp	r2, #48	@ 0x30
 8013372:	d0f9      	beq.n	8013368 <_strtod_l+0x298>
 8013374:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013378:	2908      	cmp	r1, #8
 801337a:	f63f af78 	bhi.w	801326e <_strtod_l+0x19e>
 801337e:	3a30      	subs	r2, #48	@ 0x30
 8013380:	920e      	str	r2, [sp, #56]	@ 0x38
 8013382:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013384:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013386:	f04f 080a 	mov.w	r8, #10
 801338a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801338c:	1c56      	adds	r6, r2, #1
 801338e:	9619      	str	r6, [sp, #100]	@ 0x64
 8013390:	7852      	ldrb	r2, [r2, #1]
 8013392:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013396:	f1be 0f09 	cmp.w	lr, #9
 801339a:	d939      	bls.n	8013410 <_strtod_l+0x340>
 801339c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801339e:	1a76      	subs	r6, r6, r1
 80133a0:	2e08      	cmp	r6, #8
 80133a2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80133a6:	dc03      	bgt.n	80133b0 <_strtod_l+0x2e0>
 80133a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80133aa:	4588      	cmp	r8, r1
 80133ac:	bfa8      	it	ge
 80133ae:	4688      	movge	r8, r1
 80133b0:	f1bc 0f00 	cmp.w	ip, #0
 80133b4:	d001      	beq.n	80133ba <_strtod_l+0x2ea>
 80133b6:	f1c8 0800 	rsb	r8, r8, #0
 80133ba:	2d00      	cmp	r5, #0
 80133bc:	d14e      	bne.n	801345c <_strtod_l+0x38c>
 80133be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80133c0:	4308      	orrs	r0, r1
 80133c2:	f47f aebe 	bne.w	8013142 <_strtod_l+0x72>
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	f47f aed6 	bne.w	8013178 <_strtod_l+0xa8>
 80133cc:	2a69      	cmp	r2, #105	@ 0x69
 80133ce:	d028      	beq.n	8013422 <_strtod_l+0x352>
 80133d0:	dc25      	bgt.n	801341e <_strtod_l+0x34e>
 80133d2:	2a49      	cmp	r2, #73	@ 0x49
 80133d4:	d025      	beq.n	8013422 <_strtod_l+0x352>
 80133d6:	2a4e      	cmp	r2, #78	@ 0x4e
 80133d8:	f47f aece 	bne.w	8013178 <_strtod_l+0xa8>
 80133dc:	499b      	ldr	r1, [pc, #620]	@ (801364c <_strtod_l+0x57c>)
 80133de:	a819      	add	r0, sp, #100	@ 0x64
 80133e0:	f001 fd5e 	bl	8014ea0 <__match>
 80133e4:	2800      	cmp	r0, #0
 80133e6:	f43f aec7 	beq.w	8013178 <_strtod_l+0xa8>
 80133ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	2b28      	cmp	r3, #40	@ 0x28
 80133f0:	d12e      	bne.n	8013450 <_strtod_l+0x380>
 80133f2:	4997      	ldr	r1, [pc, #604]	@ (8013650 <_strtod_l+0x580>)
 80133f4:	aa1c      	add	r2, sp, #112	@ 0x70
 80133f6:	a819      	add	r0, sp, #100	@ 0x64
 80133f8:	f001 fd66 	bl	8014ec8 <__hexnan>
 80133fc:	2805      	cmp	r0, #5
 80133fe:	d127      	bne.n	8013450 <_strtod_l+0x380>
 8013400:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013402:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013406:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801340a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801340e:	e698      	b.n	8013142 <_strtod_l+0x72>
 8013410:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013412:	fb08 2101 	mla	r1, r8, r1, r2
 8013416:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801341a:	920e      	str	r2, [sp, #56]	@ 0x38
 801341c:	e7b5      	b.n	801338a <_strtod_l+0x2ba>
 801341e:	2a6e      	cmp	r2, #110	@ 0x6e
 8013420:	e7da      	b.n	80133d8 <_strtod_l+0x308>
 8013422:	498c      	ldr	r1, [pc, #560]	@ (8013654 <_strtod_l+0x584>)
 8013424:	a819      	add	r0, sp, #100	@ 0x64
 8013426:	f001 fd3b 	bl	8014ea0 <__match>
 801342a:	2800      	cmp	r0, #0
 801342c:	f43f aea4 	beq.w	8013178 <_strtod_l+0xa8>
 8013430:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013432:	4989      	ldr	r1, [pc, #548]	@ (8013658 <_strtod_l+0x588>)
 8013434:	3b01      	subs	r3, #1
 8013436:	a819      	add	r0, sp, #100	@ 0x64
 8013438:	9319      	str	r3, [sp, #100]	@ 0x64
 801343a:	f001 fd31 	bl	8014ea0 <__match>
 801343e:	b910      	cbnz	r0, 8013446 <_strtod_l+0x376>
 8013440:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013442:	3301      	adds	r3, #1
 8013444:	9319      	str	r3, [sp, #100]	@ 0x64
 8013446:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8013668 <_strtod_l+0x598>
 801344a:	f04f 0a00 	mov.w	sl, #0
 801344e:	e678      	b.n	8013142 <_strtod_l+0x72>
 8013450:	4882      	ldr	r0, [pc, #520]	@ (801365c <_strtod_l+0x58c>)
 8013452:	f001 fa61 	bl	8014918 <nan>
 8013456:	ec5b ab10 	vmov	sl, fp, d0
 801345a:	e672      	b.n	8013142 <_strtod_l+0x72>
 801345c:	eba8 0309 	sub.w	r3, r8, r9
 8013460:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013462:	9309      	str	r3, [sp, #36]	@ 0x24
 8013464:	2f00      	cmp	r7, #0
 8013466:	bf08      	it	eq
 8013468:	462f      	moveq	r7, r5
 801346a:	2d10      	cmp	r5, #16
 801346c:	462c      	mov	r4, r5
 801346e:	bfa8      	it	ge
 8013470:	2410      	movge	r4, #16
 8013472:	f7ed f86f 	bl	8000554 <__aeabi_ui2d>
 8013476:	2d09      	cmp	r5, #9
 8013478:	4682      	mov	sl, r0
 801347a:	468b      	mov	fp, r1
 801347c:	dc13      	bgt.n	80134a6 <_strtod_l+0x3d6>
 801347e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013480:	2b00      	cmp	r3, #0
 8013482:	f43f ae5e 	beq.w	8013142 <_strtod_l+0x72>
 8013486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013488:	dd78      	ble.n	801357c <_strtod_l+0x4ac>
 801348a:	2b16      	cmp	r3, #22
 801348c:	dc5f      	bgt.n	801354e <_strtod_l+0x47e>
 801348e:	4974      	ldr	r1, [pc, #464]	@ (8013660 <_strtod_l+0x590>)
 8013490:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013494:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013498:	4652      	mov	r2, sl
 801349a:	465b      	mov	r3, fp
 801349c:	f7ed f8d4 	bl	8000648 <__aeabi_dmul>
 80134a0:	4682      	mov	sl, r0
 80134a2:	468b      	mov	fp, r1
 80134a4:	e64d      	b.n	8013142 <_strtod_l+0x72>
 80134a6:	4b6e      	ldr	r3, [pc, #440]	@ (8013660 <_strtod_l+0x590>)
 80134a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80134ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80134b0:	f7ed f8ca 	bl	8000648 <__aeabi_dmul>
 80134b4:	4682      	mov	sl, r0
 80134b6:	9808      	ldr	r0, [sp, #32]
 80134b8:	468b      	mov	fp, r1
 80134ba:	f7ed f84b 	bl	8000554 <__aeabi_ui2d>
 80134be:	4602      	mov	r2, r0
 80134c0:	460b      	mov	r3, r1
 80134c2:	4650      	mov	r0, sl
 80134c4:	4659      	mov	r1, fp
 80134c6:	f7ec ff09 	bl	80002dc <__adddf3>
 80134ca:	2d0f      	cmp	r5, #15
 80134cc:	4682      	mov	sl, r0
 80134ce:	468b      	mov	fp, r1
 80134d0:	ddd5      	ble.n	801347e <_strtod_l+0x3ae>
 80134d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134d4:	1b2c      	subs	r4, r5, r4
 80134d6:	441c      	add	r4, r3
 80134d8:	2c00      	cmp	r4, #0
 80134da:	f340 8096 	ble.w	801360a <_strtod_l+0x53a>
 80134de:	f014 030f 	ands.w	r3, r4, #15
 80134e2:	d00a      	beq.n	80134fa <_strtod_l+0x42a>
 80134e4:	495e      	ldr	r1, [pc, #376]	@ (8013660 <_strtod_l+0x590>)
 80134e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80134ea:	4652      	mov	r2, sl
 80134ec:	465b      	mov	r3, fp
 80134ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134f2:	f7ed f8a9 	bl	8000648 <__aeabi_dmul>
 80134f6:	4682      	mov	sl, r0
 80134f8:	468b      	mov	fp, r1
 80134fa:	f034 040f 	bics.w	r4, r4, #15
 80134fe:	d073      	beq.n	80135e8 <_strtod_l+0x518>
 8013500:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013504:	dd48      	ble.n	8013598 <_strtod_l+0x4c8>
 8013506:	2400      	movs	r4, #0
 8013508:	46a0      	mov	r8, r4
 801350a:	940a      	str	r4, [sp, #40]	@ 0x28
 801350c:	46a1      	mov	r9, r4
 801350e:	9a05      	ldr	r2, [sp, #20]
 8013510:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013668 <_strtod_l+0x598>
 8013514:	2322      	movs	r3, #34	@ 0x22
 8013516:	6013      	str	r3, [r2, #0]
 8013518:	f04f 0a00 	mov.w	sl, #0
 801351c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801351e:	2b00      	cmp	r3, #0
 8013520:	f43f ae0f 	beq.w	8013142 <_strtod_l+0x72>
 8013524:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013526:	9805      	ldr	r0, [sp, #20]
 8013528:	f7ff f942 	bl	80127b0 <_Bfree>
 801352c:	9805      	ldr	r0, [sp, #20]
 801352e:	4649      	mov	r1, r9
 8013530:	f7ff f93e 	bl	80127b0 <_Bfree>
 8013534:	9805      	ldr	r0, [sp, #20]
 8013536:	4641      	mov	r1, r8
 8013538:	f7ff f93a 	bl	80127b0 <_Bfree>
 801353c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801353e:	9805      	ldr	r0, [sp, #20]
 8013540:	f7ff f936 	bl	80127b0 <_Bfree>
 8013544:	9805      	ldr	r0, [sp, #20]
 8013546:	4621      	mov	r1, r4
 8013548:	f7ff f932 	bl	80127b0 <_Bfree>
 801354c:	e5f9      	b.n	8013142 <_strtod_l+0x72>
 801354e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013550:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013554:	4293      	cmp	r3, r2
 8013556:	dbbc      	blt.n	80134d2 <_strtod_l+0x402>
 8013558:	4c41      	ldr	r4, [pc, #260]	@ (8013660 <_strtod_l+0x590>)
 801355a:	f1c5 050f 	rsb	r5, r5, #15
 801355e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013562:	4652      	mov	r2, sl
 8013564:	465b      	mov	r3, fp
 8013566:	e9d1 0100 	ldrd	r0, r1, [r1]
 801356a:	f7ed f86d 	bl	8000648 <__aeabi_dmul>
 801356e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013570:	1b5d      	subs	r5, r3, r5
 8013572:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013576:	e9d4 2300 	ldrd	r2, r3, [r4]
 801357a:	e78f      	b.n	801349c <_strtod_l+0x3cc>
 801357c:	3316      	adds	r3, #22
 801357e:	dba8      	blt.n	80134d2 <_strtod_l+0x402>
 8013580:	4b37      	ldr	r3, [pc, #220]	@ (8013660 <_strtod_l+0x590>)
 8013582:	eba9 0808 	sub.w	r8, r9, r8
 8013586:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801358a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801358e:	4650      	mov	r0, sl
 8013590:	4659      	mov	r1, fp
 8013592:	f7ed f983 	bl	800089c <__aeabi_ddiv>
 8013596:	e783      	b.n	80134a0 <_strtod_l+0x3d0>
 8013598:	4b32      	ldr	r3, [pc, #200]	@ (8013664 <_strtod_l+0x594>)
 801359a:	9308      	str	r3, [sp, #32]
 801359c:	2300      	movs	r3, #0
 801359e:	1124      	asrs	r4, r4, #4
 80135a0:	4650      	mov	r0, sl
 80135a2:	4659      	mov	r1, fp
 80135a4:	461e      	mov	r6, r3
 80135a6:	2c01      	cmp	r4, #1
 80135a8:	dc21      	bgt.n	80135ee <_strtod_l+0x51e>
 80135aa:	b10b      	cbz	r3, 80135b0 <_strtod_l+0x4e0>
 80135ac:	4682      	mov	sl, r0
 80135ae:	468b      	mov	fp, r1
 80135b0:	492c      	ldr	r1, [pc, #176]	@ (8013664 <_strtod_l+0x594>)
 80135b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80135b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80135ba:	4652      	mov	r2, sl
 80135bc:	465b      	mov	r3, fp
 80135be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135c2:	f7ed f841 	bl	8000648 <__aeabi_dmul>
 80135c6:	4b28      	ldr	r3, [pc, #160]	@ (8013668 <_strtod_l+0x598>)
 80135c8:	460a      	mov	r2, r1
 80135ca:	400b      	ands	r3, r1
 80135cc:	4927      	ldr	r1, [pc, #156]	@ (801366c <_strtod_l+0x59c>)
 80135ce:	428b      	cmp	r3, r1
 80135d0:	4682      	mov	sl, r0
 80135d2:	d898      	bhi.n	8013506 <_strtod_l+0x436>
 80135d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80135d8:	428b      	cmp	r3, r1
 80135da:	bf86      	itte	hi
 80135dc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8013670 <_strtod_l+0x5a0>
 80135e0:	f04f 3aff 	movhi.w	sl, #4294967295
 80135e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80135e8:	2300      	movs	r3, #0
 80135ea:	9308      	str	r3, [sp, #32]
 80135ec:	e07a      	b.n	80136e4 <_strtod_l+0x614>
 80135ee:	07e2      	lsls	r2, r4, #31
 80135f0:	d505      	bpl.n	80135fe <_strtod_l+0x52e>
 80135f2:	9b08      	ldr	r3, [sp, #32]
 80135f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135f8:	f7ed f826 	bl	8000648 <__aeabi_dmul>
 80135fc:	2301      	movs	r3, #1
 80135fe:	9a08      	ldr	r2, [sp, #32]
 8013600:	3208      	adds	r2, #8
 8013602:	3601      	adds	r6, #1
 8013604:	1064      	asrs	r4, r4, #1
 8013606:	9208      	str	r2, [sp, #32]
 8013608:	e7cd      	b.n	80135a6 <_strtod_l+0x4d6>
 801360a:	d0ed      	beq.n	80135e8 <_strtod_l+0x518>
 801360c:	4264      	negs	r4, r4
 801360e:	f014 020f 	ands.w	r2, r4, #15
 8013612:	d00a      	beq.n	801362a <_strtod_l+0x55a>
 8013614:	4b12      	ldr	r3, [pc, #72]	@ (8013660 <_strtod_l+0x590>)
 8013616:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801361a:	4650      	mov	r0, sl
 801361c:	4659      	mov	r1, fp
 801361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013622:	f7ed f93b 	bl	800089c <__aeabi_ddiv>
 8013626:	4682      	mov	sl, r0
 8013628:	468b      	mov	fp, r1
 801362a:	1124      	asrs	r4, r4, #4
 801362c:	d0dc      	beq.n	80135e8 <_strtod_l+0x518>
 801362e:	2c1f      	cmp	r4, #31
 8013630:	dd20      	ble.n	8013674 <_strtod_l+0x5a4>
 8013632:	2400      	movs	r4, #0
 8013634:	46a0      	mov	r8, r4
 8013636:	940a      	str	r4, [sp, #40]	@ 0x28
 8013638:	46a1      	mov	r9, r4
 801363a:	9a05      	ldr	r2, [sp, #20]
 801363c:	2322      	movs	r3, #34	@ 0x22
 801363e:	f04f 0a00 	mov.w	sl, #0
 8013642:	f04f 0b00 	mov.w	fp, #0
 8013646:	6013      	str	r3, [r2, #0]
 8013648:	e768      	b.n	801351c <_strtod_l+0x44c>
 801364a:	bf00      	nop
 801364c:	08016f05 	.word	0x08016f05
 8013650:	0801711c 	.word	0x0801711c
 8013654:	08016efd 	.word	0x08016efd
 8013658:	08016f32 	.word	0x08016f32
 801365c:	080172e0 	.word	0x080172e0
 8013660:	08017050 	.word	0x08017050
 8013664:	08017028 	.word	0x08017028
 8013668:	7ff00000 	.word	0x7ff00000
 801366c:	7ca00000 	.word	0x7ca00000
 8013670:	7fefffff 	.word	0x7fefffff
 8013674:	f014 0310 	ands.w	r3, r4, #16
 8013678:	bf18      	it	ne
 801367a:	236a      	movne	r3, #106	@ 0x6a
 801367c:	4ea9      	ldr	r6, [pc, #676]	@ (8013924 <_strtod_l+0x854>)
 801367e:	9308      	str	r3, [sp, #32]
 8013680:	4650      	mov	r0, sl
 8013682:	4659      	mov	r1, fp
 8013684:	2300      	movs	r3, #0
 8013686:	07e2      	lsls	r2, r4, #31
 8013688:	d504      	bpl.n	8013694 <_strtod_l+0x5c4>
 801368a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801368e:	f7ec ffdb 	bl	8000648 <__aeabi_dmul>
 8013692:	2301      	movs	r3, #1
 8013694:	1064      	asrs	r4, r4, #1
 8013696:	f106 0608 	add.w	r6, r6, #8
 801369a:	d1f4      	bne.n	8013686 <_strtod_l+0x5b6>
 801369c:	b10b      	cbz	r3, 80136a2 <_strtod_l+0x5d2>
 801369e:	4682      	mov	sl, r0
 80136a0:	468b      	mov	fp, r1
 80136a2:	9b08      	ldr	r3, [sp, #32]
 80136a4:	b1b3      	cbz	r3, 80136d4 <_strtod_l+0x604>
 80136a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80136aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	4659      	mov	r1, fp
 80136b2:	dd0f      	ble.n	80136d4 <_strtod_l+0x604>
 80136b4:	2b1f      	cmp	r3, #31
 80136b6:	dd55      	ble.n	8013764 <_strtod_l+0x694>
 80136b8:	2b34      	cmp	r3, #52	@ 0x34
 80136ba:	bfde      	ittt	le
 80136bc:	f04f 33ff 	movle.w	r3, #4294967295
 80136c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80136c4:	4093      	lslle	r3, r2
 80136c6:	f04f 0a00 	mov.w	sl, #0
 80136ca:	bfcc      	ite	gt
 80136cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80136d0:	ea03 0b01 	andle.w	fp, r3, r1
 80136d4:	2200      	movs	r2, #0
 80136d6:	2300      	movs	r3, #0
 80136d8:	4650      	mov	r0, sl
 80136da:	4659      	mov	r1, fp
 80136dc:	f7ed fa1c 	bl	8000b18 <__aeabi_dcmpeq>
 80136e0:	2800      	cmp	r0, #0
 80136e2:	d1a6      	bne.n	8013632 <_strtod_l+0x562>
 80136e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80136e6:	9300      	str	r3, [sp, #0]
 80136e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80136ea:	9805      	ldr	r0, [sp, #20]
 80136ec:	462b      	mov	r3, r5
 80136ee:	463a      	mov	r2, r7
 80136f0:	f7ff f8c6 	bl	8012880 <__s2b>
 80136f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80136f6:	2800      	cmp	r0, #0
 80136f8:	f43f af05 	beq.w	8013506 <_strtod_l+0x436>
 80136fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80136fe:	2a00      	cmp	r2, #0
 8013700:	eba9 0308 	sub.w	r3, r9, r8
 8013704:	bfa8      	it	ge
 8013706:	2300      	movge	r3, #0
 8013708:	9312      	str	r3, [sp, #72]	@ 0x48
 801370a:	2400      	movs	r4, #0
 801370c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013710:	9316      	str	r3, [sp, #88]	@ 0x58
 8013712:	46a0      	mov	r8, r4
 8013714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013716:	9805      	ldr	r0, [sp, #20]
 8013718:	6859      	ldr	r1, [r3, #4]
 801371a:	f7ff f809 	bl	8012730 <_Balloc>
 801371e:	4681      	mov	r9, r0
 8013720:	2800      	cmp	r0, #0
 8013722:	f43f aef4 	beq.w	801350e <_strtod_l+0x43e>
 8013726:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013728:	691a      	ldr	r2, [r3, #16]
 801372a:	3202      	adds	r2, #2
 801372c:	f103 010c 	add.w	r1, r3, #12
 8013730:	0092      	lsls	r2, r2, #2
 8013732:	300c      	adds	r0, #12
 8013734:	f7fe f899 	bl	801186a <memcpy>
 8013738:	ec4b ab10 	vmov	d0, sl, fp
 801373c:	9805      	ldr	r0, [sp, #20]
 801373e:	aa1c      	add	r2, sp, #112	@ 0x70
 8013740:	a91b      	add	r1, sp, #108	@ 0x6c
 8013742:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013746:	f7ff fbd7 	bl	8012ef8 <__d2b>
 801374a:	901a      	str	r0, [sp, #104]	@ 0x68
 801374c:	2800      	cmp	r0, #0
 801374e:	f43f aede 	beq.w	801350e <_strtod_l+0x43e>
 8013752:	9805      	ldr	r0, [sp, #20]
 8013754:	2101      	movs	r1, #1
 8013756:	f7ff f929 	bl	80129ac <__i2b>
 801375a:	4680      	mov	r8, r0
 801375c:	b948      	cbnz	r0, 8013772 <_strtod_l+0x6a2>
 801375e:	f04f 0800 	mov.w	r8, #0
 8013762:	e6d4      	b.n	801350e <_strtod_l+0x43e>
 8013764:	f04f 32ff 	mov.w	r2, #4294967295
 8013768:	fa02 f303 	lsl.w	r3, r2, r3
 801376c:	ea03 0a0a 	and.w	sl, r3, sl
 8013770:	e7b0      	b.n	80136d4 <_strtod_l+0x604>
 8013772:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013774:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013776:	2d00      	cmp	r5, #0
 8013778:	bfab      	itete	ge
 801377a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801377c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801377e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013780:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013782:	bfac      	ite	ge
 8013784:	18ef      	addge	r7, r5, r3
 8013786:	1b5e      	sublt	r6, r3, r5
 8013788:	9b08      	ldr	r3, [sp, #32]
 801378a:	1aed      	subs	r5, r5, r3
 801378c:	4415      	add	r5, r2
 801378e:	4b66      	ldr	r3, [pc, #408]	@ (8013928 <_strtod_l+0x858>)
 8013790:	3d01      	subs	r5, #1
 8013792:	429d      	cmp	r5, r3
 8013794:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013798:	da50      	bge.n	801383c <_strtod_l+0x76c>
 801379a:	1b5b      	subs	r3, r3, r5
 801379c:	2b1f      	cmp	r3, #31
 801379e:	eba2 0203 	sub.w	r2, r2, r3
 80137a2:	f04f 0101 	mov.w	r1, #1
 80137a6:	dc3d      	bgt.n	8013824 <_strtod_l+0x754>
 80137a8:	fa01 f303 	lsl.w	r3, r1, r3
 80137ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 80137ae:	2300      	movs	r3, #0
 80137b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80137b2:	18bd      	adds	r5, r7, r2
 80137b4:	9b08      	ldr	r3, [sp, #32]
 80137b6:	42af      	cmp	r7, r5
 80137b8:	4416      	add	r6, r2
 80137ba:	441e      	add	r6, r3
 80137bc:	463b      	mov	r3, r7
 80137be:	bfa8      	it	ge
 80137c0:	462b      	movge	r3, r5
 80137c2:	42b3      	cmp	r3, r6
 80137c4:	bfa8      	it	ge
 80137c6:	4633      	movge	r3, r6
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	bfc2      	ittt	gt
 80137cc:	1aed      	subgt	r5, r5, r3
 80137ce:	1af6      	subgt	r6, r6, r3
 80137d0:	1aff      	subgt	r7, r7, r3
 80137d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	dd16      	ble.n	8013806 <_strtod_l+0x736>
 80137d8:	4641      	mov	r1, r8
 80137da:	9805      	ldr	r0, [sp, #20]
 80137dc:	461a      	mov	r2, r3
 80137de:	f7ff f9a5 	bl	8012b2c <__pow5mult>
 80137e2:	4680      	mov	r8, r0
 80137e4:	2800      	cmp	r0, #0
 80137e6:	d0ba      	beq.n	801375e <_strtod_l+0x68e>
 80137e8:	4601      	mov	r1, r0
 80137ea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80137ec:	9805      	ldr	r0, [sp, #20]
 80137ee:	f7ff f8f3 	bl	80129d8 <__multiply>
 80137f2:	900e      	str	r0, [sp, #56]	@ 0x38
 80137f4:	2800      	cmp	r0, #0
 80137f6:	f43f ae8a 	beq.w	801350e <_strtod_l+0x43e>
 80137fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80137fc:	9805      	ldr	r0, [sp, #20]
 80137fe:	f7fe ffd7 	bl	80127b0 <_Bfree>
 8013802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013804:	931a      	str	r3, [sp, #104]	@ 0x68
 8013806:	2d00      	cmp	r5, #0
 8013808:	dc1d      	bgt.n	8013846 <_strtod_l+0x776>
 801380a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801380c:	2b00      	cmp	r3, #0
 801380e:	dd23      	ble.n	8013858 <_strtod_l+0x788>
 8013810:	4649      	mov	r1, r9
 8013812:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013814:	9805      	ldr	r0, [sp, #20]
 8013816:	f7ff f989 	bl	8012b2c <__pow5mult>
 801381a:	4681      	mov	r9, r0
 801381c:	b9e0      	cbnz	r0, 8013858 <_strtod_l+0x788>
 801381e:	f04f 0900 	mov.w	r9, #0
 8013822:	e674      	b.n	801350e <_strtod_l+0x43e>
 8013824:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013828:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801382c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013830:	35e2      	adds	r5, #226	@ 0xe2
 8013832:	fa01 f305 	lsl.w	r3, r1, r5
 8013836:	9310      	str	r3, [sp, #64]	@ 0x40
 8013838:	9113      	str	r1, [sp, #76]	@ 0x4c
 801383a:	e7ba      	b.n	80137b2 <_strtod_l+0x6e2>
 801383c:	2300      	movs	r3, #0
 801383e:	9310      	str	r3, [sp, #64]	@ 0x40
 8013840:	2301      	movs	r3, #1
 8013842:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013844:	e7b5      	b.n	80137b2 <_strtod_l+0x6e2>
 8013846:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013848:	9805      	ldr	r0, [sp, #20]
 801384a:	462a      	mov	r2, r5
 801384c:	f7ff f9c8 	bl	8012be0 <__lshift>
 8013850:	901a      	str	r0, [sp, #104]	@ 0x68
 8013852:	2800      	cmp	r0, #0
 8013854:	d1d9      	bne.n	801380a <_strtod_l+0x73a>
 8013856:	e65a      	b.n	801350e <_strtod_l+0x43e>
 8013858:	2e00      	cmp	r6, #0
 801385a:	dd07      	ble.n	801386c <_strtod_l+0x79c>
 801385c:	4649      	mov	r1, r9
 801385e:	9805      	ldr	r0, [sp, #20]
 8013860:	4632      	mov	r2, r6
 8013862:	f7ff f9bd 	bl	8012be0 <__lshift>
 8013866:	4681      	mov	r9, r0
 8013868:	2800      	cmp	r0, #0
 801386a:	d0d8      	beq.n	801381e <_strtod_l+0x74e>
 801386c:	2f00      	cmp	r7, #0
 801386e:	dd08      	ble.n	8013882 <_strtod_l+0x7b2>
 8013870:	4641      	mov	r1, r8
 8013872:	9805      	ldr	r0, [sp, #20]
 8013874:	463a      	mov	r2, r7
 8013876:	f7ff f9b3 	bl	8012be0 <__lshift>
 801387a:	4680      	mov	r8, r0
 801387c:	2800      	cmp	r0, #0
 801387e:	f43f ae46 	beq.w	801350e <_strtod_l+0x43e>
 8013882:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013884:	9805      	ldr	r0, [sp, #20]
 8013886:	464a      	mov	r2, r9
 8013888:	f7ff fa32 	bl	8012cf0 <__mdiff>
 801388c:	4604      	mov	r4, r0
 801388e:	2800      	cmp	r0, #0
 8013890:	f43f ae3d 	beq.w	801350e <_strtod_l+0x43e>
 8013894:	68c3      	ldr	r3, [r0, #12]
 8013896:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013898:	2300      	movs	r3, #0
 801389a:	60c3      	str	r3, [r0, #12]
 801389c:	4641      	mov	r1, r8
 801389e:	f7ff fa0b 	bl	8012cb8 <__mcmp>
 80138a2:	2800      	cmp	r0, #0
 80138a4:	da46      	bge.n	8013934 <_strtod_l+0x864>
 80138a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138a8:	ea53 030a 	orrs.w	r3, r3, sl
 80138ac:	d16c      	bne.n	8013988 <_strtod_l+0x8b8>
 80138ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d168      	bne.n	8013988 <_strtod_l+0x8b8>
 80138b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80138ba:	0d1b      	lsrs	r3, r3, #20
 80138bc:	051b      	lsls	r3, r3, #20
 80138be:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80138c2:	d961      	bls.n	8013988 <_strtod_l+0x8b8>
 80138c4:	6963      	ldr	r3, [r4, #20]
 80138c6:	b913      	cbnz	r3, 80138ce <_strtod_l+0x7fe>
 80138c8:	6923      	ldr	r3, [r4, #16]
 80138ca:	2b01      	cmp	r3, #1
 80138cc:	dd5c      	ble.n	8013988 <_strtod_l+0x8b8>
 80138ce:	4621      	mov	r1, r4
 80138d0:	2201      	movs	r2, #1
 80138d2:	9805      	ldr	r0, [sp, #20]
 80138d4:	f7ff f984 	bl	8012be0 <__lshift>
 80138d8:	4641      	mov	r1, r8
 80138da:	4604      	mov	r4, r0
 80138dc:	f7ff f9ec 	bl	8012cb8 <__mcmp>
 80138e0:	2800      	cmp	r0, #0
 80138e2:	dd51      	ble.n	8013988 <_strtod_l+0x8b8>
 80138e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80138e8:	9a08      	ldr	r2, [sp, #32]
 80138ea:	0d1b      	lsrs	r3, r3, #20
 80138ec:	051b      	lsls	r3, r3, #20
 80138ee:	2a00      	cmp	r2, #0
 80138f0:	d06b      	beq.n	80139ca <_strtod_l+0x8fa>
 80138f2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80138f6:	d868      	bhi.n	80139ca <_strtod_l+0x8fa>
 80138f8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80138fc:	f67f ae9d 	bls.w	801363a <_strtod_l+0x56a>
 8013900:	4b0a      	ldr	r3, [pc, #40]	@ (801392c <_strtod_l+0x85c>)
 8013902:	4650      	mov	r0, sl
 8013904:	4659      	mov	r1, fp
 8013906:	2200      	movs	r2, #0
 8013908:	f7ec fe9e 	bl	8000648 <__aeabi_dmul>
 801390c:	4b08      	ldr	r3, [pc, #32]	@ (8013930 <_strtod_l+0x860>)
 801390e:	400b      	ands	r3, r1
 8013910:	4682      	mov	sl, r0
 8013912:	468b      	mov	fp, r1
 8013914:	2b00      	cmp	r3, #0
 8013916:	f47f ae05 	bne.w	8013524 <_strtod_l+0x454>
 801391a:	9a05      	ldr	r2, [sp, #20]
 801391c:	2322      	movs	r3, #34	@ 0x22
 801391e:	6013      	str	r3, [r2, #0]
 8013920:	e600      	b.n	8013524 <_strtod_l+0x454>
 8013922:	bf00      	nop
 8013924:	08017148 	.word	0x08017148
 8013928:	fffffc02 	.word	0xfffffc02
 801392c:	39500000 	.word	0x39500000
 8013930:	7ff00000 	.word	0x7ff00000
 8013934:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013938:	d165      	bne.n	8013a06 <_strtod_l+0x936>
 801393a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801393c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013940:	b35a      	cbz	r2, 801399a <_strtod_l+0x8ca>
 8013942:	4a9f      	ldr	r2, [pc, #636]	@ (8013bc0 <_strtod_l+0xaf0>)
 8013944:	4293      	cmp	r3, r2
 8013946:	d12b      	bne.n	80139a0 <_strtod_l+0x8d0>
 8013948:	9b08      	ldr	r3, [sp, #32]
 801394a:	4651      	mov	r1, sl
 801394c:	b303      	cbz	r3, 8013990 <_strtod_l+0x8c0>
 801394e:	4b9d      	ldr	r3, [pc, #628]	@ (8013bc4 <_strtod_l+0xaf4>)
 8013950:	465a      	mov	r2, fp
 8013952:	4013      	ands	r3, r2
 8013954:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013958:	f04f 32ff 	mov.w	r2, #4294967295
 801395c:	d81b      	bhi.n	8013996 <_strtod_l+0x8c6>
 801395e:	0d1b      	lsrs	r3, r3, #20
 8013960:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013964:	fa02 f303 	lsl.w	r3, r2, r3
 8013968:	4299      	cmp	r1, r3
 801396a:	d119      	bne.n	80139a0 <_strtod_l+0x8d0>
 801396c:	4b96      	ldr	r3, [pc, #600]	@ (8013bc8 <_strtod_l+0xaf8>)
 801396e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013970:	429a      	cmp	r2, r3
 8013972:	d102      	bne.n	801397a <_strtod_l+0x8aa>
 8013974:	3101      	adds	r1, #1
 8013976:	f43f adca 	beq.w	801350e <_strtod_l+0x43e>
 801397a:	4b92      	ldr	r3, [pc, #584]	@ (8013bc4 <_strtod_l+0xaf4>)
 801397c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801397e:	401a      	ands	r2, r3
 8013980:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8013984:	f04f 0a00 	mov.w	sl, #0
 8013988:	9b08      	ldr	r3, [sp, #32]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d1b8      	bne.n	8013900 <_strtod_l+0x830>
 801398e:	e5c9      	b.n	8013524 <_strtod_l+0x454>
 8013990:	f04f 33ff 	mov.w	r3, #4294967295
 8013994:	e7e8      	b.n	8013968 <_strtod_l+0x898>
 8013996:	4613      	mov	r3, r2
 8013998:	e7e6      	b.n	8013968 <_strtod_l+0x898>
 801399a:	ea53 030a 	orrs.w	r3, r3, sl
 801399e:	d0a1      	beq.n	80138e4 <_strtod_l+0x814>
 80139a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80139a2:	b1db      	cbz	r3, 80139dc <_strtod_l+0x90c>
 80139a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80139a6:	4213      	tst	r3, r2
 80139a8:	d0ee      	beq.n	8013988 <_strtod_l+0x8b8>
 80139aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139ac:	9a08      	ldr	r2, [sp, #32]
 80139ae:	4650      	mov	r0, sl
 80139b0:	4659      	mov	r1, fp
 80139b2:	b1bb      	cbz	r3, 80139e4 <_strtod_l+0x914>
 80139b4:	f7ff fb6e 	bl	8013094 <sulp>
 80139b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80139bc:	ec53 2b10 	vmov	r2, r3, d0
 80139c0:	f7ec fc8c 	bl	80002dc <__adddf3>
 80139c4:	4682      	mov	sl, r0
 80139c6:	468b      	mov	fp, r1
 80139c8:	e7de      	b.n	8013988 <_strtod_l+0x8b8>
 80139ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80139ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80139d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80139d6:	f04f 3aff 	mov.w	sl, #4294967295
 80139da:	e7d5      	b.n	8013988 <_strtod_l+0x8b8>
 80139dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80139de:	ea13 0f0a 	tst.w	r3, sl
 80139e2:	e7e1      	b.n	80139a8 <_strtod_l+0x8d8>
 80139e4:	f7ff fb56 	bl	8013094 <sulp>
 80139e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80139ec:	ec53 2b10 	vmov	r2, r3, d0
 80139f0:	f7ec fc72 	bl	80002d8 <__aeabi_dsub>
 80139f4:	2200      	movs	r2, #0
 80139f6:	2300      	movs	r3, #0
 80139f8:	4682      	mov	sl, r0
 80139fa:	468b      	mov	fp, r1
 80139fc:	f7ed f88c 	bl	8000b18 <__aeabi_dcmpeq>
 8013a00:	2800      	cmp	r0, #0
 8013a02:	d0c1      	beq.n	8013988 <_strtod_l+0x8b8>
 8013a04:	e619      	b.n	801363a <_strtod_l+0x56a>
 8013a06:	4641      	mov	r1, r8
 8013a08:	4620      	mov	r0, r4
 8013a0a:	f7ff facd 	bl	8012fa8 <__ratio>
 8013a0e:	ec57 6b10 	vmov	r6, r7, d0
 8013a12:	2200      	movs	r2, #0
 8013a14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013a18:	4630      	mov	r0, r6
 8013a1a:	4639      	mov	r1, r7
 8013a1c:	f7ed f890 	bl	8000b40 <__aeabi_dcmple>
 8013a20:	2800      	cmp	r0, #0
 8013a22:	d06f      	beq.n	8013b04 <_strtod_l+0xa34>
 8013a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d17a      	bne.n	8013b20 <_strtod_l+0xa50>
 8013a2a:	f1ba 0f00 	cmp.w	sl, #0
 8013a2e:	d158      	bne.n	8013ae2 <_strtod_l+0xa12>
 8013a30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d15a      	bne.n	8013af0 <_strtod_l+0xa20>
 8013a3a:	4b64      	ldr	r3, [pc, #400]	@ (8013bcc <_strtod_l+0xafc>)
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	4630      	mov	r0, r6
 8013a40:	4639      	mov	r1, r7
 8013a42:	f7ed f873 	bl	8000b2c <__aeabi_dcmplt>
 8013a46:	2800      	cmp	r0, #0
 8013a48:	d159      	bne.n	8013afe <_strtod_l+0xa2e>
 8013a4a:	4630      	mov	r0, r6
 8013a4c:	4639      	mov	r1, r7
 8013a4e:	4b60      	ldr	r3, [pc, #384]	@ (8013bd0 <_strtod_l+0xb00>)
 8013a50:	2200      	movs	r2, #0
 8013a52:	f7ec fdf9 	bl	8000648 <__aeabi_dmul>
 8013a56:	4606      	mov	r6, r0
 8013a58:	460f      	mov	r7, r1
 8013a5a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8013a5e:	9606      	str	r6, [sp, #24]
 8013a60:	9307      	str	r3, [sp, #28]
 8013a62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a66:	4d57      	ldr	r5, [pc, #348]	@ (8013bc4 <_strtod_l+0xaf4>)
 8013a68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013a6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a6e:	401d      	ands	r5, r3
 8013a70:	4b58      	ldr	r3, [pc, #352]	@ (8013bd4 <_strtod_l+0xb04>)
 8013a72:	429d      	cmp	r5, r3
 8013a74:	f040 80b2 	bne.w	8013bdc <_strtod_l+0xb0c>
 8013a78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a7a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8013a7e:	ec4b ab10 	vmov	d0, sl, fp
 8013a82:	f7ff f9c9 	bl	8012e18 <__ulp>
 8013a86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a8a:	ec51 0b10 	vmov	r0, r1, d0
 8013a8e:	f7ec fddb 	bl	8000648 <__aeabi_dmul>
 8013a92:	4652      	mov	r2, sl
 8013a94:	465b      	mov	r3, fp
 8013a96:	f7ec fc21 	bl	80002dc <__adddf3>
 8013a9a:	460b      	mov	r3, r1
 8013a9c:	4949      	ldr	r1, [pc, #292]	@ (8013bc4 <_strtod_l+0xaf4>)
 8013a9e:	4a4e      	ldr	r2, [pc, #312]	@ (8013bd8 <_strtod_l+0xb08>)
 8013aa0:	4019      	ands	r1, r3
 8013aa2:	4291      	cmp	r1, r2
 8013aa4:	4682      	mov	sl, r0
 8013aa6:	d942      	bls.n	8013b2e <_strtod_l+0xa5e>
 8013aa8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013aaa:	4b47      	ldr	r3, [pc, #284]	@ (8013bc8 <_strtod_l+0xaf8>)
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d103      	bne.n	8013ab8 <_strtod_l+0x9e8>
 8013ab0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013ab2:	3301      	adds	r3, #1
 8013ab4:	f43f ad2b 	beq.w	801350e <_strtod_l+0x43e>
 8013ab8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013bc8 <_strtod_l+0xaf8>
 8013abc:	f04f 3aff 	mov.w	sl, #4294967295
 8013ac0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013ac2:	9805      	ldr	r0, [sp, #20]
 8013ac4:	f7fe fe74 	bl	80127b0 <_Bfree>
 8013ac8:	9805      	ldr	r0, [sp, #20]
 8013aca:	4649      	mov	r1, r9
 8013acc:	f7fe fe70 	bl	80127b0 <_Bfree>
 8013ad0:	9805      	ldr	r0, [sp, #20]
 8013ad2:	4641      	mov	r1, r8
 8013ad4:	f7fe fe6c 	bl	80127b0 <_Bfree>
 8013ad8:	9805      	ldr	r0, [sp, #20]
 8013ada:	4621      	mov	r1, r4
 8013adc:	f7fe fe68 	bl	80127b0 <_Bfree>
 8013ae0:	e618      	b.n	8013714 <_strtod_l+0x644>
 8013ae2:	f1ba 0f01 	cmp.w	sl, #1
 8013ae6:	d103      	bne.n	8013af0 <_strtod_l+0xa20>
 8013ae8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	f43f ada5 	beq.w	801363a <_strtod_l+0x56a>
 8013af0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8013ba0 <_strtod_l+0xad0>
 8013af4:	4f35      	ldr	r7, [pc, #212]	@ (8013bcc <_strtod_l+0xafc>)
 8013af6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013afa:	2600      	movs	r6, #0
 8013afc:	e7b1      	b.n	8013a62 <_strtod_l+0x992>
 8013afe:	4f34      	ldr	r7, [pc, #208]	@ (8013bd0 <_strtod_l+0xb00>)
 8013b00:	2600      	movs	r6, #0
 8013b02:	e7aa      	b.n	8013a5a <_strtod_l+0x98a>
 8013b04:	4b32      	ldr	r3, [pc, #200]	@ (8013bd0 <_strtod_l+0xb00>)
 8013b06:	4630      	mov	r0, r6
 8013b08:	4639      	mov	r1, r7
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	f7ec fd9c 	bl	8000648 <__aeabi_dmul>
 8013b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b12:	4606      	mov	r6, r0
 8013b14:	460f      	mov	r7, r1
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d09f      	beq.n	8013a5a <_strtod_l+0x98a>
 8013b1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013b1e:	e7a0      	b.n	8013a62 <_strtod_l+0x992>
 8013b20:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013ba8 <_strtod_l+0xad8>
 8013b24:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013b28:	ec57 6b17 	vmov	r6, r7, d7
 8013b2c:	e799      	b.n	8013a62 <_strtod_l+0x992>
 8013b2e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013b32:	9b08      	ldr	r3, [sp, #32]
 8013b34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d1c1      	bne.n	8013ac0 <_strtod_l+0x9f0>
 8013b3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013b40:	0d1b      	lsrs	r3, r3, #20
 8013b42:	051b      	lsls	r3, r3, #20
 8013b44:	429d      	cmp	r5, r3
 8013b46:	d1bb      	bne.n	8013ac0 <_strtod_l+0x9f0>
 8013b48:	4630      	mov	r0, r6
 8013b4a:	4639      	mov	r1, r7
 8013b4c:	f7ed f8dc 	bl	8000d08 <__aeabi_d2lz>
 8013b50:	f7ec fd4c 	bl	80005ec <__aeabi_l2d>
 8013b54:	4602      	mov	r2, r0
 8013b56:	460b      	mov	r3, r1
 8013b58:	4630      	mov	r0, r6
 8013b5a:	4639      	mov	r1, r7
 8013b5c:	f7ec fbbc 	bl	80002d8 <__aeabi_dsub>
 8013b60:	460b      	mov	r3, r1
 8013b62:	4602      	mov	r2, r0
 8013b64:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013b68:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8013b6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b6e:	ea46 060a 	orr.w	r6, r6, sl
 8013b72:	431e      	orrs	r6, r3
 8013b74:	d06f      	beq.n	8013c56 <_strtod_l+0xb86>
 8013b76:	a30e      	add	r3, pc, #56	@ (adr r3, 8013bb0 <_strtod_l+0xae0>)
 8013b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b7c:	f7ec ffd6 	bl	8000b2c <__aeabi_dcmplt>
 8013b80:	2800      	cmp	r0, #0
 8013b82:	f47f accf 	bne.w	8013524 <_strtod_l+0x454>
 8013b86:	a30c      	add	r3, pc, #48	@ (adr r3, 8013bb8 <_strtod_l+0xae8>)
 8013b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013b90:	f7ec ffea 	bl	8000b68 <__aeabi_dcmpgt>
 8013b94:	2800      	cmp	r0, #0
 8013b96:	d093      	beq.n	8013ac0 <_strtod_l+0x9f0>
 8013b98:	e4c4      	b.n	8013524 <_strtod_l+0x454>
 8013b9a:	bf00      	nop
 8013b9c:	f3af 8000 	nop.w
 8013ba0:	00000000 	.word	0x00000000
 8013ba4:	bff00000 	.word	0xbff00000
 8013ba8:	00000000 	.word	0x00000000
 8013bac:	3ff00000 	.word	0x3ff00000
 8013bb0:	94a03595 	.word	0x94a03595
 8013bb4:	3fdfffff 	.word	0x3fdfffff
 8013bb8:	35afe535 	.word	0x35afe535
 8013bbc:	3fe00000 	.word	0x3fe00000
 8013bc0:	000fffff 	.word	0x000fffff
 8013bc4:	7ff00000 	.word	0x7ff00000
 8013bc8:	7fefffff 	.word	0x7fefffff
 8013bcc:	3ff00000 	.word	0x3ff00000
 8013bd0:	3fe00000 	.word	0x3fe00000
 8013bd4:	7fe00000 	.word	0x7fe00000
 8013bd8:	7c9fffff 	.word	0x7c9fffff
 8013bdc:	9b08      	ldr	r3, [sp, #32]
 8013bde:	b323      	cbz	r3, 8013c2a <_strtod_l+0xb5a>
 8013be0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013be4:	d821      	bhi.n	8013c2a <_strtod_l+0xb5a>
 8013be6:	a328      	add	r3, pc, #160	@ (adr r3, 8013c88 <_strtod_l+0xbb8>)
 8013be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bec:	4630      	mov	r0, r6
 8013bee:	4639      	mov	r1, r7
 8013bf0:	f7ec ffa6 	bl	8000b40 <__aeabi_dcmple>
 8013bf4:	b1a0      	cbz	r0, 8013c20 <_strtod_l+0xb50>
 8013bf6:	4639      	mov	r1, r7
 8013bf8:	4630      	mov	r0, r6
 8013bfa:	f7ec fffd 	bl	8000bf8 <__aeabi_d2uiz>
 8013bfe:	2801      	cmp	r0, #1
 8013c00:	bf38      	it	cc
 8013c02:	2001      	movcc	r0, #1
 8013c04:	f7ec fca6 	bl	8000554 <__aeabi_ui2d>
 8013c08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c0a:	4606      	mov	r6, r0
 8013c0c:	460f      	mov	r7, r1
 8013c0e:	b9fb      	cbnz	r3, 8013c50 <_strtod_l+0xb80>
 8013c10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013c14:	9014      	str	r0, [sp, #80]	@ 0x50
 8013c16:	9315      	str	r3, [sp, #84]	@ 0x54
 8013c18:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013c1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013c20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c22:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013c26:	1b5b      	subs	r3, r3, r5
 8013c28:	9311      	str	r3, [sp, #68]	@ 0x44
 8013c2a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013c2e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013c32:	f7ff f8f1 	bl	8012e18 <__ulp>
 8013c36:	4650      	mov	r0, sl
 8013c38:	ec53 2b10 	vmov	r2, r3, d0
 8013c3c:	4659      	mov	r1, fp
 8013c3e:	f7ec fd03 	bl	8000648 <__aeabi_dmul>
 8013c42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013c46:	f7ec fb49 	bl	80002dc <__adddf3>
 8013c4a:	4682      	mov	sl, r0
 8013c4c:	468b      	mov	fp, r1
 8013c4e:	e770      	b.n	8013b32 <_strtod_l+0xa62>
 8013c50:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013c54:	e7e0      	b.n	8013c18 <_strtod_l+0xb48>
 8013c56:	a30e      	add	r3, pc, #56	@ (adr r3, 8013c90 <_strtod_l+0xbc0>)
 8013c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c5c:	f7ec ff66 	bl	8000b2c <__aeabi_dcmplt>
 8013c60:	e798      	b.n	8013b94 <_strtod_l+0xac4>
 8013c62:	2300      	movs	r3, #0
 8013c64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013c66:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013c68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013c6a:	6013      	str	r3, [r2, #0]
 8013c6c:	f7ff ba6d 	b.w	801314a <_strtod_l+0x7a>
 8013c70:	2a65      	cmp	r2, #101	@ 0x65
 8013c72:	f43f ab66 	beq.w	8013342 <_strtod_l+0x272>
 8013c76:	2a45      	cmp	r2, #69	@ 0x45
 8013c78:	f43f ab63 	beq.w	8013342 <_strtod_l+0x272>
 8013c7c:	2301      	movs	r3, #1
 8013c7e:	f7ff bb9e 	b.w	80133be <_strtod_l+0x2ee>
 8013c82:	bf00      	nop
 8013c84:	f3af 8000 	nop.w
 8013c88:	ffc00000 	.word	0xffc00000
 8013c8c:	41dfffff 	.word	0x41dfffff
 8013c90:	94a03595 	.word	0x94a03595
 8013c94:	3fcfffff 	.word	0x3fcfffff

08013c98 <_strtod_r>:
 8013c98:	4b01      	ldr	r3, [pc, #4]	@ (8013ca0 <_strtod_r+0x8>)
 8013c9a:	f7ff ba19 	b.w	80130d0 <_strtod_l>
 8013c9e:	bf00      	nop
 8013ca0:	2000021c 	.word	0x2000021c

08013ca4 <_strtol_l.constprop.0>:
 8013ca4:	2b24      	cmp	r3, #36	@ 0x24
 8013ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013caa:	4686      	mov	lr, r0
 8013cac:	4690      	mov	r8, r2
 8013cae:	d801      	bhi.n	8013cb4 <_strtol_l.constprop.0+0x10>
 8013cb0:	2b01      	cmp	r3, #1
 8013cb2:	d106      	bne.n	8013cc2 <_strtol_l.constprop.0+0x1e>
 8013cb4:	f7fd fdac 	bl	8011810 <__errno>
 8013cb8:	2316      	movs	r3, #22
 8013cba:	6003      	str	r3, [r0, #0]
 8013cbc:	2000      	movs	r0, #0
 8013cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cc2:	4834      	ldr	r0, [pc, #208]	@ (8013d94 <_strtol_l.constprop.0+0xf0>)
 8013cc4:	460d      	mov	r5, r1
 8013cc6:	462a      	mov	r2, r5
 8013cc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013ccc:	5d06      	ldrb	r6, [r0, r4]
 8013cce:	f016 0608 	ands.w	r6, r6, #8
 8013cd2:	d1f8      	bne.n	8013cc6 <_strtol_l.constprop.0+0x22>
 8013cd4:	2c2d      	cmp	r4, #45	@ 0x2d
 8013cd6:	d12d      	bne.n	8013d34 <_strtol_l.constprop.0+0x90>
 8013cd8:	782c      	ldrb	r4, [r5, #0]
 8013cda:	2601      	movs	r6, #1
 8013cdc:	1c95      	adds	r5, r2, #2
 8013cde:	f033 0210 	bics.w	r2, r3, #16
 8013ce2:	d109      	bne.n	8013cf8 <_strtol_l.constprop.0+0x54>
 8013ce4:	2c30      	cmp	r4, #48	@ 0x30
 8013ce6:	d12a      	bne.n	8013d3e <_strtol_l.constprop.0+0x9a>
 8013ce8:	782a      	ldrb	r2, [r5, #0]
 8013cea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013cee:	2a58      	cmp	r2, #88	@ 0x58
 8013cf0:	d125      	bne.n	8013d3e <_strtol_l.constprop.0+0x9a>
 8013cf2:	786c      	ldrb	r4, [r5, #1]
 8013cf4:	2310      	movs	r3, #16
 8013cf6:	3502      	adds	r5, #2
 8013cf8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013cfc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013d00:	2200      	movs	r2, #0
 8013d02:	fbbc f9f3 	udiv	r9, ip, r3
 8013d06:	4610      	mov	r0, r2
 8013d08:	fb03 ca19 	mls	sl, r3, r9, ip
 8013d0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013d10:	2f09      	cmp	r7, #9
 8013d12:	d81b      	bhi.n	8013d4c <_strtol_l.constprop.0+0xa8>
 8013d14:	463c      	mov	r4, r7
 8013d16:	42a3      	cmp	r3, r4
 8013d18:	dd27      	ble.n	8013d6a <_strtol_l.constprop.0+0xc6>
 8013d1a:	1c57      	adds	r7, r2, #1
 8013d1c:	d007      	beq.n	8013d2e <_strtol_l.constprop.0+0x8a>
 8013d1e:	4581      	cmp	r9, r0
 8013d20:	d320      	bcc.n	8013d64 <_strtol_l.constprop.0+0xc0>
 8013d22:	d101      	bne.n	8013d28 <_strtol_l.constprop.0+0x84>
 8013d24:	45a2      	cmp	sl, r4
 8013d26:	db1d      	blt.n	8013d64 <_strtol_l.constprop.0+0xc0>
 8013d28:	fb00 4003 	mla	r0, r0, r3, r4
 8013d2c:	2201      	movs	r2, #1
 8013d2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d32:	e7eb      	b.n	8013d0c <_strtol_l.constprop.0+0x68>
 8013d34:	2c2b      	cmp	r4, #43	@ 0x2b
 8013d36:	bf04      	itt	eq
 8013d38:	782c      	ldrbeq	r4, [r5, #0]
 8013d3a:	1c95      	addeq	r5, r2, #2
 8013d3c:	e7cf      	b.n	8013cde <_strtol_l.constprop.0+0x3a>
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d1da      	bne.n	8013cf8 <_strtol_l.constprop.0+0x54>
 8013d42:	2c30      	cmp	r4, #48	@ 0x30
 8013d44:	bf0c      	ite	eq
 8013d46:	2308      	moveq	r3, #8
 8013d48:	230a      	movne	r3, #10
 8013d4a:	e7d5      	b.n	8013cf8 <_strtol_l.constprop.0+0x54>
 8013d4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013d50:	2f19      	cmp	r7, #25
 8013d52:	d801      	bhi.n	8013d58 <_strtol_l.constprop.0+0xb4>
 8013d54:	3c37      	subs	r4, #55	@ 0x37
 8013d56:	e7de      	b.n	8013d16 <_strtol_l.constprop.0+0x72>
 8013d58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013d5c:	2f19      	cmp	r7, #25
 8013d5e:	d804      	bhi.n	8013d6a <_strtol_l.constprop.0+0xc6>
 8013d60:	3c57      	subs	r4, #87	@ 0x57
 8013d62:	e7d8      	b.n	8013d16 <_strtol_l.constprop.0+0x72>
 8013d64:	f04f 32ff 	mov.w	r2, #4294967295
 8013d68:	e7e1      	b.n	8013d2e <_strtol_l.constprop.0+0x8a>
 8013d6a:	1c53      	adds	r3, r2, #1
 8013d6c:	d108      	bne.n	8013d80 <_strtol_l.constprop.0+0xdc>
 8013d6e:	2322      	movs	r3, #34	@ 0x22
 8013d70:	f8ce 3000 	str.w	r3, [lr]
 8013d74:	4660      	mov	r0, ip
 8013d76:	f1b8 0f00 	cmp.w	r8, #0
 8013d7a:	d0a0      	beq.n	8013cbe <_strtol_l.constprop.0+0x1a>
 8013d7c:	1e69      	subs	r1, r5, #1
 8013d7e:	e006      	b.n	8013d8e <_strtol_l.constprop.0+0xea>
 8013d80:	b106      	cbz	r6, 8013d84 <_strtol_l.constprop.0+0xe0>
 8013d82:	4240      	negs	r0, r0
 8013d84:	f1b8 0f00 	cmp.w	r8, #0
 8013d88:	d099      	beq.n	8013cbe <_strtol_l.constprop.0+0x1a>
 8013d8a:	2a00      	cmp	r2, #0
 8013d8c:	d1f6      	bne.n	8013d7c <_strtol_l.constprop.0+0xd8>
 8013d8e:	f8c8 1000 	str.w	r1, [r8]
 8013d92:	e794      	b.n	8013cbe <_strtol_l.constprop.0+0x1a>
 8013d94:	08017171 	.word	0x08017171

08013d98 <_strtol_r>:
 8013d98:	f7ff bf84 	b.w	8013ca4 <_strtol_l.constprop.0>

08013d9c <__ssputs_r>:
 8013d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013da0:	688e      	ldr	r6, [r1, #8]
 8013da2:	461f      	mov	r7, r3
 8013da4:	42be      	cmp	r6, r7
 8013da6:	680b      	ldr	r3, [r1, #0]
 8013da8:	4682      	mov	sl, r0
 8013daa:	460c      	mov	r4, r1
 8013dac:	4690      	mov	r8, r2
 8013dae:	d82d      	bhi.n	8013e0c <__ssputs_r+0x70>
 8013db0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013db4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013db8:	d026      	beq.n	8013e08 <__ssputs_r+0x6c>
 8013dba:	6965      	ldr	r5, [r4, #20]
 8013dbc:	6909      	ldr	r1, [r1, #16]
 8013dbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013dc2:	eba3 0901 	sub.w	r9, r3, r1
 8013dc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013dca:	1c7b      	adds	r3, r7, #1
 8013dcc:	444b      	add	r3, r9
 8013dce:	106d      	asrs	r5, r5, #1
 8013dd0:	429d      	cmp	r5, r3
 8013dd2:	bf38      	it	cc
 8013dd4:	461d      	movcc	r5, r3
 8013dd6:	0553      	lsls	r3, r2, #21
 8013dd8:	d527      	bpl.n	8013e2a <__ssputs_r+0x8e>
 8013dda:	4629      	mov	r1, r5
 8013ddc:	f7fe fc1c 	bl	8012618 <_malloc_r>
 8013de0:	4606      	mov	r6, r0
 8013de2:	b360      	cbz	r0, 8013e3e <__ssputs_r+0xa2>
 8013de4:	6921      	ldr	r1, [r4, #16]
 8013de6:	464a      	mov	r2, r9
 8013de8:	f7fd fd3f 	bl	801186a <memcpy>
 8013dec:	89a3      	ldrh	r3, [r4, #12]
 8013dee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013df6:	81a3      	strh	r3, [r4, #12]
 8013df8:	6126      	str	r6, [r4, #16]
 8013dfa:	6165      	str	r5, [r4, #20]
 8013dfc:	444e      	add	r6, r9
 8013dfe:	eba5 0509 	sub.w	r5, r5, r9
 8013e02:	6026      	str	r6, [r4, #0]
 8013e04:	60a5      	str	r5, [r4, #8]
 8013e06:	463e      	mov	r6, r7
 8013e08:	42be      	cmp	r6, r7
 8013e0a:	d900      	bls.n	8013e0e <__ssputs_r+0x72>
 8013e0c:	463e      	mov	r6, r7
 8013e0e:	6820      	ldr	r0, [r4, #0]
 8013e10:	4632      	mov	r2, r6
 8013e12:	4641      	mov	r1, r8
 8013e14:	f000 fd53 	bl	80148be <memmove>
 8013e18:	68a3      	ldr	r3, [r4, #8]
 8013e1a:	1b9b      	subs	r3, r3, r6
 8013e1c:	60a3      	str	r3, [r4, #8]
 8013e1e:	6823      	ldr	r3, [r4, #0]
 8013e20:	4433      	add	r3, r6
 8013e22:	6023      	str	r3, [r4, #0]
 8013e24:	2000      	movs	r0, #0
 8013e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e2a:	462a      	mov	r2, r5
 8013e2c:	f001 f8f9 	bl	8015022 <_realloc_r>
 8013e30:	4606      	mov	r6, r0
 8013e32:	2800      	cmp	r0, #0
 8013e34:	d1e0      	bne.n	8013df8 <__ssputs_r+0x5c>
 8013e36:	6921      	ldr	r1, [r4, #16]
 8013e38:	4650      	mov	r0, sl
 8013e3a:	f7fe fb79 	bl	8012530 <_free_r>
 8013e3e:	230c      	movs	r3, #12
 8013e40:	f8ca 3000 	str.w	r3, [sl]
 8013e44:	89a3      	ldrh	r3, [r4, #12]
 8013e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e4a:	81a3      	strh	r3, [r4, #12]
 8013e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8013e50:	e7e9      	b.n	8013e26 <__ssputs_r+0x8a>
	...

08013e54 <_svfiprintf_r>:
 8013e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e58:	4698      	mov	r8, r3
 8013e5a:	898b      	ldrh	r3, [r1, #12]
 8013e5c:	061b      	lsls	r3, r3, #24
 8013e5e:	b09d      	sub	sp, #116	@ 0x74
 8013e60:	4607      	mov	r7, r0
 8013e62:	460d      	mov	r5, r1
 8013e64:	4614      	mov	r4, r2
 8013e66:	d510      	bpl.n	8013e8a <_svfiprintf_r+0x36>
 8013e68:	690b      	ldr	r3, [r1, #16]
 8013e6a:	b973      	cbnz	r3, 8013e8a <_svfiprintf_r+0x36>
 8013e6c:	2140      	movs	r1, #64	@ 0x40
 8013e6e:	f7fe fbd3 	bl	8012618 <_malloc_r>
 8013e72:	6028      	str	r0, [r5, #0]
 8013e74:	6128      	str	r0, [r5, #16]
 8013e76:	b930      	cbnz	r0, 8013e86 <_svfiprintf_r+0x32>
 8013e78:	230c      	movs	r3, #12
 8013e7a:	603b      	str	r3, [r7, #0]
 8013e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8013e80:	b01d      	add	sp, #116	@ 0x74
 8013e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e86:	2340      	movs	r3, #64	@ 0x40
 8013e88:	616b      	str	r3, [r5, #20]
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e8e:	2320      	movs	r3, #32
 8013e90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013e94:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e98:	2330      	movs	r3, #48	@ 0x30
 8013e9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014038 <_svfiprintf_r+0x1e4>
 8013e9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013ea2:	f04f 0901 	mov.w	r9, #1
 8013ea6:	4623      	mov	r3, r4
 8013ea8:	469a      	mov	sl, r3
 8013eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013eae:	b10a      	cbz	r2, 8013eb4 <_svfiprintf_r+0x60>
 8013eb0:	2a25      	cmp	r2, #37	@ 0x25
 8013eb2:	d1f9      	bne.n	8013ea8 <_svfiprintf_r+0x54>
 8013eb4:	ebba 0b04 	subs.w	fp, sl, r4
 8013eb8:	d00b      	beq.n	8013ed2 <_svfiprintf_r+0x7e>
 8013eba:	465b      	mov	r3, fp
 8013ebc:	4622      	mov	r2, r4
 8013ebe:	4629      	mov	r1, r5
 8013ec0:	4638      	mov	r0, r7
 8013ec2:	f7ff ff6b 	bl	8013d9c <__ssputs_r>
 8013ec6:	3001      	adds	r0, #1
 8013ec8:	f000 80a7 	beq.w	801401a <_svfiprintf_r+0x1c6>
 8013ecc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ece:	445a      	add	r2, fp
 8013ed0:	9209      	str	r2, [sp, #36]	@ 0x24
 8013ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	f000 809f 	beq.w	801401a <_svfiprintf_r+0x1c6>
 8013edc:	2300      	movs	r3, #0
 8013ede:	f04f 32ff 	mov.w	r2, #4294967295
 8013ee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ee6:	f10a 0a01 	add.w	sl, sl, #1
 8013eea:	9304      	str	r3, [sp, #16]
 8013eec:	9307      	str	r3, [sp, #28]
 8013eee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013ef2:	931a      	str	r3, [sp, #104]	@ 0x68
 8013ef4:	4654      	mov	r4, sl
 8013ef6:	2205      	movs	r2, #5
 8013ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013efc:	484e      	ldr	r0, [pc, #312]	@ (8014038 <_svfiprintf_r+0x1e4>)
 8013efe:	f7ec f98f 	bl	8000220 <memchr>
 8013f02:	9a04      	ldr	r2, [sp, #16]
 8013f04:	b9d8      	cbnz	r0, 8013f3e <_svfiprintf_r+0xea>
 8013f06:	06d0      	lsls	r0, r2, #27
 8013f08:	bf44      	itt	mi
 8013f0a:	2320      	movmi	r3, #32
 8013f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f10:	0711      	lsls	r1, r2, #28
 8013f12:	bf44      	itt	mi
 8013f14:	232b      	movmi	r3, #43	@ 0x2b
 8013f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8013f1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f20:	d015      	beq.n	8013f4e <_svfiprintf_r+0xfa>
 8013f22:	9a07      	ldr	r2, [sp, #28]
 8013f24:	4654      	mov	r4, sl
 8013f26:	2000      	movs	r0, #0
 8013f28:	f04f 0c0a 	mov.w	ip, #10
 8013f2c:	4621      	mov	r1, r4
 8013f2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f32:	3b30      	subs	r3, #48	@ 0x30
 8013f34:	2b09      	cmp	r3, #9
 8013f36:	d94b      	bls.n	8013fd0 <_svfiprintf_r+0x17c>
 8013f38:	b1b0      	cbz	r0, 8013f68 <_svfiprintf_r+0x114>
 8013f3a:	9207      	str	r2, [sp, #28]
 8013f3c:	e014      	b.n	8013f68 <_svfiprintf_r+0x114>
 8013f3e:	eba0 0308 	sub.w	r3, r0, r8
 8013f42:	fa09 f303 	lsl.w	r3, r9, r3
 8013f46:	4313      	orrs	r3, r2
 8013f48:	9304      	str	r3, [sp, #16]
 8013f4a:	46a2      	mov	sl, r4
 8013f4c:	e7d2      	b.n	8013ef4 <_svfiprintf_r+0xa0>
 8013f4e:	9b03      	ldr	r3, [sp, #12]
 8013f50:	1d19      	adds	r1, r3, #4
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	9103      	str	r1, [sp, #12]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	bfbb      	ittet	lt
 8013f5a:	425b      	neglt	r3, r3
 8013f5c:	f042 0202 	orrlt.w	r2, r2, #2
 8013f60:	9307      	strge	r3, [sp, #28]
 8013f62:	9307      	strlt	r3, [sp, #28]
 8013f64:	bfb8      	it	lt
 8013f66:	9204      	strlt	r2, [sp, #16]
 8013f68:	7823      	ldrb	r3, [r4, #0]
 8013f6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8013f6c:	d10a      	bne.n	8013f84 <_svfiprintf_r+0x130>
 8013f6e:	7863      	ldrb	r3, [r4, #1]
 8013f70:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f72:	d132      	bne.n	8013fda <_svfiprintf_r+0x186>
 8013f74:	9b03      	ldr	r3, [sp, #12]
 8013f76:	1d1a      	adds	r2, r3, #4
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	9203      	str	r2, [sp, #12]
 8013f7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013f80:	3402      	adds	r4, #2
 8013f82:	9305      	str	r3, [sp, #20]
 8013f84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014048 <_svfiprintf_r+0x1f4>
 8013f88:	7821      	ldrb	r1, [r4, #0]
 8013f8a:	2203      	movs	r2, #3
 8013f8c:	4650      	mov	r0, sl
 8013f8e:	f7ec f947 	bl	8000220 <memchr>
 8013f92:	b138      	cbz	r0, 8013fa4 <_svfiprintf_r+0x150>
 8013f94:	9b04      	ldr	r3, [sp, #16]
 8013f96:	eba0 000a 	sub.w	r0, r0, sl
 8013f9a:	2240      	movs	r2, #64	@ 0x40
 8013f9c:	4082      	lsls	r2, r0
 8013f9e:	4313      	orrs	r3, r2
 8013fa0:	3401      	adds	r4, #1
 8013fa2:	9304      	str	r3, [sp, #16]
 8013fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fa8:	4824      	ldr	r0, [pc, #144]	@ (801403c <_svfiprintf_r+0x1e8>)
 8013faa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013fae:	2206      	movs	r2, #6
 8013fb0:	f7ec f936 	bl	8000220 <memchr>
 8013fb4:	2800      	cmp	r0, #0
 8013fb6:	d036      	beq.n	8014026 <_svfiprintf_r+0x1d2>
 8013fb8:	4b21      	ldr	r3, [pc, #132]	@ (8014040 <_svfiprintf_r+0x1ec>)
 8013fba:	bb1b      	cbnz	r3, 8014004 <_svfiprintf_r+0x1b0>
 8013fbc:	9b03      	ldr	r3, [sp, #12]
 8013fbe:	3307      	adds	r3, #7
 8013fc0:	f023 0307 	bic.w	r3, r3, #7
 8013fc4:	3308      	adds	r3, #8
 8013fc6:	9303      	str	r3, [sp, #12]
 8013fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fca:	4433      	add	r3, r6
 8013fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8013fce:	e76a      	b.n	8013ea6 <_svfiprintf_r+0x52>
 8013fd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8013fd4:	460c      	mov	r4, r1
 8013fd6:	2001      	movs	r0, #1
 8013fd8:	e7a8      	b.n	8013f2c <_svfiprintf_r+0xd8>
 8013fda:	2300      	movs	r3, #0
 8013fdc:	3401      	adds	r4, #1
 8013fde:	9305      	str	r3, [sp, #20]
 8013fe0:	4619      	mov	r1, r3
 8013fe2:	f04f 0c0a 	mov.w	ip, #10
 8013fe6:	4620      	mov	r0, r4
 8013fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013fec:	3a30      	subs	r2, #48	@ 0x30
 8013fee:	2a09      	cmp	r2, #9
 8013ff0:	d903      	bls.n	8013ffa <_svfiprintf_r+0x1a6>
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d0c6      	beq.n	8013f84 <_svfiprintf_r+0x130>
 8013ff6:	9105      	str	r1, [sp, #20]
 8013ff8:	e7c4      	b.n	8013f84 <_svfiprintf_r+0x130>
 8013ffa:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ffe:	4604      	mov	r4, r0
 8014000:	2301      	movs	r3, #1
 8014002:	e7f0      	b.n	8013fe6 <_svfiprintf_r+0x192>
 8014004:	ab03      	add	r3, sp, #12
 8014006:	9300      	str	r3, [sp, #0]
 8014008:	462a      	mov	r2, r5
 801400a:	4b0e      	ldr	r3, [pc, #56]	@ (8014044 <_svfiprintf_r+0x1f0>)
 801400c:	a904      	add	r1, sp, #16
 801400e:	4638      	mov	r0, r7
 8014010:	f7fc fc7c 	bl	801090c <_printf_float>
 8014014:	1c42      	adds	r2, r0, #1
 8014016:	4606      	mov	r6, r0
 8014018:	d1d6      	bne.n	8013fc8 <_svfiprintf_r+0x174>
 801401a:	89ab      	ldrh	r3, [r5, #12]
 801401c:	065b      	lsls	r3, r3, #25
 801401e:	f53f af2d 	bmi.w	8013e7c <_svfiprintf_r+0x28>
 8014022:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014024:	e72c      	b.n	8013e80 <_svfiprintf_r+0x2c>
 8014026:	ab03      	add	r3, sp, #12
 8014028:	9300      	str	r3, [sp, #0]
 801402a:	462a      	mov	r2, r5
 801402c:	4b05      	ldr	r3, [pc, #20]	@ (8014044 <_svfiprintf_r+0x1f0>)
 801402e:	a904      	add	r1, sp, #16
 8014030:	4638      	mov	r0, r7
 8014032:	f7fc ff03 	bl	8010e3c <_printf_i>
 8014036:	e7ed      	b.n	8014014 <_svfiprintf_r+0x1c0>
 8014038:	08017271 	.word	0x08017271
 801403c:	0801727b 	.word	0x0801727b
 8014040:	0801090d 	.word	0x0801090d
 8014044:	08013d9d 	.word	0x08013d9d
 8014048:	08017277 	.word	0x08017277

0801404c <_sungetc_r>:
 801404c:	b538      	push	{r3, r4, r5, lr}
 801404e:	1c4b      	adds	r3, r1, #1
 8014050:	4614      	mov	r4, r2
 8014052:	d103      	bne.n	801405c <_sungetc_r+0x10>
 8014054:	f04f 35ff 	mov.w	r5, #4294967295
 8014058:	4628      	mov	r0, r5
 801405a:	bd38      	pop	{r3, r4, r5, pc}
 801405c:	8993      	ldrh	r3, [r2, #12]
 801405e:	f023 0320 	bic.w	r3, r3, #32
 8014062:	8193      	strh	r3, [r2, #12]
 8014064:	6853      	ldr	r3, [r2, #4]
 8014066:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8014068:	b2cd      	uxtb	r5, r1
 801406a:	b18a      	cbz	r2, 8014090 <_sungetc_r+0x44>
 801406c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801406e:	429a      	cmp	r2, r3
 8014070:	dd08      	ble.n	8014084 <_sungetc_r+0x38>
 8014072:	6823      	ldr	r3, [r4, #0]
 8014074:	1e5a      	subs	r2, r3, #1
 8014076:	6022      	str	r2, [r4, #0]
 8014078:	f803 5c01 	strb.w	r5, [r3, #-1]
 801407c:	6863      	ldr	r3, [r4, #4]
 801407e:	3301      	adds	r3, #1
 8014080:	6063      	str	r3, [r4, #4]
 8014082:	e7e9      	b.n	8014058 <_sungetc_r+0xc>
 8014084:	4621      	mov	r1, r4
 8014086:	f000 fbe0 	bl	801484a <__submore>
 801408a:	2800      	cmp	r0, #0
 801408c:	d0f1      	beq.n	8014072 <_sungetc_r+0x26>
 801408e:	e7e1      	b.n	8014054 <_sungetc_r+0x8>
 8014090:	6921      	ldr	r1, [r4, #16]
 8014092:	6822      	ldr	r2, [r4, #0]
 8014094:	b141      	cbz	r1, 80140a8 <_sungetc_r+0x5c>
 8014096:	4291      	cmp	r1, r2
 8014098:	d206      	bcs.n	80140a8 <_sungetc_r+0x5c>
 801409a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801409e:	42a9      	cmp	r1, r5
 80140a0:	d102      	bne.n	80140a8 <_sungetc_r+0x5c>
 80140a2:	3a01      	subs	r2, #1
 80140a4:	6022      	str	r2, [r4, #0]
 80140a6:	e7ea      	b.n	801407e <_sungetc_r+0x32>
 80140a8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80140ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80140b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80140b2:	2303      	movs	r3, #3
 80140b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80140b6:	4623      	mov	r3, r4
 80140b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80140bc:	6023      	str	r3, [r4, #0]
 80140be:	2301      	movs	r3, #1
 80140c0:	e7de      	b.n	8014080 <_sungetc_r+0x34>

080140c2 <__ssrefill_r>:
 80140c2:	b510      	push	{r4, lr}
 80140c4:	460c      	mov	r4, r1
 80140c6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80140c8:	b169      	cbz	r1, 80140e6 <__ssrefill_r+0x24>
 80140ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80140ce:	4299      	cmp	r1, r3
 80140d0:	d001      	beq.n	80140d6 <__ssrefill_r+0x14>
 80140d2:	f7fe fa2d 	bl	8012530 <_free_r>
 80140d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80140d8:	6063      	str	r3, [r4, #4]
 80140da:	2000      	movs	r0, #0
 80140dc:	6360      	str	r0, [r4, #52]	@ 0x34
 80140de:	b113      	cbz	r3, 80140e6 <__ssrefill_r+0x24>
 80140e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80140e2:	6023      	str	r3, [r4, #0]
 80140e4:	bd10      	pop	{r4, pc}
 80140e6:	6923      	ldr	r3, [r4, #16]
 80140e8:	6023      	str	r3, [r4, #0]
 80140ea:	2300      	movs	r3, #0
 80140ec:	6063      	str	r3, [r4, #4]
 80140ee:	89a3      	ldrh	r3, [r4, #12]
 80140f0:	f043 0320 	orr.w	r3, r3, #32
 80140f4:	81a3      	strh	r3, [r4, #12]
 80140f6:	f04f 30ff 	mov.w	r0, #4294967295
 80140fa:	e7f3      	b.n	80140e4 <__ssrefill_r+0x22>

080140fc <__ssvfiscanf_r>:
 80140fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014100:	460c      	mov	r4, r1
 8014102:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8014106:	2100      	movs	r1, #0
 8014108:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801410c:	49a5      	ldr	r1, [pc, #660]	@ (80143a4 <__ssvfiscanf_r+0x2a8>)
 801410e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8014110:	f10d 0804 	add.w	r8, sp, #4
 8014114:	49a4      	ldr	r1, [pc, #656]	@ (80143a8 <__ssvfiscanf_r+0x2ac>)
 8014116:	4fa5      	ldr	r7, [pc, #660]	@ (80143ac <__ssvfiscanf_r+0x2b0>)
 8014118:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801411c:	4606      	mov	r6, r0
 801411e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8014120:	9300      	str	r3, [sp, #0]
 8014122:	7813      	ldrb	r3, [r2, #0]
 8014124:	2b00      	cmp	r3, #0
 8014126:	f000 8158 	beq.w	80143da <__ssvfiscanf_r+0x2de>
 801412a:	5cf9      	ldrb	r1, [r7, r3]
 801412c:	f011 0108 	ands.w	r1, r1, #8
 8014130:	f102 0501 	add.w	r5, r2, #1
 8014134:	d019      	beq.n	801416a <__ssvfiscanf_r+0x6e>
 8014136:	6863      	ldr	r3, [r4, #4]
 8014138:	2b00      	cmp	r3, #0
 801413a:	dd0f      	ble.n	801415c <__ssvfiscanf_r+0x60>
 801413c:	6823      	ldr	r3, [r4, #0]
 801413e:	781a      	ldrb	r2, [r3, #0]
 8014140:	5cba      	ldrb	r2, [r7, r2]
 8014142:	0712      	lsls	r2, r2, #28
 8014144:	d401      	bmi.n	801414a <__ssvfiscanf_r+0x4e>
 8014146:	462a      	mov	r2, r5
 8014148:	e7eb      	b.n	8014122 <__ssvfiscanf_r+0x26>
 801414a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801414c:	3201      	adds	r2, #1
 801414e:	9245      	str	r2, [sp, #276]	@ 0x114
 8014150:	6862      	ldr	r2, [r4, #4]
 8014152:	3301      	adds	r3, #1
 8014154:	3a01      	subs	r2, #1
 8014156:	6062      	str	r2, [r4, #4]
 8014158:	6023      	str	r3, [r4, #0]
 801415a:	e7ec      	b.n	8014136 <__ssvfiscanf_r+0x3a>
 801415c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801415e:	4621      	mov	r1, r4
 8014160:	4630      	mov	r0, r6
 8014162:	4798      	blx	r3
 8014164:	2800      	cmp	r0, #0
 8014166:	d0e9      	beq.n	801413c <__ssvfiscanf_r+0x40>
 8014168:	e7ed      	b.n	8014146 <__ssvfiscanf_r+0x4a>
 801416a:	2b25      	cmp	r3, #37	@ 0x25
 801416c:	d012      	beq.n	8014194 <__ssvfiscanf_r+0x98>
 801416e:	4699      	mov	r9, r3
 8014170:	6863      	ldr	r3, [r4, #4]
 8014172:	2b00      	cmp	r3, #0
 8014174:	f340 8093 	ble.w	801429e <__ssvfiscanf_r+0x1a2>
 8014178:	6822      	ldr	r2, [r4, #0]
 801417a:	7813      	ldrb	r3, [r2, #0]
 801417c:	454b      	cmp	r3, r9
 801417e:	f040 812c 	bne.w	80143da <__ssvfiscanf_r+0x2de>
 8014182:	6863      	ldr	r3, [r4, #4]
 8014184:	3b01      	subs	r3, #1
 8014186:	6063      	str	r3, [r4, #4]
 8014188:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801418a:	3201      	adds	r2, #1
 801418c:	3301      	adds	r3, #1
 801418e:	6022      	str	r2, [r4, #0]
 8014190:	9345      	str	r3, [sp, #276]	@ 0x114
 8014192:	e7d8      	b.n	8014146 <__ssvfiscanf_r+0x4a>
 8014194:	9141      	str	r1, [sp, #260]	@ 0x104
 8014196:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014198:	7853      	ldrb	r3, [r2, #1]
 801419a:	2b2a      	cmp	r3, #42	@ 0x2a
 801419c:	bf02      	ittt	eq
 801419e:	2310      	moveq	r3, #16
 80141a0:	1c95      	addeq	r5, r2, #2
 80141a2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80141a4:	220a      	movs	r2, #10
 80141a6:	46a9      	mov	r9, r5
 80141a8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80141ac:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80141b0:	2b09      	cmp	r3, #9
 80141b2:	d91e      	bls.n	80141f2 <__ssvfiscanf_r+0xf6>
 80141b4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80143b0 <__ssvfiscanf_r+0x2b4>
 80141b8:	2203      	movs	r2, #3
 80141ba:	4650      	mov	r0, sl
 80141bc:	f7ec f830 	bl	8000220 <memchr>
 80141c0:	b138      	cbz	r0, 80141d2 <__ssvfiscanf_r+0xd6>
 80141c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80141c4:	eba0 000a 	sub.w	r0, r0, sl
 80141c8:	2301      	movs	r3, #1
 80141ca:	4083      	lsls	r3, r0
 80141cc:	4313      	orrs	r3, r2
 80141ce:	9341      	str	r3, [sp, #260]	@ 0x104
 80141d0:	464d      	mov	r5, r9
 80141d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80141d6:	2b78      	cmp	r3, #120	@ 0x78
 80141d8:	d806      	bhi.n	80141e8 <__ssvfiscanf_r+0xec>
 80141da:	2b57      	cmp	r3, #87	@ 0x57
 80141dc:	d810      	bhi.n	8014200 <__ssvfiscanf_r+0x104>
 80141de:	2b25      	cmp	r3, #37	@ 0x25
 80141e0:	d0c5      	beq.n	801416e <__ssvfiscanf_r+0x72>
 80141e2:	d857      	bhi.n	8014294 <__ssvfiscanf_r+0x198>
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d065      	beq.n	80142b4 <__ssvfiscanf_r+0x1b8>
 80141e8:	2303      	movs	r3, #3
 80141ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 80141ec:	230a      	movs	r3, #10
 80141ee:	9342      	str	r3, [sp, #264]	@ 0x108
 80141f0:	e078      	b.n	80142e4 <__ssvfiscanf_r+0x1e8>
 80141f2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80141f4:	fb02 1103 	mla	r1, r2, r3, r1
 80141f8:	3930      	subs	r1, #48	@ 0x30
 80141fa:	9143      	str	r1, [sp, #268]	@ 0x10c
 80141fc:	464d      	mov	r5, r9
 80141fe:	e7d2      	b.n	80141a6 <__ssvfiscanf_r+0xaa>
 8014200:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8014204:	2a20      	cmp	r2, #32
 8014206:	d8ef      	bhi.n	80141e8 <__ssvfiscanf_r+0xec>
 8014208:	a101      	add	r1, pc, #4	@ (adr r1, 8014210 <__ssvfiscanf_r+0x114>)
 801420a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801420e:	bf00      	nop
 8014210:	080142c3 	.word	0x080142c3
 8014214:	080141e9 	.word	0x080141e9
 8014218:	080141e9 	.word	0x080141e9
 801421c:	0801431d 	.word	0x0801431d
 8014220:	080141e9 	.word	0x080141e9
 8014224:	080141e9 	.word	0x080141e9
 8014228:	080141e9 	.word	0x080141e9
 801422c:	080141e9 	.word	0x080141e9
 8014230:	080141e9 	.word	0x080141e9
 8014234:	080141e9 	.word	0x080141e9
 8014238:	080141e9 	.word	0x080141e9
 801423c:	08014333 	.word	0x08014333
 8014240:	08014319 	.word	0x08014319
 8014244:	0801429b 	.word	0x0801429b
 8014248:	0801429b 	.word	0x0801429b
 801424c:	0801429b 	.word	0x0801429b
 8014250:	080141e9 	.word	0x080141e9
 8014254:	080142d5 	.word	0x080142d5
 8014258:	080141e9 	.word	0x080141e9
 801425c:	080141e9 	.word	0x080141e9
 8014260:	080141e9 	.word	0x080141e9
 8014264:	080141e9 	.word	0x080141e9
 8014268:	08014343 	.word	0x08014343
 801426c:	080142dd 	.word	0x080142dd
 8014270:	080142bb 	.word	0x080142bb
 8014274:	080141e9 	.word	0x080141e9
 8014278:	080141e9 	.word	0x080141e9
 801427c:	0801433f 	.word	0x0801433f
 8014280:	080141e9 	.word	0x080141e9
 8014284:	08014319 	.word	0x08014319
 8014288:	080141e9 	.word	0x080141e9
 801428c:	080141e9 	.word	0x080141e9
 8014290:	080142c3 	.word	0x080142c3
 8014294:	3b45      	subs	r3, #69	@ 0x45
 8014296:	2b02      	cmp	r3, #2
 8014298:	d8a6      	bhi.n	80141e8 <__ssvfiscanf_r+0xec>
 801429a:	2305      	movs	r3, #5
 801429c:	e021      	b.n	80142e2 <__ssvfiscanf_r+0x1e6>
 801429e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80142a0:	4621      	mov	r1, r4
 80142a2:	4630      	mov	r0, r6
 80142a4:	4798      	blx	r3
 80142a6:	2800      	cmp	r0, #0
 80142a8:	f43f af66 	beq.w	8014178 <__ssvfiscanf_r+0x7c>
 80142ac:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80142ae:	2800      	cmp	r0, #0
 80142b0:	f040 808b 	bne.w	80143ca <__ssvfiscanf_r+0x2ce>
 80142b4:	f04f 30ff 	mov.w	r0, #4294967295
 80142b8:	e08b      	b.n	80143d2 <__ssvfiscanf_r+0x2d6>
 80142ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80142bc:	f042 0220 	orr.w	r2, r2, #32
 80142c0:	9241      	str	r2, [sp, #260]	@ 0x104
 80142c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80142c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80142c8:	9241      	str	r2, [sp, #260]	@ 0x104
 80142ca:	2210      	movs	r2, #16
 80142cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80142ce:	9242      	str	r2, [sp, #264]	@ 0x108
 80142d0:	d902      	bls.n	80142d8 <__ssvfiscanf_r+0x1dc>
 80142d2:	e005      	b.n	80142e0 <__ssvfiscanf_r+0x1e4>
 80142d4:	2300      	movs	r3, #0
 80142d6:	9342      	str	r3, [sp, #264]	@ 0x108
 80142d8:	2303      	movs	r3, #3
 80142da:	e002      	b.n	80142e2 <__ssvfiscanf_r+0x1e6>
 80142dc:	2308      	movs	r3, #8
 80142de:	9342      	str	r3, [sp, #264]	@ 0x108
 80142e0:	2304      	movs	r3, #4
 80142e2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80142e4:	6863      	ldr	r3, [r4, #4]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	dd39      	ble.n	801435e <__ssvfiscanf_r+0x262>
 80142ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80142ec:	0659      	lsls	r1, r3, #25
 80142ee:	d404      	bmi.n	80142fa <__ssvfiscanf_r+0x1fe>
 80142f0:	6823      	ldr	r3, [r4, #0]
 80142f2:	781a      	ldrb	r2, [r3, #0]
 80142f4:	5cba      	ldrb	r2, [r7, r2]
 80142f6:	0712      	lsls	r2, r2, #28
 80142f8:	d438      	bmi.n	801436c <__ssvfiscanf_r+0x270>
 80142fa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80142fc:	2b02      	cmp	r3, #2
 80142fe:	dc47      	bgt.n	8014390 <__ssvfiscanf_r+0x294>
 8014300:	466b      	mov	r3, sp
 8014302:	4622      	mov	r2, r4
 8014304:	a941      	add	r1, sp, #260	@ 0x104
 8014306:	4630      	mov	r0, r6
 8014308:	f000 f86c 	bl	80143e4 <_scanf_chars>
 801430c:	2801      	cmp	r0, #1
 801430e:	d064      	beq.n	80143da <__ssvfiscanf_r+0x2de>
 8014310:	2802      	cmp	r0, #2
 8014312:	f47f af18 	bne.w	8014146 <__ssvfiscanf_r+0x4a>
 8014316:	e7c9      	b.n	80142ac <__ssvfiscanf_r+0x1b0>
 8014318:	220a      	movs	r2, #10
 801431a:	e7d7      	b.n	80142cc <__ssvfiscanf_r+0x1d0>
 801431c:	4629      	mov	r1, r5
 801431e:	4640      	mov	r0, r8
 8014320:	f000 fa5a 	bl	80147d8 <__sccl>
 8014324:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801432a:	9341      	str	r3, [sp, #260]	@ 0x104
 801432c:	4605      	mov	r5, r0
 801432e:	2301      	movs	r3, #1
 8014330:	e7d7      	b.n	80142e2 <__ssvfiscanf_r+0x1e6>
 8014332:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014338:	9341      	str	r3, [sp, #260]	@ 0x104
 801433a:	2300      	movs	r3, #0
 801433c:	e7d1      	b.n	80142e2 <__ssvfiscanf_r+0x1e6>
 801433e:	2302      	movs	r3, #2
 8014340:	e7cf      	b.n	80142e2 <__ssvfiscanf_r+0x1e6>
 8014342:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8014344:	06c3      	lsls	r3, r0, #27
 8014346:	f53f aefe 	bmi.w	8014146 <__ssvfiscanf_r+0x4a>
 801434a:	9b00      	ldr	r3, [sp, #0]
 801434c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801434e:	1d19      	adds	r1, r3, #4
 8014350:	9100      	str	r1, [sp, #0]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	07c0      	lsls	r0, r0, #31
 8014356:	bf4c      	ite	mi
 8014358:	801a      	strhmi	r2, [r3, #0]
 801435a:	601a      	strpl	r2, [r3, #0]
 801435c:	e6f3      	b.n	8014146 <__ssvfiscanf_r+0x4a>
 801435e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014360:	4621      	mov	r1, r4
 8014362:	4630      	mov	r0, r6
 8014364:	4798      	blx	r3
 8014366:	2800      	cmp	r0, #0
 8014368:	d0bf      	beq.n	80142ea <__ssvfiscanf_r+0x1ee>
 801436a:	e79f      	b.n	80142ac <__ssvfiscanf_r+0x1b0>
 801436c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801436e:	3201      	adds	r2, #1
 8014370:	9245      	str	r2, [sp, #276]	@ 0x114
 8014372:	6862      	ldr	r2, [r4, #4]
 8014374:	3a01      	subs	r2, #1
 8014376:	2a00      	cmp	r2, #0
 8014378:	6062      	str	r2, [r4, #4]
 801437a:	dd02      	ble.n	8014382 <__ssvfiscanf_r+0x286>
 801437c:	3301      	adds	r3, #1
 801437e:	6023      	str	r3, [r4, #0]
 8014380:	e7b6      	b.n	80142f0 <__ssvfiscanf_r+0x1f4>
 8014382:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014384:	4621      	mov	r1, r4
 8014386:	4630      	mov	r0, r6
 8014388:	4798      	blx	r3
 801438a:	2800      	cmp	r0, #0
 801438c:	d0b0      	beq.n	80142f0 <__ssvfiscanf_r+0x1f4>
 801438e:	e78d      	b.n	80142ac <__ssvfiscanf_r+0x1b0>
 8014390:	2b04      	cmp	r3, #4
 8014392:	dc0f      	bgt.n	80143b4 <__ssvfiscanf_r+0x2b8>
 8014394:	466b      	mov	r3, sp
 8014396:	4622      	mov	r2, r4
 8014398:	a941      	add	r1, sp, #260	@ 0x104
 801439a:	4630      	mov	r0, r6
 801439c:	f000 f87c 	bl	8014498 <_scanf_i>
 80143a0:	e7b4      	b.n	801430c <__ssvfiscanf_r+0x210>
 80143a2:	bf00      	nop
 80143a4:	0801404d 	.word	0x0801404d
 80143a8:	080140c3 	.word	0x080140c3
 80143ac:	08017171 	.word	0x08017171
 80143b0:	08017277 	.word	0x08017277
 80143b4:	4b0a      	ldr	r3, [pc, #40]	@ (80143e0 <__ssvfiscanf_r+0x2e4>)
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	f43f aec5 	beq.w	8014146 <__ssvfiscanf_r+0x4a>
 80143bc:	466b      	mov	r3, sp
 80143be:	4622      	mov	r2, r4
 80143c0:	a941      	add	r1, sp, #260	@ 0x104
 80143c2:	4630      	mov	r0, r6
 80143c4:	f7fc fe5a 	bl	801107c <_scanf_float>
 80143c8:	e7a0      	b.n	801430c <__ssvfiscanf_r+0x210>
 80143ca:	89a3      	ldrh	r3, [r4, #12]
 80143cc:	065b      	lsls	r3, r3, #25
 80143ce:	f53f af71 	bmi.w	80142b4 <__ssvfiscanf_r+0x1b8>
 80143d2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80143d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143da:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80143dc:	e7f9      	b.n	80143d2 <__ssvfiscanf_r+0x2d6>
 80143de:	bf00      	nop
 80143e0:	0801107d 	.word	0x0801107d

080143e4 <_scanf_chars>:
 80143e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143e8:	4615      	mov	r5, r2
 80143ea:	688a      	ldr	r2, [r1, #8]
 80143ec:	4680      	mov	r8, r0
 80143ee:	460c      	mov	r4, r1
 80143f0:	b932      	cbnz	r2, 8014400 <_scanf_chars+0x1c>
 80143f2:	698a      	ldr	r2, [r1, #24]
 80143f4:	2a00      	cmp	r2, #0
 80143f6:	bf14      	ite	ne
 80143f8:	f04f 32ff 	movne.w	r2, #4294967295
 80143fc:	2201      	moveq	r2, #1
 80143fe:	608a      	str	r2, [r1, #8]
 8014400:	6822      	ldr	r2, [r4, #0]
 8014402:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8014494 <_scanf_chars+0xb0>
 8014406:	06d1      	lsls	r1, r2, #27
 8014408:	bf5f      	itttt	pl
 801440a:	681a      	ldrpl	r2, [r3, #0]
 801440c:	1d11      	addpl	r1, r2, #4
 801440e:	6019      	strpl	r1, [r3, #0]
 8014410:	6816      	ldrpl	r6, [r2, #0]
 8014412:	2700      	movs	r7, #0
 8014414:	69a0      	ldr	r0, [r4, #24]
 8014416:	b188      	cbz	r0, 801443c <_scanf_chars+0x58>
 8014418:	2801      	cmp	r0, #1
 801441a:	d107      	bne.n	801442c <_scanf_chars+0x48>
 801441c:	682b      	ldr	r3, [r5, #0]
 801441e:	781a      	ldrb	r2, [r3, #0]
 8014420:	6963      	ldr	r3, [r4, #20]
 8014422:	5c9b      	ldrb	r3, [r3, r2]
 8014424:	b953      	cbnz	r3, 801443c <_scanf_chars+0x58>
 8014426:	2f00      	cmp	r7, #0
 8014428:	d031      	beq.n	801448e <_scanf_chars+0xaa>
 801442a:	e022      	b.n	8014472 <_scanf_chars+0x8e>
 801442c:	2802      	cmp	r0, #2
 801442e:	d120      	bne.n	8014472 <_scanf_chars+0x8e>
 8014430:	682b      	ldr	r3, [r5, #0]
 8014432:	781b      	ldrb	r3, [r3, #0]
 8014434:	f819 3003 	ldrb.w	r3, [r9, r3]
 8014438:	071b      	lsls	r3, r3, #28
 801443a:	d41a      	bmi.n	8014472 <_scanf_chars+0x8e>
 801443c:	6823      	ldr	r3, [r4, #0]
 801443e:	06da      	lsls	r2, r3, #27
 8014440:	bf5e      	ittt	pl
 8014442:	682b      	ldrpl	r3, [r5, #0]
 8014444:	781b      	ldrbpl	r3, [r3, #0]
 8014446:	f806 3b01 	strbpl.w	r3, [r6], #1
 801444a:	682a      	ldr	r2, [r5, #0]
 801444c:	686b      	ldr	r3, [r5, #4]
 801444e:	3201      	adds	r2, #1
 8014450:	602a      	str	r2, [r5, #0]
 8014452:	68a2      	ldr	r2, [r4, #8]
 8014454:	3b01      	subs	r3, #1
 8014456:	3a01      	subs	r2, #1
 8014458:	606b      	str	r3, [r5, #4]
 801445a:	3701      	adds	r7, #1
 801445c:	60a2      	str	r2, [r4, #8]
 801445e:	b142      	cbz	r2, 8014472 <_scanf_chars+0x8e>
 8014460:	2b00      	cmp	r3, #0
 8014462:	dcd7      	bgt.n	8014414 <_scanf_chars+0x30>
 8014464:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014468:	4629      	mov	r1, r5
 801446a:	4640      	mov	r0, r8
 801446c:	4798      	blx	r3
 801446e:	2800      	cmp	r0, #0
 8014470:	d0d0      	beq.n	8014414 <_scanf_chars+0x30>
 8014472:	6823      	ldr	r3, [r4, #0]
 8014474:	f013 0310 	ands.w	r3, r3, #16
 8014478:	d105      	bne.n	8014486 <_scanf_chars+0xa2>
 801447a:	68e2      	ldr	r2, [r4, #12]
 801447c:	3201      	adds	r2, #1
 801447e:	60e2      	str	r2, [r4, #12]
 8014480:	69a2      	ldr	r2, [r4, #24]
 8014482:	b102      	cbz	r2, 8014486 <_scanf_chars+0xa2>
 8014484:	7033      	strb	r3, [r6, #0]
 8014486:	6923      	ldr	r3, [r4, #16]
 8014488:	443b      	add	r3, r7
 801448a:	6123      	str	r3, [r4, #16]
 801448c:	2000      	movs	r0, #0
 801448e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014492:	bf00      	nop
 8014494:	08017171 	.word	0x08017171

08014498 <_scanf_i>:
 8014498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801449c:	4698      	mov	r8, r3
 801449e:	4b74      	ldr	r3, [pc, #464]	@ (8014670 <_scanf_i+0x1d8>)
 80144a0:	460c      	mov	r4, r1
 80144a2:	4682      	mov	sl, r0
 80144a4:	4616      	mov	r6, r2
 80144a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80144aa:	b087      	sub	sp, #28
 80144ac:	ab03      	add	r3, sp, #12
 80144ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80144b2:	4b70      	ldr	r3, [pc, #448]	@ (8014674 <_scanf_i+0x1dc>)
 80144b4:	69a1      	ldr	r1, [r4, #24]
 80144b6:	4a70      	ldr	r2, [pc, #448]	@ (8014678 <_scanf_i+0x1e0>)
 80144b8:	2903      	cmp	r1, #3
 80144ba:	bf08      	it	eq
 80144bc:	461a      	moveq	r2, r3
 80144be:	68a3      	ldr	r3, [r4, #8]
 80144c0:	9201      	str	r2, [sp, #4]
 80144c2:	1e5a      	subs	r2, r3, #1
 80144c4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80144c8:	bf88      	it	hi
 80144ca:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80144ce:	4627      	mov	r7, r4
 80144d0:	bf82      	ittt	hi
 80144d2:	eb03 0905 	addhi.w	r9, r3, r5
 80144d6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80144da:	60a3      	strhi	r3, [r4, #8]
 80144dc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80144e0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80144e4:	bf98      	it	ls
 80144e6:	f04f 0900 	movls.w	r9, #0
 80144ea:	6023      	str	r3, [r4, #0]
 80144ec:	463d      	mov	r5, r7
 80144ee:	f04f 0b00 	mov.w	fp, #0
 80144f2:	6831      	ldr	r1, [r6, #0]
 80144f4:	ab03      	add	r3, sp, #12
 80144f6:	7809      	ldrb	r1, [r1, #0]
 80144f8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80144fc:	2202      	movs	r2, #2
 80144fe:	f7eb fe8f 	bl	8000220 <memchr>
 8014502:	b328      	cbz	r0, 8014550 <_scanf_i+0xb8>
 8014504:	f1bb 0f01 	cmp.w	fp, #1
 8014508:	d159      	bne.n	80145be <_scanf_i+0x126>
 801450a:	6862      	ldr	r2, [r4, #4]
 801450c:	b92a      	cbnz	r2, 801451a <_scanf_i+0x82>
 801450e:	6822      	ldr	r2, [r4, #0]
 8014510:	2108      	movs	r1, #8
 8014512:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014516:	6061      	str	r1, [r4, #4]
 8014518:	6022      	str	r2, [r4, #0]
 801451a:	6822      	ldr	r2, [r4, #0]
 801451c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8014520:	6022      	str	r2, [r4, #0]
 8014522:	68a2      	ldr	r2, [r4, #8]
 8014524:	1e51      	subs	r1, r2, #1
 8014526:	60a1      	str	r1, [r4, #8]
 8014528:	b192      	cbz	r2, 8014550 <_scanf_i+0xb8>
 801452a:	6832      	ldr	r2, [r6, #0]
 801452c:	1c51      	adds	r1, r2, #1
 801452e:	6031      	str	r1, [r6, #0]
 8014530:	7812      	ldrb	r2, [r2, #0]
 8014532:	f805 2b01 	strb.w	r2, [r5], #1
 8014536:	6872      	ldr	r2, [r6, #4]
 8014538:	3a01      	subs	r2, #1
 801453a:	2a00      	cmp	r2, #0
 801453c:	6072      	str	r2, [r6, #4]
 801453e:	dc07      	bgt.n	8014550 <_scanf_i+0xb8>
 8014540:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8014544:	4631      	mov	r1, r6
 8014546:	4650      	mov	r0, sl
 8014548:	4790      	blx	r2
 801454a:	2800      	cmp	r0, #0
 801454c:	f040 8085 	bne.w	801465a <_scanf_i+0x1c2>
 8014550:	f10b 0b01 	add.w	fp, fp, #1
 8014554:	f1bb 0f03 	cmp.w	fp, #3
 8014558:	d1cb      	bne.n	80144f2 <_scanf_i+0x5a>
 801455a:	6863      	ldr	r3, [r4, #4]
 801455c:	b90b      	cbnz	r3, 8014562 <_scanf_i+0xca>
 801455e:	230a      	movs	r3, #10
 8014560:	6063      	str	r3, [r4, #4]
 8014562:	6863      	ldr	r3, [r4, #4]
 8014564:	4945      	ldr	r1, [pc, #276]	@ (801467c <_scanf_i+0x1e4>)
 8014566:	6960      	ldr	r0, [r4, #20]
 8014568:	1ac9      	subs	r1, r1, r3
 801456a:	f000 f935 	bl	80147d8 <__sccl>
 801456e:	f04f 0b00 	mov.w	fp, #0
 8014572:	68a3      	ldr	r3, [r4, #8]
 8014574:	6822      	ldr	r2, [r4, #0]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d03d      	beq.n	80145f6 <_scanf_i+0x15e>
 801457a:	6831      	ldr	r1, [r6, #0]
 801457c:	6960      	ldr	r0, [r4, #20]
 801457e:	f891 c000 	ldrb.w	ip, [r1]
 8014582:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014586:	2800      	cmp	r0, #0
 8014588:	d035      	beq.n	80145f6 <_scanf_i+0x15e>
 801458a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801458e:	d124      	bne.n	80145da <_scanf_i+0x142>
 8014590:	0510      	lsls	r0, r2, #20
 8014592:	d522      	bpl.n	80145da <_scanf_i+0x142>
 8014594:	f10b 0b01 	add.w	fp, fp, #1
 8014598:	f1b9 0f00 	cmp.w	r9, #0
 801459c:	d003      	beq.n	80145a6 <_scanf_i+0x10e>
 801459e:	3301      	adds	r3, #1
 80145a0:	f109 39ff 	add.w	r9, r9, #4294967295
 80145a4:	60a3      	str	r3, [r4, #8]
 80145a6:	6873      	ldr	r3, [r6, #4]
 80145a8:	3b01      	subs	r3, #1
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	6073      	str	r3, [r6, #4]
 80145ae:	dd1b      	ble.n	80145e8 <_scanf_i+0x150>
 80145b0:	6833      	ldr	r3, [r6, #0]
 80145b2:	3301      	adds	r3, #1
 80145b4:	6033      	str	r3, [r6, #0]
 80145b6:	68a3      	ldr	r3, [r4, #8]
 80145b8:	3b01      	subs	r3, #1
 80145ba:	60a3      	str	r3, [r4, #8]
 80145bc:	e7d9      	b.n	8014572 <_scanf_i+0xda>
 80145be:	f1bb 0f02 	cmp.w	fp, #2
 80145c2:	d1ae      	bne.n	8014522 <_scanf_i+0x8a>
 80145c4:	6822      	ldr	r2, [r4, #0]
 80145c6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80145ca:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80145ce:	d1bf      	bne.n	8014550 <_scanf_i+0xb8>
 80145d0:	2110      	movs	r1, #16
 80145d2:	6061      	str	r1, [r4, #4]
 80145d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80145d8:	e7a2      	b.n	8014520 <_scanf_i+0x88>
 80145da:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80145de:	6022      	str	r2, [r4, #0]
 80145e0:	780b      	ldrb	r3, [r1, #0]
 80145e2:	f805 3b01 	strb.w	r3, [r5], #1
 80145e6:	e7de      	b.n	80145a6 <_scanf_i+0x10e>
 80145e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80145ec:	4631      	mov	r1, r6
 80145ee:	4650      	mov	r0, sl
 80145f0:	4798      	blx	r3
 80145f2:	2800      	cmp	r0, #0
 80145f4:	d0df      	beq.n	80145b6 <_scanf_i+0x11e>
 80145f6:	6823      	ldr	r3, [r4, #0]
 80145f8:	05d9      	lsls	r1, r3, #23
 80145fa:	d50d      	bpl.n	8014618 <_scanf_i+0x180>
 80145fc:	42bd      	cmp	r5, r7
 80145fe:	d909      	bls.n	8014614 <_scanf_i+0x17c>
 8014600:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014604:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014608:	4632      	mov	r2, r6
 801460a:	4650      	mov	r0, sl
 801460c:	4798      	blx	r3
 801460e:	f105 39ff 	add.w	r9, r5, #4294967295
 8014612:	464d      	mov	r5, r9
 8014614:	42bd      	cmp	r5, r7
 8014616:	d028      	beq.n	801466a <_scanf_i+0x1d2>
 8014618:	6822      	ldr	r2, [r4, #0]
 801461a:	f012 0210 	ands.w	r2, r2, #16
 801461e:	d113      	bne.n	8014648 <_scanf_i+0x1b0>
 8014620:	702a      	strb	r2, [r5, #0]
 8014622:	6863      	ldr	r3, [r4, #4]
 8014624:	9e01      	ldr	r6, [sp, #4]
 8014626:	4639      	mov	r1, r7
 8014628:	4650      	mov	r0, sl
 801462a:	47b0      	blx	r6
 801462c:	f8d8 3000 	ldr.w	r3, [r8]
 8014630:	6821      	ldr	r1, [r4, #0]
 8014632:	1d1a      	adds	r2, r3, #4
 8014634:	f8c8 2000 	str.w	r2, [r8]
 8014638:	f011 0f20 	tst.w	r1, #32
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	d00f      	beq.n	8014660 <_scanf_i+0x1c8>
 8014640:	6018      	str	r0, [r3, #0]
 8014642:	68e3      	ldr	r3, [r4, #12]
 8014644:	3301      	adds	r3, #1
 8014646:	60e3      	str	r3, [r4, #12]
 8014648:	6923      	ldr	r3, [r4, #16]
 801464a:	1bed      	subs	r5, r5, r7
 801464c:	445d      	add	r5, fp
 801464e:	442b      	add	r3, r5
 8014650:	6123      	str	r3, [r4, #16]
 8014652:	2000      	movs	r0, #0
 8014654:	b007      	add	sp, #28
 8014656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801465a:	f04f 0b00 	mov.w	fp, #0
 801465e:	e7ca      	b.n	80145f6 <_scanf_i+0x15e>
 8014660:	07ca      	lsls	r2, r1, #31
 8014662:	bf4c      	ite	mi
 8014664:	8018      	strhmi	r0, [r3, #0]
 8014666:	6018      	strpl	r0, [r3, #0]
 8014668:	e7eb      	b.n	8014642 <_scanf_i+0x1aa>
 801466a:	2001      	movs	r0, #1
 801466c:	e7f2      	b.n	8014654 <_scanf_i+0x1bc>
 801466e:	bf00      	nop
 8014670:	08016eac 	.word	0x08016eac
 8014674:	08013d99 	.word	0x08013d99
 8014678:	0801515d 	.word	0x0801515d
 801467c:	08017292 	.word	0x08017292

08014680 <__sflush_r>:
 8014680:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014688:	0716      	lsls	r6, r2, #28
 801468a:	4605      	mov	r5, r0
 801468c:	460c      	mov	r4, r1
 801468e:	d454      	bmi.n	801473a <__sflush_r+0xba>
 8014690:	684b      	ldr	r3, [r1, #4]
 8014692:	2b00      	cmp	r3, #0
 8014694:	dc02      	bgt.n	801469c <__sflush_r+0x1c>
 8014696:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014698:	2b00      	cmp	r3, #0
 801469a:	dd48      	ble.n	801472e <__sflush_r+0xae>
 801469c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801469e:	2e00      	cmp	r6, #0
 80146a0:	d045      	beq.n	801472e <__sflush_r+0xae>
 80146a2:	2300      	movs	r3, #0
 80146a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80146a8:	682f      	ldr	r7, [r5, #0]
 80146aa:	6a21      	ldr	r1, [r4, #32]
 80146ac:	602b      	str	r3, [r5, #0]
 80146ae:	d030      	beq.n	8014712 <__sflush_r+0x92>
 80146b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80146b2:	89a3      	ldrh	r3, [r4, #12]
 80146b4:	0759      	lsls	r1, r3, #29
 80146b6:	d505      	bpl.n	80146c4 <__sflush_r+0x44>
 80146b8:	6863      	ldr	r3, [r4, #4]
 80146ba:	1ad2      	subs	r2, r2, r3
 80146bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80146be:	b10b      	cbz	r3, 80146c4 <__sflush_r+0x44>
 80146c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80146c2:	1ad2      	subs	r2, r2, r3
 80146c4:	2300      	movs	r3, #0
 80146c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80146c8:	6a21      	ldr	r1, [r4, #32]
 80146ca:	4628      	mov	r0, r5
 80146cc:	47b0      	blx	r6
 80146ce:	1c43      	adds	r3, r0, #1
 80146d0:	89a3      	ldrh	r3, [r4, #12]
 80146d2:	d106      	bne.n	80146e2 <__sflush_r+0x62>
 80146d4:	6829      	ldr	r1, [r5, #0]
 80146d6:	291d      	cmp	r1, #29
 80146d8:	d82b      	bhi.n	8014732 <__sflush_r+0xb2>
 80146da:	4a2a      	ldr	r2, [pc, #168]	@ (8014784 <__sflush_r+0x104>)
 80146dc:	410a      	asrs	r2, r1
 80146de:	07d6      	lsls	r6, r2, #31
 80146e0:	d427      	bmi.n	8014732 <__sflush_r+0xb2>
 80146e2:	2200      	movs	r2, #0
 80146e4:	6062      	str	r2, [r4, #4]
 80146e6:	04d9      	lsls	r1, r3, #19
 80146e8:	6922      	ldr	r2, [r4, #16]
 80146ea:	6022      	str	r2, [r4, #0]
 80146ec:	d504      	bpl.n	80146f8 <__sflush_r+0x78>
 80146ee:	1c42      	adds	r2, r0, #1
 80146f0:	d101      	bne.n	80146f6 <__sflush_r+0x76>
 80146f2:	682b      	ldr	r3, [r5, #0]
 80146f4:	b903      	cbnz	r3, 80146f8 <__sflush_r+0x78>
 80146f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80146f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80146fa:	602f      	str	r7, [r5, #0]
 80146fc:	b1b9      	cbz	r1, 801472e <__sflush_r+0xae>
 80146fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014702:	4299      	cmp	r1, r3
 8014704:	d002      	beq.n	801470c <__sflush_r+0x8c>
 8014706:	4628      	mov	r0, r5
 8014708:	f7fd ff12 	bl	8012530 <_free_r>
 801470c:	2300      	movs	r3, #0
 801470e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014710:	e00d      	b.n	801472e <__sflush_r+0xae>
 8014712:	2301      	movs	r3, #1
 8014714:	4628      	mov	r0, r5
 8014716:	47b0      	blx	r6
 8014718:	4602      	mov	r2, r0
 801471a:	1c50      	adds	r0, r2, #1
 801471c:	d1c9      	bne.n	80146b2 <__sflush_r+0x32>
 801471e:	682b      	ldr	r3, [r5, #0]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d0c6      	beq.n	80146b2 <__sflush_r+0x32>
 8014724:	2b1d      	cmp	r3, #29
 8014726:	d001      	beq.n	801472c <__sflush_r+0xac>
 8014728:	2b16      	cmp	r3, #22
 801472a:	d11e      	bne.n	801476a <__sflush_r+0xea>
 801472c:	602f      	str	r7, [r5, #0]
 801472e:	2000      	movs	r0, #0
 8014730:	e022      	b.n	8014778 <__sflush_r+0xf8>
 8014732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014736:	b21b      	sxth	r3, r3
 8014738:	e01b      	b.n	8014772 <__sflush_r+0xf2>
 801473a:	690f      	ldr	r7, [r1, #16]
 801473c:	2f00      	cmp	r7, #0
 801473e:	d0f6      	beq.n	801472e <__sflush_r+0xae>
 8014740:	0793      	lsls	r3, r2, #30
 8014742:	680e      	ldr	r6, [r1, #0]
 8014744:	bf08      	it	eq
 8014746:	694b      	ldreq	r3, [r1, #20]
 8014748:	600f      	str	r7, [r1, #0]
 801474a:	bf18      	it	ne
 801474c:	2300      	movne	r3, #0
 801474e:	eba6 0807 	sub.w	r8, r6, r7
 8014752:	608b      	str	r3, [r1, #8]
 8014754:	f1b8 0f00 	cmp.w	r8, #0
 8014758:	dde9      	ble.n	801472e <__sflush_r+0xae>
 801475a:	6a21      	ldr	r1, [r4, #32]
 801475c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801475e:	4643      	mov	r3, r8
 8014760:	463a      	mov	r2, r7
 8014762:	4628      	mov	r0, r5
 8014764:	47b0      	blx	r6
 8014766:	2800      	cmp	r0, #0
 8014768:	dc08      	bgt.n	801477c <__sflush_r+0xfc>
 801476a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801476e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014772:	81a3      	strh	r3, [r4, #12]
 8014774:	f04f 30ff 	mov.w	r0, #4294967295
 8014778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801477c:	4407      	add	r7, r0
 801477e:	eba8 0800 	sub.w	r8, r8, r0
 8014782:	e7e7      	b.n	8014754 <__sflush_r+0xd4>
 8014784:	dfbffffe 	.word	0xdfbffffe

08014788 <_fflush_r>:
 8014788:	b538      	push	{r3, r4, r5, lr}
 801478a:	690b      	ldr	r3, [r1, #16]
 801478c:	4605      	mov	r5, r0
 801478e:	460c      	mov	r4, r1
 8014790:	b913      	cbnz	r3, 8014798 <_fflush_r+0x10>
 8014792:	2500      	movs	r5, #0
 8014794:	4628      	mov	r0, r5
 8014796:	bd38      	pop	{r3, r4, r5, pc}
 8014798:	b118      	cbz	r0, 80147a2 <_fflush_r+0x1a>
 801479a:	6a03      	ldr	r3, [r0, #32]
 801479c:	b90b      	cbnz	r3, 80147a2 <_fflush_r+0x1a>
 801479e:	f7fc ff0d 	bl	80115bc <__sinit>
 80147a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d0f3      	beq.n	8014792 <_fflush_r+0xa>
 80147aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80147ac:	07d0      	lsls	r0, r2, #31
 80147ae:	d404      	bmi.n	80147ba <_fflush_r+0x32>
 80147b0:	0599      	lsls	r1, r3, #22
 80147b2:	d402      	bmi.n	80147ba <_fflush_r+0x32>
 80147b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80147b6:	f7fd f856 	bl	8011866 <__retarget_lock_acquire_recursive>
 80147ba:	4628      	mov	r0, r5
 80147bc:	4621      	mov	r1, r4
 80147be:	f7ff ff5f 	bl	8014680 <__sflush_r>
 80147c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80147c4:	07da      	lsls	r2, r3, #31
 80147c6:	4605      	mov	r5, r0
 80147c8:	d4e4      	bmi.n	8014794 <_fflush_r+0xc>
 80147ca:	89a3      	ldrh	r3, [r4, #12]
 80147cc:	059b      	lsls	r3, r3, #22
 80147ce:	d4e1      	bmi.n	8014794 <_fflush_r+0xc>
 80147d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80147d2:	f7fd f849 	bl	8011868 <__retarget_lock_release_recursive>
 80147d6:	e7dd      	b.n	8014794 <_fflush_r+0xc>

080147d8 <__sccl>:
 80147d8:	b570      	push	{r4, r5, r6, lr}
 80147da:	780b      	ldrb	r3, [r1, #0]
 80147dc:	4604      	mov	r4, r0
 80147de:	2b5e      	cmp	r3, #94	@ 0x5e
 80147e0:	bf0b      	itete	eq
 80147e2:	784b      	ldrbeq	r3, [r1, #1]
 80147e4:	1c4a      	addne	r2, r1, #1
 80147e6:	1c8a      	addeq	r2, r1, #2
 80147e8:	2100      	movne	r1, #0
 80147ea:	bf08      	it	eq
 80147ec:	2101      	moveq	r1, #1
 80147ee:	3801      	subs	r0, #1
 80147f0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80147f4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80147f8:	42a8      	cmp	r0, r5
 80147fa:	d1fb      	bne.n	80147f4 <__sccl+0x1c>
 80147fc:	b90b      	cbnz	r3, 8014802 <__sccl+0x2a>
 80147fe:	1e50      	subs	r0, r2, #1
 8014800:	bd70      	pop	{r4, r5, r6, pc}
 8014802:	f081 0101 	eor.w	r1, r1, #1
 8014806:	54e1      	strb	r1, [r4, r3]
 8014808:	4610      	mov	r0, r2
 801480a:	4602      	mov	r2, r0
 801480c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014810:	2d2d      	cmp	r5, #45	@ 0x2d
 8014812:	d005      	beq.n	8014820 <__sccl+0x48>
 8014814:	2d5d      	cmp	r5, #93	@ 0x5d
 8014816:	d016      	beq.n	8014846 <__sccl+0x6e>
 8014818:	2d00      	cmp	r5, #0
 801481a:	d0f1      	beq.n	8014800 <__sccl+0x28>
 801481c:	462b      	mov	r3, r5
 801481e:	e7f2      	b.n	8014806 <__sccl+0x2e>
 8014820:	7846      	ldrb	r6, [r0, #1]
 8014822:	2e5d      	cmp	r6, #93	@ 0x5d
 8014824:	d0fa      	beq.n	801481c <__sccl+0x44>
 8014826:	42b3      	cmp	r3, r6
 8014828:	dcf8      	bgt.n	801481c <__sccl+0x44>
 801482a:	3002      	adds	r0, #2
 801482c:	461a      	mov	r2, r3
 801482e:	3201      	adds	r2, #1
 8014830:	4296      	cmp	r6, r2
 8014832:	54a1      	strb	r1, [r4, r2]
 8014834:	dcfb      	bgt.n	801482e <__sccl+0x56>
 8014836:	1af2      	subs	r2, r6, r3
 8014838:	3a01      	subs	r2, #1
 801483a:	1c5d      	adds	r5, r3, #1
 801483c:	42b3      	cmp	r3, r6
 801483e:	bfa8      	it	ge
 8014840:	2200      	movge	r2, #0
 8014842:	18ab      	adds	r3, r5, r2
 8014844:	e7e1      	b.n	801480a <__sccl+0x32>
 8014846:	4610      	mov	r0, r2
 8014848:	e7da      	b.n	8014800 <__sccl+0x28>

0801484a <__submore>:
 801484a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801484e:	460c      	mov	r4, r1
 8014850:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014852:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014856:	4299      	cmp	r1, r3
 8014858:	d11d      	bne.n	8014896 <__submore+0x4c>
 801485a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801485e:	f7fd fedb 	bl	8012618 <_malloc_r>
 8014862:	b918      	cbnz	r0, 801486c <__submore+0x22>
 8014864:	f04f 30ff 	mov.w	r0, #4294967295
 8014868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801486c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014870:	63a3      	str	r3, [r4, #56]	@ 0x38
 8014872:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8014876:	6360      	str	r0, [r4, #52]	@ 0x34
 8014878:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801487c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8014880:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8014884:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014888:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801488c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8014890:	6020      	str	r0, [r4, #0]
 8014892:	2000      	movs	r0, #0
 8014894:	e7e8      	b.n	8014868 <__submore+0x1e>
 8014896:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8014898:	0077      	lsls	r7, r6, #1
 801489a:	463a      	mov	r2, r7
 801489c:	f000 fbc1 	bl	8015022 <_realloc_r>
 80148a0:	4605      	mov	r5, r0
 80148a2:	2800      	cmp	r0, #0
 80148a4:	d0de      	beq.n	8014864 <__submore+0x1a>
 80148a6:	eb00 0806 	add.w	r8, r0, r6
 80148aa:	4601      	mov	r1, r0
 80148ac:	4632      	mov	r2, r6
 80148ae:	4640      	mov	r0, r8
 80148b0:	f7fc ffdb 	bl	801186a <memcpy>
 80148b4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80148b8:	f8c4 8000 	str.w	r8, [r4]
 80148bc:	e7e9      	b.n	8014892 <__submore+0x48>

080148be <memmove>:
 80148be:	4288      	cmp	r0, r1
 80148c0:	b510      	push	{r4, lr}
 80148c2:	eb01 0402 	add.w	r4, r1, r2
 80148c6:	d902      	bls.n	80148ce <memmove+0x10>
 80148c8:	4284      	cmp	r4, r0
 80148ca:	4623      	mov	r3, r4
 80148cc:	d807      	bhi.n	80148de <memmove+0x20>
 80148ce:	1e43      	subs	r3, r0, #1
 80148d0:	42a1      	cmp	r1, r4
 80148d2:	d008      	beq.n	80148e6 <memmove+0x28>
 80148d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80148d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80148dc:	e7f8      	b.n	80148d0 <memmove+0x12>
 80148de:	4402      	add	r2, r0
 80148e0:	4601      	mov	r1, r0
 80148e2:	428a      	cmp	r2, r1
 80148e4:	d100      	bne.n	80148e8 <memmove+0x2a>
 80148e6:	bd10      	pop	{r4, pc}
 80148e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80148ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80148f0:	e7f7      	b.n	80148e2 <memmove+0x24>
	...

080148f4 <_sbrk_r>:
 80148f4:	b538      	push	{r3, r4, r5, lr}
 80148f6:	4d06      	ldr	r5, [pc, #24]	@ (8014910 <_sbrk_r+0x1c>)
 80148f8:	2300      	movs	r3, #0
 80148fa:	4604      	mov	r4, r0
 80148fc:	4608      	mov	r0, r1
 80148fe:	602b      	str	r3, [r5, #0]
 8014900:	f7ef fc58 	bl	80041b4 <_sbrk>
 8014904:	1c43      	adds	r3, r0, #1
 8014906:	d102      	bne.n	801490e <_sbrk_r+0x1a>
 8014908:	682b      	ldr	r3, [r5, #0]
 801490a:	b103      	cbz	r3, 801490e <_sbrk_r+0x1a>
 801490c:	6023      	str	r3, [r4, #0]
 801490e:	bd38      	pop	{r3, r4, r5, pc}
 8014910:	20002698 	.word	0x20002698
 8014914:	00000000 	.word	0x00000000

08014918 <nan>:
 8014918:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014920 <nan+0x8>
 801491c:	4770      	bx	lr
 801491e:	bf00      	nop
 8014920:	00000000 	.word	0x00000000
 8014924:	7ff80000 	.word	0x7ff80000

08014928 <__assert_func>:
 8014928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801492a:	4614      	mov	r4, r2
 801492c:	461a      	mov	r2, r3
 801492e:	4b09      	ldr	r3, [pc, #36]	@ (8014954 <__assert_func+0x2c>)
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	4605      	mov	r5, r0
 8014934:	68d8      	ldr	r0, [r3, #12]
 8014936:	b954      	cbnz	r4, 801494e <__assert_func+0x26>
 8014938:	4b07      	ldr	r3, [pc, #28]	@ (8014958 <__assert_func+0x30>)
 801493a:	461c      	mov	r4, r3
 801493c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014940:	9100      	str	r1, [sp, #0]
 8014942:	462b      	mov	r3, r5
 8014944:	4905      	ldr	r1, [pc, #20]	@ (801495c <__assert_func+0x34>)
 8014946:	f000 fc19 	bl	801517c <fiprintf>
 801494a:	f000 fc29 	bl	80151a0 <abort>
 801494e:	4b04      	ldr	r3, [pc, #16]	@ (8014960 <__assert_func+0x38>)
 8014950:	e7f4      	b.n	801493c <__assert_func+0x14>
 8014952:	bf00      	nop
 8014954:	200001cc 	.word	0x200001cc
 8014958:	080172e0 	.word	0x080172e0
 801495c:	080172b2 	.word	0x080172b2
 8014960:	080172a5 	.word	0x080172a5

08014964 <_calloc_r>:
 8014964:	b570      	push	{r4, r5, r6, lr}
 8014966:	fba1 5402 	umull	r5, r4, r1, r2
 801496a:	b93c      	cbnz	r4, 801497c <_calloc_r+0x18>
 801496c:	4629      	mov	r1, r5
 801496e:	f7fd fe53 	bl	8012618 <_malloc_r>
 8014972:	4606      	mov	r6, r0
 8014974:	b928      	cbnz	r0, 8014982 <_calloc_r+0x1e>
 8014976:	2600      	movs	r6, #0
 8014978:	4630      	mov	r0, r6
 801497a:	bd70      	pop	{r4, r5, r6, pc}
 801497c:	220c      	movs	r2, #12
 801497e:	6002      	str	r2, [r0, #0]
 8014980:	e7f9      	b.n	8014976 <_calloc_r+0x12>
 8014982:	462a      	mov	r2, r5
 8014984:	4621      	mov	r1, r4
 8014986:	f7fc fede 	bl	8011746 <memset>
 801498a:	e7f5      	b.n	8014978 <_calloc_r+0x14>

0801498c <rshift>:
 801498c:	6903      	ldr	r3, [r0, #16]
 801498e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014992:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014996:	ea4f 1261 	mov.w	r2, r1, asr #5
 801499a:	f100 0414 	add.w	r4, r0, #20
 801499e:	dd45      	ble.n	8014a2c <rshift+0xa0>
 80149a0:	f011 011f 	ands.w	r1, r1, #31
 80149a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80149a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80149ac:	d10c      	bne.n	80149c8 <rshift+0x3c>
 80149ae:	f100 0710 	add.w	r7, r0, #16
 80149b2:	4629      	mov	r1, r5
 80149b4:	42b1      	cmp	r1, r6
 80149b6:	d334      	bcc.n	8014a22 <rshift+0x96>
 80149b8:	1a9b      	subs	r3, r3, r2
 80149ba:	009b      	lsls	r3, r3, #2
 80149bc:	1eea      	subs	r2, r5, #3
 80149be:	4296      	cmp	r6, r2
 80149c0:	bf38      	it	cc
 80149c2:	2300      	movcc	r3, #0
 80149c4:	4423      	add	r3, r4
 80149c6:	e015      	b.n	80149f4 <rshift+0x68>
 80149c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80149cc:	f1c1 0820 	rsb	r8, r1, #32
 80149d0:	40cf      	lsrs	r7, r1
 80149d2:	f105 0e04 	add.w	lr, r5, #4
 80149d6:	46a1      	mov	r9, r4
 80149d8:	4576      	cmp	r6, lr
 80149da:	46f4      	mov	ip, lr
 80149dc:	d815      	bhi.n	8014a0a <rshift+0x7e>
 80149de:	1a9a      	subs	r2, r3, r2
 80149e0:	0092      	lsls	r2, r2, #2
 80149e2:	3a04      	subs	r2, #4
 80149e4:	3501      	adds	r5, #1
 80149e6:	42ae      	cmp	r6, r5
 80149e8:	bf38      	it	cc
 80149ea:	2200      	movcc	r2, #0
 80149ec:	18a3      	adds	r3, r4, r2
 80149ee:	50a7      	str	r7, [r4, r2]
 80149f0:	b107      	cbz	r7, 80149f4 <rshift+0x68>
 80149f2:	3304      	adds	r3, #4
 80149f4:	1b1a      	subs	r2, r3, r4
 80149f6:	42a3      	cmp	r3, r4
 80149f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80149fc:	bf08      	it	eq
 80149fe:	2300      	moveq	r3, #0
 8014a00:	6102      	str	r2, [r0, #16]
 8014a02:	bf08      	it	eq
 8014a04:	6143      	streq	r3, [r0, #20]
 8014a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a0a:	f8dc c000 	ldr.w	ip, [ip]
 8014a0e:	fa0c fc08 	lsl.w	ip, ip, r8
 8014a12:	ea4c 0707 	orr.w	r7, ip, r7
 8014a16:	f849 7b04 	str.w	r7, [r9], #4
 8014a1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014a1e:	40cf      	lsrs	r7, r1
 8014a20:	e7da      	b.n	80149d8 <rshift+0x4c>
 8014a22:	f851 cb04 	ldr.w	ip, [r1], #4
 8014a26:	f847 cf04 	str.w	ip, [r7, #4]!
 8014a2a:	e7c3      	b.n	80149b4 <rshift+0x28>
 8014a2c:	4623      	mov	r3, r4
 8014a2e:	e7e1      	b.n	80149f4 <rshift+0x68>

08014a30 <__hexdig_fun>:
 8014a30:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014a34:	2b09      	cmp	r3, #9
 8014a36:	d802      	bhi.n	8014a3e <__hexdig_fun+0xe>
 8014a38:	3820      	subs	r0, #32
 8014a3a:	b2c0      	uxtb	r0, r0
 8014a3c:	4770      	bx	lr
 8014a3e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014a42:	2b05      	cmp	r3, #5
 8014a44:	d801      	bhi.n	8014a4a <__hexdig_fun+0x1a>
 8014a46:	3847      	subs	r0, #71	@ 0x47
 8014a48:	e7f7      	b.n	8014a3a <__hexdig_fun+0xa>
 8014a4a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014a4e:	2b05      	cmp	r3, #5
 8014a50:	d801      	bhi.n	8014a56 <__hexdig_fun+0x26>
 8014a52:	3827      	subs	r0, #39	@ 0x27
 8014a54:	e7f1      	b.n	8014a3a <__hexdig_fun+0xa>
 8014a56:	2000      	movs	r0, #0
 8014a58:	4770      	bx	lr
	...

08014a5c <__gethex>:
 8014a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a60:	b085      	sub	sp, #20
 8014a62:	468a      	mov	sl, r1
 8014a64:	9302      	str	r3, [sp, #8]
 8014a66:	680b      	ldr	r3, [r1, #0]
 8014a68:	9001      	str	r0, [sp, #4]
 8014a6a:	4690      	mov	r8, r2
 8014a6c:	1c9c      	adds	r4, r3, #2
 8014a6e:	46a1      	mov	r9, r4
 8014a70:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014a74:	2830      	cmp	r0, #48	@ 0x30
 8014a76:	d0fa      	beq.n	8014a6e <__gethex+0x12>
 8014a78:	eba9 0303 	sub.w	r3, r9, r3
 8014a7c:	f1a3 0b02 	sub.w	fp, r3, #2
 8014a80:	f7ff ffd6 	bl	8014a30 <__hexdig_fun>
 8014a84:	4605      	mov	r5, r0
 8014a86:	2800      	cmp	r0, #0
 8014a88:	d168      	bne.n	8014b5c <__gethex+0x100>
 8014a8a:	49a0      	ldr	r1, [pc, #640]	@ (8014d0c <__gethex+0x2b0>)
 8014a8c:	2201      	movs	r2, #1
 8014a8e:	4648      	mov	r0, r9
 8014a90:	f7fc fe61 	bl	8011756 <strncmp>
 8014a94:	4607      	mov	r7, r0
 8014a96:	2800      	cmp	r0, #0
 8014a98:	d167      	bne.n	8014b6a <__gethex+0x10e>
 8014a9a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014a9e:	4626      	mov	r6, r4
 8014aa0:	f7ff ffc6 	bl	8014a30 <__hexdig_fun>
 8014aa4:	2800      	cmp	r0, #0
 8014aa6:	d062      	beq.n	8014b6e <__gethex+0x112>
 8014aa8:	4623      	mov	r3, r4
 8014aaa:	7818      	ldrb	r0, [r3, #0]
 8014aac:	2830      	cmp	r0, #48	@ 0x30
 8014aae:	4699      	mov	r9, r3
 8014ab0:	f103 0301 	add.w	r3, r3, #1
 8014ab4:	d0f9      	beq.n	8014aaa <__gethex+0x4e>
 8014ab6:	f7ff ffbb 	bl	8014a30 <__hexdig_fun>
 8014aba:	fab0 f580 	clz	r5, r0
 8014abe:	096d      	lsrs	r5, r5, #5
 8014ac0:	f04f 0b01 	mov.w	fp, #1
 8014ac4:	464a      	mov	r2, r9
 8014ac6:	4616      	mov	r6, r2
 8014ac8:	3201      	adds	r2, #1
 8014aca:	7830      	ldrb	r0, [r6, #0]
 8014acc:	f7ff ffb0 	bl	8014a30 <__hexdig_fun>
 8014ad0:	2800      	cmp	r0, #0
 8014ad2:	d1f8      	bne.n	8014ac6 <__gethex+0x6a>
 8014ad4:	498d      	ldr	r1, [pc, #564]	@ (8014d0c <__gethex+0x2b0>)
 8014ad6:	2201      	movs	r2, #1
 8014ad8:	4630      	mov	r0, r6
 8014ada:	f7fc fe3c 	bl	8011756 <strncmp>
 8014ade:	2800      	cmp	r0, #0
 8014ae0:	d13f      	bne.n	8014b62 <__gethex+0x106>
 8014ae2:	b944      	cbnz	r4, 8014af6 <__gethex+0x9a>
 8014ae4:	1c74      	adds	r4, r6, #1
 8014ae6:	4622      	mov	r2, r4
 8014ae8:	4616      	mov	r6, r2
 8014aea:	3201      	adds	r2, #1
 8014aec:	7830      	ldrb	r0, [r6, #0]
 8014aee:	f7ff ff9f 	bl	8014a30 <__hexdig_fun>
 8014af2:	2800      	cmp	r0, #0
 8014af4:	d1f8      	bne.n	8014ae8 <__gethex+0x8c>
 8014af6:	1ba4      	subs	r4, r4, r6
 8014af8:	00a7      	lsls	r7, r4, #2
 8014afa:	7833      	ldrb	r3, [r6, #0]
 8014afc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014b00:	2b50      	cmp	r3, #80	@ 0x50
 8014b02:	d13e      	bne.n	8014b82 <__gethex+0x126>
 8014b04:	7873      	ldrb	r3, [r6, #1]
 8014b06:	2b2b      	cmp	r3, #43	@ 0x2b
 8014b08:	d033      	beq.n	8014b72 <__gethex+0x116>
 8014b0a:	2b2d      	cmp	r3, #45	@ 0x2d
 8014b0c:	d034      	beq.n	8014b78 <__gethex+0x11c>
 8014b0e:	1c71      	adds	r1, r6, #1
 8014b10:	2400      	movs	r4, #0
 8014b12:	7808      	ldrb	r0, [r1, #0]
 8014b14:	f7ff ff8c 	bl	8014a30 <__hexdig_fun>
 8014b18:	1e43      	subs	r3, r0, #1
 8014b1a:	b2db      	uxtb	r3, r3
 8014b1c:	2b18      	cmp	r3, #24
 8014b1e:	d830      	bhi.n	8014b82 <__gethex+0x126>
 8014b20:	f1a0 0210 	sub.w	r2, r0, #16
 8014b24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014b28:	f7ff ff82 	bl	8014a30 <__hexdig_fun>
 8014b2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8014b30:	fa5f fc8c 	uxtb.w	ip, ip
 8014b34:	f1bc 0f18 	cmp.w	ip, #24
 8014b38:	f04f 030a 	mov.w	r3, #10
 8014b3c:	d91e      	bls.n	8014b7c <__gethex+0x120>
 8014b3e:	b104      	cbz	r4, 8014b42 <__gethex+0xe6>
 8014b40:	4252      	negs	r2, r2
 8014b42:	4417      	add	r7, r2
 8014b44:	f8ca 1000 	str.w	r1, [sl]
 8014b48:	b1ed      	cbz	r5, 8014b86 <__gethex+0x12a>
 8014b4a:	f1bb 0f00 	cmp.w	fp, #0
 8014b4e:	bf0c      	ite	eq
 8014b50:	2506      	moveq	r5, #6
 8014b52:	2500      	movne	r5, #0
 8014b54:	4628      	mov	r0, r5
 8014b56:	b005      	add	sp, #20
 8014b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b5c:	2500      	movs	r5, #0
 8014b5e:	462c      	mov	r4, r5
 8014b60:	e7b0      	b.n	8014ac4 <__gethex+0x68>
 8014b62:	2c00      	cmp	r4, #0
 8014b64:	d1c7      	bne.n	8014af6 <__gethex+0x9a>
 8014b66:	4627      	mov	r7, r4
 8014b68:	e7c7      	b.n	8014afa <__gethex+0x9e>
 8014b6a:	464e      	mov	r6, r9
 8014b6c:	462f      	mov	r7, r5
 8014b6e:	2501      	movs	r5, #1
 8014b70:	e7c3      	b.n	8014afa <__gethex+0x9e>
 8014b72:	2400      	movs	r4, #0
 8014b74:	1cb1      	adds	r1, r6, #2
 8014b76:	e7cc      	b.n	8014b12 <__gethex+0xb6>
 8014b78:	2401      	movs	r4, #1
 8014b7a:	e7fb      	b.n	8014b74 <__gethex+0x118>
 8014b7c:	fb03 0002 	mla	r0, r3, r2, r0
 8014b80:	e7ce      	b.n	8014b20 <__gethex+0xc4>
 8014b82:	4631      	mov	r1, r6
 8014b84:	e7de      	b.n	8014b44 <__gethex+0xe8>
 8014b86:	eba6 0309 	sub.w	r3, r6, r9
 8014b8a:	3b01      	subs	r3, #1
 8014b8c:	4629      	mov	r1, r5
 8014b8e:	2b07      	cmp	r3, #7
 8014b90:	dc0a      	bgt.n	8014ba8 <__gethex+0x14c>
 8014b92:	9801      	ldr	r0, [sp, #4]
 8014b94:	f7fd fdcc 	bl	8012730 <_Balloc>
 8014b98:	4604      	mov	r4, r0
 8014b9a:	b940      	cbnz	r0, 8014bae <__gethex+0x152>
 8014b9c:	4b5c      	ldr	r3, [pc, #368]	@ (8014d10 <__gethex+0x2b4>)
 8014b9e:	4602      	mov	r2, r0
 8014ba0:	21e4      	movs	r1, #228	@ 0xe4
 8014ba2:	485c      	ldr	r0, [pc, #368]	@ (8014d14 <__gethex+0x2b8>)
 8014ba4:	f7ff fec0 	bl	8014928 <__assert_func>
 8014ba8:	3101      	adds	r1, #1
 8014baa:	105b      	asrs	r3, r3, #1
 8014bac:	e7ef      	b.n	8014b8e <__gethex+0x132>
 8014bae:	f100 0a14 	add.w	sl, r0, #20
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	4655      	mov	r5, sl
 8014bb6:	469b      	mov	fp, r3
 8014bb8:	45b1      	cmp	r9, r6
 8014bba:	d337      	bcc.n	8014c2c <__gethex+0x1d0>
 8014bbc:	f845 bb04 	str.w	fp, [r5], #4
 8014bc0:	eba5 050a 	sub.w	r5, r5, sl
 8014bc4:	10ad      	asrs	r5, r5, #2
 8014bc6:	6125      	str	r5, [r4, #16]
 8014bc8:	4658      	mov	r0, fp
 8014bca:	f7fd fea3 	bl	8012914 <__hi0bits>
 8014bce:	016d      	lsls	r5, r5, #5
 8014bd0:	f8d8 6000 	ldr.w	r6, [r8]
 8014bd4:	1a2d      	subs	r5, r5, r0
 8014bd6:	42b5      	cmp	r5, r6
 8014bd8:	dd54      	ble.n	8014c84 <__gethex+0x228>
 8014bda:	1bad      	subs	r5, r5, r6
 8014bdc:	4629      	mov	r1, r5
 8014bde:	4620      	mov	r0, r4
 8014be0:	f7fe fa37 	bl	8013052 <__any_on>
 8014be4:	4681      	mov	r9, r0
 8014be6:	b178      	cbz	r0, 8014c08 <__gethex+0x1ac>
 8014be8:	1e6b      	subs	r3, r5, #1
 8014bea:	1159      	asrs	r1, r3, #5
 8014bec:	f003 021f 	and.w	r2, r3, #31
 8014bf0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014bf4:	f04f 0901 	mov.w	r9, #1
 8014bf8:	fa09 f202 	lsl.w	r2, r9, r2
 8014bfc:	420a      	tst	r2, r1
 8014bfe:	d003      	beq.n	8014c08 <__gethex+0x1ac>
 8014c00:	454b      	cmp	r3, r9
 8014c02:	dc36      	bgt.n	8014c72 <__gethex+0x216>
 8014c04:	f04f 0902 	mov.w	r9, #2
 8014c08:	4629      	mov	r1, r5
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	f7ff febe 	bl	801498c <rshift>
 8014c10:	442f      	add	r7, r5
 8014c12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014c16:	42bb      	cmp	r3, r7
 8014c18:	da42      	bge.n	8014ca0 <__gethex+0x244>
 8014c1a:	9801      	ldr	r0, [sp, #4]
 8014c1c:	4621      	mov	r1, r4
 8014c1e:	f7fd fdc7 	bl	80127b0 <_Bfree>
 8014c22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014c24:	2300      	movs	r3, #0
 8014c26:	6013      	str	r3, [r2, #0]
 8014c28:	25a3      	movs	r5, #163	@ 0xa3
 8014c2a:	e793      	b.n	8014b54 <__gethex+0xf8>
 8014c2c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014c30:	2a2e      	cmp	r2, #46	@ 0x2e
 8014c32:	d012      	beq.n	8014c5a <__gethex+0x1fe>
 8014c34:	2b20      	cmp	r3, #32
 8014c36:	d104      	bne.n	8014c42 <__gethex+0x1e6>
 8014c38:	f845 bb04 	str.w	fp, [r5], #4
 8014c3c:	f04f 0b00 	mov.w	fp, #0
 8014c40:	465b      	mov	r3, fp
 8014c42:	7830      	ldrb	r0, [r6, #0]
 8014c44:	9303      	str	r3, [sp, #12]
 8014c46:	f7ff fef3 	bl	8014a30 <__hexdig_fun>
 8014c4a:	9b03      	ldr	r3, [sp, #12]
 8014c4c:	f000 000f 	and.w	r0, r0, #15
 8014c50:	4098      	lsls	r0, r3
 8014c52:	ea4b 0b00 	orr.w	fp, fp, r0
 8014c56:	3304      	adds	r3, #4
 8014c58:	e7ae      	b.n	8014bb8 <__gethex+0x15c>
 8014c5a:	45b1      	cmp	r9, r6
 8014c5c:	d8ea      	bhi.n	8014c34 <__gethex+0x1d8>
 8014c5e:	492b      	ldr	r1, [pc, #172]	@ (8014d0c <__gethex+0x2b0>)
 8014c60:	9303      	str	r3, [sp, #12]
 8014c62:	2201      	movs	r2, #1
 8014c64:	4630      	mov	r0, r6
 8014c66:	f7fc fd76 	bl	8011756 <strncmp>
 8014c6a:	9b03      	ldr	r3, [sp, #12]
 8014c6c:	2800      	cmp	r0, #0
 8014c6e:	d1e1      	bne.n	8014c34 <__gethex+0x1d8>
 8014c70:	e7a2      	b.n	8014bb8 <__gethex+0x15c>
 8014c72:	1ea9      	subs	r1, r5, #2
 8014c74:	4620      	mov	r0, r4
 8014c76:	f7fe f9ec 	bl	8013052 <__any_on>
 8014c7a:	2800      	cmp	r0, #0
 8014c7c:	d0c2      	beq.n	8014c04 <__gethex+0x1a8>
 8014c7e:	f04f 0903 	mov.w	r9, #3
 8014c82:	e7c1      	b.n	8014c08 <__gethex+0x1ac>
 8014c84:	da09      	bge.n	8014c9a <__gethex+0x23e>
 8014c86:	1b75      	subs	r5, r6, r5
 8014c88:	4621      	mov	r1, r4
 8014c8a:	9801      	ldr	r0, [sp, #4]
 8014c8c:	462a      	mov	r2, r5
 8014c8e:	f7fd ffa7 	bl	8012be0 <__lshift>
 8014c92:	1b7f      	subs	r7, r7, r5
 8014c94:	4604      	mov	r4, r0
 8014c96:	f100 0a14 	add.w	sl, r0, #20
 8014c9a:	f04f 0900 	mov.w	r9, #0
 8014c9e:	e7b8      	b.n	8014c12 <__gethex+0x1b6>
 8014ca0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014ca4:	42bd      	cmp	r5, r7
 8014ca6:	dd6f      	ble.n	8014d88 <__gethex+0x32c>
 8014ca8:	1bed      	subs	r5, r5, r7
 8014caa:	42ae      	cmp	r6, r5
 8014cac:	dc34      	bgt.n	8014d18 <__gethex+0x2bc>
 8014cae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014cb2:	2b02      	cmp	r3, #2
 8014cb4:	d022      	beq.n	8014cfc <__gethex+0x2a0>
 8014cb6:	2b03      	cmp	r3, #3
 8014cb8:	d024      	beq.n	8014d04 <__gethex+0x2a8>
 8014cba:	2b01      	cmp	r3, #1
 8014cbc:	d115      	bne.n	8014cea <__gethex+0x28e>
 8014cbe:	42ae      	cmp	r6, r5
 8014cc0:	d113      	bne.n	8014cea <__gethex+0x28e>
 8014cc2:	2e01      	cmp	r6, #1
 8014cc4:	d10b      	bne.n	8014cde <__gethex+0x282>
 8014cc6:	9a02      	ldr	r2, [sp, #8]
 8014cc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014ccc:	6013      	str	r3, [r2, #0]
 8014cce:	2301      	movs	r3, #1
 8014cd0:	6123      	str	r3, [r4, #16]
 8014cd2:	f8ca 3000 	str.w	r3, [sl]
 8014cd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014cd8:	2562      	movs	r5, #98	@ 0x62
 8014cda:	601c      	str	r4, [r3, #0]
 8014cdc:	e73a      	b.n	8014b54 <__gethex+0xf8>
 8014cde:	1e71      	subs	r1, r6, #1
 8014ce0:	4620      	mov	r0, r4
 8014ce2:	f7fe f9b6 	bl	8013052 <__any_on>
 8014ce6:	2800      	cmp	r0, #0
 8014ce8:	d1ed      	bne.n	8014cc6 <__gethex+0x26a>
 8014cea:	9801      	ldr	r0, [sp, #4]
 8014cec:	4621      	mov	r1, r4
 8014cee:	f7fd fd5f 	bl	80127b0 <_Bfree>
 8014cf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	6013      	str	r3, [r2, #0]
 8014cf8:	2550      	movs	r5, #80	@ 0x50
 8014cfa:	e72b      	b.n	8014b54 <__gethex+0xf8>
 8014cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d1f3      	bne.n	8014cea <__gethex+0x28e>
 8014d02:	e7e0      	b.n	8014cc6 <__gethex+0x26a>
 8014d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d1dd      	bne.n	8014cc6 <__gethex+0x26a>
 8014d0a:	e7ee      	b.n	8014cea <__gethex+0x28e>
 8014d0c:	08017118 	.word	0x08017118
 8014d10:	08016fab 	.word	0x08016fab
 8014d14:	080172e1 	.word	0x080172e1
 8014d18:	1e6f      	subs	r7, r5, #1
 8014d1a:	f1b9 0f00 	cmp.w	r9, #0
 8014d1e:	d130      	bne.n	8014d82 <__gethex+0x326>
 8014d20:	b127      	cbz	r7, 8014d2c <__gethex+0x2d0>
 8014d22:	4639      	mov	r1, r7
 8014d24:	4620      	mov	r0, r4
 8014d26:	f7fe f994 	bl	8013052 <__any_on>
 8014d2a:	4681      	mov	r9, r0
 8014d2c:	117a      	asrs	r2, r7, #5
 8014d2e:	2301      	movs	r3, #1
 8014d30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014d34:	f007 071f 	and.w	r7, r7, #31
 8014d38:	40bb      	lsls	r3, r7
 8014d3a:	4213      	tst	r3, r2
 8014d3c:	4629      	mov	r1, r5
 8014d3e:	4620      	mov	r0, r4
 8014d40:	bf18      	it	ne
 8014d42:	f049 0902 	orrne.w	r9, r9, #2
 8014d46:	f7ff fe21 	bl	801498c <rshift>
 8014d4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014d4e:	1b76      	subs	r6, r6, r5
 8014d50:	2502      	movs	r5, #2
 8014d52:	f1b9 0f00 	cmp.w	r9, #0
 8014d56:	d047      	beq.n	8014de8 <__gethex+0x38c>
 8014d58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014d5c:	2b02      	cmp	r3, #2
 8014d5e:	d015      	beq.n	8014d8c <__gethex+0x330>
 8014d60:	2b03      	cmp	r3, #3
 8014d62:	d017      	beq.n	8014d94 <__gethex+0x338>
 8014d64:	2b01      	cmp	r3, #1
 8014d66:	d109      	bne.n	8014d7c <__gethex+0x320>
 8014d68:	f019 0f02 	tst.w	r9, #2
 8014d6c:	d006      	beq.n	8014d7c <__gethex+0x320>
 8014d6e:	f8da 3000 	ldr.w	r3, [sl]
 8014d72:	ea49 0903 	orr.w	r9, r9, r3
 8014d76:	f019 0f01 	tst.w	r9, #1
 8014d7a:	d10e      	bne.n	8014d9a <__gethex+0x33e>
 8014d7c:	f045 0510 	orr.w	r5, r5, #16
 8014d80:	e032      	b.n	8014de8 <__gethex+0x38c>
 8014d82:	f04f 0901 	mov.w	r9, #1
 8014d86:	e7d1      	b.n	8014d2c <__gethex+0x2d0>
 8014d88:	2501      	movs	r5, #1
 8014d8a:	e7e2      	b.n	8014d52 <__gethex+0x2f6>
 8014d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014d8e:	f1c3 0301 	rsb	r3, r3, #1
 8014d92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d0f0      	beq.n	8014d7c <__gethex+0x320>
 8014d9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014d9e:	f104 0314 	add.w	r3, r4, #20
 8014da2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014da6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014daa:	f04f 0c00 	mov.w	ip, #0
 8014dae:	4618      	mov	r0, r3
 8014db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014db4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014db8:	d01b      	beq.n	8014df2 <__gethex+0x396>
 8014dba:	3201      	adds	r2, #1
 8014dbc:	6002      	str	r2, [r0, #0]
 8014dbe:	2d02      	cmp	r5, #2
 8014dc0:	f104 0314 	add.w	r3, r4, #20
 8014dc4:	d13c      	bne.n	8014e40 <__gethex+0x3e4>
 8014dc6:	f8d8 2000 	ldr.w	r2, [r8]
 8014dca:	3a01      	subs	r2, #1
 8014dcc:	42b2      	cmp	r2, r6
 8014dce:	d109      	bne.n	8014de4 <__gethex+0x388>
 8014dd0:	1171      	asrs	r1, r6, #5
 8014dd2:	2201      	movs	r2, #1
 8014dd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014dd8:	f006 061f 	and.w	r6, r6, #31
 8014ddc:	fa02 f606 	lsl.w	r6, r2, r6
 8014de0:	421e      	tst	r6, r3
 8014de2:	d13a      	bne.n	8014e5a <__gethex+0x3fe>
 8014de4:	f045 0520 	orr.w	r5, r5, #32
 8014de8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014dea:	601c      	str	r4, [r3, #0]
 8014dec:	9b02      	ldr	r3, [sp, #8]
 8014dee:	601f      	str	r7, [r3, #0]
 8014df0:	e6b0      	b.n	8014b54 <__gethex+0xf8>
 8014df2:	4299      	cmp	r1, r3
 8014df4:	f843 cc04 	str.w	ip, [r3, #-4]
 8014df8:	d8d9      	bhi.n	8014dae <__gethex+0x352>
 8014dfa:	68a3      	ldr	r3, [r4, #8]
 8014dfc:	459b      	cmp	fp, r3
 8014dfe:	db17      	blt.n	8014e30 <__gethex+0x3d4>
 8014e00:	6861      	ldr	r1, [r4, #4]
 8014e02:	9801      	ldr	r0, [sp, #4]
 8014e04:	3101      	adds	r1, #1
 8014e06:	f7fd fc93 	bl	8012730 <_Balloc>
 8014e0a:	4681      	mov	r9, r0
 8014e0c:	b918      	cbnz	r0, 8014e16 <__gethex+0x3ba>
 8014e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8014e78 <__gethex+0x41c>)
 8014e10:	4602      	mov	r2, r0
 8014e12:	2184      	movs	r1, #132	@ 0x84
 8014e14:	e6c5      	b.n	8014ba2 <__gethex+0x146>
 8014e16:	6922      	ldr	r2, [r4, #16]
 8014e18:	3202      	adds	r2, #2
 8014e1a:	f104 010c 	add.w	r1, r4, #12
 8014e1e:	0092      	lsls	r2, r2, #2
 8014e20:	300c      	adds	r0, #12
 8014e22:	f7fc fd22 	bl	801186a <memcpy>
 8014e26:	4621      	mov	r1, r4
 8014e28:	9801      	ldr	r0, [sp, #4]
 8014e2a:	f7fd fcc1 	bl	80127b0 <_Bfree>
 8014e2e:	464c      	mov	r4, r9
 8014e30:	6923      	ldr	r3, [r4, #16]
 8014e32:	1c5a      	adds	r2, r3, #1
 8014e34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014e38:	6122      	str	r2, [r4, #16]
 8014e3a:	2201      	movs	r2, #1
 8014e3c:	615a      	str	r2, [r3, #20]
 8014e3e:	e7be      	b.n	8014dbe <__gethex+0x362>
 8014e40:	6922      	ldr	r2, [r4, #16]
 8014e42:	455a      	cmp	r2, fp
 8014e44:	dd0b      	ble.n	8014e5e <__gethex+0x402>
 8014e46:	2101      	movs	r1, #1
 8014e48:	4620      	mov	r0, r4
 8014e4a:	f7ff fd9f 	bl	801498c <rshift>
 8014e4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014e52:	3701      	adds	r7, #1
 8014e54:	42bb      	cmp	r3, r7
 8014e56:	f6ff aee0 	blt.w	8014c1a <__gethex+0x1be>
 8014e5a:	2501      	movs	r5, #1
 8014e5c:	e7c2      	b.n	8014de4 <__gethex+0x388>
 8014e5e:	f016 061f 	ands.w	r6, r6, #31
 8014e62:	d0fa      	beq.n	8014e5a <__gethex+0x3fe>
 8014e64:	4453      	add	r3, sl
 8014e66:	f1c6 0620 	rsb	r6, r6, #32
 8014e6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014e6e:	f7fd fd51 	bl	8012914 <__hi0bits>
 8014e72:	42b0      	cmp	r0, r6
 8014e74:	dbe7      	blt.n	8014e46 <__gethex+0x3ea>
 8014e76:	e7f0      	b.n	8014e5a <__gethex+0x3fe>
 8014e78:	08016fab 	.word	0x08016fab

08014e7c <L_shift>:
 8014e7c:	f1c2 0208 	rsb	r2, r2, #8
 8014e80:	0092      	lsls	r2, r2, #2
 8014e82:	b570      	push	{r4, r5, r6, lr}
 8014e84:	f1c2 0620 	rsb	r6, r2, #32
 8014e88:	6843      	ldr	r3, [r0, #4]
 8014e8a:	6804      	ldr	r4, [r0, #0]
 8014e8c:	fa03 f506 	lsl.w	r5, r3, r6
 8014e90:	432c      	orrs	r4, r5
 8014e92:	40d3      	lsrs	r3, r2
 8014e94:	6004      	str	r4, [r0, #0]
 8014e96:	f840 3f04 	str.w	r3, [r0, #4]!
 8014e9a:	4288      	cmp	r0, r1
 8014e9c:	d3f4      	bcc.n	8014e88 <L_shift+0xc>
 8014e9e:	bd70      	pop	{r4, r5, r6, pc}

08014ea0 <__match>:
 8014ea0:	b530      	push	{r4, r5, lr}
 8014ea2:	6803      	ldr	r3, [r0, #0]
 8014ea4:	3301      	adds	r3, #1
 8014ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014eaa:	b914      	cbnz	r4, 8014eb2 <__match+0x12>
 8014eac:	6003      	str	r3, [r0, #0]
 8014eae:	2001      	movs	r0, #1
 8014eb0:	bd30      	pop	{r4, r5, pc}
 8014eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014eb6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014eba:	2d19      	cmp	r5, #25
 8014ebc:	bf98      	it	ls
 8014ebe:	3220      	addls	r2, #32
 8014ec0:	42a2      	cmp	r2, r4
 8014ec2:	d0f0      	beq.n	8014ea6 <__match+0x6>
 8014ec4:	2000      	movs	r0, #0
 8014ec6:	e7f3      	b.n	8014eb0 <__match+0x10>

08014ec8 <__hexnan>:
 8014ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ecc:	680b      	ldr	r3, [r1, #0]
 8014ece:	6801      	ldr	r1, [r0, #0]
 8014ed0:	115e      	asrs	r6, r3, #5
 8014ed2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014ed6:	f013 031f 	ands.w	r3, r3, #31
 8014eda:	b087      	sub	sp, #28
 8014edc:	bf18      	it	ne
 8014ede:	3604      	addne	r6, #4
 8014ee0:	2500      	movs	r5, #0
 8014ee2:	1f37      	subs	r7, r6, #4
 8014ee4:	4682      	mov	sl, r0
 8014ee6:	4690      	mov	r8, r2
 8014ee8:	9301      	str	r3, [sp, #4]
 8014eea:	f846 5c04 	str.w	r5, [r6, #-4]
 8014eee:	46b9      	mov	r9, r7
 8014ef0:	463c      	mov	r4, r7
 8014ef2:	9502      	str	r5, [sp, #8]
 8014ef4:	46ab      	mov	fp, r5
 8014ef6:	784a      	ldrb	r2, [r1, #1]
 8014ef8:	1c4b      	adds	r3, r1, #1
 8014efa:	9303      	str	r3, [sp, #12]
 8014efc:	b342      	cbz	r2, 8014f50 <__hexnan+0x88>
 8014efe:	4610      	mov	r0, r2
 8014f00:	9105      	str	r1, [sp, #20]
 8014f02:	9204      	str	r2, [sp, #16]
 8014f04:	f7ff fd94 	bl	8014a30 <__hexdig_fun>
 8014f08:	2800      	cmp	r0, #0
 8014f0a:	d151      	bne.n	8014fb0 <__hexnan+0xe8>
 8014f0c:	9a04      	ldr	r2, [sp, #16]
 8014f0e:	9905      	ldr	r1, [sp, #20]
 8014f10:	2a20      	cmp	r2, #32
 8014f12:	d818      	bhi.n	8014f46 <__hexnan+0x7e>
 8014f14:	9b02      	ldr	r3, [sp, #8]
 8014f16:	459b      	cmp	fp, r3
 8014f18:	dd13      	ble.n	8014f42 <__hexnan+0x7a>
 8014f1a:	454c      	cmp	r4, r9
 8014f1c:	d206      	bcs.n	8014f2c <__hexnan+0x64>
 8014f1e:	2d07      	cmp	r5, #7
 8014f20:	dc04      	bgt.n	8014f2c <__hexnan+0x64>
 8014f22:	462a      	mov	r2, r5
 8014f24:	4649      	mov	r1, r9
 8014f26:	4620      	mov	r0, r4
 8014f28:	f7ff ffa8 	bl	8014e7c <L_shift>
 8014f2c:	4544      	cmp	r4, r8
 8014f2e:	d952      	bls.n	8014fd6 <__hexnan+0x10e>
 8014f30:	2300      	movs	r3, #0
 8014f32:	f1a4 0904 	sub.w	r9, r4, #4
 8014f36:	f844 3c04 	str.w	r3, [r4, #-4]
 8014f3a:	f8cd b008 	str.w	fp, [sp, #8]
 8014f3e:	464c      	mov	r4, r9
 8014f40:	461d      	mov	r5, r3
 8014f42:	9903      	ldr	r1, [sp, #12]
 8014f44:	e7d7      	b.n	8014ef6 <__hexnan+0x2e>
 8014f46:	2a29      	cmp	r2, #41	@ 0x29
 8014f48:	d157      	bne.n	8014ffa <__hexnan+0x132>
 8014f4a:	3102      	adds	r1, #2
 8014f4c:	f8ca 1000 	str.w	r1, [sl]
 8014f50:	f1bb 0f00 	cmp.w	fp, #0
 8014f54:	d051      	beq.n	8014ffa <__hexnan+0x132>
 8014f56:	454c      	cmp	r4, r9
 8014f58:	d206      	bcs.n	8014f68 <__hexnan+0xa0>
 8014f5a:	2d07      	cmp	r5, #7
 8014f5c:	dc04      	bgt.n	8014f68 <__hexnan+0xa0>
 8014f5e:	462a      	mov	r2, r5
 8014f60:	4649      	mov	r1, r9
 8014f62:	4620      	mov	r0, r4
 8014f64:	f7ff ff8a 	bl	8014e7c <L_shift>
 8014f68:	4544      	cmp	r4, r8
 8014f6a:	d936      	bls.n	8014fda <__hexnan+0x112>
 8014f6c:	f1a8 0204 	sub.w	r2, r8, #4
 8014f70:	4623      	mov	r3, r4
 8014f72:	f853 1b04 	ldr.w	r1, [r3], #4
 8014f76:	f842 1f04 	str.w	r1, [r2, #4]!
 8014f7a:	429f      	cmp	r7, r3
 8014f7c:	d2f9      	bcs.n	8014f72 <__hexnan+0xaa>
 8014f7e:	1b3b      	subs	r3, r7, r4
 8014f80:	f023 0303 	bic.w	r3, r3, #3
 8014f84:	3304      	adds	r3, #4
 8014f86:	3401      	adds	r4, #1
 8014f88:	3e03      	subs	r6, #3
 8014f8a:	42b4      	cmp	r4, r6
 8014f8c:	bf88      	it	hi
 8014f8e:	2304      	movhi	r3, #4
 8014f90:	4443      	add	r3, r8
 8014f92:	2200      	movs	r2, #0
 8014f94:	f843 2b04 	str.w	r2, [r3], #4
 8014f98:	429f      	cmp	r7, r3
 8014f9a:	d2fb      	bcs.n	8014f94 <__hexnan+0xcc>
 8014f9c:	683b      	ldr	r3, [r7, #0]
 8014f9e:	b91b      	cbnz	r3, 8014fa8 <__hexnan+0xe0>
 8014fa0:	4547      	cmp	r7, r8
 8014fa2:	d128      	bne.n	8014ff6 <__hexnan+0x12e>
 8014fa4:	2301      	movs	r3, #1
 8014fa6:	603b      	str	r3, [r7, #0]
 8014fa8:	2005      	movs	r0, #5
 8014faa:	b007      	add	sp, #28
 8014fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb0:	3501      	adds	r5, #1
 8014fb2:	2d08      	cmp	r5, #8
 8014fb4:	f10b 0b01 	add.w	fp, fp, #1
 8014fb8:	dd06      	ble.n	8014fc8 <__hexnan+0x100>
 8014fba:	4544      	cmp	r4, r8
 8014fbc:	d9c1      	bls.n	8014f42 <__hexnan+0x7a>
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	f844 3c04 	str.w	r3, [r4, #-4]
 8014fc4:	2501      	movs	r5, #1
 8014fc6:	3c04      	subs	r4, #4
 8014fc8:	6822      	ldr	r2, [r4, #0]
 8014fca:	f000 000f 	and.w	r0, r0, #15
 8014fce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014fd2:	6020      	str	r0, [r4, #0]
 8014fd4:	e7b5      	b.n	8014f42 <__hexnan+0x7a>
 8014fd6:	2508      	movs	r5, #8
 8014fd8:	e7b3      	b.n	8014f42 <__hexnan+0x7a>
 8014fda:	9b01      	ldr	r3, [sp, #4]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d0dd      	beq.n	8014f9c <__hexnan+0xd4>
 8014fe0:	f1c3 0320 	rsb	r3, r3, #32
 8014fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8014fe8:	40da      	lsrs	r2, r3
 8014fea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014fee:	4013      	ands	r3, r2
 8014ff0:	f846 3c04 	str.w	r3, [r6, #-4]
 8014ff4:	e7d2      	b.n	8014f9c <__hexnan+0xd4>
 8014ff6:	3f04      	subs	r7, #4
 8014ff8:	e7d0      	b.n	8014f9c <__hexnan+0xd4>
 8014ffa:	2004      	movs	r0, #4
 8014ffc:	e7d5      	b.n	8014faa <__hexnan+0xe2>

08014ffe <__ascii_mbtowc>:
 8014ffe:	b082      	sub	sp, #8
 8015000:	b901      	cbnz	r1, 8015004 <__ascii_mbtowc+0x6>
 8015002:	a901      	add	r1, sp, #4
 8015004:	b142      	cbz	r2, 8015018 <__ascii_mbtowc+0x1a>
 8015006:	b14b      	cbz	r3, 801501c <__ascii_mbtowc+0x1e>
 8015008:	7813      	ldrb	r3, [r2, #0]
 801500a:	600b      	str	r3, [r1, #0]
 801500c:	7812      	ldrb	r2, [r2, #0]
 801500e:	1e10      	subs	r0, r2, #0
 8015010:	bf18      	it	ne
 8015012:	2001      	movne	r0, #1
 8015014:	b002      	add	sp, #8
 8015016:	4770      	bx	lr
 8015018:	4610      	mov	r0, r2
 801501a:	e7fb      	b.n	8015014 <__ascii_mbtowc+0x16>
 801501c:	f06f 0001 	mvn.w	r0, #1
 8015020:	e7f8      	b.n	8015014 <__ascii_mbtowc+0x16>

08015022 <_realloc_r>:
 8015022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015026:	4680      	mov	r8, r0
 8015028:	4615      	mov	r5, r2
 801502a:	460c      	mov	r4, r1
 801502c:	b921      	cbnz	r1, 8015038 <_realloc_r+0x16>
 801502e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015032:	4611      	mov	r1, r2
 8015034:	f7fd baf0 	b.w	8012618 <_malloc_r>
 8015038:	b92a      	cbnz	r2, 8015046 <_realloc_r+0x24>
 801503a:	f7fd fa79 	bl	8012530 <_free_r>
 801503e:	2400      	movs	r4, #0
 8015040:	4620      	mov	r0, r4
 8015042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015046:	f000 f8b2 	bl	80151ae <_malloc_usable_size_r>
 801504a:	4285      	cmp	r5, r0
 801504c:	4606      	mov	r6, r0
 801504e:	d802      	bhi.n	8015056 <_realloc_r+0x34>
 8015050:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015054:	d8f4      	bhi.n	8015040 <_realloc_r+0x1e>
 8015056:	4629      	mov	r1, r5
 8015058:	4640      	mov	r0, r8
 801505a:	f7fd fadd 	bl	8012618 <_malloc_r>
 801505e:	4607      	mov	r7, r0
 8015060:	2800      	cmp	r0, #0
 8015062:	d0ec      	beq.n	801503e <_realloc_r+0x1c>
 8015064:	42b5      	cmp	r5, r6
 8015066:	462a      	mov	r2, r5
 8015068:	4621      	mov	r1, r4
 801506a:	bf28      	it	cs
 801506c:	4632      	movcs	r2, r6
 801506e:	f7fc fbfc 	bl	801186a <memcpy>
 8015072:	4621      	mov	r1, r4
 8015074:	4640      	mov	r0, r8
 8015076:	f7fd fa5b 	bl	8012530 <_free_r>
 801507a:	463c      	mov	r4, r7
 801507c:	e7e0      	b.n	8015040 <_realloc_r+0x1e>
	...

08015080 <_strtoul_l.constprop.0>:
 8015080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015084:	4e34      	ldr	r6, [pc, #208]	@ (8015158 <_strtoul_l.constprop.0+0xd8>)
 8015086:	4686      	mov	lr, r0
 8015088:	460d      	mov	r5, r1
 801508a:	4628      	mov	r0, r5
 801508c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015090:	5d37      	ldrb	r7, [r6, r4]
 8015092:	f017 0708 	ands.w	r7, r7, #8
 8015096:	d1f8      	bne.n	801508a <_strtoul_l.constprop.0+0xa>
 8015098:	2c2d      	cmp	r4, #45	@ 0x2d
 801509a:	d12f      	bne.n	80150fc <_strtoul_l.constprop.0+0x7c>
 801509c:	782c      	ldrb	r4, [r5, #0]
 801509e:	2701      	movs	r7, #1
 80150a0:	1c85      	adds	r5, r0, #2
 80150a2:	f033 0010 	bics.w	r0, r3, #16
 80150a6:	d109      	bne.n	80150bc <_strtoul_l.constprop.0+0x3c>
 80150a8:	2c30      	cmp	r4, #48	@ 0x30
 80150aa:	d12c      	bne.n	8015106 <_strtoul_l.constprop.0+0x86>
 80150ac:	7828      	ldrb	r0, [r5, #0]
 80150ae:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80150b2:	2858      	cmp	r0, #88	@ 0x58
 80150b4:	d127      	bne.n	8015106 <_strtoul_l.constprop.0+0x86>
 80150b6:	786c      	ldrb	r4, [r5, #1]
 80150b8:	2310      	movs	r3, #16
 80150ba:	3502      	adds	r5, #2
 80150bc:	f04f 38ff 	mov.w	r8, #4294967295
 80150c0:	2600      	movs	r6, #0
 80150c2:	fbb8 f8f3 	udiv	r8, r8, r3
 80150c6:	fb03 f908 	mul.w	r9, r3, r8
 80150ca:	ea6f 0909 	mvn.w	r9, r9
 80150ce:	4630      	mov	r0, r6
 80150d0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80150d4:	f1bc 0f09 	cmp.w	ip, #9
 80150d8:	d81c      	bhi.n	8015114 <_strtoul_l.constprop.0+0x94>
 80150da:	4664      	mov	r4, ip
 80150dc:	42a3      	cmp	r3, r4
 80150de:	dd2a      	ble.n	8015136 <_strtoul_l.constprop.0+0xb6>
 80150e0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80150e4:	d007      	beq.n	80150f6 <_strtoul_l.constprop.0+0x76>
 80150e6:	4580      	cmp	r8, r0
 80150e8:	d322      	bcc.n	8015130 <_strtoul_l.constprop.0+0xb0>
 80150ea:	d101      	bne.n	80150f0 <_strtoul_l.constprop.0+0x70>
 80150ec:	45a1      	cmp	r9, r4
 80150ee:	db1f      	blt.n	8015130 <_strtoul_l.constprop.0+0xb0>
 80150f0:	fb00 4003 	mla	r0, r0, r3, r4
 80150f4:	2601      	movs	r6, #1
 80150f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80150fa:	e7e9      	b.n	80150d0 <_strtoul_l.constprop.0+0x50>
 80150fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80150fe:	bf04      	itt	eq
 8015100:	782c      	ldrbeq	r4, [r5, #0]
 8015102:	1c85      	addeq	r5, r0, #2
 8015104:	e7cd      	b.n	80150a2 <_strtoul_l.constprop.0+0x22>
 8015106:	2b00      	cmp	r3, #0
 8015108:	d1d8      	bne.n	80150bc <_strtoul_l.constprop.0+0x3c>
 801510a:	2c30      	cmp	r4, #48	@ 0x30
 801510c:	bf0c      	ite	eq
 801510e:	2308      	moveq	r3, #8
 8015110:	230a      	movne	r3, #10
 8015112:	e7d3      	b.n	80150bc <_strtoul_l.constprop.0+0x3c>
 8015114:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015118:	f1bc 0f19 	cmp.w	ip, #25
 801511c:	d801      	bhi.n	8015122 <_strtoul_l.constprop.0+0xa2>
 801511e:	3c37      	subs	r4, #55	@ 0x37
 8015120:	e7dc      	b.n	80150dc <_strtoul_l.constprop.0+0x5c>
 8015122:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8015126:	f1bc 0f19 	cmp.w	ip, #25
 801512a:	d804      	bhi.n	8015136 <_strtoul_l.constprop.0+0xb6>
 801512c:	3c57      	subs	r4, #87	@ 0x57
 801512e:	e7d5      	b.n	80150dc <_strtoul_l.constprop.0+0x5c>
 8015130:	f04f 36ff 	mov.w	r6, #4294967295
 8015134:	e7df      	b.n	80150f6 <_strtoul_l.constprop.0+0x76>
 8015136:	1c73      	adds	r3, r6, #1
 8015138:	d106      	bne.n	8015148 <_strtoul_l.constprop.0+0xc8>
 801513a:	2322      	movs	r3, #34	@ 0x22
 801513c:	f8ce 3000 	str.w	r3, [lr]
 8015140:	4630      	mov	r0, r6
 8015142:	b932      	cbnz	r2, 8015152 <_strtoul_l.constprop.0+0xd2>
 8015144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015148:	b107      	cbz	r7, 801514c <_strtoul_l.constprop.0+0xcc>
 801514a:	4240      	negs	r0, r0
 801514c:	2a00      	cmp	r2, #0
 801514e:	d0f9      	beq.n	8015144 <_strtoul_l.constprop.0+0xc4>
 8015150:	b106      	cbz	r6, 8015154 <_strtoul_l.constprop.0+0xd4>
 8015152:	1e69      	subs	r1, r5, #1
 8015154:	6011      	str	r1, [r2, #0]
 8015156:	e7f5      	b.n	8015144 <_strtoul_l.constprop.0+0xc4>
 8015158:	08017171 	.word	0x08017171

0801515c <_strtoul_r>:
 801515c:	f7ff bf90 	b.w	8015080 <_strtoul_l.constprop.0>

08015160 <__ascii_wctomb>:
 8015160:	4603      	mov	r3, r0
 8015162:	4608      	mov	r0, r1
 8015164:	b141      	cbz	r1, 8015178 <__ascii_wctomb+0x18>
 8015166:	2aff      	cmp	r2, #255	@ 0xff
 8015168:	d904      	bls.n	8015174 <__ascii_wctomb+0x14>
 801516a:	228a      	movs	r2, #138	@ 0x8a
 801516c:	601a      	str	r2, [r3, #0]
 801516e:	f04f 30ff 	mov.w	r0, #4294967295
 8015172:	4770      	bx	lr
 8015174:	700a      	strb	r2, [r1, #0]
 8015176:	2001      	movs	r0, #1
 8015178:	4770      	bx	lr
	...

0801517c <fiprintf>:
 801517c:	b40e      	push	{r1, r2, r3}
 801517e:	b503      	push	{r0, r1, lr}
 8015180:	4601      	mov	r1, r0
 8015182:	ab03      	add	r3, sp, #12
 8015184:	4805      	ldr	r0, [pc, #20]	@ (801519c <fiprintf+0x20>)
 8015186:	f853 2b04 	ldr.w	r2, [r3], #4
 801518a:	6800      	ldr	r0, [r0, #0]
 801518c:	9301      	str	r3, [sp, #4]
 801518e:	f000 f83f 	bl	8015210 <_vfiprintf_r>
 8015192:	b002      	add	sp, #8
 8015194:	f85d eb04 	ldr.w	lr, [sp], #4
 8015198:	b003      	add	sp, #12
 801519a:	4770      	bx	lr
 801519c:	200001cc 	.word	0x200001cc

080151a0 <abort>:
 80151a0:	b508      	push	{r3, lr}
 80151a2:	2006      	movs	r0, #6
 80151a4:	f000 fa08 	bl	80155b8 <raise>
 80151a8:	2001      	movs	r0, #1
 80151aa:	f7ee ff8b 	bl	80040c4 <_exit>

080151ae <_malloc_usable_size_r>:
 80151ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151b2:	1f18      	subs	r0, r3, #4
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	bfbc      	itt	lt
 80151b8:	580b      	ldrlt	r3, [r1, r0]
 80151ba:	18c0      	addlt	r0, r0, r3
 80151bc:	4770      	bx	lr

080151be <__sfputc_r>:
 80151be:	6893      	ldr	r3, [r2, #8]
 80151c0:	3b01      	subs	r3, #1
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	b410      	push	{r4}
 80151c6:	6093      	str	r3, [r2, #8]
 80151c8:	da08      	bge.n	80151dc <__sfputc_r+0x1e>
 80151ca:	6994      	ldr	r4, [r2, #24]
 80151cc:	42a3      	cmp	r3, r4
 80151ce:	db01      	blt.n	80151d4 <__sfputc_r+0x16>
 80151d0:	290a      	cmp	r1, #10
 80151d2:	d103      	bne.n	80151dc <__sfputc_r+0x1e>
 80151d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151d8:	f000 b932 	b.w	8015440 <__swbuf_r>
 80151dc:	6813      	ldr	r3, [r2, #0]
 80151de:	1c58      	adds	r0, r3, #1
 80151e0:	6010      	str	r0, [r2, #0]
 80151e2:	7019      	strb	r1, [r3, #0]
 80151e4:	4608      	mov	r0, r1
 80151e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151ea:	4770      	bx	lr

080151ec <__sfputs_r>:
 80151ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151ee:	4606      	mov	r6, r0
 80151f0:	460f      	mov	r7, r1
 80151f2:	4614      	mov	r4, r2
 80151f4:	18d5      	adds	r5, r2, r3
 80151f6:	42ac      	cmp	r4, r5
 80151f8:	d101      	bne.n	80151fe <__sfputs_r+0x12>
 80151fa:	2000      	movs	r0, #0
 80151fc:	e007      	b.n	801520e <__sfputs_r+0x22>
 80151fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015202:	463a      	mov	r2, r7
 8015204:	4630      	mov	r0, r6
 8015206:	f7ff ffda 	bl	80151be <__sfputc_r>
 801520a:	1c43      	adds	r3, r0, #1
 801520c:	d1f3      	bne.n	80151f6 <__sfputs_r+0xa>
 801520e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015210 <_vfiprintf_r>:
 8015210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015214:	460d      	mov	r5, r1
 8015216:	b09d      	sub	sp, #116	@ 0x74
 8015218:	4614      	mov	r4, r2
 801521a:	4698      	mov	r8, r3
 801521c:	4606      	mov	r6, r0
 801521e:	b118      	cbz	r0, 8015228 <_vfiprintf_r+0x18>
 8015220:	6a03      	ldr	r3, [r0, #32]
 8015222:	b90b      	cbnz	r3, 8015228 <_vfiprintf_r+0x18>
 8015224:	f7fc f9ca 	bl	80115bc <__sinit>
 8015228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801522a:	07d9      	lsls	r1, r3, #31
 801522c:	d405      	bmi.n	801523a <_vfiprintf_r+0x2a>
 801522e:	89ab      	ldrh	r3, [r5, #12]
 8015230:	059a      	lsls	r2, r3, #22
 8015232:	d402      	bmi.n	801523a <_vfiprintf_r+0x2a>
 8015234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015236:	f7fc fb16 	bl	8011866 <__retarget_lock_acquire_recursive>
 801523a:	89ab      	ldrh	r3, [r5, #12]
 801523c:	071b      	lsls	r3, r3, #28
 801523e:	d501      	bpl.n	8015244 <_vfiprintf_r+0x34>
 8015240:	692b      	ldr	r3, [r5, #16]
 8015242:	b99b      	cbnz	r3, 801526c <_vfiprintf_r+0x5c>
 8015244:	4629      	mov	r1, r5
 8015246:	4630      	mov	r0, r6
 8015248:	f000 f938 	bl	80154bc <__swsetup_r>
 801524c:	b170      	cbz	r0, 801526c <_vfiprintf_r+0x5c>
 801524e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015250:	07dc      	lsls	r4, r3, #31
 8015252:	d504      	bpl.n	801525e <_vfiprintf_r+0x4e>
 8015254:	f04f 30ff 	mov.w	r0, #4294967295
 8015258:	b01d      	add	sp, #116	@ 0x74
 801525a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801525e:	89ab      	ldrh	r3, [r5, #12]
 8015260:	0598      	lsls	r0, r3, #22
 8015262:	d4f7      	bmi.n	8015254 <_vfiprintf_r+0x44>
 8015264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015266:	f7fc faff 	bl	8011868 <__retarget_lock_release_recursive>
 801526a:	e7f3      	b.n	8015254 <_vfiprintf_r+0x44>
 801526c:	2300      	movs	r3, #0
 801526e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015270:	2320      	movs	r3, #32
 8015272:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015276:	f8cd 800c 	str.w	r8, [sp, #12]
 801527a:	2330      	movs	r3, #48	@ 0x30
 801527c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801542c <_vfiprintf_r+0x21c>
 8015280:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015284:	f04f 0901 	mov.w	r9, #1
 8015288:	4623      	mov	r3, r4
 801528a:	469a      	mov	sl, r3
 801528c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015290:	b10a      	cbz	r2, 8015296 <_vfiprintf_r+0x86>
 8015292:	2a25      	cmp	r2, #37	@ 0x25
 8015294:	d1f9      	bne.n	801528a <_vfiprintf_r+0x7a>
 8015296:	ebba 0b04 	subs.w	fp, sl, r4
 801529a:	d00b      	beq.n	80152b4 <_vfiprintf_r+0xa4>
 801529c:	465b      	mov	r3, fp
 801529e:	4622      	mov	r2, r4
 80152a0:	4629      	mov	r1, r5
 80152a2:	4630      	mov	r0, r6
 80152a4:	f7ff ffa2 	bl	80151ec <__sfputs_r>
 80152a8:	3001      	adds	r0, #1
 80152aa:	f000 80a7 	beq.w	80153fc <_vfiprintf_r+0x1ec>
 80152ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80152b0:	445a      	add	r2, fp
 80152b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80152b4:	f89a 3000 	ldrb.w	r3, [sl]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	f000 809f 	beq.w	80153fc <_vfiprintf_r+0x1ec>
 80152be:	2300      	movs	r3, #0
 80152c0:	f04f 32ff 	mov.w	r2, #4294967295
 80152c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152c8:	f10a 0a01 	add.w	sl, sl, #1
 80152cc:	9304      	str	r3, [sp, #16]
 80152ce:	9307      	str	r3, [sp, #28]
 80152d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80152d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80152d6:	4654      	mov	r4, sl
 80152d8:	2205      	movs	r2, #5
 80152da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152de:	4853      	ldr	r0, [pc, #332]	@ (801542c <_vfiprintf_r+0x21c>)
 80152e0:	f7ea ff9e 	bl	8000220 <memchr>
 80152e4:	9a04      	ldr	r2, [sp, #16]
 80152e6:	b9d8      	cbnz	r0, 8015320 <_vfiprintf_r+0x110>
 80152e8:	06d1      	lsls	r1, r2, #27
 80152ea:	bf44      	itt	mi
 80152ec:	2320      	movmi	r3, #32
 80152ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80152f2:	0713      	lsls	r3, r2, #28
 80152f4:	bf44      	itt	mi
 80152f6:	232b      	movmi	r3, #43	@ 0x2b
 80152f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80152fc:	f89a 3000 	ldrb.w	r3, [sl]
 8015300:	2b2a      	cmp	r3, #42	@ 0x2a
 8015302:	d015      	beq.n	8015330 <_vfiprintf_r+0x120>
 8015304:	9a07      	ldr	r2, [sp, #28]
 8015306:	4654      	mov	r4, sl
 8015308:	2000      	movs	r0, #0
 801530a:	f04f 0c0a 	mov.w	ip, #10
 801530e:	4621      	mov	r1, r4
 8015310:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015314:	3b30      	subs	r3, #48	@ 0x30
 8015316:	2b09      	cmp	r3, #9
 8015318:	d94b      	bls.n	80153b2 <_vfiprintf_r+0x1a2>
 801531a:	b1b0      	cbz	r0, 801534a <_vfiprintf_r+0x13a>
 801531c:	9207      	str	r2, [sp, #28]
 801531e:	e014      	b.n	801534a <_vfiprintf_r+0x13a>
 8015320:	eba0 0308 	sub.w	r3, r0, r8
 8015324:	fa09 f303 	lsl.w	r3, r9, r3
 8015328:	4313      	orrs	r3, r2
 801532a:	9304      	str	r3, [sp, #16]
 801532c:	46a2      	mov	sl, r4
 801532e:	e7d2      	b.n	80152d6 <_vfiprintf_r+0xc6>
 8015330:	9b03      	ldr	r3, [sp, #12]
 8015332:	1d19      	adds	r1, r3, #4
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	9103      	str	r1, [sp, #12]
 8015338:	2b00      	cmp	r3, #0
 801533a:	bfbb      	ittet	lt
 801533c:	425b      	neglt	r3, r3
 801533e:	f042 0202 	orrlt.w	r2, r2, #2
 8015342:	9307      	strge	r3, [sp, #28]
 8015344:	9307      	strlt	r3, [sp, #28]
 8015346:	bfb8      	it	lt
 8015348:	9204      	strlt	r2, [sp, #16]
 801534a:	7823      	ldrb	r3, [r4, #0]
 801534c:	2b2e      	cmp	r3, #46	@ 0x2e
 801534e:	d10a      	bne.n	8015366 <_vfiprintf_r+0x156>
 8015350:	7863      	ldrb	r3, [r4, #1]
 8015352:	2b2a      	cmp	r3, #42	@ 0x2a
 8015354:	d132      	bne.n	80153bc <_vfiprintf_r+0x1ac>
 8015356:	9b03      	ldr	r3, [sp, #12]
 8015358:	1d1a      	adds	r2, r3, #4
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	9203      	str	r2, [sp, #12]
 801535e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015362:	3402      	adds	r4, #2
 8015364:	9305      	str	r3, [sp, #20]
 8015366:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801543c <_vfiprintf_r+0x22c>
 801536a:	7821      	ldrb	r1, [r4, #0]
 801536c:	2203      	movs	r2, #3
 801536e:	4650      	mov	r0, sl
 8015370:	f7ea ff56 	bl	8000220 <memchr>
 8015374:	b138      	cbz	r0, 8015386 <_vfiprintf_r+0x176>
 8015376:	9b04      	ldr	r3, [sp, #16]
 8015378:	eba0 000a 	sub.w	r0, r0, sl
 801537c:	2240      	movs	r2, #64	@ 0x40
 801537e:	4082      	lsls	r2, r0
 8015380:	4313      	orrs	r3, r2
 8015382:	3401      	adds	r4, #1
 8015384:	9304      	str	r3, [sp, #16]
 8015386:	f814 1b01 	ldrb.w	r1, [r4], #1
 801538a:	4829      	ldr	r0, [pc, #164]	@ (8015430 <_vfiprintf_r+0x220>)
 801538c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015390:	2206      	movs	r2, #6
 8015392:	f7ea ff45 	bl	8000220 <memchr>
 8015396:	2800      	cmp	r0, #0
 8015398:	d03f      	beq.n	801541a <_vfiprintf_r+0x20a>
 801539a:	4b26      	ldr	r3, [pc, #152]	@ (8015434 <_vfiprintf_r+0x224>)
 801539c:	bb1b      	cbnz	r3, 80153e6 <_vfiprintf_r+0x1d6>
 801539e:	9b03      	ldr	r3, [sp, #12]
 80153a0:	3307      	adds	r3, #7
 80153a2:	f023 0307 	bic.w	r3, r3, #7
 80153a6:	3308      	adds	r3, #8
 80153a8:	9303      	str	r3, [sp, #12]
 80153aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80153ac:	443b      	add	r3, r7
 80153ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80153b0:	e76a      	b.n	8015288 <_vfiprintf_r+0x78>
 80153b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80153b6:	460c      	mov	r4, r1
 80153b8:	2001      	movs	r0, #1
 80153ba:	e7a8      	b.n	801530e <_vfiprintf_r+0xfe>
 80153bc:	2300      	movs	r3, #0
 80153be:	3401      	adds	r4, #1
 80153c0:	9305      	str	r3, [sp, #20]
 80153c2:	4619      	mov	r1, r3
 80153c4:	f04f 0c0a 	mov.w	ip, #10
 80153c8:	4620      	mov	r0, r4
 80153ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153ce:	3a30      	subs	r2, #48	@ 0x30
 80153d0:	2a09      	cmp	r2, #9
 80153d2:	d903      	bls.n	80153dc <_vfiprintf_r+0x1cc>
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d0c6      	beq.n	8015366 <_vfiprintf_r+0x156>
 80153d8:	9105      	str	r1, [sp, #20]
 80153da:	e7c4      	b.n	8015366 <_vfiprintf_r+0x156>
 80153dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80153e0:	4604      	mov	r4, r0
 80153e2:	2301      	movs	r3, #1
 80153e4:	e7f0      	b.n	80153c8 <_vfiprintf_r+0x1b8>
 80153e6:	ab03      	add	r3, sp, #12
 80153e8:	9300      	str	r3, [sp, #0]
 80153ea:	462a      	mov	r2, r5
 80153ec:	4b12      	ldr	r3, [pc, #72]	@ (8015438 <_vfiprintf_r+0x228>)
 80153ee:	a904      	add	r1, sp, #16
 80153f0:	4630      	mov	r0, r6
 80153f2:	f7fb fa8b 	bl	801090c <_printf_float>
 80153f6:	4607      	mov	r7, r0
 80153f8:	1c78      	adds	r0, r7, #1
 80153fa:	d1d6      	bne.n	80153aa <_vfiprintf_r+0x19a>
 80153fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80153fe:	07d9      	lsls	r1, r3, #31
 8015400:	d405      	bmi.n	801540e <_vfiprintf_r+0x1fe>
 8015402:	89ab      	ldrh	r3, [r5, #12]
 8015404:	059a      	lsls	r2, r3, #22
 8015406:	d402      	bmi.n	801540e <_vfiprintf_r+0x1fe>
 8015408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801540a:	f7fc fa2d 	bl	8011868 <__retarget_lock_release_recursive>
 801540e:	89ab      	ldrh	r3, [r5, #12]
 8015410:	065b      	lsls	r3, r3, #25
 8015412:	f53f af1f 	bmi.w	8015254 <_vfiprintf_r+0x44>
 8015416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015418:	e71e      	b.n	8015258 <_vfiprintf_r+0x48>
 801541a:	ab03      	add	r3, sp, #12
 801541c:	9300      	str	r3, [sp, #0]
 801541e:	462a      	mov	r2, r5
 8015420:	4b05      	ldr	r3, [pc, #20]	@ (8015438 <_vfiprintf_r+0x228>)
 8015422:	a904      	add	r1, sp, #16
 8015424:	4630      	mov	r0, r6
 8015426:	f7fb fd09 	bl	8010e3c <_printf_i>
 801542a:	e7e4      	b.n	80153f6 <_vfiprintf_r+0x1e6>
 801542c:	08017271 	.word	0x08017271
 8015430:	0801727b 	.word	0x0801727b
 8015434:	0801090d 	.word	0x0801090d
 8015438:	080151ed 	.word	0x080151ed
 801543c:	08017277 	.word	0x08017277

08015440 <__swbuf_r>:
 8015440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015442:	460e      	mov	r6, r1
 8015444:	4614      	mov	r4, r2
 8015446:	4605      	mov	r5, r0
 8015448:	b118      	cbz	r0, 8015452 <__swbuf_r+0x12>
 801544a:	6a03      	ldr	r3, [r0, #32]
 801544c:	b90b      	cbnz	r3, 8015452 <__swbuf_r+0x12>
 801544e:	f7fc f8b5 	bl	80115bc <__sinit>
 8015452:	69a3      	ldr	r3, [r4, #24]
 8015454:	60a3      	str	r3, [r4, #8]
 8015456:	89a3      	ldrh	r3, [r4, #12]
 8015458:	071a      	lsls	r2, r3, #28
 801545a:	d501      	bpl.n	8015460 <__swbuf_r+0x20>
 801545c:	6923      	ldr	r3, [r4, #16]
 801545e:	b943      	cbnz	r3, 8015472 <__swbuf_r+0x32>
 8015460:	4621      	mov	r1, r4
 8015462:	4628      	mov	r0, r5
 8015464:	f000 f82a 	bl	80154bc <__swsetup_r>
 8015468:	b118      	cbz	r0, 8015472 <__swbuf_r+0x32>
 801546a:	f04f 37ff 	mov.w	r7, #4294967295
 801546e:	4638      	mov	r0, r7
 8015470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015472:	6823      	ldr	r3, [r4, #0]
 8015474:	6922      	ldr	r2, [r4, #16]
 8015476:	1a98      	subs	r0, r3, r2
 8015478:	6963      	ldr	r3, [r4, #20]
 801547a:	b2f6      	uxtb	r6, r6
 801547c:	4283      	cmp	r3, r0
 801547e:	4637      	mov	r7, r6
 8015480:	dc05      	bgt.n	801548e <__swbuf_r+0x4e>
 8015482:	4621      	mov	r1, r4
 8015484:	4628      	mov	r0, r5
 8015486:	f7ff f97f 	bl	8014788 <_fflush_r>
 801548a:	2800      	cmp	r0, #0
 801548c:	d1ed      	bne.n	801546a <__swbuf_r+0x2a>
 801548e:	68a3      	ldr	r3, [r4, #8]
 8015490:	3b01      	subs	r3, #1
 8015492:	60a3      	str	r3, [r4, #8]
 8015494:	6823      	ldr	r3, [r4, #0]
 8015496:	1c5a      	adds	r2, r3, #1
 8015498:	6022      	str	r2, [r4, #0]
 801549a:	701e      	strb	r6, [r3, #0]
 801549c:	6962      	ldr	r2, [r4, #20]
 801549e:	1c43      	adds	r3, r0, #1
 80154a0:	429a      	cmp	r2, r3
 80154a2:	d004      	beq.n	80154ae <__swbuf_r+0x6e>
 80154a4:	89a3      	ldrh	r3, [r4, #12]
 80154a6:	07db      	lsls	r3, r3, #31
 80154a8:	d5e1      	bpl.n	801546e <__swbuf_r+0x2e>
 80154aa:	2e0a      	cmp	r6, #10
 80154ac:	d1df      	bne.n	801546e <__swbuf_r+0x2e>
 80154ae:	4621      	mov	r1, r4
 80154b0:	4628      	mov	r0, r5
 80154b2:	f7ff f969 	bl	8014788 <_fflush_r>
 80154b6:	2800      	cmp	r0, #0
 80154b8:	d0d9      	beq.n	801546e <__swbuf_r+0x2e>
 80154ba:	e7d6      	b.n	801546a <__swbuf_r+0x2a>

080154bc <__swsetup_r>:
 80154bc:	b538      	push	{r3, r4, r5, lr}
 80154be:	4b29      	ldr	r3, [pc, #164]	@ (8015564 <__swsetup_r+0xa8>)
 80154c0:	4605      	mov	r5, r0
 80154c2:	6818      	ldr	r0, [r3, #0]
 80154c4:	460c      	mov	r4, r1
 80154c6:	b118      	cbz	r0, 80154d0 <__swsetup_r+0x14>
 80154c8:	6a03      	ldr	r3, [r0, #32]
 80154ca:	b90b      	cbnz	r3, 80154d0 <__swsetup_r+0x14>
 80154cc:	f7fc f876 	bl	80115bc <__sinit>
 80154d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154d4:	0719      	lsls	r1, r3, #28
 80154d6:	d422      	bmi.n	801551e <__swsetup_r+0x62>
 80154d8:	06da      	lsls	r2, r3, #27
 80154da:	d407      	bmi.n	80154ec <__swsetup_r+0x30>
 80154dc:	2209      	movs	r2, #9
 80154de:	602a      	str	r2, [r5, #0]
 80154e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80154e4:	81a3      	strh	r3, [r4, #12]
 80154e6:	f04f 30ff 	mov.w	r0, #4294967295
 80154ea:	e033      	b.n	8015554 <__swsetup_r+0x98>
 80154ec:	0758      	lsls	r0, r3, #29
 80154ee:	d512      	bpl.n	8015516 <__swsetup_r+0x5a>
 80154f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80154f2:	b141      	cbz	r1, 8015506 <__swsetup_r+0x4a>
 80154f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80154f8:	4299      	cmp	r1, r3
 80154fa:	d002      	beq.n	8015502 <__swsetup_r+0x46>
 80154fc:	4628      	mov	r0, r5
 80154fe:	f7fd f817 	bl	8012530 <_free_r>
 8015502:	2300      	movs	r3, #0
 8015504:	6363      	str	r3, [r4, #52]	@ 0x34
 8015506:	89a3      	ldrh	r3, [r4, #12]
 8015508:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801550c:	81a3      	strh	r3, [r4, #12]
 801550e:	2300      	movs	r3, #0
 8015510:	6063      	str	r3, [r4, #4]
 8015512:	6923      	ldr	r3, [r4, #16]
 8015514:	6023      	str	r3, [r4, #0]
 8015516:	89a3      	ldrh	r3, [r4, #12]
 8015518:	f043 0308 	orr.w	r3, r3, #8
 801551c:	81a3      	strh	r3, [r4, #12]
 801551e:	6923      	ldr	r3, [r4, #16]
 8015520:	b94b      	cbnz	r3, 8015536 <__swsetup_r+0x7a>
 8015522:	89a3      	ldrh	r3, [r4, #12]
 8015524:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801552c:	d003      	beq.n	8015536 <__swsetup_r+0x7a>
 801552e:	4621      	mov	r1, r4
 8015530:	4628      	mov	r0, r5
 8015532:	f000 f883 	bl	801563c <__smakebuf_r>
 8015536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801553a:	f013 0201 	ands.w	r2, r3, #1
 801553e:	d00a      	beq.n	8015556 <__swsetup_r+0x9a>
 8015540:	2200      	movs	r2, #0
 8015542:	60a2      	str	r2, [r4, #8]
 8015544:	6962      	ldr	r2, [r4, #20]
 8015546:	4252      	negs	r2, r2
 8015548:	61a2      	str	r2, [r4, #24]
 801554a:	6922      	ldr	r2, [r4, #16]
 801554c:	b942      	cbnz	r2, 8015560 <__swsetup_r+0xa4>
 801554e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015552:	d1c5      	bne.n	80154e0 <__swsetup_r+0x24>
 8015554:	bd38      	pop	{r3, r4, r5, pc}
 8015556:	0799      	lsls	r1, r3, #30
 8015558:	bf58      	it	pl
 801555a:	6962      	ldrpl	r2, [r4, #20]
 801555c:	60a2      	str	r2, [r4, #8]
 801555e:	e7f4      	b.n	801554a <__swsetup_r+0x8e>
 8015560:	2000      	movs	r0, #0
 8015562:	e7f7      	b.n	8015554 <__swsetup_r+0x98>
 8015564:	200001cc 	.word	0x200001cc

08015568 <_raise_r>:
 8015568:	291f      	cmp	r1, #31
 801556a:	b538      	push	{r3, r4, r5, lr}
 801556c:	4605      	mov	r5, r0
 801556e:	460c      	mov	r4, r1
 8015570:	d904      	bls.n	801557c <_raise_r+0x14>
 8015572:	2316      	movs	r3, #22
 8015574:	6003      	str	r3, [r0, #0]
 8015576:	f04f 30ff 	mov.w	r0, #4294967295
 801557a:	bd38      	pop	{r3, r4, r5, pc}
 801557c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801557e:	b112      	cbz	r2, 8015586 <_raise_r+0x1e>
 8015580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015584:	b94b      	cbnz	r3, 801559a <_raise_r+0x32>
 8015586:	4628      	mov	r0, r5
 8015588:	f000 f830 	bl	80155ec <_getpid_r>
 801558c:	4622      	mov	r2, r4
 801558e:	4601      	mov	r1, r0
 8015590:	4628      	mov	r0, r5
 8015592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015596:	f000 b817 	b.w	80155c8 <_kill_r>
 801559a:	2b01      	cmp	r3, #1
 801559c:	d00a      	beq.n	80155b4 <_raise_r+0x4c>
 801559e:	1c59      	adds	r1, r3, #1
 80155a0:	d103      	bne.n	80155aa <_raise_r+0x42>
 80155a2:	2316      	movs	r3, #22
 80155a4:	6003      	str	r3, [r0, #0]
 80155a6:	2001      	movs	r0, #1
 80155a8:	e7e7      	b.n	801557a <_raise_r+0x12>
 80155aa:	2100      	movs	r1, #0
 80155ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80155b0:	4620      	mov	r0, r4
 80155b2:	4798      	blx	r3
 80155b4:	2000      	movs	r0, #0
 80155b6:	e7e0      	b.n	801557a <_raise_r+0x12>

080155b8 <raise>:
 80155b8:	4b02      	ldr	r3, [pc, #8]	@ (80155c4 <raise+0xc>)
 80155ba:	4601      	mov	r1, r0
 80155bc:	6818      	ldr	r0, [r3, #0]
 80155be:	f7ff bfd3 	b.w	8015568 <_raise_r>
 80155c2:	bf00      	nop
 80155c4:	200001cc 	.word	0x200001cc

080155c8 <_kill_r>:
 80155c8:	b538      	push	{r3, r4, r5, lr}
 80155ca:	4d07      	ldr	r5, [pc, #28]	@ (80155e8 <_kill_r+0x20>)
 80155cc:	2300      	movs	r3, #0
 80155ce:	4604      	mov	r4, r0
 80155d0:	4608      	mov	r0, r1
 80155d2:	4611      	mov	r1, r2
 80155d4:	602b      	str	r3, [r5, #0]
 80155d6:	f7ee fd65 	bl	80040a4 <_kill>
 80155da:	1c43      	adds	r3, r0, #1
 80155dc:	d102      	bne.n	80155e4 <_kill_r+0x1c>
 80155de:	682b      	ldr	r3, [r5, #0]
 80155e0:	b103      	cbz	r3, 80155e4 <_kill_r+0x1c>
 80155e2:	6023      	str	r3, [r4, #0]
 80155e4:	bd38      	pop	{r3, r4, r5, pc}
 80155e6:	bf00      	nop
 80155e8:	20002698 	.word	0x20002698

080155ec <_getpid_r>:
 80155ec:	f7ee bd52 	b.w	8004094 <_getpid>

080155f0 <__swhatbuf_r>:
 80155f0:	b570      	push	{r4, r5, r6, lr}
 80155f2:	460c      	mov	r4, r1
 80155f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155f8:	2900      	cmp	r1, #0
 80155fa:	b096      	sub	sp, #88	@ 0x58
 80155fc:	4615      	mov	r5, r2
 80155fe:	461e      	mov	r6, r3
 8015600:	da0d      	bge.n	801561e <__swhatbuf_r+0x2e>
 8015602:	89a3      	ldrh	r3, [r4, #12]
 8015604:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015608:	f04f 0100 	mov.w	r1, #0
 801560c:	bf14      	ite	ne
 801560e:	2340      	movne	r3, #64	@ 0x40
 8015610:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015614:	2000      	movs	r0, #0
 8015616:	6031      	str	r1, [r6, #0]
 8015618:	602b      	str	r3, [r5, #0]
 801561a:	b016      	add	sp, #88	@ 0x58
 801561c:	bd70      	pop	{r4, r5, r6, pc}
 801561e:	466a      	mov	r2, sp
 8015620:	f000 f848 	bl	80156b4 <_fstat_r>
 8015624:	2800      	cmp	r0, #0
 8015626:	dbec      	blt.n	8015602 <__swhatbuf_r+0x12>
 8015628:	9901      	ldr	r1, [sp, #4]
 801562a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801562e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015632:	4259      	negs	r1, r3
 8015634:	4159      	adcs	r1, r3
 8015636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801563a:	e7eb      	b.n	8015614 <__swhatbuf_r+0x24>

0801563c <__smakebuf_r>:
 801563c:	898b      	ldrh	r3, [r1, #12]
 801563e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015640:	079d      	lsls	r5, r3, #30
 8015642:	4606      	mov	r6, r0
 8015644:	460c      	mov	r4, r1
 8015646:	d507      	bpl.n	8015658 <__smakebuf_r+0x1c>
 8015648:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801564c:	6023      	str	r3, [r4, #0]
 801564e:	6123      	str	r3, [r4, #16]
 8015650:	2301      	movs	r3, #1
 8015652:	6163      	str	r3, [r4, #20]
 8015654:	b003      	add	sp, #12
 8015656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015658:	ab01      	add	r3, sp, #4
 801565a:	466a      	mov	r2, sp
 801565c:	f7ff ffc8 	bl	80155f0 <__swhatbuf_r>
 8015660:	9f00      	ldr	r7, [sp, #0]
 8015662:	4605      	mov	r5, r0
 8015664:	4639      	mov	r1, r7
 8015666:	4630      	mov	r0, r6
 8015668:	f7fc ffd6 	bl	8012618 <_malloc_r>
 801566c:	b948      	cbnz	r0, 8015682 <__smakebuf_r+0x46>
 801566e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015672:	059a      	lsls	r2, r3, #22
 8015674:	d4ee      	bmi.n	8015654 <__smakebuf_r+0x18>
 8015676:	f023 0303 	bic.w	r3, r3, #3
 801567a:	f043 0302 	orr.w	r3, r3, #2
 801567e:	81a3      	strh	r3, [r4, #12]
 8015680:	e7e2      	b.n	8015648 <__smakebuf_r+0xc>
 8015682:	89a3      	ldrh	r3, [r4, #12]
 8015684:	6020      	str	r0, [r4, #0]
 8015686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801568a:	81a3      	strh	r3, [r4, #12]
 801568c:	9b01      	ldr	r3, [sp, #4]
 801568e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015692:	b15b      	cbz	r3, 80156ac <__smakebuf_r+0x70>
 8015694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015698:	4630      	mov	r0, r6
 801569a:	f000 f81d 	bl	80156d8 <_isatty_r>
 801569e:	b128      	cbz	r0, 80156ac <__smakebuf_r+0x70>
 80156a0:	89a3      	ldrh	r3, [r4, #12]
 80156a2:	f023 0303 	bic.w	r3, r3, #3
 80156a6:	f043 0301 	orr.w	r3, r3, #1
 80156aa:	81a3      	strh	r3, [r4, #12]
 80156ac:	89a3      	ldrh	r3, [r4, #12]
 80156ae:	431d      	orrs	r5, r3
 80156b0:	81a5      	strh	r5, [r4, #12]
 80156b2:	e7cf      	b.n	8015654 <__smakebuf_r+0x18>

080156b4 <_fstat_r>:
 80156b4:	b538      	push	{r3, r4, r5, lr}
 80156b6:	4d07      	ldr	r5, [pc, #28]	@ (80156d4 <_fstat_r+0x20>)
 80156b8:	2300      	movs	r3, #0
 80156ba:	4604      	mov	r4, r0
 80156bc:	4608      	mov	r0, r1
 80156be:	4611      	mov	r1, r2
 80156c0:	602b      	str	r3, [r5, #0]
 80156c2:	f7ee fd4f 	bl	8004164 <_fstat>
 80156c6:	1c43      	adds	r3, r0, #1
 80156c8:	d102      	bne.n	80156d0 <_fstat_r+0x1c>
 80156ca:	682b      	ldr	r3, [r5, #0]
 80156cc:	b103      	cbz	r3, 80156d0 <_fstat_r+0x1c>
 80156ce:	6023      	str	r3, [r4, #0]
 80156d0:	bd38      	pop	{r3, r4, r5, pc}
 80156d2:	bf00      	nop
 80156d4:	20002698 	.word	0x20002698

080156d8 <_isatty_r>:
 80156d8:	b538      	push	{r3, r4, r5, lr}
 80156da:	4d06      	ldr	r5, [pc, #24]	@ (80156f4 <_isatty_r+0x1c>)
 80156dc:	2300      	movs	r3, #0
 80156de:	4604      	mov	r4, r0
 80156e0:	4608      	mov	r0, r1
 80156e2:	602b      	str	r3, [r5, #0]
 80156e4:	f7ee fd4e 	bl	8004184 <_isatty>
 80156e8:	1c43      	adds	r3, r0, #1
 80156ea:	d102      	bne.n	80156f2 <_isatty_r+0x1a>
 80156ec:	682b      	ldr	r3, [r5, #0]
 80156ee:	b103      	cbz	r3, 80156f2 <_isatty_r+0x1a>
 80156f0:	6023      	str	r3, [r4, #0]
 80156f2:	bd38      	pop	{r3, r4, r5, pc}
 80156f4:	20002698 	.word	0x20002698

080156f8 <acos>:
 80156f8:	b538      	push	{r3, r4, r5, lr}
 80156fa:	ed2d 8b02 	vpush	{d8}
 80156fe:	ec55 4b10 	vmov	r4, r5, d0
 8015702:	f000 f9b9 	bl	8015a78 <__ieee754_acos>
 8015706:	4622      	mov	r2, r4
 8015708:	462b      	mov	r3, r5
 801570a:	4620      	mov	r0, r4
 801570c:	4629      	mov	r1, r5
 801570e:	eeb0 8a40 	vmov.f32	s16, s0
 8015712:	eef0 8a60 	vmov.f32	s17, s1
 8015716:	f7eb fa31 	bl	8000b7c <__aeabi_dcmpun>
 801571a:	b9a8      	cbnz	r0, 8015748 <acos+0x50>
 801571c:	ec45 4b10 	vmov	d0, r4, r5
 8015720:	f000 f8ba 	bl	8015898 <fabs>
 8015724:	4b0c      	ldr	r3, [pc, #48]	@ (8015758 <acos+0x60>)
 8015726:	ec51 0b10 	vmov	r0, r1, d0
 801572a:	2200      	movs	r2, #0
 801572c:	f7eb fa1c 	bl	8000b68 <__aeabi_dcmpgt>
 8015730:	b150      	cbz	r0, 8015748 <acos+0x50>
 8015732:	f7fc f86d 	bl	8011810 <__errno>
 8015736:	ecbd 8b02 	vpop	{d8}
 801573a:	2321      	movs	r3, #33	@ 0x21
 801573c:	6003      	str	r3, [r0, #0]
 801573e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015742:	4806      	ldr	r0, [pc, #24]	@ (801575c <acos+0x64>)
 8015744:	f7ff b8e8 	b.w	8014918 <nan>
 8015748:	eeb0 0a48 	vmov.f32	s0, s16
 801574c:	eef0 0a68 	vmov.f32	s1, s17
 8015750:	ecbd 8b02 	vpop	{d8}
 8015754:	bd38      	pop	{r3, r4, r5, pc}
 8015756:	bf00      	nop
 8015758:	3ff00000 	.word	0x3ff00000
 801575c:	080172e0 	.word	0x080172e0

08015760 <pow>:
 8015760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015762:	ed2d 8b02 	vpush	{d8}
 8015766:	eeb0 8a40 	vmov.f32	s16, s0
 801576a:	eef0 8a60 	vmov.f32	s17, s1
 801576e:	ec55 4b11 	vmov	r4, r5, d1
 8015772:	f000 fbdd 	bl	8015f30 <__ieee754_pow>
 8015776:	4622      	mov	r2, r4
 8015778:	462b      	mov	r3, r5
 801577a:	4620      	mov	r0, r4
 801577c:	4629      	mov	r1, r5
 801577e:	ec57 6b10 	vmov	r6, r7, d0
 8015782:	f7eb f9fb 	bl	8000b7c <__aeabi_dcmpun>
 8015786:	2800      	cmp	r0, #0
 8015788:	d13b      	bne.n	8015802 <pow+0xa2>
 801578a:	ec51 0b18 	vmov	r0, r1, d8
 801578e:	2200      	movs	r2, #0
 8015790:	2300      	movs	r3, #0
 8015792:	f7eb f9c1 	bl	8000b18 <__aeabi_dcmpeq>
 8015796:	b1b8      	cbz	r0, 80157c8 <pow+0x68>
 8015798:	2200      	movs	r2, #0
 801579a:	2300      	movs	r3, #0
 801579c:	4620      	mov	r0, r4
 801579e:	4629      	mov	r1, r5
 80157a0:	f7eb f9ba 	bl	8000b18 <__aeabi_dcmpeq>
 80157a4:	2800      	cmp	r0, #0
 80157a6:	d146      	bne.n	8015836 <pow+0xd6>
 80157a8:	ec45 4b10 	vmov	d0, r4, r5
 80157ac:	f000 f87c 	bl	80158a8 <finite>
 80157b0:	b338      	cbz	r0, 8015802 <pow+0xa2>
 80157b2:	2200      	movs	r2, #0
 80157b4:	2300      	movs	r3, #0
 80157b6:	4620      	mov	r0, r4
 80157b8:	4629      	mov	r1, r5
 80157ba:	f7eb f9b7 	bl	8000b2c <__aeabi_dcmplt>
 80157be:	b300      	cbz	r0, 8015802 <pow+0xa2>
 80157c0:	f7fc f826 	bl	8011810 <__errno>
 80157c4:	2322      	movs	r3, #34	@ 0x22
 80157c6:	e01b      	b.n	8015800 <pow+0xa0>
 80157c8:	ec47 6b10 	vmov	d0, r6, r7
 80157cc:	f000 f86c 	bl	80158a8 <finite>
 80157d0:	b9e0      	cbnz	r0, 801580c <pow+0xac>
 80157d2:	eeb0 0a48 	vmov.f32	s0, s16
 80157d6:	eef0 0a68 	vmov.f32	s1, s17
 80157da:	f000 f865 	bl	80158a8 <finite>
 80157de:	b1a8      	cbz	r0, 801580c <pow+0xac>
 80157e0:	ec45 4b10 	vmov	d0, r4, r5
 80157e4:	f000 f860 	bl	80158a8 <finite>
 80157e8:	b180      	cbz	r0, 801580c <pow+0xac>
 80157ea:	4632      	mov	r2, r6
 80157ec:	463b      	mov	r3, r7
 80157ee:	4630      	mov	r0, r6
 80157f0:	4639      	mov	r1, r7
 80157f2:	f7eb f9c3 	bl	8000b7c <__aeabi_dcmpun>
 80157f6:	2800      	cmp	r0, #0
 80157f8:	d0e2      	beq.n	80157c0 <pow+0x60>
 80157fa:	f7fc f809 	bl	8011810 <__errno>
 80157fe:	2321      	movs	r3, #33	@ 0x21
 8015800:	6003      	str	r3, [r0, #0]
 8015802:	ecbd 8b02 	vpop	{d8}
 8015806:	ec47 6b10 	vmov	d0, r6, r7
 801580a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801580c:	2200      	movs	r2, #0
 801580e:	2300      	movs	r3, #0
 8015810:	4630      	mov	r0, r6
 8015812:	4639      	mov	r1, r7
 8015814:	f7eb f980 	bl	8000b18 <__aeabi_dcmpeq>
 8015818:	2800      	cmp	r0, #0
 801581a:	d0f2      	beq.n	8015802 <pow+0xa2>
 801581c:	eeb0 0a48 	vmov.f32	s0, s16
 8015820:	eef0 0a68 	vmov.f32	s1, s17
 8015824:	f000 f840 	bl	80158a8 <finite>
 8015828:	2800      	cmp	r0, #0
 801582a:	d0ea      	beq.n	8015802 <pow+0xa2>
 801582c:	ec45 4b10 	vmov	d0, r4, r5
 8015830:	f000 f83a 	bl	80158a8 <finite>
 8015834:	e7c3      	b.n	80157be <pow+0x5e>
 8015836:	4f01      	ldr	r7, [pc, #4]	@ (801583c <pow+0xdc>)
 8015838:	2600      	movs	r6, #0
 801583a:	e7e2      	b.n	8015802 <pow+0xa2>
 801583c:	3ff00000 	.word	0x3ff00000

08015840 <sqrt>:
 8015840:	b538      	push	{r3, r4, r5, lr}
 8015842:	ed2d 8b02 	vpush	{d8}
 8015846:	ec55 4b10 	vmov	r4, r5, d0
 801584a:	f000 f839 	bl	80158c0 <__ieee754_sqrt>
 801584e:	4622      	mov	r2, r4
 8015850:	462b      	mov	r3, r5
 8015852:	4620      	mov	r0, r4
 8015854:	4629      	mov	r1, r5
 8015856:	eeb0 8a40 	vmov.f32	s16, s0
 801585a:	eef0 8a60 	vmov.f32	s17, s1
 801585e:	f7eb f98d 	bl	8000b7c <__aeabi_dcmpun>
 8015862:	b990      	cbnz	r0, 801588a <sqrt+0x4a>
 8015864:	2200      	movs	r2, #0
 8015866:	2300      	movs	r3, #0
 8015868:	4620      	mov	r0, r4
 801586a:	4629      	mov	r1, r5
 801586c:	f7eb f95e 	bl	8000b2c <__aeabi_dcmplt>
 8015870:	b158      	cbz	r0, 801588a <sqrt+0x4a>
 8015872:	f7fb ffcd 	bl	8011810 <__errno>
 8015876:	2321      	movs	r3, #33	@ 0x21
 8015878:	6003      	str	r3, [r0, #0]
 801587a:	2200      	movs	r2, #0
 801587c:	2300      	movs	r3, #0
 801587e:	4610      	mov	r0, r2
 8015880:	4619      	mov	r1, r3
 8015882:	f7eb f80b 	bl	800089c <__aeabi_ddiv>
 8015886:	ec41 0b18 	vmov	d8, r0, r1
 801588a:	eeb0 0a48 	vmov.f32	s0, s16
 801588e:	eef0 0a68 	vmov.f32	s1, s17
 8015892:	ecbd 8b02 	vpop	{d8}
 8015896:	bd38      	pop	{r3, r4, r5, pc}

08015898 <fabs>:
 8015898:	ec51 0b10 	vmov	r0, r1, d0
 801589c:	4602      	mov	r2, r0
 801589e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80158a2:	ec43 2b10 	vmov	d0, r2, r3
 80158a6:	4770      	bx	lr

080158a8 <finite>:
 80158a8:	b082      	sub	sp, #8
 80158aa:	ed8d 0b00 	vstr	d0, [sp]
 80158ae:	9801      	ldr	r0, [sp, #4]
 80158b0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80158b4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80158b8:	0fc0      	lsrs	r0, r0, #31
 80158ba:	b002      	add	sp, #8
 80158bc:	4770      	bx	lr
	...

080158c0 <__ieee754_sqrt>:
 80158c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158c4:	4a68      	ldr	r2, [pc, #416]	@ (8015a68 <__ieee754_sqrt+0x1a8>)
 80158c6:	ec55 4b10 	vmov	r4, r5, d0
 80158ca:	43aa      	bics	r2, r5
 80158cc:	462b      	mov	r3, r5
 80158ce:	4621      	mov	r1, r4
 80158d0:	d110      	bne.n	80158f4 <__ieee754_sqrt+0x34>
 80158d2:	4622      	mov	r2, r4
 80158d4:	4620      	mov	r0, r4
 80158d6:	4629      	mov	r1, r5
 80158d8:	f7ea feb6 	bl	8000648 <__aeabi_dmul>
 80158dc:	4602      	mov	r2, r0
 80158de:	460b      	mov	r3, r1
 80158e0:	4620      	mov	r0, r4
 80158e2:	4629      	mov	r1, r5
 80158e4:	f7ea fcfa 	bl	80002dc <__adddf3>
 80158e8:	4604      	mov	r4, r0
 80158ea:	460d      	mov	r5, r1
 80158ec:	ec45 4b10 	vmov	d0, r4, r5
 80158f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158f4:	2d00      	cmp	r5, #0
 80158f6:	dc0e      	bgt.n	8015916 <__ieee754_sqrt+0x56>
 80158f8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80158fc:	4322      	orrs	r2, r4
 80158fe:	d0f5      	beq.n	80158ec <__ieee754_sqrt+0x2c>
 8015900:	b19d      	cbz	r5, 801592a <__ieee754_sqrt+0x6a>
 8015902:	4622      	mov	r2, r4
 8015904:	4620      	mov	r0, r4
 8015906:	4629      	mov	r1, r5
 8015908:	f7ea fce6 	bl	80002d8 <__aeabi_dsub>
 801590c:	4602      	mov	r2, r0
 801590e:	460b      	mov	r3, r1
 8015910:	f7ea ffc4 	bl	800089c <__aeabi_ddiv>
 8015914:	e7e8      	b.n	80158e8 <__ieee754_sqrt+0x28>
 8015916:	152a      	asrs	r2, r5, #20
 8015918:	d115      	bne.n	8015946 <__ieee754_sqrt+0x86>
 801591a:	2000      	movs	r0, #0
 801591c:	e009      	b.n	8015932 <__ieee754_sqrt+0x72>
 801591e:	0acb      	lsrs	r3, r1, #11
 8015920:	3a15      	subs	r2, #21
 8015922:	0549      	lsls	r1, r1, #21
 8015924:	2b00      	cmp	r3, #0
 8015926:	d0fa      	beq.n	801591e <__ieee754_sqrt+0x5e>
 8015928:	e7f7      	b.n	801591a <__ieee754_sqrt+0x5a>
 801592a:	462a      	mov	r2, r5
 801592c:	e7fa      	b.n	8015924 <__ieee754_sqrt+0x64>
 801592e:	005b      	lsls	r3, r3, #1
 8015930:	3001      	adds	r0, #1
 8015932:	02dc      	lsls	r4, r3, #11
 8015934:	d5fb      	bpl.n	801592e <__ieee754_sqrt+0x6e>
 8015936:	1e44      	subs	r4, r0, #1
 8015938:	1b12      	subs	r2, r2, r4
 801593a:	f1c0 0420 	rsb	r4, r0, #32
 801593e:	fa21 f404 	lsr.w	r4, r1, r4
 8015942:	4323      	orrs	r3, r4
 8015944:	4081      	lsls	r1, r0
 8015946:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801594a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801594e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015952:	07d2      	lsls	r2, r2, #31
 8015954:	bf5c      	itt	pl
 8015956:	005b      	lslpl	r3, r3, #1
 8015958:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801595c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015960:	bf58      	it	pl
 8015962:	0049      	lslpl	r1, r1, #1
 8015964:	2600      	movs	r6, #0
 8015966:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801596a:	106d      	asrs	r5, r5, #1
 801596c:	0049      	lsls	r1, r1, #1
 801596e:	2016      	movs	r0, #22
 8015970:	4632      	mov	r2, r6
 8015972:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8015976:	1917      	adds	r7, r2, r4
 8015978:	429f      	cmp	r7, r3
 801597a:	bfde      	ittt	le
 801597c:	193a      	addle	r2, r7, r4
 801597e:	1bdb      	suble	r3, r3, r7
 8015980:	1936      	addle	r6, r6, r4
 8015982:	0fcf      	lsrs	r7, r1, #31
 8015984:	3801      	subs	r0, #1
 8015986:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801598a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801598e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015992:	d1f0      	bne.n	8015976 <__ieee754_sqrt+0xb6>
 8015994:	4604      	mov	r4, r0
 8015996:	2720      	movs	r7, #32
 8015998:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801599c:	429a      	cmp	r2, r3
 801599e:	eb00 0e0c 	add.w	lr, r0, ip
 80159a2:	db02      	blt.n	80159aa <__ieee754_sqrt+0xea>
 80159a4:	d113      	bne.n	80159ce <__ieee754_sqrt+0x10e>
 80159a6:	458e      	cmp	lr, r1
 80159a8:	d811      	bhi.n	80159ce <__ieee754_sqrt+0x10e>
 80159aa:	f1be 0f00 	cmp.w	lr, #0
 80159ae:	eb0e 000c 	add.w	r0, lr, ip
 80159b2:	da42      	bge.n	8015a3a <__ieee754_sqrt+0x17a>
 80159b4:	2800      	cmp	r0, #0
 80159b6:	db40      	blt.n	8015a3a <__ieee754_sqrt+0x17a>
 80159b8:	f102 0801 	add.w	r8, r2, #1
 80159bc:	1a9b      	subs	r3, r3, r2
 80159be:	458e      	cmp	lr, r1
 80159c0:	bf88      	it	hi
 80159c2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80159c6:	eba1 010e 	sub.w	r1, r1, lr
 80159ca:	4464      	add	r4, ip
 80159cc:	4642      	mov	r2, r8
 80159ce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80159d2:	3f01      	subs	r7, #1
 80159d4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80159d8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80159dc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80159e0:	d1dc      	bne.n	801599c <__ieee754_sqrt+0xdc>
 80159e2:	4319      	orrs	r1, r3
 80159e4:	d01b      	beq.n	8015a1e <__ieee754_sqrt+0x15e>
 80159e6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8015a6c <__ieee754_sqrt+0x1ac>
 80159ea:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8015a70 <__ieee754_sqrt+0x1b0>
 80159ee:	e9da 0100 	ldrd	r0, r1, [sl]
 80159f2:	e9db 2300 	ldrd	r2, r3, [fp]
 80159f6:	f7ea fc6f 	bl	80002d8 <__aeabi_dsub>
 80159fa:	e9da 8900 	ldrd	r8, r9, [sl]
 80159fe:	4602      	mov	r2, r0
 8015a00:	460b      	mov	r3, r1
 8015a02:	4640      	mov	r0, r8
 8015a04:	4649      	mov	r1, r9
 8015a06:	f7eb f89b 	bl	8000b40 <__aeabi_dcmple>
 8015a0a:	b140      	cbz	r0, 8015a1e <__ieee754_sqrt+0x15e>
 8015a0c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8015a10:	e9da 0100 	ldrd	r0, r1, [sl]
 8015a14:	e9db 2300 	ldrd	r2, r3, [fp]
 8015a18:	d111      	bne.n	8015a3e <__ieee754_sqrt+0x17e>
 8015a1a:	3601      	adds	r6, #1
 8015a1c:	463c      	mov	r4, r7
 8015a1e:	1072      	asrs	r2, r6, #1
 8015a20:	0863      	lsrs	r3, r4, #1
 8015a22:	07f1      	lsls	r1, r6, #31
 8015a24:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8015a28:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8015a2c:	bf48      	it	mi
 8015a2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8015a32:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8015a36:	4618      	mov	r0, r3
 8015a38:	e756      	b.n	80158e8 <__ieee754_sqrt+0x28>
 8015a3a:	4690      	mov	r8, r2
 8015a3c:	e7be      	b.n	80159bc <__ieee754_sqrt+0xfc>
 8015a3e:	f7ea fc4d 	bl	80002dc <__adddf3>
 8015a42:	e9da 8900 	ldrd	r8, r9, [sl]
 8015a46:	4602      	mov	r2, r0
 8015a48:	460b      	mov	r3, r1
 8015a4a:	4640      	mov	r0, r8
 8015a4c:	4649      	mov	r1, r9
 8015a4e:	f7eb f86d 	bl	8000b2c <__aeabi_dcmplt>
 8015a52:	b120      	cbz	r0, 8015a5e <__ieee754_sqrt+0x19e>
 8015a54:	1ca0      	adds	r0, r4, #2
 8015a56:	bf08      	it	eq
 8015a58:	3601      	addeq	r6, #1
 8015a5a:	3402      	adds	r4, #2
 8015a5c:	e7df      	b.n	8015a1e <__ieee754_sqrt+0x15e>
 8015a5e:	1c63      	adds	r3, r4, #1
 8015a60:	f023 0401 	bic.w	r4, r3, #1
 8015a64:	e7db      	b.n	8015a1e <__ieee754_sqrt+0x15e>
 8015a66:	bf00      	nop
 8015a68:	7ff00000 	.word	0x7ff00000
 8015a6c:	20000390 	.word	0x20000390
 8015a70:	20000388 	.word	0x20000388
 8015a74:	00000000 	.word	0x00000000

08015a78 <__ieee754_acos>:
 8015a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a7c:	ec55 4b10 	vmov	r4, r5, d0
 8015a80:	49b7      	ldr	r1, [pc, #732]	@ (8015d60 <__ieee754_acos+0x2e8>)
 8015a82:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8015a86:	428b      	cmp	r3, r1
 8015a88:	d919      	bls.n	8015abe <__ieee754_acos+0x46>
 8015a8a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8015a8e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8015a92:	4323      	orrs	r3, r4
 8015a94:	d106      	bne.n	8015aa4 <__ieee754_acos+0x2c>
 8015a96:	2d00      	cmp	r5, #0
 8015a98:	f340 8210 	ble.w	8015ebc <__ieee754_acos+0x444>
 8015a9c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8015cf0 <__ieee754_acos+0x278>
 8015aa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aa4:	4622      	mov	r2, r4
 8015aa6:	462b      	mov	r3, r5
 8015aa8:	4620      	mov	r0, r4
 8015aaa:	4629      	mov	r1, r5
 8015aac:	f7ea fc14 	bl	80002d8 <__aeabi_dsub>
 8015ab0:	4602      	mov	r2, r0
 8015ab2:	460b      	mov	r3, r1
 8015ab4:	f7ea fef2 	bl	800089c <__aeabi_ddiv>
 8015ab8:	ec41 0b10 	vmov	d0, r0, r1
 8015abc:	e7f0      	b.n	8015aa0 <__ieee754_acos+0x28>
 8015abe:	49a9      	ldr	r1, [pc, #676]	@ (8015d64 <__ieee754_acos+0x2ec>)
 8015ac0:	428b      	cmp	r3, r1
 8015ac2:	f200 8085 	bhi.w	8015bd0 <__ieee754_acos+0x158>
 8015ac6:	4aa8      	ldr	r2, [pc, #672]	@ (8015d68 <__ieee754_acos+0x2f0>)
 8015ac8:	4293      	cmp	r3, r2
 8015aca:	f240 81fa 	bls.w	8015ec2 <__ieee754_acos+0x44a>
 8015ace:	4622      	mov	r2, r4
 8015ad0:	462b      	mov	r3, r5
 8015ad2:	4620      	mov	r0, r4
 8015ad4:	4629      	mov	r1, r5
 8015ad6:	f7ea fdb7 	bl	8000648 <__aeabi_dmul>
 8015ada:	a387      	add	r3, pc, #540	@ (adr r3, 8015cf8 <__ieee754_acos+0x280>)
 8015adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ae0:	4606      	mov	r6, r0
 8015ae2:	460f      	mov	r7, r1
 8015ae4:	f7ea fdb0 	bl	8000648 <__aeabi_dmul>
 8015ae8:	a385      	add	r3, pc, #532	@ (adr r3, 8015d00 <__ieee754_acos+0x288>)
 8015aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aee:	f7ea fbf5 	bl	80002dc <__adddf3>
 8015af2:	4632      	mov	r2, r6
 8015af4:	463b      	mov	r3, r7
 8015af6:	f7ea fda7 	bl	8000648 <__aeabi_dmul>
 8015afa:	a383      	add	r3, pc, #524	@ (adr r3, 8015d08 <__ieee754_acos+0x290>)
 8015afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b00:	f7ea fbea 	bl	80002d8 <__aeabi_dsub>
 8015b04:	4632      	mov	r2, r6
 8015b06:	463b      	mov	r3, r7
 8015b08:	f7ea fd9e 	bl	8000648 <__aeabi_dmul>
 8015b0c:	a380      	add	r3, pc, #512	@ (adr r3, 8015d10 <__ieee754_acos+0x298>)
 8015b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b12:	f7ea fbe3 	bl	80002dc <__adddf3>
 8015b16:	4632      	mov	r2, r6
 8015b18:	463b      	mov	r3, r7
 8015b1a:	f7ea fd95 	bl	8000648 <__aeabi_dmul>
 8015b1e:	a37e      	add	r3, pc, #504	@ (adr r3, 8015d18 <__ieee754_acos+0x2a0>)
 8015b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b24:	f7ea fbd8 	bl	80002d8 <__aeabi_dsub>
 8015b28:	4632      	mov	r2, r6
 8015b2a:	463b      	mov	r3, r7
 8015b2c:	f7ea fd8c 	bl	8000648 <__aeabi_dmul>
 8015b30:	a37b      	add	r3, pc, #492	@ (adr r3, 8015d20 <__ieee754_acos+0x2a8>)
 8015b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b36:	f7ea fbd1 	bl	80002dc <__adddf3>
 8015b3a:	4632      	mov	r2, r6
 8015b3c:	463b      	mov	r3, r7
 8015b3e:	f7ea fd83 	bl	8000648 <__aeabi_dmul>
 8015b42:	a379      	add	r3, pc, #484	@ (adr r3, 8015d28 <__ieee754_acos+0x2b0>)
 8015b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b48:	4680      	mov	r8, r0
 8015b4a:	4689      	mov	r9, r1
 8015b4c:	4630      	mov	r0, r6
 8015b4e:	4639      	mov	r1, r7
 8015b50:	f7ea fd7a 	bl	8000648 <__aeabi_dmul>
 8015b54:	a376      	add	r3, pc, #472	@ (adr r3, 8015d30 <__ieee754_acos+0x2b8>)
 8015b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5a:	f7ea fbbd 	bl	80002d8 <__aeabi_dsub>
 8015b5e:	4632      	mov	r2, r6
 8015b60:	463b      	mov	r3, r7
 8015b62:	f7ea fd71 	bl	8000648 <__aeabi_dmul>
 8015b66:	a374      	add	r3, pc, #464	@ (adr r3, 8015d38 <__ieee754_acos+0x2c0>)
 8015b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b6c:	f7ea fbb6 	bl	80002dc <__adddf3>
 8015b70:	4632      	mov	r2, r6
 8015b72:	463b      	mov	r3, r7
 8015b74:	f7ea fd68 	bl	8000648 <__aeabi_dmul>
 8015b78:	a371      	add	r3, pc, #452	@ (adr r3, 8015d40 <__ieee754_acos+0x2c8>)
 8015b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b7e:	f7ea fbab 	bl	80002d8 <__aeabi_dsub>
 8015b82:	4632      	mov	r2, r6
 8015b84:	463b      	mov	r3, r7
 8015b86:	f7ea fd5f 	bl	8000648 <__aeabi_dmul>
 8015b8a:	4b78      	ldr	r3, [pc, #480]	@ (8015d6c <__ieee754_acos+0x2f4>)
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	f7ea fba5 	bl	80002dc <__adddf3>
 8015b92:	4602      	mov	r2, r0
 8015b94:	460b      	mov	r3, r1
 8015b96:	4640      	mov	r0, r8
 8015b98:	4649      	mov	r1, r9
 8015b9a:	f7ea fe7f 	bl	800089c <__aeabi_ddiv>
 8015b9e:	4622      	mov	r2, r4
 8015ba0:	462b      	mov	r3, r5
 8015ba2:	f7ea fd51 	bl	8000648 <__aeabi_dmul>
 8015ba6:	4602      	mov	r2, r0
 8015ba8:	460b      	mov	r3, r1
 8015baa:	a167      	add	r1, pc, #412	@ (adr r1, 8015d48 <__ieee754_acos+0x2d0>)
 8015bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bb0:	f7ea fb92 	bl	80002d8 <__aeabi_dsub>
 8015bb4:	4602      	mov	r2, r0
 8015bb6:	460b      	mov	r3, r1
 8015bb8:	4620      	mov	r0, r4
 8015bba:	4629      	mov	r1, r5
 8015bbc:	f7ea fb8c 	bl	80002d8 <__aeabi_dsub>
 8015bc0:	4602      	mov	r2, r0
 8015bc2:	460b      	mov	r3, r1
 8015bc4:	a162      	add	r1, pc, #392	@ (adr r1, 8015d50 <__ieee754_acos+0x2d8>)
 8015bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bca:	f7ea fb85 	bl	80002d8 <__aeabi_dsub>
 8015bce:	e773      	b.n	8015ab8 <__ieee754_acos+0x40>
 8015bd0:	2d00      	cmp	r5, #0
 8015bd2:	f280 80cf 	bge.w	8015d74 <__ieee754_acos+0x2fc>
 8015bd6:	4b65      	ldr	r3, [pc, #404]	@ (8015d6c <__ieee754_acos+0x2f4>)
 8015bd8:	2200      	movs	r2, #0
 8015bda:	4620      	mov	r0, r4
 8015bdc:	4629      	mov	r1, r5
 8015bde:	f7ea fb7d 	bl	80002dc <__adddf3>
 8015be2:	4b63      	ldr	r3, [pc, #396]	@ (8015d70 <__ieee754_acos+0x2f8>)
 8015be4:	2200      	movs	r2, #0
 8015be6:	f7ea fd2f 	bl	8000648 <__aeabi_dmul>
 8015bea:	a343      	add	r3, pc, #268	@ (adr r3, 8015cf8 <__ieee754_acos+0x280>)
 8015bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bf0:	4604      	mov	r4, r0
 8015bf2:	460d      	mov	r5, r1
 8015bf4:	f7ea fd28 	bl	8000648 <__aeabi_dmul>
 8015bf8:	a341      	add	r3, pc, #260	@ (adr r3, 8015d00 <__ieee754_acos+0x288>)
 8015bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bfe:	f7ea fb6d 	bl	80002dc <__adddf3>
 8015c02:	4622      	mov	r2, r4
 8015c04:	462b      	mov	r3, r5
 8015c06:	f7ea fd1f 	bl	8000648 <__aeabi_dmul>
 8015c0a:	a33f      	add	r3, pc, #252	@ (adr r3, 8015d08 <__ieee754_acos+0x290>)
 8015c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c10:	f7ea fb62 	bl	80002d8 <__aeabi_dsub>
 8015c14:	4622      	mov	r2, r4
 8015c16:	462b      	mov	r3, r5
 8015c18:	f7ea fd16 	bl	8000648 <__aeabi_dmul>
 8015c1c:	a33c      	add	r3, pc, #240	@ (adr r3, 8015d10 <__ieee754_acos+0x298>)
 8015c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c22:	f7ea fb5b 	bl	80002dc <__adddf3>
 8015c26:	4622      	mov	r2, r4
 8015c28:	462b      	mov	r3, r5
 8015c2a:	f7ea fd0d 	bl	8000648 <__aeabi_dmul>
 8015c2e:	a33a      	add	r3, pc, #232	@ (adr r3, 8015d18 <__ieee754_acos+0x2a0>)
 8015c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c34:	f7ea fb50 	bl	80002d8 <__aeabi_dsub>
 8015c38:	4622      	mov	r2, r4
 8015c3a:	462b      	mov	r3, r5
 8015c3c:	f7ea fd04 	bl	8000648 <__aeabi_dmul>
 8015c40:	a337      	add	r3, pc, #220	@ (adr r3, 8015d20 <__ieee754_acos+0x2a8>)
 8015c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c46:	f7ea fb49 	bl	80002dc <__adddf3>
 8015c4a:	4622      	mov	r2, r4
 8015c4c:	462b      	mov	r3, r5
 8015c4e:	f7ea fcfb 	bl	8000648 <__aeabi_dmul>
 8015c52:	a335      	add	r3, pc, #212	@ (adr r3, 8015d28 <__ieee754_acos+0x2b0>)
 8015c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c58:	4606      	mov	r6, r0
 8015c5a:	460f      	mov	r7, r1
 8015c5c:	4620      	mov	r0, r4
 8015c5e:	4629      	mov	r1, r5
 8015c60:	f7ea fcf2 	bl	8000648 <__aeabi_dmul>
 8015c64:	a332      	add	r3, pc, #200	@ (adr r3, 8015d30 <__ieee754_acos+0x2b8>)
 8015c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c6a:	f7ea fb35 	bl	80002d8 <__aeabi_dsub>
 8015c6e:	4622      	mov	r2, r4
 8015c70:	462b      	mov	r3, r5
 8015c72:	f7ea fce9 	bl	8000648 <__aeabi_dmul>
 8015c76:	a330      	add	r3, pc, #192	@ (adr r3, 8015d38 <__ieee754_acos+0x2c0>)
 8015c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c7c:	f7ea fb2e 	bl	80002dc <__adddf3>
 8015c80:	4622      	mov	r2, r4
 8015c82:	462b      	mov	r3, r5
 8015c84:	f7ea fce0 	bl	8000648 <__aeabi_dmul>
 8015c88:	a32d      	add	r3, pc, #180	@ (adr r3, 8015d40 <__ieee754_acos+0x2c8>)
 8015c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c8e:	f7ea fb23 	bl	80002d8 <__aeabi_dsub>
 8015c92:	4622      	mov	r2, r4
 8015c94:	462b      	mov	r3, r5
 8015c96:	f7ea fcd7 	bl	8000648 <__aeabi_dmul>
 8015c9a:	4b34      	ldr	r3, [pc, #208]	@ (8015d6c <__ieee754_acos+0x2f4>)
 8015c9c:	2200      	movs	r2, #0
 8015c9e:	f7ea fb1d 	bl	80002dc <__adddf3>
 8015ca2:	ec45 4b10 	vmov	d0, r4, r5
 8015ca6:	4680      	mov	r8, r0
 8015ca8:	4689      	mov	r9, r1
 8015caa:	f7ff fe09 	bl	80158c0 <__ieee754_sqrt>
 8015cae:	ec55 4b10 	vmov	r4, r5, d0
 8015cb2:	4642      	mov	r2, r8
 8015cb4:	464b      	mov	r3, r9
 8015cb6:	4630      	mov	r0, r6
 8015cb8:	4639      	mov	r1, r7
 8015cba:	f7ea fdef 	bl	800089c <__aeabi_ddiv>
 8015cbe:	4622      	mov	r2, r4
 8015cc0:	462b      	mov	r3, r5
 8015cc2:	f7ea fcc1 	bl	8000648 <__aeabi_dmul>
 8015cc6:	a320      	add	r3, pc, #128	@ (adr r3, 8015d48 <__ieee754_acos+0x2d0>)
 8015cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ccc:	f7ea fb04 	bl	80002d8 <__aeabi_dsub>
 8015cd0:	4622      	mov	r2, r4
 8015cd2:	462b      	mov	r3, r5
 8015cd4:	f7ea fb02 	bl	80002dc <__adddf3>
 8015cd8:	4602      	mov	r2, r0
 8015cda:	460b      	mov	r3, r1
 8015cdc:	f7ea fafe 	bl	80002dc <__adddf3>
 8015ce0:	4602      	mov	r2, r0
 8015ce2:	460b      	mov	r3, r1
 8015ce4:	a11c      	add	r1, pc, #112	@ (adr r1, 8015d58 <__ieee754_acos+0x2e0>)
 8015ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015cea:	e76e      	b.n	8015bca <__ieee754_acos+0x152>
 8015cec:	f3af 8000 	nop.w
	...
 8015cf8:	0dfdf709 	.word	0x0dfdf709
 8015cfc:	3f023de1 	.word	0x3f023de1
 8015d00:	7501b288 	.word	0x7501b288
 8015d04:	3f49efe0 	.word	0x3f49efe0
 8015d08:	b5688f3b 	.word	0xb5688f3b
 8015d0c:	3fa48228 	.word	0x3fa48228
 8015d10:	0e884455 	.word	0x0e884455
 8015d14:	3fc9c155 	.word	0x3fc9c155
 8015d18:	03eb6f7d 	.word	0x03eb6f7d
 8015d1c:	3fd4d612 	.word	0x3fd4d612
 8015d20:	55555555 	.word	0x55555555
 8015d24:	3fc55555 	.word	0x3fc55555
 8015d28:	b12e9282 	.word	0xb12e9282
 8015d2c:	3fb3b8c5 	.word	0x3fb3b8c5
 8015d30:	1b8d0159 	.word	0x1b8d0159
 8015d34:	3fe6066c 	.word	0x3fe6066c
 8015d38:	9c598ac8 	.word	0x9c598ac8
 8015d3c:	40002ae5 	.word	0x40002ae5
 8015d40:	1c8a2d4b 	.word	0x1c8a2d4b
 8015d44:	40033a27 	.word	0x40033a27
 8015d48:	33145c07 	.word	0x33145c07
 8015d4c:	3c91a626 	.word	0x3c91a626
 8015d50:	54442d18 	.word	0x54442d18
 8015d54:	3ff921fb 	.word	0x3ff921fb
 8015d58:	54442d18 	.word	0x54442d18
 8015d5c:	400921fb 	.word	0x400921fb
 8015d60:	3fefffff 	.word	0x3fefffff
 8015d64:	3fdfffff 	.word	0x3fdfffff
 8015d68:	3c600000 	.word	0x3c600000
 8015d6c:	3ff00000 	.word	0x3ff00000
 8015d70:	3fe00000 	.word	0x3fe00000
 8015d74:	4622      	mov	r2, r4
 8015d76:	462b      	mov	r3, r5
 8015d78:	496b      	ldr	r1, [pc, #428]	@ (8015f28 <__ieee754_acos+0x4b0>)
 8015d7a:	2000      	movs	r0, #0
 8015d7c:	f7ea faac 	bl	80002d8 <__aeabi_dsub>
 8015d80:	4b6a      	ldr	r3, [pc, #424]	@ (8015f2c <__ieee754_acos+0x4b4>)
 8015d82:	2200      	movs	r2, #0
 8015d84:	f7ea fc60 	bl	8000648 <__aeabi_dmul>
 8015d88:	4604      	mov	r4, r0
 8015d8a:	460d      	mov	r5, r1
 8015d8c:	ec45 4b10 	vmov	d0, r4, r5
 8015d90:	f7ff fd96 	bl	80158c0 <__ieee754_sqrt>
 8015d94:	a34c      	add	r3, pc, #304	@ (adr r3, 8015ec8 <__ieee754_acos+0x450>)
 8015d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d9a:	4620      	mov	r0, r4
 8015d9c:	4629      	mov	r1, r5
 8015d9e:	ec59 8b10 	vmov	r8, r9, d0
 8015da2:	f7ea fc51 	bl	8000648 <__aeabi_dmul>
 8015da6:	a34a      	add	r3, pc, #296	@ (adr r3, 8015ed0 <__ieee754_acos+0x458>)
 8015da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dac:	f7ea fa96 	bl	80002dc <__adddf3>
 8015db0:	4622      	mov	r2, r4
 8015db2:	462b      	mov	r3, r5
 8015db4:	f7ea fc48 	bl	8000648 <__aeabi_dmul>
 8015db8:	a347      	add	r3, pc, #284	@ (adr r3, 8015ed8 <__ieee754_acos+0x460>)
 8015dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dbe:	f7ea fa8b 	bl	80002d8 <__aeabi_dsub>
 8015dc2:	4622      	mov	r2, r4
 8015dc4:	462b      	mov	r3, r5
 8015dc6:	f7ea fc3f 	bl	8000648 <__aeabi_dmul>
 8015dca:	a345      	add	r3, pc, #276	@ (adr r3, 8015ee0 <__ieee754_acos+0x468>)
 8015dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dd0:	f7ea fa84 	bl	80002dc <__adddf3>
 8015dd4:	4622      	mov	r2, r4
 8015dd6:	462b      	mov	r3, r5
 8015dd8:	f7ea fc36 	bl	8000648 <__aeabi_dmul>
 8015ddc:	a342      	add	r3, pc, #264	@ (adr r3, 8015ee8 <__ieee754_acos+0x470>)
 8015dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015de2:	f7ea fa79 	bl	80002d8 <__aeabi_dsub>
 8015de6:	4622      	mov	r2, r4
 8015de8:	462b      	mov	r3, r5
 8015dea:	f7ea fc2d 	bl	8000648 <__aeabi_dmul>
 8015dee:	a340      	add	r3, pc, #256	@ (adr r3, 8015ef0 <__ieee754_acos+0x478>)
 8015df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015df4:	f7ea fa72 	bl	80002dc <__adddf3>
 8015df8:	4622      	mov	r2, r4
 8015dfa:	462b      	mov	r3, r5
 8015dfc:	f7ea fc24 	bl	8000648 <__aeabi_dmul>
 8015e00:	a33d      	add	r3, pc, #244	@ (adr r3, 8015ef8 <__ieee754_acos+0x480>)
 8015e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e06:	4682      	mov	sl, r0
 8015e08:	468b      	mov	fp, r1
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	4629      	mov	r1, r5
 8015e0e:	f7ea fc1b 	bl	8000648 <__aeabi_dmul>
 8015e12:	a33b      	add	r3, pc, #236	@ (adr r3, 8015f00 <__ieee754_acos+0x488>)
 8015e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e18:	f7ea fa5e 	bl	80002d8 <__aeabi_dsub>
 8015e1c:	4622      	mov	r2, r4
 8015e1e:	462b      	mov	r3, r5
 8015e20:	f7ea fc12 	bl	8000648 <__aeabi_dmul>
 8015e24:	a338      	add	r3, pc, #224	@ (adr r3, 8015f08 <__ieee754_acos+0x490>)
 8015e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e2a:	f7ea fa57 	bl	80002dc <__adddf3>
 8015e2e:	4622      	mov	r2, r4
 8015e30:	462b      	mov	r3, r5
 8015e32:	f7ea fc09 	bl	8000648 <__aeabi_dmul>
 8015e36:	a336      	add	r3, pc, #216	@ (adr r3, 8015f10 <__ieee754_acos+0x498>)
 8015e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e3c:	f7ea fa4c 	bl	80002d8 <__aeabi_dsub>
 8015e40:	4622      	mov	r2, r4
 8015e42:	462b      	mov	r3, r5
 8015e44:	f7ea fc00 	bl	8000648 <__aeabi_dmul>
 8015e48:	4b37      	ldr	r3, [pc, #220]	@ (8015f28 <__ieee754_acos+0x4b0>)
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	f7ea fa46 	bl	80002dc <__adddf3>
 8015e50:	4602      	mov	r2, r0
 8015e52:	460b      	mov	r3, r1
 8015e54:	4650      	mov	r0, sl
 8015e56:	4659      	mov	r1, fp
 8015e58:	f7ea fd20 	bl	800089c <__aeabi_ddiv>
 8015e5c:	4642      	mov	r2, r8
 8015e5e:	464b      	mov	r3, r9
 8015e60:	f7ea fbf2 	bl	8000648 <__aeabi_dmul>
 8015e64:	2600      	movs	r6, #0
 8015e66:	4682      	mov	sl, r0
 8015e68:	468b      	mov	fp, r1
 8015e6a:	4632      	mov	r2, r6
 8015e6c:	464b      	mov	r3, r9
 8015e6e:	4630      	mov	r0, r6
 8015e70:	4649      	mov	r1, r9
 8015e72:	f7ea fbe9 	bl	8000648 <__aeabi_dmul>
 8015e76:	4602      	mov	r2, r0
 8015e78:	460b      	mov	r3, r1
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	4629      	mov	r1, r5
 8015e7e:	f7ea fa2b 	bl	80002d8 <__aeabi_dsub>
 8015e82:	4632      	mov	r2, r6
 8015e84:	4604      	mov	r4, r0
 8015e86:	460d      	mov	r5, r1
 8015e88:	464b      	mov	r3, r9
 8015e8a:	4640      	mov	r0, r8
 8015e8c:	4649      	mov	r1, r9
 8015e8e:	f7ea fa25 	bl	80002dc <__adddf3>
 8015e92:	4602      	mov	r2, r0
 8015e94:	460b      	mov	r3, r1
 8015e96:	4620      	mov	r0, r4
 8015e98:	4629      	mov	r1, r5
 8015e9a:	f7ea fcff 	bl	800089c <__aeabi_ddiv>
 8015e9e:	4602      	mov	r2, r0
 8015ea0:	460b      	mov	r3, r1
 8015ea2:	4650      	mov	r0, sl
 8015ea4:	4659      	mov	r1, fp
 8015ea6:	f7ea fa19 	bl	80002dc <__adddf3>
 8015eaa:	4632      	mov	r2, r6
 8015eac:	464b      	mov	r3, r9
 8015eae:	f7ea fa15 	bl	80002dc <__adddf3>
 8015eb2:	4602      	mov	r2, r0
 8015eb4:	460b      	mov	r3, r1
 8015eb6:	f7ea fa11 	bl	80002dc <__adddf3>
 8015eba:	e5fd      	b.n	8015ab8 <__ieee754_acos+0x40>
 8015ebc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8015f18 <__ieee754_acos+0x4a0>
 8015ec0:	e5ee      	b.n	8015aa0 <__ieee754_acos+0x28>
 8015ec2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8015f20 <__ieee754_acos+0x4a8>
 8015ec6:	e5eb      	b.n	8015aa0 <__ieee754_acos+0x28>
 8015ec8:	0dfdf709 	.word	0x0dfdf709
 8015ecc:	3f023de1 	.word	0x3f023de1
 8015ed0:	7501b288 	.word	0x7501b288
 8015ed4:	3f49efe0 	.word	0x3f49efe0
 8015ed8:	b5688f3b 	.word	0xb5688f3b
 8015edc:	3fa48228 	.word	0x3fa48228
 8015ee0:	0e884455 	.word	0x0e884455
 8015ee4:	3fc9c155 	.word	0x3fc9c155
 8015ee8:	03eb6f7d 	.word	0x03eb6f7d
 8015eec:	3fd4d612 	.word	0x3fd4d612
 8015ef0:	55555555 	.word	0x55555555
 8015ef4:	3fc55555 	.word	0x3fc55555
 8015ef8:	b12e9282 	.word	0xb12e9282
 8015efc:	3fb3b8c5 	.word	0x3fb3b8c5
 8015f00:	1b8d0159 	.word	0x1b8d0159
 8015f04:	3fe6066c 	.word	0x3fe6066c
 8015f08:	9c598ac8 	.word	0x9c598ac8
 8015f0c:	40002ae5 	.word	0x40002ae5
 8015f10:	1c8a2d4b 	.word	0x1c8a2d4b
 8015f14:	40033a27 	.word	0x40033a27
 8015f18:	54442d18 	.word	0x54442d18
 8015f1c:	400921fb 	.word	0x400921fb
 8015f20:	54442d18 	.word	0x54442d18
 8015f24:	3ff921fb 	.word	0x3ff921fb
 8015f28:	3ff00000 	.word	0x3ff00000
 8015f2c:	3fe00000 	.word	0x3fe00000

08015f30 <__ieee754_pow>:
 8015f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f34:	b091      	sub	sp, #68	@ 0x44
 8015f36:	ed8d 1b00 	vstr	d1, [sp]
 8015f3a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8015f3e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015f42:	ea5a 0001 	orrs.w	r0, sl, r1
 8015f46:	ec57 6b10 	vmov	r6, r7, d0
 8015f4a:	d113      	bne.n	8015f74 <__ieee754_pow+0x44>
 8015f4c:	19b3      	adds	r3, r6, r6
 8015f4e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015f52:	4152      	adcs	r2, r2
 8015f54:	4298      	cmp	r0, r3
 8015f56:	4b98      	ldr	r3, [pc, #608]	@ (80161b8 <__ieee754_pow+0x288>)
 8015f58:	4193      	sbcs	r3, r2
 8015f5a:	f080 84ea 	bcs.w	8016932 <__ieee754_pow+0xa02>
 8015f5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015f62:	4630      	mov	r0, r6
 8015f64:	4639      	mov	r1, r7
 8015f66:	f7ea f9b9 	bl	80002dc <__adddf3>
 8015f6a:	ec41 0b10 	vmov	d0, r0, r1
 8015f6e:	b011      	add	sp, #68	@ 0x44
 8015f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f74:	4a91      	ldr	r2, [pc, #580]	@ (80161bc <__ieee754_pow+0x28c>)
 8015f76:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8015f7a:	4590      	cmp	r8, r2
 8015f7c:	463d      	mov	r5, r7
 8015f7e:	4633      	mov	r3, r6
 8015f80:	d806      	bhi.n	8015f90 <__ieee754_pow+0x60>
 8015f82:	d101      	bne.n	8015f88 <__ieee754_pow+0x58>
 8015f84:	2e00      	cmp	r6, #0
 8015f86:	d1ea      	bne.n	8015f5e <__ieee754_pow+0x2e>
 8015f88:	4592      	cmp	sl, r2
 8015f8a:	d801      	bhi.n	8015f90 <__ieee754_pow+0x60>
 8015f8c:	d10e      	bne.n	8015fac <__ieee754_pow+0x7c>
 8015f8e:	b169      	cbz	r1, 8015fac <__ieee754_pow+0x7c>
 8015f90:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8015f94:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8015f98:	431d      	orrs	r5, r3
 8015f9a:	d1e0      	bne.n	8015f5e <__ieee754_pow+0x2e>
 8015f9c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015fa0:	18db      	adds	r3, r3, r3
 8015fa2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015fa6:	4152      	adcs	r2, r2
 8015fa8:	429d      	cmp	r5, r3
 8015faa:	e7d4      	b.n	8015f56 <__ieee754_pow+0x26>
 8015fac:	2d00      	cmp	r5, #0
 8015fae:	46c3      	mov	fp, r8
 8015fb0:	da3a      	bge.n	8016028 <__ieee754_pow+0xf8>
 8015fb2:	4a83      	ldr	r2, [pc, #524]	@ (80161c0 <__ieee754_pow+0x290>)
 8015fb4:	4592      	cmp	sl, r2
 8015fb6:	d84d      	bhi.n	8016054 <__ieee754_pow+0x124>
 8015fb8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8015fbc:	4592      	cmp	sl, r2
 8015fbe:	f240 84c7 	bls.w	8016950 <__ieee754_pow+0xa20>
 8015fc2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8015fc6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015fca:	2a14      	cmp	r2, #20
 8015fcc:	dd0f      	ble.n	8015fee <__ieee754_pow+0xbe>
 8015fce:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8015fd2:	fa21 f402 	lsr.w	r4, r1, r2
 8015fd6:	fa04 f202 	lsl.w	r2, r4, r2
 8015fda:	428a      	cmp	r2, r1
 8015fdc:	f040 84b8 	bne.w	8016950 <__ieee754_pow+0xa20>
 8015fe0:	f004 0401 	and.w	r4, r4, #1
 8015fe4:	f1c4 0402 	rsb	r4, r4, #2
 8015fe8:	2900      	cmp	r1, #0
 8015fea:	d158      	bne.n	801609e <__ieee754_pow+0x16e>
 8015fec:	e00e      	b.n	801600c <__ieee754_pow+0xdc>
 8015fee:	2900      	cmp	r1, #0
 8015ff0:	d154      	bne.n	801609c <__ieee754_pow+0x16c>
 8015ff2:	f1c2 0214 	rsb	r2, r2, #20
 8015ff6:	fa4a f402 	asr.w	r4, sl, r2
 8015ffa:	fa04 f202 	lsl.w	r2, r4, r2
 8015ffe:	4552      	cmp	r2, sl
 8016000:	f040 84a3 	bne.w	801694a <__ieee754_pow+0xa1a>
 8016004:	f004 0401 	and.w	r4, r4, #1
 8016008:	f1c4 0402 	rsb	r4, r4, #2
 801600c:	4a6d      	ldr	r2, [pc, #436]	@ (80161c4 <__ieee754_pow+0x294>)
 801600e:	4592      	cmp	sl, r2
 8016010:	d12e      	bne.n	8016070 <__ieee754_pow+0x140>
 8016012:	f1b9 0f00 	cmp.w	r9, #0
 8016016:	f280 8494 	bge.w	8016942 <__ieee754_pow+0xa12>
 801601a:	496a      	ldr	r1, [pc, #424]	@ (80161c4 <__ieee754_pow+0x294>)
 801601c:	4632      	mov	r2, r6
 801601e:	463b      	mov	r3, r7
 8016020:	2000      	movs	r0, #0
 8016022:	f7ea fc3b 	bl	800089c <__aeabi_ddiv>
 8016026:	e7a0      	b.n	8015f6a <__ieee754_pow+0x3a>
 8016028:	2400      	movs	r4, #0
 801602a:	bbc1      	cbnz	r1, 801609e <__ieee754_pow+0x16e>
 801602c:	4a63      	ldr	r2, [pc, #396]	@ (80161bc <__ieee754_pow+0x28c>)
 801602e:	4592      	cmp	sl, r2
 8016030:	d1ec      	bne.n	801600c <__ieee754_pow+0xdc>
 8016032:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8016036:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801603a:	431a      	orrs	r2, r3
 801603c:	f000 8479 	beq.w	8016932 <__ieee754_pow+0xa02>
 8016040:	4b61      	ldr	r3, [pc, #388]	@ (80161c8 <__ieee754_pow+0x298>)
 8016042:	4598      	cmp	r8, r3
 8016044:	d908      	bls.n	8016058 <__ieee754_pow+0x128>
 8016046:	f1b9 0f00 	cmp.w	r9, #0
 801604a:	f2c0 8476 	blt.w	801693a <__ieee754_pow+0xa0a>
 801604e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016052:	e78a      	b.n	8015f6a <__ieee754_pow+0x3a>
 8016054:	2402      	movs	r4, #2
 8016056:	e7e8      	b.n	801602a <__ieee754_pow+0xfa>
 8016058:	f1b9 0f00 	cmp.w	r9, #0
 801605c:	f04f 0000 	mov.w	r0, #0
 8016060:	f04f 0100 	mov.w	r1, #0
 8016064:	da81      	bge.n	8015f6a <__ieee754_pow+0x3a>
 8016066:	e9dd 0300 	ldrd	r0, r3, [sp]
 801606a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801606e:	e77c      	b.n	8015f6a <__ieee754_pow+0x3a>
 8016070:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8016074:	d106      	bne.n	8016084 <__ieee754_pow+0x154>
 8016076:	4632      	mov	r2, r6
 8016078:	463b      	mov	r3, r7
 801607a:	4630      	mov	r0, r6
 801607c:	4639      	mov	r1, r7
 801607e:	f7ea fae3 	bl	8000648 <__aeabi_dmul>
 8016082:	e772      	b.n	8015f6a <__ieee754_pow+0x3a>
 8016084:	4a51      	ldr	r2, [pc, #324]	@ (80161cc <__ieee754_pow+0x29c>)
 8016086:	4591      	cmp	r9, r2
 8016088:	d109      	bne.n	801609e <__ieee754_pow+0x16e>
 801608a:	2d00      	cmp	r5, #0
 801608c:	db07      	blt.n	801609e <__ieee754_pow+0x16e>
 801608e:	ec47 6b10 	vmov	d0, r6, r7
 8016092:	b011      	add	sp, #68	@ 0x44
 8016094:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016098:	f7ff bc12 	b.w	80158c0 <__ieee754_sqrt>
 801609c:	2400      	movs	r4, #0
 801609e:	ec47 6b10 	vmov	d0, r6, r7
 80160a2:	9302      	str	r3, [sp, #8]
 80160a4:	f7ff fbf8 	bl	8015898 <fabs>
 80160a8:	9b02      	ldr	r3, [sp, #8]
 80160aa:	ec51 0b10 	vmov	r0, r1, d0
 80160ae:	bb53      	cbnz	r3, 8016106 <__ieee754_pow+0x1d6>
 80160b0:	4b44      	ldr	r3, [pc, #272]	@ (80161c4 <__ieee754_pow+0x294>)
 80160b2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80160b6:	429a      	cmp	r2, r3
 80160b8:	d002      	beq.n	80160c0 <__ieee754_pow+0x190>
 80160ba:	f1b8 0f00 	cmp.w	r8, #0
 80160be:	d122      	bne.n	8016106 <__ieee754_pow+0x1d6>
 80160c0:	f1b9 0f00 	cmp.w	r9, #0
 80160c4:	da05      	bge.n	80160d2 <__ieee754_pow+0x1a2>
 80160c6:	4602      	mov	r2, r0
 80160c8:	460b      	mov	r3, r1
 80160ca:	2000      	movs	r0, #0
 80160cc:	493d      	ldr	r1, [pc, #244]	@ (80161c4 <__ieee754_pow+0x294>)
 80160ce:	f7ea fbe5 	bl	800089c <__aeabi_ddiv>
 80160d2:	2d00      	cmp	r5, #0
 80160d4:	f6bf af49 	bge.w	8015f6a <__ieee754_pow+0x3a>
 80160d8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80160dc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80160e0:	ea58 0804 	orrs.w	r8, r8, r4
 80160e4:	d108      	bne.n	80160f8 <__ieee754_pow+0x1c8>
 80160e6:	4602      	mov	r2, r0
 80160e8:	460b      	mov	r3, r1
 80160ea:	4610      	mov	r0, r2
 80160ec:	4619      	mov	r1, r3
 80160ee:	f7ea f8f3 	bl	80002d8 <__aeabi_dsub>
 80160f2:	4602      	mov	r2, r0
 80160f4:	460b      	mov	r3, r1
 80160f6:	e794      	b.n	8016022 <__ieee754_pow+0xf2>
 80160f8:	2c01      	cmp	r4, #1
 80160fa:	f47f af36 	bne.w	8015f6a <__ieee754_pow+0x3a>
 80160fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016102:	4619      	mov	r1, r3
 8016104:	e731      	b.n	8015f6a <__ieee754_pow+0x3a>
 8016106:	0feb      	lsrs	r3, r5, #31
 8016108:	3b01      	subs	r3, #1
 801610a:	ea53 0204 	orrs.w	r2, r3, r4
 801610e:	d102      	bne.n	8016116 <__ieee754_pow+0x1e6>
 8016110:	4632      	mov	r2, r6
 8016112:	463b      	mov	r3, r7
 8016114:	e7e9      	b.n	80160ea <__ieee754_pow+0x1ba>
 8016116:	3c01      	subs	r4, #1
 8016118:	431c      	orrs	r4, r3
 801611a:	d016      	beq.n	801614a <__ieee754_pow+0x21a>
 801611c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80161a8 <__ieee754_pow+0x278>
 8016120:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8016124:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016128:	f240 8112 	bls.w	8016350 <__ieee754_pow+0x420>
 801612c:	4b28      	ldr	r3, [pc, #160]	@ (80161d0 <__ieee754_pow+0x2a0>)
 801612e:	459a      	cmp	sl, r3
 8016130:	4b25      	ldr	r3, [pc, #148]	@ (80161c8 <__ieee754_pow+0x298>)
 8016132:	d916      	bls.n	8016162 <__ieee754_pow+0x232>
 8016134:	4598      	cmp	r8, r3
 8016136:	d80b      	bhi.n	8016150 <__ieee754_pow+0x220>
 8016138:	f1b9 0f00 	cmp.w	r9, #0
 801613c:	da0b      	bge.n	8016156 <__ieee754_pow+0x226>
 801613e:	2000      	movs	r0, #0
 8016140:	b011      	add	sp, #68	@ 0x44
 8016142:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016146:	f000 bceb 	b.w	8016b20 <__math_oflow>
 801614a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80161b0 <__ieee754_pow+0x280>
 801614e:	e7e7      	b.n	8016120 <__ieee754_pow+0x1f0>
 8016150:	f1b9 0f00 	cmp.w	r9, #0
 8016154:	dcf3      	bgt.n	801613e <__ieee754_pow+0x20e>
 8016156:	2000      	movs	r0, #0
 8016158:	b011      	add	sp, #68	@ 0x44
 801615a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801615e:	f000 bcd7 	b.w	8016b10 <__math_uflow>
 8016162:	4598      	cmp	r8, r3
 8016164:	d20c      	bcs.n	8016180 <__ieee754_pow+0x250>
 8016166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801616a:	2200      	movs	r2, #0
 801616c:	2300      	movs	r3, #0
 801616e:	f7ea fcdd 	bl	8000b2c <__aeabi_dcmplt>
 8016172:	3800      	subs	r0, #0
 8016174:	bf18      	it	ne
 8016176:	2001      	movne	r0, #1
 8016178:	f1b9 0f00 	cmp.w	r9, #0
 801617c:	daec      	bge.n	8016158 <__ieee754_pow+0x228>
 801617e:	e7df      	b.n	8016140 <__ieee754_pow+0x210>
 8016180:	4b10      	ldr	r3, [pc, #64]	@ (80161c4 <__ieee754_pow+0x294>)
 8016182:	4598      	cmp	r8, r3
 8016184:	f04f 0200 	mov.w	r2, #0
 8016188:	d924      	bls.n	80161d4 <__ieee754_pow+0x2a4>
 801618a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801618e:	2300      	movs	r3, #0
 8016190:	f7ea fccc 	bl	8000b2c <__aeabi_dcmplt>
 8016194:	3800      	subs	r0, #0
 8016196:	bf18      	it	ne
 8016198:	2001      	movne	r0, #1
 801619a:	f1b9 0f00 	cmp.w	r9, #0
 801619e:	dccf      	bgt.n	8016140 <__ieee754_pow+0x210>
 80161a0:	e7da      	b.n	8016158 <__ieee754_pow+0x228>
 80161a2:	bf00      	nop
 80161a4:	f3af 8000 	nop.w
 80161a8:	00000000 	.word	0x00000000
 80161ac:	3ff00000 	.word	0x3ff00000
 80161b0:	00000000 	.word	0x00000000
 80161b4:	bff00000 	.word	0xbff00000
 80161b8:	fff00000 	.word	0xfff00000
 80161bc:	7ff00000 	.word	0x7ff00000
 80161c0:	433fffff 	.word	0x433fffff
 80161c4:	3ff00000 	.word	0x3ff00000
 80161c8:	3fefffff 	.word	0x3fefffff
 80161cc:	3fe00000 	.word	0x3fe00000
 80161d0:	43f00000 	.word	0x43f00000
 80161d4:	4b5a      	ldr	r3, [pc, #360]	@ (8016340 <__ieee754_pow+0x410>)
 80161d6:	f7ea f87f 	bl	80002d8 <__aeabi_dsub>
 80161da:	a351      	add	r3, pc, #324	@ (adr r3, 8016320 <__ieee754_pow+0x3f0>)
 80161dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e0:	4604      	mov	r4, r0
 80161e2:	460d      	mov	r5, r1
 80161e4:	f7ea fa30 	bl	8000648 <__aeabi_dmul>
 80161e8:	a34f      	add	r3, pc, #316	@ (adr r3, 8016328 <__ieee754_pow+0x3f8>)
 80161ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ee:	4606      	mov	r6, r0
 80161f0:	460f      	mov	r7, r1
 80161f2:	4620      	mov	r0, r4
 80161f4:	4629      	mov	r1, r5
 80161f6:	f7ea fa27 	bl	8000648 <__aeabi_dmul>
 80161fa:	4b52      	ldr	r3, [pc, #328]	@ (8016344 <__ieee754_pow+0x414>)
 80161fc:	4682      	mov	sl, r0
 80161fe:	468b      	mov	fp, r1
 8016200:	2200      	movs	r2, #0
 8016202:	4620      	mov	r0, r4
 8016204:	4629      	mov	r1, r5
 8016206:	f7ea fa1f 	bl	8000648 <__aeabi_dmul>
 801620a:	4602      	mov	r2, r0
 801620c:	460b      	mov	r3, r1
 801620e:	a148      	add	r1, pc, #288	@ (adr r1, 8016330 <__ieee754_pow+0x400>)
 8016210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016214:	f7ea f860 	bl	80002d8 <__aeabi_dsub>
 8016218:	4622      	mov	r2, r4
 801621a:	462b      	mov	r3, r5
 801621c:	f7ea fa14 	bl	8000648 <__aeabi_dmul>
 8016220:	4602      	mov	r2, r0
 8016222:	460b      	mov	r3, r1
 8016224:	2000      	movs	r0, #0
 8016226:	4948      	ldr	r1, [pc, #288]	@ (8016348 <__ieee754_pow+0x418>)
 8016228:	f7ea f856 	bl	80002d8 <__aeabi_dsub>
 801622c:	4622      	mov	r2, r4
 801622e:	4680      	mov	r8, r0
 8016230:	4689      	mov	r9, r1
 8016232:	462b      	mov	r3, r5
 8016234:	4620      	mov	r0, r4
 8016236:	4629      	mov	r1, r5
 8016238:	f7ea fa06 	bl	8000648 <__aeabi_dmul>
 801623c:	4602      	mov	r2, r0
 801623e:	460b      	mov	r3, r1
 8016240:	4640      	mov	r0, r8
 8016242:	4649      	mov	r1, r9
 8016244:	f7ea fa00 	bl	8000648 <__aeabi_dmul>
 8016248:	a33b      	add	r3, pc, #236	@ (adr r3, 8016338 <__ieee754_pow+0x408>)
 801624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801624e:	f7ea f9fb 	bl	8000648 <__aeabi_dmul>
 8016252:	4602      	mov	r2, r0
 8016254:	460b      	mov	r3, r1
 8016256:	4650      	mov	r0, sl
 8016258:	4659      	mov	r1, fp
 801625a:	f7ea f83d 	bl	80002d8 <__aeabi_dsub>
 801625e:	4602      	mov	r2, r0
 8016260:	460b      	mov	r3, r1
 8016262:	4680      	mov	r8, r0
 8016264:	4689      	mov	r9, r1
 8016266:	4630      	mov	r0, r6
 8016268:	4639      	mov	r1, r7
 801626a:	f7ea f837 	bl	80002dc <__adddf3>
 801626e:	2400      	movs	r4, #0
 8016270:	4632      	mov	r2, r6
 8016272:	463b      	mov	r3, r7
 8016274:	4620      	mov	r0, r4
 8016276:	460d      	mov	r5, r1
 8016278:	f7ea f82e 	bl	80002d8 <__aeabi_dsub>
 801627c:	4602      	mov	r2, r0
 801627e:	460b      	mov	r3, r1
 8016280:	4640      	mov	r0, r8
 8016282:	4649      	mov	r1, r9
 8016284:	f7ea f828 	bl	80002d8 <__aeabi_dsub>
 8016288:	e9dd 2300 	ldrd	r2, r3, [sp]
 801628c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016290:	2300      	movs	r3, #0
 8016292:	9304      	str	r3, [sp, #16]
 8016294:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016298:	4606      	mov	r6, r0
 801629a:	460f      	mov	r7, r1
 801629c:	4652      	mov	r2, sl
 801629e:	465b      	mov	r3, fp
 80162a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80162a4:	f7ea f818 	bl	80002d8 <__aeabi_dsub>
 80162a8:	4622      	mov	r2, r4
 80162aa:	462b      	mov	r3, r5
 80162ac:	f7ea f9cc 	bl	8000648 <__aeabi_dmul>
 80162b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80162b4:	4680      	mov	r8, r0
 80162b6:	4689      	mov	r9, r1
 80162b8:	4630      	mov	r0, r6
 80162ba:	4639      	mov	r1, r7
 80162bc:	f7ea f9c4 	bl	8000648 <__aeabi_dmul>
 80162c0:	4602      	mov	r2, r0
 80162c2:	460b      	mov	r3, r1
 80162c4:	4640      	mov	r0, r8
 80162c6:	4649      	mov	r1, r9
 80162c8:	f7ea f808 	bl	80002dc <__adddf3>
 80162cc:	4652      	mov	r2, sl
 80162ce:	465b      	mov	r3, fp
 80162d0:	4606      	mov	r6, r0
 80162d2:	460f      	mov	r7, r1
 80162d4:	4620      	mov	r0, r4
 80162d6:	4629      	mov	r1, r5
 80162d8:	f7ea f9b6 	bl	8000648 <__aeabi_dmul>
 80162dc:	460b      	mov	r3, r1
 80162de:	4602      	mov	r2, r0
 80162e0:	4680      	mov	r8, r0
 80162e2:	4689      	mov	r9, r1
 80162e4:	4630      	mov	r0, r6
 80162e6:	4639      	mov	r1, r7
 80162e8:	f7e9 fff8 	bl	80002dc <__adddf3>
 80162ec:	4b17      	ldr	r3, [pc, #92]	@ (801634c <__ieee754_pow+0x41c>)
 80162ee:	4299      	cmp	r1, r3
 80162f0:	4604      	mov	r4, r0
 80162f2:	460d      	mov	r5, r1
 80162f4:	468a      	mov	sl, r1
 80162f6:	468b      	mov	fp, r1
 80162f8:	f340 82ef 	ble.w	80168da <__ieee754_pow+0x9aa>
 80162fc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8016300:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8016304:	4303      	orrs	r3, r0
 8016306:	f000 81e8 	beq.w	80166da <__ieee754_pow+0x7aa>
 801630a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801630e:	2200      	movs	r2, #0
 8016310:	2300      	movs	r3, #0
 8016312:	f7ea fc0b 	bl	8000b2c <__aeabi_dcmplt>
 8016316:	3800      	subs	r0, #0
 8016318:	bf18      	it	ne
 801631a:	2001      	movne	r0, #1
 801631c:	e710      	b.n	8016140 <__ieee754_pow+0x210>
 801631e:	bf00      	nop
 8016320:	60000000 	.word	0x60000000
 8016324:	3ff71547 	.word	0x3ff71547
 8016328:	f85ddf44 	.word	0xf85ddf44
 801632c:	3e54ae0b 	.word	0x3e54ae0b
 8016330:	55555555 	.word	0x55555555
 8016334:	3fd55555 	.word	0x3fd55555
 8016338:	652b82fe 	.word	0x652b82fe
 801633c:	3ff71547 	.word	0x3ff71547
 8016340:	3ff00000 	.word	0x3ff00000
 8016344:	3fd00000 	.word	0x3fd00000
 8016348:	3fe00000 	.word	0x3fe00000
 801634c:	408fffff 	.word	0x408fffff
 8016350:	4bd5      	ldr	r3, [pc, #852]	@ (80166a8 <__ieee754_pow+0x778>)
 8016352:	402b      	ands	r3, r5
 8016354:	2200      	movs	r2, #0
 8016356:	b92b      	cbnz	r3, 8016364 <__ieee754_pow+0x434>
 8016358:	4bd4      	ldr	r3, [pc, #848]	@ (80166ac <__ieee754_pow+0x77c>)
 801635a:	f7ea f975 	bl	8000648 <__aeabi_dmul>
 801635e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8016362:	468b      	mov	fp, r1
 8016364:	ea4f 532b 	mov.w	r3, fp, asr #20
 8016368:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801636c:	4413      	add	r3, r2
 801636e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016370:	4bcf      	ldr	r3, [pc, #828]	@ (80166b0 <__ieee754_pow+0x780>)
 8016372:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8016376:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801637a:	459b      	cmp	fp, r3
 801637c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016380:	dd08      	ble.n	8016394 <__ieee754_pow+0x464>
 8016382:	4bcc      	ldr	r3, [pc, #816]	@ (80166b4 <__ieee754_pow+0x784>)
 8016384:	459b      	cmp	fp, r3
 8016386:	f340 81a5 	ble.w	80166d4 <__ieee754_pow+0x7a4>
 801638a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801638c:	3301      	adds	r3, #1
 801638e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016390:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8016394:	f04f 0a00 	mov.w	sl, #0
 8016398:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801639c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801639e:	4bc6      	ldr	r3, [pc, #792]	@ (80166b8 <__ieee754_pow+0x788>)
 80163a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80163a4:	ed93 7b00 	vldr	d7, [r3]
 80163a8:	4629      	mov	r1, r5
 80163aa:	ec53 2b17 	vmov	r2, r3, d7
 80163ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80163b2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80163b6:	f7e9 ff8f 	bl	80002d8 <__aeabi_dsub>
 80163ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80163be:	4606      	mov	r6, r0
 80163c0:	460f      	mov	r7, r1
 80163c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80163c6:	f7e9 ff89 	bl	80002dc <__adddf3>
 80163ca:	4602      	mov	r2, r0
 80163cc:	460b      	mov	r3, r1
 80163ce:	2000      	movs	r0, #0
 80163d0:	49ba      	ldr	r1, [pc, #744]	@ (80166bc <__ieee754_pow+0x78c>)
 80163d2:	f7ea fa63 	bl	800089c <__aeabi_ddiv>
 80163d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80163da:	4602      	mov	r2, r0
 80163dc:	460b      	mov	r3, r1
 80163de:	4630      	mov	r0, r6
 80163e0:	4639      	mov	r1, r7
 80163e2:	f7ea f931 	bl	8000648 <__aeabi_dmul>
 80163e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80163ea:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80163ee:	106d      	asrs	r5, r5, #1
 80163f0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80163f4:	f04f 0b00 	mov.w	fp, #0
 80163f8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80163fc:	4661      	mov	r1, ip
 80163fe:	2200      	movs	r2, #0
 8016400:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016404:	4658      	mov	r0, fp
 8016406:	46e1      	mov	r9, ip
 8016408:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801640c:	4614      	mov	r4, r2
 801640e:	461d      	mov	r5, r3
 8016410:	f7ea f91a 	bl	8000648 <__aeabi_dmul>
 8016414:	4602      	mov	r2, r0
 8016416:	460b      	mov	r3, r1
 8016418:	4630      	mov	r0, r6
 801641a:	4639      	mov	r1, r7
 801641c:	f7e9 ff5c 	bl	80002d8 <__aeabi_dsub>
 8016420:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016424:	4606      	mov	r6, r0
 8016426:	460f      	mov	r7, r1
 8016428:	4620      	mov	r0, r4
 801642a:	4629      	mov	r1, r5
 801642c:	f7e9 ff54 	bl	80002d8 <__aeabi_dsub>
 8016430:	4602      	mov	r2, r0
 8016432:	460b      	mov	r3, r1
 8016434:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016438:	f7e9 ff4e 	bl	80002d8 <__aeabi_dsub>
 801643c:	465a      	mov	r2, fp
 801643e:	464b      	mov	r3, r9
 8016440:	f7ea f902 	bl	8000648 <__aeabi_dmul>
 8016444:	4602      	mov	r2, r0
 8016446:	460b      	mov	r3, r1
 8016448:	4630      	mov	r0, r6
 801644a:	4639      	mov	r1, r7
 801644c:	f7e9 ff44 	bl	80002d8 <__aeabi_dsub>
 8016450:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016454:	f7ea f8f8 	bl	8000648 <__aeabi_dmul>
 8016458:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801645c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016460:	4610      	mov	r0, r2
 8016462:	4619      	mov	r1, r3
 8016464:	f7ea f8f0 	bl	8000648 <__aeabi_dmul>
 8016468:	a37d      	add	r3, pc, #500	@ (adr r3, 8016660 <__ieee754_pow+0x730>)
 801646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801646e:	4604      	mov	r4, r0
 8016470:	460d      	mov	r5, r1
 8016472:	f7ea f8e9 	bl	8000648 <__aeabi_dmul>
 8016476:	a37c      	add	r3, pc, #496	@ (adr r3, 8016668 <__ieee754_pow+0x738>)
 8016478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801647c:	f7e9 ff2e 	bl	80002dc <__adddf3>
 8016480:	4622      	mov	r2, r4
 8016482:	462b      	mov	r3, r5
 8016484:	f7ea f8e0 	bl	8000648 <__aeabi_dmul>
 8016488:	a379      	add	r3, pc, #484	@ (adr r3, 8016670 <__ieee754_pow+0x740>)
 801648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801648e:	f7e9 ff25 	bl	80002dc <__adddf3>
 8016492:	4622      	mov	r2, r4
 8016494:	462b      	mov	r3, r5
 8016496:	f7ea f8d7 	bl	8000648 <__aeabi_dmul>
 801649a:	a377      	add	r3, pc, #476	@ (adr r3, 8016678 <__ieee754_pow+0x748>)
 801649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164a0:	f7e9 ff1c 	bl	80002dc <__adddf3>
 80164a4:	4622      	mov	r2, r4
 80164a6:	462b      	mov	r3, r5
 80164a8:	f7ea f8ce 	bl	8000648 <__aeabi_dmul>
 80164ac:	a374      	add	r3, pc, #464	@ (adr r3, 8016680 <__ieee754_pow+0x750>)
 80164ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164b2:	f7e9 ff13 	bl	80002dc <__adddf3>
 80164b6:	4622      	mov	r2, r4
 80164b8:	462b      	mov	r3, r5
 80164ba:	f7ea f8c5 	bl	8000648 <__aeabi_dmul>
 80164be:	a372      	add	r3, pc, #456	@ (adr r3, 8016688 <__ieee754_pow+0x758>)
 80164c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164c4:	f7e9 ff0a 	bl	80002dc <__adddf3>
 80164c8:	4622      	mov	r2, r4
 80164ca:	4606      	mov	r6, r0
 80164cc:	460f      	mov	r7, r1
 80164ce:	462b      	mov	r3, r5
 80164d0:	4620      	mov	r0, r4
 80164d2:	4629      	mov	r1, r5
 80164d4:	f7ea f8b8 	bl	8000648 <__aeabi_dmul>
 80164d8:	4602      	mov	r2, r0
 80164da:	460b      	mov	r3, r1
 80164dc:	4630      	mov	r0, r6
 80164de:	4639      	mov	r1, r7
 80164e0:	f7ea f8b2 	bl	8000648 <__aeabi_dmul>
 80164e4:	465a      	mov	r2, fp
 80164e6:	4604      	mov	r4, r0
 80164e8:	460d      	mov	r5, r1
 80164ea:	464b      	mov	r3, r9
 80164ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80164f0:	f7e9 fef4 	bl	80002dc <__adddf3>
 80164f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80164f8:	f7ea f8a6 	bl	8000648 <__aeabi_dmul>
 80164fc:	4622      	mov	r2, r4
 80164fe:	462b      	mov	r3, r5
 8016500:	f7e9 feec 	bl	80002dc <__adddf3>
 8016504:	465a      	mov	r2, fp
 8016506:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801650a:	464b      	mov	r3, r9
 801650c:	4658      	mov	r0, fp
 801650e:	4649      	mov	r1, r9
 8016510:	f7ea f89a 	bl	8000648 <__aeabi_dmul>
 8016514:	4b6a      	ldr	r3, [pc, #424]	@ (80166c0 <__ieee754_pow+0x790>)
 8016516:	2200      	movs	r2, #0
 8016518:	4606      	mov	r6, r0
 801651a:	460f      	mov	r7, r1
 801651c:	f7e9 fede 	bl	80002dc <__adddf3>
 8016520:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016524:	f7e9 feda 	bl	80002dc <__adddf3>
 8016528:	46d8      	mov	r8, fp
 801652a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801652e:	460d      	mov	r5, r1
 8016530:	465a      	mov	r2, fp
 8016532:	460b      	mov	r3, r1
 8016534:	4640      	mov	r0, r8
 8016536:	4649      	mov	r1, r9
 8016538:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801653c:	f7ea f884 	bl	8000648 <__aeabi_dmul>
 8016540:	465c      	mov	r4, fp
 8016542:	4680      	mov	r8, r0
 8016544:	4689      	mov	r9, r1
 8016546:	4b5e      	ldr	r3, [pc, #376]	@ (80166c0 <__ieee754_pow+0x790>)
 8016548:	2200      	movs	r2, #0
 801654a:	4620      	mov	r0, r4
 801654c:	4629      	mov	r1, r5
 801654e:	f7e9 fec3 	bl	80002d8 <__aeabi_dsub>
 8016552:	4632      	mov	r2, r6
 8016554:	463b      	mov	r3, r7
 8016556:	f7e9 febf 	bl	80002d8 <__aeabi_dsub>
 801655a:	4602      	mov	r2, r0
 801655c:	460b      	mov	r3, r1
 801655e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016562:	f7e9 feb9 	bl	80002d8 <__aeabi_dsub>
 8016566:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801656a:	f7ea f86d 	bl	8000648 <__aeabi_dmul>
 801656e:	4622      	mov	r2, r4
 8016570:	4606      	mov	r6, r0
 8016572:	460f      	mov	r7, r1
 8016574:	462b      	mov	r3, r5
 8016576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801657a:	f7ea f865 	bl	8000648 <__aeabi_dmul>
 801657e:	4602      	mov	r2, r0
 8016580:	460b      	mov	r3, r1
 8016582:	4630      	mov	r0, r6
 8016584:	4639      	mov	r1, r7
 8016586:	f7e9 fea9 	bl	80002dc <__adddf3>
 801658a:	4606      	mov	r6, r0
 801658c:	460f      	mov	r7, r1
 801658e:	4602      	mov	r2, r0
 8016590:	460b      	mov	r3, r1
 8016592:	4640      	mov	r0, r8
 8016594:	4649      	mov	r1, r9
 8016596:	f7e9 fea1 	bl	80002dc <__adddf3>
 801659a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801659e:	a33c      	add	r3, pc, #240	@ (adr r3, 8016690 <__ieee754_pow+0x760>)
 80165a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165a4:	4658      	mov	r0, fp
 80165a6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80165aa:	460d      	mov	r5, r1
 80165ac:	f7ea f84c 	bl	8000648 <__aeabi_dmul>
 80165b0:	465c      	mov	r4, fp
 80165b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80165b6:	4642      	mov	r2, r8
 80165b8:	464b      	mov	r3, r9
 80165ba:	4620      	mov	r0, r4
 80165bc:	4629      	mov	r1, r5
 80165be:	f7e9 fe8b 	bl	80002d8 <__aeabi_dsub>
 80165c2:	4602      	mov	r2, r0
 80165c4:	460b      	mov	r3, r1
 80165c6:	4630      	mov	r0, r6
 80165c8:	4639      	mov	r1, r7
 80165ca:	f7e9 fe85 	bl	80002d8 <__aeabi_dsub>
 80165ce:	a332      	add	r3, pc, #200	@ (adr r3, 8016698 <__ieee754_pow+0x768>)
 80165d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d4:	f7ea f838 	bl	8000648 <__aeabi_dmul>
 80165d8:	a331      	add	r3, pc, #196	@ (adr r3, 80166a0 <__ieee754_pow+0x770>)
 80165da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165de:	4606      	mov	r6, r0
 80165e0:	460f      	mov	r7, r1
 80165e2:	4620      	mov	r0, r4
 80165e4:	4629      	mov	r1, r5
 80165e6:	f7ea f82f 	bl	8000648 <__aeabi_dmul>
 80165ea:	4602      	mov	r2, r0
 80165ec:	460b      	mov	r3, r1
 80165ee:	4630      	mov	r0, r6
 80165f0:	4639      	mov	r1, r7
 80165f2:	f7e9 fe73 	bl	80002dc <__adddf3>
 80165f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80165f8:	4b32      	ldr	r3, [pc, #200]	@ (80166c4 <__ieee754_pow+0x794>)
 80165fa:	4413      	add	r3, r2
 80165fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016600:	f7e9 fe6c 	bl	80002dc <__adddf3>
 8016604:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016608:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801660a:	f7e9 ffb3 	bl	8000574 <__aeabi_i2d>
 801660e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016610:	4b2d      	ldr	r3, [pc, #180]	@ (80166c8 <__ieee754_pow+0x798>)
 8016612:	4413      	add	r3, r2
 8016614:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016618:	4606      	mov	r6, r0
 801661a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801661e:	460f      	mov	r7, r1
 8016620:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016624:	f7e9 fe5a 	bl	80002dc <__adddf3>
 8016628:	4642      	mov	r2, r8
 801662a:	464b      	mov	r3, r9
 801662c:	f7e9 fe56 	bl	80002dc <__adddf3>
 8016630:	4632      	mov	r2, r6
 8016632:	463b      	mov	r3, r7
 8016634:	f7e9 fe52 	bl	80002dc <__adddf3>
 8016638:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801663c:	4632      	mov	r2, r6
 801663e:	463b      	mov	r3, r7
 8016640:	4658      	mov	r0, fp
 8016642:	460d      	mov	r5, r1
 8016644:	f7e9 fe48 	bl	80002d8 <__aeabi_dsub>
 8016648:	4642      	mov	r2, r8
 801664a:	464b      	mov	r3, r9
 801664c:	f7e9 fe44 	bl	80002d8 <__aeabi_dsub>
 8016650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016654:	f7e9 fe40 	bl	80002d8 <__aeabi_dsub>
 8016658:	465c      	mov	r4, fp
 801665a:	4602      	mov	r2, r0
 801665c:	e036      	b.n	80166cc <__ieee754_pow+0x79c>
 801665e:	bf00      	nop
 8016660:	4a454eef 	.word	0x4a454eef
 8016664:	3fca7e28 	.word	0x3fca7e28
 8016668:	93c9db65 	.word	0x93c9db65
 801666c:	3fcd864a 	.word	0x3fcd864a
 8016670:	a91d4101 	.word	0xa91d4101
 8016674:	3fd17460 	.word	0x3fd17460
 8016678:	518f264d 	.word	0x518f264d
 801667c:	3fd55555 	.word	0x3fd55555
 8016680:	db6fabff 	.word	0xdb6fabff
 8016684:	3fdb6db6 	.word	0x3fdb6db6
 8016688:	33333303 	.word	0x33333303
 801668c:	3fe33333 	.word	0x3fe33333
 8016690:	e0000000 	.word	0xe0000000
 8016694:	3feec709 	.word	0x3feec709
 8016698:	dc3a03fd 	.word	0xdc3a03fd
 801669c:	3feec709 	.word	0x3feec709
 80166a0:	145b01f5 	.word	0x145b01f5
 80166a4:	be3e2fe0 	.word	0xbe3e2fe0
 80166a8:	7ff00000 	.word	0x7ff00000
 80166ac:	43400000 	.word	0x43400000
 80166b0:	0003988e 	.word	0x0003988e
 80166b4:	000bb679 	.word	0x000bb679
 80166b8:	08017368 	.word	0x08017368
 80166bc:	3ff00000 	.word	0x3ff00000
 80166c0:	40080000 	.word	0x40080000
 80166c4:	08017348 	.word	0x08017348
 80166c8:	08017358 	.word	0x08017358
 80166cc:	460b      	mov	r3, r1
 80166ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80166d2:	e5d7      	b.n	8016284 <__ieee754_pow+0x354>
 80166d4:	f04f 0a01 	mov.w	sl, #1
 80166d8:	e65e      	b.n	8016398 <__ieee754_pow+0x468>
 80166da:	a3b4      	add	r3, pc, #720	@ (adr r3, 80169ac <__ieee754_pow+0xa7c>)
 80166dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e0:	4630      	mov	r0, r6
 80166e2:	4639      	mov	r1, r7
 80166e4:	f7e9 fdfa 	bl	80002dc <__adddf3>
 80166e8:	4642      	mov	r2, r8
 80166ea:	e9cd 0100 	strd	r0, r1, [sp]
 80166ee:	464b      	mov	r3, r9
 80166f0:	4620      	mov	r0, r4
 80166f2:	4629      	mov	r1, r5
 80166f4:	f7e9 fdf0 	bl	80002d8 <__aeabi_dsub>
 80166f8:	4602      	mov	r2, r0
 80166fa:	460b      	mov	r3, r1
 80166fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016700:	f7ea fa32 	bl	8000b68 <__aeabi_dcmpgt>
 8016704:	2800      	cmp	r0, #0
 8016706:	f47f ae00 	bne.w	801630a <__ieee754_pow+0x3da>
 801670a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801670e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8016712:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8016716:	fa43 fa0a 	asr.w	sl, r3, sl
 801671a:	44da      	add	sl, fp
 801671c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8016720:	489d      	ldr	r0, [pc, #628]	@ (8016998 <__ieee754_pow+0xa68>)
 8016722:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8016726:	4108      	asrs	r0, r1
 8016728:	ea00 030a 	and.w	r3, r0, sl
 801672c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8016730:	f1c1 0114 	rsb	r1, r1, #20
 8016734:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8016738:	fa4a fa01 	asr.w	sl, sl, r1
 801673c:	f1bb 0f00 	cmp.w	fp, #0
 8016740:	4640      	mov	r0, r8
 8016742:	4649      	mov	r1, r9
 8016744:	f04f 0200 	mov.w	r2, #0
 8016748:	bfb8      	it	lt
 801674a:	f1ca 0a00 	rsblt	sl, sl, #0
 801674e:	f7e9 fdc3 	bl	80002d8 <__aeabi_dsub>
 8016752:	4680      	mov	r8, r0
 8016754:	4689      	mov	r9, r1
 8016756:	4632      	mov	r2, r6
 8016758:	463b      	mov	r3, r7
 801675a:	4640      	mov	r0, r8
 801675c:	4649      	mov	r1, r9
 801675e:	f7e9 fdbd 	bl	80002dc <__adddf3>
 8016762:	2400      	movs	r4, #0
 8016764:	a37c      	add	r3, pc, #496	@ (adr r3, 8016958 <__ieee754_pow+0xa28>)
 8016766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801676a:	4620      	mov	r0, r4
 801676c:	460d      	mov	r5, r1
 801676e:	f7e9 ff6b 	bl	8000648 <__aeabi_dmul>
 8016772:	4642      	mov	r2, r8
 8016774:	e9cd 0100 	strd	r0, r1, [sp]
 8016778:	464b      	mov	r3, r9
 801677a:	4620      	mov	r0, r4
 801677c:	4629      	mov	r1, r5
 801677e:	f7e9 fdab 	bl	80002d8 <__aeabi_dsub>
 8016782:	4602      	mov	r2, r0
 8016784:	460b      	mov	r3, r1
 8016786:	4630      	mov	r0, r6
 8016788:	4639      	mov	r1, r7
 801678a:	f7e9 fda5 	bl	80002d8 <__aeabi_dsub>
 801678e:	a374      	add	r3, pc, #464	@ (adr r3, 8016960 <__ieee754_pow+0xa30>)
 8016790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016794:	f7e9 ff58 	bl	8000648 <__aeabi_dmul>
 8016798:	a373      	add	r3, pc, #460	@ (adr r3, 8016968 <__ieee754_pow+0xa38>)
 801679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801679e:	4680      	mov	r8, r0
 80167a0:	4689      	mov	r9, r1
 80167a2:	4620      	mov	r0, r4
 80167a4:	4629      	mov	r1, r5
 80167a6:	f7e9 ff4f 	bl	8000648 <__aeabi_dmul>
 80167aa:	4602      	mov	r2, r0
 80167ac:	460b      	mov	r3, r1
 80167ae:	4640      	mov	r0, r8
 80167b0:	4649      	mov	r1, r9
 80167b2:	f7e9 fd93 	bl	80002dc <__adddf3>
 80167b6:	4604      	mov	r4, r0
 80167b8:	460d      	mov	r5, r1
 80167ba:	4602      	mov	r2, r0
 80167bc:	460b      	mov	r3, r1
 80167be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167c2:	f7e9 fd8b 	bl	80002dc <__adddf3>
 80167c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80167ca:	4680      	mov	r8, r0
 80167cc:	4689      	mov	r9, r1
 80167ce:	f7e9 fd83 	bl	80002d8 <__aeabi_dsub>
 80167d2:	4602      	mov	r2, r0
 80167d4:	460b      	mov	r3, r1
 80167d6:	4620      	mov	r0, r4
 80167d8:	4629      	mov	r1, r5
 80167da:	f7e9 fd7d 	bl	80002d8 <__aeabi_dsub>
 80167de:	4642      	mov	r2, r8
 80167e0:	4606      	mov	r6, r0
 80167e2:	460f      	mov	r7, r1
 80167e4:	464b      	mov	r3, r9
 80167e6:	4640      	mov	r0, r8
 80167e8:	4649      	mov	r1, r9
 80167ea:	f7e9 ff2d 	bl	8000648 <__aeabi_dmul>
 80167ee:	a360      	add	r3, pc, #384	@ (adr r3, 8016970 <__ieee754_pow+0xa40>)
 80167f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167f4:	4604      	mov	r4, r0
 80167f6:	460d      	mov	r5, r1
 80167f8:	f7e9 ff26 	bl	8000648 <__aeabi_dmul>
 80167fc:	a35e      	add	r3, pc, #376	@ (adr r3, 8016978 <__ieee754_pow+0xa48>)
 80167fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016802:	f7e9 fd69 	bl	80002d8 <__aeabi_dsub>
 8016806:	4622      	mov	r2, r4
 8016808:	462b      	mov	r3, r5
 801680a:	f7e9 ff1d 	bl	8000648 <__aeabi_dmul>
 801680e:	a35c      	add	r3, pc, #368	@ (adr r3, 8016980 <__ieee754_pow+0xa50>)
 8016810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016814:	f7e9 fd62 	bl	80002dc <__adddf3>
 8016818:	4622      	mov	r2, r4
 801681a:	462b      	mov	r3, r5
 801681c:	f7e9 ff14 	bl	8000648 <__aeabi_dmul>
 8016820:	a359      	add	r3, pc, #356	@ (adr r3, 8016988 <__ieee754_pow+0xa58>)
 8016822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016826:	f7e9 fd57 	bl	80002d8 <__aeabi_dsub>
 801682a:	4622      	mov	r2, r4
 801682c:	462b      	mov	r3, r5
 801682e:	f7e9 ff0b 	bl	8000648 <__aeabi_dmul>
 8016832:	a357      	add	r3, pc, #348	@ (adr r3, 8016990 <__ieee754_pow+0xa60>)
 8016834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016838:	f7e9 fd50 	bl	80002dc <__adddf3>
 801683c:	4622      	mov	r2, r4
 801683e:	462b      	mov	r3, r5
 8016840:	f7e9 ff02 	bl	8000648 <__aeabi_dmul>
 8016844:	4602      	mov	r2, r0
 8016846:	460b      	mov	r3, r1
 8016848:	4640      	mov	r0, r8
 801684a:	4649      	mov	r1, r9
 801684c:	f7e9 fd44 	bl	80002d8 <__aeabi_dsub>
 8016850:	4604      	mov	r4, r0
 8016852:	460d      	mov	r5, r1
 8016854:	4602      	mov	r2, r0
 8016856:	460b      	mov	r3, r1
 8016858:	4640      	mov	r0, r8
 801685a:	4649      	mov	r1, r9
 801685c:	f7e9 fef4 	bl	8000648 <__aeabi_dmul>
 8016860:	2200      	movs	r2, #0
 8016862:	e9cd 0100 	strd	r0, r1, [sp]
 8016866:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801686a:	4620      	mov	r0, r4
 801686c:	4629      	mov	r1, r5
 801686e:	f7e9 fd33 	bl	80002d8 <__aeabi_dsub>
 8016872:	4602      	mov	r2, r0
 8016874:	460b      	mov	r3, r1
 8016876:	e9dd 0100 	ldrd	r0, r1, [sp]
 801687a:	f7ea f80f 	bl	800089c <__aeabi_ddiv>
 801687e:	4632      	mov	r2, r6
 8016880:	4604      	mov	r4, r0
 8016882:	460d      	mov	r5, r1
 8016884:	463b      	mov	r3, r7
 8016886:	4640      	mov	r0, r8
 8016888:	4649      	mov	r1, r9
 801688a:	f7e9 fedd 	bl	8000648 <__aeabi_dmul>
 801688e:	4632      	mov	r2, r6
 8016890:	463b      	mov	r3, r7
 8016892:	f7e9 fd23 	bl	80002dc <__adddf3>
 8016896:	4602      	mov	r2, r0
 8016898:	460b      	mov	r3, r1
 801689a:	4620      	mov	r0, r4
 801689c:	4629      	mov	r1, r5
 801689e:	f7e9 fd1b 	bl	80002d8 <__aeabi_dsub>
 80168a2:	4642      	mov	r2, r8
 80168a4:	464b      	mov	r3, r9
 80168a6:	f7e9 fd17 	bl	80002d8 <__aeabi_dsub>
 80168aa:	460b      	mov	r3, r1
 80168ac:	4602      	mov	r2, r0
 80168ae:	493b      	ldr	r1, [pc, #236]	@ (801699c <__ieee754_pow+0xa6c>)
 80168b0:	2000      	movs	r0, #0
 80168b2:	f7e9 fd11 	bl	80002d8 <__aeabi_dsub>
 80168b6:	ec41 0b10 	vmov	d0, r0, r1
 80168ba:	ee10 3a90 	vmov	r3, s1
 80168be:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80168c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80168c6:	da30      	bge.n	801692a <__ieee754_pow+0x9fa>
 80168c8:	4650      	mov	r0, sl
 80168ca:	f000 f875 	bl	80169b8 <scalbn>
 80168ce:	ec51 0b10 	vmov	r0, r1, d0
 80168d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80168d6:	f7ff bbd2 	b.w	801607e <__ieee754_pow+0x14e>
 80168da:	4c31      	ldr	r4, [pc, #196]	@ (80169a0 <__ieee754_pow+0xa70>)
 80168dc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80168e0:	42a3      	cmp	r3, r4
 80168e2:	d91a      	bls.n	801691a <__ieee754_pow+0x9ea>
 80168e4:	4b2f      	ldr	r3, [pc, #188]	@ (80169a4 <__ieee754_pow+0xa74>)
 80168e6:	440b      	add	r3, r1
 80168e8:	4303      	orrs	r3, r0
 80168ea:	d009      	beq.n	8016900 <__ieee754_pow+0x9d0>
 80168ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80168f0:	2200      	movs	r2, #0
 80168f2:	2300      	movs	r3, #0
 80168f4:	f7ea f91a 	bl	8000b2c <__aeabi_dcmplt>
 80168f8:	3800      	subs	r0, #0
 80168fa:	bf18      	it	ne
 80168fc:	2001      	movne	r0, #1
 80168fe:	e42b      	b.n	8016158 <__ieee754_pow+0x228>
 8016900:	4642      	mov	r2, r8
 8016902:	464b      	mov	r3, r9
 8016904:	f7e9 fce8 	bl	80002d8 <__aeabi_dsub>
 8016908:	4632      	mov	r2, r6
 801690a:	463b      	mov	r3, r7
 801690c:	f7ea f922 	bl	8000b54 <__aeabi_dcmpge>
 8016910:	2800      	cmp	r0, #0
 8016912:	d1eb      	bne.n	80168ec <__ieee754_pow+0x9bc>
 8016914:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80169b4 <__ieee754_pow+0xa84>
 8016918:	e6f7      	b.n	801670a <__ieee754_pow+0x7da>
 801691a:	469a      	mov	sl, r3
 801691c:	4b22      	ldr	r3, [pc, #136]	@ (80169a8 <__ieee754_pow+0xa78>)
 801691e:	459a      	cmp	sl, r3
 8016920:	f63f aef3 	bhi.w	801670a <__ieee754_pow+0x7da>
 8016924:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016928:	e715      	b.n	8016756 <__ieee754_pow+0x826>
 801692a:	ec51 0b10 	vmov	r0, r1, d0
 801692e:	4619      	mov	r1, r3
 8016930:	e7cf      	b.n	80168d2 <__ieee754_pow+0x9a2>
 8016932:	491a      	ldr	r1, [pc, #104]	@ (801699c <__ieee754_pow+0xa6c>)
 8016934:	2000      	movs	r0, #0
 8016936:	f7ff bb18 	b.w	8015f6a <__ieee754_pow+0x3a>
 801693a:	2000      	movs	r0, #0
 801693c:	2100      	movs	r1, #0
 801693e:	f7ff bb14 	b.w	8015f6a <__ieee754_pow+0x3a>
 8016942:	4630      	mov	r0, r6
 8016944:	4639      	mov	r1, r7
 8016946:	f7ff bb10 	b.w	8015f6a <__ieee754_pow+0x3a>
 801694a:	460c      	mov	r4, r1
 801694c:	f7ff bb5e 	b.w	801600c <__ieee754_pow+0xdc>
 8016950:	2400      	movs	r4, #0
 8016952:	f7ff bb49 	b.w	8015fe8 <__ieee754_pow+0xb8>
 8016956:	bf00      	nop
 8016958:	00000000 	.word	0x00000000
 801695c:	3fe62e43 	.word	0x3fe62e43
 8016960:	fefa39ef 	.word	0xfefa39ef
 8016964:	3fe62e42 	.word	0x3fe62e42
 8016968:	0ca86c39 	.word	0x0ca86c39
 801696c:	be205c61 	.word	0xbe205c61
 8016970:	72bea4d0 	.word	0x72bea4d0
 8016974:	3e663769 	.word	0x3e663769
 8016978:	c5d26bf1 	.word	0xc5d26bf1
 801697c:	3ebbbd41 	.word	0x3ebbbd41
 8016980:	af25de2c 	.word	0xaf25de2c
 8016984:	3f11566a 	.word	0x3f11566a
 8016988:	16bebd93 	.word	0x16bebd93
 801698c:	3f66c16c 	.word	0x3f66c16c
 8016990:	5555553e 	.word	0x5555553e
 8016994:	3fc55555 	.word	0x3fc55555
 8016998:	fff00000 	.word	0xfff00000
 801699c:	3ff00000 	.word	0x3ff00000
 80169a0:	4090cbff 	.word	0x4090cbff
 80169a4:	3f6f3400 	.word	0x3f6f3400
 80169a8:	3fe00000 	.word	0x3fe00000
 80169ac:	652b82fe 	.word	0x652b82fe
 80169b0:	3c971547 	.word	0x3c971547
 80169b4:	4090cc00 	.word	0x4090cc00

080169b8 <scalbn>:
 80169b8:	b570      	push	{r4, r5, r6, lr}
 80169ba:	ec55 4b10 	vmov	r4, r5, d0
 80169be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80169c2:	4606      	mov	r6, r0
 80169c4:	462b      	mov	r3, r5
 80169c6:	b991      	cbnz	r1, 80169ee <scalbn+0x36>
 80169c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80169cc:	4323      	orrs	r3, r4
 80169ce:	d03d      	beq.n	8016a4c <scalbn+0x94>
 80169d0:	4b35      	ldr	r3, [pc, #212]	@ (8016aa8 <scalbn+0xf0>)
 80169d2:	4620      	mov	r0, r4
 80169d4:	4629      	mov	r1, r5
 80169d6:	2200      	movs	r2, #0
 80169d8:	f7e9 fe36 	bl	8000648 <__aeabi_dmul>
 80169dc:	4b33      	ldr	r3, [pc, #204]	@ (8016aac <scalbn+0xf4>)
 80169de:	429e      	cmp	r6, r3
 80169e0:	4604      	mov	r4, r0
 80169e2:	460d      	mov	r5, r1
 80169e4:	da0f      	bge.n	8016a06 <scalbn+0x4e>
 80169e6:	a328      	add	r3, pc, #160	@ (adr r3, 8016a88 <scalbn+0xd0>)
 80169e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169ec:	e01e      	b.n	8016a2c <scalbn+0x74>
 80169ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80169f2:	4291      	cmp	r1, r2
 80169f4:	d10b      	bne.n	8016a0e <scalbn+0x56>
 80169f6:	4622      	mov	r2, r4
 80169f8:	4620      	mov	r0, r4
 80169fa:	4629      	mov	r1, r5
 80169fc:	f7e9 fc6e 	bl	80002dc <__adddf3>
 8016a00:	4604      	mov	r4, r0
 8016a02:	460d      	mov	r5, r1
 8016a04:	e022      	b.n	8016a4c <scalbn+0x94>
 8016a06:	460b      	mov	r3, r1
 8016a08:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016a0c:	3936      	subs	r1, #54	@ 0x36
 8016a0e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016a12:	4296      	cmp	r6, r2
 8016a14:	dd0d      	ble.n	8016a32 <scalbn+0x7a>
 8016a16:	2d00      	cmp	r5, #0
 8016a18:	a11d      	add	r1, pc, #116	@ (adr r1, 8016a90 <scalbn+0xd8>)
 8016a1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a1e:	da02      	bge.n	8016a26 <scalbn+0x6e>
 8016a20:	a11d      	add	r1, pc, #116	@ (adr r1, 8016a98 <scalbn+0xe0>)
 8016a22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a26:	a31a      	add	r3, pc, #104	@ (adr r3, 8016a90 <scalbn+0xd8>)
 8016a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a2c:	f7e9 fe0c 	bl	8000648 <__aeabi_dmul>
 8016a30:	e7e6      	b.n	8016a00 <scalbn+0x48>
 8016a32:	1872      	adds	r2, r6, r1
 8016a34:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8016a38:	428a      	cmp	r2, r1
 8016a3a:	dcec      	bgt.n	8016a16 <scalbn+0x5e>
 8016a3c:	2a00      	cmp	r2, #0
 8016a3e:	dd08      	ble.n	8016a52 <scalbn+0x9a>
 8016a40:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016a44:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8016a48:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016a4c:	ec45 4b10 	vmov	d0, r4, r5
 8016a50:	bd70      	pop	{r4, r5, r6, pc}
 8016a52:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8016a56:	da08      	bge.n	8016a6a <scalbn+0xb2>
 8016a58:	2d00      	cmp	r5, #0
 8016a5a:	a10b      	add	r1, pc, #44	@ (adr r1, 8016a88 <scalbn+0xd0>)
 8016a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a60:	dac1      	bge.n	80169e6 <scalbn+0x2e>
 8016a62:	a10f      	add	r1, pc, #60	@ (adr r1, 8016aa0 <scalbn+0xe8>)
 8016a64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a68:	e7bd      	b.n	80169e6 <scalbn+0x2e>
 8016a6a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016a6e:	3236      	adds	r2, #54	@ 0x36
 8016a70:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8016a74:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016a78:	4620      	mov	r0, r4
 8016a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8016ab0 <scalbn+0xf8>)
 8016a7c:	4629      	mov	r1, r5
 8016a7e:	2200      	movs	r2, #0
 8016a80:	e7d4      	b.n	8016a2c <scalbn+0x74>
 8016a82:	bf00      	nop
 8016a84:	f3af 8000 	nop.w
 8016a88:	c2f8f359 	.word	0xc2f8f359
 8016a8c:	01a56e1f 	.word	0x01a56e1f
 8016a90:	8800759c 	.word	0x8800759c
 8016a94:	7e37e43c 	.word	0x7e37e43c
 8016a98:	8800759c 	.word	0x8800759c
 8016a9c:	fe37e43c 	.word	0xfe37e43c
 8016aa0:	c2f8f359 	.word	0xc2f8f359
 8016aa4:	81a56e1f 	.word	0x81a56e1f
 8016aa8:	43500000 	.word	0x43500000
 8016aac:	ffff3cb0 	.word	0xffff3cb0
 8016ab0:	3c900000 	.word	0x3c900000

08016ab4 <with_errno>:
 8016ab4:	b510      	push	{r4, lr}
 8016ab6:	ed2d 8b02 	vpush	{d8}
 8016aba:	eeb0 8a40 	vmov.f32	s16, s0
 8016abe:	eef0 8a60 	vmov.f32	s17, s1
 8016ac2:	4604      	mov	r4, r0
 8016ac4:	f7fa fea4 	bl	8011810 <__errno>
 8016ac8:	eeb0 0a48 	vmov.f32	s0, s16
 8016acc:	eef0 0a68 	vmov.f32	s1, s17
 8016ad0:	ecbd 8b02 	vpop	{d8}
 8016ad4:	6004      	str	r4, [r0, #0]
 8016ad6:	bd10      	pop	{r4, pc}

08016ad8 <xflow>:
 8016ad8:	4603      	mov	r3, r0
 8016ada:	b507      	push	{r0, r1, r2, lr}
 8016adc:	ec51 0b10 	vmov	r0, r1, d0
 8016ae0:	b183      	cbz	r3, 8016b04 <xflow+0x2c>
 8016ae2:	4602      	mov	r2, r0
 8016ae4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016ae8:	e9cd 2300 	strd	r2, r3, [sp]
 8016aec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016af0:	f7e9 fdaa 	bl	8000648 <__aeabi_dmul>
 8016af4:	ec41 0b10 	vmov	d0, r0, r1
 8016af8:	2022      	movs	r0, #34	@ 0x22
 8016afa:	b003      	add	sp, #12
 8016afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b00:	f7ff bfd8 	b.w	8016ab4 <with_errno>
 8016b04:	4602      	mov	r2, r0
 8016b06:	460b      	mov	r3, r1
 8016b08:	e7ee      	b.n	8016ae8 <xflow+0x10>
 8016b0a:	0000      	movs	r0, r0
 8016b0c:	0000      	movs	r0, r0
	...

08016b10 <__math_uflow>:
 8016b10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016b18 <__math_uflow+0x8>
 8016b14:	f7ff bfe0 	b.w	8016ad8 <xflow>
 8016b18:	00000000 	.word	0x00000000
 8016b1c:	10000000 	.word	0x10000000

08016b20 <__math_oflow>:
 8016b20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016b28 <__math_oflow+0x8>
 8016b24:	f7ff bfd8 	b.w	8016ad8 <xflow>
 8016b28:	00000000 	.word	0x00000000
 8016b2c:	70000000 	.word	0x70000000

08016b30 <_init>:
 8016b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b32:	bf00      	nop
 8016b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b36:	bc08      	pop	{r3}
 8016b38:	469e      	mov	lr, r3
 8016b3a:	4770      	bx	lr

08016b3c <_fini>:
 8016b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b3e:	bf00      	nop
 8016b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b42:	bc08      	pop	{r3}
 8016b44:	469e      	mov	lr, r3
 8016b46:	4770      	bx	lr
