
Magisterka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f58  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08017138  08017138  00018138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017968  08017968  00019398  2**0
                  CONTENTS
  4 .ARM          00000008  08017968  08017968  00018968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017970  08017970  00019398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017970  08017970  00018970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017974  08017974  00018974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000398  20000000  08017978  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000233c  20000398  08017d10  00019398  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026d4  08017d10  000196d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019398  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025880  00000000  00000000  000193c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ec9  00000000  00000000  0003ec48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f28  00000000  00000000  00043b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001802  00000000  00000000  00045a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d55b  00000000  00000000  00047242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026762  00000000  00000000  0007479d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f177  00000000  00000000  0009aeff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ba076  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fe0  00000000  00000000  001ba0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001c409c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000398 	.word	0x20000398
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017120 	.word	0x08017120

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000039c 	.word	0x2000039c
 800021c:	08017120 	.word	0x08017120

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	0000      	movs	r0, r0
	...

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f003 fb1a 	bl	8004676 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 fd05 	bl	8001a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f001 fb37 	bl	80026b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800104a:	f001 faeb 	bl	8002624 <MX_DMA_Init>
  MX_ADC3_Init();
 800104e:	f000 fdc5 	bl	8001bdc <MX_ADC3_Init>
  MX_ADC4_Init();
 8001052:	f000 fe8f 	bl	8001d74 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001056:	f000 fef3 	bl	8001e40 <MX_ADC5_Init>
  MX_DAC1_Init();
 800105a:	f000 ff77 	bl	8001f4c <MX_DAC1_Init>
  MX_DAC2_Init();
 800105e:	f000 ffc1 	bl	8001fe4 <MX_DAC2_Init>
  MX_TIM1_Init();
 8001062:	f000 fff9 	bl	8002058 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001066:	f001 f97f 	bl	8002368 <MX_TIM8_Init>
  MX_UART4_Init();
 800106a:	f001 fa8f 	bl	800258c <MX_UART4_Init>
  MX_ADC1_Init();
 800106e:	f000 fd3d 	bl	8001aec <MX_ADC1_Init>
  MX_TIM4_Init();
 8001072:	f001 f88b 	bl	800218c <MX_TIM4_Init>
  MX_USB_Device_Init();
 8001076:	f00f f981 	bl	801037c <MX_USB_Device_Init>
  MX_TIM15_Init();
 800107a:	f001 fa0f 	bl	800249c <MX_TIM15_Init>
  MX_TIM16_Init();
 800107e:	f001 fa5f 	bl	8002540 <MX_TIM16_Init>
  MX_TIM7_Init();
 8001082:	f001 f93b 	bl	80022fc <MX_TIM7_Init>
  MX_TIM6_Init();
 8001086:	f001 f8f9 	bl	800227c <MX_TIM6_Init>
  MX_CORDIC_Init();
 800108a:	f000 ff4b 	bl	8001f24 <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */

  sCordicConfig.Function   = CORDIC_FUNCTION_SQUAREROOT;       /* Compute sine (and cosine) */
 800108e:	4ba2      	ldr	r3, [pc, #648]	@ (8001318 <main+0x2e0>)
 8001090:	2209      	movs	r2, #9
 8001092:	601a      	str	r2, [r3, #0]
  sCordicConfig.Precision  = CORDIC_PRECISION_2CYCLES;    /* Maximum precision (24 iterations) */
 8001094:	4ba0      	ldr	r3, [pc, #640]	@ (8001318 <main+0x2e0>)
 8001096:	2220      	movs	r2, #32
 8001098:	619a      	str	r2, [r3, #24]
  sCordicConfig.Scale      = CORDIC_SCALE_0;              /* No additional scaling */
 800109a:	4b9f      	ldr	r3, [pc, #636]	@ (8001318 <main+0x2e0>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  sCordicConfig.NbWrite    = CORDIC_NBWRITE_1;            /* One input (angle); implicit modulus = 1 */
 80010a0:	4b9d      	ldr	r3, [pc, #628]	@ (8001318 <main+0x2e0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  sCordicConfig.NbRead     = CORDIC_NBREAD_1;             /* Two outputs (sine and cosine) */
 80010a6:	4b9c      	ldr	r3, [pc, #624]	@ (8001318 <main+0x2e0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  sCordicConfig.InSize     = CORDIC_INSIZE_32BITS;        /* 32-bit input (Q1.31 format) */
 80010ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001318 <main+0x2e0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  sCordicConfig.OutSize    = CORDIC_OUTSIZE_32BITS;       /* 32-bit output (Q1.31 format) */
 80010b2:	4b99      	ldr	r3, [pc, #612]	@ (8001318 <main+0x2e0>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  Gv = 2;
 80010b8:	4b98      	ldr	r3, [pc, #608]	@ (800131c <main+0x2e4>)
 80010ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010be:	601a      	str	r2, [r3, #0]
  obl = (((2-Gv)/Gv)/Z);
 80010c0:	4b96      	ldr	r3, [pc, #600]	@ (800131c <main+0x2e4>)
 80010c2:	edd3 7a00 	vldr	s15, [r3]
 80010c6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80010ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010ce:	4b93      	ldr	r3, [pc, #588]	@ (800131c <main+0x2e4>)
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010d8:	ee16 0a90 	vmov	r0, s13
 80010dc:	f7ff fa5c 	bl	8000598 <__aeabi_f2d>
 80010e0:	a38b      	add	r3, pc, #556	@ (adr r3, 8001310 <main+0x2d8>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff fbd9 	bl	800089c <__aeabi_ddiv>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff fda1 	bl	8000c38 <__aeabi_d2f>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a89      	ldr	r2, [pc, #548]	@ (8001320 <main+0x2e8>)
 80010fa:	6013      	str	r3, [r2, #0]
  // GV from  0.8 to 1.99
  //
  if (HAL_CORDIC_Configure(&hcordic, &sCordicConfig) != HAL_OK)
 80010fc:	4986      	ldr	r1, [pc, #536]	@ (8001318 <main+0x2e0>)
 80010fe:	4889      	ldr	r0, [pc, #548]	@ (8001324 <main+0x2ec>)
 8001100:	f004 ffec 	bl	80060dc <HAL_CORDIC_Configure>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <main+0xd6>
    {
      /* Configuration Error */
      Error_Handler();
 800110a:	f002 fcaf 	bl	8003a6c <Error_Handler>
    }
  	  start_ticks = SysTick->VAL;
 800110e:	4b86      	ldr	r3, [pc, #536]	@ (8001328 <main+0x2f0>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	461a      	mov	r2, r3
 8001114:	4b85      	ldr	r3, [pc, #532]	@ (800132c <main+0x2f4>)
 8001116:	601a      	str	r2, [r3, #0]

  	  beforea = float_to_integer(obl, 100, 32);
 8001118:	4b81      	ldr	r3, [pc, #516]	@ (8001320 <main+0x2e8>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	2120      	movs	r1, #32
 8001120:	2064      	movs	r0, #100	@ 0x64
 8001122:	eeb0 0a67 	vmov.f32	s0, s15
 8001126:	f002 faa7 	bl	8003678 <float_to_integer>
 800112a:	4603      	mov	r3, r0
 800112c:	4a80      	ldr	r2, [pc, #512]	@ (8001330 <main+0x2f8>)
 800112e:	6013      	str	r3, [r2, #0]
  	  HAL_CORDIC_Calculate(&hcordic, &beforea, &result_q31, 1, 100);//sqrt((2-Gv)/Gv)/Z)
 8001130:	2364      	movs	r3, #100	@ 0x64
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	4a7f      	ldr	r2, [pc, #508]	@ (8001334 <main+0x2fc>)
 8001138:	497d      	ldr	r1, [pc, #500]	@ (8001330 <main+0x2f8>)
 800113a:	487a      	ldr	r0, [pc, #488]	@ (8001324 <main+0x2ec>)
 800113c:	f005 f80a 	bl	8006154 <HAL_CORDIC_Calculate>
  	 // resultcordic = sqrt(obl);
  	  resultcordic = integer_to_float(result_q31, 10, 1, 32);
 8001140:	4b7c      	ldr	r3, [pc, #496]	@ (8001334 <main+0x2fc>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	2320      	movs	r3, #32
 8001146:	2201      	movs	r2, #1
 8001148:	210a      	movs	r1, #10
 800114a:	f002 fb1b 	bl	8003784 <integer_to_float>
 800114e:	eef0 7a40 	vmov.f32	s15, s0
 8001152:	4b79      	ldr	r3, [pc, #484]	@ (8001338 <main+0x300>)
 8001154:	edc3 7a00 	vstr	s15, [r3]

  	  stop_ticks = SysTick->VAL;
 8001158:	4b73      	ldr	r3, [pc, #460]	@ (8001328 <main+0x2f0>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	461a      	mov	r2, r3
 800115e:	4b77      	ldr	r3, [pc, #476]	@ (800133c <main+0x304>)
 8001160:	601a      	str	r2, [r3, #0]

  	  elapsed_ticks = start_ticks-stop_ticks;
 8001162:	4b72      	ldr	r3, [pc, #456]	@ (800132c <main+0x2f4>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b75      	ldr	r3, [pc, #468]	@ (800133c <main+0x304>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	4a74      	ldr	r2, [pc, #464]	@ (8001340 <main+0x308>)
 800116e:	6013      	str	r3, [r2, #0]

  while (1)
  {


	  	  	  	  checkfaults = Check_Faults();
 8001170:	f001 fd30 	bl	8002bd4 <Check_Faults>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b72      	ldr	r3, [pc, #456]	@ (8001344 <main+0x30c>)
 800117a:	701a      	strb	r2, [r3, #0]

	  	  	  	  if (dataReceivedFlag) {
 800117c:	4b72      	ldr	r3, [pc, #456]	@ (8001348 <main+0x310>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d004      	beq.n	8001190 <main+0x158>
	  	  	  	      // Process the data
	  	  	  	      ParseUSBCommand();  // Function to handle the received command
 8001186:	f002 f8bd 	bl	8003304 <ParseUSBCommand>

	  	  	  	      // Clear the flag after processing
	  	  	  	      dataReceivedFlag = 0;
 800118a:	4b6f      	ldr	r3, [pc, #444]	@ (8001348 <main+0x310>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
	  	  	  	  }

	  	  	  	  interlock = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 8001190:	2104      	movs	r1, #4
 8001192:	486e      	ldr	r0, [pc, #440]	@ (800134c <main+0x314>)
 8001194:	f006 f88c 	bl	80072b0 <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b6c      	ldr	r3, [pc, #432]	@ (8001350 <main+0x318>)
 800119e:	701a      	strb	r2, [r3, #0]

	  	          if (interlock &&  start_program && !(checkfaults)) {
 80011a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001350 <main+0x318>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00e      	beq.n	80011c6 <main+0x18e>
 80011a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001354 <main+0x31c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00a      	beq.n	80011c6 <main+0x18e>
 80011b0:	4b64      	ldr	r3, [pc, #400]	@ (8001344 <main+0x30c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d106      	bne.n	80011c6 <main+0x18e>
	  	        	//USB_SendString("State: EVENT start_program \r\n");
	  	              event = EVENT_START;
 80011b8:	4b67      	ldr	r3, [pc, #412]	@ (8001358 <main+0x320>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
	  	              start_program = 0;
 80011be:	4b65      	ldr	r3, [pc, #404]	@ (8001354 <main+0x31c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	e019      	b.n	80011fa <main+0x1c2>
	  	          }else if (interlock &&  stop_program && !(checkfaults)) {
 80011c6:	4b62      	ldr	r3, [pc, #392]	@ (8001350 <main+0x318>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00e      	beq.n	80011ec <main+0x1b4>
 80011ce:	4b63      	ldr	r3, [pc, #396]	@ (800135c <main+0x324>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00a      	beq.n	80011ec <main+0x1b4>
 80011d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001344 <main+0x30c>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d106      	bne.n	80011ec <main+0x1b4>
		  	        	//USB_SendString("State: EVENT start_program \r\n");
		  	              event = EVENT_SHUTDOWN;
 80011de:	4b5e      	ldr	r3, [pc, #376]	@ (8001358 <main+0x320>)
 80011e0:	2203      	movs	r2, #3
 80011e2:	701a      	strb	r2, [r3, #0]
		  	              stop_program = 0;
 80011e4:	4b5d      	ldr	r3, [pc, #372]	@ (800135c <main+0x324>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	e006      	b.n	80011fa <main+0x1c2>
		  	          }
	  	          else if (clear_fault) {
 80011ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001360 <main+0x328>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <main+0x1c2>
	  	        	  /* clear fault condition */
	  	              event = EVENT_CLEAR_FAULT;
 80011f4:	4b58      	ldr	r3, [pc, #352]	@ (8001358 <main+0x320>)
 80011f6:	2202      	movs	r2, #2
 80011f8:	701a      	strb	r2, [r3, #0]
	  	          }

	  	         if (!interlock || checkfaults /* fault condition */)
 80011fa:	4b55      	ldr	r3, [pc, #340]	@ (8001350 <main+0x318>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <main+0x1d2>
 8001202:	4b50      	ldr	r3, [pc, #320]	@ (8001344 <main+0x30c>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <main+0x1d8>
	  	       	 {
	  	       	  	event = EVENT_FAULT;
 800120a:	4b53      	ldr	r3, [pc, #332]	@ (8001358 <main+0x320>)
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
	  	       	 }

	  	          // Handle the event and update the state
	  	          currentState = handle_event(currentState, event);
 8001210:	4b54      	ldr	r3, [pc, #336]	@ (8001364 <main+0x32c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4a50      	ldr	r2, [pc, #320]	@ (8001358 <main+0x320>)
 8001216:	7812      	ldrb	r2, [r2, #0]
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fb98 	bl	8002950 <handle_event>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b4f      	ldr	r3, [pc, #316]	@ (8001364 <main+0x32c>)
 8001226:	701a      	strb	r2, [r3, #0]

	  	          // Perform actions based on the current state
	  	          switch (currentState) {
 8001228:	4b4e      	ldr	r3, [pc, #312]	@ (8001364 <main+0x32c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b04      	cmp	r3, #4
 800122e:	f200 83d5 	bhi.w	80019dc <main+0x9a4>
 8001232:	a201      	add	r2, pc, #4	@ (adr r2, 8001238 <main+0x200>)
 8001234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001238:	0800124d 	.word	0x0800124d
 800123c:	080013a9 	.word	0x080013a9
 8001240:	080013e5 	.word	0x080013e5
 8001244:	08001827 	.word	0x08001827
 8001248:	0800193d 	.word	0x0800193d
	  	              {
	  	            	//GPIOs
	  	            	//CUrrent Sensors OCD pin needed to go low in reset condition after fault event
	  	            	//HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_SET);
	  	            	//HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 800124c:	2201      	movs	r2, #1
 800124e:	2104      	movs	r1, #4
 8001250:	4845      	ldr	r0, [pc, #276]	@ (8001368 <main+0x330>)
 8001252:	f006 f845 	bl	80072e0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP
 8001256:	2200      	movs	r2, #0
 8001258:	2120      	movs	r1, #32
 800125a:	483c      	ldr	r0, [pc, #240]	@ (800134c <main+0x314>)
 800125c:	f006 f840 	bl	80072e0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	2120      	movs	r1, #32
 8001264:	4841      	ldr	r0, [pc, #260]	@ (800136c <main+0x334>)
 8001266:	f006 f83b 	bl	80072e0 <HAL_GPIO_WritePin>
	  	            	HAL_Delay(1000);
 800126a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800126e:	f003 fa73 	bl	8004758 <HAL_Delay>
	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2120      	movs	r1, #32
 8001276:	483d      	ldr	r0, [pc, #244]	@ (800136c <main+0x334>)
 8001278:	f006 f832 	bl	80072e0 <HAL_GPIO_WritePin>
	  	            	  // Start PWM for delay time transfer to FPGA
	  	            	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800127c:	2100      	movs	r1, #0
 800127e:	483c      	ldr	r0, [pc, #240]	@ (8001370 <main+0x338>)
 8001280:	f008 ff8c 	bl	800a19c <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001284:	2104      	movs	r1, #4
 8001286:	483b      	ldr	r0, [pc, #236]	@ (8001374 <main+0x33c>)
 8001288:	f008 ff88 	bl	800a19c <HAL_TIM_PWM_Start>

	  	            	  //DAC for  current reference
	  	            	  ///DAC1_OUT1 	- MAX1
	  	            	  //DAC1_OUT2 	- MAX2
	  	            	  //DAC2_OUT1	- MIN
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_1);
 800128c:	2100      	movs	r1, #0
 800128e:	483a      	ldr	r0, [pc, #232]	@ (8001378 <main+0x340>)
 8001290:	f005 f95e 	bl	8006550 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_2);
 8001294:	2110      	movs	r1, #16
 8001296:	4838      	ldr	r0, [pc, #224]	@ (8001378 <main+0x340>)
 8001298:	f005 f95a 	bl	8006550 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac2,DAC2_CHANNEL_1);
 800129c:	2100      	movs	r1, #0
 800129e:	4837      	ldr	r0, [pc, #220]	@ (800137c <main+0x344>)
 80012a0:	f005 f956 	bl	8006550 <HAL_DAC_Start>

	  	            	//if( HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R)!= HAL_OK) printf("error");
	  	            	//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);

	  	            	  // FAN PWM and 5s timer6 for check temperature and change duty cycle
	  	            	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80012a4:	2100      	movs	r1, #0
 80012a6:	4836      	ldr	r0, [pc, #216]	@ (8001380 <main+0x348>)
 80012a8:	f008 ff78 	bl	800a19c <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_Base_Start_IT(&htim6);
 80012ac:	4835      	ldr	r0, [pc, #212]	@ (8001384 <main+0x34c>)
 80012ae:	f008 fe77 	bl	8009fa0 <HAL_TIM_Base_Start_IT>

	  	            	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 80012b2:	217f      	movs	r1, #127	@ 0x7f
 80012b4:	4834      	ldr	r0, [pc, #208]	@ (8001388 <main+0x350>)
 80012b6:	f004 fd75 	bl	8005da4 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 80012ba:	217f      	movs	r1, #127	@ 0x7f
 80012bc:	4833      	ldr	r0, [pc, #204]	@ (800138c <main+0x354>)
 80012be:	f004 fd71 	bl	8005da4 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 80012c2:	217f      	movs	r1, #127	@ 0x7f
 80012c4:	4832      	ldr	r0, [pc, #200]	@ (8001390 <main+0x358>)
 80012c6:	f004 fd6d 	bl	8005da4 <HAL_ADCEx_Calibration_Start>

	  	            	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_dma_buffer, 5);
 80012ca:	2205      	movs	r2, #5
 80012cc:	4931      	ldr	r1, [pc, #196]	@ (8001394 <main+0x35c>)
 80012ce:	482e      	ldr	r0, [pc, #184]	@ (8001388 <main+0x350>)
 80012d0:	f003 fe64 	bl	8004f9c <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4_dma_buffer, 2);
 80012d4:	2202      	movs	r2, #2
 80012d6:	4930      	ldr	r1, [pc, #192]	@ (8001398 <main+0x360>)
 80012d8:	482c      	ldr	r0, [pc, #176]	@ (800138c <main+0x354>)
 80012da:	f003 fe5f 	bl	8004f9c <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_dma_buffer, 10);
 80012de:	220a      	movs	r2, #10
 80012e0:	492e      	ldr	r1, [pc, #184]	@ (800139c <main+0x364>)
 80012e2:	482b      	ldr	r0, [pc, #172]	@ (8001390 <main+0x358>)
 80012e4:	f003 fe5a 	bl	8004f9c <HAL_ADC_Start_DMA>

	  	            	Set_PWM_DutyCycle(20);
 80012e8:	2014      	movs	r0, #20
 80012ea:	f001 fb8b 	bl	8002a04 <Set_PWM_DutyCycle>

	  	            	current_sensor1_vref = adc3_dma_buffer[0];// reference for imax imin
 80012ee:	4b29      	ldr	r3, [pc, #164]	@ (8001394 <main+0x35c>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	4b2a      	ldr	r3, [pc, #168]	@ (80013a0 <main+0x368>)
 80012f6:	801a      	strh	r2, [r3, #0]
	  	            	current_sensor2_vref = adc3_dma_buffer[1];// reference for imax imin
 80012f8:	4b26      	ldr	r3, [pc, #152]	@ (8001394 <main+0x35c>)
 80012fa:	885b      	ldrh	r3, [r3, #2]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b29      	ldr	r3, [pc, #164]	@ (80013a4 <main+0x36c>)
 8001300:	801a      	strh	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 8001302:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <main+0x32c>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 8001308:	e36f      	b.n	80019ea <main+0x9b2>
 800130a:	bf00      	nop
 800130c:	f3af 8000 	nop.w
 8001310:	9374bc6a 	.word	0x9374bc6a
 8001314:	40624418 	.word	0x40624418
 8001318:	20000b74 	.word	0x20000b74
 800131c:	20000004 	.word	0x20000004
 8001320:	20000ba4 	.word	0x20000ba4
 8001324:	20000684 	.word	0x20000684
 8001328:	e000e010 	.word	0xe000e010
 800132c:	20000b94 	.word	0x20000b94
 8001330:	20000ba8 	.word	0x20000ba8
 8001334:	20000b90 	.word	0x20000b90
 8001338:	20000ba0 	.word	0x20000ba0
 800133c:	20000b98 	.word	0x20000b98
 8001340:	20000b9c 	.word	0x20000b9c
 8001344:	20000b68 	.word	0x20000b68
 8001348:	20000b58 	.word	0x20000b58
 800134c:	48000800 	.word	0x48000800
 8001350:	20000b70 	.word	0x20000b70
 8001354:	20000b64 	.word	0x20000b64
 8001358:	20000018 	.word	0x20000018
 800135c:	20000b65 	.word	0x20000b65
 8001360:	20000b66 	.word	0x20000b66
 8001364:	20000b67 	.word	0x20000b67
 8001368:	48001400 	.word	0x48001400
 800136c:	48001000 	.word	0x48001000
 8001370:	20000794 	.word	0x20000794
 8001374:	200008c4 	.word	0x200008c4
 8001378:	200006ac 	.word	0x200006ac
 800137c:	200006c0 	.word	0x200006c0
 8001380:	200007e0 	.word	0x200007e0
 8001384:	2000082c 	.word	0x2000082c
 8001388:	20000420 	.word	0x20000420
 800138c:	2000048c 	.word	0x2000048c
 8001390:	200004f8 	.word	0x200004f8
 8001394:	20000a58 	.word	0x20000a58
 8001398:	20000a6c 	.word	0x20000a6c
 800139c:	20000a80 	.word	0x20000a80
 80013a0:	20000a3c 	.word	0x20000a3c
 80013a4:	20000a3e 	.word	0x20000a3e
	  	              case STATE_STANDBY:
	  	                  // Wait for start_program signal
	  	              {
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
	  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	            	checkreads = Check_Ready();
 80013a8:	f001 fc4e 	bl	8002c48 <Check_Ready>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b8f      	ldr	r3, [pc, #572]	@ (80015f0 <main+0x5b8>)
 80013b2:	701a      	strb	r2, [r3, #0]
	  	            	  if(start_program && interlock &&  !(checkfaults)   && checkreads){
 80013b4:	4b8f      	ldr	r3, [pc, #572]	@ (80015f4 <main+0x5bc>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8312 	beq.w	80019e2 <main+0x9aa>
 80013be:	4b8e      	ldr	r3, [pc, #568]	@ (80015f8 <main+0x5c0>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 830d 	beq.w	80019e2 <main+0x9aa>
 80013c8:	4b8c      	ldr	r3, [pc, #560]	@ (80015fc <main+0x5c4>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f040 8308 	bne.w	80019e2 <main+0x9aa>
 80013d2:	4b87      	ldr	r3, [pc, #540]	@ (80015f0 <main+0x5b8>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8303 	beq.w	80019e2 <main+0x9aa>
	  	            		  currentState = STATE_REGULATION;//STATE_SOFT_START;
 80013dc:	4b88      	ldr	r3, [pc, #544]	@ (8001600 <main+0x5c8>)
 80013de:	2202      	movs	r2, #2
 80013e0:	701a      	strb	r2, [r3, #0]
		  	            	//once = 1;
		  	            	  }*/
	  	            	  }

	  	              }
	  	                  break;
 80013e2:	e2fe      	b.n	80019e2 <main+0x9aa>

	  	              case STATE_REGULATION:
	  	                  // Maintain output voltage/current
	  	            	  // 20khz sample time of regulators Timer 15
	  	                  {
	  	                	if(once == 0){
 80013e4:	4b87      	ldr	r3, [pc, #540]	@ (8001604 <main+0x5cc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d107      	bne.n	80013fc <main+0x3c4>
	  	                			  	            	  //Start timer that start_program ramp and pi regulation
	  	                			  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
 80013ec:	2200      	movs	r2, #0
 80013ee:	2104      	movs	r1, #4
 80013f0:	4885      	ldr	r0, [pc, #532]	@ (8001608 <main+0x5d0>)
 80013f2:	f005 ff75 	bl	80072e0 <HAL_GPIO_WritePin>


	  	                			  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	                			  	            	HAL_TIM_Base_Start_IT(&htim15); // START TIM15 THATS IS MAIN CONTROL LOOP
 80013f6:	4885      	ldr	r0, [pc, #532]	@ (800160c <main+0x5d4>)
 80013f8:	f008 fdd2 	bl	8009fa0 <HAL_TIM_Base_Start_IT>
	  	                			  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	                			  	            	//RAMP_FINISHED = 0;
	  	                			  	            	//once = 1;
	  	                			  	            	  }
	  	                	  if(flag_control)
 80013fc:	4b84      	ldr	r3, [pc, #528]	@ (8001610 <main+0x5d8>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 82f1 	beq.w	80019e8 <main+0x9b0>
	  	                	  {

	  	                		  	  	input_vol = Low_pass_filter(input_voltage, input_vol, input_vol_x_n1, input_vol_y_n1); //input_voltage;
 8001406:	4b83      	ldr	r3, [pc, #524]	@ (8001614 <main+0x5dc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001412:	4b81      	ldr	r3, [pc, #516]	@ (8001618 <main+0x5e0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	ee07 3a10 	vmov	s14, r3
 800141a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800141e:	4b7f      	ldr	r3, [pc, #508]	@ (800161c <main+0x5e4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	ee06 3a90 	vmov	s13, r3
 8001426:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800142a:	4b7d      	ldr	r3, [pc, #500]	@ (8001620 <main+0x5e8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	ee06 3a10 	vmov	s12, r3
 8001432:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8001436:	eef0 1a46 	vmov.f32	s3, s12
 800143a:	eeb0 1a66 	vmov.f32	s2, s13
 800143e:	eef0 0a47 	vmov.f32	s1, s14
 8001442:	eeb0 0a67 	vmov.f32	s0, s15
 8001446:	f001 fe4f 	bl	80030e8 <Low_pass_filter>
 800144a:	eef0 7a40 	vmov.f32	s15, s0
 800144e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001452:	ee17 2a90 	vmov	r2, s15
 8001456:	4b70      	ldr	r3, [pc, #448]	@ (8001618 <main+0x5e0>)
 8001458:	601a      	str	r2, [r3, #0]
	  	                		  	  	output_vol = Low_pass_filter(output_voltage, output_vol, output_vol_x_n1, output_vol_y_n1); //output_voltage;
 800145a:	4b72      	ldr	r3, [pc, #456]	@ (8001624 <main+0x5ec>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001466:	4b70      	ldr	r3, [pc, #448]	@ (8001628 <main+0x5f0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	ee07 3a10 	vmov	s14, r3
 800146e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001472:	4b6e      	ldr	r3, [pc, #440]	@ (800162c <main+0x5f4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	ee06 3a90 	vmov	s13, r3
 800147a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800147e:	4b6c      	ldr	r3, [pc, #432]	@ (8001630 <main+0x5f8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	ee06 3a10 	vmov	s12, r3
 8001486:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800148a:	eef0 1a46 	vmov.f32	s3, s12
 800148e:	eeb0 1a66 	vmov.f32	s2, s13
 8001492:	eef0 0a47 	vmov.f32	s1, s14
 8001496:	eeb0 0a67 	vmov.f32	s0, s15
 800149a:	f001 fe25 	bl	80030e8 <Low_pass_filter>
 800149e:	eef0 7a40 	vmov.f32	s15, s0
 80014a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014a6:	ee17 2a90 	vmov	r2, s15
 80014aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001628 <main+0x5f0>)
 80014ac:	601a      	str	r2, [r3, #0]
	  	                		  	  	input_vol_x_n1 = input_voltage;
 80014ae:	4b59      	ldr	r3, [pc, #356]	@ (8001614 <main+0x5dc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a5a      	ldr	r2, [pc, #360]	@ (800161c <main+0x5e4>)
 80014b4:	6013      	str	r3, [r2, #0]
	  	                		  	  	input_vol_y_n1 = input_vol;
 80014b6:	4b58      	ldr	r3, [pc, #352]	@ (8001618 <main+0x5e0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a59      	ldr	r2, [pc, #356]	@ (8001620 <main+0x5e8>)
 80014bc:	6013      	str	r3, [r2, #0]
	  	                		  	  	output_vol_x_n1 = output_voltage;
 80014be:	4b59      	ldr	r3, [pc, #356]	@ (8001624 <main+0x5ec>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a5a      	ldr	r2, [pc, #360]	@ (800162c <main+0x5f4>)
 80014c4:	6013      	str	r3, [r2, #0]
	  	                		  	  	output_vol_y_n1 = output_vol;
 80014c6:	4b58      	ldr	r3, [pc, #352]	@ (8001628 <main+0x5f0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a59      	ldr	r2, [pc, #356]	@ (8001630 <main+0x5f8>)
 80014cc:	6013      	str	r3, [r2, #0]

	  	                		  	  	Gv = (float)output_vol/(float)input_vol;//output_voltage/input_voltage;
 80014ce:	4b56      	ldr	r3, [pc, #344]	@ (8001628 <main+0x5f0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80014da:	4b4f      	ldr	r3, [pc, #316]	@ (8001618 <main+0x5e0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ea:	4b52      	ldr	r3, [pc, #328]	@ (8001634 <main+0x5fc>)
 80014ec:	edc3 7a00 	vstr	s15, [r3]

	  	                				if(Gv<2) //CZARY
 80014f0:	4b50      	ldr	r3, [pc, #320]	@ (8001634 <main+0x5fc>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80014fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001502:	f140 809f 	bpl.w	8001644 <main+0x60c>
	  	                				{
	  	                					delay_tr = acos(1-Gv)/wr;
 8001506:	4b4b      	ldr	r3, [pc, #300]	@ (8001634 <main+0x5fc>)
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001514:	ee17 0a90 	vmov	r0, s15
 8001518:	f7ff f83e 	bl	8000598 <__aeabi_f2d>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	ec43 2b10 	vmov	d0, r2, r3
 8001524:	f014 fbe0 	bl	8015ce8 <acos>
 8001528:	ec51 0b10 	vmov	r0, r1, d0
 800152c:	a32c      	add	r3, pc, #176	@ (adr r3, 80015e0 <main+0x5a8>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff f9b3 	bl	800089c <__aeabi_ddiv>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fb7b 	bl	8000c38 <__aeabi_d2f>
 8001542:	4603      	mov	r3, r0
 8001544:	4a3c      	ldr	r2, [pc, #240]	@ (8001638 <main+0x600>)
 8001546:	6013      	str	r3, [r2, #0]
	  	                					imin = (int)(Imin_Factor*output_vol*sqrt((2-Gv)/Gv)/Z); //[mA] Negative current needed to Zero voltage switching in resonance
 8001548:	4b37      	ldr	r3, [pc, #220]	@ (8001628 <main+0x5f0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	ee07 3a90 	vmov	s15, r3
 8001550:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001554:	4b39      	ldr	r3, [pc, #228]	@ (800163c <main+0x604>)
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155e:	ee17 0a90 	vmov	r0, s15
 8001562:	f7ff f819 	bl	8000598 <__aeabi_f2d>
 8001566:	4604      	mov	r4, r0
 8001568:	460d      	mov	r5, r1
 800156a:	4b32      	ldr	r3, [pc, #200]	@ (8001634 <main+0x5fc>)
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001574:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001578:	4b2e      	ldr	r3, [pc, #184]	@ (8001634 <main+0x5fc>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001582:	ee16 0a90 	vmov	r0, s13
 8001586:	f7ff f807 	bl	8000598 <__aeabi_f2d>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	ec43 2b10 	vmov	d0, r2, r3
 8001592:	f014 fc4d 	bl	8015e30 <sqrt>
 8001596:	ec53 2b10 	vmov	r2, r3, d0
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7ff f853 	bl	8000648 <__aeabi_dmul>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	a30f      	add	r3, pc, #60	@ (adr r3, 80015e8 <main+0x5b0>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7ff f974 	bl	800089c <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff faf4 	bl	8000ba8 <__aeabi_d2iz>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <main+0x608>)
 80015c6:	601a      	str	r2, [r3, #0]
	  	                					if(imin>4000) imin = 4000;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001640 <main+0x608>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80015d0:	d973      	bls.n	80016ba <main+0x682>
 80015d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <main+0x608>)
 80015d4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e06e      	b.n	80016ba <main+0x682>
 80015dc:	f3af 8000 	nop.w
 80015e0:	78000000 	.word	0x78000000
 80015e4:	4190942a 	.word	0x4190942a
 80015e8:	9374bc6a 	.word	0x9374bc6a
 80015ec:	40624418 	.word	0x40624418
 80015f0:	20000b69 	.word	0x20000b69
 80015f4:	20000b64 	.word	0x20000b64
 80015f8:	20000b70 	.word	0x20000b70
 80015fc:	20000b68 	.word	0x20000b68
 8001600:	20000b67 	.word	0x20000b67
 8001604:	20000b6c 	.word	0x20000b6c
 8001608:	48001400 	.word	0x48001400
 800160c:	20000910 	.word	0x20000910
 8001610:	20000b71 	.word	0x20000b71
 8001614:	20000a4c 	.word	0x20000a4c
 8001618:	20000024 	.word	0x20000024
 800161c:	2000002c 	.word	0x2000002c
 8001620:	20000030 	.word	0x20000030
 8001624:	20000a64 	.word	0x20000a64
 8001628:	20000028 	.word	0x20000028
 800162c:	20000034 	.word	0x20000034
 8001630:	20000038 	.word	0x20000038
 8001634:	20000004 	.word	0x20000004
 8001638:	20000a74 	.word	0x20000a74
 800163c:	20000020 	.word	0x20000020
 8001640:	20000a48 	.word	0x20000a48
	  	                				} else if(Gv>=2)
 8001644:	4b9e      	ldr	r3, [pc, #632]	@ (80018c0 <main+0x888>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800164e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001656:	db30      	blt.n	80016ba <main+0x682>
	  	                				{
	  	                					delay_tr = (M_PI-acos(1/(Gv-1)))/wr;
 8001658:	4b99      	ldr	r3, [pc, #612]	@ (80018c0 <main+0x888>)
 800165a:	edd3 7a00 	vldr	s15, [r3]
 800165e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001662:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001666:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800166a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800166e:	ee16 0a90 	vmov	r0, s13
 8001672:	f7fe ff91 	bl	8000598 <__aeabi_f2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	ec43 2b10 	vmov	d0, r2, r3
 800167e:	f014 fb33 	bl	8015ce8 <acos>
 8001682:	ec53 2b10 	vmov	r2, r3, d0
 8001686:	a186      	add	r1, pc, #536	@ (adr r1, 80018a0 <main+0x868>)
 8001688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800168c:	f7fe fe24 	bl	80002d8 <__aeabi_dsub>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	a383      	add	r3, pc, #524	@ (adr r3, 80018a8 <main+0x870>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7ff f8fd 	bl	800089c <__aeabi_ddiv>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f7ff fac5 	bl	8000c38 <__aeabi_d2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a84      	ldr	r2, [pc, #528]	@ (80018c4 <main+0x88c>)
 80016b2:	6013      	str	r3, [r2, #0]
	  	                					imin = 0;
 80016b4:	4b84      	ldr	r3, [pc, #528]	@ (80018c8 <main+0x890>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
	  	                				}
	  	                				if(/*once == 0*/delay_tr<0.001){
 80016ba:	4b82      	ldr	r3, [pc, #520]	@ (80018c4 <main+0x88c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff6a 	bl	8000598 <__aeabi_f2d>
 80016c4:	a37a      	add	r3, pc, #488	@ (adr r3, 80018b0 <main+0x878>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7ff fa2f 	bl	8000b2c <__aeabi_dcmplt>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d017      	beq.n	8001704 <main+0x6cc>
	  	                				int delay_tr_freq = (int)(1/delay_tr);
 80016d4:	4b7b      	ldr	r3, [pc, #492]	@ (80018c4 <main+0x88c>)
 80016d6:	ed93 7a00 	vldr	s14, [r3]
 80016da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e6:	ee17 3a90 	vmov	r3, s15
 80016ea:	607b      	str	r3, [r7, #4]
	  	                				if(delay_tr_freq>20000000) delay_tr_freq = 10000000;//10Mhz
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a77      	ldr	r2, [pc, #476]	@ (80018cc <main+0x894>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	dd01      	ble.n	80016f8 <main+0x6c0>
 80016f4:	4b76      	ldr	r3, [pc, #472]	@ (80018d0 <main+0x898>)
 80016f6:	607b      	str	r3, [r7, #4]
	  	                				if(/*once == 0*/ 1) Update_PWM_Frequency(&htim1, TIM_CHANNEL_1, delay_tr_freq); // Set TIM1 CH1 to freq that is delay tr and send to fpga
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	461a      	mov	r2, r3
 80016fc:	2100      	movs	r1, #0
 80016fe:	4875      	ldr	r0, [pc, #468]	@ (80018d4 <main+0x89c>)
 8001700:	f001 f9f8 	bl	8002af4 <Update_PWM_Frequency>
	  	                				}

	  	                				if(RAMP_FINISHED == 0) RAMP(); // Adding to Vramp stepping voltage to create starting ramp
 8001704:	4b74      	ldr	r3, [pc, #464]	@ (80018d8 <main+0x8a0>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <main+0x6d8>
 800170c:	f001 fbd4 	bl	8002eb8 <RAMP>

	  	                				regulatorPI(&imax1, &Integral_I, output_vol, Vramp, LIM_PEAK_POS, LIM_PEAK_NEG, Kp, Ti, Ts);
 8001710:	4b72      	ldr	r3, [pc, #456]	@ (80018dc <main+0x8a4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800171c:	4b70      	ldr	r3, [pc, #448]	@ (80018e0 <main+0x8a8>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	ee07 3a10 	vmov	s14, r3
 8001724:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001728:	4b6e      	ldr	r3, [pc, #440]	@ (80018e4 <main+0x8ac>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	ee06 3a90 	vmov	s13, r3
 8001730:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001734:	4b6c      	ldr	r3, [pc, #432]	@ (80018e8 <main+0x8b0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	ee06 3a10 	vmov	s12, r3
 800173c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8001740:	4b6a      	ldr	r3, [pc, #424]	@ (80018ec <main+0x8b4>)
 8001742:	edd3 5a00 	vldr	s11, [r3]
 8001746:	4b6a      	ldr	r3, [pc, #424]	@ (80018f0 <main+0x8b8>)
 8001748:	ed93 5a00 	vldr	s10, [r3]
 800174c:	ed9f 3a69 	vldr	s6, [pc, #420]	@ 80018f4 <main+0x8bc>
 8001750:	eef0 2a45 	vmov.f32	s5, s10
 8001754:	eeb0 2a65 	vmov.f32	s4, s11
 8001758:	eef0 1a46 	vmov.f32	s3, s12
 800175c:	eeb0 1a66 	vmov.f32	s2, s13
 8001760:	eef0 0a47 	vmov.f32	s1, s14
 8001764:	eeb0 0a67 	vmov.f32	s0, s15
 8001768:	4963      	ldr	r1, [pc, #396]	@ (80018f8 <main+0x8c0>)
 800176a:	4864      	ldr	r0, [pc, #400]	@ (80018fc <main+0x8c4>)
 800176c:	f001 fbde 	bl	8002f2c <regulatorPI>

	  	                				if(/*once == 0*/ output_vol>40000)
 8001770:	4b5a      	ldr	r3, [pc, #360]	@ (80018dc <main+0x8a4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8001778:	4293      	cmp	r3, r2
 800177a:	d939      	bls.n	80017f0 <main+0x7b8>
	  	                				{
	  	                				delay_hc = (2*C_CAP*output_vol)/imax1;
 800177c:	4b57      	ldr	r3, [pc, #348]	@ (80018dc <main+0x8a4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fee7 	bl	8000554 <__aeabi_ui2d>
 8001786:	a34c      	add	r3, pc, #304	@ (adr r3, 80018b8 <main+0x880>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	f7fe ff5c 	bl	8000648 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4614      	mov	r4, r2
 8001796:	461d      	mov	r5, r3
 8001798:	4b58      	ldr	r3, [pc, #352]	@ (80018fc <main+0x8c4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fed9 	bl	8000554 <__aeabi_ui2d>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4620      	mov	r0, r4
 80017a8:	4629      	mov	r1, r5
 80017aa:	f7ff f877 	bl	800089c <__aeabi_ddiv>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f7ff fa3f 	bl	8000c38 <__aeabi_d2f>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4a50      	ldr	r2, [pc, #320]	@ (8001900 <main+0x8c8>)
 80017be:	6013      	str	r3, [r2, #0]
	  	                				int delay_hc_freq = (int)(1/delay_hc);
 80017c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001900 <main+0x8c8>)
 80017c2:	ed93 7a00 	vldr	s14, [r3]
 80017c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d2:	ee17 3a90 	vmov	r3, s15
 80017d6:	603b      	str	r3, [r7, #0]
	  	                				if(delay_hc_freq>20000000) delay_hc_freq = 10000000;//10Mhz jakis problem
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	4a3c      	ldr	r2, [pc, #240]	@ (80018cc <main+0x894>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	dd01      	ble.n	80017e4 <main+0x7ac>
 80017e0:	4b3b      	ldr	r3, [pc, #236]	@ (80018d0 <main+0x898>)
 80017e2:	603b      	str	r3, [r7, #0]
	  	                				if(/*once == 0*/ 1) Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, delay_hc_freq); // Set TIM8 CH1 o freq that is delay hc and send to fpga
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	2104      	movs	r1, #4
 80017ea:	4846      	ldr	r0, [pc, #280]	@ (8001904 <main+0x8cc>)
 80017ec:	f001 f982 	bl	8002af4 <Update_PWM_Frequency>
	  	                				}

	  	                				imax2 =  imax1 + imax2_sum;//
 80017f0:	4b42      	ldr	r3, [pc, #264]	@ (80018fc <main+0x8c4>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b44      	ldr	r3, [pc, #272]	@ (8001908 <main+0x8d0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a44      	ldr	r2, [pc, #272]	@ (800190c <main+0x8d4>)
 80017fc:	6013      	str	r3, [r2, #0]

	  	                				if(once == 0){
 80017fe:	4b44      	ldr	r3, [pc, #272]	@ (8001910 <main+0x8d8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10b      	bne.n	800181e <main+0x7e6>
	  	                							HAL_Delay(500);
 8001806:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800180a:	f002 ffa5 	bl	8004758 <HAL_Delay>
	  	                						HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
 800180e:	2201      	movs	r2, #1
 8001810:	2120      	movs	r1, #32
 8001812:	4840      	ldr	r0, [pc, #256]	@ (8001914 <main+0x8dc>)
 8001814:	f005 fd64 	bl	80072e0 <HAL_GPIO_WritePin>
	  	                						once = 1;
 8001818:	4b3d      	ldr	r3, [pc, #244]	@ (8001910 <main+0x8d8>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]
	  	                						}

	  	                				flag_control = 0;
 800181e:	4b3e      	ldr	r3, [pc, #248]	@ (8001918 <main+0x8e0>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
	  	                	  }

	  	                  }
	  	                  break;
 8001824:	e0e0      	b.n	80019e8 <main+0x9b0>
	  	              case STATE_FAULT:
	  	                  // Handle fault condition
	  	            	  // Turn off all gate drivers and stop FPGA
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP drives mosfet etc
 8001826:	2200      	movs	r2, #0
 8001828:	2120      	movs	r1, #32
 800182a:	483a      	ldr	r0, [pc, #232]	@ (8001914 <main+0x8dc>)
 800182c:	f005 fd58 	bl	80072e0 <HAL_GPIO_WritePin>

	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!


	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 8001830:	483a      	ldr	r0, [pc, #232]	@ (800191c <main+0x8e4>)
 8001832:	f008 fc2d 	bl	800a090 <HAL_TIM_Base_Stop_IT>

	  	            	HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port,NOT_RST_1_Pin, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2180      	movs	r1, #128	@ 0x80
 800183a:	4839      	ldr	r0, [pc, #228]	@ (8001920 <main+0x8e8>)
 800183c:	f005 fd50 	bl	80072e0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_2_GPIO_Port,NOT_RST_2_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001846:	4837      	ldr	r0, [pc, #220]	@ (8001924 <main+0x8ec>)
 8001848:	f005 fd4a 	bl	80072e0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port,NOT_RST_3_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	2101      	movs	r1, #1
 8001850:	4835      	ldr	r0, [pc, #212]	@ (8001928 <main+0x8f0>)
 8001852:	f005 fd45 	bl	80072e0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port,NOT_RST_4_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	2140      	movs	r1, #64	@ 0x40
 800185a:	482e      	ldr	r0, [pc, #184]	@ (8001914 <main+0x8dc>)
 800185c:	f005 fd40 	bl	80072e0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	2102      	movs	r1, #2
 8001864:	482f      	ldr	r0, [pc, #188]	@ (8001924 <main+0x8ec>)
 8001866:	f005 fd3b 	bl	80072e0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001870:	482e      	ldr	r0, [pc, #184]	@ (800192c <main+0x8f4>)
 8001872:	f005 fd35 	bl	80072e0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 8001876:	2201      	movs	r2, #1
 8001878:	2120      	movs	r1, #32
 800187a:	482a      	ldr	r0, [pc, #168]	@ (8001924 <main+0x8ec>)
 800187c:	f005 fd30 	bl	80072e0 <HAL_GPIO_WritePin>

	  	            	HAL_TIM_Base_Start(&htim7); // timer for reset OCD and INTERLOCK reset turn off
 8001880:	482b      	ldr	r0, [pc, #172]	@ (8001930 <main+0x8f8>)
 8001882:	f008 fb1d 	bl	8009ec0 <HAL_TIM_Base_Start>


	  	            	once = 0;
 8001886:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <main+0x8d8>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
	  	            	start_program = 0;
 800188c:	4b29      	ldr	r3, [pc, #164]	@ (8001934 <main+0x8fc>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
	  	            	currentState = STATE_SHUTDOWN;
 8001892:	4b29      	ldr	r3, [pc, #164]	@ (8001938 <main+0x900>)
 8001894:	2204      	movs	r2, #4
 8001896:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 8001898:	e0a7      	b.n	80019ea <main+0x9b2>
 800189a:	bf00      	nop
 800189c:	f3af 8000 	nop.w
 80018a0:	54442d18 	.word	0x54442d18
 80018a4:	400921fb 	.word	0x400921fb
 80018a8:	78000000 	.word	0x78000000
 80018ac:	4190942a 	.word	0x4190942a
 80018b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80018b4:	3f50624d 	.word	0x3f50624d
 80018b8:	e5c45270 	.word	0xe5c45270
 80018bc:	3e32e5d9 	.word	0x3e32e5d9
 80018c0:	20000004 	.word	0x20000004
 80018c4:	20000a74 	.word	0x20000a74
 80018c8:	20000a48 	.word	0x20000a48
 80018cc:	01312d00 	.word	0x01312d00
 80018d0:	00989680 	.word	0x00989680
 80018d4:	20000794 	.word	0x20000794
 80018d8:	20000a70 	.word	0x20000a70
 80018dc:	20000028 	.word	0x20000028
 80018e0:	20000a6a 	.word	0x20000a6a
 80018e4:	20000010 	.word	0x20000010
 80018e8:	20000014 	.word	0x20000014
 80018ec:	20000008 	.word	0x20000008
 80018f0:	2000000c 	.word	0x2000000c
 80018f4:	3851b717 	.word	0x3851b717
 80018f8:	20000b5c 	.word	0x20000b5c
 80018fc:	20000a40 	.word	0x20000a40
 8001900:	20000a78 	.word	0x20000a78
 8001904:	200008c4 	.word	0x200008c4
 8001908:	20000a7c 	.word	0x20000a7c
 800190c:	20000a44 	.word	0x20000a44
 8001910:	20000b6c 	.word	0x20000b6c
 8001914:	48000800 	.word	0x48000800
 8001918:	20000b71 	.word	0x20000b71
 800191c:	20000910 	.word	0x20000910
 8001920:	48000400 	.word	0x48000400
 8001924:	48001000 	.word	0x48001000
 8001928:	48000c00 	.word	0x48000c00
 800192c:	48001400 	.word	0x48001400
 8001930:	20000878 	.word	0x20000878
 8001934:	20000b64 	.word	0x20000b64
 8001938:	20000b67 	.word	0x20000b67
	  	              case STATE_SHUTDOWN:
	  	                  // Safely shut down the converter
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	2120      	movs	r1, #32
 8001940:	482b      	ldr	r0, [pc, #172]	@ (80019f0 <main+0x9b8>)
 8001942:	f005 fccd 	bl	80072e0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 8001946:	2201      	movs	r2, #1
 8001948:	2104      	movs	r1, #4
 800194a:	482a      	ldr	r0, [pc, #168]	@ (80019f4 <main+0x9bc>)
 800194c:	f005 fcc8 	bl	80072e0 <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 8001950:	4829      	ldr	r0, [pc, #164]	@ (80019f8 <main+0x9c0>)
 8001952:	f008 fb9d 	bl	800a090 <HAL_TIM_Base_Stop_IT>
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
	  	            	RAMP_FINISHED = 0;
 8001956:	4b29      	ldr	r3, [pc, #164]	@ (80019fc <main+0x9c4>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
						once = 0;
 800195c:	4b28      	ldr	r3, [pc, #160]	@ (8001a00 <main+0x9c8>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
	  	            	imax1 = 1;
 8001962:	4b28      	ldr	r3, [pc, #160]	@ (8001a04 <main+0x9cc>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]
						imax2 = 1;
 8001968:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <main+0x9d0>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]
						vout = 1;
 800196e:	4b27      	ldr	r3, [pc, #156]	@ (8001a0c <main+0x9d4>)
 8001970:	2201      	movs	r2, #1
 8001972:	801a      	strh	r2, [r3, #0]
						Vramp = 1;
 8001974:	4b26      	ldr	r3, [pc, #152]	@ (8001a10 <main+0x9d8>)
 8001976:	2201      	movs	r2, #1
 8001978:	801a      	strh	r2, [r3, #0]
						delay_tr = 1;
 800197a:	4b26      	ldr	r3, [pc, #152]	@ (8001a14 <main+0x9dc>)
 800197c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001980:	601a      	str	r2, [r3, #0]
						delay_hc = 1;
 8001982:	4b25      	ldr	r3, [pc, #148]	@ (8001a18 <main+0x9e0>)
 8001984:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001988:	601a      	str	r2, [r3, #0]
						Gv = 1;
 800198a:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <main+0x9e4>)
 800198c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001990:	601a      	str	r2, [r3, #0]
						Integral_I = 1;
 8001992:	4b23      	ldr	r3, [pc, #140]	@ (8001a20 <main+0x9e8>)
 8001994:	2201      	movs	r2, #1
 8001996:	601a      	str	r2, [r3, #0]
						prev_delta = 1;
 8001998:	4b22      	ldr	r3, [pc, #136]	@ (8001a24 <main+0x9ec>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]
						input_vol = 1;
 800199e:	4b22      	ldr	r3, [pc, #136]	@ (8001a28 <main+0x9f0>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
						input_voltage =1;
 80019a4:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <main+0x9f4>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
						output_vol = 1;
 80019aa:	4b21      	ldr	r3, [pc, #132]	@ (8001a30 <main+0x9f8>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
						output_voltage =1;
 80019b0:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <main+0x9fc>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
						input_vol_x_n1 = 1;
 80019b6:	4b20      	ldr	r3, [pc, #128]	@ (8001a38 <main+0xa00>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
						input_vol_y_n1 = 1;
 80019bc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <main+0xa04>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
						output_vol_x_n1 = 1;
 80019c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <main+0xa08>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
						output_vol_y_n1 = 1;
 80019c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a44 <main+0xa0c>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
						imin = 1;
 80019ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001a48 <main+0xa10>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <main+0xa14>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
	  	              }

	  	                  break;
 80019da:	e006      	b.n	80019ea <main+0x9b2>
	  	              default:
	  	                  break;
 80019dc:	bf00      	nop
 80019de:	f7ff bbc7 	b.w	8001170 <main+0x138>
	  	                  break;
 80019e2:	bf00      	nop
 80019e4:	f7ff bbc4 	b.w	8001170 <main+0x138>
	  	                  break;
 80019e8:	bf00      	nop
	  	  	  	  checkfaults = Check_Faults();
 80019ea:	f7ff bbc1 	b.w	8001170 <main+0x138>
 80019ee:	bf00      	nop
 80019f0:	48000800 	.word	0x48000800
 80019f4:	48001400 	.word	0x48001400
 80019f8:	20000910 	.word	0x20000910
 80019fc:	20000a70 	.word	0x20000a70
 8001a00:	20000b6c 	.word	0x20000b6c
 8001a04:	20000a40 	.word	0x20000a40
 8001a08:	20000a44 	.word	0x20000a44
 8001a0c:	20000a68 	.word	0x20000a68
 8001a10:	20000a6a 	.word	0x20000a6a
 8001a14:	20000a74 	.word	0x20000a74
 8001a18:	20000a78 	.word	0x20000a78
 8001a1c:	20000004 	.word	0x20000004
 8001a20:	20000b5c 	.word	0x20000b5c
 8001a24:	20000b60 	.word	0x20000b60
 8001a28:	20000024 	.word	0x20000024
 8001a2c:	20000a4c 	.word	0x20000a4c
 8001a30:	20000028 	.word	0x20000028
 8001a34:	20000a64 	.word	0x20000a64
 8001a38:	2000002c 	.word	0x2000002c
 8001a3c:	20000030 	.word	0x20000030
 8001a40:	20000034 	.word	0x20000034
 8001a44:	20000038 	.word	0x20000038
 8001a48:	20000a48 	.word	0x20000a48
 8001a4c:	20000b67 	.word	0x20000b67

08001a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b094      	sub	sp, #80	@ 0x50
 8001a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a56:	f107 0318 	add.w	r3, r7, #24
 8001a5a:	2238      	movs	r2, #56	@ 0x38
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f010 f969 	bl	8011d36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a72:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a76:	f007 f99b 	bl	8008db0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001a7a:	2322      	movs	r3, #34	@ 0x22
 8001a7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a84:	2340      	movs	r3, #64	@ 0x40
 8001a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a90:	2302      	movs	r3, #2
 8001a92:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001a94:	2304      	movs	r3, #4
 8001a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001a98:	234b      	movs	r3, #75	@ 0x4b
 8001a9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	4618      	mov	r0, r3
 8001aae:	f007 fa33 	bl	8008f18 <HAL_RCC_OscConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001ab8:	f001 ffd8 	bl	8003a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001abc:	230f      	movs	r3, #15
 8001abe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f007 fd31 	bl	800953c <HAL_RCC_ClockConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ae0:	f001 ffc4 	bl	8003a6c <Error_Handler>
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	3750      	adds	r7, #80	@ 0x50
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08c      	sub	sp, #48	@ 0x30
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	2220      	movs	r2, #32
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f010 f916 	bl	8011d36 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b0a:	4b32      	ldr	r3, [pc, #200]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b0c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001b10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b12:	4b30      	ldr	r3, [pc, #192]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b14:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b20:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001b26:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b2c:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b32:	4b28      	ldr	r3, [pc, #160]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b34:	2204      	movs	r2, #4
 8001b36:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b38:	4b26      	ldr	r3, [pc, #152]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b3e:	4b25      	ldr	r3, [pc, #148]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001b44:	4b23      	ldr	r3, [pc, #140]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b4a:	4b22      	ldr	r3, [pc, #136]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b52:	4b20      	ldr	r3, [pc, #128]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b66:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b74:	4817      	ldr	r0, [pc, #92]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b76:	f003 f855 	bl	8004c24 <HAL_ADC_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001b80:	f001 ff74 	bl	8003a6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4811      	ldr	r0, [pc, #68]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001b90:	f004 f96a 	bl	8005e68 <HAL_ADCEx_MultiModeConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001b9a:	f001 ff67 	bl	8003a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <MX_ADC1_Init+0xec>)
 8001ba0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ba2:	2306      	movs	r3, #6
 8001ba4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001baa:	237f      	movs	r3, #127	@ 0x7f
 8001bac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bae:	2304      	movs	r3, #4
 8001bb0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4806      	ldr	r0, [pc, #24]	@ (8001bd4 <MX_ADC1_Init+0xe8>)
 8001bbc:	f003 fad6 	bl	800516c <HAL_ADC_ConfigChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001bc6:	f001 ff51 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	3730      	adds	r7, #48	@ 0x30
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200003b4 	.word	0x200003b4
 8001bd8:	cb840000 	.word	0xcb840000

08001bdc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	@ 0x30
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f010 f89e 	bl	8011d36 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001bfa:	4b57      	ldr	r3, [pc, #348]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001bfc:	4a57      	ldr	r2, [pc, #348]	@ (8001d5c <MX_ADC3_Init+0x180>)
 8001bfe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001c00:	4b55      	ldr	r3, [pc, #340]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c02:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001c06:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001c08:	4b53      	ldr	r3, [pc, #332]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c0e:	4b52      	ldr	r3, [pc, #328]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001c14:	4b50      	ldr	r3, [pc, #320]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c1a:	4b4f      	ldr	r3, [pc, #316]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c20:	4b4d      	ldr	r3, [pc, #308]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c22:	2204      	movs	r2, #4
 8001c24:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001c26:	4b4c      	ldr	r3, [pc, #304]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001c2c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 5;
 8001c32:	4b49      	ldr	r3, [pc, #292]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c34:	2205      	movs	r2, #5
 8001c36:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001c38:	4b47      	ldr	r3, [pc, #284]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c40:	4b45      	ldr	r3, [pc, #276]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c46:	4b44      	ldr	r3, [pc, #272]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001c4c:	4b42      	ldr	r3, [pc, #264]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001c54:	4b40      	ldr	r3, [pc, #256]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001c5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001c64:	483c      	ldr	r0, [pc, #240]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c66:	f002 ffdd 	bl	8004c24 <HAL_ADC_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8001c70:	f001 fefc 	bl	8003a6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c74:	2300      	movs	r3, #0
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4836      	ldr	r0, [pc, #216]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001c80:	f004 f8f2 	bl	8005e68 <HAL_ADCEx_MultiModeConfigChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001c8a:	f001 feef 	bl	8003a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c8e:	4b34      	ldr	r3, [pc, #208]	@ (8001d60 <MX_ADC3_Init+0x184>)
 8001c90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c92:	2306      	movs	r3, #6
 8001c94:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c9a:	237f      	movs	r3, #127	@ 0x7f
 8001c9c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 38;
 8001ca2:	2326      	movs	r3, #38	@ 0x26
 8001ca4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8001ca6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001caa:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetSaturation = DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4828      	ldr	r0, [pc, #160]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001cb8:	f003 fa58 	bl	800516c <HAL_ADC_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001cc2:	f001 fed3 	bl	8003a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001cc6:	4b27      	ldr	r3, [pc, #156]	@ (8001d64 <MX_ADC3_Init+0x188>)
 8001cc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001cca:	230c      	movs	r3, #12
 8001ccc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_2;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 37;
 8001cd2:	2325      	movs	r3, #37	@ 0x25
 8001cd4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	4619      	mov	r1, r3
 8001cda:	481f      	ldr	r0, [pc, #124]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001cdc:	f003 fa46 	bl	800516c <HAL_ADC_ConfigChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 8001ce6:	f001 fec1 	bl	8003a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cea:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <MX_ADC3_Init+0x18c>)
 8001cec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001cee:	2312      	movs	r3, #18
 8001cf0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_3;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 8;
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4816      	ldr	r0, [pc, #88]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001d00:	f003 fa34 	bl	800516c <HAL_ADC_ConfigChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_ADC3_Init+0x132>
  {
    Error_Handler();
 8001d0a:	f001 feaf 	bl	8003a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d0e:	4b17      	ldr	r3, [pc, #92]	@ (8001d6c <MX_ADC3_Init+0x190>)
 8001d10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001d12:	2318      	movs	r3, #24
 8001d14:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d16:	2304      	movs	r3, #4
 8001d18:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	480d      	ldr	r0, [pc, #52]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001d24:	f003 fa22 	bl	800516c <HAL_ADC_ConfigChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8001d2e:	f001 fe9d 	bl	8003a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d32:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <MX_ADC3_Init+0x194>)
 8001d34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001d36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4805      	ldr	r0, [pc, #20]	@ (8001d58 <MX_ADC3_Init+0x17c>)
 8001d42:	f003 fa13 	bl	800516c <HAL_ADC_ConfigChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8001d4c:	f001 fe8e 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	3730      	adds	r7, #48	@ 0x30
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000420 	.word	0x20000420
 8001d5c:	50000400 	.word	0x50000400
 8001d60:	04300002 	.word	0x04300002
 8001d64:	08600004 	.word	0x08600004
 8001d68:	0c900008 	.word	0x0c900008
 8001d6c:	10c00010 	.word	0x10c00010
 8001d70:	14f00020 	.word	0x14f00020

08001d74 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f00f ffd8 	bl	8011d36 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001d86:	4b2b      	ldr	r3, [pc, #172]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001d88:	4a2b      	ldr	r2, [pc, #172]	@ (8001e38 <MX_ADC4_Init+0xc4>)
 8001d8a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001d8c:	4b29      	ldr	r3, [pc, #164]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001d8e:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001d92:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001d94:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d9a:	4b26      	ldr	r3, [pc, #152]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001da0:	4b24      	ldr	r3, [pc, #144]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001da6:	4b23      	ldr	r3, [pc, #140]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dac:	4b21      	ldr	r3, [pc, #132]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001dae:	2204      	movs	r2, #4
 8001db0:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001db2:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001db8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dd2:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001dd8:	4b16      	ldr	r3, [pc, #88]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001de0:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001de2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001de6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001de8:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001df0:	4810      	ldr	r0, [pc, #64]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001df2:	f002 ff17 	bl	8004c24 <HAL_ADC_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8001dfc:	f001 fe36 	bl	8003a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <MX_ADC4_Init+0xc8>)
 8001e02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e04:	2306      	movs	r3, #6
 8001e06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001e08:	2307      	movs	r3, #7
 8001e0a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e0c:	237f      	movs	r3, #127	@ 0x7f
 8001e0e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e10:	2304      	movs	r3, #4
 8001e12:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001e18:	463b      	mov	r3, r7
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4805      	ldr	r0, [pc, #20]	@ (8001e34 <MX_ADC4_Init+0xc0>)
 8001e1e:	f003 f9a5 	bl	800516c <HAL_ADC_ConfigChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8001e28:	f001 fe20 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001e2c:	bf00      	nop
 8001e2e:	3720      	adds	r7, #32
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	2000048c 	.word	0x2000048c
 8001e38:	50000500 	.word	0x50000500
 8001e3c:	04300002 	.word	0x04300002

08001e40 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e46:	463b      	mov	r3, r7
 8001e48:	2220      	movs	r2, #32
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f00f ff72 	bl	8011d36 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001e52:	4b31      	ldr	r3, [pc, #196]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001e54:	4a31      	ldr	r2, [pc, #196]	@ (8001f1c <MX_ADC5_Init+0xdc>)
 8001e56:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001e58:	4b2f      	ldr	r3, [pc, #188]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001e5a:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001e5e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001e60:	4b2d      	ldr	r3, [pc, #180]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e66:	4b2c      	ldr	r3, [pc, #176]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e72:	4b29      	ldr	r3, [pc, #164]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e78:	4b27      	ldr	r3, [pc, #156]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001e7e:	4b26      	ldr	r3, [pc, #152]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001e84:	4b24      	ldr	r3, [pc, #144]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001e8a:	4b23      	ldr	r3, [pc, #140]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001e90:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e98:	4b1f      	ldr	r3, [pc, #124]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001eba:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001ebc:	221c      	movs	r2, #28
 8001ebe:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8001ec0:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001ec2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ec6:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001ec8:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001ece:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001ed4:	4810      	ldr	r0, [pc, #64]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001ed6:	f002 fea5 	bl	8004c24 <HAL_ADC_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_ADC5_Init+0xa4>
  {
    Error_Handler();
 8001ee0:	f001 fdc4 	bl	8003a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <MX_ADC5_Init+0xe0>)
 8001ee6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ee8:	2306      	movs	r3, #6
 8001eea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ef0:	237f      	movs	r3, #127	@ 0x7f
 8001ef2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001efc:	463b      	mov	r3, r7
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <MX_ADC5_Init+0xd8>)
 8001f02:	f003 f933 	bl	800516c <HAL_ADC_ConfigChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_ADC5_Init+0xd0>
  {
    Error_Handler();
 8001f0c:	f001 fdae 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200004f8 	.word	0x200004f8
 8001f1c:	50000600 	.word	0x50000600
 8001f20:	04300002 	.word	0x04300002

08001f24 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <MX_CORDIC_Init+0x20>)
 8001f2a:	4a07      	ldr	r2, [pc, #28]	@ (8001f48 <MX_CORDIC_Init+0x24>)
 8001f2c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001f2e:	4805      	ldr	r0, [pc, #20]	@ (8001f44 <MX_CORDIC_Init+0x20>)
 8001f30:	f004 f8a2 	bl	8006078 <HAL_CORDIC_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001f3a:	f001 fd97 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000684 	.word	0x20000684
 8001f48:	40020c00 	.word	0x40020c00

08001f4c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08c      	sub	sp, #48	@ 0x30
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f52:	463b      	mov	r3, r7
 8001f54:	2230      	movs	r2, #48	@ 0x30
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f00f feec 	bl	8011d36 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd8 <MX_DAC1_Init+0x8c>)
 8001f60:	4a1e      	ldr	r2, [pc, #120]	@ (8001fdc <MX_DAC1_Init+0x90>)
 8001f62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001f64:	481c      	ldr	r0, [pc, #112]	@ (8001fd8 <MX_DAC1_Init+0x8c>)
 8001f66:	f004 fad0 	bl	800650a <HAL_DAC_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001f70:	f001 fd7c 	bl	8003a6c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001f74:	2302      	movs	r3, #2
 8001f76:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001f90:	2301      	movs	r3, #1
 8001f92:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f98:	463b      	mov	r3, r7
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	480e      	ldr	r0, [pc, #56]	@ (8001fd8 <MX_DAC1_Init+0x8c>)
 8001fa0:	f004 fbd0 	bl	8006744 <HAL_DAC_ConfigChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001faa:	f001 fd5f 	bl	8003a6c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001fae:	463b      	mov	r3, r7
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4808      	ldr	r0, [pc, #32]	@ (8001fd8 <MX_DAC1_Init+0x8c>)
 8001fb6:	f004 fbc5 	bl	8006744 <HAL_DAC_ConfigChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8001fc0:	f001 fd54 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  __HAL_LINKDMA(&hdac1, DMA_Handle1, hdma_dac1_ch1);
 8001fc4:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <MX_DAC1_Init+0x8c>)
 8001fc6:	4a06      	ldr	r2, [pc, #24]	@ (8001fe0 <MX_DAC1_Init+0x94>)
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <MX_DAC1_Init+0x94>)
 8001fcc:	4a02      	ldr	r2, [pc, #8]	@ (8001fd8 <MX_DAC1_Init+0x8c>)
 8001fce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END DAC1_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	3730      	adds	r7, #48	@ 0x30
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	200006ac 	.word	0x200006ac
 8001fdc:	50000800 	.word	0x50000800
 8001fe0:	200006d4 	.word	0x200006d4

08001fe4 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	@ 0x30
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001fea:	463b      	mov	r3, r7
 8001fec:	2230      	movs	r2, #48	@ 0x30
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f00f fea0 	bl	8011d36 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001ff6:	4b16      	ldr	r3, [pc, #88]	@ (8002050 <MX_DAC2_Init+0x6c>)
 8001ff8:	4a16      	ldr	r2, [pc, #88]	@ (8002054 <MX_DAC2_Init+0x70>)
 8001ffa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001ffc:	4814      	ldr	r0, [pc, #80]	@ (8002050 <MX_DAC2_Init+0x6c>)
 8001ffe:	f004 fa84 	bl	800650a <HAL_DAC_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8002008:	f001 fd30 	bl	8003a6c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800200c:	2302      	movs	r3, #2
 800200e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002028:	2301      	movs	r3, #1
 800202a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002030:	463b      	mov	r3, r7
 8002032:	2200      	movs	r2, #0
 8002034:	4619      	mov	r1, r3
 8002036:	4806      	ldr	r0, [pc, #24]	@ (8002050 <MX_DAC2_Init+0x6c>)
 8002038:	f004 fb84 	bl	8006744 <HAL_DAC_ConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8002042:	f001 fd13 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	3730      	adds	r7, #48	@ 0x30
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200006c0 	.word	0x200006c0
 8002054:	50000c00 	.word	0x50000c00

08002058 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b098      	sub	sp, #96	@ 0x60
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800206a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	611a      	str	r2, [r3, #16]
 800207a:	615a      	str	r2, [r3, #20]
 800207c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2234      	movs	r2, #52	@ 0x34
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f00f fe56 	bl	8011d36 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800208a:	4b3e      	ldr	r3, [pc, #248]	@ (8002184 <MX_TIM1_Init+0x12c>)
 800208c:	4a3e      	ldr	r2, [pc, #248]	@ (8002188 <MX_TIM1_Init+0x130>)
 800208e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002090:	4b3c      	ldr	r3, [pc, #240]	@ (8002184 <MX_TIM1_Init+0x12c>)
 8002092:	2200      	movs	r2, #0
 8002094:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002096:	4b3b      	ldr	r3, [pc, #236]	@ (8002184 <MX_TIM1_Init+0x12c>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210;
 800209c:	4b39      	ldr	r3, [pc, #228]	@ (8002184 <MX_TIM1_Init+0x12c>)
 800209e:	22d2      	movs	r2, #210	@ 0xd2
 80020a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a2:	4b38      	ldr	r3, [pc, #224]	@ (8002184 <MX_TIM1_Init+0x12c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020a8:	4b36      	ldr	r3, [pc, #216]	@ (8002184 <MX_TIM1_Init+0x12c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ae:	4b35      	ldr	r3, [pc, #212]	@ (8002184 <MX_TIM1_Init+0x12c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020b4:	4833      	ldr	r0, [pc, #204]	@ (8002184 <MX_TIM1_Init+0x12c>)
 80020b6:	f008 f81a 	bl	800a0ee <HAL_TIM_PWM_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80020c0:	f001 fcd4 	bl	8003a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020c8:	2300      	movs	r3, #0
 80020ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020d4:	4619      	mov	r1, r3
 80020d6:	482b      	ldr	r0, [pc, #172]	@ (8002184 <MX_TIM1_Init+0x12c>)
 80020d8:	f009 f9b4 	bl	800b444 <HAL_TIMEx_MasterConfigSynchronization>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80020e2:	f001 fcc3 	bl	8003a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020e6:	2360      	movs	r3, #96	@ 0x60
 80020e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ee:	2300      	movs	r3, #0
 80020f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020f2:	2300      	movs	r3, #0
 80020f4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002102:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002106:	2200      	movs	r2, #0
 8002108:	4619      	mov	r1, r3
 800210a:	481e      	ldr	r0, [pc, #120]	@ (8002184 <MX_TIM1_Init+0x12c>)
 800210c:	f008 faa8 	bl	800a660 <HAL_TIM_PWM_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002116:	f001 fca9 	bl	8003a6c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 800211a:	4b1a      	ldr	r3, [pc, #104]	@ (8002184 <MX_TIM1_Init+0x12c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699a      	ldr	r2, [r3, #24]
 8002120:	4b18      	ldr	r3, [pc, #96]	@ (8002184 <MX_TIM1_Init+0x12c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0208 	bic.w	r2, r2, #8
 8002128:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800213e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002142:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002148:	2300      	movs	r3, #0
 800214a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002150:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002154:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800215a:	2300      	movs	r3, #0
 800215c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	4619      	mov	r1, r3
 8002166:	4807      	ldr	r0, [pc, #28]	@ (8002184 <MX_TIM1_Init+0x12c>)
 8002168:	f009 fa02 	bl	800b570 <HAL_TIMEx_ConfigBreakDeadTime>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8002172:	f001 fc7b 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002176:	4803      	ldr	r0, [pc, #12]	@ (8002184 <MX_TIM1_Init+0x12c>)
 8002178:	f002 f818 	bl	80041ac <HAL_TIM_MspPostInit>

}
 800217c:	bf00      	nop
 800217e:	3760      	adds	r7, #96	@ 0x60
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000794 	.word	0x20000794
 8002188:	40012c00 	.word	0x40012c00

0800218c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	@ 0x38
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002192:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	f107 031c 	add.w	r3, r7, #28
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ac:	463b      	mov	r3, r7
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
 80021b8:	611a      	str	r2, [r3, #16]
 80021ba:	615a      	str	r2, [r3, #20]
 80021bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021be:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <MX_TIM4_Init+0xe8>)
 80021c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002278 <MX_TIM4_Init+0xec>)
 80021c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002274 <MX_TIM4_Init+0xe8>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002274 <MX_TIM4_Init+0xe8>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 679;
 80021d0:	4b28      	ldr	r3, [pc, #160]	@ (8002274 <MX_TIM4_Init+0xe8>)
 80021d2:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80021d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d8:	4b26      	ldr	r3, [pc, #152]	@ (8002274 <MX_TIM4_Init+0xe8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021de:	4b25      	ldr	r3, [pc, #148]	@ (8002274 <MX_TIM4_Init+0xe8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021e4:	4823      	ldr	r0, [pc, #140]	@ (8002274 <MX_TIM4_Init+0xe8>)
 80021e6:	f007 fe13 	bl	8009e10 <HAL_TIM_Base_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80021f0:	f001 fc3c 	bl	8003a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021fe:	4619      	mov	r1, r3
 8002200:	481c      	ldr	r0, [pc, #112]	@ (8002274 <MX_TIM4_Init+0xe8>)
 8002202:	f008 fb41 	bl	800a888 <HAL_TIM_ConfigClockSource>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800220c:	f001 fc2e 	bl	8003a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002210:	4818      	ldr	r0, [pc, #96]	@ (8002274 <MX_TIM4_Init+0xe8>)
 8002212:	f007 ff6c 	bl	800a0ee <HAL_TIM_PWM_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800221c:	f001 fc26 	bl	8003a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002228:	f107 031c 	add.w	r3, r7, #28
 800222c:	4619      	mov	r1, r3
 800222e:	4811      	ldr	r0, [pc, #68]	@ (8002274 <MX_TIM4_Init+0xe8>)
 8002230:	f009 f908 	bl	800b444 <HAL_TIMEx_MasterConfigSynchronization>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800223a:	f001 fc17 	bl	8003a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800223e:	2360      	movs	r3, #96	@ 0x60
 8002240:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800224e:	463b      	mov	r3, r7
 8002250:	2200      	movs	r2, #0
 8002252:	4619      	mov	r1, r3
 8002254:	4807      	ldr	r0, [pc, #28]	@ (8002274 <MX_TIM4_Init+0xe8>)
 8002256:	f008 fa03 	bl	800a660 <HAL_TIM_PWM_ConfigChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002260:	f001 fc04 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002264:	4803      	ldr	r0, [pc, #12]	@ (8002274 <MX_TIM4_Init+0xe8>)
 8002266:	f001 ffa1 	bl	80041ac <HAL_TIM_MspPostInit>

}
 800226a:	bf00      	nop
 800226c:	3738      	adds	r7, #56	@ 0x38
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200007e0 	.word	0x200007e0
 8002278:	40000800 	.word	0x40000800

0800227c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800228c:	4b19      	ldr	r3, [pc, #100]	@ (80022f4 <MX_TIM6_Init+0x78>)
 800228e:	4a1a      	ldr	r2, [pc, #104]	@ (80022f8 <MX_TIM6_Init+0x7c>)
 8002290:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11549;
 8002292:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <MX_TIM6_Init+0x78>)
 8002294:	f642 521d 	movw	r2, #11549	@ 0x2d1d
 8002298:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229a:	4b16      	ldr	r3, [pc, #88]	@ (80022f4 <MX_TIM6_Init+0x78>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64934;
 80022a0:	4b14      	ldr	r3, [pc, #80]	@ (80022f4 <MX_TIM6_Init+0x78>)
 80022a2:	f64f 52a6 	movw	r2, #64934	@ 0xfda6
 80022a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <MX_TIM6_Init+0x78>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022ae:	4811      	ldr	r0, [pc, #68]	@ (80022f4 <MX_TIM6_Init+0x78>)
 80022b0:	f007 fdae 	bl	8009e10 <HAL_TIM_Base_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80022ba:	f001 fbd7 	bl	8003a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	4619      	mov	r1, r3
 80022ca:	480a      	ldr	r0, [pc, #40]	@ (80022f4 <MX_TIM6_Init+0x78>)
 80022cc:	f009 f8ba 	bl	800b444 <HAL_TIMEx_MasterConfigSynchronization>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80022d6:	f001 fbc9 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2036      	movs	r0, #54	@ 0x36
 80022e0:	f004 f8df 	bl	80064a2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022e4:	2036      	movs	r0, #54	@ 0x36
 80022e6:	f004 f8f6 	bl	80064d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000082c 	.word	0x2000082c
 80022f8:	40001000 	.word	0x40001000

080022fc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800230c:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <MX_TIM7_Init+0x64>)
 800230e:	4a15      	ldr	r2, [pc, #84]	@ (8002364 <MX_TIM7_Init+0x68>)
 8002310:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 14999;
 8002312:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <MX_TIM7_Init+0x64>)
 8002314:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002318:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231a:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <MX_TIM7_Init+0x64>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002320:	4b0f      	ldr	r3, [pc, #60]	@ (8002360 <MX_TIM7_Init+0x64>)
 8002322:	2209      	movs	r2, #9
 8002324:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002326:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <MX_TIM7_Init+0x64>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800232c:	480c      	ldr	r0, [pc, #48]	@ (8002360 <MX_TIM7_Init+0x64>)
 800232e:	f007 fd6f 	bl	8009e10 <HAL_TIM_Base_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002338:	f001 fb98 	bl	8003a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800233c:	2300      	movs	r3, #0
 800233e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	4619      	mov	r1, r3
 8002348:	4805      	ldr	r0, [pc, #20]	@ (8002360 <MX_TIM7_Init+0x64>)
 800234a:	f009 f87b 	bl	800b444 <HAL_TIMEx_MasterConfigSynchronization>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002354:	f001 fb8a 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000878 	.word	0x20000878
 8002364:	40001400 	.word	0x40001400

08002368 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b098      	sub	sp, #96	@ 0x60
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800237a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	615a      	str	r2, [r3, #20]
 800238c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	2234      	movs	r2, #52	@ 0x34
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f00f fcce 	bl	8011d36 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800239a:	4b3e      	ldr	r3, [pc, #248]	@ (8002494 <MX_TIM8_Init+0x12c>)
 800239c:	4a3e      	ldr	r2, [pc, #248]	@ (8002498 <MX_TIM8_Init+0x130>)
 800239e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80023a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002494 <MX_TIM8_Init+0x12c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002494 <MX_TIM8_Init+0x12c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 80023ac:	4b39      	ldr	r3, [pc, #228]	@ (8002494 <MX_TIM8_Init+0x12c>)
 80023ae:	22d2      	movs	r2, #210	@ 0xd2
 80023b0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b2:	4b38      	ldr	r3, [pc, #224]	@ (8002494 <MX_TIM8_Init+0x12c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80023b8:	4b36      	ldr	r3, [pc, #216]	@ (8002494 <MX_TIM8_Init+0x12c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023be:	4b35      	ldr	r3, [pc, #212]	@ (8002494 <MX_TIM8_Init+0x12c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80023c4:	4833      	ldr	r0, [pc, #204]	@ (8002494 <MX_TIM8_Init+0x12c>)
 80023c6:	f007 fe92 	bl	800a0ee <HAL_TIM_PWM_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80023d0:	f001 fb4c 	bl	8003a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d4:	2300      	movs	r3, #0
 80023d6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023d8:	2300      	movs	r3, #0
 80023da:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023e4:	4619      	mov	r1, r3
 80023e6:	482b      	ldr	r0, [pc, #172]	@ (8002494 <MX_TIM8_Init+0x12c>)
 80023e8:	f009 f82c 	bl	800b444 <HAL_TIMEx_MasterConfigSynchronization>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80023f2:	f001 fb3b 	bl	8003a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023f6:	2360      	movs	r3, #96	@ 0x60
 80023f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023fe:	2300      	movs	r3, #0
 8002400:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002402:	2300      	movs	r3, #0
 8002404:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002412:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002416:	2204      	movs	r2, #4
 8002418:	4619      	mov	r1, r3
 800241a:	481e      	ldr	r0, [pc, #120]	@ (8002494 <MX_TIM8_Init+0x12c>)
 800241c:	f008 f920 	bl	800a660 <HAL_TIM_PWM_ConfigChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8002426:	f001 fb21 	bl	8003a6c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_2);
 800242a:	4b1a      	ldr	r3, [pc, #104]	@ (8002494 <MX_TIM8_Init+0x12c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	4b18      	ldr	r3, [pc, #96]	@ (8002494 <MX_TIM8_Init+0x12c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002438:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800243e:	2300      	movs	r3, #0
 8002440:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800244e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002452:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002458:	2300      	movs	r3, #0
 800245a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002460:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002464:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800246a:	2300      	movs	r3, #0
 800246c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	4619      	mov	r1, r3
 8002476:	4807      	ldr	r0, [pc, #28]	@ (8002494 <MX_TIM8_Init+0x12c>)
 8002478:	f009 f87a 	bl	800b570 <HAL_TIMEx_ConfigBreakDeadTime>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 8002482:	f001 faf3 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002486:	4803      	ldr	r0, [pc, #12]	@ (8002494 <MX_TIM8_Init+0x12c>)
 8002488:	f001 fe90 	bl	80041ac <HAL_TIM_MspPostInit>

}
 800248c:	bf00      	nop
 800248e:	3760      	adds	r7, #96	@ 0x60
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	200008c4 	.word	0x200008c4
 8002498:	40013400 	.word	0x40013400

0800249c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024a2:	f107 0310 	add.w	r3, r7, #16
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80024ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002538 <MX_TIM15_Init+0x9c>)
 80024bc:	4a1f      	ldr	r2, [pc, #124]	@ (800253c <MX_TIM15_Init+0xa0>)
 80024be:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1499;
 80024c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002538 <MX_TIM15_Init+0x9c>)
 80024c2:	f240 52db 	movw	r2, #1499	@ 0x5db
 80024c6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002538 <MX_TIM15_Init+0x9c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4;
 80024ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002538 <MX_TIM15_Init+0x9c>)
 80024d0:	2204      	movs	r2, #4
 80024d2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d4:	4b18      	ldr	r3, [pc, #96]	@ (8002538 <MX_TIM15_Init+0x9c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80024da:	4b17      	ldr	r3, [pc, #92]	@ (8002538 <MX_TIM15_Init+0x9c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e0:	4b15      	ldr	r3, [pc, #84]	@ (8002538 <MX_TIM15_Init+0x9c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80024e6:	4814      	ldr	r0, [pc, #80]	@ (8002538 <MX_TIM15_Init+0x9c>)
 80024e8:	f007 fc92 	bl	8009e10 <HAL_TIM_Base_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80024f2:	f001 fabb 	bl	8003a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	4619      	mov	r1, r3
 8002502:	480d      	ldr	r0, [pc, #52]	@ (8002538 <MX_TIM15_Init+0x9c>)
 8002504:	f008 f9c0 	bl	800a888 <HAL_TIM_ConfigClockSource>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800250e:	f001 faad 	bl	8003a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	4619      	mov	r1, r3
 800251e:	4806      	ldr	r0, [pc, #24]	@ (8002538 <MX_TIM15_Init+0x9c>)
 8002520:	f008 ff90 	bl	800b444 <HAL_TIMEx_MasterConfigSynchronization>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800252a:	f001 fa9f 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800252e:	bf00      	nop
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000910 	.word	0x20000910
 800253c:	40014000 	.word	0x40014000

08002540 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002544:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <MX_TIM16_Init+0x44>)
 8002546:	4a10      	ldr	r2, [pc, #64]	@ (8002588 <MX_TIM16_Init+0x48>)
 8002548:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 14999;
 800254a:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <MX_TIM16_Init+0x44>)
 800254c:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002550:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002552:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <MX_TIM16_Init+0x44>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8002558:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <MX_TIM16_Init+0x44>)
 800255a:	2209      	movs	r2, #9
 800255c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <MX_TIM16_Init+0x44>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002564:	4b07      	ldr	r3, [pc, #28]	@ (8002584 <MX_TIM16_Init+0x44>)
 8002566:	2200      	movs	r2, #0
 8002568:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <MX_TIM16_Init+0x44>)
 800256c:	2200      	movs	r2, #0
 800256e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002570:	4804      	ldr	r0, [pc, #16]	@ (8002584 <MX_TIM16_Init+0x44>)
 8002572:	f007 fc4d 	bl	8009e10 <HAL_TIM_Base_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800257c:	f001 fa76 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000095c 	.word	0x2000095c
 8002588:	40014400 	.word	0x40014400

0800258c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002590:	4b22      	ldr	r3, [pc, #136]	@ (800261c <MX_UART4_Init+0x90>)
 8002592:	4a23      	ldr	r2, [pc, #140]	@ (8002620 <MX_UART4_Init+0x94>)
 8002594:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002596:	4b21      	ldr	r3, [pc, #132]	@ (800261c <MX_UART4_Init+0x90>)
 8002598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800259c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800259e:	4b1f      	ldr	r3, [pc, #124]	@ (800261c <MX_UART4_Init+0x90>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80025a4:	4b1d      	ldr	r3, [pc, #116]	@ (800261c <MX_UART4_Init+0x90>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80025aa:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <MX_UART4_Init+0x90>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <MX_UART4_Init+0x90>)
 80025b2:	220c      	movs	r2, #12
 80025b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b6:	4b19      	ldr	r3, [pc, #100]	@ (800261c <MX_UART4_Init+0x90>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80025bc:	4b17      	ldr	r3, [pc, #92]	@ (800261c <MX_UART4_Init+0x90>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025c2:	4b16      	ldr	r3, [pc, #88]	@ (800261c <MX_UART4_Init+0x90>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025c8:	4b14      	ldr	r3, [pc, #80]	@ (800261c <MX_UART4_Init+0x90>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ce:	4b13      	ldr	r3, [pc, #76]	@ (800261c <MX_UART4_Init+0x90>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80025d4:	4811      	ldr	r0, [pc, #68]	@ (800261c <MX_UART4_Init+0x90>)
 80025d6:	f009 f8a5 	bl	800b724 <HAL_UART_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80025e0:	f001 fa44 	bl	8003a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025e4:	2100      	movs	r1, #0
 80025e6:	480d      	ldr	r0, [pc, #52]	@ (800261c <MX_UART4_Init+0x90>)
 80025e8:	f009 fe40 	bl	800c26c <HAL_UARTEx_SetTxFifoThreshold>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80025f2:	f001 fa3b 	bl	8003a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025f6:	2100      	movs	r1, #0
 80025f8:	4808      	ldr	r0, [pc, #32]	@ (800261c <MX_UART4_Init+0x90>)
 80025fa:	f009 fe75 	bl	800c2e8 <HAL_UARTEx_SetRxFifoThreshold>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002604:	f001 fa32 	bl	8003a6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002608:	4804      	ldr	r0, [pc, #16]	@ (800261c <MX_UART4_Init+0x90>)
 800260a:	f009 fdf6 	bl	800c1fa <HAL_UARTEx_DisableFifoMode>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002614:	f001 fa2a 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200009a8 	.word	0x200009a8
 8002620:	40004c00 	.word	0x40004c00

08002624 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800262a:	4b22      	ldr	r3, [pc, #136]	@ (80026b4 <MX_DMA_Init+0x90>)
 800262c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800262e:	4a21      	ldr	r2, [pc, #132]	@ (80026b4 <MX_DMA_Init+0x90>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	6493      	str	r3, [r2, #72]	@ 0x48
 8002636:	4b1f      	ldr	r3, [pc, #124]	@ (80026b4 <MX_DMA_Init+0x90>)
 8002638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002642:	4b1c      	ldr	r3, [pc, #112]	@ (80026b4 <MX_DMA_Init+0x90>)
 8002644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002646:	4a1b      	ldr	r2, [pc, #108]	@ (80026b4 <MX_DMA_Init+0x90>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6493      	str	r3, [r2, #72]	@ 0x48
 800264e:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <MX_DMA_Init+0x90>)
 8002650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	200b      	movs	r0, #11
 8002660:	f003 ff1f 	bl	80064a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002664:	200b      	movs	r0, #11
 8002666:	f003 ff36 	bl	80064d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	200c      	movs	r0, #12
 8002670:	f003 ff17 	bl	80064a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002674:	200c      	movs	r0, #12
 8002676:	f003 ff2e 	bl	80064d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	200d      	movs	r0, #13
 8002680:	f003 ff0f 	bl	80064a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002684:	200d      	movs	r0, #13
 8002686:	f003 ff26 	bl	80064d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	200e      	movs	r0, #14
 8002690:	f003 ff07 	bl	80064a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002694:	200e      	movs	r0, #14
 8002696:	f003 ff1e 	bl	80064d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	200f      	movs	r0, #15
 80026a0:	f003 feff 	bl	80064a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80026a4:	200f      	movs	r0, #15
 80026a6:	f003 ff16 	bl	80064d6 <HAL_NVIC_EnableIRQ>

}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000

080026b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08c      	sub	sp, #48	@ 0x30
 80026bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026be:	f107 031c 	add.w	r3, r7, #28
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
 80026cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026ce:	4b9a      	ldr	r3, [pc, #616]	@ (8002938 <MX_GPIO_Init+0x280>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d2:	4a99      	ldr	r2, [pc, #612]	@ (8002938 <MX_GPIO_Init+0x280>)
 80026d4:	f043 0310 	orr.w	r3, r3, #16
 80026d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026da:	4b97      	ldr	r3, [pc, #604]	@ (8002938 <MX_GPIO_Init+0x280>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e6:	4b94      	ldr	r3, [pc, #592]	@ (8002938 <MX_GPIO_Init+0x280>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ea:	4a93      	ldr	r2, [pc, #588]	@ (8002938 <MX_GPIO_Init+0x280>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026f2:	4b91      	ldr	r3, [pc, #580]	@ (8002938 <MX_GPIO_Init+0x280>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026fe:	4b8e      	ldr	r3, [pc, #568]	@ (8002938 <MX_GPIO_Init+0x280>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	4a8d      	ldr	r2, [pc, #564]	@ (8002938 <MX_GPIO_Init+0x280>)
 8002704:	f043 0320 	orr.w	r3, r3, #32
 8002708:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800270a:	4b8b      	ldr	r3, [pc, #556]	@ (8002938 <MX_GPIO_Init+0x280>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002716:	4b88      	ldr	r3, [pc, #544]	@ (8002938 <MX_GPIO_Init+0x280>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271a:	4a87      	ldr	r2, [pc, #540]	@ (8002938 <MX_GPIO_Init+0x280>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002722:	4b85      	ldr	r3, [pc, #532]	@ (8002938 <MX_GPIO_Init+0x280>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800272e:	4b82      	ldr	r3, [pc, #520]	@ (8002938 <MX_GPIO_Init+0x280>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002732:	4a81      	ldr	r2, [pc, #516]	@ (8002938 <MX_GPIO_Init+0x280>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800273a:	4b7f      	ldr	r3, [pc, #508]	@ (8002938 <MX_GPIO_Init+0x280>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002746:	4b7c      	ldr	r3, [pc, #496]	@ (8002938 <MX_GPIO_Init+0x280>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274a:	4a7b      	ldr	r2, [pc, #492]	@ (8002938 <MX_GPIO_Init+0x280>)
 800274c:	f043 0308 	orr.w	r3, r3, #8
 8002750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002752:	4b79      	ldr	r3, [pc, #484]	@ (8002938 <MX_GPIO_Init+0x280>)
 8002754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 800275e:	2200      	movs	r2, #0
 8002760:	2120      	movs	r1, #32
 8002762:	4876      	ldr	r0, [pc, #472]	@ (800293c <MX_GPIO_Init+0x284>)
 8002764:	f004 fdbc 	bl	80072e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
 8002768:	2201      	movs	r2, #1
 800276a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800276e:	4874      	ldr	r0, [pc, #464]	@ (8002940 <MX_GPIO_Init+0x288>)
 8002770:	f004 fdb6 	bl	80072e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, GPIO_PIN_RESET);
 8002774:	2200      	movs	r2, #0
 8002776:	2104      	movs	r1, #4
 8002778:	4871      	ldr	r0, [pc, #452]	@ (8002940 <MX_GPIO_Init+0x288>)
 800277a:	f004 fdb1 	bl	80072e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 800277e:	2200      	movs	r2, #0
 8002780:	2120      	movs	r1, #32
 8002782:	4870      	ldr	r0, [pc, #448]	@ (8002944 <MX_GPIO_Init+0x28c>)
 8002784:	f004 fdac 	bl	80072e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_RST_2_Pin|CS_OCD_1_Pin, GPIO_PIN_SET);
 8002788:	2201      	movs	r2, #1
 800278a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800278e:	486b      	ldr	r0, [pc, #428]	@ (800293c <MX_GPIO_Init+0x284>)
 8002790:	f004 fda6 	bl	80072e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port, NOT_RST_4_Pin, GPIO_PIN_SET);
 8002794:	2201      	movs	r2, #1
 8002796:	2140      	movs	r1, #64	@ 0x40
 8002798:	486a      	ldr	r0, [pc, #424]	@ (8002944 <MX_GPIO_Init+0x28c>)
 800279a:	f004 fda1 	bl	80072e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port, NOT_RST_3_Pin, GPIO_PIN_SET);
 800279e:	2201      	movs	r2, #1
 80027a0:	2101      	movs	r1, #1
 80027a2:	4869      	ldr	r0, [pc, #420]	@ (8002948 <MX_GPIO_Init+0x290>)
 80027a4:	f004 fd9c 	bl	80072e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port, NOT_RST_1_Pin, GPIO_PIN_SET);
 80027a8:	2201      	movs	r2, #1
 80027aa:	2180      	movs	r1, #128	@ 0x80
 80027ac:	4867      	ldr	r0, [pc, #412]	@ (800294c <MX_GPIO_Init+0x294>)
 80027ae:	f004 fd97 	bl	80072e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NOT_FAULT_1_Pin CS_FAULT_2_Pin NOT_FAULT_2_Pin CS_FAULT_1_Pin */
  GPIO_InitStruct.Pin = NOT_FAULT_1_Pin|CS_FAULT_2_Pin|NOT_FAULT_2_Pin|CS_FAULT_1_Pin;
 80027b2:	f640 0315 	movw	r3, #2069	@ 0x815
 80027b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b8:	2300      	movs	r3, #0
 80027ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027c0:	f107 031c 	add.w	r3, r7, #28
 80027c4:	4619      	mov	r1, r3
 80027c6:	485d      	ldr	r0, [pc, #372]	@ (800293c <MX_GPIO_Init+0x284>)
 80027c8:	f004 fbf0 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_INTERLOCK_Pin */
  GPIO_InitStruct.Pin = RESET_INTERLOCK_Pin;
 80027cc:	2320      	movs	r3, #32
 80027ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d0:	2301      	movs	r3, #1
 80027d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 80027dc:	f107 031c 	add.w	r3, r7, #28
 80027e0:	4619      	mov	r1, r3
 80027e2:	4856      	ldr	r0, [pc, #344]	@ (800293c <MX_GPIO_Init+0x284>)
 80027e4:	f004 fbe2 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_OCD_2_Pin */
  GPIO_InitStruct.Pin = CS_OCD_2_Pin;
 80027e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80027ee:	2311      	movs	r3, #17
 80027f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_OCD_2_GPIO_Port, &GPIO_InitStruct);
 80027fa:	f107 031c 	add.w	r3, r7, #28
 80027fe:	4619      	mov	r1, r3
 8002800:	484f      	ldr	r0, [pc, #316]	@ (8002940 <MX_GPIO_Init+0x288>)
 8002802:	f004 fbd3 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_3_Pin */
  GPIO_InitStruct.Pin = READY_3_Pin;
 8002806:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800280a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_3_GPIO_Port, &GPIO_InitStruct);
 8002814:	f107 031c 	add.w	r3, r7, #28
 8002818:	4619      	mov	r1, r3
 800281a:	4849      	ldr	r0, [pc, #292]	@ (8002940 <MX_GPIO_Init+0x288>)
 800281c:	f004 fbc6 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERLOCK_Pin NOT_FAULT_4_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin|NOT_FAULT_4_Pin;
 8002820:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002826:	2300      	movs	r3, #0
 8002828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282e:	f107 031c 	add.w	r3, r7, #28
 8002832:	4619      	mov	r1, r3
 8002834:	4843      	ldr	r0, [pc, #268]	@ (8002944 <MX_GPIO_Init+0x28c>)
 8002836:	f004 fbb9 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_FPGA_Pin */
  GPIO_InitStruct.Pin = RESET_FPGA_Pin;
 800283a:	2304      	movs	r3, #4
 800283c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283e:	2301      	movs	r3, #1
 8002840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_FPGA_GPIO_Port, &GPIO_InitStruct);
 800284a:	f107 031c 	add.w	r3, r7, #28
 800284e:	4619      	mov	r1, r3
 8002850:	483b      	ldr	r0, [pc, #236]	@ (8002940 <MX_GPIO_Init+0x288>)
 8002852:	f004 fbab 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pin : START_STOP_FPGA_Pin */
  GPIO_InitStruct.Pin = START_STOP_FPGA_Pin;
 8002856:	2320      	movs	r3, #32
 8002858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285a:	2301      	movs	r3, #1
 800285c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(START_STOP_FPGA_GPIO_Port, &GPIO_InitStruct);
 8002866:	f107 031c 	add.w	r3, r7, #28
 800286a:	4619      	mov	r1, r3
 800286c:	4835      	ldr	r0, [pc, #212]	@ (8002944 <MX_GPIO_Init+0x28c>)
 800286e:	f004 fb9d 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_2_Pin */
  GPIO_InitStruct.Pin = READY_2_Pin;
 8002872:	2301      	movs	r3, #1
 8002874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002876:	2300      	movs	r3, #0
 8002878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_2_GPIO_Port, &GPIO_InitStruct);
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	4619      	mov	r1, r3
 8002884:	4831      	ldr	r0, [pc, #196]	@ (800294c <MX_GPIO_Init+0x294>)
 8002886:	f004 fb91 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pins : NOT_RST_2_Pin CS_OCD_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_2_Pin|CS_OCD_1_Pin;
 800288a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800288e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002890:	2311      	movs	r3, #17
 8002892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	2300      	movs	r3, #0
 800289a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800289c:	f107 031c 	add.w	r3, r7, #28
 80028a0:	4619      	mov	r1, r3
 80028a2:	4826      	ldr	r0, [pc, #152]	@ (800293c <MX_GPIO_Init+0x284>)
 80028a4:	f004 fb82 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_4_Pin */
  GPIO_InitStruct.Pin = NOT_RST_4_Pin;
 80028a8:	2340      	movs	r3, #64	@ 0x40
 80028aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028ac:	2311      	movs	r3, #17
 80028ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_4_GPIO_Port, &GPIO_InitStruct);
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	4619      	mov	r1, r3
 80028be:	4821      	ldr	r0, [pc, #132]	@ (8002944 <MX_GPIO_Init+0x28c>)
 80028c0:	f004 fb74 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_4_Pin */
  GPIO_InitStruct.Pin = READY_4_Pin;
 80028c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_4_GPIO_Port, &GPIO_InitStruct);
 80028d2:	f107 031c 	add.w	r3, r7, #28
 80028d6:	4619      	mov	r1, r3
 80028d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028dc:	f004 fb66 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_3_Pin */
  GPIO_InitStruct.Pin = NOT_RST_3_Pin;
 80028e0:	2301      	movs	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028e4:	2311      	movs	r3, #17
 80028e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_3_GPIO_Port, &GPIO_InitStruct);
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	4619      	mov	r1, r3
 80028f6:	4814      	ldr	r0, [pc, #80]	@ (8002948 <MX_GPIO_Init+0x290>)
 80028f8:	f004 fb58 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_1_Pin PD5 NOT_FAULT_3_Pin */
  GPIO_InitStruct.Pin = READY_1_Pin|GPIO_PIN_5|NOT_FAULT_3_Pin;
 80028fc:	2370      	movs	r3, #112	@ 0x70
 80028fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	4619      	mov	r1, r3
 800290e:	480e      	ldr	r0, [pc, #56]	@ (8002948 <MX_GPIO_Init+0x290>)
 8002910:	f004 fb4c 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_1_Pin;
 8002914:	2380      	movs	r3, #128	@ 0x80
 8002916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002918:	2311      	movs	r3, #17
 800291a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002920:	2300      	movs	r3, #0
 8002922:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_1_GPIO_Port, &GPIO_InitStruct);
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	4619      	mov	r1, r3
 800292a:	4808      	ldr	r0, [pc, #32]	@ (800294c <MX_GPIO_Init+0x294>)
 800292c:	f004 fb3e 	bl	8006fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002930:	bf00      	nop
 8002932:	3730      	adds	r7, #48	@ 0x30
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	48001000 	.word	0x48001000
 8002940:	48001400 	.word	0x48001400
 8002944:	48000800 	.word	0x48000800
 8002948:	48000c00 	.word	0x48000c00
 800294c:	48000400 	.word	0x48000400

08002950 <handle_event>:

/* USER CODE BEGIN 4 */

ConverterState handle_event(ConverterState currentState, ConverterEvent event) {
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	460a      	mov	r2, r1
 800295a:	71fb      	strb	r3, [r7, #7]
 800295c:	4613      	mov	r3, r2
 800295e:	71bb      	strb	r3, [r7, #6]
    switch (currentState) {
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d839      	bhi.n	80029da <handle_event+0x8a>
 8002966:	a201      	add	r2, pc, #4	@ (adr r2, 800296c <handle_event+0x1c>)
 8002968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296c:	08002981 	.word	0x08002981
 8002970:	0800298f 	.word	0x0800298f
 8002974:	0800299d 	.word	0x0800299d
 8002978:	080029b9 	.word	0x080029b9
 800297c:	080029c7 	.word	0x080029c7
        case STATE_INIT:
            if (event == EVENT_START)
 8002980:	79bb      	ldrb	r3, [r7, #6]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d12b      	bne.n	80029de <handle_event+0x8e>
            {

            	currentState = STATE_STANDBY;
 8002986:	2301      	movs	r3, #1
 8002988:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 800298a:	2301      	movs	r3, #1
 800298c:	e031      	b.n	80029f2 <handle_event+0xa2>
            }
            break;

        case STATE_STANDBY:
            if (event == EVENT_START)
 800298e:	79bb      	ldrb	r3, [r7, #6]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d126      	bne.n	80029e2 <handle_event+0x92>
            {
            	currentState = STATE_REGULATION;
 8002994:	2302      	movs	r3, #2
 8002996:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 8002998:	2302      	movs	r3, #2
 800299a:	e02a      	b.n	80029f2 <handle_event+0xa2>
            }
            break;

        case STATE_REGULATION:
        	//USB_SendString("State: INIT -> RUNNING\r\n");
            if (event == EVENT_FAULT)
 800299c:	79bb      	ldrb	r3, [r7, #6]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d103      	bne.n	80029aa <handle_event+0x5a>
            {
            	currentState = STATE_FAULT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	71fb      	strb	r3, [r7, #7]
                return STATE_FAULT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e023      	b.n	80029f2 <handle_event+0xa2>

            } else if (event == EVENT_SHUTDOWN)
 80029aa:	79bb      	ldrb	r3, [r7, #6]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d11a      	bne.n	80029e6 <handle_event+0x96>
            {
            	currentState = STATE_SHUTDOWN;
 80029b0:	2304      	movs	r3, #4
 80029b2:	71fb      	strb	r3, [r7, #7]
                return STATE_SHUTDOWN;
 80029b4:	2304      	movs	r3, #4
 80029b6:	e01c      	b.n	80029f2 <handle_event+0xa2>
            }

            break;

        case STATE_FAULT:
            if (event == EVENT_CLEAR_FAULT)
 80029b8:	79bb      	ldrb	r3, [r7, #6]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d115      	bne.n	80029ea <handle_event+0x9a>
            {
            	currentState = STATE_STANDBY;
 80029be:	2301      	movs	r3, #1
 80029c0:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e015      	b.n	80029f2 <handle_event+0xa2>
            }
            break;

        case STATE_SHUTDOWN:
            if (event == EVENT_START)
 80029c6:	79bb      	ldrb	r3, [r7, #6]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d110      	bne.n	80029ee <handle_event+0x9e>
            {
            	once = 0;
 80029cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <handle_event+0xb0>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
            	currentState = STATE_REGULATION;
 80029d2:	2302      	movs	r3, #2
 80029d4:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 80029d6:	2302      	movs	r3, #2
 80029d8:	e00b      	b.n	80029f2 <handle_event+0xa2>
            }
            break;
        default:
            break;
 80029da:	bf00      	nop
 80029dc:	e008      	b.n	80029f0 <handle_event+0xa0>
            break;
 80029de:	bf00      	nop
 80029e0:	e006      	b.n	80029f0 <handle_event+0xa0>
            break;
 80029e2:	bf00      	nop
 80029e4:	e004      	b.n	80029f0 <handle_event+0xa0>
            break;
 80029e6:	bf00      	nop
 80029e8:	e002      	b.n	80029f0 <handle_event+0xa0>
            break;
 80029ea:	bf00      	nop
 80029ec:	e000      	b.n	80029f0 <handle_event+0xa0>
            break;
 80029ee:	bf00      	nop
    }
    return currentState; // No state change
 80029f0:	79fb      	ldrb	r3, [r7, #7]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000b6c 	.word	0x20000b6c

08002a04 <Set_PWM_DutyCycle>:
       // float TEMPERATURE_AFTER_CONVERSION_FROM_ADC = (((adc_value/4096.0f)*3.3f) - 0.4f)/0.0195f;
       // return TEMPERATURE_AFTER_CONVERSION_FROM_ADC;

}

void Set_PWM_DutyCycle(uint32_t dutyCycle) { // dutycyle for FAN SPEED CONTROl
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
    if (dutyCycle > 100) dutyCycle = 100;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b64      	cmp	r3, #100	@ 0x64
 8002a10:	d901      	bls.n	8002a16 <Set_PWM_DutyCycle+0x12>
 8002a12:	2364      	movs	r3, #100	@ 0x64
 8002a14:	607b      	str	r3, [r7, #4]
    uint32_t pulse = (htim4.Init.Period + 1) * dutyCycle / 100 - 1;
 8002a16:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <Set_PWM_DutyCycle+0x40>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	4a09      	ldr	r2, [pc, #36]	@ (8002a48 <Set_PWM_DutyCycle+0x44>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 8002a2e:	4b05      	ldr	r3, [pc, #20]	@ (8002a44 <Set_PWM_DutyCycle+0x40>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	200007e0 	.word	0x200007e0
 8002a48:	51eb851f 	.word	0x51eb851f
 8002a4c:	00000000 	.word	0x00000000

08002a50 <HAL_ADC_ConvCpltCallback>:
//ADC save to array and moving average
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC5)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a20      	ldr	r2, [pc, #128]	@ (8002ae0 <HAL_ADC_ConvCpltCallback+0x90>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d135      	bne.n	8002ace <HAL_ADC_ConvCpltCallback+0x7e>
		    {
		        uint32_t sum = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	e00b      	b.n	8002a84 <HAL_ADC_ConvCpltCallback+0x34>
		        {
		            sum += adc5_dma_buffer[i];
 8002a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae4 <HAL_ADC_ConvCpltCallback+0x94>)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3301      	adds	r3, #1
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b09      	cmp	r3, #9
 8002a88:	ddf0      	ble.n	8002a6c <HAL_ADC_ConvCpltCallback+0x1c>
		        }
		        adc_moving_average = ((sum / MA_WINDOW_SIZE)*3300)/4096;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4a16      	ldr	r2, [pc, #88]	@ (8002ae8 <HAL_ADC_ConvCpltCallback+0x98>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	08db      	lsrs	r3, r3, #3
 8002a94:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	0b1b      	lsrs	r3, r3, #12
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_ADC_ConvCpltCallback+0x9c>)
 8002aa2:	801a      	strh	r2, [r3, #0]
		        imax2_sum=(adc_moving_average-1450)*0.384;
 8002aa4:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <HAL_ADC_ConvCpltCallback+0x9c>)
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	f2a3 53aa 	subw	r3, r3, #1450	@ 0x5aa
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fd fd61 	bl	8000574 <__aeabi_i2d>
 8002ab2:	a309      	add	r3, pc, #36	@ (adr r3, 8002ad8 <HAL_ADC_ConvCpltCallback+0x88>)
 8002ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab8:	f7fd fdc6 	bl	8000648 <__aeabi_dmul>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f7fe f898 	bl	8000bf8 <__aeabi_d2uiz>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4a09      	ldr	r2, [pc, #36]	@ (8002af0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002acc:	6013      	str	r3, [r2, #0]
		        // Restart the DMA transfer
		       // HAL_ADC_Start_DMA(hadc, (uint32_t*)adc5_dma_buffer, MA_WINDOW_SIZE);
		    }


}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	bc6a7efa 	.word	0xbc6a7efa
 8002adc:	3fd89374 	.word	0x3fd89374
 8002ae0:	50000600 	.word	0x50000600
 8002ae4:	20000a80 	.word	0x20000a80
 8002ae8:	cccccccd 	.word	0xcccccccd
 8002aec:	20000a94 	.word	0x20000a94
 8002af0:	20000a7c 	.word	0x20000a7c

08002af4 <Update_PWM_Frequency>:
        }
    }
}

void Update_PWM_Frequency(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	@ 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
	 uint32_t timer_clock = 150000000;  // Assuming a 150 MHz timer clock
 8002b00:	4b33      	ldr	r3, [pc, #204]	@ (8002bd0 <Update_PWM_Frequency+0xdc>)
 8002b02:	61bb      	str	r3, [r7, #24]
	    uint32_t prescaler = htim->Init.Prescaler + 1;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]
	    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	61fb      	str	r3, [r7, #28]

	    // Ensure period is within valid range
	    if (period > 65535) {
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b24:	d314      	bcc.n	8002b50 <Update_PWM_Frequency+0x5c>
	        // Adjust prescaler to bring period within range
	        prescaler = (prescaler * (period / 65536)) + 1;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	fb02 f303 	mul.w	r3, r2, r3
 8002b30:	3301      	adds	r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
	        period = (timer_clock / (prescaler * frequency)) - 1;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	fb02 f303 	mul.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
	        __HAL_TIM_SET_PRESCALER(htim, prescaler - 1);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	3a01      	subs	r2, #1
 8002b4e:	629a      	str	r2, [r3, #40]	@ 0x28
	    }

	    // Update the period register (ARR) with double buffering
	    __HAL_TIM_SET_AUTORELOAD(htim, period);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	60da      	str	r2, [r3, #12]

	    // Set the duty cycle to approximately 50%
	    uint32_t pulse = period / 2;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	613b      	str	r3, [r7, #16]
	    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d104      	bne.n	8002b74 <Update_PWM_Frequency+0x80>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b72:	e023      	b.n	8002bbc <Update_PWM_Frequency+0xc8>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d104      	bne.n	8002b84 <Update_PWM_Frequency+0x90>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	6393      	str	r3, [r2, #56]	@ 0x38
 8002b82:	e01b      	b.n	8002bbc <Update_PWM_Frequency+0xc8>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d104      	bne.n	8002b94 <Update_PWM_Frequency+0xa0>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002b92:	e013      	b.n	8002bbc <Update_PWM_Frequency+0xc8>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d104      	bne.n	8002ba4 <Update_PWM_Frequency+0xb0>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba2:	e00b      	b.n	8002bbc <Update_PWM_Frequency+0xc8>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d104      	bne.n	8002bb4 <Update_PWM_Frequency+0xc0>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	6493      	str	r3, [r2, #72]	@ 0x48
 8002bb2:	e003      	b.n	8002bbc <Update_PWM_Frequency+0xc8>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	64d3      	str	r3, [r2, #76]	@ 0x4c

	    // Manually generate an update event by setting the UG bit in the EGR register
	    htim->Instance->EGR = TIM_EGR_UG;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_AUTORELOAD(htim, period);

    // Restart the timer PWM generation
    HAL_TIM_PWM_Stop(htim, channel);
    HAL_TIM_PWM_Start(htim, channel);*/
}
 8002bc4:	bf00      	nop
 8002bc6:	3724      	adds	r7, #36	@ 0x24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	08f0d180 	.word	0x08f0d180

08002bd4 <Check_Faults>:
	        dac_buffer[i] = (((1/3.3)*res12_b) + ((0.5/3.3)*res12_b) * sin(2 * M_PI * i/BUFFER_SIZE));
	    }
}

uint8_t Check_Faults()
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
	// Faults pins are from gate driver and they are active pull down
	// 4 fault pins from 4 gate driver + 2 fault pins from  2 currents sensors  = 6 pins
	if(HAL_GPIO_ReadPin(CS_FAULT_1_GPIO_Port, CS_FAULT_1_Pin) && HAL_GPIO_ReadPin(CS_FAULT_2_GPIO_Port, CS_FAULT_2_Pin)
 8002bd8:	2101      	movs	r1, #1
 8002bda:	4818      	ldr	r0, [pc, #96]	@ (8002c3c <Check_Faults+0x68>)
 8002bdc:	f004 fb68 	bl	80072b0 <HAL_GPIO_ReadPin>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d026      	beq.n	8002c34 <Check_Faults+0x60>
 8002be6:	2110      	movs	r1, #16
 8002be8:	4814      	ldr	r0, [pc, #80]	@ (8002c3c <Check_Faults+0x68>)
 8002bea:	f004 fb61 	bl	80072b0 <HAL_GPIO_ReadPin>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01f      	beq.n	8002c34 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_1_GPIO_Port, NOT_FAULT_1_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_2_GPIO_Port, NOT_FAULT_2_Pin)
 8002bf4:	2104      	movs	r1, #4
 8002bf6:	4811      	ldr	r0, [pc, #68]	@ (8002c3c <Check_Faults+0x68>)
 8002bf8:	f004 fb5a 	bl	80072b0 <HAL_GPIO_ReadPin>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d018      	beq.n	8002c34 <Check_Faults+0x60>
 8002c02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c06:	480d      	ldr	r0, [pc, #52]	@ (8002c3c <Check_Faults+0x68>)
 8002c08:	f004 fb52 	bl	80072b0 <HAL_GPIO_ReadPin>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d010      	beq.n	8002c34 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_3_GPIO_Port, NOT_FAULT_3_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_4_GPIO_Port, NOT_FAULT_4_Pin) )
 8002c12:	2140      	movs	r1, #64	@ 0x40
 8002c14:	480a      	ldr	r0, [pc, #40]	@ (8002c40 <Check_Faults+0x6c>)
 8002c16:	f004 fb4b 	bl	80072b0 <HAL_GPIO_ReadPin>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d009      	beq.n	8002c34 <Check_Faults+0x60>
 8002c20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c24:	4807      	ldr	r0, [pc, #28]	@ (8002c44 <Check_Faults+0x70>)
 8002c26:	f004 fb43 	bl	80072b0 <HAL_GPIO_ReadPin>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <Check_Faults+0x60>
		return 0; // if all pins is 1 then all is ready, there is not faults then return 0
 8002c30:	2300      	movs	r3, #0
 8002c32:	e000      	b.n	8002c36 <Check_Faults+0x62>

	return 1;
 8002c34:	2301      	movs	r3, #1
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	48001000 	.word	0x48001000
 8002c40:	48000c00 	.word	0x48000c00
 8002c44:	48000800 	.word	0x48000800

08002c48 <Check_Ready>:

uint8_t Check_Ready()
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
	// Ready pins are from gate driver and they are active pull up
	// 4 ready pins from 4 gate drivers
	if(HAL_GPIO_ReadPin(READY_1_GPIO_Port, READY_1_Pin) && HAL_GPIO_ReadPin(READY_2_GPIO_Port, READY_2_Pin)
 8002c4c:	2110      	movs	r1, #16
 8002c4e:	4811      	ldr	r0, [pc, #68]	@ (8002c94 <Check_Ready+0x4c>)
 8002c50:	f004 fb2e 	bl	80072b0 <HAL_GPIO_ReadPin>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d019      	beq.n	8002c8e <Check_Ready+0x46>
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	480e      	ldr	r0, [pc, #56]	@ (8002c98 <Check_Ready+0x50>)
 8002c5e:	f004 fb27 	bl	80072b0 <HAL_GPIO_ReadPin>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d012      	beq.n	8002c8e <Check_Ready+0x46>
			&& HAL_GPIO_ReadPin(READY_3_GPIO_Port, READY_3_Pin) && HAL_GPIO_ReadPin(READY_4_GPIO_Port, READY_4_Pin) )
 8002c68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c6c:	480b      	ldr	r0, [pc, #44]	@ (8002c9c <Check_Ready+0x54>)
 8002c6e:	f004 fb1f 	bl	80072b0 <HAL_GPIO_ReadPin>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <Check_Ready+0x46>
 8002c78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c80:	f004 fb16 	bl	80072b0 <HAL_GPIO_ReadPin>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <Check_Ready+0x46>
			return 1; // return 1 when is gate drivers ready
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <Check_Ready+0x48>

		return 0;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	48000c00 	.word	0x48000c00
 8002c98:	48000400 	.word	0x48000400
 8002c9c:	48001400 	.word	0x48001400

08002ca0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	// SOFT start_program RAMP REALISATION
	//  Ts 20khz
	if(htim->Instance == TIM15)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a6e      	ldr	r2, [pc, #440]	@ (8002e68 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	f040 80b1 	bne.w	8002e16 <HAL_TIM_PeriodElapsedCallback+0x176>
	{
		//sythick1 =  HAL_GetTick();
		if(currentState == STATE_REGULATION )
 8002cb4:	4b6d      	ldr	r3, [pc, #436]	@ (8002e6c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	f040 80a9 	bne.w	8002e10 <HAL_TIM_PeriodElapsedCallback+0x170>
		{
		//current_sensor1_vref = adc3_dma_buffer[0]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[0], pcb_temp)/4096)*3.3;
		//current_sensor2_vref = adc3_dma_buffer[1]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[1], pcb_temp)/4096)*3.3;

		input_voltage = (int)((((adc3_dma_buffer[2])*3300)/4096-200)*18.81);//[mV]		((Low_pass_filter(adc3_dma_buffer[2], input_voltage)/4096)*3.3-0.2)*27.1;
 8002cbe:	4b6c      	ldr	r3, [pc, #432]	@ (8002e70 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002cc0:	889b      	ldrh	r3, [r3, #4]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	da01      	bge.n	8002cd6 <HAL_TIM_PeriodElapsedCallback+0x36>
 8002cd2:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002cd6:	131b      	asrs	r3, r3, #12
 8002cd8:	3bc8      	subs	r3, #200	@ 0xc8
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fc4a 	bl	8000574 <__aeabi_i2d>
 8002ce0:	a35d      	add	r3, pc, #372	@ (adr r3, 8002e58 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f7fd fcaf 	bl	8000648 <__aeabi_dmul>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f7fd ff59 	bl	8000ba8 <__aeabi_d2iz>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b5e      	ldr	r3, [pc, #376]	@ (8002e74 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002cfc:	601a      	str	r2, [r3, #0]
		output_voltage = (int)((((adc4_dma_buffer[1])*3300)/4096-200)*18.81);//[mV] 		((Low_pass_filter(adc4_dma_buffer, output_voltage)/4096)*3.3-0.2)*27.1;
 8002cfe:	4b5e      	ldr	r3, [pc, #376]	@ (8002e78 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002d00:	885b      	ldrh	r3, [r3, #2]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	da01      	bge.n	8002d16 <HAL_TIM_PeriodElapsedCallback+0x76>
 8002d12:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002d16:	131b      	asrs	r3, r3, #12
 8002d18:	3bc8      	subs	r3, #200	@ 0xc8
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd fc2a 	bl	8000574 <__aeabi_i2d>
 8002d20:	a34d      	add	r3, pc, #308	@ (adr r3, 8002e58 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f7fd fc8f 	bl	8000648 <__aeabi_dmul>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4610      	mov	r0, r2
 8002d30:	4619      	mov	r1, r3
 8002d32:	f7fd ff39 	bl	8000ba8 <__aeabi_d2iz>
 8002d36:	4603      	mov	r3, r0
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b50      	ldr	r3, [pc, #320]	@ (8002e7c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002d3c:	601a      	str	r2, [r3, #0]
		if(once == 0) Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, 7100000); // Set TIM8 CH1 o freq that is delay hc and send to fpga
		}

		imax2 = imax1 + imax2_sum; // imax2_sum signal from FPGA
		// imax1,2 each for branches to make 180 degree shift*/
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref+((int)imax1*0.025)); // imax1  1.5V is 0A;  1A is 20mV; 1 bit is 0.8mV; imax[mA]*0.02 [V/A]/0.8[mV] = Value for DAC
 8002d3e:	4b50      	ldr	r3, [pc, #320]	@ (8002e80 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fc16 	bl	8000574 <__aeabi_i2d>
 8002d48:	4604      	mov	r4, r0
 8002d4a:	460d      	mov	r5, r1
 8002d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8002e84 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fc0f 	bl	8000574 <__aeabi_i2d>
 8002d56:	a342      	add	r3, pc, #264	@ (adr r3, 8002e60 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f7fd fc74 	bl	8000648 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4620      	mov	r0, r4
 8002d66:	4629      	mov	r1, r5
 8002d68:	f7fd fab8 	bl	80002dc <__adddf3>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	f7fd ff40 	bl	8000bf8 <__aeabi_d2uiz>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4842      	ldr	r0, [pc, #264]	@ (8002e88 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002d80:	f003 fca8 	bl	80066d4 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, current_sensor2_vref+((int)imax2*0.025)); // imax2
 8002d84:	4b41      	ldr	r3, [pc, #260]	@ (8002e8c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fbf3 	bl	8000574 <__aeabi_i2d>
 8002d8e:	4604      	mov	r4, r0
 8002d90:	460d      	mov	r5, r1
 8002d92:	4b3f      	ldr	r3, [pc, #252]	@ (8002e90 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fbec 	bl	8000574 <__aeabi_i2d>
 8002d9c:	a330      	add	r3, pc, #192	@ (adr r3, 8002e60 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	f7fd fc51 	bl	8000648 <__aeabi_dmul>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4620      	mov	r0, r4
 8002dac:	4629      	mov	r1, r5
 8002dae:	f7fd fa95 	bl	80002dc <__adddf3>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	f7fd ff1d 	bl	8000bf8 <__aeabi_d2uiz>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2110      	movs	r1, #16
 8002dc4:	4830      	ldr	r0, [pc, #192]	@ (8002e88 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002dc6:	f003 fc85 	bl	80066d4 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref-((int)imin*0.25)); // imin uzyto tutaj wzmacniacza 10x dla sygnalu z sensora pradu wiec ma wzmocnienie 200mv/A a nie 20mv/a
 8002dca:	4b2d      	ldr	r3, [pc, #180]	@ (8002e80 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fbd0 	bl	8000574 <__aeabi_i2d>
 8002dd4:	4604      	mov	r4, r0
 8002dd6:	460d      	mov	r5, r1
 8002dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e94 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd fbc9 	bl	8000574 <__aeabi_i2d>
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	4b2c      	ldr	r3, [pc, #176]	@ (8002e98 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002de8:	f7fd fc2e 	bl	8000648 <__aeabi_dmul>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4620      	mov	r0, r4
 8002df2:	4629      	mov	r1, r5
 8002df4:	f7fd fa70 	bl	80002d8 <__aeabi_dsub>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f7fd fefa 	bl	8000bf8 <__aeabi_d2uiz>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2200      	movs	r2, #0
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4824      	ldr	r0, [pc, #144]	@ (8002e9c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002e0c:	f003 fc62 	bl	80066d4 <HAL_DAC_SetValue>
		//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
		//once = 1;
		//}

		//sythick2 =  HAL_GetTick() - sythick1;
		flag_control = 1;
 8002e10:	4b23      	ldr	r3, [pc, #140]	@ (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM6) // 5 sec period
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a22      	ldr	r2, [pc, #136]	@ (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d101      	bne.n	8002e24 <HAL_TIM_PeriodElapsedCallback+0x184>
		    {
		//if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
				//{
				FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
 8002e20:	f000 f9ae 	bl	8003180 <FAN_Drive>
				//}
		    }


	if (htim->Instance == TIM7)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d110      	bne.n	8002e50 <HAL_TIM_PeriodElapsedCallback+0x1b0>
	    {
	        // Turn off OCD pins of currents sensors to reset current sensor 1us

	        HAL_GPIO_TogglePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin);
 8002e2e:	2102      	movs	r1, #2
 8002e30:	481e      	ldr	r0, [pc, #120]	@ (8002eac <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002e32:	f004 fa6d 	bl	8007310 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin);
 8002e36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e3a:	481d      	ldr	r0, [pc, #116]	@ (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002e3c:	f004 fa68 	bl	8007310 <HAL_GPIO_TogglePin>
	        HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002e40:	2200      	movs	r2, #0
 8002e42:	2120      	movs	r1, #32
 8002e44:	4819      	ldr	r0, [pc, #100]	@ (8002eac <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002e46:	f004 fa4b 	bl	80072e0 <HAL_GPIO_WritePin>
	        // Stop the timer
	        HAL_TIM_Base_Stop_IT(&htim7);
 8002e4a:	481a      	ldr	r0, [pc, #104]	@ (8002eb4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002e4c:	f007 f920 	bl	800a090 <HAL_TIM_Base_Stop_IT>
	    }


}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bdb0      	pop	{r4, r5, r7, pc}
 8002e58:	28f5c28f 	.word	0x28f5c28f
 8002e5c:	4032cf5c 	.word	0x4032cf5c
 8002e60:	9999999a 	.word	0x9999999a
 8002e64:	3f999999 	.word	0x3f999999
 8002e68:	40014000 	.word	0x40014000
 8002e6c:	20000b67 	.word	0x20000b67
 8002e70:	20000a58 	.word	0x20000a58
 8002e74:	20000a4c 	.word	0x20000a4c
 8002e78:	20000a6c 	.word	0x20000a6c
 8002e7c:	20000a64 	.word	0x20000a64
 8002e80:	20000a3c 	.word	0x20000a3c
 8002e84:	20000a40 	.word	0x20000a40
 8002e88:	200006ac 	.word	0x200006ac
 8002e8c:	20000a3e 	.word	0x20000a3e
 8002e90:	20000a44 	.word	0x20000a44
 8002e94:	20000a48 	.word	0x20000a48
 8002e98:	3fd00000 	.word	0x3fd00000
 8002e9c:	200006c0 	.word	0x200006c0
 8002ea0:	20000b71 	.word	0x20000b71
 8002ea4:	40001000 	.word	0x40001000
 8002ea8:	40001400 	.word	0x40001400
 8002eac:	48001000 	.word	0x48001000
 8002eb0:	48001400 	.word	0x48001400
 8002eb4:	20000878 	.word	0x20000878

08002eb8 <RAMP>:

void RAMP()
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
	// RAMP Voltage to soft-start
				if((vref-output_vol)>100)
 8002ebc:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <RAMP+0x5c>)
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <RAMP+0x60>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b64      	cmp	r3, #100	@ 0x64
 8002eca:	d913      	bls.n	8002ef4 <RAMP+0x3c>
				{

					Vramp = output_voltage+400000*Ts; // 200mV step per loop period
 8002ecc:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <RAMP+0x64>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd fb3f 	bl	8000554 <__aeabi_ui2d>
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <RAMP+0x68>)
 8002edc:	f7fd f9fe 	bl	80002dc <__adddf3>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f7fd fe86 	bl	8000bf8 <__aeabi_d2uiz>
 8002eec:	4603      	mov	r3, r0
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <RAMP+0x6c>)
 8002ef2:	801a      	strh	r2, [r3, #0]
				}
				//else if((vref-output_voltage)<-100)
				//{
				//	Vramp = output_voltage-4000000*Ts;
				//}
				if(Vramp>=48000)
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <RAMP+0x6c>)
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d906      	bls.n	8002f0e <RAMP+0x56>
				{
					Vramp = 48000; // 48V
 8002f00:	4b08      	ldr	r3, [pc, #32]	@ (8002f24 <RAMP+0x6c>)
 8002f02:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002f06:	801a      	strh	r2, [r3, #0]
					RAMP_FINISHED = 1;
 8002f08:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <RAMP+0x70>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
					//currentState = STATE_REGULATION;
				}


}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000000 	.word	0x20000000
 8002f18:	20000028 	.word	0x20000028
 8002f1c:	20000a64 	.word	0x20000a64
 8002f20:	40340000 	.word	0x40340000
 8002f24:	20000a6a 	.word	0x20000a6a
 8002f28:	20000a70 	.word	0x20000a70

08002f2c <regulatorPI>:

void regulatorPI(uint32_t *out, uint32_t *integral, float in, float in_zad, float limp, float limn, float kp, float ti, float Ts1)
{
 8002f2c:	b5b0      	push	{r4, r5, r7, lr}
 8002f2e:	b08c      	sub	sp, #48	@ 0x30
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6278      	str	r0, [r7, #36]	@ 0x24
 8002f34:	6239      	str	r1, [r7, #32]
 8002f36:	ed87 0a07 	vstr	s0, [r7, #28]
 8002f3a:	edc7 0a06 	vstr	s1, [r7, #24]
 8002f3e:	ed87 1a05 	vstr	s2, [r7, #20]
 8002f42:	edc7 1a04 	vstr	s3, [r7, #16]
 8002f46:	ed87 2a03 	vstr	s4, [r7, #12]
 8002f4a:	edc7 2a02 	vstr	s5, [r7, #8]
 8002f4e:	ed87 3a01 	vstr	s6, [r7, #4]
	// Tustin transfrom of PI regulator s -> 2/T * (Z-1)/(Z+1)
    float delta;
    uint32_t prev_out;
    delta = in_zad - in; // error
 8002f52:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f56:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f5e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    *integral = *integral + (delta + prev_delta) * (kp / ti) * Ts1 * 0.5 ; // I part
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd faf4 	bl	8000554 <__aeabi_ui2d>
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	460d      	mov	r5, r1
 8002f70:	4b5a      	ldr	r3, [pc, #360]	@ (80030dc <regulatorPI+0x1b0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	ee07 3a90 	vmov	s15, r3
 8002f78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f7c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f84:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f88:	edd7 6a02 	vldr	s13, [r7, #8]
 8002f8c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002f90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f94:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9c:	ee17 0a90 	vmov	r0, s15
 8002fa0:	f7fd fafa 	bl	8000598 <__aeabi_f2d>
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80030e0 <regulatorPI+0x1b4>)
 8002faa:	f7fd fb4d 	bl	8000648 <__aeabi_dmul>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	f7fd f991 	bl	80002dc <__adddf3>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f7fd fe19 	bl	8000bf8 <__aeabi_d2uiz>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	601a      	str	r2, [r3, #0]
    prev_delta = delta;
 8002fcc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fd4:	ee17 2a90 	vmov	r2, s15
 8002fd8:	4b40      	ldr	r3, [pc, #256]	@ (80030dc <regulatorPI+0x1b0>)
 8002fda:	601a      	str	r2, [r3, #0]
    prev_out = *out;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (*integral >= limp) // limit peak positive
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	ee07 3a90 	vmov	s15, r3
 8002fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fee:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffa:	d807      	bhi.n	800300c <regulatorPI+0xe0>
    {
        *integral = limp;
 8002ffc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003004:	ee17 2a90 	vmov	r2, s15
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	601a      	str	r2, [r3, #0]
    }
    if (*integral <= limn)// limit peak negative
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	ee07 3a90 	vmov	s15, r3
 8003014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003018:	ed97 7a04 	vldr	s14, [r7, #16]
 800301c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003024:	db07      	blt.n	8003036 <regulatorPI+0x10a>
    {
        *integral = limn;
 8003026:	edd7 7a04 	vldr	s15, [r7, #16]
 800302a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800302e:	ee17 2a90 	vmov	r2, s15
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	601a      	str	r2, [r3, #0]
    }
    *out = (delta * kp + *integral); // Sum of P and I
 8003036:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800303a:	edd7 7a03 	vldr	s15, [r7, #12]
 800303e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003056:	ee17 2a90 	vmov	r2, s15
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305c:	601a      	str	r2, [r3, #0]
    if (*out >= limp) // limit peak positive
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306a:	ed97 7a05 	vldr	s14, [r7, #20]
 800306e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003076:	d807      	bhi.n	8003088 <regulatorPI+0x15c>
    {
        *out = limp;
 8003078:	edd7 7a05 	vldr	s15, [r7, #20]
 800307c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003080:	ee17 2a90 	vmov	r2, s15
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	601a      	str	r2, [r3, #0]
    }
    if (*out <= limn)// limit peak negative
 8003088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003094:	ed97 7a04 	vldr	s14, [r7, #16]
 8003098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800309c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a0:	db07      	blt.n	80030b2 <regulatorPI+0x186>
    {
        *out = limn;
 80030a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80030a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030aa:	ee17 2a90 	vmov	r2, s15
 80030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b0:	601a      	str	r2, [r3, #0]
    }
    if((*out - prev_out) < 50 || (*out - prev_out) > -50) // histeresis to probably prevent jitter
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b31      	cmp	r3, #49	@ 0x31
 80030bc:	d906      	bls.n	80030cc <regulatorPI+0x1a0>
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f113 0f32 	cmn.w	r3, #50	@ 0x32
 80030ca:	d902      	bls.n	80030d2 <regulatorPI+0x1a6>
    {
    	*out = prev_out;
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030d0:	601a      	str	r2, [r3, #0]
    }
}
 80030d2:	bf00      	nop
 80030d4:	3730      	adds	r7, #48	@ 0x30
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bdb0      	pop	{r4, r5, r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000b60 	.word	0x20000b60
 80030e0:	3fe00000 	.word	0x3fe00000
 80030e4:	00000000 	.word	0x00000000

080030e8 <Low_pass_filter>:

	    return y[0];
}*/

float Low_pass_filter(float new_sample, float old_sample, float old_sample_n1, float old_passed)
{
 80030e8:	b5b0      	push	{r4, r5, r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80030f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80030f6:	ed87 1a01 	vstr	s2, [r7, #4]
 80030fa:	edc7 1a00 	vstr	s3, [r7]
	float Low_passed_sample = 0;
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
	//Low_passed_sample = (float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;

	Low_passed_sample = (1-ALPHA)*0.5*(new_sample+old_sample_n1+ALPHA*old_passed);//(float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;
 8003104:	ed97 7a03 	vldr	s14, [r7, #12]
 8003108:	edd7 7a01 	vldr	s15, [r7, #4]
 800310c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003110:	ee17 0a90 	vmov	r0, s15
 8003114:	f7fd fa40 	bl	8000598 <__aeabi_f2d>
 8003118:	4604      	mov	r4, r0
 800311a:	460d      	mov	r5, r1
 800311c:	6838      	ldr	r0, [r7, #0]
 800311e:	f7fd fa3b 	bl	8000598 <__aeabi_f2d>
 8003122:	a313      	add	r3, pc, #76	@ (adr r3, 8003170 <Low_pass_filter+0x88>)
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	f7fd fa8e 	bl	8000648 <__aeabi_dmul>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4620      	mov	r0, r4
 8003132:	4629      	mov	r1, r5
 8003134:	f7fd f8d2 	bl	80002dc <__adddf3>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4610      	mov	r0, r2
 800313e:	4619      	mov	r1, r3
 8003140:	a30d      	add	r3, pc, #52	@ (adr r3, 8003178 <Low_pass_filter+0x90>)
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	f7fd fa7f 	bl	8000648 <__aeabi_dmul>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4610      	mov	r0, r2
 8003150:	4619      	mov	r1, r3
 8003152:	f7fd fd71 	bl	8000c38 <__aeabi_d2f>
 8003156:	4603      	mov	r3, r0
 8003158:	617b      	str	r3, [r7, #20]
	return Low_passed_sample;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	ee07 3a90 	vmov	s15, r3

}
 8003160:	eeb0 0a67 	vmov.f32	s0, s15
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bdb0      	pop	{r4, r5, r7, pc}
 800316a:	bf00      	nop
 800316c:	f3af 8000 	nop.w
 8003170:	33333333 	.word	0x33333333
 8003174:	3fd33333 	.word	0x3fd33333
 8003178:	66666666 	.word	0x66666666
 800317c:	3fd66666 	.word	0x3fd66666

08003180 <FAN_Drive>:
void FAN_Drive()
{ //@ToDo poprawic ogarnac zeby a intach bylo
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
		pcb_temp = (adc3_dma_buffer[3]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[3], pcb_temp)/4096)*3.3;
 8003186:	4b44      	ldr	r3, [pc, #272]	@ (8003298 <FAN_Drive+0x118>)
 8003188:	88db      	ldrh	r3, [r3, #6]
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	da01      	bge.n	800319e <FAN_Drive+0x1e>
 800319a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800319e:	131b      	asrs	r3, r3, #12
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b3e      	ldr	r3, [pc, #248]	@ (800329c <FAN_Drive+0x11c>)
 80031a4:	601a      	str	r2, [r3, #0]
		heat_sink_temp = (adc3_dma_buffer[4]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[4], heat_sink_temp)/4096)*3.3;
 80031a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003298 <FAN_Drive+0x118>)
 80031a8:	891b      	ldrh	r3, [r3, #8]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	da01      	bge.n	80031be <FAN_Drive+0x3e>
 80031ba:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80031be:	131b      	asrs	r3, r3, #12
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b37      	ldr	r3, [pc, #220]	@ (80032a0 <FAN_Drive+0x120>)
 80031c4:	601a      	str	r2, [r3, #0]

		uint32_t temperature = 20;
 80031c6:	2314      	movs	r3, #20
 80031c8:	603b      	str	r3, [r7, #0]

		pcb_temp = (pcb_temp-400)/20;
 80031ca:	4b34      	ldr	r3, [pc, #208]	@ (800329c <FAN_Drive+0x11c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031d2:	4a34      	ldr	r2, [pc, #208]	@ (80032a4 <FAN_Drive+0x124>)
 80031d4:	fba2 2303 	umull	r2, r3, r2, r3
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	4a30      	ldr	r2, [pc, #192]	@ (800329c <FAN_Drive+0x11c>)
 80031dc:	6013      	str	r3, [r2, #0]
		heat_sink_temp = (heat_sink_temp-500)/10;
 80031de:	4b30      	ldr	r3, [pc, #192]	@ (80032a0 <FAN_Drive+0x120>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80031e6:	4a2f      	ldr	r2, [pc, #188]	@ (80032a4 <FAN_Drive+0x124>)
 80031e8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ec:	08db      	lsrs	r3, r3, #3
 80031ee:	4a2c      	ldr	r2, [pc, #176]	@ (80032a0 <FAN_Drive+0x120>)
 80031f0:	6013      	str	r3, [r2, #0]
		// Choose the higher of the two temperatures
		temperature = (pcb_temp > heat_sink_temp) ? pcb_temp : heat_sink_temp;
 80031f2:	4b2b      	ldr	r3, [pc, #172]	@ (80032a0 <FAN_Drive+0x120>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b29      	ldr	r3, [pc, #164]	@ (800329c <FAN_Drive+0x11c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4293      	cmp	r3, r2
 80031fc:	bf38      	it	cc
 80031fe:	4613      	movcc	r3, r2
 8003200:	603b      	str	r3, [r7, #0]
		// Apply a non-linear (exponential) scaling for the fan speed
		// This scales the temperature to a value between 0 and 1, then applies an exponential curve
		uint32_t normalized_temp = ((temperature - 20) *100)/ 80;  // Normalizing between 0 (20°C) and 1000 (100°C)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2264      	movs	r2, #100	@ 0x64
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800320e:	4a25      	ldr	r2, [pc, #148]	@ (80032a4 <FAN_Drive+0x124>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	607b      	str	r3, [r7, #4]
		if (normalized_temp > 100) normalized_temp = 100;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b64      	cmp	r3, #100	@ 0x64
 800321c:	d901      	bls.n	8003222 <FAN_Drive+0xa2>
 800321e:	2364      	movs	r3, #100	@ 0x64
 8003220:	607b      	str	r3, [r7, #4]
		if (normalized_temp < 0) normalized_temp = 0;

		duty_cycle = 20 + ((int)(pow(normalized_temp, 3) * 79))/1000000;  // Cubic curve for fan speed control
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fd f996 	bl	8000554 <__aeabi_ui2d>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8003288 <FAN_Drive+0x108>
 8003230:	ec43 2b10 	vmov	d0, r2, r3
 8003234:	f012 fd8c 	bl	8015d50 <pow>
 8003238:	ec51 0b10 	vmov	r0, r1, d0
 800323c:	a314      	add	r3, pc, #80	@ (adr r3, 8003290 <FAN_Drive+0x110>)
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	f7fd fa01 	bl	8000648 <__aeabi_dmul>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	f7fd fcab 	bl	8000ba8 <__aeabi_d2iz>
 8003252:	4603      	mov	r3, r0
 8003254:	4a14      	ldr	r2, [pc, #80]	@ (80032a8 <FAN_Drive+0x128>)
 8003256:	fb82 1203 	smull	r1, r2, r2, r3
 800325a:	1492      	asrs	r2, r2, #18
 800325c:	17db      	asrs	r3, r3, #31
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	3314      	adds	r3, #20
 8003262:	4a12      	ldr	r2, [pc, #72]	@ (80032ac <FAN_Drive+0x12c>)
 8003264:	6013      	str	r3, [r2, #0]

		// Enforce minimum and maximum duty cycles
		if (temperature < 20) {
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b13      	cmp	r3, #19
 800326a:	d803      	bhi.n	8003274 <FAN_Drive+0xf4>
		        duty_cycle = 20;
 800326c:	4b0f      	ldr	r3, [pc, #60]	@ (80032ac <FAN_Drive+0x12c>)
 800326e:	2214      	movs	r2, #20
 8003270:	601a      	str	r2, [r3, #0]
		    	duty_cycle = 99;
		}

		//Set_PWM_DutyCycle(duty_cycle);

}
 8003272:	e005      	b.n	8003280 <FAN_Drive+0x100>
		} else if (temperature > 100) {
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b64      	cmp	r3, #100	@ 0x64
 8003278:	d902      	bls.n	8003280 <FAN_Drive+0x100>
		    	duty_cycle = 99;
 800327a:	4b0c      	ldr	r3, [pc, #48]	@ (80032ac <FAN_Drive+0x12c>)
 800327c:	2263      	movs	r2, #99	@ 0x63
 800327e:	601a      	str	r2, [r3, #0]
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	00000000 	.word	0x00000000
 800328c:	40080000 	.word	0x40080000
 8003290:	00000000 	.word	0x00000000
 8003294:	4053c000 	.word	0x4053c000
 8003298:	20000a58 	.word	0x20000a58
 800329c:	20000a50 	.word	0x20000a50
 80032a0:	20000a54 	.word	0x20000a54
 80032a4:	cccccccd 	.word	0xcccccccd
 80032a8:	431bde83 	.word	0x431bde83
 80032ac:	2000001c 	.word	0x2000001c

080032b0 <SendUSBMessage>:



void SendUSBMessage(const char* message) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7fd f801 	bl	80002c0 <strlen>
 80032be:	4603      	mov	r3, r0
 80032c0:	81fb      	strh	r3, [r7, #14]
    if (len > 127) len = 127;  // Limit to buffer size
 80032c2:	89fb      	ldrh	r3, [r7, #14]
 80032c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80032c6:	d901      	bls.n	80032cc <SendUSBMessage+0x1c>
 80032c8:	237f      	movs	r3, #127	@ 0x7f
 80032ca:	81fb      	strh	r3, [r7, #14]
    memcpy(USB_TX_Buffer, message, len);
 80032cc:	89fb      	ldrh	r3, [r7, #14]
 80032ce:	461a      	mov	r2, r3
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	480b      	ldr	r0, [pc, #44]	@ (8003300 <SendUSBMessage+0x50>)
 80032d4:	f00e fdc1 	bl	8011e5a <memcpy>
    USB_TX_Buffer[len] = '\0';  // Ensure null-terminated string
 80032d8:	89fb      	ldrh	r3, [r7, #14]
 80032da:	4a09      	ldr	r2, [pc, #36]	@ (8003300 <SendUSBMessage+0x50>)
 80032dc:	2100      	movs	r1, #0
 80032de:	54d1      	strb	r1, [r2, r3]
            break;
        }
      // HAL_Delay(10);  // Small delay before retrying
    } while (retry_count-- > 0);*/
    do {
            result = CDC_Transmit_FS((uint8_t*)message, len);
 80032e0:	89fb      	ldrh	r3, [r7, #14]
 80032e2:	4619      	mov	r1, r3
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f00d f91d 	bl	8010524 <CDC_Transmit_FS>
 80032ea:	4603      	mov	r3, r0
 80032ec:	737b      	strb	r3, [r7, #13]
        } while (result == USBD_BUSY); // Retry while USB is busy
 80032ee:	7b7b      	ldrb	r3, [r7, #13]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d0f5      	beq.n	80032e0 <SendUSBMessage+0x30>


}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000ad8 	.word	0x20000ad8

08003304 <ParseUSBCommand>:

void ParseUSBCommand(void) {
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
	 if (dataReceivedFlag) {
 8003308:	4ba6      	ldr	r3, [pc, #664]	@ (80035a4 <ParseUSBCommand+0x2a0>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8146 	beq.w	80035a0 <ParseUSBCommand+0x29c>
	        if (strncmp((char*)USB_RX_Buffer, "SET_KP", 6) == 0) {
 8003314:	2206      	movs	r2, #6
 8003316:	49a4      	ldr	r1, [pc, #656]	@ (80035a8 <ParseUSBCommand+0x2a4>)
 8003318:	48a4      	ldr	r0, [pc, #656]	@ (80035ac <ParseUSBCommand+0x2a8>)
 800331a:	f00e fd14 	bl	8011d46 <strncmp>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d108      	bne.n	8003336 <ParseUSBCommand+0x32>
	            sscanf((char*)USB_RX_Buffer, "SET_KP %f", &Kp);
 8003324:	4aa2      	ldr	r2, [pc, #648]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 8003326:	49a3      	ldr	r1, [pc, #652]	@ (80035b4 <ParseUSBCommand+0x2b0>)
 8003328:	48a0      	ldr	r0, [pc, #640]	@ (80035ac <ParseUSBCommand+0x2a8>)
 800332a:	f00e fc95 	bl	8011c58 <siscanf>
	            SendUSBMessage("KP Updated\n");
 800332e:	48a2      	ldr	r0, [pc, #648]	@ (80035b8 <ParseUSBCommand+0x2b4>)
 8003330:	f7ff ffbe 	bl	80032b0 <SendUSBMessage>
 8003334:	e12c      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_Ti", 6) == 0) {
 8003336:	2206      	movs	r2, #6
 8003338:	49a0      	ldr	r1, [pc, #640]	@ (80035bc <ParseUSBCommand+0x2b8>)
 800333a:	489c      	ldr	r0, [pc, #624]	@ (80035ac <ParseUSBCommand+0x2a8>)
 800333c:	f00e fd03 	bl	8011d46 <strncmp>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d108      	bne.n	8003358 <ParseUSBCommand+0x54>
	            sscanf((char*)USB_RX_Buffer, "SET_Ti %f", &Ti);
 8003346:	4a9e      	ldr	r2, [pc, #632]	@ (80035c0 <ParseUSBCommand+0x2bc>)
 8003348:	499e      	ldr	r1, [pc, #632]	@ (80035c4 <ParseUSBCommand+0x2c0>)
 800334a:	4898      	ldr	r0, [pc, #608]	@ (80035ac <ParseUSBCommand+0x2a8>)
 800334c:	f00e fc84 	bl	8011c58 <siscanf>
	            SendUSBMessage("Ti Updated\n");
 8003350:	489d      	ldr	r0, [pc, #628]	@ (80035c8 <ParseUSBCommand+0x2c4>)
 8003352:	f7ff ffad 	bl	80032b0 <SendUSBMessage>
 8003356:	e11b      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_VREF", 8) == 0) {
 8003358:	2208      	movs	r2, #8
 800335a:	499c      	ldr	r1, [pc, #624]	@ (80035cc <ParseUSBCommand+0x2c8>)
 800335c:	4893      	ldr	r0, [pc, #588]	@ (80035ac <ParseUSBCommand+0x2a8>)
 800335e:	f00e fcf2 	bl	8011d46 <strncmp>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d108      	bne.n	800337a <ParseUSBCommand+0x76>
	            sscanf((char*)USB_RX_Buffer, "SET_VREF %hu", &vref);
 8003368:	4a99      	ldr	r2, [pc, #612]	@ (80035d0 <ParseUSBCommand+0x2cc>)
 800336a:	499a      	ldr	r1, [pc, #616]	@ (80035d4 <ParseUSBCommand+0x2d0>)
 800336c:	488f      	ldr	r0, [pc, #572]	@ (80035ac <ParseUSBCommand+0x2a8>)
 800336e:	f00e fc73 	bl	8011c58 <siscanf>
	            SendUSBMessage("vref Updated\n");
 8003372:	4899      	ldr	r0, [pc, #612]	@ (80035d8 <ParseUSBCommand+0x2d4>)
 8003374:	f7ff ff9c 	bl	80032b0 <SendUSBMessage>
 8003378:	e10a      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS1_VREF", 12) == 0) {
 800337a:	220c      	movs	r2, #12
 800337c:	4997      	ldr	r1, [pc, #604]	@ (80035dc <ParseUSBCommand+0x2d8>)
 800337e:	488b      	ldr	r0, [pc, #556]	@ (80035ac <ParseUSBCommand+0x2a8>)
 8003380:	f00e fce1 	bl	8011d46 <strncmp>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d108      	bne.n	800339c <ParseUSBCommand+0x98>
	            sscanf((char*)USB_RX_Buffer, "SET_CS1_VREF %d", &current_sensor1_vref);
 800338a:	4a95      	ldr	r2, [pc, #596]	@ (80035e0 <ParseUSBCommand+0x2dc>)
 800338c:	4995      	ldr	r1, [pc, #596]	@ (80035e4 <ParseUSBCommand+0x2e0>)
 800338e:	4887      	ldr	r0, [pc, #540]	@ (80035ac <ParseUSBCommand+0x2a8>)
 8003390:	f00e fc62 	bl	8011c58 <siscanf>
	            SendUSBMessage("current_sensor1_vref Updated\n");
 8003394:	4894      	ldr	r0, [pc, #592]	@ (80035e8 <ParseUSBCommand+0x2e4>)
 8003396:	f7ff ff8b 	bl	80032b0 <SendUSBMessage>
 800339a:	e0f9      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS2_VREF", 12) == 0) {
 800339c:	220c      	movs	r2, #12
 800339e:	4993      	ldr	r1, [pc, #588]	@ (80035ec <ParseUSBCommand+0x2e8>)
 80033a0:	4882      	ldr	r0, [pc, #520]	@ (80035ac <ParseUSBCommand+0x2a8>)
 80033a2:	f00e fcd0 	bl	8011d46 <strncmp>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d108      	bne.n	80033be <ParseUSBCommand+0xba>
	            sscanf((char*)USB_RX_Buffer, "SET_CS2_VREF %d", &current_sensor2_vref);
 80033ac:	4a90      	ldr	r2, [pc, #576]	@ (80035f0 <ParseUSBCommand+0x2ec>)
 80033ae:	4991      	ldr	r1, [pc, #580]	@ (80035f4 <ParseUSBCommand+0x2f0>)
 80033b0:	487e      	ldr	r0, [pc, #504]	@ (80035ac <ParseUSBCommand+0x2a8>)
 80033b2:	f00e fc51 	bl	8011c58 <siscanf>
	            SendUSBMessage("current_sensor2_vref Updated\n");
 80033b6:	4890      	ldr	r0, [pc, #576]	@ (80035f8 <ParseUSBCommand+0x2f4>)
 80033b8:	f7ff ff7a 	bl	80032b0 <SendUSBMessage>
 80033bc:	e0e8      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_IMAX2_SUM", 13) == 0) {
 80033be:	220d      	movs	r2, #13
 80033c0:	498e      	ldr	r1, [pc, #568]	@ (80035fc <ParseUSBCommand+0x2f8>)
 80033c2:	487a      	ldr	r0, [pc, #488]	@ (80035ac <ParseUSBCommand+0x2a8>)
 80033c4:	f00e fcbf 	bl	8011d46 <strncmp>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d108      	bne.n	80033e0 <ParseUSBCommand+0xdc>
	            sscanf((char*)USB_RX_Buffer, "SET_IMAX2_SUM %d", &imax2_sum);
 80033ce:	4a8c      	ldr	r2, [pc, #560]	@ (8003600 <ParseUSBCommand+0x2fc>)
 80033d0:	498c      	ldr	r1, [pc, #560]	@ (8003604 <ParseUSBCommand+0x300>)
 80033d2:	4876      	ldr	r0, [pc, #472]	@ (80035ac <ParseUSBCommand+0x2a8>)
 80033d4:	f00e fc40 	bl	8011c58 <siscanf>
	            SendUSBMessage("imax2_sum Updated\n");
 80033d8:	488b      	ldr	r0, [pc, #556]	@ (8003608 <ParseUSBCommand+0x304>)
 80033da:	f7ff ff69 	bl	80032b0 <SendUSBMessage>
 80033de:	e0d7      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_TR", 12) == 0) {
 80033e0:	220c      	movs	r2, #12
 80033e2:	498a      	ldr	r1, [pc, #552]	@ (800360c <ParseUSBCommand+0x308>)
 80033e4:	4871      	ldr	r0, [pc, #452]	@ (80035ac <ParseUSBCommand+0x2a8>)
 80033e6:	f00e fcae 	bl	8011d46 <strncmp>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d108      	bne.n	8003402 <ParseUSBCommand+0xfe>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_TR %f", &delay_tr);
 80033f0:	4a87      	ldr	r2, [pc, #540]	@ (8003610 <ParseUSBCommand+0x30c>)
 80033f2:	4988      	ldr	r1, [pc, #544]	@ (8003614 <ParseUSBCommand+0x310>)
 80033f4:	486d      	ldr	r0, [pc, #436]	@ (80035ac <ParseUSBCommand+0x2a8>)
 80033f6:	f00e fc2f 	bl	8011c58 <siscanf>
	            SendUSBMessage("delay_tr Updated\n");
 80033fa:	4887      	ldr	r0, [pc, #540]	@ (8003618 <ParseUSBCommand+0x314>)
 80033fc:	f7ff ff58 	bl	80032b0 <SendUSBMessage>
 8003400:	e0c6      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_HC", 12) == 0) {
 8003402:	220c      	movs	r2, #12
 8003404:	4985      	ldr	r1, [pc, #532]	@ (800361c <ParseUSBCommand+0x318>)
 8003406:	4869      	ldr	r0, [pc, #420]	@ (80035ac <ParseUSBCommand+0x2a8>)
 8003408:	f00e fc9d 	bl	8011d46 <strncmp>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d108      	bne.n	8003424 <ParseUSBCommand+0x120>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_HC %f", &delay_hc);
 8003412:	4a83      	ldr	r2, [pc, #524]	@ (8003620 <ParseUSBCommand+0x31c>)
 8003414:	4983      	ldr	r1, [pc, #524]	@ (8003624 <ParseUSBCommand+0x320>)
 8003416:	4865      	ldr	r0, [pc, #404]	@ (80035ac <ParseUSBCommand+0x2a8>)
 8003418:	f00e fc1e 	bl	8011c58 <siscanf>
	            SendUSBMessage("delay_hc Updated\n");
 800341c:	4882      	ldr	r0, [pc, #520]	@ (8003628 <ParseUSBCommand+0x324>)
 800341e:	f7ff ff47 	bl	80032b0 <SendUSBMessage>
 8003422:	e0b5      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_KP", 6) == 0) {
 8003424:	2206      	movs	r2, #6
 8003426:	4981      	ldr	r1, [pc, #516]	@ (800362c <ParseUSBCommand+0x328>)
 8003428:	4860      	ldr	r0, [pc, #384]	@ (80035ac <ParseUSBCommand+0x2a8>)
 800342a:	f00e fc8c 	bl	8011d46 <strncmp>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10e      	bne.n	8003452 <ParseUSBCommand+0x14e>
	            sprintf((char*)USB_TX_Buffer, "KP = %f\n", Kp);
 8003434:	4b5e      	ldr	r3, [pc, #376]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd f8ad 	bl	8000598 <__aeabi_f2d>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	497b      	ldr	r1, [pc, #492]	@ (8003630 <ParseUSBCommand+0x32c>)
 8003444:	487b      	ldr	r0, [pc, #492]	@ (8003634 <ParseUSBCommand+0x330>)
 8003446:	f00e fbe7 	bl	8011c18 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800344a:	487a      	ldr	r0, [pc, #488]	@ (8003634 <ParseUSBCommand+0x330>)
 800344c:	f7ff ff30 	bl	80032b0 <SendUSBMessage>
 8003450:	e09e      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_Ti", 6) == 0) {
 8003452:	2206      	movs	r2, #6
 8003454:	4978      	ldr	r1, [pc, #480]	@ (8003638 <ParseUSBCommand+0x334>)
 8003456:	4855      	ldr	r0, [pc, #340]	@ (80035ac <ParseUSBCommand+0x2a8>)
 8003458:	f00e fc75 	bl	8011d46 <strncmp>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10e      	bne.n	8003480 <ParseUSBCommand+0x17c>
	            sprintf((char*)USB_TX_Buffer, "Ti = %f\n", Ti);
 8003462:	4b57      	ldr	r3, [pc, #348]	@ (80035c0 <ParseUSBCommand+0x2bc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd f896 	bl	8000598 <__aeabi_f2d>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4972      	ldr	r1, [pc, #456]	@ (800363c <ParseUSBCommand+0x338>)
 8003472:	4870      	ldr	r0, [pc, #448]	@ (8003634 <ParseUSBCommand+0x330>)
 8003474:	f00e fbd0 	bl	8011c18 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003478:	486e      	ldr	r0, [pc, #440]	@ (8003634 <ParseUSBCommand+0x330>)
 800347a:	f7ff ff19 	bl	80032b0 <SendUSBMessage>
 800347e:	e087      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_VREF", 8) == 0) {
 8003480:	2208      	movs	r2, #8
 8003482:	496f      	ldr	r1, [pc, #444]	@ (8003640 <ParseUSBCommand+0x33c>)
 8003484:	4849      	ldr	r0, [pc, #292]	@ (80035ac <ParseUSBCommand+0x2a8>)
 8003486:	f00e fc5e 	bl	8011d46 <strncmp>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <ParseUSBCommand+0x1a2>
	            sprintf((char*)USB_TX_Buffer, "vref = %hu\n", vref);
 8003490:	4b4f      	ldr	r3, [pc, #316]	@ (80035d0 <ParseUSBCommand+0x2cc>)
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	496b      	ldr	r1, [pc, #428]	@ (8003644 <ParseUSBCommand+0x340>)
 8003498:	4866      	ldr	r0, [pc, #408]	@ (8003634 <ParseUSBCommand+0x330>)
 800349a:	f00e fbbd 	bl	8011c18 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800349e:	4865      	ldr	r0, [pc, #404]	@ (8003634 <ParseUSBCommand+0x330>)
 80034a0:	f7ff ff06 	bl	80032b0 <SendUSBMessage>
 80034a4:	e074      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS1_VREF", 12) == 0) {
 80034a6:	220c      	movs	r2, #12
 80034a8:	4967      	ldr	r1, [pc, #412]	@ (8003648 <ParseUSBCommand+0x344>)
 80034aa:	4840      	ldr	r0, [pc, #256]	@ (80035ac <ParseUSBCommand+0x2a8>)
 80034ac:	f00e fc4b 	bl	8011d46 <strncmp>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <ParseUSBCommand+0x1c8>
	            sprintf((char*)USB_TX_Buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 80034b6:	4b4a      	ldr	r3, [pc, #296]	@ (80035e0 <ParseUSBCommand+0x2dc>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	4963      	ldr	r1, [pc, #396]	@ (800364c <ParseUSBCommand+0x348>)
 80034be:	485d      	ldr	r0, [pc, #372]	@ (8003634 <ParseUSBCommand+0x330>)
 80034c0:	f00e fbaa 	bl	8011c18 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80034c4:	485b      	ldr	r0, [pc, #364]	@ (8003634 <ParseUSBCommand+0x330>)
 80034c6:	f7ff fef3 	bl	80032b0 <SendUSBMessage>
 80034ca:	e061      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS2_VREF", 12) == 0) {
 80034cc:	220c      	movs	r2, #12
 80034ce:	4960      	ldr	r1, [pc, #384]	@ (8003650 <ParseUSBCommand+0x34c>)
 80034d0:	4836      	ldr	r0, [pc, #216]	@ (80035ac <ParseUSBCommand+0x2a8>)
 80034d2:	f00e fc38 	bl	8011d46 <strncmp>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <ParseUSBCommand+0x1ee>
	            sprintf((char*)USB_TX_Buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 80034dc:	4b44      	ldr	r3, [pc, #272]	@ (80035f0 <ParseUSBCommand+0x2ec>)
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	495c      	ldr	r1, [pc, #368]	@ (8003654 <ParseUSBCommand+0x350>)
 80034e4:	4853      	ldr	r0, [pc, #332]	@ (8003634 <ParseUSBCommand+0x330>)
 80034e6:	f00e fb97 	bl	8011c18 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80034ea:	4852      	ldr	r0, [pc, #328]	@ (8003634 <ParseUSBCommand+0x330>)
 80034ec:	f7ff fee0 	bl	80032b0 <SendUSBMessage>
 80034f0:	e04e      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_IMAX2_SUM", 13) == 0) {
 80034f2:	220d      	movs	r2, #13
 80034f4:	4958      	ldr	r1, [pc, #352]	@ (8003658 <ParseUSBCommand+0x354>)
 80034f6:	482d      	ldr	r0, [pc, #180]	@ (80035ac <ParseUSBCommand+0x2a8>)
 80034f8:	f00e fc25 	bl	8011d46 <strncmp>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <ParseUSBCommand+0x214>
	            sprintf((char*)USB_TX_Buffer, "imax2_sum = %f\n", imax2_sum);
 8003502:	4b3f      	ldr	r3, [pc, #252]	@ (8003600 <ParseUSBCommand+0x2fc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	4954      	ldr	r1, [pc, #336]	@ (800365c <ParseUSBCommand+0x358>)
 800350a:	484a      	ldr	r0, [pc, #296]	@ (8003634 <ParseUSBCommand+0x330>)
 800350c:	f00e fb84 	bl	8011c18 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003510:	4848      	ldr	r0, [pc, #288]	@ (8003634 <ParseUSBCommand+0x330>)
 8003512:	f7ff fecd 	bl	80032b0 <SendUSBMessage>
 8003516:	e03b      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_TR", 12) == 0) {
 8003518:	220c      	movs	r2, #12
 800351a:	4951      	ldr	r1, [pc, #324]	@ (8003660 <ParseUSBCommand+0x35c>)
 800351c:	4823      	ldr	r0, [pc, #140]	@ (80035ac <ParseUSBCommand+0x2a8>)
 800351e:	f00e fc12 	bl	8011d46 <strncmp>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10e      	bne.n	8003546 <ParseUSBCommand+0x242>
	            sprintf((char*)USB_TX_Buffer, "delay_tr = %f\n", delay_tr);
 8003528:	4b39      	ldr	r3, [pc, #228]	@ (8003610 <ParseUSBCommand+0x30c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd f833 	bl	8000598 <__aeabi_f2d>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	494b      	ldr	r1, [pc, #300]	@ (8003664 <ParseUSBCommand+0x360>)
 8003538:	483e      	ldr	r0, [pc, #248]	@ (8003634 <ParseUSBCommand+0x330>)
 800353a:	f00e fb6d 	bl	8011c18 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800353e:	483d      	ldr	r0, [pc, #244]	@ (8003634 <ParseUSBCommand+0x330>)
 8003540:	f7ff feb6 	bl	80032b0 <SendUSBMessage>
 8003544:	e024      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_HC", 12) == 0) {
 8003546:	220c      	movs	r2, #12
 8003548:	4947      	ldr	r1, [pc, #284]	@ (8003668 <ParseUSBCommand+0x364>)
 800354a:	4818      	ldr	r0, [pc, #96]	@ (80035ac <ParseUSBCommand+0x2a8>)
 800354c:	f00e fbfb 	bl	8011d46 <strncmp>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10e      	bne.n	8003574 <ParseUSBCommand+0x270>
	            sprintf((char*)USB_TX_Buffer, "delay_hc = %f\n", delay_hc);
 8003556:	4b32      	ldr	r3, [pc, #200]	@ (8003620 <ParseUSBCommand+0x31c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd f81c 	bl	8000598 <__aeabi_f2d>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4941      	ldr	r1, [pc, #260]	@ (800366c <ParseUSBCommand+0x368>)
 8003566:	4833      	ldr	r0, [pc, #204]	@ (8003634 <ParseUSBCommand+0x330>)
 8003568:	f00e fb56 	bl	8011c18 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800356c:	4831      	ldr	r0, [pc, #196]	@ (8003634 <ParseUSBCommand+0x330>)
 800356e:	f7ff fe9f 	bl	80032b0 <SendUSBMessage>
 8003572:	e00d      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "DISPLAY_ALL", 11) == 0) {
 8003574:	220b      	movs	r2, #11
 8003576:	493e      	ldr	r1, [pc, #248]	@ (8003670 <ParseUSBCommand+0x36c>)
 8003578:	480c      	ldr	r0, [pc, #48]	@ (80035ac <ParseUSBCommand+0x2a8>)
 800357a:	f00e fbe4 	bl	8011d46 <strncmp>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <ParseUSBCommand+0x286>
	            DisplayAllVariables();
 8003584:	f000 f976 	bl	8003874 <DisplayAllVariables>
 8003588:	e002      	b.n	8003590 <ParseUSBCommand+0x28c>

	        } else {
	            SendUSBMessage("Unknown Command\n");
 800358a:	483a      	ldr	r0, [pc, #232]	@ (8003674 <ParseUSBCommand+0x370>)
 800358c:	f7ff fe90 	bl	80032b0 <SendUSBMessage>
	        }
	        memset(USB_RX_Buffer, 0, sizeof(USB_RX_Buffer));  // Clear buffer
 8003590:	2240      	movs	r2, #64	@ 0x40
 8003592:	2100      	movs	r1, #0
 8003594:	4805      	ldr	r0, [pc, #20]	@ (80035ac <ParseUSBCommand+0x2a8>)
 8003596:	f00e fbce 	bl	8011d36 <memset>
	        dataReceivedFlag = 0;
 800359a:	4b02      	ldr	r3, [pc, #8]	@ (80035a4 <ParseUSBCommand+0x2a0>)
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
	    }
}
 80035a0:	bf00      	nop
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000b58 	.word	0x20000b58
 80035a8:	08017138 	.word	0x08017138
 80035ac:	20000a98 	.word	0x20000a98
 80035b0:	20000008 	.word	0x20000008
 80035b4:	08017140 	.word	0x08017140
 80035b8:	0801714c 	.word	0x0801714c
 80035bc:	08017158 	.word	0x08017158
 80035c0:	2000000c 	.word	0x2000000c
 80035c4:	08017160 	.word	0x08017160
 80035c8:	0801716c 	.word	0x0801716c
 80035cc:	08017178 	.word	0x08017178
 80035d0:	20000000 	.word	0x20000000
 80035d4:	08017184 	.word	0x08017184
 80035d8:	08017194 	.word	0x08017194
 80035dc:	080171a4 	.word	0x080171a4
 80035e0:	20000a3c 	.word	0x20000a3c
 80035e4:	080171b4 	.word	0x080171b4
 80035e8:	080171c4 	.word	0x080171c4
 80035ec:	080171e4 	.word	0x080171e4
 80035f0:	20000a3e 	.word	0x20000a3e
 80035f4:	080171f4 	.word	0x080171f4
 80035f8:	08017204 	.word	0x08017204
 80035fc:	08017224 	.word	0x08017224
 8003600:	20000a7c 	.word	0x20000a7c
 8003604:	08017234 	.word	0x08017234
 8003608:	08017248 	.word	0x08017248
 800360c:	0801725c 	.word	0x0801725c
 8003610:	20000a74 	.word	0x20000a74
 8003614:	0801726c 	.word	0x0801726c
 8003618:	0801727c 	.word	0x0801727c
 800361c:	08017290 	.word	0x08017290
 8003620:	20000a78 	.word	0x20000a78
 8003624:	080172a0 	.word	0x080172a0
 8003628:	080172b0 	.word	0x080172b0
 800362c:	080172c4 	.word	0x080172c4
 8003630:	080172cc 	.word	0x080172cc
 8003634:	20000ad8 	.word	0x20000ad8
 8003638:	080172d8 	.word	0x080172d8
 800363c:	080172e0 	.word	0x080172e0
 8003640:	080172ec 	.word	0x080172ec
 8003644:	080172f8 	.word	0x080172f8
 8003648:	08017304 	.word	0x08017304
 800364c:	08017314 	.word	0x08017314
 8003650:	08017330 	.word	0x08017330
 8003654:	08017340 	.word	0x08017340
 8003658:	0801735c 	.word	0x0801735c
 800365c:	0801736c 	.word	0x0801736c
 8003660:	0801737c 	.word	0x0801737c
 8003664:	0801738c 	.word	0x0801738c
 8003668:	0801739c 	.word	0x0801739c
 800366c:	080173ac 	.word	0x080173ac
 8003670:	080173bc 	.word	0x080173bc
 8003674:	080173c8 	.word	0x080173c8

08003678 <float_to_integer>:

// CORDIC
int32_t float_to_integer(float in, int scaling_factor, uint8_t bits){
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003682:	60b8      	str	r0, [r7, #8]
 8003684:	460b      	mov	r3, r1
 8003686:	71fb      	strb	r3, [r7, #7]

	int32_t acc;
	if(bits == 32){
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	2b20      	cmp	r3, #32
 800368c:	d135      	bne.n	80036fa <float_to_integer+0x82>
	if(in <= 1){
 800368e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003692:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800369a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369e:	d811      	bhi.n	80036c4 <float_to_integer+0x4c>
		 acc = (uint32_t)(in*scaling_factor*2147483648);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80036ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800377c <float_to_integer+0x104>
 80036b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036be:	ee17 3a90 	vmov	r3, s15
 80036c2:	617b      	str	r3, [r7, #20]
	}

	if(in > 1){
 80036c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80036c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80036cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d4:	dd11      	ble.n	80036fa <float_to_integer+0x82>
		 acc = (uint32_t)((in/scaling_factor)*2147483648);
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	ee07 3a90 	vmov	s15, r3
 80036dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036e0:	edd7 6a03 	vldr	s13, [r7, #12]
 80036e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036e8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800377c <float_to_integer+0x104>
 80036ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f4:	ee17 3a90 	vmov	r3, s15
 80036f8:	617b      	str	r3, [r7, #20]
		}
}
	if(bits == 16){
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	2b10      	cmp	r3, #16
 80036fe:	d135      	bne.n	800376c <float_to_integer+0xf4>
		if(in <= 1){
 8003700:	edd7 7a03 	vldr	s15, [r7, #12]
 8003704:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003710:	d811      	bhi.n	8003736 <float_to_integer+0xbe>
			 acc = (uint32_t)(in*scaling_factor*32767);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	ee07 3a90 	vmov	s15, r3
 8003718:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800371c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003724:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003780 <float_to_integer+0x108>
 8003728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800372c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003730:	ee17 3a90 	vmov	r3, s15
 8003734:	617b      	str	r3, [r7, #20]
		}

		if(in > 1){
 8003736:	edd7 7a03 	vldr	s15, [r7, #12]
 800373a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800373e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003746:	dd11      	ble.n	800376c <float_to_integer+0xf4>
			 acc = (uint32_t)((in/scaling_factor)*32767);
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003752:	edd7 6a03 	vldr	s13, [r7, #12]
 8003756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800375a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003780 <float_to_integer+0x108>
 800375e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003766:	ee17 3a90 	vmov	r3, s15
 800376a:	617b      	str	r3, [r7, #20]
			}
	}


	return acc;
 800376c:	697b      	ldr	r3, [r7, #20]
}
 800376e:	4618      	mov	r0, r3
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	4f000000 	.word	0x4f000000
 8003780:	46fffe00 	.word	0x46fffe00

08003784 <integer_to_float>:

float integer_to_float(int32_t result_cordic_integer, int squarted_scaling_factor, int8_t mode, uint8_t bits){
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	4611      	mov	r1, r2
 8003790:	461a      	mov	r2, r3
 8003792:	460b      	mov	r3, r1
 8003794:	71fb      	strb	r3, [r7, #7]
 8003796:	4613      	mov	r3, r2
 8003798:	71bb      	strb	r3, [r7, #6]
	float acc;

	if(bits == 32){
 800379a:	79bb      	ldrb	r3, [r7, #6]
 800379c:	2b20      	cmp	r3, #32
 800379e:	d12b      	bne.n	80037f8 <integer_to_float+0x74>
		// mode = 1 when float_to_integer() in is  <= 1
		if(mode){
 80037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d011      	beq.n	80037cc <integer_to_float+0x48>
			acc = (float)((result_cordic_integer/2147483648.0f)/squarted_scaling_factor);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037b2:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800386c <integer_to_float+0xe8>
 80037b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	ee07 3a90 	vmov	s15, r3
 80037c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c8:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		// mode = 0 when float_to_integer() in is > 1
		if(!mode){
 80037cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d111      	bne.n	80037f8 <integer_to_float+0x74>
			acc = (float)((result_cordic_integer/2147483648.0f)*squarted_scaling_factor);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037de:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800386c <integer_to_float+0xe8>
 80037e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f4:	edc7 7a05 	vstr	s15, [r7, #20]
		}
	}

	if(bits == 16){
 80037f8:	79bb      	ldrb	r3, [r7, #6]
 80037fa:	2b10      	cmp	r3, #16
 80037fc:	d12b      	bne.n	8003856 <integer_to_float+0xd2>
		// mode = 1 when float_to_integer() in is  <= 1
		if(mode){
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d011      	beq.n	800382a <integer_to_float+0xa6>
			acc = (float)((result_cordic_integer/32767.0f)/squarted_scaling_factor);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	ee07 3a90 	vmov	s15, r3
 800380c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003810:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003870 <integer_to_float+0xec>
 8003814:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003826:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		// mode = 0 when float_to_integer() in is > 1
		if(!mode){
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d111      	bne.n	8003856 <integer_to_float+0xd2>
			acc = (float)((result_cordic_integer/32767.0f)*squarted_scaling_factor);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	ee07 3a90 	vmov	s15, r3
 8003838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800383c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003870 <integer_to_float+0xec>
 8003840:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800384e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003852:	edc7 7a05 	vstr	s15, [r7, #20]
		}
	}

	return acc;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	ee07 3a90 	vmov	s15, r3

}
 800385c:	eeb0 0a67 	vmov.f32	s0, s15
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	4f000000 	.word	0x4f000000
 8003870:	46fffe00 	.word	0x46fffe00

08003874 <DisplayAllVariables>:

void DisplayAllVariables(void) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b0a0      	sub	sp, #128	@ 0x80
 8003878:	af00      	add	r7, sp, #0
    char buffer[128];

    sprintf(buffer, "KP = %f\n", Kp);
 800387a:	4b5e      	ldr	r3, [pc, #376]	@ (80039f4 <DisplayAllVariables+0x180>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fc fe8a 	bl	8000598 <__aeabi_f2d>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4638      	mov	r0, r7
 800388a:	495b      	ldr	r1, [pc, #364]	@ (80039f8 <DisplayAllVariables+0x184>)
 800388c:	f00e f9c4 	bl	8011c18 <siprintf>
        SendUSBMessage(buffer);
 8003890:	463b      	mov	r3, r7
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fd0c 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "Ti = %f\n", Ti);
 8003898:	4b58      	ldr	r3, [pc, #352]	@ (80039fc <DisplayAllVariables+0x188>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7fc fe7b 	bl	8000598 <__aeabi_f2d>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4638      	mov	r0, r7
 80038a8:	4955      	ldr	r1, [pc, #340]	@ (8003a00 <DisplayAllVariables+0x18c>)
 80038aa:	f00e f9b5 	bl	8011c18 <siprintf>
        SendUSBMessage(buffer);
 80038ae:	463b      	mov	r3, r7
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fcfd 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "vref = %hu\n", vref);
 80038b6:	4b53      	ldr	r3, [pc, #332]	@ (8003a04 <DisplayAllVariables+0x190>)
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	463b      	mov	r3, r7
 80038be:	4952      	ldr	r1, [pc, #328]	@ (8003a08 <DisplayAllVariables+0x194>)
 80038c0:	4618      	mov	r0, r3
 80038c2:	f00e f9a9 	bl	8011c18 <siprintf>
        SendUSBMessage(buffer);
 80038c6:	463b      	mov	r3, r7
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fcf1 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "imax1 = %f\n", imax1);
 80038ce:	4b4f      	ldr	r3, [pc, #316]	@ (8003a0c <DisplayAllVariables+0x198>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	463b      	mov	r3, r7
 80038d4:	494e      	ldr	r1, [pc, #312]	@ (8003a10 <DisplayAllVariables+0x19c>)
 80038d6:	4618      	mov	r0, r3
 80038d8:	f00e f99e 	bl	8011c18 <siprintf>
        SendUSBMessage(buffer);
 80038dc:	463b      	mov	r3, r7
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fce6 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "imax2 = %f\n", imax2);
 80038e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003a14 <DisplayAllVariables+0x1a0>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	463b      	mov	r3, r7
 80038ea:	494b      	ldr	r1, [pc, #300]	@ (8003a18 <DisplayAllVariables+0x1a4>)
 80038ec:	4618      	mov	r0, r3
 80038ee:	f00e f993 	bl	8011c18 <siprintf>
        SendUSBMessage(buffer);
 80038f2:	463b      	mov	r3, r7
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff fcdb 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "imin = %f\n", imin);
 80038fa:	4b48      	ldr	r3, [pc, #288]	@ (8003a1c <DisplayAllVariables+0x1a8>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	463b      	mov	r3, r7
 8003900:	4947      	ldr	r1, [pc, #284]	@ (8003a20 <DisplayAllVariables+0x1ac>)
 8003902:	4618      	mov	r0, r3
 8003904:	f00e f988 	bl	8011c18 <siprintf>
        SendUSBMessage(buffer);
 8003908:	463b      	mov	r3, r7
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff fcd0 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "input_voltage = %f\n", input_voltage);
 8003910:	4b44      	ldr	r3, [pc, #272]	@ (8003a24 <DisplayAllVariables+0x1b0>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	463b      	mov	r3, r7
 8003916:	4944      	ldr	r1, [pc, #272]	@ (8003a28 <DisplayAllVariables+0x1b4>)
 8003918:	4618      	mov	r0, r3
 800391a:	f00e f97d 	bl	8011c18 <siprintf>
        SendUSBMessage(buffer);
 800391e:	463b      	mov	r3, r7
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fcc5 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "output_voltage = %f\n", output_voltage);
 8003926:	4b41      	ldr	r3, [pc, #260]	@ (8003a2c <DisplayAllVariables+0x1b8>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	463b      	mov	r3, r7
 800392c:	4940      	ldr	r1, [pc, #256]	@ (8003a30 <DisplayAllVariables+0x1bc>)
 800392e:	4618      	mov	r0, r3
 8003930:	f00e f972 	bl	8011c18 <siprintf>
        SendUSBMessage(buffer);
 8003934:	463b      	mov	r3, r7
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff fcba 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "pcb_temp = %f\n", pcb_temp);
 800393c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a34 <DisplayAllVariables+0x1c0>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	463b      	mov	r3, r7
 8003942:	493d      	ldr	r1, [pc, #244]	@ (8003a38 <DisplayAllVariables+0x1c4>)
 8003944:	4618      	mov	r0, r3
 8003946:	f00e f967 	bl	8011c18 <siprintf>
        SendUSBMessage(buffer);
 800394a:	463b      	mov	r3, r7
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fcaf 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "heat_sink_temp = %f\n", heat_sink_temp);
 8003952:	4b3a      	ldr	r3, [pc, #232]	@ (8003a3c <DisplayAllVariables+0x1c8>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	463b      	mov	r3, r7
 8003958:	4939      	ldr	r1, [pc, #228]	@ (8003a40 <DisplayAllVariables+0x1cc>)
 800395a:	4618      	mov	r0, r3
 800395c:	f00e f95c 	bl	8011c18 <siprintf>
        SendUSBMessage(buffer);
 8003960:	463b      	mov	r3, r7
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff fca4 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 8003968:	4b36      	ldr	r3, [pc, #216]	@ (8003a44 <DisplayAllVariables+0x1d0>)
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	463b      	mov	r3, r7
 8003970:	4935      	ldr	r1, [pc, #212]	@ (8003a48 <DisplayAllVariables+0x1d4>)
 8003972:	4618      	mov	r0, r3
 8003974:	f00e f950 	bl	8011c18 <siprintf>
        SendUSBMessage(buffer);
 8003978:	463b      	mov	r3, r7
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fc98 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 8003980:	4b32      	ldr	r3, [pc, #200]	@ (8003a4c <DisplayAllVariables+0x1d8>)
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	463b      	mov	r3, r7
 8003988:	4931      	ldr	r1, [pc, #196]	@ (8003a50 <DisplayAllVariables+0x1dc>)
 800398a:	4618      	mov	r0, r3
 800398c:	f00e f944 	bl	8011c18 <siprintf>
        SendUSBMessage(buffer);
 8003990:	463b      	mov	r3, r7
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fc8c 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "imax2_sum = %f\n", imax2_sum);
 8003998:	4b2e      	ldr	r3, [pc, #184]	@ (8003a54 <DisplayAllVariables+0x1e0>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	463b      	mov	r3, r7
 800399e:	492e      	ldr	r1, [pc, #184]	@ (8003a58 <DisplayAllVariables+0x1e4>)
 80039a0:	4618      	mov	r0, r3
 80039a2:	f00e f939 	bl	8011c18 <siprintf>
        SendUSBMessage(buffer);
 80039a6:	463b      	mov	r3, r7
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fc81 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "delay_tr = %f\n", delay_tr);
 80039ae:	4b2b      	ldr	r3, [pc, #172]	@ (8003a5c <DisplayAllVariables+0x1e8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fc fdf0 	bl	8000598 <__aeabi_f2d>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4638      	mov	r0, r7
 80039be:	4928      	ldr	r1, [pc, #160]	@ (8003a60 <DisplayAllVariables+0x1ec>)
 80039c0:	f00e f92a 	bl	8011c18 <siprintf>
        SendUSBMessage(buffer);
 80039c4:	463b      	mov	r3, r7
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fc72 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "delay_hc = %f\n", delay_hc);
 80039cc:	4b25      	ldr	r3, [pc, #148]	@ (8003a64 <DisplayAllVariables+0x1f0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fc fde1 	bl	8000598 <__aeabi_f2d>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4638      	mov	r0, r7
 80039dc:	4922      	ldr	r1, [pc, #136]	@ (8003a68 <DisplayAllVariables+0x1f4>)
 80039de:	f00e f91b 	bl	8011c18 <siprintf>
        SendUSBMessage(buffer);
 80039e2:	463b      	mov	r3, r7
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fc63 	bl	80032b0 <SendUSBMessage>
}
 80039ea:	bf00      	nop
 80039ec:	3780      	adds	r7, #128	@ 0x80
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000008 	.word	0x20000008
 80039f8:	080172cc 	.word	0x080172cc
 80039fc:	2000000c 	.word	0x2000000c
 8003a00:	080172e0 	.word	0x080172e0
 8003a04:	20000000 	.word	0x20000000
 8003a08:	080172f8 	.word	0x080172f8
 8003a0c:	20000a40 	.word	0x20000a40
 8003a10:	080173dc 	.word	0x080173dc
 8003a14:	20000a44 	.word	0x20000a44
 8003a18:	080173e8 	.word	0x080173e8
 8003a1c:	20000a48 	.word	0x20000a48
 8003a20:	080173f4 	.word	0x080173f4
 8003a24:	20000a4c 	.word	0x20000a4c
 8003a28:	08017400 	.word	0x08017400
 8003a2c:	20000a64 	.word	0x20000a64
 8003a30:	08017414 	.word	0x08017414
 8003a34:	20000a50 	.word	0x20000a50
 8003a38:	0801742c 	.word	0x0801742c
 8003a3c:	20000a54 	.word	0x20000a54
 8003a40:	0801743c 	.word	0x0801743c
 8003a44:	20000a3c 	.word	0x20000a3c
 8003a48:	08017314 	.word	0x08017314
 8003a4c:	20000a3e 	.word	0x20000a3e
 8003a50:	08017340 	.word	0x08017340
 8003a54:	20000a7c 	.word	0x20000a7c
 8003a58:	0801736c 	.word	0x0801736c
 8003a5c:	20000a74 	.word	0x20000a74
 8003a60:	0801738c 	.word	0x0801738c
 8003a64:	20000a78 	.word	0x20000a78
 8003a68:	080173ac 	.word	0x080173ac

08003a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a70:	b672      	cpsid	i
}
 8003a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a74:	bf00      	nop
 8003a76:	e7fd      	b.n	8003a74 <Error_Handler+0x8>

08003a78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <HAL_MspInit+0x44>)
 8003a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a82:	4a0e      	ldr	r2, [pc, #56]	@ (8003abc <HAL_MspInit+0x44>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003abc <HAL_MspInit+0x44>)
 8003a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <HAL_MspInit+0x44>)
 8003a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9a:	4a08      	ldr	r2, [pc, #32]	@ (8003abc <HAL_MspInit+0x44>)
 8003a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <HAL_MspInit+0x44>)
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003aae:	f005 fa23 	bl	8008ef8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000

08003ac0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b0a4      	sub	sp, #144	@ 0x90
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ad8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003adc:	2254      	movs	r2, #84	@ 0x54
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f00e f928 	bl	8011d36 <memset>
  if(hadc->Instance==ADC1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aee:	d11c      	bne.n	8003b2a <HAL_ADC_MspInit+0x6a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003af0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003af4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003af6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003afc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b00:	4618      	mov	r0, r3
 8003b02:	f005 ff37 	bl	8009974 <HAL_RCCEx_PeriphCLKConfig>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003b0c:	f7ff ffae 	bl	8003a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003b10:	4b86      	ldr	r3, [pc, #536]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b14:	4a85      	ldr	r2, [pc, #532]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003b16:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b1c:	4b83      	ldr	r3, [pc, #524]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8003b28:	e185      	b.n	8003e36 <HAL_ADC_MspInit+0x376>
  else if(hadc->Instance==ADC3)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a80      	ldr	r2, [pc, #512]	@ (8003d30 <HAL_ADC_MspInit+0x270>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	f040 8087 	bne.w	8003c44 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003b36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003b3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003b40:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b46:	4618      	mov	r0, r3
 8003b48:	f005 ff14 	bl	8009974 <HAL_RCCEx_PeriphCLKConfig>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_ADC_MspInit+0x96>
      Error_Handler();
 8003b52:	f7ff ff8b 	bl	8003a6c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003b56:	4b77      	ldr	r3, [pc, #476]	@ (8003d34 <HAL_ADC_MspInit+0x274>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	4a75      	ldr	r2, [pc, #468]	@ (8003d34 <HAL_ADC_MspInit+0x274>)
 8003b5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003b60:	4b74      	ldr	r3, [pc, #464]	@ (8003d34 <HAL_ADC_MspInit+0x274>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d10b      	bne.n	8003b80 <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003b68:	4b70      	ldr	r3, [pc, #448]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6c:	4a6f      	ldr	r2, [pc, #444]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003b6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b74:	4b6d      	ldr	r3, [pc, #436]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b7c:	623b      	str	r3, [r7, #32]
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b80:	4b6a      	ldr	r3, [pc, #424]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b84:	4a69      	ldr	r2, [pc, #420]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003b86:	f043 0302 	orr.w	r3, r3, #2
 8003b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b8c:	4b67      	ldr	r3, [pc, #412]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b98:	4b64      	ldr	r3, [pc, #400]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9c:	4a63      	ldr	r2, [pc, #396]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003b9e:	f043 0310 	orr.w	r3, r3, #16
 8003ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ba4:	4b61      	ldr	r3, [pc, #388]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS_VREF_1_Pin|HEATSINK_TEMP_Pin;
 8003bb0:	f242 0302 	movw	r3, #8194	@ 0x2002
 8003bb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bc2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	485b      	ldr	r0, [pc, #364]	@ (8003d38 <HAL_ADC_MspInit+0x278>)
 8003bca:	f003 f9ef 	bl	8006fac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PCB_TEMP_Pin|CS_VREF_2_Pin|INPUT_V_ADC_Pin;
 8003bce:	f44f 530a 	mov.w	r3, #8832	@ 0x2280
 8003bd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003be0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003be4:	4619      	mov	r1, r3
 8003be6:	4855      	ldr	r0, [pc, #340]	@ (8003d3c <HAL_ADC_MspInit+0x27c>)
 8003be8:	f003 f9e0 	bl	8006fac <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel1;
 8003bec:	4b54      	ldr	r3, [pc, #336]	@ (8003d40 <HAL_ADC_MspInit+0x280>)
 8003bee:	4a55      	ldr	r2, [pc, #340]	@ (8003d44 <HAL_ADC_MspInit+0x284>)
 8003bf0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003bf2:	4b53      	ldr	r3, [pc, #332]	@ (8003d40 <HAL_ADC_MspInit+0x280>)
 8003bf4:	2225      	movs	r2, #37	@ 0x25
 8003bf6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bf8:	4b51      	ldr	r3, [pc, #324]	@ (8003d40 <HAL_ADC_MspInit+0x280>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bfe:	4b50      	ldr	r3, [pc, #320]	@ (8003d40 <HAL_ADC_MspInit+0x280>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003c04:	4b4e      	ldr	r3, [pc, #312]	@ (8003d40 <HAL_ADC_MspInit+0x280>)
 8003c06:	2280      	movs	r2, #128	@ 0x80
 8003c08:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c0a:	4b4d      	ldr	r3, [pc, #308]	@ (8003d40 <HAL_ADC_MspInit+0x280>)
 8003c0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c10:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c12:	4b4b      	ldr	r3, [pc, #300]	@ (8003d40 <HAL_ADC_MspInit+0x280>)
 8003c14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c18:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003c1a:	4b49      	ldr	r3, [pc, #292]	@ (8003d40 <HAL_ADC_MspInit+0x280>)
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003c20:	4b47      	ldr	r3, [pc, #284]	@ (8003d40 <HAL_ADC_MspInit+0x280>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003c26:	4846      	ldr	r0, [pc, #280]	@ (8003d40 <HAL_ADC_MspInit+0x280>)
 8003c28:	f002 ff4e 	bl	8006ac8 <HAL_DMA_Init>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_ADC_MspInit+0x176>
      Error_Handler();
 8003c32:	f7ff ff1b 	bl	8003a6c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a41      	ldr	r2, [pc, #260]	@ (8003d40 <HAL_ADC_MspInit+0x280>)
 8003c3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c3c:	4a40      	ldr	r2, [pc, #256]	@ (8003d40 <HAL_ADC_MspInit+0x280>)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003c42:	e0f8      	b.n	8003e36 <HAL_ADC_MspInit+0x376>
  else if(hadc->Instance==ADC4)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a3f      	ldr	r2, [pc, #252]	@ (8003d48 <HAL_ADC_MspInit+0x288>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	f040 8082 	bne.w	8003d54 <HAL_ADC_MspInit+0x294>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003c50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c54:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003c56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003c5a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c60:	4618      	mov	r0, r3
 8003c62:	f005 fe87 	bl	8009974 <HAL_RCCEx_PeriphCLKConfig>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8003c6c:	f7ff fefe 	bl	8003a6c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003c70:	4b30      	ldr	r3, [pc, #192]	@ (8003d34 <HAL_ADC_MspInit+0x274>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3301      	adds	r3, #1
 8003c76:	4a2f      	ldr	r2, [pc, #188]	@ (8003d34 <HAL_ADC_MspInit+0x274>)
 8003c78:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8003d34 <HAL_ADC_MspInit+0x274>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d10b      	bne.n	8003c9a <HAL_ADC_MspInit+0x1da>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003c82:	4b2a      	ldr	r3, [pc, #168]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c86:	4a29      	ldr	r2, [pc, #164]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c8e:	4b27      	ldr	r3, [pc, #156]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c9a:	4b24      	ldr	r3, [pc, #144]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9e:	4a23      	ldr	r2, [pc, #140]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003ca0:	f043 0310 	orr.w	r3, r3, #16
 8003ca4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ca6:	4b21      	ldr	r3, [pc, #132]	@ (8003d2c <HAL_ADC_MspInit+0x26c>)
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT_V_ADC_Pin;
 8003cb2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003cb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(OUTPUT_V_ADC_GPIO_Port, &GPIO_InitStruct);
 8003cc4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003cc8:	4619      	mov	r1, r3
 8003cca:	481c      	ldr	r0, [pc, #112]	@ (8003d3c <HAL_ADC_MspInit+0x27c>)
 8003ccc:	f003 f96e 	bl	8006fac <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel2;
 8003cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8003d4c <HAL_ADC_MspInit+0x28c>)
 8003cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d50 <HAL_ADC_MspInit+0x290>)
 8003cd4:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d4c <HAL_ADC_MspInit+0x28c>)
 8003cd8:	2226      	movs	r2, #38	@ 0x26
 8003cda:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d4c <HAL_ADC_MspInit+0x28c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d4c <HAL_ADC_MspInit+0x28c>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8003ce8:	4b18      	ldr	r3, [pc, #96]	@ (8003d4c <HAL_ADC_MspInit+0x28c>)
 8003cea:	2280      	movs	r2, #128	@ 0x80
 8003cec:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cee:	4b17      	ldr	r3, [pc, #92]	@ (8003d4c <HAL_ADC_MspInit+0x28c>)
 8003cf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cf4:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003cf6:	4b15      	ldr	r3, [pc, #84]	@ (8003d4c <HAL_ADC_MspInit+0x28c>)
 8003cf8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cfc:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8003cfe:	4b13      	ldr	r3, [pc, #76]	@ (8003d4c <HAL_ADC_MspInit+0x28c>)
 8003d00:	2220      	movs	r2, #32
 8003d02:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d04:	4b11      	ldr	r3, [pc, #68]	@ (8003d4c <HAL_ADC_MspInit+0x28c>)
 8003d06:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003d0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8003d0c:	480f      	ldr	r0, [pc, #60]	@ (8003d4c <HAL_ADC_MspInit+0x28c>)
 8003d0e:	f002 fedb 	bl	8006ac8 <HAL_DMA_Init>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_ADC_MspInit+0x25c>
      Error_Handler();
 8003d18:	f7ff fea8 	bl	8003a6c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8003d4c <HAL_ADC_MspInit+0x28c>)
 8003d20:	655a      	str	r2, [r3, #84]	@ 0x54
 8003d22:	4a0a      	ldr	r2, [pc, #40]	@ (8003d4c <HAL_ADC_MspInit+0x28c>)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003d28:	e085      	b.n	8003e36 <HAL_ADC_MspInit+0x376>
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	50000400 	.word	0x50000400
 8003d34:	20000bac 	.word	0x20000bac
 8003d38:	48000400 	.word	0x48000400
 8003d3c:	48001000 	.word	0x48001000
 8003d40:	20000564 	.word	0x20000564
 8003d44:	40020008 	.word	0x40020008
 8003d48:	50000500 	.word	0x50000500
 8003d4c:	200005c4 	.word	0x200005c4
 8003d50:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC5)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a39      	ldr	r2, [pc, #228]	@ (8003e40 <HAL_ADC_MspInit+0x380>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d16b      	bne.n	8003e36 <HAL_ADC_MspInit+0x376>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003d5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d62:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003d64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003d68:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f005 fe00 	bl	8009974 <HAL_RCCEx_PeriphCLKConfig>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_ADC_MspInit+0x2be>
      Error_Handler();
 8003d7a:	f7ff fe77 	bl	8003a6c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003d7e:	4b31      	ldr	r3, [pc, #196]	@ (8003e44 <HAL_ADC_MspInit+0x384>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3301      	adds	r3, #1
 8003d84:	4a2f      	ldr	r2, [pc, #188]	@ (8003e44 <HAL_ADC_MspInit+0x384>)
 8003d86:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003d88:	4b2e      	ldr	r3, [pc, #184]	@ (8003e44 <HAL_ADC_MspInit+0x384>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d10b      	bne.n	8003da8 <HAL_ADC_MspInit+0x2e8>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003d90:	4b2d      	ldr	r3, [pc, #180]	@ (8003e48 <HAL_ADC_MspInit+0x388>)
 8003d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d94:	4a2c      	ldr	r2, [pc, #176]	@ (8003e48 <HAL_ADC_MspInit+0x388>)
 8003d96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003e48 <HAL_ADC_MspInit+0x388>)
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da8:	4b27      	ldr	r3, [pc, #156]	@ (8003e48 <HAL_ADC_MspInit+0x388>)
 8003daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dac:	4a26      	ldr	r2, [pc, #152]	@ (8003e48 <HAL_ADC_MspInit+0x388>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003db4:	4b24      	ldr	r3, [pc, #144]	@ (8003e48 <HAL_ADC_MspInit+0x388>)
 8003db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMAX2_SUM_Pin;
 8003dc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003dc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(IMAX2_SUM_GPIO_Port, &GPIO_InitStruct);
 8003dd2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ddc:	f003 f8e6 	bl	8006fac <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel3;
 8003de0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e4c <HAL_ADC_MspInit+0x38c>)
 8003de2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e50 <HAL_ADC_MspInit+0x390>)
 8003de4:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003de6:	4b19      	ldr	r3, [pc, #100]	@ (8003e4c <HAL_ADC_MspInit+0x38c>)
 8003de8:	2227      	movs	r2, #39	@ 0x27
 8003dea:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dec:	4b17      	ldr	r3, [pc, #92]	@ (8003e4c <HAL_ADC_MspInit+0x38c>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003df2:	4b16      	ldr	r3, [pc, #88]	@ (8003e4c <HAL_ADC_MspInit+0x38c>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003df8:	4b14      	ldr	r3, [pc, #80]	@ (8003e4c <HAL_ADC_MspInit+0x38c>)
 8003dfa:	2280      	movs	r2, #128	@ 0x80
 8003dfc:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003dfe:	4b13      	ldr	r3, [pc, #76]	@ (8003e4c <HAL_ADC_MspInit+0x38c>)
 8003e00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e04:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e06:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <HAL_ADC_MspInit+0x38c>)
 8003e08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e0c:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8003e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e4c <HAL_ADC_MspInit+0x38c>)
 8003e10:	2220      	movs	r2, #32
 8003e12:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003e14:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <HAL_ADC_MspInit+0x38c>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8003e1a:	480c      	ldr	r0, [pc, #48]	@ (8003e4c <HAL_ADC_MspInit+0x38c>)
 8003e1c:	f002 fe54 	bl	8006ac8 <HAL_DMA_Init>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_ADC_MspInit+0x36a>
      Error_Handler();
 8003e26:	f7ff fe21 	bl	8003a6c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a07      	ldr	r2, [pc, #28]	@ (8003e4c <HAL_ADC_MspInit+0x38c>)
 8003e2e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003e30:	4a06      	ldr	r2, [pc, #24]	@ (8003e4c <HAL_ADC_MspInit+0x38c>)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003e36:	bf00      	nop
 8003e38:	3790      	adds	r7, #144	@ 0x90
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	50000600 	.word	0x50000600
 8003e44:	20000bac 	.word	0x20000bac
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	20000624 	.word	0x20000624
 8003e50:	40020030 	.word	0x40020030

08003e54 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0a      	ldr	r2, [pc, #40]	@ (8003e8c <HAL_CORDIC_MspInit+0x38>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d10b      	bne.n	8003e7e <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003e66:	4b0a      	ldr	r3, [pc, #40]	@ (8003e90 <HAL_CORDIC_MspInit+0x3c>)
 8003e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e6a:	4a09      	ldr	r2, [pc, #36]	@ (8003e90 <HAL_CORDIC_MspInit+0x3c>)
 8003e6c:	f043 0308 	orr.w	r3, r3, #8
 8003e70:	6493      	str	r3, [r2, #72]	@ 0x48
 8003e72:	4b07      	ldr	r3, [pc, #28]	@ (8003e90 <HAL_CORDIC_MspInit+0x3c>)
 8003e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40020c00 	.word	0x40020c00
 8003e90:	40021000 	.word	0x40021000

08003e94 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08c      	sub	sp, #48	@ 0x30
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9c:	f107 031c 	add.w	r3, r7, #28
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	60da      	str	r2, [r3, #12]
 8003eaa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a5b      	ldr	r2, [pc, #364]	@ (8004020 <HAL_DAC_MspInit+0x18c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d159      	bne.n	8003f6a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8004024 <HAL_DAC_MspInit+0x190>)
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eba:	4a5a      	ldr	r2, [pc, #360]	@ (8004024 <HAL_DAC_MspInit+0x190>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ec2:	4b58      	ldr	r3, [pc, #352]	@ (8004024 <HAL_DAC_MspInit+0x190>)
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ece:	4b55      	ldr	r3, [pc, #340]	@ (8004024 <HAL_DAC_MspInit+0x190>)
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed2:	4a54      	ldr	r2, [pc, #336]	@ (8004024 <HAL_DAC_MspInit+0x190>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003eda:	4b52      	ldr	r3, [pc, #328]	@ (8004024 <HAL_DAC_MspInit+0x190>)
 8003edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = IMAX_Pin|IMAX2_Pin;
 8003ee6:	2330      	movs	r3, #48	@ 0x30
 8003ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eea:	2303      	movs	r3, #3
 8003eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef2:	f107 031c 	add.w	r3, r7, #28
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003efc:	f003 f856 	bl	8006fac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 8003f00:	4b49      	ldr	r3, [pc, #292]	@ (8004028 <HAL_DAC_MspInit+0x194>)
 8003f02:	4a4a      	ldr	r2, [pc, #296]	@ (800402c <HAL_DAC_MspInit+0x198>)
 8003f04:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003f06:	4b48      	ldr	r3, [pc, #288]	@ (8004028 <HAL_DAC_MspInit+0x194>)
 8003f08:	2206      	movs	r2, #6
 8003f0a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f0c:	4b46      	ldr	r3, [pc, #280]	@ (8004028 <HAL_DAC_MspInit+0x194>)
 8003f0e:	2210      	movs	r2, #16
 8003f10:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f12:	4b45      	ldr	r3, [pc, #276]	@ (8004028 <HAL_DAC_MspInit+0x194>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003f18:	4b43      	ldr	r3, [pc, #268]	@ (8004028 <HAL_DAC_MspInit+0x194>)
 8003f1a:	2280      	movs	r2, #128	@ 0x80
 8003f1c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f1e:	4b42      	ldr	r3, [pc, #264]	@ (8004028 <HAL_DAC_MspInit+0x194>)
 8003f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f24:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f26:	4b40      	ldr	r3, [pc, #256]	@ (8004028 <HAL_DAC_MspInit+0x194>)
 8003f28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f2c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8004028 <HAL_DAC_MspInit+0x194>)
 8003f30:	2220      	movs	r2, #32
 8003f32:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003f34:	4b3c      	ldr	r3, [pc, #240]	@ (8004028 <HAL_DAC_MspInit+0x194>)
 8003f36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003f3c:	483a      	ldr	r0, [pc, #232]	@ (8004028 <HAL_DAC_MspInit+0x194>)
 8003f3e:	f002 fdc3 	bl	8006ac8 <HAL_DMA_Init>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8003f48:	f7ff fd90 	bl	8003a6c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a36      	ldr	r2, [pc, #216]	@ (8004028 <HAL_DAC_MspInit+0x194>)
 8003f50:	609a      	str	r2, [r3, #8]
 8003f52:	4a35      	ldr	r2, [pc, #212]	@ (8004028 <HAL_DAC_MspInit+0x194>)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	2036      	movs	r0, #54	@ 0x36
 8003f5e:	f002 faa0 	bl	80064a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f62:	2036      	movs	r0, #54	@ 0x36
 8003f64:	f002 fab7 	bl	80064d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8003f68:	e055      	b.n	8004016 <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC2)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a30      	ldr	r2, [pc, #192]	@ (8004030 <HAL_DAC_MspInit+0x19c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d150      	bne.n	8004016 <HAL_DAC_MspInit+0x182>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003f74:	4b2b      	ldr	r3, [pc, #172]	@ (8004024 <HAL_DAC_MspInit+0x190>)
 8003f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f78:	4a2a      	ldr	r2, [pc, #168]	@ (8004024 <HAL_DAC_MspInit+0x190>)
 8003f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f80:	4b28      	ldr	r3, [pc, #160]	@ (8004024 <HAL_DAC_MspInit+0x190>)
 8003f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8c:	4b25      	ldr	r3, [pc, #148]	@ (8004024 <HAL_DAC_MspInit+0x190>)
 8003f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f90:	4a24      	ldr	r2, [pc, #144]	@ (8004024 <HAL_DAC_MspInit+0x190>)
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f98:	4b22      	ldr	r3, [pc, #136]	@ (8004024 <HAL_DAC_MspInit+0x190>)
 8003f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMIN_Pin;
 8003fa4:	2340      	movs	r3, #64	@ 0x40
 8003fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMIN_GPIO_Port, &GPIO_InitStruct);
 8003fb0:	f107 031c 	add.w	r3, r7, #28
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fba:	f002 fff7 	bl	8006fac <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel5;
 8003fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8004034 <HAL_DAC_MspInit+0x1a0>)
 8003fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8004038 <HAL_DAC_MspInit+0x1a4>)
 8003fc2:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8003fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004034 <HAL_DAC_MspInit+0x1a0>)
 8003fc6:	2229      	movs	r2, #41	@ 0x29
 8003fc8:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fca:	4b1a      	ldr	r3, [pc, #104]	@ (8004034 <HAL_DAC_MspInit+0x1a0>)
 8003fcc:	2210      	movs	r2, #16
 8003fce:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fd0:	4b18      	ldr	r3, [pc, #96]	@ (8004034 <HAL_DAC_MspInit+0x1a0>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003fd6:	4b17      	ldr	r3, [pc, #92]	@ (8004034 <HAL_DAC_MspInit+0x1a0>)
 8003fd8:	2280      	movs	r2, #128	@ 0x80
 8003fda:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fdc:	4b15      	ldr	r3, [pc, #84]	@ (8004034 <HAL_DAC_MspInit+0x1a0>)
 8003fde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fe2:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fe4:	4b13      	ldr	r3, [pc, #76]	@ (8004034 <HAL_DAC_MspInit+0x1a0>)
 8003fe6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fea:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8003fec:	4b11      	ldr	r3, [pc, #68]	@ (8004034 <HAL_DAC_MspInit+0x1a0>)
 8003fee:	2220      	movs	r2, #32
 8003ff0:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003ff2:	4b10      	ldr	r3, [pc, #64]	@ (8004034 <HAL_DAC_MspInit+0x1a0>)
 8003ff4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ff8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8003ffa:	480e      	ldr	r0, [pc, #56]	@ (8004034 <HAL_DAC_MspInit+0x1a0>)
 8003ffc:	f002 fd64 	bl	8006ac8 <HAL_DMA_Init>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_DAC_MspInit+0x176>
      Error_Handler();
 8004006:	f7ff fd31 	bl	8003a6c <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a09      	ldr	r2, [pc, #36]	@ (8004034 <HAL_DAC_MspInit+0x1a0>)
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	4a08      	ldr	r2, [pc, #32]	@ (8004034 <HAL_DAC_MspInit+0x1a0>)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8004016:	bf00      	nop
 8004018:	3730      	adds	r7, #48	@ 0x30
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	50000800 	.word	0x50000800
 8004024:	40021000 	.word	0x40021000
 8004028:	200006d4 	.word	0x200006d4
 800402c:	40020044 	.word	0x40020044
 8004030:	50000c00 	.word	0x50000c00
 8004034:	20000734 	.word	0x20000734
 8004038:	40020058 	.word	0x40020058

0800403c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a16      	ldr	r2, [pc, #88]	@ (80040a4 <HAL_TIM_PWM_MspInit+0x68>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d114      	bne.n	8004078 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800404e:	4b16      	ldr	r3, [pc, #88]	@ (80040a8 <HAL_TIM_PWM_MspInit+0x6c>)
 8004050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004052:	4a15      	ldr	r2, [pc, #84]	@ (80040a8 <HAL_TIM_PWM_MspInit+0x6c>)
 8004054:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004058:	6613      	str	r3, [r2, #96]	@ 0x60
 800405a:	4b13      	ldr	r3, [pc, #76]	@ (80040a8 <HAL_TIM_PWM_MspInit+0x6c>)
 800405c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800405e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004066:	2200      	movs	r2, #0
 8004068:	2100      	movs	r1, #0
 800406a:	2018      	movs	r0, #24
 800406c:	f002 fa19 	bl	80064a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004070:	2018      	movs	r0, #24
 8004072:	f002 fa30 	bl	80064d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004076:	e010      	b.n	800409a <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a0b      	ldr	r2, [pc, #44]	@ (80040ac <HAL_TIM_PWM_MspInit+0x70>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d10b      	bne.n	800409a <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004082:	4b09      	ldr	r3, [pc, #36]	@ (80040a8 <HAL_TIM_PWM_MspInit+0x6c>)
 8004084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004086:	4a08      	ldr	r2, [pc, #32]	@ (80040a8 <HAL_TIM_PWM_MspInit+0x6c>)
 8004088:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800408c:	6613      	str	r3, [r2, #96]	@ 0x60
 800408e:	4b06      	ldr	r3, [pc, #24]	@ (80040a8 <HAL_TIM_PWM_MspInit+0x6c>)
 8004090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004092:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]
}
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40012c00 	.word	0x40012c00
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40013400 	.word	0x40013400

080040b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a35      	ldr	r2, [pc, #212]	@ (8004194 <HAL_TIM_Base_MspInit+0xe4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d10c      	bne.n	80040dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040c2:	4b35      	ldr	r3, [pc, #212]	@ (8004198 <HAL_TIM_Base_MspInit+0xe8>)
 80040c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c6:	4a34      	ldr	r2, [pc, #208]	@ (8004198 <HAL_TIM_Base_MspInit+0xe8>)
 80040c8:	f043 0304 	orr.w	r3, r3, #4
 80040cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ce:	4b32      	ldr	r3, [pc, #200]	@ (8004198 <HAL_TIM_Base_MspInit+0xe8>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80040da:	e056      	b.n	800418a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a2e      	ldr	r2, [pc, #184]	@ (800419c <HAL_TIM_Base_MspInit+0xec>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d114      	bne.n	8004110 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80040e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004198 <HAL_TIM_Base_MspInit+0xe8>)
 80040e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004198 <HAL_TIM_Base_MspInit+0xe8>)
 80040ec:	f043 0310 	orr.w	r3, r3, #16
 80040f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80040f2:	4b29      	ldr	r3, [pc, #164]	@ (8004198 <HAL_TIM_Base_MspInit+0xe8>)
 80040f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80040fe:	2200      	movs	r2, #0
 8004100:	2100      	movs	r1, #0
 8004102:	2036      	movs	r0, #54	@ 0x36
 8004104:	f002 f9cd 	bl	80064a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004108:	2036      	movs	r0, #54	@ 0x36
 800410a:	f002 f9e4 	bl	80064d6 <HAL_NVIC_EnableIRQ>
}
 800410e:	e03c      	b.n	800418a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM7)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a22      	ldr	r2, [pc, #136]	@ (80041a0 <HAL_TIM_Base_MspInit+0xf0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d10c      	bne.n	8004134 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800411a:	4b1f      	ldr	r3, [pc, #124]	@ (8004198 <HAL_TIM_Base_MspInit+0xe8>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411e:	4a1e      	ldr	r2, [pc, #120]	@ (8004198 <HAL_TIM_Base_MspInit+0xe8>)
 8004120:	f043 0320 	orr.w	r3, r3, #32
 8004124:	6593      	str	r3, [r2, #88]	@ 0x58
 8004126:	4b1c      	ldr	r3, [pc, #112]	@ (8004198 <HAL_TIM_Base_MspInit+0xe8>)
 8004128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	697b      	ldr	r3, [r7, #20]
}
 8004132:	e02a      	b.n	800418a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM15)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1a      	ldr	r2, [pc, #104]	@ (80041a4 <HAL_TIM_Base_MspInit+0xf4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d114      	bne.n	8004168 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800413e:	4b16      	ldr	r3, [pc, #88]	@ (8004198 <HAL_TIM_Base_MspInit+0xe8>)
 8004140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004142:	4a15      	ldr	r2, [pc, #84]	@ (8004198 <HAL_TIM_Base_MspInit+0xe8>)
 8004144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004148:	6613      	str	r3, [r2, #96]	@ 0x60
 800414a:	4b13      	ldr	r3, [pc, #76]	@ (8004198 <HAL_TIM_Base_MspInit+0xe8>)
 800414c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800414e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004156:	2200      	movs	r2, #0
 8004158:	2100      	movs	r1, #0
 800415a:	2018      	movs	r0, #24
 800415c:	f002 f9a1 	bl	80064a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004160:	2018      	movs	r0, #24
 8004162:	f002 f9b8 	bl	80064d6 <HAL_NVIC_EnableIRQ>
}
 8004166:	e010      	b.n	800418a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM16)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a0e      	ldr	r2, [pc, #56]	@ (80041a8 <HAL_TIM_Base_MspInit+0xf8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d10b      	bne.n	800418a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004172:	4b09      	ldr	r3, [pc, #36]	@ (8004198 <HAL_TIM_Base_MspInit+0xe8>)
 8004174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004176:	4a08      	ldr	r2, [pc, #32]	@ (8004198 <HAL_TIM_Base_MspInit+0xe8>)
 8004178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800417c:	6613      	str	r3, [r2, #96]	@ 0x60
 800417e:	4b06      	ldr	r3, [pc, #24]	@ (8004198 <HAL_TIM_Base_MspInit+0xe8>)
 8004180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
}
 800418a:	bf00      	nop
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40000800 	.word	0x40000800
 8004198:	40021000 	.word	0x40021000
 800419c:	40001000 	.word	0x40001000
 80041a0:	40001400 	.word	0x40001400
 80041a4:	40014000 	.word	0x40014000
 80041a8:	40014400 	.word	0x40014400

080041ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	@ 0x28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b4:	f107 0314 	add.w	r3, r7, #20
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	609a      	str	r2, [r3, #8]
 80041c0:	60da      	str	r2, [r3, #12]
 80041c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a33      	ldr	r2, [pc, #204]	@ (8004298 <HAL_TIM_MspPostInit+0xec>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d11c      	bne.n	8004208 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ce:	4b33      	ldr	r3, [pc, #204]	@ (800429c <HAL_TIM_MspPostInit+0xf0>)
 80041d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d2:	4a32      	ldr	r2, [pc, #200]	@ (800429c <HAL_TIM_MspPostInit+0xf0>)
 80041d4:	f043 0304 	orr.w	r3, r3, #4
 80041d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041da:	4b30      	ldr	r3, [pc, #192]	@ (800429c <HAL_TIM_MspPostInit+0xf0>)
 80041dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DEADTIME_TR_Pin;
 80041e6:	2301      	movs	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ea:	2302      	movs	r3, #2
 80041ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041f2:	2302      	movs	r3, #2
 80041f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80041f6:	2302      	movs	r3, #2
 80041f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_TR_GPIO_Port, &GPIO_InitStruct);
 80041fa:	f107 0314 	add.w	r3, r7, #20
 80041fe:	4619      	mov	r1, r3
 8004200:	4827      	ldr	r0, [pc, #156]	@ (80042a0 <HAL_TIM_MspPostInit+0xf4>)
 8004202:	f002 fed3 	bl	8006fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004206:	e043      	b.n	8004290 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a25      	ldr	r2, [pc, #148]	@ (80042a4 <HAL_TIM_MspPostInit+0xf8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d11d      	bne.n	800424e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004212:	4b22      	ldr	r3, [pc, #136]	@ (800429c <HAL_TIM_MspPostInit+0xf0>)
 8004214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004216:	4a21      	ldr	r2, [pc, #132]	@ (800429c <HAL_TIM_MspPostInit+0xf0>)
 8004218:	f043 0308 	orr.w	r3, r3, #8
 800421c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800421e:	4b1f      	ldr	r3, [pc, #124]	@ (800429c <HAL_TIM_MspPostInit+0xf0>)
 8004220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 800422a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800422e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004230:	2302      	movs	r3, #2
 8004232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004234:	2300      	movs	r3, #0
 8004236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004238:	2300      	movs	r3, #0
 800423a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800423c:	2302      	movs	r3, #2
 800423e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8004240:	f107 0314 	add.w	r3, r7, #20
 8004244:	4619      	mov	r1, r3
 8004246:	4818      	ldr	r0, [pc, #96]	@ (80042a8 <HAL_TIM_MspPostInit+0xfc>)
 8004248:	f002 feb0 	bl	8006fac <HAL_GPIO_Init>
}
 800424c:	e020      	b.n	8004290 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a16      	ldr	r2, [pc, #88]	@ (80042ac <HAL_TIM_MspPostInit+0x100>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d11b      	bne.n	8004290 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004258:	4b10      	ldr	r3, [pc, #64]	@ (800429c <HAL_TIM_MspPostInit+0xf0>)
 800425a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425c:	4a0f      	ldr	r2, [pc, #60]	@ (800429c <HAL_TIM_MspPostInit+0xf0>)
 800425e:	f043 0304 	orr.w	r3, r3, #4
 8004262:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004264:	4b0d      	ldr	r3, [pc, #52]	@ (800429c <HAL_TIM_MspPostInit+0xf0>)
 8004266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEADTIME_HC_Pin;
 8004270:	2380      	movs	r3, #128	@ 0x80
 8004272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004274:	2302      	movs	r3, #2
 8004276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800427c:	2302      	movs	r3, #2
 800427e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004280:	2304      	movs	r3, #4
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_HC_GPIO_Port, &GPIO_InitStruct);
 8004284:	f107 0314 	add.w	r3, r7, #20
 8004288:	4619      	mov	r1, r3
 800428a:	4805      	ldr	r0, [pc, #20]	@ (80042a0 <HAL_TIM_MspPostInit+0xf4>)
 800428c:	f002 fe8e 	bl	8006fac <HAL_GPIO_Init>
}
 8004290:	bf00      	nop
 8004292:	3728      	adds	r7, #40	@ 0x28
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40021000 	.word	0x40021000
 80042a0:	48000800 	.word	0x48000800
 80042a4:	40000800 	.word	0x40000800
 80042a8:	48000c00 	.word	0x48000c00
 80042ac:	40013400 	.word	0x40013400

080042b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b09e      	sub	sp, #120	@ 0x78
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	609a      	str	r2, [r3, #8]
 80042c4:	60da      	str	r2, [r3, #12]
 80042c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042c8:	f107 0310 	add.w	r3, r7, #16
 80042cc:	2254      	movs	r2, #84	@ 0x54
 80042ce:	2100      	movs	r1, #0
 80042d0:	4618      	mov	r0, r3
 80042d2:	f00d fd30 	bl	8011d36 <memset>
  if(huart->Instance==UART4)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1f      	ldr	r2, [pc, #124]	@ (8004358 <HAL_UART_MspInit+0xa8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d136      	bne.n	800434e <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80042e0:	2308      	movs	r3, #8
 80042e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_HSI;
 80042e4:	2380      	movs	r3, #128	@ 0x80
 80042e6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042e8:	f107 0310 	add.w	r3, r7, #16
 80042ec:	4618      	mov	r0, r3
 80042ee:	f005 fb41 	bl	8009974 <HAL_RCCEx_PeriphCLKConfig>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80042f8:	f7ff fbb8 	bl	8003a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80042fc:	4b17      	ldr	r3, [pc, #92]	@ (800435c <HAL_UART_MspInit+0xac>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004300:	4a16      	ldr	r2, [pc, #88]	@ (800435c <HAL_UART_MspInit+0xac>)
 8004302:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004306:	6593      	str	r3, [r2, #88]	@ 0x58
 8004308:	4b14      	ldr	r3, [pc, #80]	@ (800435c <HAL_UART_MspInit+0xac>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004314:	4b11      	ldr	r3, [pc, #68]	@ (800435c <HAL_UART_MspInit+0xac>)
 8004316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004318:	4a10      	ldr	r2, [pc, #64]	@ (800435c <HAL_UART_MspInit+0xac>)
 800431a:	f043 0304 	orr.w	r3, r3, #4
 800431e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004320:	4b0e      	ldr	r3, [pc, #56]	@ (800435c <HAL_UART_MspInit+0xac>)
 8004322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800432c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004330:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004332:	2302      	movs	r3, #2
 8004334:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004336:	2300      	movs	r3, #0
 8004338:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800433a:	2300      	movs	r3, #0
 800433c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800433e:	2305      	movs	r3, #5
 8004340:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004342:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004346:	4619      	mov	r1, r3
 8004348:	4805      	ldr	r0, [pc, #20]	@ (8004360 <HAL_UART_MspInit+0xb0>)
 800434a:	f002 fe2f 	bl	8006fac <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 800434e:	bf00      	nop
 8004350:	3778      	adds	r7, #120	@ 0x78
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40004c00 	.word	0x40004c00
 800435c:	40021000 	.word	0x40021000
 8004360:	48000800 	.word	0x48000800

08004364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004368:	bf00      	nop
 800436a:	e7fd      	b.n	8004368 <NMI_Handler+0x4>

0800436c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004370:	bf00      	nop
 8004372:	e7fd      	b.n	8004370 <HardFault_Handler+0x4>

08004374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004378:	bf00      	nop
 800437a:	e7fd      	b.n	8004378 <MemManage_Handler+0x4>

0800437c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004380:	bf00      	nop
 8004382:	e7fd      	b.n	8004380 <BusFault_Handler+0x4>

08004384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <UsageFault_Handler+0x4>

0800438c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004390:	bf00      	nop
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800439a:	b480      	push	{r7}
 800439c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800439e:	bf00      	nop
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043ba:	f000 f9af 	bl	800471c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043be:	bf00      	nop
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80043c8:	4802      	ldr	r0, [pc, #8]	@ (80043d4 <DMA1_Channel1_IRQHandler+0x10>)
 80043ca:	f002 fca0 	bl	8006d0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80043ce:	bf00      	nop
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000564 	.word	0x20000564

080043d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80043dc:	4802      	ldr	r0, [pc, #8]	@ (80043e8 <DMA1_Channel2_IRQHandler+0x10>)
 80043de:	f002 fc96 	bl	8006d0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	200005c4 	.word	0x200005c4

080043ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80043f0:	4802      	ldr	r0, [pc, #8]	@ (80043fc <DMA1_Channel3_IRQHandler+0x10>)
 80043f2:	f002 fc8c 	bl	8006d0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000624 	.word	0x20000624

08004400 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004404:	4802      	ldr	r0, [pc, #8]	@ (8004410 <DMA1_Channel4_IRQHandler+0x10>)
 8004406:	f002 fc82 	bl	8006d0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800440a:	bf00      	nop
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	200006d4 	.word	0x200006d4

08004414 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8004418:	4802      	ldr	r0, [pc, #8]	@ (8004424 <DMA1_Channel5_IRQHandler+0x10>)
 800441a:	f002 fc78 	bl	8006d0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800441e:	bf00      	nop
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000734 	.word	0x20000734

08004428 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800442c:	4802      	ldr	r0, [pc, #8]	@ (8004438 <USB_LP_IRQHandler+0x10>)
 800442e:	f003 f879 	bl	8007524 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004432:	bf00      	nop
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	2000208c 	.word	0x2000208c

0800443c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004440:	4803      	ldr	r0, [pc, #12]	@ (8004450 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8004442:	f005 ffbd 	bl	800a3c0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8004446:	4803      	ldr	r0, [pc, #12]	@ (8004454 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8004448:	f005 ffba 	bl	800a3c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800444c:	bf00      	nop
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20000794 	.word	0x20000794
 8004454:	20000910 	.word	0x20000910

08004458 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
					HEAT_SINK_TEMP = (ADC3_DMA_BUFFER[4]/4096)*3.3;//(Low_pass_filter(ADC3_DMA_BUFFER[4], HEAT_SINK_TEMP)/4096)*3.3;
					FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
					}*/

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800445c:	4803      	ldr	r0, [pc, #12]	@ (800446c <TIM6_DAC_IRQHandler+0x14>)
 800445e:	f005 ffaf 	bl	800a3c0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8004462:	4803      	ldr	r0, [pc, #12]	@ (8004470 <TIM6_DAC_IRQHandler+0x18>)
 8004464:	f002 f8e0 	bl	8006628 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004468:	bf00      	nop
 800446a:	bd80      	pop	{r7, pc}
 800446c:	2000082c 	.word	0x2000082c
 8004470:	200006ac 	.word	0x200006ac

08004474 <_getpid>:
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
 8004478:	2301      	movs	r3, #1
 800447a:	4618      	mov	r0, r3
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <_kill>:
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
 800448e:	f00d fcb7 	bl	8011e00 <__errno>
 8004492:	4603      	mov	r3, r0
 8004494:	2216      	movs	r2, #22
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	f04f 33ff 	mov.w	r3, #4294967295
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <_exit>:
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	f04f 31ff 	mov.w	r1, #4294967295
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff ffe7 	bl	8004484 <_kill>
 80044b6:	bf00      	nop
 80044b8:	e7fd      	b.n	80044b6 <_exit+0x12>

080044ba <_read>:
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b086      	sub	sp, #24
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e00a      	b.n	80044e2 <_read+0x28>
 80044cc:	f3af 8000 	nop.w
 80044d0:	4601      	mov	r1, r0
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	60ba      	str	r2, [r7, #8]
 80044d8:	b2ca      	uxtb	r2, r1
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	3301      	adds	r3, #1
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	dbf0      	blt.n	80044cc <_read+0x12>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <_write>:
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	e009      	b.n	800451a <_write+0x26>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	60ba      	str	r2, [r7, #8]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f3af 8000 	nop.w
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	3301      	adds	r3, #1
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	dbf1      	blt.n	8004506 <_write+0x12>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <_close>:
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	f04f 33ff 	mov.w	r3, #4294967295
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <_fstat>:
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	2300      	movs	r3, #0
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <_isatty>:
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	2301      	movs	r3, #1
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <_lseek>:
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	607a      	str	r2, [r7, #4]
 8004586:	2300      	movs	r3, #0
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <_sbrk>:
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	4a14      	ldr	r2, [pc, #80]	@ (80045f0 <_sbrk+0x5c>)
 800459e:	4b15      	ldr	r3, [pc, #84]	@ (80045f4 <_sbrk+0x60>)
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	4b13      	ldr	r3, [pc, #76]	@ (80045f8 <_sbrk+0x64>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <_sbrk+0x22>
 80045b0:	4b11      	ldr	r3, [pc, #68]	@ (80045f8 <_sbrk+0x64>)
 80045b2:	4a12      	ldr	r2, [pc, #72]	@ (80045fc <_sbrk+0x68>)
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	4b10      	ldr	r3, [pc, #64]	@ (80045f8 <_sbrk+0x64>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d207      	bcs.n	80045d4 <_sbrk+0x40>
 80045c4:	f00d fc1c 	bl	8011e00 <__errno>
 80045c8:	4603      	mov	r3, r0
 80045ca:	220c      	movs	r2, #12
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295
 80045d2:	e009      	b.n	80045e8 <_sbrk+0x54>
 80045d4:	4b08      	ldr	r3, [pc, #32]	@ (80045f8 <_sbrk+0x64>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	4b07      	ldr	r3, [pc, #28]	@ (80045f8 <_sbrk+0x64>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4413      	add	r3, r2
 80045e2:	4a05      	ldr	r2, [pc, #20]	@ (80045f8 <_sbrk+0x64>)
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20020000 	.word	0x20020000
 80045f4:	00000400 	.word	0x00000400
 80045f8:	20000bb0 	.word	0x20000bb0
 80045fc:	200026d8 	.word	0x200026d8

08004600 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004604:	4b06      	ldr	r3, [pc, #24]	@ (8004620 <SystemInit+0x20>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460a:	4a05      	ldr	r2, [pc, #20]	@ (8004620 <SystemInit+0x20>)
 800460c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004610:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004614:	bf00      	nop
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <Reset_Handler>:
 8004624:	480d      	ldr	r0, [pc, #52]	@ (800465c <LoopForever+0x2>)
 8004626:	4685      	mov	sp, r0
 8004628:	f7ff ffea 	bl	8004600 <SystemInit>
 800462c:	480c      	ldr	r0, [pc, #48]	@ (8004660 <LoopForever+0x6>)
 800462e:	490d      	ldr	r1, [pc, #52]	@ (8004664 <LoopForever+0xa>)
 8004630:	4a0d      	ldr	r2, [pc, #52]	@ (8004668 <LoopForever+0xe>)
 8004632:	2300      	movs	r3, #0
 8004634:	e002      	b.n	800463c <LoopCopyDataInit>

08004636 <CopyDataInit>:
 8004636:	58d4      	ldr	r4, [r2, r3]
 8004638:	50c4      	str	r4, [r0, r3]
 800463a:	3304      	adds	r3, #4

0800463c <LoopCopyDataInit>:
 800463c:	18c4      	adds	r4, r0, r3
 800463e:	428c      	cmp	r4, r1
 8004640:	d3f9      	bcc.n	8004636 <CopyDataInit>
 8004642:	4a0a      	ldr	r2, [pc, #40]	@ (800466c <LoopForever+0x12>)
 8004644:	4c0a      	ldr	r4, [pc, #40]	@ (8004670 <LoopForever+0x16>)
 8004646:	2300      	movs	r3, #0
 8004648:	e001      	b.n	800464e <LoopFillZerobss>

0800464a <FillZerobss>:
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	3204      	adds	r2, #4

0800464e <LoopFillZerobss>:
 800464e:	42a2      	cmp	r2, r4
 8004650:	d3fb      	bcc.n	800464a <FillZerobss>
 8004652:	f00d fbdb 	bl	8011e0c <__libc_init_array>
 8004656:	f7fc fcef 	bl	8001038 <main>

0800465a <LoopForever>:
 800465a:	e7fe      	b.n	800465a <LoopForever>
 800465c:	20020000 	.word	0x20020000
 8004660:	20000000 	.word	0x20000000
 8004664:	20000398 	.word	0x20000398
 8004668:	08017978 	.word	0x08017978
 800466c:	20000398 	.word	0x20000398
 8004670:	200026d4 	.word	0x200026d4

08004674 <ADC1_2_IRQHandler>:
 8004674:	e7fe      	b.n	8004674 <ADC1_2_IRQHandler>

08004676 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004680:	2003      	movs	r0, #3
 8004682:	f001 ff03 	bl	800648c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004686:	2000      	movs	r0, #0
 8004688:	f000 f80e 	bl	80046a8 <HAL_InitTick>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	71fb      	strb	r3, [r7, #7]
 8004696:	e001      	b.n	800469c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004698:	f7ff f9ee 	bl	8003a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800469c:	79fb      	ldrb	r3, [r7, #7]

}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80046b4:	4b16      	ldr	r3, [pc, #88]	@ (8004710 <HAL_InitTick+0x68>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d022      	beq.n	8004702 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80046bc:	4b15      	ldr	r3, [pc, #84]	@ (8004714 <HAL_InitTick+0x6c>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4b13      	ldr	r3, [pc, #76]	@ (8004710 <HAL_InitTick+0x68>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80046c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	4618      	mov	r0, r3
 80046d2:	f001 ff0e 	bl	80064f2 <HAL_SYSTICK_Config>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10f      	bne.n	80046fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b0f      	cmp	r3, #15
 80046e0:	d809      	bhi.n	80046f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046e2:	2200      	movs	r2, #0
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	f04f 30ff 	mov.w	r0, #4294967295
 80046ea:	f001 feda 	bl	80064a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004718 <HAL_InitTick+0x70>)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	e007      	b.n	8004706 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	73fb      	strb	r3, [r7, #15]
 80046fa:	e004      	b.n	8004706 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
 8004700:	e001      	b.n	8004706 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004706:	7bfb      	ldrb	r3, [r7, #15]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000044 	.word	0x20000044
 8004714:	2000003c 	.word	0x2000003c
 8004718:	20000040 	.word	0x20000040

0800471c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004720:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <HAL_IncTick+0x1c>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b05      	ldr	r3, [pc, #20]	@ (800473c <HAL_IncTick+0x20>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4413      	add	r3, r2
 800472a:	4a03      	ldr	r2, [pc, #12]	@ (8004738 <HAL_IncTick+0x1c>)
 800472c:	6013      	str	r3, [r2, #0]
}
 800472e:	bf00      	nop
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	20000bb4 	.word	0x20000bb4
 800473c:	20000044 	.word	0x20000044

08004740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  return uwTick;
 8004744:	4b03      	ldr	r3, [pc, #12]	@ (8004754 <HAL_GetTick+0x14>)
 8004746:	681b      	ldr	r3, [r3, #0]
}
 8004748:	4618      	mov	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000bb4 	.word	0x20000bb4

08004758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004760:	f7ff ffee 	bl	8004740 <HAL_GetTick>
 8004764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d004      	beq.n	800477c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004772:	4b09      	ldr	r3, [pc, #36]	@ (8004798 <HAL_Delay+0x40>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4413      	add	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800477c:	bf00      	nop
 800477e:	f7ff ffdf 	bl	8004740 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	429a      	cmp	r2, r3
 800478c:	d8f7      	bhi.n	800477e <HAL_Delay+0x26>
  {
  }
}
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000044 	.word	0x20000044

0800479c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	609a      	str	r2, [r3, #8]
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	609a      	str	r2, [r3, #8]
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3360      	adds	r3, #96	@ 0x60
 8004816:	461a      	mov	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4b08      	ldr	r3, [pc, #32]	@ (8004848 <LL_ADC_SetOffset+0x44>)
 8004826:	4013      	ands	r3, r2
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	4313      	orrs	r3, r2
 8004834:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800483c:	bf00      	nop
 800483e:	371c      	adds	r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	03fff000 	.word	0x03fff000

0800484c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3360      	adds	r3, #96	@ 0x60
 800485a:	461a      	mov	r2, r3
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3360      	adds	r3, #96	@ 0x60
 8004888:	461a      	mov	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	431a      	orrs	r2, r3
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80048a2:	bf00      	nop
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b087      	sub	sp, #28
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3360      	adds	r3, #96	@ 0x60
 80048be:	461a      	mov	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3360      	adds	r3, #96	@ 0x60
 80048f4:	461a      	mov	r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	431a      	orrs	r2, r3
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	615a      	str	r2, [r3, #20]
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004966:	b480      	push	{r7}
 8004968:	b087      	sub	sp, #28
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3330      	adds	r3, #48	@ 0x30
 8004976:	461a      	mov	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	0a1b      	lsrs	r3, r3, #8
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	4413      	add	r3, r2
 8004984:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f003 031f 	and.w	r3, r3, #31
 8004990:	211f      	movs	r1, #31
 8004992:	fa01 f303 	lsl.w	r3, r1, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	401a      	ands	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	0e9b      	lsrs	r3, r3, #26
 800499e:	f003 011f 	and.w	r1, r3, #31
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ac:	431a      	orrs	r2, r3
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80049be:	b480      	push	{r7}
 80049c0:	b087      	sub	sp, #28
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3314      	adds	r3, #20
 80049ce:	461a      	mov	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	0e5b      	lsrs	r3, r3, #25
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	4413      	add	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	0d1b      	lsrs	r3, r3, #20
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	2107      	movs	r1, #7
 80049ec:	fa01 f303 	lsl.w	r3, r1, r3
 80049f0:	43db      	mvns	r3, r3
 80049f2:	401a      	ands	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	0d1b      	lsrs	r3, r3, #20
 80049f8:	f003 031f 	and.w	r3, r3, #31
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004a02:	431a      	orrs	r2, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a08:	bf00      	nop
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	401a      	ands	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f003 0318 	and.w	r3, r3, #24
 8004a36:	4908      	ldr	r1, [pc, #32]	@ (8004a58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a38:	40d9      	lsrs	r1, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	400b      	ands	r3, r1
 8004a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a42:	431a      	orrs	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004a4a:	bf00      	nop
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	0007ffff 	.word	0x0007ffff

08004a5c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 031f 	and.w	r3, r3, #31
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004a88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6093      	str	r3, [r2, #8]
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ab0:	d101      	bne.n	8004ab6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004ad4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ad8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004afc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b00:	d101      	bne.n	8004b06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b28:	f043 0201 	orr.w	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b50:	f043 0202 	orr.w	r2, r3, #2
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <LL_ADC_IsEnabled+0x18>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e000      	b.n	8004b7e <LL_ADC_IsEnabled+0x1a>
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d101      	bne.n	8004ba2 <LL_ADC_IsDisableOngoing+0x18>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <LL_ADC_IsDisableOngoing+0x1a>
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004bc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bc4:	f043 0204 	orr.w	r2, r3, #4
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d101      	bne.n	8004bf0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d101      	bne.n	8004c16 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c24:	b590      	push	{r4, r7, lr}
 8004c26:	b089      	sub	sp, #36	@ 0x24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e1a9      	b.n	8004f92 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d109      	bne.n	8004c60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7fe ff37 	bl	8003ac0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff ff19 	bl	8004a9c <LL_ADC_IsDeepPowerDownEnabled>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d004      	beq.n	8004c7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff feff 	bl	8004a78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff ff34 	bl	8004aec <LL_ADC_IsInternalRegulatorEnabled>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d115      	bne.n	8004cb6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff ff18 	bl	8004ac4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c94:	4b9c      	ldr	r3, [pc, #624]	@ (8004f08 <HAL_ADC_Init+0x2e4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	099b      	lsrs	r3, r3, #6
 8004c9a:	4a9c      	ldr	r2, [pc, #624]	@ (8004f0c <HAL_ADC_Init+0x2e8>)
 8004c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca0:	099b      	lsrs	r3, r3, #6
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ca8:	e002      	b.n	8004cb0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f9      	bne.n	8004caa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff ff16 	bl	8004aec <LL_ADC_IsInternalRegulatorEnabled>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10d      	bne.n	8004ce2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cca:	f043 0210 	orr.w	r2, r3, #16
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd6:	f043 0201 	orr.w	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff ff76 	bl	8004bd8 <LL_ADC_REG_IsConversionOngoing>
 8004cec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f040 8142 	bne.w	8004f80 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f040 813e 	bne.w	8004f80 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d08:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004d0c:	f043 0202 	orr.w	r2, r3, #2
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff ff23 	bl	8004b64 <LL_ADC_IsEnabled>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d141      	bne.n	8004da8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d2c:	d004      	beq.n	8004d38 <HAL_ADC_Init+0x114>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a77      	ldr	r2, [pc, #476]	@ (8004f10 <HAL_ADC_Init+0x2ec>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d10f      	bne.n	8004d58 <HAL_ADC_Init+0x134>
 8004d38:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d3c:	f7ff ff12 	bl	8004b64 <LL_ADC_IsEnabled>
 8004d40:	4604      	mov	r4, r0
 8004d42:	4873      	ldr	r0, [pc, #460]	@ (8004f10 <HAL_ADC_Init+0x2ec>)
 8004d44:	f7ff ff0e 	bl	8004b64 <LL_ADC_IsEnabled>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4323      	orrs	r3, r4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e012      	b.n	8004d7e <HAL_ADC_Init+0x15a>
 8004d58:	486e      	ldr	r0, [pc, #440]	@ (8004f14 <HAL_ADC_Init+0x2f0>)
 8004d5a:	f7ff ff03 	bl	8004b64 <LL_ADC_IsEnabled>
 8004d5e:	4604      	mov	r4, r0
 8004d60:	486d      	ldr	r0, [pc, #436]	@ (8004f18 <HAL_ADC_Init+0x2f4>)
 8004d62:	f7ff feff 	bl	8004b64 <LL_ADC_IsEnabled>
 8004d66:	4603      	mov	r3, r0
 8004d68:	431c      	orrs	r4, r3
 8004d6a:	486c      	ldr	r0, [pc, #432]	@ (8004f1c <HAL_ADC_Init+0x2f8>)
 8004d6c:	f7ff fefa 	bl	8004b64 <LL_ADC_IsEnabled>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4323      	orrs	r3, r4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf0c      	ite	eq
 8004d78:	2301      	moveq	r3, #1
 8004d7a:	2300      	movne	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d012      	beq.n	8004da8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d8a:	d004      	beq.n	8004d96 <HAL_ADC_Init+0x172>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a5f      	ldr	r2, [pc, #380]	@ (8004f10 <HAL_ADC_Init+0x2ec>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d101      	bne.n	8004d9a <HAL_ADC_Init+0x176>
 8004d96:	4a62      	ldr	r2, [pc, #392]	@ (8004f20 <HAL_ADC_Init+0x2fc>)
 8004d98:	e000      	b.n	8004d9c <HAL_ADC_Init+0x178>
 8004d9a:	4a62      	ldr	r2, [pc, #392]	@ (8004f24 <HAL_ADC_Init+0x300>)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f7ff fcfa 	bl	800479c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	7f5b      	ldrb	r3, [r3, #29]
 8004dac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004db2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004db8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004dbe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004dc6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d106      	bne.n	8004de4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	045b      	lsls	r3, r3, #17
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d009      	beq.n	8004e00 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	4b48      	ldr	r3, [pc, #288]	@ (8004f28 <HAL_ADC_Init+0x304>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	69b9      	ldr	r1, [r7, #24]
 8004e10:	430b      	orrs	r3, r1
 8004e12:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fee5 	bl	8004bfe <LL_ADC_INJ_IsConversionOngoing>
 8004e34:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d17f      	bne.n	8004f3c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d17c      	bne.n	8004f3c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004e46:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e4e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e5e:	f023 0302 	bic.w	r3, r3, #2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	69b9      	ldr	r1, [r7, #24]
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d017      	beq.n	8004ea4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004e82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e8c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004e90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6911      	ldr	r1, [r2, #16]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004ea2:	e013      	b.n	8004ecc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004eb2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004ec4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ec8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d12a      	bne.n	8004f2c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ee0:	f023 0304 	bic.w	r3, r3, #4
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004eec:	4311      	orrs	r1, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004ef2:	4311      	orrs	r1, r2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f042 0201 	orr.w	r2, r2, #1
 8004f04:	611a      	str	r2, [r3, #16]
 8004f06:	e019      	b.n	8004f3c <HAL_ADC_Init+0x318>
 8004f08:	2000003c 	.word	0x2000003c
 8004f0c:	053e2d63 	.word	0x053e2d63
 8004f10:	50000100 	.word	0x50000100
 8004f14:	50000400 	.word	0x50000400
 8004f18:	50000500 	.word	0x50000500
 8004f1c:	50000600 	.word	0x50000600
 8004f20:	50000300 	.word	0x50000300
 8004f24:	50000700 	.word	0x50000700
 8004f28:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d10c      	bne.n	8004f5e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4a:	f023 010f 	bic.w	r1, r3, #15
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	1e5a      	subs	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f5c:	e007      	b.n	8004f6e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 020f 	bic.w	r2, r2, #15
 8004f6c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f72:	f023 0303 	bic.w	r3, r3, #3
 8004f76:	f043 0201 	orr.w	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f7e:	e007      	b.n	8004f90 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f84:	f043 0210 	orr.w	r2, r3, #16
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f90:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3724      	adds	r7, #36	@ 0x24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd90      	pop	{r4, r7, pc}
 8004f9a:	bf00      	nop

08004f9c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fb0:	d004      	beq.n	8004fbc <HAL_ADC_Start_DMA+0x20>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a5a      	ldr	r2, [pc, #360]	@ (8005120 <HAL_ADC_Start_DMA+0x184>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d101      	bne.n	8004fc0 <HAL_ADC_Start_DMA+0x24>
 8004fbc:	4b59      	ldr	r3, [pc, #356]	@ (8005124 <HAL_ADC_Start_DMA+0x188>)
 8004fbe:	e000      	b.n	8004fc2 <HAL_ADC_Start_DMA+0x26>
 8004fc0:	4b59      	ldr	r3, [pc, #356]	@ (8005128 <HAL_ADC_Start_DMA+0x18c>)
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff fd4a 	bl	8004a5c <LL_ADC_GetMultimode>
 8004fc8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fe02 	bl	8004bd8 <LL_ADC_REG_IsConversionOngoing>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f040 809b 	bne.w	8005112 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_ADC_Start_DMA+0x4e>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e096      	b.n	8005118 <HAL_ADC_Start_DMA+0x17c>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a4d      	ldr	r2, [pc, #308]	@ (800512c <HAL_ADC_Start_DMA+0x190>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d008      	beq.n	800500e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b05      	cmp	r3, #5
 8005006:	d002      	beq.n	800500e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	2b09      	cmp	r3, #9
 800500c:	d17a      	bne.n	8005104 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fcec 	bl	80059ec <ADC_Enable>
 8005014:	4603      	mov	r3, r0
 8005016:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005018:	7dfb      	ldrb	r3, [r7, #23]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d16d      	bne.n	80050fa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005022:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a3a      	ldr	r2, [pc, #232]	@ (8005120 <HAL_ADC_Start_DMA+0x184>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d009      	beq.n	8005050 <HAL_ADC_Start_DMA+0xb4>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a3b      	ldr	r2, [pc, #236]	@ (8005130 <HAL_ADC_Start_DMA+0x194>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d002      	beq.n	800504c <HAL_ADC_Start_DMA+0xb0>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	e003      	b.n	8005054 <HAL_ADC_Start_DMA+0xb8>
 800504c:	4b39      	ldr	r3, [pc, #228]	@ (8005134 <HAL_ADC_Start_DMA+0x198>)
 800504e:	e001      	b.n	8005054 <HAL_ADC_Start_DMA+0xb8>
 8005050:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	4293      	cmp	r3, r2
 800505a:	d002      	beq.n	8005062 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d105      	bne.n	800506e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005066:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005072:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d006      	beq.n	8005088 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800507e:	f023 0206 	bic.w	r2, r3, #6
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	661a      	str	r2, [r3, #96]	@ 0x60
 8005086:	e002      	b.n	800508e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005092:	4a29      	ldr	r2, [pc, #164]	@ (8005138 <HAL_ADC_Start_DMA+0x19c>)
 8005094:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509a:	4a28      	ldr	r2, [pc, #160]	@ (800513c <HAL_ADC_Start_DMA+0x1a0>)
 800509c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a2:	4a27      	ldr	r2, [pc, #156]	@ (8005140 <HAL_ADC_Start_DMA+0x1a4>)
 80050a4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	221c      	movs	r2, #28
 80050ac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0210 	orr.w	r2, r2, #16
 80050c4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0201 	orr.w	r2, r2, #1
 80050d4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3340      	adds	r3, #64	@ 0x40
 80050e0:	4619      	mov	r1, r3
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f001 fd97 	bl	8006c18 <HAL_DMA_Start_IT>
 80050ea:	4603      	mov	r3, r0
 80050ec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff fd5c 	bl	8004bb0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80050f8:	e00d      	b.n	8005116 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005102:	e008      	b.n	8005116 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005110:	e001      	b.n	8005116 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005112:	2302      	movs	r3, #2
 8005114:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005116:	7dfb      	ldrb	r3, [r7, #23]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	50000100 	.word	0x50000100
 8005124:	50000300 	.word	0x50000300
 8005128:	50000700 	.word	0x50000700
 800512c:	50000600 	.word	0x50000600
 8005130:	50000500 	.word	0x50000500
 8005134:	50000400 	.word	0x50000400
 8005138:	08005bd7 	.word	0x08005bd7
 800513c:	08005caf 	.word	0x08005caf
 8005140:	08005ccb 	.word	0x08005ccb

08005144 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b0b6      	sub	sp, #216	@ 0xd8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005186:	2b01      	cmp	r3, #1
 8005188:	d102      	bne.n	8005190 <HAL_ADC_ConfigChannel+0x24>
 800518a:	2302      	movs	r3, #2
 800518c:	f000 bc13 	b.w	80059b6 <HAL_ADC_ConfigChannel+0x84a>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fd1b 	bl	8004bd8 <LL_ADC_REG_IsConversionOngoing>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f040 83f3 	bne.w	8005990 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6859      	ldr	r1, [r3, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f7ff fbd5 	bl	8004966 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff fd09 	bl	8004bd8 <LL_ADC_REG_IsConversionOngoing>
 80051c6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff fd15 	bl	8004bfe <LL_ADC_INJ_IsConversionOngoing>
 80051d4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f040 81d9 	bne.w	8005594 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f040 81d4 	bne.w	8005594 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051f4:	d10f      	bne.n	8005216 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2200      	movs	r2, #0
 8005200:	4619      	mov	r1, r3
 8005202:	f7ff fbdc 	bl	80049be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff fb83 	bl	800491a <LL_ADC_SetSamplingTimeCommonConfig>
 8005214:	e00e      	b.n	8005234 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6818      	ldr	r0, [r3, #0]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	6819      	ldr	r1, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	461a      	mov	r2, r3
 8005224:	f7ff fbcb 	bl	80049be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2100      	movs	r1, #0
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff fb73 	bl	800491a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	695a      	ldr	r2, [r3, #20]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	08db      	lsrs	r3, r3, #3
 8005240:	f003 0303 	and.w	r3, r3, #3
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	2b04      	cmp	r3, #4
 8005254:	d022      	beq.n	800529c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6818      	ldr	r0, [r3, #0]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	6919      	ldr	r1, [r3, #16]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005266:	f7ff facd 	bl	8004804 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6919      	ldr	r1, [r3, #16]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	461a      	mov	r2, r3
 8005278:	f7ff fb19 	bl	80048ae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005288:	2b01      	cmp	r3, #1
 800528a:	d102      	bne.n	8005292 <HAL_ADC_ConfigChannel+0x126>
 800528c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005290:	e000      	b.n	8005294 <HAL_ADC_ConfigChannel+0x128>
 8005292:	2300      	movs	r3, #0
 8005294:	461a      	mov	r2, r3
 8005296:	f7ff fb25 	bl	80048e4 <LL_ADC_SetOffsetSaturation>
 800529a:	e17b      	b.n	8005594 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2100      	movs	r1, #0
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff fad2 	bl	800484c <LL_ADC_GetOffsetChannel>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0x15c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2100      	movs	r1, #0
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fac7 	bl	800484c <LL_ADC_GetOffsetChannel>
 80052be:	4603      	mov	r3, r0
 80052c0:	0e9b      	lsrs	r3, r3, #26
 80052c2:	f003 021f 	and.w	r2, r3, #31
 80052c6:	e01e      	b.n	8005306 <HAL_ADC_ConfigChannel+0x19a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2100      	movs	r1, #0
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff fabc 	bl	800484c <LL_ADC_GetOffsetChannel>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80052de:	fa93 f3a3 	rbit	r3, r3
 80052e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80052ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80052f6:	2320      	movs	r3, #32
 80052f8:	e004      	b.n	8005304 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80052fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052fe:	fab3 f383 	clz	r3, r3
 8005302:	b2db      	uxtb	r3, r3
 8005304:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800530e:	2b00      	cmp	r3, #0
 8005310:	d105      	bne.n	800531e <HAL_ADC_ConfigChannel+0x1b2>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	0e9b      	lsrs	r3, r3, #26
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	e018      	b.n	8005350 <HAL_ADC_ConfigChannel+0x1e4>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005326:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800532a:	fa93 f3a3 	rbit	r3, r3
 800532e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005336:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800533a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005342:	2320      	movs	r3, #32
 8005344:	e004      	b.n	8005350 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005346:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800534a:	fab3 f383 	clz	r3, r3
 800534e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005350:	429a      	cmp	r2, r3
 8005352:	d106      	bne.n	8005362 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2200      	movs	r2, #0
 800535a:	2100      	movs	r1, #0
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff fa8b 	bl	8004878 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2101      	movs	r1, #1
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff fa6f 	bl	800484c <LL_ADC_GetOffsetChannel>
 800536e:	4603      	mov	r3, r0
 8005370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10a      	bne.n	800538e <HAL_ADC_ConfigChannel+0x222>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff fa64 	bl	800484c <LL_ADC_GetOffsetChannel>
 8005384:	4603      	mov	r3, r0
 8005386:	0e9b      	lsrs	r3, r3, #26
 8005388:	f003 021f 	and.w	r2, r3, #31
 800538c:	e01e      	b.n	80053cc <HAL_ADC_ConfigChannel+0x260>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2101      	movs	r1, #1
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff fa59 	bl	800484c <LL_ADC_GetOffsetChannel>
 800539a:	4603      	mov	r3, r0
 800539c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053a4:	fa93 f3a3 	rbit	r3, r3
 80053a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80053ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80053b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80053bc:	2320      	movs	r3, #32
 80053be:	e004      	b.n	80053ca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80053c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053c4:	fab3 f383 	clz	r3, r3
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d105      	bne.n	80053e4 <HAL_ADC_ConfigChannel+0x278>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	0e9b      	lsrs	r3, r3, #26
 80053de:	f003 031f 	and.w	r3, r3, #31
 80053e2:	e018      	b.n	8005416 <HAL_ADC_ConfigChannel+0x2aa>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053f0:	fa93 f3a3 	rbit	r3, r3
 80053f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80053f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005400:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005408:	2320      	movs	r3, #32
 800540a:	e004      	b.n	8005416 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800540c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005410:	fab3 f383 	clz	r3, r3
 8005414:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005416:	429a      	cmp	r2, r3
 8005418:	d106      	bne.n	8005428 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2200      	movs	r2, #0
 8005420:	2101      	movs	r1, #1
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff fa28 	bl	8004878 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2102      	movs	r1, #2
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff fa0c 	bl	800484c <LL_ADC_GetOffsetChannel>
 8005434:	4603      	mov	r3, r0
 8005436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <HAL_ADC_ConfigChannel+0x2e8>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2102      	movs	r1, #2
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff fa01 	bl	800484c <LL_ADC_GetOffsetChannel>
 800544a:	4603      	mov	r3, r0
 800544c:	0e9b      	lsrs	r3, r3, #26
 800544e:	f003 021f 	and.w	r2, r3, #31
 8005452:	e01e      	b.n	8005492 <HAL_ADC_ConfigChannel+0x326>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2102      	movs	r1, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff f9f6 	bl	800484c <LL_ADC_GetOffsetChannel>
 8005460:	4603      	mov	r3, r0
 8005462:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800546a:	fa93 f3a3 	rbit	r3, r3
 800546e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005472:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005476:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800547a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005482:	2320      	movs	r3, #32
 8005484:	e004      	b.n	8005490 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005486:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800548a:	fab3 f383 	clz	r3, r3
 800548e:	b2db      	uxtb	r3, r3
 8005490:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800549a:	2b00      	cmp	r3, #0
 800549c:	d105      	bne.n	80054aa <HAL_ADC_ConfigChannel+0x33e>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	0e9b      	lsrs	r3, r3, #26
 80054a4:	f003 031f 	and.w	r3, r3, #31
 80054a8:	e016      	b.n	80054d8 <HAL_ADC_ConfigChannel+0x36c>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054b6:	fa93 f3a3 	rbit	r3, r3
 80054ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80054bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80054c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80054ca:	2320      	movs	r3, #32
 80054cc:	e004      	b.n	80054d8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80054ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054d2:	fab3 f383 	clz	r3, r3
 80054d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054d8:	429a      	cmp	r2, r3
 80054da:	d106      	bne.n	80054ea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2200      	movs	r2, #0
 80054e2:	2102      	movs	r1, #2
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff f9c7 	bl	8004878 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2103      	movs	r1, #3
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff f9ab 	bl	800484c <LL_ADC_GetOffsetChannel>
 80054f6:	4603      	mov	r3, r0
 80054f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <HAL_ADC_ConfigChannel+0x3aa>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2103      	movs	r1, #3
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff f9a0 	bl	800484c <LL_ADC_GetOffsetChannel>
 800550c:	4603      	mov	r3, r0
 800550e:	0e9b      	lsrs	r3, r3, #26
 8005510:	f003 021f 	and.w	r2, r3, #31
 8005514:	e017      	b.n	8005546 <HAL_ADC_ConfigChannel+0x3da>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2103      	movs	r1, #3
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff f995 	bl	800484c <LL_ADC_GetOffsetChannel>
 8005522:	4603      	mov	r3, r0
 8005524:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005526:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005528:	fa93 f3a3 	rbit	r3, r3
 800552c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800552e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005530:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005532:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005538:	2320      	movs	r3, #32
 800553a:	e003      	b.n	8005544 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800553c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800553e:	fab3 f383 	clz	r3, r3
 8005542:	b2db      	uxtb	r3, r3
 8005544:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800554e:	2b00      	cmp	r3, #0
 8005550:	d105      	bne.n	800555e <HAL_ADC_ConfigChannel+0x3f2>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	0e9b      	lsrs	r3, r3, #26
 8005558:	f003 031f 	and.w	r3, r3, #31
 800555c:	e011      	b.n	8005582 <HAL_ADC_ConfigChannel+0x416>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005564:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005566:	fa93 f3a3 	rbit	r3, r3
 800556a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800556c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800556e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005570:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005576:	2320      	movs	r3, #32
 8005578:	e003      	b.n	8005582 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800557a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800557c:	fab3 f383 	clz	r3, r3
 8005580:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005582:	429a      	cmp	r2, r3
 8005584:	d106      	bne.n	8005594 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2200      	movs	r2, #0
 800558c:	2103      	movs	r1, #3
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff f972 	bl	8004878 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff fae3 	bl	8004b64 <LL_ADC_IsEnabled>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f040 813d 	bne.w	8005820 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	6819      	ldr	r1, [r3, #0]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	461a      	mov	r2, r3
 80055b4:	f7ff fa2e 	bl	8004a14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4aa2      	ldr	r2, [pc, #648]	@ (8005848 <HAL_ADC_ConfigChannel+0x6dc>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	f040 812e 	bne.w	8005820 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10b      	bne.n	80055ec <HAL_ADC_ConfigChannel+0x480>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	0e9b      	lsrs	r3, r3, #26
 80055da:	3301      	adds	r3, #1
 80055dc:	f003 031f 	and.w	r3, r3, #31
 80055e0:	2b09      	cmp	r3, #9
 80055e2:	bf94      	ite	ls
 80055e4:	2301      	movls	r3, #1
 80055e6:	2300      	movhi	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	e019      	b.n	8005620 <HAL_ADC_ConfigChannel+0x4b4>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055f4:	fa93 f3a3 	rbit	r3, r3
 80055f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80055fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055fc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80055fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005604:	2320      	movs	r3, #32
 8005606:	e003      	b.n	8005610 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005608:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800560a:	fab3 f383 	clz	r3, r3
 800560e:	b2db      	uxtb	r3, r3
 8005610:	3301      	adds	r3, #1
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	2b09      	cmp	r3, #9
 8005618:	bf94      	ite	ls
 800561a:	2301      	movls	r3, #1
 800561c:	2300      	movhi	r3, #0
 800561e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005620:	2b00      	cmp	r3, #0
 8005622:	d079      	beq.n	8005718 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800562c:	2b00      	cmp	r3, #0
 800562e:	d107      	bne.n	8005640 <HAL_ADC_ConfigChannel+0x4d4>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	0e9b      	lsrs	r3, r3, #26
 8005636:	3301      	adds	r3, #1
 8005638:	069b      	lsls	r3, r3, #26
 800563a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800563e:	e015      	b.n	800566c <HAL_ADC_ConfigChannel+0x500>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005648:	fa93 f3a3 	rbit	r3, r3
 800564c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800564e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005650:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005658:	2320      	movs	r3, #32
 800565a:	e003      	b.n	8005664 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800565c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800565e:	fab3 f383 	clz	r3, r3
 8005662:	b2db      	uxtb	r3, r3
 8005664:	3301      	adds	r3, #1
 8005666:	069b      	lsls	r3, r3, #26
 8005668:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005674:	2b00      	cmp	r3, #0
 8005676:	d109      	bne.n	800568c <HAL_ADC_ConfigChannel+0x520>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	0e9b      	lsrs	r3, r3, #26
 800567e:	3301      	adds	r3, #1
 8005680:	f003 031f 	and.w	r3, r3, #31
 8005684:	2101      	movs	r1, #1
 8005686:	fa01 f303 	lsl.w	r3, r1, r3
 800568a:	e017      	b.n	80056bc <HAL_ADC_ConfigChannel+0x550>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005692:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005694:	fa93 f3a3 	rbit	r3, r3
 8005698:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800569a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800569c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800569e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80056a4:	2320      	movs	r3, #32
 80056a6:	e003      	b.n	80056b0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80056a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056aa:	fab3 f383 	clz	r3, r3
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	3301      	adds	r3, #1
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	2101      	movs	r1, #1
 80056b8:	fa01 f303 	lsl.w	r3, r1, r3
 80056bc:	ea42 0103 	orr.w	r1, r2, r3
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <HAL_ADC_ConfigChannel+0x576>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	0e9b      	lsrs	r3, r3, #26
 80056d2:	3301      	adds	r3, #1
 80056d4:	f003 021f 	and.w	r2, r3, #31
 80056d8:	4613      	mov	r3, r2
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	4413      	add	r3, r2
 80056de:	051b      	lsls	r3, r3, #20
 80056e0:	e018      	b.n	8005714 <HAL_ADC_ConfigChannel+0x5a8>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ea:	fa93 f3a3 	rbit	r3, r3
 80056ee:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80056f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80056f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80056fa:	2320      	movs	r3, #32
 80056fc:	e003      	b.n	8005706 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80056fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005700:	fab3 f383 	clz	r3, r3
 8005704:	b2db      	uxtb	r3, r3
 8005706:	3301      	adds	r3, #1
 8005708:	f003 021f 	and.w	r2, r3, #31
 800570c:	4613      	mov	r3, r2
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	4413      	add	r3, r2
 8005712:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005714:	430b      	orrs	r3, r1
 8005716:	e07e      	b.n	8005816 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005720:	2b00      	cmp	r3, #0
 8005722:	d107      	bne.n	8005734 <HAL_ADC_ConfigChannel+0x5c8>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	0e9b      	lsrs	r3, r3, #26
 800572a:	3301      	adds	r3, #1
 800572c:	069b      	lsls	r3, r3, #26
 800572e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005732:	e015      	b.n	8005760 <HAL_ADC_ConfigChannel+0x5f4>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573c:	fa93 f3a3 	rbit	r3, r3
 8005740:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005744:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800574c:	2320      	movs	r3, #32
 800574e:	e003      	b.n	8005758 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005752:	fab3 f383 	clz	r3, r3
 8005756:	b2db      	uxtb	r3, r3
 8005758:	3301      	adds	r3, #1
 800575a:	069b      	lsls	r3, r3, #26
 800575c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005768:	2b00      	cmp	r3, #0
 800576a:	d109      	bne.n	8005780 <HAL_ADC_ConfigChannel+0x614>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	0e9b      	lsrs	r3, r3, #26
 8005772:	3301      	adds	r3, #1
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	2101      	movs	r1, #1
 800577a:	fa01 f303 	lsl.w	r3, r1, r3
 800577e:	e017      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x644>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	fa93 f3a3 	rbit	r3, r3
 800578c:	61fb      	str	r3, [r7, #28]
  return result;
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005798:	2320      	movs	r3, #32
 800579a:	e003      	b.n	80057a4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800579c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579e:	fab3 f383 	clz	r3, r3
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	3301      	adds	r3, #1
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2101      	movs	r1, #1
 80057ac:	fa01 f303 	lsl.w	r3, r1, r3
 80057b0:	ea42 0103 	orr.w	r1, r2, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10d      	bne.n	80057dc <HAL_ADC_ConfigChannel+0x670>
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	0e9b      	lsrs	r3, r3, #26
 80057c6:	3301      	adds	r3, #1
 80057c8:	f003 021f 	and.w	r2, r3, #31
 80057cc:	4613      	mov	r3, r2
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	4413      	add	r3, r2
 80057d2:	3b1e      	subs	r3, #30
 80057d4:	051b      	lsls	r3, r3, #20
 80057d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80057da:	e01b      	b.n	8005814 <HAL_ADC_ConfigChannel+0x6a8>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	fa93 f3a3 	rbit	r3, r3
 80057e8:	613b      	str	r3, [r7, #16]
  return result;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80057f4:	2320      	movs	r3, #32
 80057f6:	e003      	b.n	8005800 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	fab3 f383 	clz	r3, r3
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	3301      	adds	r3, #1
 8005802:	f003 021f 	and.w	r2, r3, #31
 8005806:	4613      	mov	r3, r2
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	4413      	add	r3, r2
 800580c:	3b1e      	subs	r3, #30
 800580e:	051b      	lsls	r3, r3, #20
 8005810:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005814:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800581a:	4619      	mov	r1, r3
 800581c:	f7ff f8cf 	bl	80049be <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	4b09      	ldr	r3, [pc, #36]	@ (800584c <HAL_ADC_ConfigChannel+0x6e0>)
 8005826:	4013      	ands	r3, r2
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 80be 	beq.w	80059aa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005836:	d004      	beq.n	8005842 <HAL_ADC_ConfigChannel+0x6d6>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a04      	ldr	r2, [pc, #16]	@ (8005850 <HAL_ADC_ConfigChannel+0x6e4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d10a      	bne.n	8005858 <HAL_ADC_ConfigChannel+0x6ec>
 8005842:	4b04      	ldr	r3, [pc, #16]	@ (8005854 <HAL_ADC_ConfigChannel+0x6e8>)
 8005844:	e009      	b.n	800585a <HAL_ADC_ConfigChannel+0x6ee>
 8005846:	bf00      	nop
 8005848:	407f0000 	.word	0x407f0000
 800584c:	80080000 	.word	0x80080000
 8005850:	50000100 	.word	0x50000100
 8005854:	50000300 	.word	0x50000300
 8005858:	4b59      	ldr	r3, [pc, #356]	@ (80059c0 <HAL_ADC_ConfigChannel+0x854>)
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe ffc4 	bl	80047e8 <LL_ADC_GetCommonPathInternalCh>
 8005860:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a56      	ldr	r2, [pc, #344]	@ (80059c4 <HAL_ADC_ConfigChannel+0x858>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_ADC_ConfigChannel+0x70c>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a55      	ldr	r2, [pc, #340]	@ (80059c8 <HAL_ADC_ConfigChannel+0x85c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d13a      	bne.n	80058ee <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800587c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d134      	bne.n	80058ee <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800588c:	d005      	beq.n	800589a <HAL_ADC_ConfigChannel+0x72e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a4e      	ldr	r2, [pc, #312]	@ (80059cc <HAL_ADC_ConfigChannel+0x860>)
 8005894:	4293      	cmp	r3, r2
 8005896:	f040 8085 	bne.w	80059a4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058a2:	d004      	beq.n	80058ae <HAL_ADC_ConfigChannel+0x742>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a49      	ldr	r2, [pc, #292]	@ (80059d0 <HAL_ADC_ConfigChannel+0x864>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d101      	bne.n	80058b2 <HAL_ADC_ConfigChannel+0x746>
 80058ae:	4a49      	ldr	r2, [pc, #292]	@ (80059d4 <HAL_ADC_ConfigChannel+0x868>)
 80058b0:	e000      	b.n	80058b4 <HAL_ADC_ConfigChannel+0x748>
 80058b2:	4a43      	ldr	r2, [pc, #268]	@ (80059c0 <HAL_ADC_ConfigChannel+0x854>)
 80058b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f7fe ff7f 	bl	80047c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058c4:	4b44      	ldr	r3, [pc, #272]	@ (80059d8 <HAL_ADC_ConfigChannel+0x86c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	099b      	lsrs	r3, r3, #6
 80058ca:	4a44      	ldr	r2, [pc, #272]	@ (80059dc <HAL_ADC_ConfigChannel+0x870>)
 80058cc:	fba2 2303 	umull	r2, r3, r2, r3
 80058d0:	099b      	lsrs	r3, r3, #6
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	4613      	mov	r3, r2
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80058de:	e002      	b.n	80058e6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1f9      	bne.n	80058e0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058ec:	e05a      	b.n	80059a4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a3b      	ldr	r2, [pc, #236]	@ (80059e0 <HAL_ADC_ConfigChannel+0x874>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d125      	bne.n	8005944 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80058f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d11f      	bne.n	8005944 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a31      	ldr	r2, [pc, #196]	@ (80059d0 <HAL_ADC_ConfigChannel+0x864>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d104      	bne.n	8005918 <HAL_ADC_ConfigChannel+0x7ac>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a34      	ldr	r2, [pc, #208]	@ (80059e4 <HAL_ADC_ConfigChannel+0x878>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d047      	beq.n	80059a8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005920:	d004      	beq.n	800592c <HAL_ADC_ConfigChannel+0x7c0>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a2a      	ldr	r2, [pc, #168]	@ (80059d0 <HAL_ADC_ConfigChannel+0x864>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d101      	bne.n	8005930 <HAL_ADC_ConfigChannel+0x7c4>
 800592c:	4a29      	ldr	r2, [pc, #164]	@ (80059d4 <HAL_ADC_ConfigChannel+0x868>)
 800592e:	e000      	b.n	8005932 <HAL_ADC_ConfigChannel+0x7c6>
 8005930:	4a23      	ldr	r2, [pc, #140]	@ (80059c0 <HAL_ADC_ConfigChannel+0x854>)
 8005932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f7fe ff40 	bl	80047c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005942:	e031      	b.n	80059a8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a27      	ldr	r2, [pc, #156]	@ (80059e8 <HAL_ADC_ConfigChannel+0x87c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d12d      	bne.n	80059aa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800594e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d127      	bne.n	80059aa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1c      	ldr	r2, [pc, #112]	@ (80059d0 <HAL_ADC_ConfigChannel+0x864>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d022      	beq.n	80059aa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800596c:	d004      	beq.n	8005978 <HAL_ADC_ConfigChannel+0x80c>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a17      	ldr	r2, [pc, #92]	@ (80059d0 <HAL_ADC_ConfigChannel+0x864>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d101      	bne.n	800597c <HAL_ADC_ConfigChannel+0x810>
 8005978:	4a16      	ldr	r2, [pc, #88]	@ (80059d4 <HAL_ADC_ConfigChannel+0x868>)
 800597a:	e000      	b.n	800597e <HAL_ADC_ConfigChannel+0x812>
 800597c:	4a10      	ldr	r2, [pc, #64]	@ (80059c0 <HAL_ADC_ConfigChannel+0x854>)
 800597e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005982:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f7fe ff1a 	bl	80047c2 <LL_ADC_SetCommonPathInternalCh>
 800598e:	e00c      	b.n	80059aa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005994:	f043 0220 	orr.w	r2, r3, #32
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80059a2:	e002      	b.n	80059aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80059a4:	bf00      	nop
 80059a6:	e000      	b.n	80059aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80059b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	37d8      	adds	r7, #216	@ 0xd8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	50000700 	.word	0x50000700
 80059c4:	c3210000 	.word	0xc3210000
 80059c8:	90c00010 	.word	0x90c00010
 80059cc:	50000600 	.word	0x50000600
 80059d0:	50000100 	.word	0x50000100
 80059d4:	50000300 	.word	0x50000300
 80059d8:	2000003c 	.word	0x2000003c
 80059dc:	053e2d63 	.word	0x053e2d63
 80059e0:	c7520000 	.word	0xc7520000
 80059e4:	50000500 	.word	0x50000500
 80059e8:	cb840000 	.word	0xcb840000

080059ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff f8b1 	bl	8004b64 <LL_ADC_IsEnabled>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d176      	bne.n	8005af6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b00 <ADC_Enable+0x114>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00d      	beq.n	8005a32 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a1a:	f043 0210 	orr.w	r2, r3, #16
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a26:	f043 0201 	orr.w	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e062      	b.n	8005af8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff f86c 	bl	8004b14 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a44:	d004      	beq.n	8005a50 <ADC_Enable+0x64>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a2e      	ldr	r2, [pc, #184]	@ (8005b04 <ADC_Enable+0x118>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d101      	bne.n	8005a54 <ADC_Enable+0x68>
 8005a50:	4b2d      	ldr	r3, [pc, #180]	@ (8005b08 <ADC_Enable+0x11c>)
 8005a52:	e000      	b.n	8005a56 <ADC_Enable+0x6a>
 8005a54:	4b2d      	ldr	r3, [pc, #180]	@ (8005b0c <ADC_Enable+0x120>)
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fe fec6 	bl	80047e8 <LL_ADC_GetCommonPathInternalCh>
 8005a5c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005a5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d013      	beq.n	8005a8e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a66:	4b2a      	ldr	r3, [pc, #168]	@ (8005b10 <ADC_Enable+0x124>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	099b      	lsrs	r3, r3, #6
 8005a6c:	4a29      	ldr	r2, [pc, #164]	@ (8005b14 <ADC_Enable+0x128>)
 8005a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a72:	099b      	lsrs	r3, r3, #6
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	4613      	mov	r3, r2
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a80:	e002      	b.n	8005a88 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f9      	bne.n	8005a82 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005a8e:	f7fe fe57 	bl	8004740 <HAL_GetTick>
 8005a92:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a94:	e028      	b.n	8005ae8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff f862 	bl	8004b64 <LL_ADC_IsEnabled>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d104      	bne.n	8005ab0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff f832 	bl	8004b14 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ab0:	f7fe fe46 	bl	8004740 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d914      	bls.n	8005ae8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d00d      	beq.n	8005ae8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad0:	f043 0210 	orr.w	r2, r3, #16
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005adc:	f043 0201 	orr.w	r2, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e007      	b.n	8005af8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d1cf      	bne.n	8005a96 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	8000003f 	.word	0x8000003f
 8005b04:	50000100 	.word	0x50000100
 8005b08:	50000300 	.word	0x50000300
 8005b0c:	50000700 	.word	0x50000700
 8005b10:	2000003c 	.word	0x2000003c
 8005b14:	053e2d63 	.word	0x053e2d63

08005b18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7ff f830 	bl	8004b8a <LL_ADC_IsDisableOngoing>
 8005b2a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff f817 	bl	8004b64 <LL_ADC_IsEnabled>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d047      	beq.n	8005bcc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d144      	bne.n	8005bcc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 030d 	and.w	r3, r3, #13
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d10c      	bne.n	8005b6a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fe fff1 	bl	8004b3c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2203      	movs	r2, #3
 8005b60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b62:	f7fe fded 	bl	8004740 <HAL_GetTick>
 8005b66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b68:	e029      	b.n	8005bbe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b6e:	f043 0210 	orr.w	r2, r3, #16
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b7a:	f043 0201 	orr.w	r2, r3, #1
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e023      	b.n	8005bce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b86:	f7fe fddb 	bl	8004740 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d914      	bls.n	8005bbe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00d      	beq.n	8005bbe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba6:	f043 0210 	orr.w	r2, r3, #16
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb2:	f043 0201 	orr.w	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e007      	b.n	8005bce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1dc      	bne.n	8005b86 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d14b      	bne.n	8005c88 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d021      	beq.n	8005c4e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fe fe96 	bl	8004940 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d032      	beq.n	8005c80 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d12b      	bne.n	8005c80 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d11f      	bne.n	8005c80 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c44:	f043 0201 	orr.w	r2, r3, #1
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c4c:	e018      	b.n	8005c80 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d111      	bne.n	8005c80 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d105      	bne.n	8005c80 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c78:	f043 0201 	orr.w	r2, r3, #1
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f7fc fee5 	bl	8002a50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005c86:	e00e      	b.n	8005ca6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7ff fa5f 	bl	8005158 <HAL_ADC_ErrorCallback>
}
 8005c9a:	e004      	b.n	8005ca6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	4798      	blx	r3
}
 8005ca6:	bf00      	nop
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f7ff fa41 	bl	8005144 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005cc2:	bf00      	nop
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cdc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ce8:	f043 0204 	orr.w	r2, r3, #4
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f7ff fa31 	bl	8005158 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005cf6:	bf00      	nop
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <LL_ADC_IsEnabled>:
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <LL_ADC_IsEnabled+0x18>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <LL_ADC_IsEnabled+0x1a>
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <LL_ADC_StartCalibration>:
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005d36:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	609a      	str	r2, [r3, #8]
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <LL_ADC_IsCalibrationOnGoing>:
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d6a:	d101      	bne.n	8005d70 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e000      	b.n	8005d72 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <LL_ADC_REG_IsConversionOngoing>:
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d101      	bne.n	8005d96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_ADCEx_Calibration_Start+0x1c>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e04d      	b.n	8005e5c <HAL_ADCEx_Calibration_Start+0xb8>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fea5 	bl	8005b18 <ADC_Disable>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d136      	bne.n	8005e46 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ddc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005de0:	f023 0302 	bic.w	r3, r3, #2
 8005de4:	f043 0202 	orr.w	r2, r3, #2
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6839      	ldr	r1, [r7, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff ff96 	bl	8005d24 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005df8:	e014      	b.n	8005e24 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4a18      	ldr	r2, [pc, #96]	@ (8005e64 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d90d      	bls.n	8005e24 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e0c:	f023 0312 	bic.w	r3, r3, #18
 8005e10:	f043 0210 	orr.w	r2, r3, #16
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e01b      	b.n	8005e5c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff ff94 	bl	8005d56 <LL_ADC_IsCalibrationOnGoing>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e2      	bne.n	8005dfa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e38:	f023 0303 	bic.w	r3, r3, #3
 8005e3c:	f043 0201 	orr.w	r2, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e44:	e005      	b.n	8005e52 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e4a:	f043 0210 	orr.w	r2, r3, #16
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	0004de01 	.word	0x0004de01

08005e68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005e68:	b590      	push	{r4, r7, lr}
 8005e6a:	b0a1      	sub	sp, #132	@ 0x84
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e0e7      	b.n	8006056 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005e8e:	2300      	movs	r3, #0
 8005e90:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005e92:	2300      	movs	r3, #0
 8005e94:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e9e:	d102      	bne.n	8005ea6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8006060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ea2:	60bb      	str	r3, [r7, #8]
 8005ea4:	e009      	b.n	8005eba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a6e      	ldr	r2, [pc, #440]	@ (8006064 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d102      	bne.n	8005eb6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005eb0:	4b6d      	ldr	r3, [pc, #436]	@ (8006068 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005eb2:	60bb      	str	r3, [r7, #8]
 8005eb4:	e001      	b.n	8005eba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10b      	bne.n	8005ed8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec4:	f043 0220 	orr.w	r2, r3, #32
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e0be      	b.n	8006056 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff ff4f 	bl	8005d7e <LL_ADC_REG_IsConversionOngoing>
 8005ee0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff ff49 	bl	8005d7e <LL_ADC_REG_IsConversionOngoing>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f040 80a0 	bne.w	8006034 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f040 809c 	bne.w	8006034 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f04:	d004      	beq.n	8005f10 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a55      	ldr	r2, [pc, #340]	@ (8006060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d101      	bne.n	8005f14 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005f10:	4b56      	ldr	r3, [pc, #344]	@ (800606c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005f12:	e000      	b.n	8005f16 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005f14:	4b56      	ldr	r3, [pc, #344]	@ (8006070 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005f16:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d04b      	beq.n	8005fb8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005f20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	6859      	ldr	r1, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f32:	035b      	lsls	r3, r3, #13
 8005f34:	430b      	orrs	r3, r1
 8005f36:	431a      	orrs	r2, r3
 8005f38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f44:	d004      	beq.n	8005f50 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a45      	ldr	r2, [pc, #276]	@ (8006060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10f      	bne.n	8005f70 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005f50:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005f54:	f7ff fed3 	bl	8005cfe <LL_ADC_IsEnabled>
 8005f58:	4604      	mov	r4, r0
 8005f5a:	4841      	ldr	r0, [pc, #260]	@ (8006060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f5c:	f7ff fecf 	bl	8005cfe <LL_ADC_IsEnabled>
 8005f60:	4603      	mov	r3, r0
 8005f62:	4323      	orrs	r3, r4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bf0c      	ite	eq
 8005f68:	2301      	moveq	r3, #1
 8005f6a:	2300      	movne	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	e012      	b.n	8005f96 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005f70:	483c      	ldr	r0, [pc, #240]	@ (8006064 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005f72:	f7ff fec4 	bl	8005cfe <LL_ADC_IsEnabled>
 8005f76:	4604      	mov	r4, r0
 8005f78:	483b      	ldr	r0, [pc, #236]	@ (8006068 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005f7a:	f7ff fec0 	bl	8005cfe <LL_ADC_IsEnabled>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	431c      	orrs	r4, r3
 8005f82:	483c      	ldr	r0, [pc, #240]	@ (8006074 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005f84:	f7ff febb 	bl	8005cfe <LL_ADC_IsEnabled>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	4323      	orrs	r3, r4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bf0c      	ite	eq
 8005f90:	2301      	moveq	r3, #1
 8005f92:	2300      	movne	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d056      	beq.n	8006048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005fa2:	f023 030f 	bic.w	r3, r3, #15
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	6811      	ldr	r1, [r2, #0]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	6892      	ldr	r2, [r2, #8]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fb4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005fb6:	e047      	b.n	8006048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005fb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fc2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fcc:	d004      	beq.n	8005fd8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a23      	ldr	r2, [pc, #140]	@ (8006060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d10f      	bne.n	8005ff8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005fd8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005fdc:	f7ff fe8f 	bl	8005cfe <LL_ADC_IsEnabled>
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	481f      	ldr	r0, [pc, #124]	@ (8006060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fe4:	f7ff fe8b 	bl	8005cfe <LL_ADC_IsEnabled>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	4323      	orrs	r3, r4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	bf0c      	ite	eq
 8005ff0:	2301      	moveq	r3, #1
 8005ff2:	2300      	movne	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	e012      	b.n	800601e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005ff8:	481a      	ldr	r0, [pc, #104]	@ (8006064 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005ffa:	f7ff fe80 	bl	8005cfe <LL_ADC_IsEnabled>
 8005ffe:	4604      	mov	r4, r0
 8006000:	4819      	ldr	r0, [pc, #100]	@ (8006068 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006002:	f7ff fe7c 	bl	8005cfe <LL_ADC_IsEnabled>
 8006006:	4603      	mov	r3, r0
 8006008:	431c      	orrs	r4, r3
 800600a:	481a      	ldr	r0, [pc, #104]	@ (8006074 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800600c:	f7ff fe77 	bl	8005cfe <LL_ADC_IsEnabled>
 8006010:	4603      	mov	r3, r0
 8006012:	4323      	orrs	r3, r4
 8006014:	2b00      	cmp	r3, #0
 8006016:	bf0c      	ite	eq
 8006018:	2301      	moveq	r3, #1
 800601a:	2300      	movne	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d012      	beq.n	8006048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006022:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800602a:	f023 030f 	bic.w	r3, r3, #15
 800602e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006030:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006032:	e009      	b.n	8006048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006038:	f043 0220 	orr.w	r2, r3, #32
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006046:	e000      	b.n	800604a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006048:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006052:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006056:	4618      	mov	r0, r3
 8006058:	3784      	adds	r7, #132	@ 0x84
 800605a:	46bd      	mov	sp, r7
 800605c:	bd90      	pop	{r4, r7, pc}
 800605e:	bf00      	nop
 8006060:	50000100 	.word	0x50000100
 8006064:	50000400 	.word	0x50000400
 8006068:	50000500 	.word	0x50000500
 800606c:	50000300 	.word	0x50000300
 8006070:	50000700 	.word	0x50000700
 8006074:	50000600 	.word	0x50000600

08006078 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e023      	b.n	80060d2 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fd fed8 	bl	8003e54 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, const CORDIC_ConfigTypeDef *sConfig)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d11d      	bne.n	8006132 <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	4b14      	ldr	r3, [pc, #80]	@ (8006150 <HAL_CORDIC_Configure+0x74>)
 80060fe:	4013      	ands	r3, r2
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	6811      	ldr	r1, [r2, #0]
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	6992      	ldr	r2, [r2, #24]
 8006108:	4311      	orrs	r1, r2
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	6852      	ldr	r2, [r2, #4]
 800610e:	4311      	orrs	r1, r2
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	6912      	ldr	r2, [r2, #16]
 8006114:	4311      	orrs	r1, r2
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	6952      	ldr	r2, [r2, #20]
 800611a:	4311      	orrs	r1, r2
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	6892      	ldr	r2, [r2, #8]
 8006120:	4311      	orrs	r1, r2
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	68d2      	ldr	r2, [r2, #12]
 8006126:	4311      	orrs	r1, r2
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6812      	ldr	r2, [r2, #0]
 800612c:	430b      	orrs	r3, r1
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	e007      	b.n	8006142 <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006136:	f043 0202 	orr.w	r2, r3, #2
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006142:	7bfb      	ldrb	r3, [r7, #15]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	ff87f800 	.word	0xff87f800

08006154 <HAL_CORDIC_Calculate>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate(CORDIC_HandleTypeDef *hcordic, const int32_t *pInBuff, int32_t *pOutBuff,
                                       uint32_t NbCalc, uint32_t Timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  const int32_t *p_tmp_in_buff = pInBuff;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <HAL_CORDIC_Calculate+0x28>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <HAL_CORDIC_Calculate+0x28>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d107      	bne.n	800618c <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	f043 0201 	orr.w	r2, r3, #1
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e058      	b.n	800623e <HAL_CORDIC_Calculate+0xea>
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	d14b      	bne.n	8006230 <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2202      	movs	r2, #2
 80061a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 80061a6:	f7fe facb 	bl	8004740 <HAL_GetTick>
 80061aa:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 80061ac:	f107 0314 	add.w	r3, r7, #20
 80061b0:	4619      	mov	r1, r3
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 f847 	bl	8006246 <CORDIC_WriteInDataIncrementPtr>

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	e028      	b.n	8006212 <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 80061c0:	f107 0314 	add.w	r3, r7, #20
 80061c4:	4619      	mov	r1, r3
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 f83d 	bl	8006246 <CORDIC_WriteInDataIncrementPtr>

      /* Wait for RRDY flag to be raised */
      do
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
 80061cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d2:	d010      	beq.n	80061f6 <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 80061d4:	f7fe fab4 	bl	8004740 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d208      	bcs.n	80061f6 <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2204      	movs	r2, #4
 80061e8:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Return function status */
            return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e023      	b.n	800623e <HAL_CORDIC_Calculate+0xea>
          }
        }
      } while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	dae5      	bge.n	80061cc <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8006200:	f107 0310 	add.w	r3, r7, #16
 8006204:	4619      	mov	r1, r3
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 f846 	bl	8006298 <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	3b01      	subs	r3, #1
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1d3      	bne.n	80061c0 <HAL_CORDIC_Calculate+0x6c>
    }

    /* Read output data from Read Data register, and increment output buffer pointer */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8006218:	f107 0310 	add.w	r3, r7, #16
 800621c:	4619      	mov	r1, r3
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f83a 	bl	8006298 <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Return function status */
    return HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	e006      	b.n	800623e <HAL_CORDIC_Calculate+0xea>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	f043 0202 	orr.w	r2, r3, #2
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
  }
}
 800623e:	4618      	mov	r0, r3
 8006240:	3720      	adds	r7, #32
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	1d1a      	adds	r2, r3, #4
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006270:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006274:	d10a      	bne.n	800628c <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	1d1a      	adds	r2, r3, #4
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	601a      	str	r2, [r3, #0]
  }
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	1d1a      	adds	r2, r3, #4
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80062c6:	d10a      	bne.n	80062de <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	1d1a      	adds	r2, r3, #4
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	601a      	str	r2, [r3, #0]
  }
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006330 <__NVIC_SetPriorityGrouping+0x44>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006308:	4013      	ands	r3, r2
 800630a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006314:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800631c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800631e:	4a04      	ldr	r2, [pc, #16]	@ (8006330 <__NVIC_SetPriorityGrouping+0x44>)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	60d3      	str	r3, [r2, #12]
}
 8006324:	bf00      	nop
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	e000ed00 	.word	0xe000ed00

08006334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006338:	4b04      	ldr	r3, [pc, #16]	@ (800634c <__NVIC_GetPriorityGrouping+0x18>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	0a1b      	lsrs	r3, r3, #8
 800633e:	f003 0307 	and.w	r3, r3, #7
}
 8006342:	4618      	mov	r0, r3
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	e000ed00 	.word	0xe000ed00

08006350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800635a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800635e:	2b00      	cmp	r3, #0
 8006360:	db0b      	blt.n	800637a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006362:	79fb      	ldrb	r3, [r7, #7]
 8006364:	f003 021f 	and.w	r2, r3, #31
 8006368:	4907      	ldr	r1, [pc, #28]	@ (8006388 <__NVIC_EnableIRQ+0x38>)
 800636a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	2001      	movs	r0, #1
 8006372:	fa00 f202 	lsl.w	r2, r0, r2
 8006376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	e000e100 	.word	0xe000e100

0800638c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	4603      	mov	r3, r0
 8006394:	6039      	str	r1, [r7, #0]
 8006396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800639c:	2b00      	cmp	r3, #0
 800639e:	db0a      	blt.n	80063b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	490c      	ldr	r1, [pc, #48]	@ (80063d8 <__NVIC_SetPriority+0x4c>)
 80063a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063aa:	0112      	lsls	r2, r2, #4
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	440b      	add	r3, r1
 80063b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063b4:	e00a      	b.n	80063cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	4908      	ldr	r1, [pc, #32]	@ (80063dc <__NVIC_SetPriority+0x50>)
 80063bc:	79fb      	ldrb	r3, [r7, #7]
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	3b04      	subs	r3, #4
 80063c4:	0112      	lsls	r2, r2, #4
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	440b      	add	r3, r1
 80063ca:	761a      	strb	r2, [r3, #24]
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	e000e100 	.word	0xe000e100
 80063dc:	e000ed00 	.word	0xe000ed00

080063e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b089      	sub	sp, #36	@ 0x24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f1c3 0307 	rsb	r3, r3, #7
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	bf28      	it	cs
 80063fe:	2304      	movcs	r3, #4
 8006400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	3304      	adds	r3, #4
 8006406:	2b06      	cmp	r3, #6
 8006408:	d902      	bls.n	8006410 <NVIC_EncodePriority+0x30>
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	3b03      	subs	r3, #3
 800640e:	e000      	b.n	8006412 <NVIC_EncodePriority+0x32>
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006414:	f04f 32ff 	mov.w	r2, #4294967295
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	fa02 f303 	lsl.w	r3, r2, r3
 800641e:	43da      	mvns	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	401a      	ands	r2, r3
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006428:	f04f 31ff 	mov.w	r1, #4294967295
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	fa01 f303 	lsl.w	r3, r1, r3
 8006432:	43d9      	mvns	r1, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006438:	4313      	orrs	r3, r2
         );
}
 800643a:	4618      	mov	r0, r3
 800643c:	3724      	adds	r7, #36	@ 0x24
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
	...

08006448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3b01      	subs	r3, #1
 8006454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006458:	d301      	bcc.n	800645e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800645a:	2301      	movs	r3, #1
 800645c:	e00f      	b.n	800647e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800645e:	4a0a      	ldr	r2, [pc, #40]	@ (8006488 <SysTick_Config+0x40>)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3b01      	subs	r3, #1
 8006464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006466:	210f      	movs	r1, #15
 8006468:	f04f 30ff 	mov.w	r0, #4294967295
 800646c:	f7ff ff8e 	bl	800638c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006470:	4b05      	ldr	r3, [pc, #20]	@ (8006488 <SysTick_Config+0x40>)
 8006472:	2200      	movs	r2, #0
 8006474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006476:	4b04      	ldr	r3, [pc, #16]	@ (8006488 <SysTick_Config+0x40>)
 8006478:	2207      	movs	r2, #7
 800647a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	e000e010 	.word	0xe000e010

0800648c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff ff29 	bl	80062ec <__NVIC_SetPriorityGrouping>
}
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b086      	sub	sp, #24
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	4603      	mov	r3, r0
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	607a      	str	r2, [r7, #4]
 80064ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80064b0:	f7ff ff40 	bl	8006334 <__NVIC_GetPriorityGrouping>
 80064b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	6978      	ldr	r0, [r7, #20]
 80064bc:	f7ff ff90 	bl	80063e0 <NVIC_EncodePriority>
 80064c0:	4602      	mov	r2, r0
 80064c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064c6:	4611      	mov	r1, r2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff ff5f 	bl	800638c <__NVIC_SetPriority>
}
 80064ce:	bf00      	nop
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	4603      	mov	r3, r0
 80064de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff ff33 	bl	8006350 <__NVIC_EnableIRQ>
}
 80064ea:	bf00      	nop
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7ff ffa4 	bl	8006448 <SysTick_Config>
 8006500:	4603      	mov	r3, r0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e014      	b.n	8006546 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	791b      	ldrb	r3, [r3, #4]
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d105      	bne.n	8006532 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7fd fcb1 	bl	8003e94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e056      	b.n	8006612 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	795b      	ldrb	r3, [r3, #5]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d101      	bne.n	8006570 <HAL_DAC_Start+0x20>
 800656c:	2302      	movs	r3, #2
 800656e:	e050      	b.n	8006612 <HAL_DAC_Start+0xc2>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2202      	movs	r2, #2
 800657a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6819      	ldr	r1, [r3, #0]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2201      	movs	r2, #1
 800658a:	409a      	lsls	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006594:	4b22      	ldr	r3, [pc, #136]	@ (8006620 <HAL_DAC_Start+0xd0>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	099b      	lsrs	r3, r3, #6
 800659a:	4a22      	ldr	r2, [pc, #136]	@ (8006624 <HAL_DAC_Start+0xd4>)
 800659c:	fba2 2303 	umull	r2, r3, r2, r3
 80065a0:	099b      	lsrs	r3, r3, #6
 80065a2:	3301      	adds	r3, #1
 80065a4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80065a6:	e002      	b.n	80065ae <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f9      	bne.n	80065a8 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10f      	bne.n	80065da <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d11d      	bne.n	8006604 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0201 	orr.w	r2, r2, #1
 80065d6:	605a      	str	r2, [r3, #4]
 80065d8:	e014      	b.n	8006604 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	f003 0310 	and.w	r3, r3, #16
 80065ea:	2102      	movs	r1, #2
 80065ec:	fa01 f303 	lsl.w	r3, r1, r3
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d107      	bne.n	8006604 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0202 	orr.w	r2, r2, #2
 8006602:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	2000003c 	.word	0x2000003c
 8006624:	053e2d63 	.word	0x053e2d63

08006628 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800663e:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01d      	beq.n	8006686 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d018      	beq.n	8006686 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2204      	movs	r2, #4
 8006658:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f043 0201 	orr.w	r2, r3, #1
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800666e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800667e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f854 	bl	800672e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01d      	beq.n	80066cc <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d018      	beq.n	80066cc <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2204      	movs	r2, #4
 800669e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f043 0202 	orr.w	r2, r3, #2
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80066b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80066c4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f9f4 	bl	8006ab4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80066cc:	bf00      	nop
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e018      	b.n	8006722 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d105      	bne.n	800670e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4413      	add	r3, r2
 8006708:	3308      	adds	r3, #8
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	e004      	b.n	8006718 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4413      	add	r3, r2
 8006714:	3314      	adds	r3, #20
 8006716:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	461a      	mov	r2, r3
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08a      	sub	sp, #40	@ 0x28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <HAL_DAC_ConfigChannel+0x1c>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e19e      	b.n	8006aa2 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	795b      	ldrb	r3, [r3, #5]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_DAC_ConfigChannel+0x2c>
 800676c:	2302      	movs	r3, #2
 800676e:	e198      	b.n	8006aa2 <HAL_DAC_ConfigChannel+0x35e>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2201      	movs	r2, #1
 8006774:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2202      	movs	r2, #2
 800677a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	2b04      	cmp	r3, #4
 8006782:	d17a      	bne.n	800687a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006784:	f7fd ffdc 	bl	8004740 <HAL_GetTick>
 8006788:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d13d      	bne.n	800680c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006790:	e018      	b.n	80067c4 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006792:	f7fd ffd5 	bl	8004740 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b01      	cmp	r3, #1
 800679e:	d911      	bls.n	80067c4 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f043 0208 	orr.w	r2, r3, #8
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2203      	movs	r2, #3
 80067be:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e16e      	b.n	8006aa2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1df      	bne.n	8006792 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067da:	641a      	str	r2, [r3, #64]	@ 0x40
 80067dc:	e020      	b.n	8006820 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80067de:	f7fd ffaf 	bl	8004740 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d90f      	bls.n	800680c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	da0a      	bge.n	800680c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f043 0208 	orr.w	r2, r3, #8
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2203      	movs	r2, #3
 8006806:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e14a      	b.n	8006aa2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006812:	2b00      	cmp	r3, #0
 8006814:	dbe3      	blt.n	80067de <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800681e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f003 0310 	and.w	r3, r3, #16
 800682c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006830:	fa01 f303 	lsl.w	r3, r1, r3
 8006834:	43db      	mvns	r3, r3
 8006836:	ea02 0103 	and.w	r1, r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f003 0310 	and.w	r3, r3, #16
 8006844:	409a      	lsls	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f003 0310 	and.w	r3, r3, #16
 800685a:	21ff      	movs	r1, #255	@ 0xff
 800685c:	fa01 f303 	lsl.w	r3, r1, r3
 8006860:	43db      	mvns	r3, r3
 8006862:	ea02 0103 	and.w	r1, r2, r3
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	409a      	lsls	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d11d      	bne.n	80068be <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006888:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	221f      	movs	r2, #31
 8006892:	fa02 f303 	lsl.w	r3, r2, r3
 8006896:	43db      	mvns	r3, r3
 8006898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800689a:	4013      	ands	r3, r2
 800689c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f003 0310 	and.w	r3, r3, #16
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	fa02 f303 	lsl.w	r3, r2, r3
 80068b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068b2:	4313      	orrs	r3, r2
 80068b4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	2207      	movs	r2, #7
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	43db      	mvns	r3, r3
 80068d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068d6:	4013      	ands	r3, r2
 80068d8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d102      	bne.n	80068e8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	623b      	str	r3, [r7, #32]
 80068e6:	e00f      	b.n	8006908 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d102      	bne.n	80068f6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80068f0:	2301      	movs	r3, #1
 80068f2:	623b      	str	r3, [r7, #32]
 80068f4:	e008      	b.n	8006908 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d102      	bne.n	8006904 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80068fe:	2301      	movs	r3, #1
 8006900:	623b      	str	r3, [r7, #32]
 8006902:	e001      	b.n	8006908 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006904:	2300      	movs	r3, #0
 8006906:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	4313      	orrs	r3, r2
 8006912:	6a3a      	ldr	r2, [r7, #32]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f003 0310 	and.w	r3, r3, #16
 800691e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006922:	fa02 f303 	lsl.w	r3, r2, r3
 8006926:	43db      	mvns	r3, r3
 8006928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800692a:	4013      	ands	r3, r2
 800692c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	791b      	ldrb	r3, [r3, #4]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d102      	bne.n	800693c <HAL_DAC_ConfigChannel+0x1f8>
 8006936:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800693a:	e000      	b.n	800693e <HAL_DAC_ConfigChannel+0x1fa>
 800693c:	2300      	movs	r3, #0
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	4313      	orrs	r3, r2
 8006942:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f003 0310 	and.w	r3, r3, #16
 800694a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800694e:	fa02 f303 	lsl.w	r3, r2, r3
 8006952:	43db      	mvns	r3, r3
 8006954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006956:	4013      	ands	r3, r2
 8006958:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	795b      	ldrb	r3, [r3, #5]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d102      	bne.n	8006968 <HAL_DAC_ConfigChannel+0x224>
 8006962:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006966:	e000      	b.n	800696a <HAL_DAC_ConfigChannel+0x226>
 8006968:	2300      	movs	r3, #0
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006972:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006976:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b02      	cmp	r3, #2
 800697e:	d114      	bne.n	80069aa <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006980:	f002 ff7a 	bl	8009878 <HAL_RCC_GetHCLKFreq>
 8006984:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	4a48      	ldr	r2, [pc, #288]	@ (8006aac <HAL_DAC_ConfigChannel+0x368>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d904      	bls.n	8006998 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
 8006996:	e00f      	b.n	80069b8 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	4a45      	ldr	r2, [pc, #276]	@ (8006ab0 <HAL_DAC_ConfigChannel+0x36c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d90a      	bls.n	80069b6 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80069a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80069a8:	e006      	b.n	80069b8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069b0:	4313      	orrs	r3, r2
 80069b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80069b4:	e000      	b.n	80069b8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80069b6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f003 0310 	and.w	r3, r3, #16
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	fa02 f303 	lsl.w	r3, r2, r3
 80069c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069c6:	4313      	orrs	r3, r2
 80069c8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6819      	ldr	r1, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f003 0310 	and.w	r3, r3, #16
 80069de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80069e2:	fa02 f303 	lsl.w	r3, r2, r3
 80069e6:	43da      	mvns	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	400a      	ands	r2, r1
 80069ee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f003 0310 	and.w	r3, r3, #16
 80069fe:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006a02:	fa02 f303 	lsl.w	r3, r2, r3
 8006a06:	43db      	mvns	r3, r3
 8006a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f003 0310 	and.w	r3, r3, #16
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a22:	4313      	orrs	r3, r2
 8006a24:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a2c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6819      	ldr	r1, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f003 0310 	and.w	r3, r3, #16
 8006a3a:	22c0      	movs	r2, #192	@ 0xc0
 8006a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a40:	43da      	mvns	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	400a      	ands	r2, r1
 8006a48:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	089b      	lsrs	r3, r3, #2
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	089b      	lsrs	r3, r3, #2
 8006a5c:	021b      	lsls	r3, r3, #8
 8006a5e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f003 0310 	and.w	r3, r3, #16
 8006a74:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8006a78:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7c:	43db      	mvns	r3, r3
 8006a7e:	ea02 0103 	and.w	r1, r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f003 0310 	and.w	r3, r3, #16
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	409a      	lsls	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006aa0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3728      	adds	r7, #40	@ 0x28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	09896800 	.word	0x09896800
 8006ab0:	04c4b400 	.word	0x04c4b400

08006ab4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e08d      	b.n	8006bf6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	4b47      	ldr	r3, [pc, #284]	@ (8006c00 <HAL_DMA_Init+0x138>)
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d80f      	bhi.n	8006b06 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	4b45      	ldr	r3, [pc, #276]	@ (8006c04 <HAL_DMA_Init+0x13c>)
 8006aee:	4413      	add	r3, r2
 8006af0:	4a45      	ldr	r2, [pc, #276]	@ (8006c08 <HAL_DMA_Init+0x140>)
 8006af2:	fba2 2303 	umull	r2, r3, r2, r3
 8006af6:	091b      	lsrs	r3, r3, #4
 8006af8:	009a      	lsls	r2, r3, #2
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a42      	ldr	r2, [pc, #264]	@ (8006c0c <HAL_DMA_Init+0x144>)
 8006b02:	641a      	str	r2, [r3, #64]	@ 0x40
 8006b04:	e00e      	b.n	8006b24 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	4b40      	ldr	r3, [pc, #256]	@ (8006c10 <HAL_DMA_Init+0x148>)
 8006b0e:	4413      	add	r3, r2
 8006b10:	4a3d      	ldr	r2, [pc, #244]	@ (8006c08 <HAL_DMA_Init+0x140>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	091b      	lsrs	r3, r3, #4
 8006b18:	009a      	lsls	r2, r3, #2
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a3c      	ldr	r2, [pc, #240]	@ (8006c14 <HAL_DMA_Init+0x14c>)
 8006b22:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f9b6 	bl	8006ee8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b84:	d102      	bne.n	8006b8c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006ba0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d010      	beq.n	8006bcc <HAL_DMA_Init+0x104>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d80c      	bhi.n	8006bcc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f9d6 	bl	8006f64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006bc8:	605a      	str	r2, [r3, #4]
 8006bca:	e008      	b.n	8006bde <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40020407 	.word	0x40020407
 8006c04:	bffdfff8 	.word	0xbffdfff8
 8006c08:	cccccccd 	.word	0xcccccccd
 8006c0c:	40020000 	.word	0x40020000
 8006c10:	bffdfbf8 	.word	0xbffdfbf8
 8006c14:	40020400 	.word	0x40020400

08006c18 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_DMA_Start_IT+0x20>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e066      	b.n	8006d06 <HAL_DMA_Start_IT+0xee>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d155      	bne.n	8006cf8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0201 	bic.w	r2, r2, #1
 8006c68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	68b9      	ldr	r1, [r7, #8]
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f8fb 	bl	8006e6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d008      	beq.n	8006c90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f042 020e 	orr.w	r2, r2, #14
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	e00f      	b.n	8006cb0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0204 	bic.w	r2, r2, #4
 8006c9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 020a 	orr.w	r2, r2, #10
 8006cae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d007      	beq.n	8006cce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ccc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d007      	beq.n	8006ce6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ce4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f042 0201 	orr.w	r2, r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	e005      	b.n	8006d04 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006d00:	2302      	movs	r3, #2
 8006d02:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b084      	sub	sp, #16
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	2204      	movs	r2, #4
 8006d30:	409a      	lsls	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4013      	ands	r3, r2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d026      	beq.n	8006d88 <HAL_DMA_IRQHandler+0x7a>
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d021      	beq.n	8006d88 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d107      	bne.n	8006d62 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0204 	bic.w	r2, r2, #4
 8006d60:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d66:	f003 021f 	and.w	r2, r3, #31
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6e:	2104      	movs	r1, #4
 8006d70:	fa01 f202 	lsl.w	r2, r1, r2
 8006d74:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d071      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006d86:	e06c      	b.n	8006e62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d8c:	f003 031f 	and.w	r3, r3, #31
 8006d90:	2202      	movs	r2, #2
 8006d92:	409a      	lsls	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4013      	ands	r3, r2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d02e      	beq.n	8006dfa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d029      	beq.n	8006dfa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10b      	bne.n	8006dcc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 020a 	bic.w	r2, r2, #10
 8006dc2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dd0:	f003 021f 	and.w	r2, r3, #31
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd8:	2102      	movs	r1, #2
 8006dda:	fa01 f202 	lsl.w	r2, r1, r2
 8006dde:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d038      	beq.n	8006e62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006df8:	e033      	b.n	8006e62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfe:	f003 031f 	and.w	r3, r3, #31
 8006e02:	2208      	movs	r2, #8
 8006e04:	409a      	lsls	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d02a      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d025      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 020e 	bic.w	r2, r2, #14
 8006e26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e2c:	f003 021f 	and.w	r2, r3, #31
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	2101      	movs	r1, #1
 8006e36:	fa01 f202 	lsl.w	r2, r1, r2
 8006e3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d004      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006e62:	bf00      	nop
 8006e64:	bf00      	nop
}
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006e82:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d004      	beq.n	8006e96 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006e94:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e9a:	f003 021f 	and.w	r2, r3, #31
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8006ea8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	2b10      	cmp	r3, #16
 8006eb8:	d108      	bne.n	8006ecc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006eca:	e007      	b.n	8006edc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	60da      	str	r2, [r3, #12]
}
 8006edc:	bf00      	nop
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4b16      	ldr	r3, [pc, #88]	@ (8006f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d802      	bhi.n	8006f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006efc:	4b15      	ldr	r3, [pc, #84]	@ (8006f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006efe:	617b      	str	r3, [r7, #20]
 8006f00:	e001      	b.n	8006f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006f02:	4b15      	ldr	r3, [pc, #84]	@ (8006f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006f04:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	3b08      	subs	r3, #8
 8006f12:	4a12      	ldr	r2, [pc, #72]	@ (8006f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006f14:	fba2 2303 	umull	r2, r3, r2, r3
 8006f18:	091b      	lsrs	r3, r3, #4
 8006f1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f20:	089b      	lsrs	r3, r3, #2
 8006f22:	009a      	lsls	r2, r3, #2
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4413      	add	r3, r2
 8006f28:	461a      	mov	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a0b      	ldr	r2, [pc, #44]	@ (8006f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006f32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f003 031f 	and.w	r3, r3, #31
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	409a      	lsls	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006f42:	bf00      	nop
 8006f44:	371c      	adds	r7, #28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	40020407 	.word	0x40020407
 8006f54:	40020800 	.word	0x40020800
 8006f58:	40020820 	.word	0x40020820
 8006f5c:	cccccccd 	.word	0xcccccccd
 8006f60:	40020880 	.word	0x40020880

08006f64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006f78:	4413      	add	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a08      	ldr	r2, [pc, #32]	@ (8006fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006f86:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	f003 031f 	and.w	r3, r3, #31
 8006f90:	2201      	movs	r2, #1
 8006f92:	409a      	lsls	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006f98:	bf00      	nop
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	1000823f 	.word	0x1000823f
 8006fa8:	40020940 	.word	0x40020940

08006fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006fba:	e15a      	b.n	8007272 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc8:	4013      	ands	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 814c 	beq.w	800726c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f003 0303 	and.w	r3, r3, #3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d005      	beq.n	8006fec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d130      	bne.n	800704e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	2203      	movs	r2, #3
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	4013      	ands	r3, r2
 8007002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	fa02 f303 	lsl.w	r3, r2, r3
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	4313      	orrs	r3, r2
 8007014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007022:	2201      	movs	r2, #1
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	fa02 f303 	lsl.w	r3, r2, r3
 800702a:	43db      	mvns	r3, r3
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4013      	ands	r3, r2
 8007030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	091b      	lsrs	r3, r3, #4
 8007038:	f003 0201 	and.w	r2, r3, #1
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	fa02 f303 	lsl.w	r3, r2, r3
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	2b03      	cmp	r3, #3
 8007058:	d017      	beq.n	800708a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	2203      	movs	r2, #3
 8007066:	fa02 f303 	lsl.w	r3, r2, r3
 800706a:	43db      	mvns	r3, r3
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4013      	ands	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	fa02 f303 	lsl.w	r3, r2, r3
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	4313      	orrs	r3, r2
 8007082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f003 0303 	and.w	r3, r3, #3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d123      	bne.n	80070de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	08da      	lsrs	r2, r3, #3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3208      	adds	r2, #8
 800709e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	220f      	movs	r2, #15
 80070ae:	fa02 f303 	lsl.w	r3, r2, r3
 80070b2:	43db      	mvns	r3, r3
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	4013      	ands	r3, r2
 80070b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	691a      	ldr	r2, [r3, #16]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	08da      	lsrs	r2, r3, #3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3208      	adds	r2, #8
 80070d8:	6939      	ldr	r1, [r7, #16]
 80070da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	2203      	movs	r2, #3
 80070ea:	fa02 f303 	lsl.w	r3, r2, r3
 80070ee:	43db      	mvns	r3, r3
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4013      	ands	r3, r2
 80070f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f003 0203 	and.w	r2, r3, #3
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	fa02 f303 	lsl.w	r3, r2, r3
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 80a6 	beq.w	800726c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007120:	4b5b      	ldr	r3, [pc, #364]	@ (8007290 <HAL_GPIO_Init+0x2e4>)
 8007122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007124:	4a5a      	ldr	r2, [pc, #360]	@ (8007290 <HAL_GPIO_Init+0x2e4>)
 8007126:	f043 0301 	orr.w	r3, r3, #1
 800712a:	6613      	str	r3, [r2, #96]	@ 0x60
 800712c:	4b58      	ldr	r3, [pc, #352]	@ (8007290 <HAL_GPIO_Init+0x2e4>)
 800712e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	60bb      	str	r3, [r7, #8]
 8007136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007138:	4a56      	ldr	r2, [pc, #344]	@ (8007294 <HAL_GPIO_Init+0x2e8>)
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	089b      	lsrs	r3, r3, #2
 800713e:	3302      	adds	r3, #2
 8007140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f003 0303 	and.w	r3, r3, #3
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	220f      	movs	r2, #15
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	43db      	mvns	r3, r3
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	4013      	ands	r3, r2
 800715a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007162:	d01f      	beq.n	80071a4 <HAL_GPIO_Init+0x1f8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a4c      	ldr	r2, [pc, #304]	@ (8007298 <HAL_GPIO_Init+0x2ec>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d019      	beq.n	80071a0 <HAL_GPIO_Init+0x1f4>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a4b      	ldr	r2, [pc, #300]	@ (800729c <HAL_GPIO_Init+0x2f0>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d013      	beq.n	800719c <HAL_GPIO_Init+0x1f0>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a4a      	ldr	r2, [pc, #296]	@ (80072a0 <HAL_GPIO_Init+0x2f4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d00d      	beq.n	8007198 <HAL_GPIO_Init+0x1ec>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a49      	ldr	r2, [pc, #292]	@ (80072a4 <HAL_GPIO_Init+0x2f8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d007      	beq.n	8007194 <HAL_GPIO_Init+0x1e8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a48      	ldr	r2, [pc, #288]	@ (80072a8 <HAL_GPIO_Init+0x2fc>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d101      	bne.n	8007190 <HAL_GPIO_Init+0x1e4>
 800718c:	2305      	movs	r3, #5
 800718e:	e00a      	b.n	80071a6 <HAL_GPIO_Init+0x1fa>
 8007190:	2306      	movs	r3, #6
 8007192:	e008      	b.n	80071a6 <HAL_GPIO_Init+0x1fa>
 8007194:	2304      	movs	r3, #4
 8007196:	e006      	b.n	80071a6 <HAL_GPIO_Init+0x1fa>
 8007198:	2303      	movs	r3, #3
 800719a:	e004      	b.n	80071a6 <HAL_GPIO_Init+0x1fa>
 800719c:	2302      	movs	r3, #2
 800719e:	e002      	b.n	80071a6 <HAL_GPIO_Init+0x1fa>
 80071a0:	2301      	movs	r3, #1
 80071a2:	e000      	b.n	80071a6 <HAL_GPIO_Init+0x1fa>
 80071a4:	2300      	movs	r3, #0
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	f002 0203 	and.w	r2, r2, #3
 80071ac:	0092      	lsls	r2, r2, #2
 80071ae:	4093      	lsls	r3, r2
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80071b6:	4937      	ldr	r1, [pc, #220]	@ (8007294 <HAL_GPIO_Init+0x2e8>)
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	089b      	lsrs	r3, r3, #2
 80071bc:	3302      	adds	r3, #2
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80071c4:	4b39      	ldr	r3, [pc, #228]	@ (80072ac <HAL_GPIO_Init+0x300>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	43db      	mvns	r3, r3
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4013      	ands	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80071e8:	4a30      	ldr	r2, [pc, #192]	@ (80072ac <HAL_GPIO_Init+0x300>)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80071ee:	4b2f      	ldr	r3, [pc, #188]	@ (80072ac <HAL_GPIO_Init+0x300>)
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	43db      	mvns	r3, r3
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4013      	ands	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4313      	orrs	r3, r2
 8007210:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007212:	4a26      	ldr	r2, [pc, #152]	@ (80072ac <HAL_GPIO_Init+0x300>)
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007218:	4b24      	ldr	r3, [pc, #144]	@ (80072ac <HAL_GPIO_Init+0x300>)
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	43db      	mvns	r3, r3
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4013      	ands	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	4313      	orrs	r3, r2
 800723a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800723c:	4a1b      	ldr	r2, [pc, #108]	@ (80072ac <HAL_GPIO_Init+0x300>)
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007242:	4b1a      	ldr	r3, [pc, #104]	@ (80072ac <HAL_GPIO_Init+0x300>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	43db      	mvns	r3, r3
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4013      	ands	r3, r2
 8007250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007266:	4a11      	ldr	r2, [pc, #68]	@ (80072ac <HAL_GPIO_Init+0x300>)
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	3301      	adds	r3, #1
 8007270:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	fa22 f303 	lsr.w	r3, r2, r3
 800727c:	2b00      	cmp	r3, #0
 800727e:	f47f ae9d 	bne.w	8006fbc <HAL_GPIO_Init+0x10>
  }
}
 8007282:	bf00      	nop
 8007284:	bf00      	nop
 8007286:	371c      	adds	r7, #28
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	40021000 	.word	0x40021000
 8007294:	40010000 	.word	0x40010000
 8007298:	48000400 	.word	0x48000400
 800729c:	48000800 	.word	0x48000800
 80072a0:	48000c00 	.word	0x48000c00
 80072a4:	48001000 	.word	0x48001000
 80072a8:	48001400 	.word	0x48001400
 80072ac:	40010400 	.word	0x40010400

080072b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691a      	ldr	r2, [r3, #16]
 80072c0:	887b      	ldrh	r3, [r7, #2]
 80072c2:	4013      	ands	r3, r2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80072c8:	2301      	movs	r3, #1
 80072ca:	73fb      	strb	r3, [r7, #15]
 80072cc:	e001      	b.n	80072d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	807b      	strh	r3, [r7, #2]
 80072ec:	4613      	mov	r3, r2
 80072ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80072f0:	787b      	ldrb	r3, [r7, #1]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80072f6:	887a      	ldrh	r2, [r7, #2]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80072fc:	e002      	b.n	8007304 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80072fe:	887a      	ldrh	r2, [r7, #2]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007322:	887a      	ldrh	r2, [r7, #2]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4013      	ands	r3, r2
 8007328:	041a      	lsls	r2, r3, #16
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	43d9      	mvns	r1, r3
 800732e:	887b      	ldrh	r3, [r7, #2]
 8007330:	400b      	ands	r3, r1
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	619a      	str	r2, [r3, #24]
}
 8007338:	bf00      	nop
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e0c0      	b.n	80074d8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f009 fa22 	bl	80107b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2203      	movs	r2, #3
 8007374:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4618      	mov	r0, r3
 800737e:	f005 f856 	bl	800c42e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]
 8007386:	e03e      	b.n	8007406 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007388:	7bfa      	ldrb	r2, [r7, #15]
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	440b      	add	r3, r1
 8007396:	3311      	adds	r3, #17
 8007398:	2201      	movs	r2, #1
 800739a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800739c:	7bfa      	ldrb	r2, [r7, #15]
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	440b      	add	r3, r1
 80073aa:	3310      	adds	r3, #16
 80073ac:	7bfa      	ldrb	r2, [r7, #15]
 80073ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80073b0:	7bfa      	ldrb	r2, [r7, #15]
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	440b      	add	r3, r1
 80073be:	3313      	adds	r3, #19
 80073c0:	2200      	movs	r2, #0
 80073c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80073c4:	7bfa      	ldrb	r2, [r7, #15]
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	440b      	add	r3, r1
 80073d2:	3320      	adds	r3, #32
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80073d8:	7bfa      	ldrb	r2, [r7, #15]
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	4613      	mov	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	440b      	add	r3, r1
 80073e6:	3324      	adds	r3, #36	@ 0x24
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	440b      	add	r3, r1
 80073fc:	2200      	movs	r2, #0
 80073fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	3301      	adds	r3, #1
 8007404:	73fb      	strb	r3, [r7, #15]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	791b      	ldrb	r3, [r3, #4]
 800740a:	7bfa      	ldrb	r2, [r7, #15]
 800740c:	429a      	cmp	r2, r3
 800740e:	d3bb      	bcc.n	8007388 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007410:	2300      	movs	r3, #0
 8007412:	73fb      	strb	r3, [r7, #15]
 8007414:	e044      	b.n	80074a0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007416:	7bfa      	ldrb	r2, [r7, #15]
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	440b      	add	r3, r1
 8007424:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8007428:	2200      	movs	r2, #0
 800742a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800742c:	7bfa      	ldrb	r2, [r7, #15]
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	4613      	mov	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	440b      	add	r3, r1
 800743a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800743e:	7bfa      	ldrb	r2, [r7, #15]
 8007440:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007442:	7bfa      	ldrb	r2, [r7, #15]
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	440b      	add	r3, r1
 8007450:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8007454:	2200      	movs	r2, #0
 8007456:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007458:	7bfa      	ldrb	r2, [r7, #15]
 800745a:	6879      	ldr	r1, [r7, #4]
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	440b      	add	r3, r1
 8007466:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800746a:	2200      	movs	r2, #0
 800746c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800746e:	7bfa      	ldrb	r2, [r7, #15]
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	440b      	add	r3, r1
 800747c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007484:	7bfa      	ldrb	r2, [r7, #15]
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	440b      	add	r3, r1
 8007492:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007496:	2200      	movs	r2, #0
 8007498:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	3301      	adds	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	791b      	ldrb	r3, [r3, #4]
 80074a4:	7bfa      	ldrb	r2, [r7, #15]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d3b5      	bcc.n	8007416 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6818      	ldr	r0, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3304      	adds	r3, #4
 80074b2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80074b6:	f004 ffd5 	bl	800c464 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	7a9b      	ldrb	r3, [r3, #10]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d102      	bne.n	80074d6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f001 fc42 	bl	8008d5a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d101      	bne.n	80074f6 <HAL_PCD_Start+0x16>
 80074f2:	2302      	movs	r3, #2
 80074f4:	e012      	b.n	800751c <HAL_PCD_Start+0x3c>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4618      	mov	r0, r3
 8007504:	f004 ff7c 	bl	800c400 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4618      	mov	r0, r3
 800750e:	f007 fa3d 	bl	800e98c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4618      	mov	r0, r3
 8007532:	f007 fa42 	bl	800e9ba <USB_ReadInterrupts>
 8007536:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fb06 	bl	8007b54 <PCD_EP_ISR_Handler>

    return;
 8007548:	e110      	b.n	800776c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007550:	2b00      	cmp	r3, #0
 8007552:	d013      	beq.n	800757c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800755c:	b29a      	uxth	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007566:	b292      	uxth	r2, r2
 8007568:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f009 f9b2 	bl	80108d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007572:	2100      	movs	r1, #0
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f8fc 	bl	8007772 <HAL_PCD_SetAddress>

    return;
 800757a:	e0f7      	b.n	800776c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00c      	beq.n	80075a0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800758e:	b29a      	uxth	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007598:	b292      	uxth	r2, r2
 800759a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800759e:	e0e5      	b.n	800776c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00c      	beq.n	80075c4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075bc:	b292      	uxth	r2, r2
 80075be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80075c2:	e0d3      	b.n	800776c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d034      	beq.n	8007638 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0204 	bic.w	r2, r2, #4
 80075e0:	b292      	uxth	r2, r2
 80075e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0208 	bic.w	r2, r2, #8
 80075f8:	b292      	uxth	r2, r2
 80075fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8007604:	2b01      	cmp	r3, #1
 8007606:	d107      	bne.n	8007618 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007610:	2100      	movs	r1, #0
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f009 fb52 	bl	8010cbc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f009 f995 	bl	8010948 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007626:	b29a      	uxth	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007630:	b292      	uxth	r2, r2
 8007632:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007636:	e099      	b.n	800776c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800763e:	2b00      	cmp	r3, #0
 8007640:	d027      	beq.n	8007692 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800764a:	b29a      	uxth	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f042 0208 	orr.w	r2, r2, #8
 8007654:	b292      	uxth	r2, r2
 8007656:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007662:	b29a      	uxth	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800766c:	b292      	uxth	r2, r2
 800766e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800767a:	b29a      	uxth	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0204 	orr.w	r2, r2, #4
 8007684:	b292      	uxth	r2, r2
 8007686:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f009 f942 	bl	8010914 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007690:	e06c      	b.n	800776c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007698:	2b00      	cmp	r3, #0
 800769a:	d040      	beq.n	800771e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076ae:	b292      	uxth	r2, r2
 80076b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d12b      	bne.n	8007716 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0204 	orr.w	r2, r2, #4
 80076d0:	b292      	uxth	r2, r2
 80076d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80076de:	b29a      	uxth	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0208 	orr.w	r2, r2, #8
 80076e8:	b292      	uxth	r2, r2
 80076ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80076fe:	b29b      	uxth	r3, r3
 8007700:	089b      	lsrs	r3, r3, #2
 8007702:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800770c:	2101      	movs	r1, #1
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f009 fad4 	bl	8010cbc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8007714:	e02a      	b.n	800776c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f009 f8fc 	bl	8010914 <HAL_PCD_SuspendCallback>
    return;
 800771c:	e026      	b.n	800776c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00f      	beq.n	8007748 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007730:	b29a      	uxth	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800773a:	b292      	uxth	r2, r2
 800773c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f009 f8ba 	bl	80108ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007746:	e011      	b.n	800776c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00c      	beq.n	800776c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800775a:	b29a      	uxth	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007764:	b292      	uxth	r2, r2
 8007766:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800776a:	bf00      	nop
  }
}
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	460b      	mov	r3, r1
 800777c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007784:	2b01      	cmp	r3, #1
 8007786:	d101      	bne.n	800778c <HAL_PCD_SetAddress+0x1a>
 8007788:	2302      	movs	r3, #2
 800778a:	e012      	b.n	80077b2 <HAL_PCD_SetAddress+0x40>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	78fa      	ldrb	r2, [r7, #3]
 8007798:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	78fa      	ldrb	r2, [r7, #3]
 80077a0:	4611      	mov	r1, r2
 80077a2:	4618      	mov	r0, r3
 80077a4:	f007 f8de 	bl	800e964 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	4608      	mov	r0, r1
 80077c4:	4611      	mov	r1, r2
 80077c6:	461a      	mov	r2, r3
 80077c8:	4603      	mov	r3, r0
 80077ca:	70fb      	strb	r3, [r7, #3]
 80077cc:	460b      	mov	r3, r1
 80077ce:	803b      	strh	r3, [r7, #0]
 80077d0:	4613      	mov	r3, r2
 80077d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80077d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	da0e      	bge.n	80077fe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	f003 0207 	and.w	r2, r3, #7
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	3310      	adds	r3, #16
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	4413      	add	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2201      	movs	r2, #1
 80077fa:	705a      	strb	r2, [r3, #1]
 80077fc:	e00e      	b.n	800781c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	f003 0207 	and.w	r2, r3, #7
 8007804:	4613      	mov	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	00db      	lsls	r3, r3, #3
 800780c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	4413      	add	r3, r2
 8007814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800781c:	78fb      	ldrb	r3, [r7, #3]
 800781e:	f003 0307 	and.w	r3, r3, #7
 8007822:	b2da      	uxtb	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007828:	883b      	ldrh	r3, [r7, #0]
 800782a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	78ba      	ldrb	r2, [r7, #2]
 8007836:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007838:	78bb      	ldrb	r3, [r7, #2]
 800783a:	2b02      	cmp	r3, #2
 800783c:	d102      	bne.n	8007844 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800784a:	2b01      	cmp	r3, #1
 800784c:	d101      	bne.n	8007852 <HAL_PCD_EP_Open+0x98>
 800784e:	2302      	movs	r3, #2
 8007850:	e00e      	b.n	8007870 <HAL_PCD_EP_Open+0xb6>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68f9      	ldr	r1, [r7, #12]
 8007860:	4618      	mov	r0, r3
 8007862:	f004 fe1d 	bl	800c4a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800786e:	7afb      	ldrb	r3, [r7, #11]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007884:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007888:	2b00      	cmp	r3, #0
 800788a:	da0e      	bge.n	80078aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800788c:	78fb      	ldrb	r3, [r7, #3]
 800788e:	f003 0207 	and.w	r2, r3, #7
 8007892:	4613      	mov	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	3310      	adds	r3, #16
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	4413      	add	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	705a      	strb	r2, [r3, #1]
 80078a8:	e00e      	b.n	80078c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078aa:	78fb      	ldrb	r3, [r7, #3]
 80078ac:	f003 0207 	and.w	r2, r3, #7
 80078b0:	4613      	mov	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	00db      	lsls	r3, r3, #3
 80078b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	4413      	add	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80078c8:	78fb      	ldrb	r3, [r7, #3]
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <HAL_PCD_EP_Close+0x6a>
 80078de:	2302      	movs	r3, #2
 80078e0:	e00e      	b.n	8007900 <HAL_PCD_EP_Close+0x88>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68f9      	ldr	r1, [r7, #12]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f005 f999 	bl	800cc28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	607a      	str	r2, [r7, #4]
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	460b      	mov	r3, r1
 8007916:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	f003 0207 	and.w	r2, r3, #7
 800791e:	4613      	mov	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	00db      	lsls	r3, r3, #3
 8007926:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	2200      	movs	r2, #0
 8007940:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2200      	movs	r2, #0
 8007946:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007948:	7afb      	ldrb	r3, [r7, #11]
 800794a:	f003 0307 	and.w	r3, r3, #7
 800794e:	b2da      	uxtb	r2, r3
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6979      	ldr	r1, [r7, #20]
 800795a:	4618      	mov	r0, r3
 800795c:	f005 fb51 	bl	800d002 <USB_EPStartXfer>

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	460b      	mov	r3, r1
 8007974:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	f003 0207 	and.w	r2, r3, #7
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	440b      	add	r3, r1
 8007988:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800798c:	681b      	ldr	r3, [r3, #0]
}
 800798e:	4618      	mov	r0, r3
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b086      	sub	sp, #24
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	603b      	str	r3, [r7, #0]
 80079a6:	460b      	mov	r3, r1
 80079a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079aa:	7afb      	ldrb	r3, [r7, #11]
 80079ac:	f003 0207 	and.w	r2, r3, #7
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	3310      	adds	r3, #16
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	4413      	add	r3, r2
 80079be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2200      	movs	r2, #0
 80079de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	2201      	movs	r2, #1
 80079e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079e6:	7afb      	ldrb	r3, [r7, #11]
 80079e8:	f003 0307 	and.w	r3, r3, #7
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6979      	ldr	r1, [r7, #20]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f005 fb02 	bl	800d002 <USB_EPStartXfer>

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007a14:	78fb      	ldrb	r3, [r7, #3]
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	7912      	ldrb	r2, [r2, #4]
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d901      	bls.n	8007a26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e03e      	b.n	8007aa4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	da0e      	bge.n	8007a4c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	f003 0207 	and.w	r2, r3, #7
 8007a34:	4613      	mov	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	3310      	adds	r3, #16
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	4413      	add	r3, r2
 8007a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2201      	movs	r2, #1
 8007a48:	705a      	strb	r2, [r3, #1]
 8007a4a:	e00c      	b.n	8007a66 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007a4c:	78fa      	ldrb	r2, [r7, #3]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a6c:	78fb      	ldrb	r3, [r7, #3]
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d101      	bne.n	8007a86 <HAL_PCD_EP_SetStall+0x7e>
 8007a82:	2302      	movs	r3, #2
 8007a84:	e00e      	b.n	8007aa4 <HAL_PCD_EP_SetStall+0x9c>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68f9      	ldr	r1, [r7, #12]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f006 fe66 	bl	800e766 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007ab8:	78fb      	ldrb	r3, [r7, #3]
 8007aba:	f003 030f 	and.w	r3, r3, #15
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	7912      	ldrb	r2, [r2, #4]
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d901      	bls.n	8007aca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e040      	b.n	8007b4c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	da0e      	bge.n	8007af0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	f003 0207 	and.w	r2, r3, #7
 8007ad8:	4613      	mov	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	3310      	adds	r3, #16
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2201      	movs	r2, #1
 8007aec:	705a      	strb	r2, [r3, #1]
 8007aee:	e00e      	b.n	8007b0e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	f003 0207 	and.w	r2, r3, #7
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	4413      	add	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b14:	78fb      	ldrb	r3, [r7, #3]
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d101      	bne.n	8007b2e <HAL_PCD_EP_ClrStall+0x82>
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	e00e      	b.n	8007b4c <HAL_PCD_EP_ClrStall+0xa0>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68f9      	ldr	r1, [r7, #12]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f006 fe63 	bl	800e808 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b096      	sub	sp, #88	@ 0x58
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007b5c:	e3ad      	b.n	80082ba <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007b66:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007b6a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	f003 030f 	and.w	r3, r3, #15
 8007b74:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8007b78:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f040 816f 	bne.w	8007e60 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007b82:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007b86:	f003 0310 	and.w	r3, r3, #16
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d14c      	bne.n	8007c28 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b9e:	81fb      	strh	r3, [r7, #14]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	89fb      	ldrh	r3, [r7, #14]
 8007ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	3310      	adds	r3, #16
 8007bb6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	4413      	add	r3, r2
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6812      	ldr	r2, [r2, #0]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bde:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007be2:	695a      	ldr	r2, [r3, #20]
 8007be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	441a      	add	r2, r3
 8007bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007bee:	2100      	movs	r1, #0
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f008 fe48 	bl	8010886 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	7b1b      	ldrb	r3, [r3, #12]
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 835c 	beq.w	80082ba <PCD_EP_ISR_Handler+0x766>
 8007c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f040 8357 	bne.w	80082ba <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	7b1b      	ldrb	r3, [r3, #12]
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	731a      	strb	r2, [r3, #12]
 8007c26:	e348      	b.n	80082ba <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c2e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007c3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007c3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d032      	beq.n	8007cac <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	461a      	mov	r2, r3
 8007c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	4413      	add	r3, r2
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	6812      	ldr	r2, [r2, #0]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c6c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6818      	ldr	r0, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c7a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c7e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	f006 feec 	bl	800ea5e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007c92:	4013      	ands	r3, r2
 8007c94:	823b      	strh	r3, [r7, #16]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	8a3a      	ldrh	r2, [r7, #16]
 8007c9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007ca0:	b292      	uxth	r2, r2
 8007ca2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f008 fdc1 	bl	801082c <HAL_PCD_SetupStageCallback>
 8007caa:	e306      	b.n	80082ba <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007cac:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f280 8302 	bge.w	80082ba <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	83fb      	strh	r3, [r7, #30]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	8bfa      	ldrh	r2, [r7, #30]
 8007ccc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007cd0:	b292      	uxth	r2, r2
 8007cd2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	4413      	add	r3, r2
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6812      	ldr	r2, [r2, #0]
 8007cec:	4413      	add	r3, r2
 8007cee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cfa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d019      	beq.n	8007d38 <PCD_EP_ISR_Handler+0x1e4>
 8007d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d015      	beq.n	8007d38 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6818      	ldr	r0, [r3, #0]
 8007d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d12:	6959      	ldr	r1, [r3, #20]
 8007d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d16:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d1a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	f006 fe9e 	bl	800ea5e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d24:	695a      	ldr	r2, [r3, #20]
 8007d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	441a      	add	r2, r3
 8007d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d2e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007d30:	2100      	movs	r1, #0
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f008 fd8c 	bl	8010850 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007d42:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007d46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f040 82b5 	bne.w	80082ba <PCD_EP_ISR_Handler+0x766>
 8007d50:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007d54:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007d58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d5c:	f000 82ad 	beq.w	80082ba <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	61bb      	str	r3, [r7, #24]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	461a      	mov	r2, r3
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	4413      	add	r3, r2
 8007d76:	61bb      	str	r3, [r7, #24]
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	801a      	strh	r2, [r3, #0]
 8007d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <PCD_EP_ISR_Handler+0x25a>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	801a      	strh	r2, [r3, #0]
 8007dac:	e039      	b.n	8007e22 <PCD_EP_ISR_Handler+0x2ce>
 8007dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	2b3e      	cmp	r3, #62	@ 0x3e
 8007db4:	d818      	bhi.n	8007de8 <PCD_EP_ISR_Handler+0x294>
 8007db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	085b      	lsrs	r3, r3, #1
 8007dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <PCD_EP_ISR_Handler+0x27c>
 8007dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dcc:	3301      	adds	r3, #1
 8007dce:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	029b      	lsls	r3, r3, #10
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	4313      	orrs	r3, r2
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	801a      	strh	r2, [r3, #0]
 8007de6:	e01c      	b.n	8007e22 <PCD_EP_ISR_Handler+0x2ce>
 8007de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	095b      	lsrs	r3, r3, #5
 8007dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8007df0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	f003 031f 	and.w	r3, r3, #31
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d102      	bne.n	8007e02 <PCD_EP_ISR_Handler+0x2ae>
 8007dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	029b      	lsls	r3, r3, #10
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	4313      	orrs	r3, r2
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e32:	827b      	strh	r3, [r7, #18]
 8007e34:	8a7b      	ldrh	r3, [r7, #18]
 8007e36:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e3a:	827b      	strh	r3, [r7, #18]
 8007e3c:	8a7b      	ldrh	r3, [r7, #18]
 8007e3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e42:	827b      	strh	r3, [r7, #18]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	8a7b      	ldrh	r3, [r7, #18]
 8007e4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	8013      	strh	r3, [r2, #0]
 8007e5e:	e22c      	b.n	80082ba <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	461a      	mov	r2, r3
 8007e66:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007e74:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f280 80f6 	bge.w	800806a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007e94:	4013      	ands	r3, r2
 8007e96:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8007eac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007eb0:	b292      	uxth	r2, r2
 8007eb2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007eb4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007eb8:	4613      	mov	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ecc:	7b1b      	ldrb	r3, [r3, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d123      	bne.n	8007f1a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	461a      	mov	r2, r3
 8007ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	6812      	ldr	r2, [r2, #0]
 8007eea:	4413      	add	r3, r2
 8007eec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ef6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8007efa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 808e 	beq.w	8008020 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6818      	ldr	r0, [r3, #0]
 8007f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f0a:	6959      	ldr	r1, [r3, #20]
 8007f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f0e:	88da      	ldrh	r2, [r3, #6]
 8007f10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007f14:	f006 fda3 	bl	800ea5e <USB_ReadPMA>
 8007f18:	e082      	b.n	8008020 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f1c:	78db      	ldrb	r3, [r3, #3]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d10a      	bne.n	8007f38 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007f22:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007f26:	461a      	mov	r2, r3
 8007f28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f9d3 	bl	80082d6 <HAL_PCD_EP_DB_Receive>
 8007f30:	4603      	mov	r3, r0
 8007f32:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8007f36:	e073      	b.n	8008020 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f52:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	441a      	add	r2, r3
 8007f64:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8007f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d022      	beq.n	8007fdc <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	4413      	add	r3, r2
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	6812      	ldr	r2, [r2, #0]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fba:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007fbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d02c      	beq.n	8008020 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fcc:	6959      	ldr	r1, [r3, #20]
 8007fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fd0:	891a      	ldrh	r2, [r3, #8]
 8007fd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007fd6:	f006 fd42 	bl	800ea5e <USB_ReadPMA>
 8007fda:	e021      	b.n	8008020 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	00db      	lsls	r3, r3, #3
 8007fee:	4413      	add	r3, r2
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	6812      	ldr	r2, [r2, #0]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ffa:	881b      	ldrh	r3, [r3, #0]
 8007ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008000:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8008004:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008008:	2b00      	cmp	r3, #0
 800800a:	d009      	beq.n	8008020 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6818      	ldr	r0, [r3, #0]
 8008010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008012:	6959      	ldr	r1, [r3, #20]
 8008014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008016:	895a      	ldrh	r2, [r3, #10]
 8008018:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800801c:	f006 fd1f 	bl	800ea5e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008022:	69da      	ldr	r2, [r3, #28]
 8008024:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008028:	441a      	add	r2, r3
 800802a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800802c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800802e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008030:	695a      	ldr	r2, [r3, #20]
 8008032:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008036:	441a      	add	r2, r3
 8008038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800803a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800803c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d005      	beq.n	8008050 <PCD_EP_ISR_Handler+0x4fc>
 8008044:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8008048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	429a      	cmp	r2, r3
 800804e:	d206      	bcs.n	800805e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f008 fbfa 	bl	8010850 <HAL_PCD_DataOutStageCallback>
 800805c:	e005      	b.n	800806a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008064:	4618      	mov	r0, r3
 8008066:	f004 ffcc 	bl	800d002 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800806a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800806e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 8121 	beq.w	80082ba <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8008078:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800807c:	4613      	mov	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	00db      	lsls	r3, r3, #3
 8008084:	3310      	adds	r3, #16
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	4413      	add	r3, r2
 800808a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	461a      	mov	r2, r3
 8008092:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	b29b      	uxth	r3, r3
 800809e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80080a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	441a      	add	r2, r3
 80080b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80080bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80080c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ca:	78db      	ldrb	r3, [r3, #3]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	f040 80a2 	bne.w	8008216 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80080d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080d4:	2200      	movs	r2, #0
 80080d6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80080d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080da:	7b1b      	ldrb	r3, [r3, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 8093 	beq.w	8008208 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80080e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80080e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d046      	beq.n	800817c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80080ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080f0:	785b      	ldrb	r3, [r3, #1]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d126      	bne.n	8008144 <PCD_EP_ISR_Handler+0x5f0>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008104:	b29b      	uxth	r3, r3
 8008106:	461a      	mov	r2, r3
 8008108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810a:	4413      	add	r3, r2
 800810c:	627b      	str	r3, [r7, #36]	@ 0x24
 800810e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	00da      	lsls	r2, r3, #3
 8008114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008116:	4413      	add	r3, r2
 8008118:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800811c:	623b      	str	r3, [r7, #32]
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	b29b      	uxth	r3, r3
 8008124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008128:	b29a      	uxth	r2, r3
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	801a      	strh	r2, [r3, #0]
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	b29b      	uxth	r3, r3
 8008134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800813c:	b29a      	uxth	r2, r3
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	e061      	b.n	8008208 <PCD_EP_ISR_Handler+0x6b4>
 8008144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008146:	785b      	ldrb	r3, [r3, #1]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d15d      	bne.n	8008208 <PCD_EP_ISR_Handler+0x6b4>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800815a:	b29b      	uxth	r3, r3
 800815c:	461a      	mov	r2, r3
 800815e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008160:	4413      	add	r3, r2
 8008162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	00da      	lsls	r2, r3, #3
 800816a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816c:	4413      	add	r3, r2
 800816e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008172:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008176:	2200      	movs	r2, #0
 8008178:	801a      	strh	r2, [r3, #0]
 800817a:	e045      	b.n	8008208 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d126      	bne.n	80081d8 <PCD_EP_ISR_Handler+0x684>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008198:	b29b      	uxth	r3, r3
 800819a:	461a      	mov	r2, r3
 800819c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800819e:	4413      	add	r3, r2
 80081a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80081a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	00da      	lsls	r2, r3, #3
 80081a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081aa:	4413      	add	r3, r2
 80081ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80081b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80081b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081bc:	b29a      	uxth	r2, r3
 80081be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c0:	801a      	strh	r2, [r3, #0]
 80081c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d4:	801a      	strh	r2, [r3, #0]
 80081d6:	e017      	b.n	8008208 <PCD_EP_ISR_Handler+0x6b4>
 80081d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081da:	785b      	ldrb	r3, [r3, #1]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d113      	bne.n	8008208 <PCD_EP_ISR_Handler+0x6b4>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	461a      	mov	r2, r3
 80081ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ee:	4413      	add	r3, r2
 80081f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	00da      	lsls	r2, r3, #3
 80081f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081fa:	4413      	add	r3, r2
 80081fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008200:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008204:	2200      	movs	r2, #0
 8008206:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f008 fb39 	bl	8010886 <HAL_PCD_DataInStageCallback>
 8008214:	e051      	b.n	80082ba <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008216:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800821a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800821e:	2b00      	cmp	r3, #0
 8008220:	d144      	bne.n	80082ac <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800822a:	b29b      	uxth	r3, r3
 800822c:	461a      	mov	r2, r3
 800822e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	00db      	lsls	r3, r3, #3
 8008234:	4413      	add	r3, r2
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	6812      	ldr	r2, [r2, #0]
 800823a:	4413      	add	r3, r2
 800823c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008246:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800824a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800824c:	699a      	ldr	r2, [r3, #24]
 800824e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008252:	429a      	cmp	r2, r3
 8008254:	d907      	bls.n	8008266 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8008256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008258:	699a      	ldr	r2, [r3, #24]
 800825a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800825e:	1ad2      	subs	r2, r2, r3
 8008260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008262:	619a      	str	r2, [r3, #24]
 8008264:	e002      	b.n	800826c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8008266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008268:	2200      	movs	r2, #0
 800826a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800826c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d106      	bne.n	8008282 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f008 fb03 	bl	8010886 <HAL_PCD_DataInStageCallback>
 8008280:	e01b      	b.n	80082ba <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008284:	695a      	ldr	r2, [r3, #20]
 8008286:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800828a:	441a      	add	r2, r3
 800828c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800828e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008292:	69da      	ldr	r2, [r3, #28]
 8008294:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008298:	441a      	add	r2, r3
 800829a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800829c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082a4:	4618      	mov	r0, r3
 80082a6:	f004 feac 	bl	800d002 <USB_EPStartXfer>
 80082aa:	e006      	b.n	80082ba <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80082ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80082b0:	461a      	mov	r2, r3
 80082b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f917 	bl	80084e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	b21b      	sxth	r3, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f6ff ac49 	blt.w	8007b5e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3758      	adds	r7, #88	@ 0x58
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b088      	sub	sp, #32
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	4613      	mov	r3, r2
 80082e2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80082e4:	88fb      	ldrh	r3, [r7, #6]
 80082e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d07c      	beq.n	80083e8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	00db      	lsls	r3, r3, #3
 8008300:	4413      	add	r3, r2
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	6812      	ldr	r2, [r2, #0]
 8008306:	4413      	add	r3, r2
 8008308:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008312:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	699a      	ldr	r2, [r3, #24]
 8008318:	8b7b      	ldrh	r3, [r7, #26]
 800831a:	429a      	cmp	r2, r3
 800831c:	d306      	bcc.n	800832c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	699a      	ldr	r2, [r3, #24]
 8008322:	8b7b      	ldrh	r3, [r7, #26]
 8008324:	1ad2      	subs	r2, r2, r3
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	619a      	str	r2, [r3, #24]
 800832a:	e002      	b.n	8008332 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2200      	movs	r2, #0
 8008330:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d123      	bne.n	8008382 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	b29b      	uxth	r3, r3
 800834c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008350:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008354:	833b      	strh	r3, [r7, #24]
 8008356:	8b3b      	ldrh	r3, [r7, #24]
 8008358:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800835c:	833b      	strh	r3, [r7, #24]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	441a      	add	r2, r3
 800836c:	8b3b      	ldrh	r3, [r7, #24]
 800836e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800837a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800837e:	b29b      	uxth	r3, r3
 8008380:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008382:	88fb      	ldrh	r3, [r7, #6]
 8008384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008388:	2b00      	cmp	r3, #0
 800838a:	d01f      	beq.n	80083cc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	b29b      	uxth	r3, r3
 800839e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083a6:	82fb      	strh	r3, [r7, #22]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	461a      	mov	r2, r3
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	441a      	add	r2, r3
 80083b6:	8afb      	ldrh	r3, [r7, #22]
 80083b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80083cc:	8b7b      	ldrh	r3, [r7, #26]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 8085 	beq.w	80084de <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	6959      	ldr	r1, [r3, #20]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	891a      	ldrh	r2, [r3, #8]
 80083e0:	8b7b      	ldrh	r3, [r7, #26]
 80083e2:	f006 fb3c 	bl	800ea5e <USB_ReadPMA>
 80083e6:	e07a      	b.n	80084de <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	461a      	mov	r2, r3
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	00db      	lsls	r3, r3, #3
 80083fa:	4413      	add	r3, r2
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	6812      	ldr	r2, [r2, #0]
 8008400:	4413      	add	r3, r2
 8008402:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008406:	881b      	ldrh	r3, [r3, #0]
 8008408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800840c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	699a      	ldr	r2, [r3, #24]
 8008412:	8b7b      	ldrh	r3, [r7, #26]
 8008414:	429a      	cmp	r2, r3
 8008416:	d306      	bcc.n	8008426 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	699a      	ldr	r2, [r3, #24]
 800841c:	8b7b      	ldrh	r3, [r7, #26]
 800841e:	1ad2      	subs	r2, r2, r3
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	619a      	str	r2, [r3, #24]
 8008424:	e002      	b.n	800842c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	2200      	movs	r2, #0
 800842a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d123      	bne.n	800847c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800844a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800844e:	83fb      	strh	r3, [r7, #30]
 8008450:	8bfb      	ldrh	r3, [r7, #30]
 8008452:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008456:	83fb      	strh	r3, [r7, #30]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	461a      	mov	r2, r3
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	441a      	add	r2, r3
 8008466:	8bfb      	ldrh	r3, [r7, #30]
 8008468:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800846c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008470:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008478:	b29b      	uxth	r3, r3
 800847a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800847c:	88fb      	ldrh	r3, [r7, #6]
 800847e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008482:	2b00      	cmp	r3, #0
 8008484:	d11f      	bne.n	80084c6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	461a      	mov	r2, r3
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	b29b      	uxth	r3, r3
 8008498:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800849c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084a0:	83bb      	strh	r3, [r7, #28]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	441a      	add	r2, r3
 80084b0:	8bbb      	ldrh	r3, [r7, #28]
 80084b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80084c6:	8b7b      	ldrh	r3, [r7, #26]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d008      	beq.n	80084de <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6818      	ldr	r0, [r3, #0]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	6959      	ldr	r1, [r3, #20]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	895a      	ldrh	r2, [r3, #10]
 80084d8:	8b7b      	ldrh	r3, [r7, #26]
 80084da:	f006 fac0 	bl	800ea5e <USB_ReadPMA>
    }
  }

  return count;
 80084de:	8b7b      	ldrh	r3, [r7, #26]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3720      	adds	r7, #32
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b0a4      	sub	sp, #144	@ 0x90
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	4613      	mov	r3, r2
 80084f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80084f6:	88fb      	ldrh	r3, [r7, #6]
 80084f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 81db 	beq.w	80088b8 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800850a:	b29b      	uxth	r3, r3
 800850c:	461a      	mov	r2, r3
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	4413      	add	r3, r2
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	6812      	ldr	r2, [r2, #0]
 800851a:	4413      	add	r3, r2
 800851c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008526:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	699a      	ldr	r2, [r3, #24]
 800852e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008532:	429a      	cmp	r2, r3
 8008534:	d907      	bls.n	8008546 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	699a      	ldr	r2, [r3, #24]
 800853a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800853e:	1ad2      	subs	r2, r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	619a      	str	r2, [r3, #24]
 8008544:	e002      	b.n	800854c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2200      	movs	r2, #0
 800854a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	2b00      	cmp	r3, #0
 8008552:	f040 80b9 	bne.w	80086c8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	785b      	ldrb	r3, [r3, #1]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d126      	bne.n	80085ac <HAL_PCD_EP_DB_Transmit+0xc4>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800856c:	b29b      	uxth	r3, r3
 800856e:	461a      	mov	r2, r3
 8008570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008572:	4413      	add	r3, r2
 8008574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	00da      	lsls	r2, r3, #3
 800857c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800857e:	4413      	add	r3, r2
 8008580:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008584:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	b29b      	uxth	r3, r3
 800858c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008590:	b29a      	uxth	r2, r3
 8008592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008594:	801a      	strh	r2, [r3, #0]
 8008596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	b29b      	uxth	r3, r3
 800859c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a8:	801a      	strh	r2, [r3, #0]
 80085aa:	e01a      	b.n	80085e2 <HAL_PCD_EP_DB_Transmit+0xfa>
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	785b      	ldrb	r3, [r3, #1]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d116      	bne.n	80085e2 <HAL_PCD_EP_DB_Transmit+0xfa>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	461a      	mov	r2, r3
 80085c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c8:	4413      	add	r3, r2
 80085ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	00da      	lsls	r2, r3, #3
 80085d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d4:	4413      	add	r3, r2
 80085d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085da:	633b      	str	r3, [r7, #48]	@ 0x30
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	2200      	movs	r2, #0
 80085e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	785b      	ldrb	r3, [r3, #1]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d126      	bne.n	800863e <HAL_PCD_EP_DB_Transmit+0x156>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	61fb      	str	r3, [r7, #28]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085fe:	b29b      	uxth	r3, r3
 8008600:	461a      	mov	r2, r3
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	4413      	add	r3, r2
 8008606:	61fb      	str	r3, [r7, #28]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	00da      	lsls	r2, r3, #3
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	4413      	add	r3, r2
 8008612:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008616:	61bb      	str	r3, [r7, #24]
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	881b      	ldrh	r3, [r3, #0]
 800861c:	b29b      	uxth	r3, r3
 800861e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008622:	b29a      	uxth	r2, r3
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	801a      	strh	r2, [r3, #0]
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	b29b      	uxth	r3, r3
 800862e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008636:	b29a      	uxth	r2, r3
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	801a      	strh	r2, [r3, #0]
 800863c:	e017      	b.n	800866e <HAL_PCD_EP_DB_Transmit+0x186>
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	785b      	ldrb	r3, [r3, #1]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d113      	bne.n	800866e <HAL_PCD_EP_DB_Transmit+0x186>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800864e:	b29b      	uxth	r3, r3
 8008650:	461a      	mov	r2, r3
 8008652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008654:	4413      	add	r3, r2
 8008656:	627b      	str	r3, [r7, #36]	@ 0x24
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	00da      	lsls	r2, r3, #3
 800865e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008660:	4413      	add	r3, r2
 8008662:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008666:	623b      	str	r3, [r7, #32]
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	2200      	movs	r2, #0
 800866c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	4619      	mov	r1, r3
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f008 f906 	bl	8010886 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800867a:	88fb      	ldrh	r3, [r7, #6]
 800867c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 82fa 	beq.w	8008c7a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800869c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086a0:	82fb      	strh	r3, [r7, #22]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	441a      	add	r2, r3
 80086b0:	8afb      	ldrh	r3, [r7, #22]
 80086b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	8013      	strh	r3, [r2, #0]
 80086c6:	e2d8      	b.n	8008c7a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80086c8:	88fb      	ldrh	r3, [r7, #6]
 80086ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d021      	beq.n	8008716 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	441a      	add	r2, r3
 80086fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008702:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008706:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800870a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800870e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008712:	b29b      	uxth	r3, r3
 8008714:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800871c:	2b01      	cmp	r3, #1
 800871e:	f040 82ac 	bne.w	8008c7a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	695a      	ldr	r2, [r3, #20]
 8008726:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800872a:	441a      	add	r2, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	69da      	ldr	r2, [r3, #28]
 8008734:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008738:	441a      	add	r2, r3
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	6a1a      	ldr	r2, [r3, #32]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	429a      	cmp	r2, r3
 8008748:	d30b      	bcc.n	8008762 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	6a1a      	ldr	r2, [r3, #32]
 8008756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800875a:	1ad2      	subs	r2, r2, r3
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	621a      	str	r2, [r3, #32]
 8008760:	e017      	b.n	8008792 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d108      	bne.n	800877c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800876a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800876e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800877a:	e00a      	b.n	8008792 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	6a1b      	ldr	r3, [r3, #32]
 8008788:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2200      	movs	r2, #0
 8008790:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	785b      	ldrb	r3, [r3, #1]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d165      	bne.n	8008866 <HAL_PCD_EP_DB_Transmit+0x37e>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	461a      	mov	r2, r3
 80087ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ae:	4413      	add	r3, r2
 80087b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	00da      	lsls	r2, r3, #3
 80087b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ba:	4413      	add	r3, r2
 80087bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80087c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d0:	801a      	strh	r2, [r3, #0]
 80087d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10a      	bne.n	80087f0 <HAL_PCD_EP_DB_Transmit+0x308>
 80087da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ec:	801a      	strh	r2, [r3, #0]
 80087ee:	e057      	b.n	80088a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80087f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80087f6:	d818      	bhi.n	800882a <HAL_PCD_EP_DB_Transmit+0x342>
 80087f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087fc:	085b      	lsrs	r3, r3, #1
 80087fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008800:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <HAL_PCD_EP_DB_Transmit+0x32a>
 800880c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800880e:	3301      	adds	r3, #1
 8008810:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	b29a      	uxth	r2, r3
 8008818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800881a:	b29b      	uxth	r3, r3
 800881c:	029b      	lsls	r3, r3, #10
 800881e:	b29b      	uxth	r3, r3
 8008820:	4313      	orrs	r3, r2
 8008822:	b29a      	uxth	r2, r3
 8008824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008826:	801a      	strh	r2, [r3, #0]
 8008828:	e03a      	b.n	80088a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800882a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800882e:	095b      	lsrs	r3, r3, #5
 8008830:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008832:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008836:	f003 031f 	and.w	r3, r3, #31
 800883a:	2b00      	cmp	r3, #0
 800883c:	d102      	bne.n	8008844 <HAL_PCD_EP_DB_Transmit+0x35c>
 800883e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008840:	3b01      	subs	r3, #1
 8008842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	b29a      	uxth	r2, r3
 800884a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800884c:	b29b      	uxth	r3, r3
 800884e:	029b      	lsls	r3, r3, #10
 8008850:	b29b      	uxth	r3, r3
 8008852:	4313      	orrs	r3, r2
 8008854:	b29b      	uxth	r3, r3
 8008856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800885a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800885e:	b29a      	uxth	r2, r3
 8008860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008862:	801a      	strh	r2, [r3, #0]
 8008864:	e01c      	b.n	80088a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	785b      	ldrb	r3, [r3, #1]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d118      	bne.n	80088a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	647b      	str	r3, [r7, #68]	@ 0x44
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800887c:	b29b      	uxth	r3, r3
 800887e:	461a      	mov	r2, r3
 8008880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008882:	4413      	add	r3, r2
 8008884:	647b      	str	r3, [r7, #68]	@ 0x44
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	00da      	lsls	r2, r3, #3
 800888c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800888e:	4413      	add	r3, r2
 8008890:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008894:	643b      	str	r3, [r7, #64]	@ 0x40
 8008896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800889a:	b29a      	uxth	r2, r3
 800889c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800889e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6818      	ldr	r0, [r3, #0]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	6959      	ldr	r1, [r3, #20]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	891a      	ldrh	r2, [r3, #8]
 80088ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	f006 f892 	bl	800e9da <USB_WritePMA>
 80088b6:	e1e0      	b.n	8008c7a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	4413      	add	r3, r2
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	6812      	ldr	r2, [r2, #0]
 80088d0:	4413      	add	r3, r2
 80088d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80088d6:	881b      	ldrh	r3, [r3, #0]
 80088d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088dc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	699a      	ldr	r2, [r3, #24]
 80088e4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d307      	bcc.n	80088fc <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	699a      	ldr	r2, [r3, #24]
 80088f0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80088f4:	1ad2      	subs	r2, r2, r3
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	619a      	str	r2, [r3, #24]
 80088fa:	e002      	b.n	8008902 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2200      	movs	r2, #0
 8008900:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	2b00      	cmp	r3, #0
 8008908:	f040 80c0 	bne.w	8008a8c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	785b      	ldrb	r3, [r3, #1]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d126      	bne.n	8008962 <HAL_PCD_EP_DB_Transmit+0x47a>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008922:	b29b      	uxth	r3, r3
 8008924:	461a      	mov	r2, r3
 8008926:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008928:	4413      	add	r3, r2
 800892a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	00da      	lsls	r2, r3, #3
 8008932:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008934:	4413      	add	r3, r2
 8008936:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800893a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800893c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	b29b      	uxth	r3, r3
 8008942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008946:	b29a      	uxth	r2, r3
 8008948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800894a:	801a      	strh	r2, [r3, #0]
 800894c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	b29b      	uxth	r3, r3
 8008952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800895a:	b29a      	uxth	r2, r3
 800895c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800895e:	801a      	strh	r2, [r3, #0]
 8008960:	e01a      	b.n	8008998 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	785b      	ldrb	r3, [r3, #1]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d116      	bne.n	8008998 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008978:	b29b      	uxth	r3, r3
 800897a:	461a      	mov	r2, r3
 800897c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800897e:	4413      	add	r3, r2
 8008980:	667b      	str	r3, [r7, #100]	@ 0x64
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	00da      	lsls	r2, r3, #3
 8008988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800898a:	4413      	add	r3, r2
 800898c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008990:	663b      	str	r3, [r7, #96]	@ 0x60
 8008992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008994:	2200      	movs	r2, #0
 8008996:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	677b      	str	r3, [r7, #116]	@ 0x74
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d12b      	bne.n	80089fe <HAL_PCD_EP_DB_Transmit+0x516>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	461a      	mov	r2, r3
 80089b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089ba:	4413      	add	r3, r2
 80089bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	00da      	lsls	r2, r3, #3
 80089c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089c6:	4413      	add	r3, r2
 80089c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80089cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80089d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089d4:	881b      	ldrh	r3, [r3, #0]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089dc:	b29a      	uxth	r2, r3
 80089de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089e2:	801a      	strh	r2, [r3, #0]
 80089e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089e8:	881b      	ldrh	r3, [r3, #0]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089fa:	801a      	strh	r2, [r3, #0]
 80089fc:	e017      	b.n	8008a2e <HAL_PCD_EP_DB_Transmit+0x546>
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	785b      	ldrb	r3, [r3, #1]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d113      	bne.n	8008a2e <HAL_PCD_EP_DB_Transmit+0x546>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	461a      	mov	r2, r3
 8008a12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a14:	4413      	add	r3, r2
 8008a16:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	00da      	lsls	r2, r3, #3
 8008a1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a20:	4413      	add	r3, r2
 8008a22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a26:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	4619      	mov	r1, r3
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f007 ff26 	bl	8010886 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008a3a:	88fb      	ldrh	r3, [r7, #6]
 8008a3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f040 811a 	bne.w	8008c7a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a60:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	441a      	add	r2, r3
 8008a72:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008a76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	8013      	strh	r3, [r2, #0]
 8008a8a:	e0f6      	b.n	8008c7a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008a8c:	88fb      	ldrh	r3, [r7, #6]
 8008a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d121      	bne.n	8008ada <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ab0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	441a      	add	r2, r3
 8008ac2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008ac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ace:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	f040 80ca 	bne.w	8008c7a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	695a      	ldr	r2, [r3, #20]
 8008aea:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008aee:	441a      	add	r2, r3
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	69da      	ldr	r2, [r3, #28]
 8008af8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008afc:	441a      	add	r2, r3
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	6a1a      	ldr	r2, [r3, #32]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d30b      	bcc.n	8008b26 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	6a1a      	ldr	r2, [r3, #32]
 8008b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b1e:	1ad2      	subs	r2, r2, r3
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	621a      	str	r2, [r3, #32]
 8008b24:	e017      	b.n	8008b56 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d108      	bne.n	8008b40 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8008b2e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008b32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008b3e:	e00a      	b.n	8008b56 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	6a1b      	ldr	r3, [r3, #32]
 8008b44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	785b      	ldrb	r3, [r3, #1]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d165      	bne.n	8008c30 <HAL_PCD_EP_DB_Transmit+0x748>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	461a      	mov	r2, r3
 8008b76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b78:	4413      	add	r3, r2
 8008b7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	00da      	lsls	r2, r3, #3
 8008b82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b84:	4413      	add	r3, r2
 8008b86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b9a:	801a      	strh	r2, [r3, #0]
 8008b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10a      	bne.n	8008bba <HAL_PCD_EP_DB_Transmit+0x6d2>
 8008ba4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bb6:	801a      	strh	r2, [r3, #0]
 8008bb8:	e054      	b.n	8008c64 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8008bc0:	d818      	bhi.n	8008bf4 <HAL_PCD_EP_DB_Transmit+0x70c>
 8008bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bc6:	085b      	lsrs	r3, r3, #1
 8008bc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d002      	beq.n	8008bdc <HAL_PCD_EP_DB_Transmit+0x6f4>
 8008bd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bd8:	3301      	adds	r3, #1
 8008bda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	029b      	lsls	r3, r3, #10
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	4313      	orrs	r3, r2
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bf0:	801a      	strh	r2, [r3, #0]
 8008bf2:	e037      	b.n	8008c64 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bf8:	095b      	lsrs	r3, r3, #5
 8008bfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c00:	f003 031f 	and.w	r3, r3, #31
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d102      	bne.n	8008c0e <HAL_PCD_EP_DB_Transmit+0x726>
 8008c08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	029b      	lsls	r3, r3, #10
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c2c:	801a      	strh	r2, [r3, #0]
 8008c2e:	e019      	b.n	8008c64 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	785b      	ldrb	r3, [r3, #1]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d115      	bne.n	8008c64 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	461a      	mov	r2, r3
 8008c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c46:	4413      	add	r3, r2
 8008c48:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	00da      	lsls	r2, r3, #3
 8008c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c52:	4413      	add	r3, r2
 8008c54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c58:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c62:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6818      	ldr	r0, [r3, #0]
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	6959      	ldr	r1, [r3, #20]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	895a      	ldrh	r2, [r3, #10]
 8008c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	f005 feb0 	bl	800e9da <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	881b      	ldrh	r3, [r3, #0]
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c94:	82bb      	strh	r3, [r7, #20]
 8008c96:	8abb      	ldrh	r3, [r7, #20]
 8008c98:	f083 0310 	eor.w	r3, r3, #16
 8008c9c:	82bb      	strh	r3, [r7, #20]
 8008c9e:	8abb      	ldrh	r3, [r7, #20]
 8008ca0:	f083 0320 	eor.w	r3, r3, #32
 8008ca4:	82bb      	strh	r3, [r7, #20]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	441a      	add	r2, r3
 8008cb4:	8abb      	ldrh	r3, [r7, #20]
 8008cb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3790      	adds	r7, #144	@ 0x90
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b087      	sub	sp, #28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	607b      	str	r3, [r7, #4]
 8008cde:	460b      	mov	r3, r1
 8008ce0:	817b      	strh	r3, [r7, #10]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008ce6:	897b      	ldrh	r3, [r7, #10]
 8008ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00b      	beq.n	8008d0a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cf2:	897b      	ldrh	r3, [r7, #10]
 8008cf4:	f003 0207 	and.w	r2, r3, #7
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	00db      	lsls	r3, r3, #3
 8008d00:	3310      	adds	r3, #16
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	4413      	add	r3, r2
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	e009      	b.n	8008d1e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008d0a:	897a      	ldrh	r2, [r7, #10]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	00db      	lsls	r3, r3, #3
 8008d14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008d1e:	893b      	ldrh	r3, [r7, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d107      	bne.n	8008d34 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	2200      	movs	r2, #0
 8008d28:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	80da      	strh	r2, [r3, #6]
 8008d32:	e00b      	b.n	8008d4c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	2201      	movs	r2, #1
 8008d38:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	0c1b      	lsrs	r3, r3, #16
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f043 0301 	orr.w	r3, r3, #1
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	f043 0302 	orr.w	r3, r3, #2
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
	...

08008db0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d141      	bne.n	8008e42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dca:	d131      	bne.n	8008e30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008dcc:	4b47      	ldr	r3, [pc, #284]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd2:	4a46      	ldr	r2, [pc, #280]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008dd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ddc:	4b43      	ldr	r3, [pc, #268]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008de4:	4a41      	ldr	r2, [pc, #260]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008dea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008dec:	4b40      	ldr	r3, [pc, #256]	@ (8008ef0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2232      	movs	r2, #50	@ 0x32
 8008df2:	fb02 f303 	mul.w	r3, r2, r3
 8008df6:	4a3f      	ldr	r2, [pc, #252]	@ (8008ef4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008df8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfc:	0c9b      	lsrs	r3, r3, #18
 8008dfe:	3301      	adds	r3, #1
 8008e00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e02:	e002      	b.n	8008e0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3b01      	subs	r3, #1
 8008e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e0a:	4b38      	ldr	r3, [pc, #224]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e16:	d102      	bne.n	8008e1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1f2      	bne.n	8008e04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008e1e:	4b33      	ldr	r3, [pc, #204]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e2a:	d158      	bne.n	8008ede <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e057      	b.n	8008ee0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e30:	4b2e      	ldr	r3, [pc, #184]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e36:	4a2d      	ldr	r2, [pc, #180]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008e40:	e04d      	b.n	8008ede <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e48:	d141      	bne.n	8008ece <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008e4a:	4b28      	ldr	r3, [pc, #160]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e56:	d131      	bne.n	8008ebc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e58:	4b24      	ldr	r3, [pc, #144]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e5e:	4a23      	ldr	r2, [pc, #140]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e68:	4b20      	ldr	r3, [pc, #128]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008e70:	4a1e      	ldr	r2, [pc, #120]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008e76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008e78:	4b1d      	ldr	r3, [pc, #116]	@ (8008ef0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2232      	movs	r2, #50	@ 0x32
 8008e7e:	fb02 f303 	mul.w	r3, r2, r3
 8008e82:	4a1c      	ldr	r2, [pc, #112]	@ (8008ef4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008e84:	fba2 2303 	umull	r2, r3, r2, r3
 8008e88:	0c9b      	lsrs	r3, r3, #18
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e8e:	e002      	b.n	8008e96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e96:	4b15      	ldr	r3, [pc, #84]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ea2:	d102      	bne.n	8008eaa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1f2      	bne.n	8008e90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008eaa:	4b10      	ldr	r3, [pc, #64]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008eb6:	d112      	bne.n	8008ede <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e011      	b.n	8008ee0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ec8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008ecc:	e007      	b.n	8008ede <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008ece:	4b07      	ldr	r3, [pc, #28]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008ed6:	4a05      	ldr	r2, [pc, #20]	@ (8008eec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ed8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008edc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	40007000 	.word	0x40007000
 8008ef0:	2000003c 	.word	0x2000003c
 8008ef4:	431bde83 	.word	0x431bde83

08008ef8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008efc:	4b05      	ldr	r3, [pc, #20]	@ (8008f14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	4a04      	ldr	r2, [pc, #16]	@ (8008f14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008f02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f06:	6093      	str	r3, [r2, #8]
}
 8008f08:	bf00      	nop
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	40007000 	.word	0x40007000

08008f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d101      	bne.n	8008f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e2fe      	b.n	8009528 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d075      	beq.n	8009022 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f36:	4b97      	ldr	r3, [pc, #604]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f003 030c 	and.w	r3, r3, #12
 8008f3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f40:	4b94      	ldr	r3, [pc, #592]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f003 0303 	and.w	r3, r3, #3
 8008f48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	2b0c      	cmp	r3, #12
 8008f4e:	d102      	bne.n	8008f56 <HAL_RCC_OscConfig+0x3e>
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d002      	beq.n	8008f5c <HAL_RCC_OscConfig+0x44>
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	2b08      	cmp	r3, #8
 8008f5a:	d10b      	bne.n	8008f74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f5c:	4b8d      	ldr	r3, [pc, #564]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d05b      	beq.n	8009020 <HAL_RCC_OscConfig+0x108>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d157      	bne.n	8009020 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e2d9      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f7c:	d106      	bne.n	8008f8c <HAL_RCC_OscConfig+0x74>
 8008f7e:	4b85      	ldr	r3, [pc, #532]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a84      	ldr	r2, [pc, #528]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f88:	6013      	str	r3, [r2, #0]
 8008f8a:	e01d      	b.n	8008fc8 <HAL_RCC_OscConfig+0xb0>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f94:	d10c      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x98>
 8008f96:	4b7f      	ldr	r3, [pc, #508]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008f9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	4b7c      	ldr	r3, [pc, #496]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a7b      	ldr	r2, [pc, #492]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fac:	6013      	str	r3, [r2, #0]
 8008fae:	e00b      	b.n	8008fc8 <HAL_RCC_OscConfig+0xb0>
 8008fb0:	4b78      	ldr	r3, [pc, #480]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a77      	ldr	r2, [pc, #476]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	4b75      	ldr	r3, [pc, #468]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a74      	ldr	r2, [pc, #464]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008fc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d013      	beq.n	8008ff8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd0:	f7fb fbb6 	bl	8004740 <HAL_GetTick>
 8008fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008fd6:	e008      	b.n	8008fea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fd8:	f7fb fbb2 	bl	8004740 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	2b64      	cmp	r3, #100	@ 0x64
 8008fe4:	d901      	bls.n	8008fea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e29e      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008fea:	4b6a      	ldr	r3, [pc, #424]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0f0      	beq.n	8008fd8 <HAL_RCC_OscConfig+0xc0>
 8008ff6:	e014      	b.n	8009022 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff8:	f7fb fba2 	bl	8004740 <HAL_GetTick>
 8008ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ffe:	e008      	b.n	8009012 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009000:	f7fb fb9e 	bl	8004740 <HAL_GetTick>
 8009004:	4602      	mov	r2, r0
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	2b64      	cmp	r3, #100	@ 0x64
 800900c:	d901      	bls.n	8009012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e28a      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009012:	4b60      	ldr	r3, [pc, #384]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1f0      	bne.n	8009000 <HAL_RCC_OscConfig+0xe8>
 800901e:	e000      	b.n	8009022 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0302 	and.w	r3, r3, #2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d075      	beq.n	800911a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800902e:	4b59      	ldr	r3, [pc, #356]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f003 030c 	and.w	r3, r3, #12
 8009036:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009038:	4b56      	ldr	r3, [pc, #344]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	f003 0303 	and.w	r3, r3, #3
 8009040:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	2b0c      	cmp	r3, #12
 8009046:	d102      	bne.n	800904e <HAL_RCC_OscConfig+0x136>
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2b02      	cmp	r3, #2
 800904c:	d002      	beq.n	8009054 <HAL_RCC_OscConfig+0x13c>
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	2b04      	cmp	r3, #4
 8009052:	d11f      	bne.n	8009094 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009054:	4b4f      	ldr	r3, [pc, #316]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800905c:	2b00      	cmp	r3, #0
 800905e:	d005      	beq.n	800906c <HAL_RCC_OscConfig+0x154>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d101      	bne.n	800906c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e25d      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800906c:	4b49      	ldr	r3, [pc, #292]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	061b      	lsls	r3, r3, #24
 800907a:	4946      	ldr	r1, [pc, #280]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 800907c:	4313      	orrs	r3, r2
 800907e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009080:	4b45      	ldr	r3, [pc, #276]	@ (8009198 <HAL_RCC_OscConfig+0x280>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4618      	mov	r0, r3
 8009086:	f7fb fb0f 	bl	80046a8 <HAL_InitTick>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d043      	beq.n	8009118 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e249      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d023      	beq.n	80090e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800909c:	4b3d      	ldr	r3, [pc, #244]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a3c      	ldr	r2, [pc, #240]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 80090a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090a8:	f7fb fb4a 	bl	8004740 <HAL_GetTick>
 80090ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80090ae:	e008      	b.n	80090c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090b0:	f7fb fb46 	bl	8004740 <HAL_GetTick>
 80090b4:	4602      	mov	r2, r0
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d901      	bls.n	80090c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80090be:	2303      	movs	r3, #3
 80090c0:	e232      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80090c2:	4b34      	ldr	r3, [pc, #208]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d0f0      	beq.n	80090b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090ce:	4b31      	ldr	r3, [pc, #196]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	061b      	lsls	r3, r3, #24
 80090dc:	492d      	ldr	r1, [pc, #180]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	604b      	str	r3, [r1, #4]
 80090e2:	e01a      	b.n	800911a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090e4:	4b2b      	ldr	r3, [pc, #172]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a2a      	ldr	r2, [pc, #168]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 80090ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090f0:	f7fb fb26 	bl	8004740 <HAL_GetTick>
 80090f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80090f6:	e008      	b.n	800910a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090f8:	f7fb fb22 	bl	8004740 <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	2b02      	cmp	r3, #2
 8009104:	d901      	bls.n	800910a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e20e      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800910a:	4b22      	ldr	r3, [pc, #136]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1f0      	bne.n	80090f8 <HAL_RCC_OscConfig+0x1e0>
 8009116:	e000      	b.n	800911a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009118:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0308 	and.w	r3, r3, #8
 8009122:	2b00      	cmp	r3, #0
 8009124:	d041      	beq.n	80091aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d01c      	beq.n	8009168 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800912e:	4b19      	ldr	r3, [pc, #100]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8009130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009134:	4a17      	ldr	r2, [pc, #92]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8009136:	f043 0301 	orr.w	r3, r3, #1
 800913a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800913e:	f7fb faff 	bl	8004740 <HAL_GetTick>
 8009142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009144:	e008      	b.n	8009158 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009146:	f7fb fafb 	bl	8004740 <HAL_GetTick>
 800914a:	4602      	mov	r2, r0
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	2b02      	cmp	r3, #2
 8009152:	d901      	bls.n	8009158 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009154:	2303      	movs	r3, #3
 8009156:	e1e7      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009158:	4b0e      	ldr	r3, [pc, #56]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 800915a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800915e:	f003 0302 	and.w	r3, r3, #2
 8009162:	2b00      	cmp	r3, #0
 8009164:	d0ef      	beq.n	8009146 <HAL_RCC_OscConfig+0x22e>
 8009166:	e020      	b.n	80091aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009168:	4b0a      	ldr	r3, [pc, #40]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 800916a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800916e:	4a09      	ldr	r2, [pc, #36]	@ (8009194 <HAL_RCC_OscConfig+0x27c>)
 8009170:	f023 0301 	bic.w	r3, r3, #1
 8009174:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009178:	f7fb fae2 	bl	8004740 <HAL_GetTick>
 800917c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800917e:	e00d      	b.n	800919c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009180:	f7fb fade 	bl	8004740 <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	2b02      	cmp	r3, #2
 800918c:	d906      	bls.n	800919c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e1ca      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
 8009192:	bf00      	nop
 8009194:	40021000 	.word	0x40021000
 8009198:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800919c:	4b8c      	ldr	r3, [pc, #560]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 800919e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091a2:	f003 0302 	and.w	r3, r3, #2
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1ea      	bne.n	8009180 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0304 	and.w	r3, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 80a6 	beq.w	8009304 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091b8:	2300      	movs	r3, #0
 80091ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80091bc:	4b84      	ldr	r3, [pc, #528]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80091be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <HAL_RCC_OscConfig+0x2b4>
 80091c8:	2301      	movs	r3, #1
 80091ca:	e000      	b.n	80091ce <HAL_RCC_OscConfig+0x2b6>
 80091cc:	2300      	movs	r3, #0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00d      	beq.n	80091ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091d2:	4b7f      	ldr	r3, [pc, #508]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80091d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091d6:	4a7e      	ldr	r2, [pc, #504]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80091d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80091de:	4b7c      	ldr	r3, [pc, #496]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80091e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80091ea:	2301      	movs	r3, #1
 80091ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091ee:	4b79      	ldr	r3, [pc, #484]	@ (80093d4 <HAL_RCC_OscConfig+0x4bc>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d118      	bne.n	800922c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091fa:	4b76      	ldr	r3, [pc, #472]	@ (80093d4 <HAL_RCC_OscConfig+0x4bc>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a75      	ldr	r2, [pc, #468]	@ (80093d4 <HAL_RCC_OscConfig+0x4bc>)
 8009200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009206:	f7fb fa9b 	bl	8004740 <HAL_GetTick>
 800920a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800920c:	e008      	b.n	8009220 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800920e:	f7fb fa97 	bl	8004740 <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	2b02      	cmp	r3, #2
 800921a:	d901      	bls.n	8009220 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e183      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009220:	4b6c      	ldr	r3, [pc, #432]	@ (80093d4 <HAL_RCC_OscConfig+0x4bc>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009228:	2b00      	cmp	r3, #0
 800922a:	d0f0      	beq.n	800920e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d108      	bne.n	8009246 <HAL_RCC_OscConfig+0x32e>
 8009234:	4b66      	ldr	r3, [pc, #408]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800923a:	4a65      	ldr	r2, [pc, #404]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 800923c:	f043 0301 	orr.w	r3, r3, #1
 8009240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009244:	e024      	b.n	8009290 <HAL_RCC_OscConfig+0x378>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	2b05      	cmp	r3, #5
 800924c:	d110      	bne.n	8009270 <HAL_RCC_OscConfig+0x358>
 800924e:	4b60      	ldr	r3, [pc, #384]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009254:	4a5e      	ldr	r2, [pc, #376]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009256:	f043 0304 	orr.w	r3, r3, #4
 800925a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800925e:	4b5c      	ldr	r3, [pc, #368]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009264:	4a5a      	ldr	r2, [pc, #360]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009266:	f043 0301 	orr.w	r3, r3, #1
 800926a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800926e:	e00f      	b.n	8009290 <HAL_RCC_OscConfig+0x378>
 8009270:	4b57      	ldr	r3, [pc, #348]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009276:	4a56      	ldr	r2, [pc, #344]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009278:	f023 0301 	bic.w	r3, r3, #1
 800927c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009280:	4b53      	ldr	r3, [pc, #332]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009286:	4a52      	ldr	r2, [pc, #328]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009288:	f023 0304 	bic.w	r3, r3, #4
 800928c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d016      	beq.n	80092c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009298:	f7fb fa52 	bl	8004740 <HAL_GetTick>
 800929c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800929e:	e00a      	b.n	80092b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092a0:	f7fb fa4e 	bl	8004740 <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d901      	bls.n	80092b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80092b2:	2303      	movs	r3, #3
 80092b4:	e138      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092b6:	4b46      	ldr	r3, [pc, #280]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80092b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092bc:	f003 0302 	and.w	r3, r3, #2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d0ed      	beq.n	80092a0 <HAL_RCC_OscConfig+0x388>
 80092c4:	e015      	b.n	80092f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092c6:	f7fb fa3b 	bl	8004740 <HAL_GetTick>
 80092ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80092cc:	e00a      	b.n	80092e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092ce:	f7fb fa37 	bl	8004740 <HAL_GetTick>
 80092d2:	4602      	mov	r2, r0
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092dc:	4293      	cmp	r3, r2
 80092de:	d901      	bls.n	80092e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e121      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80092e4:	4b3a      	ldr	r3, [pc, #232]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80092e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ea:	f003 0302 	and.w	r3, r3, #2
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1ed      	bne.n	80092ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80092f2:	7ffb      	ldrb	r3, [r7, #31]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d105      	bne.n	8009304 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092f8:	4b35      	ldr	r3, [pc, #212]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80092fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fc:	4a34      	ldr	r2, [pc, #208]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80092fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009302:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0320 	and.w	r3, r3, #32
 800930c:	2b00      	cmp	r3, #0
 800930e:	d03c      	beq.n	800938a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d01c      	beq.n	8009352 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009318:	4b2d      	ldr	r3, [pc, #180]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 800931a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800931e:	4a2c      	ldr	r2, [pc, #176]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009320:	f043 0301 	orr.w	r3, r3, #1
 8009324:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009328:	f7fb fa0a 	bl	8004740 <HAL_GetTick>
 800932c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800932e:	e008      	b.n	8009342 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009330:	f7fb fa06 	bl	8004740 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b02      	cmp	r3, #2
 800933c:	d901      	bls.n	8009342 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e0f2      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009342:	4b23      	ldr	r3, [pc, #140]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009344:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009348:	f003 0302 	and.w	r3, r3, #2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d0ef      	beq.n	8009330 <HAL_RCC_OscConfig+0x418>
 8009350:	e01b      	b.n	800938a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009352:	4b1f      	ldr	r3, [pc, #124]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009354:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009358:	4a1d      	ldr	r2, [pc, #116]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 800935a:	f023 0301 	bic.w	r3, r3, #1
 800935e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009362:	f7fb f9ed 	bl	8004740 <HAL_GetTick>
 8009366:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009368:	e008      	b.n	800937c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800936a:	f7fb f9e9 	bl	8004740 <HAL_GetTick>
 800936e:	4602      	mov	r2, r0
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	2b02      	cmp	r3, #2
 8009376:	d901      	bls.n	800937c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009378:	2303      	movs	r3, #3
 800937a:	e0d5      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800937c:	4b14      	ldr	r3, [pc, #80]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 800937e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009382:	f003 0302 	and.w	r3, r3, #2
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1ef      	bne.n	800936a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 80c9 	beq.w	8009526 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009394:	4b0e      	ldr	r3, [pc, #56]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	f003 030c 	and.w	r3, r3, #12
 800939c:	2b0c      	cmp	r3, #12
 800939e:	f000 8083 	beq.w	80094a8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d15e      	bne.n	8009468 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093aa:	4b09      	ldr	r3, [pc, #36]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a08      	ldr	r2, [pc, #32]	@ (80093d0 <HAL_RCC_OscConfig+0x4b8>)
 80093b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093b6:	f7fb f9c3 	bl	8004740 <HAL_GetTick>
 80093ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093bc:	e00c      	b.n	80093d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093be:	f7fb f9bf 	bl	8004740 <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d905      	bls.n	80093d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e0ab      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
 80093d0:	40021000 	.word	0x40021000
 80093d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093d8:	4b55      	ldr	r3, [pc, #340]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1ec      	bne.n	80093be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80093e4:	4b52      	ldr	r3, [pc, #328]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 80093e6:	68da      	ldr	r2, [r3, #12]
 80093e8:	4b52      	ldr	r3, [pc, #328]	@ (8009534 <HAL_RCC_OscConfig+0x61c>)
 80093ea:	4013      	ands	r3, r2
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	6a11      	ldr	r1, [r2, #32]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80093f4:	3a01      	subs	r2, #1
 80093f6:	0112      	lsls	r2, r2, #4
 80093f8:	4311      	orrs	r1, r2
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80093fe:	0212      	lsls	r2, r2, #8
 8009400:	4311      	orrs	r1, r2
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009406:	0852      	lsrs	r2, r2, #1
 8009408:	3a01      	subs	r2, #1
 800940a:	0552      	lsls	r2, r2, #21
 800940c:	4311      	orrs	r1, r2
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009412:	0852      	lsrs	r2, r2, #1
 8009414:	3a01      	subs	r2, #1
 8009416:	0652      	lsls	r2, r2, #25
 8009418:	4311      	orrs	r1, r2
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800941e:	06d2      	lsls	r2, r2, #27
 8009420:	430a      	orrs	r2, r1
 8009422:	4943      	ldr	r1, [pc, #268]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 8009424:	4313      	orrs	r3, r2
 8009426:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009428:	4b41      	ldr	r3, [pc, #260]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a40      	ldr	r2, [pc, #256]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 800942e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009432:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009434:	4b3e      	ldr	r3, [pc, #248]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	4a3d      	ldr	r2, [pc, #244]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 800943a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800943e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009440:	f7fb f97e 	bl	8004740 <HAL_GetTick>
 8009444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009446:	e008      	b.n	800945a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009448:	f7fb f97a 	bl	8004740 <HAL_GetTick>
 800944c:	4602      	mov	r2, r0
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	2b02      	cmp	r3, #2
 8009454:	d901      	bls.n	800945a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e066      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800945a:	4b35      	ldr	r3, [pc, #212]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d0f0      	beq.n	8009448 <HAL_RCC_OscConfig+0x530>
 8009466:	e05e      	b.n	8009526 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009468:	4b31      	ldr	r3, [pc, #196]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a30      	ldr	r2, [pc, #192]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 800946e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009474:	f7fb f964 	bl	8004740 <HAL_GetTick>
 8009478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800947a:	e008      	b.n	800948e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800947c:	f7fb f960 	bl	8004740 <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	2b02      	cmp	r3, #2
 8009488:	d901      	bls.n	800948e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e04c      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800948e:	4b28      	ldr	r3, [pc, #160]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1f0      	bne.n	800947c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800949a:	4b25      	ldr	r3, [pc, #148]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	4924      	ldr	r1, [pc, #144]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 80094a0:	4b25      	ldr	r3, [pc, #148]	@ (8009538 <HAL_RCC_OscConfig+0x620>)
 80094a2:	4013      	ands	r3, r2
 80094a4:	60cb      	str	r3, [r1, #12]
 80094a6:	e03e      	b.n	8009526 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	69db      	ldr	r3, [r3, #28]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d101      	bne.n	80094b4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e039      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80094b4:	4b1e      	ldr	r3, [pc, #120]	@ (8009530 <HAL_RCC_OscConfig+0x618>)
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f003 0203 	and.w	r2, r3, #3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a1b      	ldr	r3, [r3, #32]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d12c      	bne.n	8009522 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d2:	3b01      	subs	r3, #1
 80094d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d123      	bne.n	8009522 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d11b      	bne.n	8009522 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d113      	bne.n	8009522 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009504:	085b      	lsrs	r3, r3, #1
 8009506:	3b01      	subs	r3, #1
 8009508:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800950a:	429a      	cmp	r2, r3
 800950c:	d109      	bne.n	8009522 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009518:	085b      	lsrs	r3, r3, #1
 800951a:	3b01      	subs	r3, #1
 800951c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800951e:	429a      	cmp	r2, r3
 8009520:	d001      	beq.n	8009526 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e000      	b.n	8009528 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3720      	adds	r7, #32
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	40021000 	.word	0x40021000
 8009534:	019f800c 	.word	0x019f800c
 8009538:	feeefffc 	.word	0xfeeefffc

0800953c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009546:	2300      	movs	r3, #0
 8009548:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d101      	bne.n	8009554 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e11e      	b.n	8009792 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009554:	4b91      	ldr	r3, [pc, #580]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 030f 	and.w	r3, r3, #15
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	429a      	cmp	r2, r3
 8009560:	d910      	bls.n	8009584 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009562:	4b8e      	ldr	r3, [pc, #568]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f023 020f 	bic.w	r2, r3, #15
 800956a:	498c      	ldr	r1, [pc, #560]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	4313      	orrs	r3, r2
 8009570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009572:	4b8a      	ldr	r3, [pc, #552]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 030f 	and.w	r3, r3, #15
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	d001      	beq.n	8009584 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e106      	b.n	8009792 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b00      	cmp	r3, #0
 800958e:	d073      	beq.n	8009678 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	2b03      	cmp	r3, #3
 8009596:	d129      	bne.n	80095ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009598:	4b81      	ldr	r3, [pc, #516]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e0f4      	b.n	8009792 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80095a8:	f000 f99e 	bl	80098e8 <RCC_GetSysClockFreqFromPLLSource>
 80095ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	4a7c      	ldr	r2, [pc, #496]	@ (80097a4 <HAL_RCC_ClockConfig+0x268>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d93f      	bls.n	8009636 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80095b6:	4b7a      	ldr	r3, [pc, #488]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d009      	beq.n	80095d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d033      	beq.n	8009636 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d12f      	bne.n	8009636 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80095d6:	4b72      	ldr	r3, [pc, #456]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095de:	4a70      	ldr	r2, [pc, #448]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80095e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80095e6:	2380      	movs	r3, #128	@ 0x80
 80095e8:	617b      	str	r3, [r7, #20]
 80095ea:	e024      	b.n	8009636 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d107      	bne.n	8009604 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80095f4:	4b6a      	ldr	r3, [pc, #424]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d109      	bne.n	8009614 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e0c6      	b.n	8009792 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009604:	4b66      	ldr	r3, [pc, #408]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e0be      	b.n	8009792 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009614:	f000 f8ce 	bl	80097b4 <HAL_RCC_GetSysClockFreq>
 8009618:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	4a61      	ldr	r2, [pc, #388]	@ (80097a4 <HAL_RCC_ClockConfig+0x268>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d909      	bls.n	8009636 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009622:	4b5f      	ldr	r3, [pc, #380]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800962a:	4a5d      	ldr	r2, [pc, #372]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 800962c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009630:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009632:	2380      	movs	r3, #128	@ 0x80
 8009634:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009636:	4b5a      	ldr	r3, [pc, #360]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f023 0203 	bic.w	r2, r3, #3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	4957      	ldr	r1, [pc, #348]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009644:	4313      	orrs	r3, r2
 8009646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009648:	f7fb f87a 	bl	8004740 <HAL_GetTick>
 800964c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800964e:	e00a      	b.n	8009666 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009650:	f7fb f876 	bl	8004740 <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800965e:	4293      	cmp	r3, r2
 8009660:	d901      	bls.n	8009666 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	e095      	b.n	8009792 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009666:	4b4e      	ldr	r3, [pc, #312]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f003 020c 	and.w	r2, r3, #12
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	429a      	cmp	r2, r3
 8009676:	d1eb      	bne.n	8009650 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0302 	and.w	r3, r3, #2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d023      	beq.n	80096cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0304 	and.w	r3, r3, #4
 800968c:	2b00      	cmp	r3, #0
 800968e:	d005      	beq.n	800969c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009690:	4b43      	ldr	r3, [pc, #268]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	4a42      	ldr	r2, [pc, #264]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009696:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800969a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0308 	and.w	r3, r3, #8
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d007      	beq.n	80096b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80096a8:	4b3d      	ldr	r3, [pc, #244]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80096b0:	4a3b      	ldr	r2, [pc, #236]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80096b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80096b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096b8:	4b39      	ldr	r3, [pc, #228]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	4936      	ldr	r1, [pc, #216]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80096c6:	4313      	orrs	r3, r2
 80096c8:	608b      	str	r3, [r1, #8]
 80096ca:	e008      	b.n	80096de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	2b80      	cmp	r3, #128	@ 0x80
 80096d0:	d105      	bne.n	80096de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80096d2:	4b33      	ldr	r3, [pc, #204]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	4a32      	ldr	r2, [pc, #200]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 80096d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80096de:	4b2f      	ldr	r3, [pc, #188]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 030f 	and.w	r3, r3, #15
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d21d      	bcs.n	8009728 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096ec:	4b2b      	ldr	r3, [pc, #172]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f023 020f 	bic.w	r2, r3, #15
 80096f4:	4929      	ldr	r1, [pc, #164]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80096fc:	f7fb f820 	bl	8004740 <HAL_GetTick>
 8009700:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009702:	e00a      	b.n	800971a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009704:	f7fb f81c 	bl	8004740 <HAL_GetTick>
 8009708:	4602      	mov	r2, r0
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	1ad3      	subs	r3, r2, r3
 800970e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009712:	4293      	cmp	r3, r2
 8009714:	d901      	bls.n	800971a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e03b      	b.n	8009792 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800971a:	4b20      	ldr	r3, [pc, #128]	@ (800979c <HAL_RCC_ClockConfig+0x260>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 030f 	and.w	r3, r3, #15
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	429a      	cmp	r2, r3
 8009726:	d1ed      	bne.n	8009704 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d008      	beq.n	8009746 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009734:	4b1a      	ldr	r3, [pc, #104]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	4917      	ldr	r1, [pc, #92]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009742:	4313      	orrs	r3, r2
 8009744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0308 	and.w	r3, r3, #8
 800974e:	2b00      	cmp	r3, #0
 8009750:	d009      	beq.n	8009766 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009752:	4b13      	ldr	r3, [pc, #76]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	00db      	lsls	r3, r3, #3
 8009760:	490f      	ldr	r1, [pc, #60]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 8009762:	4313      	orrs	r3, r2
 8009764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009766:	f000 f825 	bl	80097b4 <HAL_RCC_GetSysClockFreq>
 800976a:	4602      	mov	r2, r0
 800976c:	4b0c      	ldr	r3, [pc, #48]	@ (80097a0 <HAL_RCC_ClockConfig+0x264>)
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	091b      	lsrs	r3, r3, #4
 8009772:	f003 030f 	and.w	r3, r3, #15
 8009776:	490c      	ldr	r1, [pc, #48]	@ (80097a8 <HAL_RCC_ClockConfig+0x26c>)
 8009778:	5ccb      	ldrb	r3, [r1, r3]
 800977a:	f003 031f 	and.w	r3, r3, #31
 800977e:	fa22 f303 	lsr.w	r3, r2, r3
 8009782:	4a0a      	ldr	r2, [pc, #40]	@ (80097ac <HAL_RCC_ClockConfig+0x270>)
 8009784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009786:	4b0a      	ldr	r3, [pc, #40]	@ (80097b0 <HAL_RCC_ClockConfig+0x274>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4618      	mov	r0, r3
 800978c:	f7fa ff8c 	bl	80046a8 <HAL_InitTick>
 8009790:	4603      	mov	r3, r0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	40022000 	.word	0x40022000
 80097a0:	40021000 	.word	0x40021000
 80097a4:	04c4b400 	.word	0x04c4b400
 80097a8:	080174a8 	.word	0x080174a8
 80097ac:	2000003c 	.word	0x2000003c
 80097b0:	20000040 	.word	0x20000040

080097b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80097ba:	4b2c      	ldr	r3, [pc, #176]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	f003 030c 	and.w	r3, r3, #12
 80097c2:	2b04      	cmp	r3, #4
 80097c4:	d102      	bne.n	80097cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80097c6:	4b2a      	ldr	r3, [pc, #168]	@ (8009870 <HAL_RCC_GetSysClockFreq+0xbc>)
 80097c8:	613b      	str	r3, [r7, #16]
 80097ca:	e047      	b.n	800985c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80097cc:	4b27      	ldr	r3, [pc, #156]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f003 030c 	and.w	r3, r3, #12
 80097d4:	2b08      	cmp	r3, #8
 80097d6:	d102      	bne.n	80097de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80097d8:	4b26      	ldr	r3, [pc, #152]	@ (8009874 <HAL_RCC_GetSysClockFreq+0xc0>)
 80097da:	613b      	str	r3, [r7, #16]
 80097dc:	e03e      	b.n	800985c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80097de:	4b23      	ldr	r3, [pc, #140]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f003 030c 	and.w	r3, r3, #12
 80097e6:	2b0c      	cmp	r3, #12
 80097e8:	d136      	bne.n	8009858 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80097ea:	4b20      	ldr	r3, [pc, #128]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	f003 0303 	and.w	r3, r3, #3
 80097f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80097f4:	4b1d      	ldr	r3, [pc, #116]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	091b      	lsrs	r3, r3, #4
 80097fa:	f003 030f 	and.w	r3, r3, #15
 80097fe:	3301      	adds	r3, #1
 8009800:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b03      	cmp	r3, #3
 8009806:	d10c      	bne.n	8009822 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009808:	4a1a      	ldr	r2, [pc, #104]	@ (8009874 <HAL_RCC_GetSysClockFreq+0xc0>)
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009810:	4a16      	ldr	r2, [pc, #88]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009812:	68d2      	ldr	r2, [r2, #12]
 8009814:	0a12      	lsrs	r2, r2, #8
 8009816:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800981a:	fb02 f303 	mul.w	r3, r2, r3
 800981e:	617b      	str	r3, [r7, #20]
      break;
 8009820:	e00c      	b.n	800983c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009822:	4a13      	ldr	r2, [pc, #76]	@ (8009870 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	fbb2 f3f3 	udiv	r3, r2, r3
 800982a:	4a10      	ldr	r2, [pc, #64]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 800982c:	68d2      	ldr	r2, [r2, #12]
 800982e:	0a12      	lsrs	r2, r2, #8
 8009830:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009834:	fb02 f303 	mul.w	r3, r2, r3
 8009838:	617b      	str	r3, [r7, #20]
      break;
 800983a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800983c:	4b0b      	ldr	r3, [pc, #44]	@ (800986c <HAL_RCC_GetSysClockFreq+0xb8>)
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	0e5b      	lsrs	r3, r3, #25
 8009842:	f003 0303 	and.w	r3, r3, #3
 8009846:	3301      	adds	r3, #1
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	fbb2 f3f3 	udiv	r3, r2, r3
 8009854:	613b      	str	r3, [r7, #16]
 8009856:	e001      	b.n	800985c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800985c:	693b      	ldr	r3, [r7, #16]
}
 800985e:	4618      	mov	r0, r3
 8009860:	371c      	adds	r7, #28
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	40021000 	.word	0x40021000
 8009870:	00f42400 	.word	0x00f42400
 8009874:	016e3600 	.word	0x016e3600

08009878 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800987c:	4b03      	ldr	r3, [pc, #12]	@ (800988c <HAL_RCC_GetHCLKFreq+0x14>)
 800987e:	681b      	ldr	r3, [r3, #0]
}
 8009880:	4618      	mov	r0, r3
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	2000003c 	.word	0x2000003c

08009890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009894:	f7ff fff0 	bl	8009878 <HAL_RCC_GetHCLKFreq>
 8009898:	4602      	mov	r2, r0
 800989a:	4b06      	ldr	r3, [pc, #24]	@ (80098b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	0a1b      	lsrs	r3, r3, #8
 80098a0:	f003 0307 	and.w	r3, r3, #7
 80098a4:	4904      	ldr	r1, [pc, #16]	@ (80098b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80098a6:	5ccb      	ldrb	r3, [r1, r3]
 80098a8:	f003 031f 	and.w	r3, r3, #31
 80098ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	40021000 	.word	0x40021000
 80098b8:	080174b8 	.word	0x080174b8

080098bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80098c0:	f7ff ffda 	bl	8009878 <HAL_RCC_GetHCLKFreq>
 80098c4:	4602      	mov	r2, r0
 80098c6:	4b06      	ldr	r3, [pc, #24]	@ (80098e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	0adb      	lsrs	r3, r3, #11
 80098cc:	f003 0307 	and.w	r3, r3, #7
 80098d0:	4904      	ldr	r1, [pc, #16]	@ (80098e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80098d2:	5ccb      	ldrb	r3, [r1, r3]
 80098d4:	f003 031f 	and.w	r3, r3, #31
 80098d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098dc:	4618      	mov	r0, r3
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	40021000 	.word	0x40021000
 80098e4:	080174b8 	.word	0x080174b8

080098e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80098ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	f003 0303 	and.w	r3, r3, #3
 80098f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80098f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	091b      	lsrs	r3, r3, #4
 80098fe:	f003 030f 	and.w	r3, r3, #15
 8009902:	3301      	adds	r3, #1
 8009904:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2b03      	cmp	r3, #3
 800990a:	d10c      	bne.n	8009926 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800990c:	4a17      	ldr	r2, [pc, #92]	@ (800996c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	fbb2 f3f3 	udiv	r3, r2, r3
 8009914:	4a14      	ldr	r2, [pc, #80]	@ (8009968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009916:	68d2      	ldr	r2, [r2, #12]
 8009918:	0a12      	lsrs	r2, r2, #8
 800991a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800991e:	fb02 f303 	mul.w	r3, r2, r3
 8009922:	617b      	str	r3, [r7, #20]
    break;
 8009924:	e00c      	b.n	8009940 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009926:	4a12      	ldr	r2, [pc, #72]	@ (8009970 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	fbb2 f3f3 	udiv	r3, r2, r3
 800992e:	4a0e      	ldr	r2, [pc, #56]	@ (8009968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009930:	68d2      	ldr	r2, [r2, #12]
 8009932:	0a12      	lsrs	r2, r2, #8
 8009934:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009938:	fb02 f303 	mul.w	r3, r2, r3
 800993c:	617b      	str	r3, [r7, #20]
    break;
 800993e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009940:	4b09      	ldr	r3, [pc, #36]	@ (8009968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	0e5b      	lsrs	r3, r3, #25
 8009946:	f003 0303 	and.w	r3, r3, #3
 800994a:	3301      	adds	r3, #1
 800994c:	005b      	lsls	r3, r3, #1
 800994e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009950:	697a      	ldr	r2, [r7, #20]
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	fbb2 f3f3 	udiv	r3, r2, r3
 8009958:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800995a:	687b      	ldr	r3, [r7, #4]
}
 800995c:	4618      	mov	r0, r3
 800995e:	371c      	adds	r7, #28
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	40021000 	.word	0x40021000
 800996c:	016e3600 	.word	0x016e3600
 8009970:	00f42400 	.word	0x00f42400

08009974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800997c:	2300      	movs	r3, #0
 800997e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009980:	2300      	movs	r3, #0
 8009982:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 8098 	beq.w	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009992:	2300      	movs	r3, #0
 8009994:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009996:	4b43      	ldr	r3, [pc, #268]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800999a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10d      	bne.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099a2:	4b40      	ldr	r3, [pc, #256]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099a6:	4a3f      	ldr	r2, [pc, #252]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80099ae:	4b3d      	ldr	r3, [pc, #244]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099b6:	60bb      	str	r3, [r7, #8]
 80099b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099ba:	2301      	movs	r3, #1
 80099bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80099be:	4b3a      	ldr	r3, [pc, #232]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a39      	ldr	r2, [pc, #228]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80099c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099ca:	f7fa feb9 	bl	8004740 <HAL_GetTick>
 80099ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099d0:	e009      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099d2:	f7fa feb5 	bl	8004740 <HAL_GetTick>
 80099d6:	4602      	mov	r2, r0
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d902      	bls.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80099e0:	2303      	movs	r3, #3
 80099e2:	74fb      	strb	r3, [r7, #19]
        break;
 80099e4:	e005      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099e6:	4b30      	ldr	r3, [pc, #192]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0ef      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80099f2:	7cfb      	ldrb	r3, [r7, #19]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d159      	bne.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80099f8:	4b2a      	ldr	r3, [pc, #168]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a02:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d01e      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d019      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009a14:	4b23      	ldr	r3, [pc, #140]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a20:	4b20      	ldr	r3, [pc, #128]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a26:	4a1f      	ldr	r2, [pc, #124]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a30:	4b1c      	ldr	r3, [pc, #112]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a36:	4a1b      	ldr	r2, [pc, #108]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009a40:	4a18      	ldr	r2, [pc, #96]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f003 0301 	and.w	r3, r3, #1
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d016      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a52:	f7fa fe75 	bl	8004740 <HAL_GetTick>
 8009a56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a58:	e00b      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a5a:	f7fa fe71 	bl	8004740 <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d902      	bls.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	74fb      	strb	r3, [r7, #19]
            break;
 8009a70:	e006      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a72:	4b0c      	ldr	r3, [pc, #48]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a78:	f003 0302 	and.w	r3, r3, #2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d0ec      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009a80:	7cfb      	ldrb	r3, [r7, #19]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10b      	bne.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a86:	4b07      	ldr	r3, [pc, #28]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a94:	4903      	ldr	r1, [pc, #12]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009a9c:	e008      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a9e:	7cfb      	ldrb	r3, [r7, #19]
 8009aa0:	74bb      	strb	r3, [r7, #18]
 8009aa2:	e005      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009aa4:	40021000 	.word	0x40021000
 8009aa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aac:	7cfb      	ldrb	r3, [r7, #19]
 8009aae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ab0:	7c7b      	ldrb	r3, [r7, #17]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d105      	bne.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ab6:	4ba7      	ldr	r3, [pc, #668]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aba:	4aa6      	ldr	r2, [pc, #664]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009abc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ac0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00a      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009ace:	4ba1      	ldr	r3, [pc, #644]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ad4:	f023 0203 	bic.w	r2, r3, #3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	499d      	ldr	r1, [pc, #628]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00a      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009af0:	4b98      	ldr	r3, [pc, #608]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009af6:	f023 020c 	bic.w	r2, r3, #12
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	4995      	ldr	r1, [pc, #596]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b00:	4313      	orrs	r3, r2
 8009b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 0304 	and.w	r3, r3, #4
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00a      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009b12:	4b90      	ldr	r3, [pc, #576]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b18:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	498c      	ldr	r1, [pc, #560]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b22:	4313      	orrs	r3, r2
 8009b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0308 	and.w	r3, r3, #8
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00a      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009b34:	4b87      	ldr	r3, [pc, #540]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	4984      	ldr	r1, [pc, #528]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b44:	4313      	orrs	r3, r2
 8009b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0310 	and.w	r3, r3, #16
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00a      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009b56:	4b7f      	ldr	r3, [pc, #508]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	695b      	ldr	r3, [r3, #20]
 8009b64:	497b      	ldr	r1, [pc, #492]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b66:	4313      	orrs	r3, r2
 8009b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 0320 	and.w	r3, r3, #32
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00a      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b78:	4b76      	ldr	r3, [pc, #472]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	4973      	ldr	r1, [pc, #460]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00a      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ba0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	69db      	ldr	r3, [r3, #28]
 8009ba8:	496a      	ldr	r1, [pc, #424]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009baa:	4313      	orrs	r3, r2
 8009bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00a      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009bbc:	4b65      	ldr	r3, [pc, #404]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bc2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	4962      	ldr	r1, [pc, #392]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00a      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009bde:	4b5d      	ldr	r3, [pc, #372]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009be4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bec:	4959      	ldr	r1, [pc, #356]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00a      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c00:	4b54      	ldr	r3, [pc, #336]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c06:	f023 0203 	bic.w	r2, r3, #3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0e:	4951      	ldr	r1, [pc, #324]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c10:	4313      	orrs	r3, r2
 8009c12:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00a      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c22:	4b4c      	ldr	r3, [pc, #304]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c30:	4948      	ldr	r1, [pc, #288]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c32:	4313      	orrs	r3, r2
 8009c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d015      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009c44:	4b43      	ldr	r3, [pc, #268]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c52:	4940      	ldr	r1, [pc, #256]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c54:	4313      	orrs	r3, r2
 8009c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c62:	d105      	bne.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c64:	4b3b      	ldr	r3, [pc, #236]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	4a3a      	ldr	r2, [pc, #232]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c6e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d015      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009c7c:	4b35      	ldr	r3, [pc, #212]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c8a:	4932      	ldr	r1, [pc, #200]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c9a:	d105      	bne.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	4a2c      	ldr	r2, [pc, #176]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ca6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d015      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009cb4:	4b27      	ldr	r3, [pc, #156]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc2:	4924      	ldr	r1, [pc, #144]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cd2:	d105      	bne.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	4a1e      	ldr	r2, [pc, #120]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cde:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d015      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009cec:	4b19      	ldr	r3, [pc, #100]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cf2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cfa:	4916      	ldr	r1, [pc, #88]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d0a:	d105      	bne.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d0c:	4b11      	ldr	r3, [pc, #68]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	4a10      	ldr	r2, [pc, #64]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d019      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d24:	4b0b      	ldr	r3, [pc, #44]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d32:	4908      	ldr	r1, [pc, #32]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d34:	4313      	orrs	r3, r2
 8009d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d42:	d109      	bne.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d44:	4b03      	ldr	r3, [pc, #12]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	4a02      	ldr	r2, [pc, #8]	@ (8009d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d4e:	60d3      	str	r3, [r2, #12]
 8009d50:	e002      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009d52:	bf00      	nop
 8009d54:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d015      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009d64:	4b29      	ldr	r3, [pc, #164]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d6a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d72:	4926      	ldr	r1, [pc, #152]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d74:	4313      	orrs	r3, r2
 8009d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d82:	d105      	bne.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009d84:	4b21      	ldr	r3, [pc, #132]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	4a20      	ldr	r2, [pc, #128]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d8e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d015      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009da2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009daa:	4918      	ldr	r1, [pc, #96]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dba:	d105      	bne.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009dbc:	4b13      	ldr	r3, [pc, #76]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	4a12      	ldr	r2, [pc, #72]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009dc6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d015      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009dda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009de2:	490a      	ldr	r1, [pc, #40]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009de4:	4313      	orrs	r3, r2
 8009de6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009df2:	d105      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009df4:	4b05      	ldr	r3, [pc, #20]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	4a04      	ldr	r2, [pc, #16]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009e00:	7cbb      	ldrb	r3, [r7, #18]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3718      	adds	r7, #24
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	40021000 	.word	0x40021000

08009e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e049      	b.n	8009eb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d106      	bne.n	8009e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7fa f93a 	bl	80040b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4610      	mov	r0, r2
 8009e50:	f000 fe58 	bl	800ab04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
	...

08009ec0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d001      	beq.n	8009ed8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e04c      	b.n	8009f72 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2202      	movs	r2, #2
 8009edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a26      	ldr	r2, [pc, #152]	@ (8009f80 <HAL_TIM_Base_Start+0xc0>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d022      	beq.n	8009f30 <HAL_TIM_Base_Start+0x70>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ef2:	d01d      	beq.n	8009f30 <HAL_TIM_Base_Start+0x70>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a22      	ldr	r2, [pc, #136]	@ (8009f84 <HAL_TIM_Base_Start+0xc4>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d018      	beq.n	8009f30 <HAL_TIM_Base_Start+0x70>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a21      	ldr	r2, [pc, #132]	@ (8009f88 <HAL_TIM_Base_Start+0xc8>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d013      	beq.n	8009f30 <HAL_TIM_Base_Start+0x70>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8009f8c <HAL_TIM_Base_Start+0xcc>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d00e      	beq.n	8009f30 <HAL_TIM_Base_Start+0x70>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a1e      	ldr	r2, [pc, #120]	@ (8009f90 <HAL_TIM_Base_Start+0xd0>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d009      	beq.n	8009f30 <HAL_TIM_Base_Start+0x70>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a1c      	ldr	r2, [pc, #112]	@ (8009f94 <HAL_TIM_Base_Start+0xd4>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d004      	beq.n	8009f30 <HAL_TIM_Base_Start+0x70>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8009f98 <HAL_TIM_Base_Start+0xd8>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d115      	bne.n	8009f5c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	689a      	ldr	r2, [r3, #8]
 8009f36:	4b19      	ldr	r3, [pc, #100]	@ (8009f9c <HAL_TIM_Base_Start+0xdc>)
 8009f38:	4013      	ands	r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2b06      	cmp	r3, #6
 8009f40:	d015      	beq.n	8009f6e <HAL_TIM_Base_Start+0xae>
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f48:	d011      	beq.n	8009f6e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f042 0201 	orr.w	r2, r2, #1
 8009f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f5a:	e008      	b.n	8009f6e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f042 0201 	orr.w	r2, r2, #1
 8009f6a:	601a      	str	r2, [r3, #0]
 8009f6c:	e000      	b.n	8009f70 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3714      	adds	r7, #20
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	40012c00 	.word	0x40012c00
 8009f84:	40000400 	.word	0x40000400
 8009f88:	40000800 	.word	0x40000800
 8009f8c:	40000c00 	.word	0x40000c00
 8009f90:	40013400 	.word	0x40013400
 8009f94:	40014000 	.word	0x40014000
 8009f98:	40015000 	.word	0x40015000
 8009f9c:	00010007 	.word	0x00010007

08009fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d001      	beq.n	8009fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e054      	b.n	800a062 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68da      	ldr	r2, [r3, #12]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f042 0201 	orr.w	r2, r2, #1
 8009fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a26      	ldr	r2, [pc, #152]	@ (800a070 <HAL_TIM_Base_Start_IT+0xd0>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d022      	beq.n	800a020 <HAL_TIM_Base_Start_IT+0x80>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fe2:	d01d      	beq.n	800a020 <HAL_TIM_Base_Start_IT+0x80>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a22      	ldr	r2, [pc, #136]	@ (800a074 <HAL_TIM_Base_Start_IT+0xd4>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d018      	beq.n	800a020 <HAL_TIM_Base_Start_IT+0x80>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a21      	ldr	r2, [pc, #132]	@ (800a078 <HAL_TIM_Base_Start_IT+0xd8>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d013      	beq.n	800a020 <HAL_TIM_Base_Start_IT+0x80>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800a07c <HAL_TIM_Base_Start_IT+0xdc>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d00e      	beq.n	800a020 <HAL_TIM_Base_Start_IT+0x80>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a1e      	ldr	r2, [pc, #120]	@ (800a080 <HAL_TIM_Base_Start_IT+0xe0>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d009      	beq.n	800a020 <HAL_TIM_Base_Start_IT+0x80>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a1c      	ldr	r2, [pc, #112]	@ (800a084 <HAL_TIM_Base_Start_IT+0xe4>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d004      	beq.n	800a020 <HAL_TIM_Base_Start_IT+0x80>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a1b      	ldr	r2, [pc, #108]	@ (800a088 <HAL_TIM_Base_Start_IT+0xe8>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d115      	bne.n	800a04c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	689a      	ldr	r2, [r3, #8]
 800a026:	4b19      	ldr	r3, [pc, #100]	@ (800a08c <HAL_TIM_Base_Start_IT+0xec>)
 800a028:	4013      	ands	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b06      	cmp	r3, #6
 800a030:	d015      	beq.n	800a05e <HAL_TIM_Base_Start_IT+0xbe>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a038:	d011      	beq.n	800a05e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f042 0201 	orr.w	r2, r2, #1
 800a048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a04a:	e008      	b.n	800a05e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f042 0201 	orr.w	r2, r2, #1
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	e000      	b.n	800a060 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a05e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3714      	adds	r7, #20
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	40012c00 	.word	0x40012c00
 800a074:	40000400 	.word	0x40000400
 800a078:	40000800 	.word	0x40000800
 800a07c:	40000c00 	.word	0x40000c00
 800a080:	40013400 	.word	0x40013400
 800a084:	40014000 	.word	0x40014000
 800a088:	40015000 	.word	0x40015000
 800a08c:	00010007 	.word	0x00010007

0800a090 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68da      	ldr	r2, [r3, #12]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f022 0201 	bic.w	r2, r2, #1
 800a0a6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6a1a      	ldr	r2, [r3, #32]
 800a0ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10f      	bne.n	800a0d8 <HAL_TIM_Base_Stop_IT+0x48>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	6a1a      	ldr	r2, [r3, #32]
 800a0be:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d107      	bne.n	800a0d8 <HAL_TIM_Base_Stop_IT+0x48>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f022 0201 	bic.w	r2, r2, #1
 800a0d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b082      	sub	sp, #8
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e049      	b.n	800a194 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d106      	bne.n	800a11a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7f9 ff91 	bl	800403c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2202      	movs	r2, #2
 800a11e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3304      	adds	r3, #4
 800a12a:	4619      	mov	r1, r3
 800a12c:	4610      	mov	r0, r2
 800a12e:	f000 fce9 	bl	800ab04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2201      	movs	r2, #1
 800a176:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d109      	bne.n	800a1c0 <HAL_TIM_PWM_Start+0x24>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	bf14      	ite	ne
 800a1b8:	2301      	movne	r3, #1
 800a1ba:	2300      	moveq	r3, #0
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	e03c      	b.n	800a23a <HAL_TIM_PWM_Start+0x9e>
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2b04      	cmp	r3, #4
 800a1c4:	d109      	bne.n	800a1da <HAL_TIM_PWM_Start+0x3e>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	bf14      	ite	ne
 800a1d2:	2301      	movne	r3, #1
 800a1d4:	2300      	moveq	r3, #0
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	e02f      	b.n	800a23a <HAL_TIM_PWM_Start+0x9e>
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2b08      	cmp	r3, #8
 800a1de:	d109      	bne.n	800a1f4 <HAL_TIM_PWM_Start+0x58>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	bf14      	ite	ne
 800a1ec:	2301      	movne	r3, #1
 800a1ee:	2300      	moveq	r3, #0
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	e022      	b.n	800a23a <HAL_TIM_PWM_Start+0x9e>
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	2b0c      	cmp	r3, #12
 800a1f8:	d109      	bne.n	800a20e <HAL_TIM_PWM_Start+0x72>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b01      	cmp	r3, #1
 800a204:	bf14      	ite	ne
 800a206:	2301      	movne	r3, #1
 800a208:	2300      	moveq	r3, #0
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	e015      	b.n	800a23a <HAL_TIM_PWM_Start+0x9e>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b10      	cmp	r3, #16
 800a212:	d109      	bne.n	800a228 <HAL_TIM_PWM_Start+0x8c>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	bf14      	ite	ne
 800a220:	2301      	movne	r3, #1
 800a222:	2300      	moveq	r3, #0
 800a224:	b2db      	uxtb	r3, r3
 800a226:	e008      	b.n	800a23a <HAL_TIM_PWM_Start+0x9e>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	2b01      	cmp	r3, #1
 800a232:	bf14      	ite	ne
 800a234:	2301      	movne	r3, #1
 800a236:	2300      	moveq	r3, #0
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e0a6      	b.n	800a390 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d104      	bne.n	800a252 <HAL_TIM_PWM_Start+0xb6>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2202      	movs	r2, #2
 800a24c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a250:	e023      	b.n	800a29a <HAL_TIM_PWM_Start+0xfe>
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2b04      	cmp	r3, #4
 800a256:	d104      	bne.n	800a262 <HAL_TIM_PWM_Start+0xc6>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2202      	movs	r2, #2
 800a25c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a260:	e01b      	b.n	800a29a <HAL_TIM_PWM_Start+0xfe>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b08      	cmp	r3, #8
 800a266:	d104      	bne.n	800a272 <HAL_TIM_PWM_Start+0xd6>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2202      	movs	r2, #2
 800a26c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a270:	e013      	b.n	800a29a <HAL_TIM_PWM_Start+0xfe>
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b0c      	cmp	r3, #12
 800a276:	d104      	bne.n	800a282 <HAL_TIM_PWM_Start+0xe6>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2202      	movs	r2, #2
 800a27c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a280:	e00b      	b.n	800a29a <HAL_TIM_PWM_Start+0xfe>
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b10      	cmp	r3, #16
 800a286:	d104      	bne.n	800a292 <HAL_TIM_PWM_Start+0xf6>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a290:	e003      	b.n	800a29a <HAL_TIM_PWM_Start+0xfe>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2202      	movs	r2, #2
 800a296:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f001 f8a8 	bl	800b3f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a3a      	ldr	r2, [pc, #232]	@ (800a398 <HAL_TIM_PWM_Start+0x1fc>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d018      	beq.n	800a2e4 <HAL_TIM_PWM_Start+0x148>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a39      	ldr	r2, [pc, #228]	@ (800a39c <HAL_TIM_PWM_Start+0x200>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d013      	beq.n	800a2e4 <HAL_TIM_PWM_Start+0x148>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a37      	ldr	r2, [pc, #220]	@ (800a3a0 <HAL_TIM_PWM_Start+0x204>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d00e      	beq.n	800a2e4 <HAL_TIM_PWM_Start+0x148>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a36      	ldr	r2, [pc, #216]	@ (800a3a4 <HAL_TIM_PWM_Start+0x208>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d009      	beq.n	800a2e4 <HAL_TIM_PWM_Start+0x148>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a34      	ldr	r2, [pc, #208]	@ (800a3a8 <HAL_TIM_PWM_Start+0x20c>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d004      	beq.n	800a2e4 <HAL_TIM_PWM_Start+0x148>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a33      	ldr	r2, [pc, #204]	@ (800a3ac <HAL_TIM_PWM_Start+0x210>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d101      	bne.n	800a2e8 <HAL_TIM_PWM_Start+0x14c>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e000      	b.n	800a2ea <HAL_TIM_PWM_Start+0x14e>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d007      	beq.n	800a2fe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a2fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a25      	ldr	r2, [pc, #148]	@ (800a398 <HAL_TIM_PWM_Start+0x1fc>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d022      	beq.n	800a34e <HAL_TIM_PWM_Start+0x1b2>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a310:	d01d      	beq.n	800a34e <HAL_TIM_PWM_Start+0x1b2>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a26      	ldr	r2, [pc, #152]	@ (800a3b0 <HAL_TIM_PWM_Start+0x214>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d018      	beq.n	800a34e <HAL_TIM_PWM_Start+0x1b2>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a24      	ldr	r2, [pc, #144]	@ (800a3b4 <HAL_TIM_PWM_Start+0x218>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d013      	beq.n	800a34e <HAL_TIM_PWM_Start+0x1b2>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a23      	ldr	r2, [pc, #140]	@ (800a3b8 <HAL_TIM_PWM_Start+0x21c>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d00e      	beq.n	800a34e <HAL_TIM_PWM_Start+0x1b2>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a19      	ldr	r2, [pc, #100]	@ (800a39c <HAL_TIM_PWM_Start+0x200>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d009      	beq.n	800a34e <HAL_TIM_PWM_Start+0x1b2>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a18      	ldr	r2, [pc, #96]	@ (800a3a0 <HAL_TIM_PWM_Start+0x204>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d004      	beq.n	800a34e <HAL_TIM_PWM_Start+0x1b2>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a18      	ldr	r2, [pc, #96]	@ (800a3ac <HAL_TIM_PWM_Start+0x210>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d115      	bne.n	800a37a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	689a      	ldr	r2, [r3, #8]
 800a354:	4b19      	ldr	r3, [pc, #100]	@ (800a3bc <HAL_TIM_PWM_Start+0x220>)
 800a356:	4013      	ands	r3, r2
 800a358:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2b06      	cmp	r3, #6
 800a35e:	d015      	beq.n	800a38c <HAL_TIM_PWM_Start+0x1f0>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a366:	d011      	beq.n	800a38c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f042 0201 	orr.w	r2, r2, #1
 800a376:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a378:	e008      	b.n	800a38c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f042 0201 	orr.w	r2, r2, #1
 800a388:	601a      	str	r2, [r3, #0]
 800a38a:	e000      	b.n	800a38e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a38c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	40012c00 	.word	0x40012c00
 800a39c:	40013400 	.word	0x40013400
 800a3a0:	40014000 	.word	0x40014000
 800a3a4:	40014400 	.word	0x40014400
 800a3a8:	40014800 	.word	0x40014800
 800a3ac:	40015000 	.word	0x40015000
 800a3b0:	40000400 	.word	0x40000400
 800a3b4:	40000800 	.word	0x40000800
 800a3b8:	40000c00 	.word	0x40000c00
 800a3bc:	00010007 	.word	0x00010007

0800a3c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	f003 0302 	and.w	r3, r3, #2
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d020      	beq.n	800a424 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f003 0302 	and.w	r3, r3, #2
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d01b      	beq.n	800a424 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f06f 0202 	mvn.w	r2, #2
 800a3f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fb5c 	bl	800aac8 <HAL_TIM_IC_CaptureCallback>
 800a410:	e005      	b.n	800a41e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 fb4e 	bl	800aab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fb5f 	bl	800aadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f003 0304 	and.w	r3, r3, #4
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d020      	beq.n	800a470 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f003 0304 	and.w	r3, r3, #4
 800a434:	2b00      	cmp	r3, #0
 800a436:	d01b      	beq.n	800a470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f06f 0204 	mvn.w	r2, #4
 800a440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2202      	movs	r2, #2
 800a446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a452:	2b00      	cmp	r3, #0
 800a454:	d003      	beq.n	800a45e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 fb36 	bl	800aac8 <HAL_TIM_IC_CaptureCallback>
 800a45c:	e005      	b.n	800a46a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fb28 	bl	800aab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fb39 	bl	800aadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	f003 0308 	and.w	r3, r3, #8
 800a476:	2b00      	cmp	r3, #0
 800a478:	d020      	beq.n	800a4bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f003 0308 	and.w	r3, r3, #8
 800a480:	2b00      	cmp	r3, #0
 800a482:	d01b      	beq.n	800a4bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f06f 0208 	mvn.w	r2, #8
 800a48c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2204      	movs	r2, #4
 800a492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	69db      	ldr	r3, [r3, #28]
 800a49a:	f003 0303 	and.w	r3, r3, #3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fb10 	bl	800aac8 <HAL_TIM_IC_CaptureCallback>
 800a4a8:	e005      	b.n	800a4b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fb02 	bl	800aab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 fb13 	bl	800aadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	f003 0310 	and.w	r3, r3, #16
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d020      	beq.n	800a508 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f003 0310 	and.w	r3, r3, #16
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d01b      	beq.n	800a508 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f06f 0210 	mvn.w	r2, #16
 800a4d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2208      	movs	r2, #8
 800a4de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 faea 	bl	800aac8 <HAL_TIM_IC_CaptureCallback>
 800a4f4:	e005      	b.n	800a502 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fadc 	bl	800aab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 faed 	bl	800aadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00c      	beq.n	800a52c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f003 0301 	and.w	r3, r3, #1
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d007      	beq.n	800a52c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f06f 0201 	mvn.w	r2, #1
 800a524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7f8 fbba 	bl	8002ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a532:	2b00      	cmp	r3, #0
 800a534:	d104      	bne.n	800a540 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00c      	beq.n	800a55a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a546:	2b00      	cmp	r3, #0
 800a548:	d007      	beq.n	800a55a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f001 f8a9 	bl	800b6ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00c      	beq.n	800a57e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d007      	beq.n	800a57e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f001 f8a1 	bl	800b6c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00c      	beq.n	800a5a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d007      	beq.n	800a5a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a59a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 faa7 	bl	800aaf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	f003 0320 	and.w	r3, r3, #32
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00c      	beq.n	800a5c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f003 0320 	and.w	r3, r3, #32
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d007      	beq.n	800a5c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f06f 0220 	mvn.w	r2, #32
 800a5be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f001 f869 	bl	800b698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00c      	beq.n	800a5ea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d007      	beq.n	800a5ea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a5e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f001 f875 	bl	800b6d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00c      	beq.n	800a60e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d007      	beq.n	800a60e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f001 f86d 	bl	800b6e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00c      	beq.n	800a632 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d007      	beq.n	800a632 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a62a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f001 f865 	bl	800b6fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00c      	beq.n	800a656 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a642:	2b00      	cmp	r3, #0
 800a644:	d007      	beq.n	800a656 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a64e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f001 f85d 	bl	800b710 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a656:	bf00      	nop
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
	...

0800a660 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a676:	2b01      	cmp	r3, #1
 800a678:	d101      	bne.n	800a67e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a67a:	2302      	movs	r3, #2
 800a67c:	e0ff      	b.n	800a87e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2b14      	cmp	r3, #20
 800a68a:	f200 80f0 	bhi.w	800a86e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a68e:	a201      	add	r2, pc, #4	@ (adr r2, 800a694 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a694:	0800a6e9 	.word	0x0800a6e9
 800a698:	0800a86f 	.word	0x0800a86f
 800a69c:	0800a86f 	.word	0x0800a86f
 800a6a0:	0800a86f 	.word	0x0800a86f
 800a6a4:	0800a729 	.word	0x0800a729
 800a6a8:	0800a86f 	.word	0x0800a86f
 800a6ac:	0800a86f 	.word	0x0800a86f
 800a6b0:	0800a86f 	.word	0x0800a86f
 800a6b4:	0800a76b 	.word	0x0800a76b
 800a6b8:	0800a86f 	.word	0x0800a86f
 800a6bc:	0800a86f 	.word	0x0800a86f
 800a6c0:	0800a86f 	.word	0x0800a86f
 800a6c4:	0800a7ab 	.word	0x0800a7ab
 800a6c8:	0800a86f 	.word	0x0800a86f
 800a6cc:	0800a86f 	.word	0x0800a86f
 800a6d0:	0800a86f 	.word	0x0800a86f
 800a6d4:	0800a7ed 	.word	0x0800a7ed
 800a6d8:	0800a86f 	.word	0x0800a86f
 800a6dc:	0800a86f 	.word	0x0800a86f
 800a6e0:	0800a86f 	.word	0x0800a86f
 800a6e4:	0800a82d 	.word	0x0800a82d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68b9      	ldr	r1, [r7, #8]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 fabc 	bl	800ac6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	699a      	ldr	r2, [r3, #24]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f042 0208 	orr.w	r2, r2, #8
 800a702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	699a      	ldr	r2, [r3, #24]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f022 0204 	bic.w	r2, r2, #4
 800a712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6999      	ldr	r1, [r3, #24]
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	691a      	ldr	r2, [r3, #16]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	430a      	orrs	r2, r1
 800a724:	619a      	str	r2, [r3, #24]
      break;
 800a726:	e0a5      	b.n	800a874 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68b9      	ldr	r1, [r7, #8]
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 fb36 	bl	800ada0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	699a      	ldr	r2, [r3, #24]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	699a      	ldr	r2, [r3, #24]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6999      	ldr	r1, [r3, #24]
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	021a      	lsls	r2, r3, #8
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	430a      	orrs	r2, r1
 800a766:	619a      	str	r2, [r3, #24]
      break;
 800a768:	e084      	b.n	800a874 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68b9      	ldr	r1, [r7, #8]
 800a770:	4618      	mov	r0, r3
 800a772:	f000 fba9 	bl	800aec8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	69da      	ldr	r2, [r3, #28]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f042 0208 	orr.w	r2, r2, #8
 800a784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	69da      	ldr	r2, [r3, #28]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f022 0204 	bic.w	r2, r2, #4
 800a794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	69d9      	ldr	r1, [r3, #28]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	691a      	ldr	r2, [r3, #16]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	430a      	orrs	r2, r1
 800a7a6:	61da      	str	r2, [r3, #28]
      break;
 800a7a8:	e064      	b.n	800a874 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	68b9      	ldr	r1, [r7, #8]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f000 fc1b 	bl	800afec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	69da      	ldr	r2, [r3, #28]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	69da      	ldr	r2, [r3, #28]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	69d9      	ldr	r1, [r3, #28]
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	021a      	lsls	r2, r3, #8
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	430a      	orrs	r2, r1
 800a7e8:	61da      	str	r2, [r3, #28]
      break;
 800a7ea:	e043      	b.n	800a874 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	68b9      	ldr	r1, [r7, #8]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 fc8e 	bl	800b114 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f042 0208 	orr.w	r2, r2, #8
 800a806:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f022 0204 	bic.w	r2, r2, #4
 800a816:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	691a      	ldr	r2, [r3, #16]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	430a      	orrs	r2, r1
 800a828:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a82a:	e023      	b.n	800a874 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68b9      	ldr	r1, [r7, #8]
 800a832:	4618      	mov	r0, r3
 800a834:	f000 fcd8 	bl	800b1e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a846:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a856:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	021a      	lsls	r2, r3, #8
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	430a      	orrs	r2, r1
 800a86a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a86c:	e002      	b.n	800a874 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	75fb      	strb	r3, [r7, #23]
      break;
 800a872:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3718      	adds	r7, #24
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop

0800a888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d101      	bne.n	800a8a4 <HAL_TIM_ConfigClockSource+0x1c>
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	e0f6      	b.n	800aa92 <HAL_TIM_ConfigClockSource+0x20a>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a8c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a8c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a8ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68ba      	ldr	r2, [r7, #8]
 800a8d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a6f      	ldr	r2, [pc, #444]	@ (800aa9c <HAL_TIM_ConfigClockSource+0x214>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	f000 80c1 	beq.w	800aa66 <HAL_TIM_ConfigClockSource+0x1de>
 800a8e4:	4a6d      	ldr	r2, [pc, #436]	@ (800aa9c <HAL_TIM_ConfigClockSource+0x214>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	f200 80c6 	bhi.w	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a8ec:	4a6c      	ldr	r2, [pc, #432]	@ (800aaa0 <HAL_TIM_ConfigClockSource+0x218>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	f000 80b9 	beq.w	800aa66 <HAL_TIM_ConfigClockSource+0x1de>
 800a8f4:	4a6a      	ldr	r2, [pc, #424]	@ (800aaa0 <HAL_TIM_ConfigClockSource+0x218>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	f200 80be 	bhi.w	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a8fc:	4a69      	ldr	r2, [pc, #420]	@ (800aaa4 <HAL_TIM_ConfigClockSource+0x21c>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	f000 80b1 	beq.w	800aa66 <HAL_TIM_ConfigClockSource+0x1de>
 800a904:	4a67      	ldr	r2, [pc, #412]	@ (800aaa4 <HAL_TIM_ConfigClockSource+0x21c>)
 800a906:	4293      	cmp	r3, r2
 800a908:	f200 80b6 	bhi.w	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a90c:	4a66      	ldr	r2, [pc, #408]	@ (800aaa8 <HAL_TIM_ConfigClockSource+0x220>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	f000 80a9 	beq.w	800aa66 <HAL_TIM_ConfigClockSource+0x1de>
 800a914:	4a64      	ldr	r2, [pc, #400]	@ (800aaa8 <HAL_TIM_ConfigClockSource+0x220>)
 800a916:	4293      	cmp	r3, r2
 800a918:	f200 80ae 	bhi.w	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a91c:	4a63      	ldr	r2, [pc, #396]	@ (800aaac <HAL_TIM_ConfigClockSource+0x224>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	f000 80a1 	beq.w	800aa66 <HAL_TIM_ConfigClockSource+0x1de>
 800a924:	4a61      	ldr	r2, [pc, #388]	@ (800aaac <HAL_TIM_ConfigClockSource+0x224>)
 800a926:	4293      	cmp	r3, r2
 800a928:	f200 80a6 	bhi.w	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a92c:	4a60      	ldr	r2, [pc, #384]	@ (800aab0 <HAL_TIM_ConfigClockSource+0x228>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	f000 8099 	beq.w	800aa66 <HAL_TIM_ConfigClockSource+0x1de>
 800a934:	4a5e      	ldr	r2, [pc, #376]	@ (800aab0 <HAL_TIM_ConfigClockSource+0x228>)
 800a936:	4293      	cmp	r3, r2
 800a938:	f200 809e 	bhi.w	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a93c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a940:	f000 8091 	beq.w	800aa66 <HAL_TIM_ConfigClockSource+0x1de>
 800a944:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a948:	f200 8096 	bhi.w	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a94c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a950:	f000 8089 	beq.w	800aa66 <HAL_TIM_ConfigClockSource+0x1de>
 800a954:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a958:	f200 808e 	bhi.w	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a95c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a960:	d03e      	beq.n	800a9e0 <HAL_TIM_ConfigClockSource+0x158>
 800a962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a966:	f200 8087 	bhi.w	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a96a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a96e:	f000 8086 	beq.w	800aa7e <HAL_TIM_ConfigClockSource+0x1f6>
 800a972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a976:	d87f      	bhi.n	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a978:	2b70      	cmp	r3, #112	@ 0x70
 800a97a:	d01a      	beq.n	800a9b2 <HAL_TIM_ConfigClockSource+0x12a>
 800a97c:	2b70      	cmp	r3, #112	@ 0x70
 800a97e:	d87b      	bhi.n	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a980:	2b60      	cmp	r3, #96	@ 0x60
 800a982:	d050      	beq.n	800aa26 <HAL_TIM_ConfigClockSource+0x19e>
 800a984:	2b60      	cmp	r3, #96	@ 0x60
 800a986:	d877      	bhi.n	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a988:	2b50      	cmp	r3, #80	@ 0x50
 800a98a:	d03c      	beq.n	800aa06 <HAL_TIM_ConfigClockSource+0x17e>
 800a98c:	2b50      	cmp	r3, #80	@ 0x50
 800a98e:	d873      	bhi.n	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a990:	2b40      	cmp	r3, #64	@ 0x40
 800a992:	d058      	beq.n	800aa46 <HAL_TIM_ConfigClockSource+0x1be>
 800a994:	2b40      	cmp	r3, #64	@ 0x40
 800a996:	d86f      	bhi.n	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a998:	2b30      	cmp	r3, #48	@ 0x30
 800a99a:	d064      	beq.n	800aa66 <HAL_TIM_ConfigClockSource+0x1de>
 800a99c:	2b30      	cmp	r3, #48	@ 0x30
 800a99e:	d86b      	bhi.n	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9a0:	2b20      	cmp	r3, #32
 800a9a2:	d060      	beq.n	800aa66 <HAL_TIM_ConfigClockSource+0x1de>
 800a9a4:	2b20      	cmp	r3, #32
 800a9a6:	d867      	bhi.n	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d05c      	beq.n	800aa66 <HAL_TIM_ConfigClockSource+0x1de>
 800a9ac:	2b10      	cmp	r3, #16
 800a9ae:	d05a      	beq.n	800aa66 <HAL_TIM_ConfigClockSource+0x1de>
 800a9b0:	e062      	b.n	800aa78 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9c2:	f000 fcf9 	bl	800b3b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a9d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	609a      	str	r2, [r3, #8]
      break;
 800a9de:	e04f      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9f0:	f000 fce2 	bl	800b3b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	689a      	ldr	r2, [r3, #8]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa02:	609a      	str	r2, [r3, #8]
      break;
 800aa04:	e03c      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa12:	461a      	mov	r2, r3
 800aa14:	f000 fc54 	bl	800b2c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2150      	movs	r1, #80	@ 0x50
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 fcad 	bl	800b37e <TIM_ITRx_SetConfig>
      break;
 800aa24:	e02c      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa32:	461a      	mov	r2, r3
 800aa34:	f000 fc73 	bl	800b31e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2160      	movs	r1, #96	@ 0x60
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f000 fc9d 	bl	800b37e <TIM_ITRx_SetConfig>
      break;
 800aa44:	e01c      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa52:	461a      	mov	r2, r3
 800aa54:	f000 fc34 	bl	800b2c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2140      	movs	r1, #64	@ 0x40
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 fc8d 	bl	800b37e <TIM_ITRx_SetConfig>
      break;
 800aa64:	e00c      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	4610      	mov	r0, r2
 800aa72:	f000 fc84 	bl	800b37e <TIM_ITRx_SetConfig>
      break;
 800aa76:	e003      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa7c:	e000      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800aa7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa90:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	00100070 	.word	0x00100070
 800aaa0:	00100060 	.word	0x00100060
 800aaa4:	00100050 	.word	0x00100050
 800aaa8:	00100040 	.word	0x00100040
 800aaac:	00100030 	.word	0x00100030
 800aab0:	00100020 	.word	0x00100020

0800aab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aae4:	bf00      	nop
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aaf8:	bf00      	nop
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a4c      	ldr	r2, [pc, #304]	@ (800ac48 <TIM_Base_SetConfig+0x144>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d017      	beq.n	800ab4c <TIM_Base_SetConfig+0x48>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab22:	d013      	beq.n	800ab4c <TIM_Base_SetConfig+0x48>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a49      	ldr	r2, [pc, #292]	@ (800ac4c <TIM_Base_SetConfig+0x148>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d00f      	beq.n	800ab4c <TIM_Base_SetConfig+0x48>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a48      	ldr	r2, [pc, #288]	@ (800ac50 <TIM_Base_SetConfig+0x14c>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d00b      	beq.n	800ab4c <TIM_Base_SetConfig+0x48>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a47      	ldr	r2, [pc, #284]	@ (800ac54 <TIM_Base_SetConfig+0x150>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d007      	beq.n	800ab4c <TIM_Base_SetConfig+0x48>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a46      	ldr	r2, [pc, #280]	@ (800ac58 <TIM_Base_SetConfig+0x154>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d003      	beq.n	800ab4c <TIM_Base_SetConfig+0x48>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a45      	ldr	r2, [pc, #276]	@ (800ac5c <TIM_Base_SetConfig+0x158>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d108      	bne.n	800ab5e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a39      	ldr	r2, [pc, #228]	@ (800ac48 <TIM_Base_SetConfig+0x144>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d023      	beq.n	800abae <TIM_Base_SetConfig+0xaa>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab6c:	d01f      	beq.n	800abae <TIM_Base_SetConfig+0xaa>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a36      	ldr	r2, [pc, #216]	@ (800ac4c <TIM_Base_SetConfig+0x148>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d01b      	beq.n	800abae <TIM_Base_SetConfig+0xaa>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a35      	ldr	r2, [pc, #212]	@ (800ac50 <TIM_Base_SetConfig+0x14c>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d017      	beq.n	800abae <TIM_Base_SetConfig+0xaa>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a34      	ldr	r2, [pc, #208]	@ (800ac54 <TIM_Base_SetConfig+0x150>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d013      	beq.n	800abae <TIM_Base_SetConfig+0xaa>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a33      	ldr	r2, [pc, #204]	@ (800ac58 <TIM_Base_SetConfig+0x154>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d00f      	beq.n	800abae <TIM_Base_SetConfig+0xaa>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a33      	ldr	r2, [pc, #204]	@ (800ac60 <TIM_Base_SetConfig+0x15c>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d00b      	beq.n	800abae <TIM_Base_SetConfig+0xaa>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a32      	ldr	r2, [pc, #200]	@ (800ac64 <TIM_Base_SetConfig+0x160>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d007      	beq.n	800abae <TIM_Base_SetConfig+0xaa>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a31      	ldr	r2, [pc, #196]	@ (800ac68 <TIM_Base_SetConfig+0x164>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d003      	beq.n	800abae <TIM_Base_SetConfig+0xaa>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4a2c      	ldr	r2, [pc, #176]	@ (800ac5c <TIM_Base_SetConfig+0x158>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d108      	bne.n	800abc0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	695b      	ldr	r3, [r3, #20]
 800abca:	4313      	orrs	r3, r2
 800abcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	689a      	ldr	r2, [r3, #8]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a18      	ldr	r2, [pc, #96]	@ (800ac48 <TIM_Base_SetConfig+0x144>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d013      	beq.n	800ac14 <TIM_Base_SetConfig+0x110>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a1a      	ldr	r2, [pc, #104]	@ (800ac58 <TIM_Base_SetConfig+0x154>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d00f      	beq.n	800ac14 <TIM_Base_SetConfig+0x110>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a1a      	ldr	r2, [pc, #104]	@ (800ac60 <TIM_Base_SetConfig+0x15c>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d00b      	beq.n	800ac14 <TIM_Base_SetConfig+0x110>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	4a19      	ldr	r2, [pc, #100]	@ (800ac64 <TIM_Base_SetConfig+0x160>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d007      	beq.n	800ac14 <TIM_Base_SetConfig+0x110>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4a18      	ldr	r2, [pc, #96]	@ (800ac68 <TIM_Base_SetConfig+0x164>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d003      	beq.n	800ac14 <TIM_Base_SetConfig+0x110>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a13      	ldr	r2, [pc, #76]	@ (800ac5c <TIM_Base_SetConfig+0x158>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d103      	bne.n	800ac1c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	691a      	ldr	r2, [r3, #16]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	f003 0301 	and.w	r3, r3, #1
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d105      	bne.n	800ac3a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	691b      	ldr	r3, [r3, #16]
 800ac32:	f023 0201 	bic.w	r2, r3, #1
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	611a      	str	r2, [r3, #16]
  }
}
 800ac3a:	bf00      	nop
 800ac3c:	3714      	adds	r7, #20
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	40012c00 	.word	0x40012c00
 800ac4c:	40000400 	.word	0x40000400
 800ac50:	40000800 	.word	0x40000800
 800ac54:	40000c00 	.word	0x40000c00
 800ac58:	40013400 	.word	0x40013400
 800ac5c:	40015000 	.word	0x40015000
 800ac60:	40014000 	.word	0x40014000
 800ac64:	40014400 	.word	0x40014400
 800ac68:	40014800 	.word	0x40014800

0800ac6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b087      	sub	sp, #28
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6a1b      	ldr	r3, [r3, #32]
 800ac80:	f023 0201 	bic.w	r2, r3, #1
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f023 0303 	bic.w	r3, r3, #3
 800aca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	4313      	orrs	r3, r2
 800acb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	f023 0302 	bic.w	r3, r3, #2
 800acb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a30      	ldr	r2, [pc, #192]	@ (800ad88 <TIM_OC1_SetConfig+0x11c>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d013      	beq.n	800acf4 <TIM_OC1_SetConfig+0x88>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a2f      	ldr	r2, [pc, #188]	@ (800ad8c <TIM_OC1_SetConfig+0x120>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d00f      	beq.n	800acf4 <TIM_OC1_SetConfig+0x88>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a2e      	ldr	r2, [pc, #184]	@ (800ad90 <TIM_OC1_SetConfig+0x124>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d00b      	beq.n	800acf4 <TIM_OC1_SetConfig+0x88>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a2d      	ldr	r2, [pc, #180]	@ (800ad94 <TIM_OC1_SetConfig+0x128>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d007      	beq.n	800acf4 <TIM_OC1_SetConfig+0x88>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a2c      	ldr	r2, [pc, #176]	@ (800ad98 <TIM_OC1_SetConfig+0x12c>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d003      	beq.n	800acf4 <TIM_OC1_SetConfig+0x88>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a2b      	ldr	r2, [pc, #172]	@ (800ad9c <TIM_OC1_SetConfig+0x130>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d10c      	bne.n	800ad0e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	f023 0308 	bic.w	r3, r3, #8
 800acfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	697a      	ldr	r2, [r7, #20]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	f023 0304 	bic.w	r3, r3, #4
 800ad0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a1d      	ldr	r2, [pc, #116]	@ (800ad88 <TIM_OC1_SetConfig+0x11c>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d013      	beq.n	800ad3e <TIM_OC1_SetConfig+0xd2>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a1c      	ldr	r2, [pc, #112]	@ (800ad8c <TIM_OC1_SetConfig+0x120>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d00f      	beq.n	800ad3e <TIM_OC1_SetConfig+0xd2>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a1b      	ldr	r2, [pc, #108]	@ (800ad90 <TIM_OC1_SetConfig+0x124>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d00b      	beq.n	800ad3e <TIM_OC1_SetConfig+0xd2>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a1a      	ldr	r2, [pc, #104]	@ (800ad94 <TIM_OC1_SetConfig+0x128>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d007      	beq.n	800ad3e <TIM_OC1_SetConfig+0xd2>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a19      	ldr	r2, [pc, #100]	@ (800ad98 <TIM_OC1_SetConfig+0x12c>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d003      	beq.n	800ad3e <TIM_OC1_SetConfig+0xd2>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a18      	ldr	r2, [pc, #96]	@ (800ad9c <TIM_OC1_SetConfig+0x130>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d111      	bne.n	800ad62 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	693a      	ldr	r2, [r7, #16]
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	693a      	ldr	r2, [r7, #16]
 800ad66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	68fa      	ldr	r2, [r7, #12]
 800ad6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	697a      	ldr	r2, [r7, #20]
 800ad7a:	621a      	str	r2, [r3, #32]
}
 800ad7c:	bf00      	nop
 800ad7e:	371c      	adds	r7, #28
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	40012c00 	.word	0x40012c00
 800ad8c:	40013400 	.word	0x40013400
 800ad90:	40014000 	.word	0x40014000
 800ad94:	40014400 	.word	0x40014400
 800ad98:	40014800 	.word	0x40014800
 800ad9c:	40015000 	.word	0x40015000

0800ada0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b087      	sub	sp, #28
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a1b      	ldr	r3, [r3, #32]
 800adae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a1b      	ldr	r3, [r3, #32]
 800adb4:	f023 0210 	bic.w	r2, r3, #16
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800adce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800add2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800adda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	021b      	lsls	r3, r3, #8
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	f023 0320 	bic.w	r3, r3, #32
 800adee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	011b      	lsls	r3, r3, #4
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a2c      	ldr	r2, [pc, #176]	@ (800aeb0 <TIM_OC2_SetConfig+0x110>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d007      	beq.n	800ae14 <TIM_OC2_SetConfig+0x74>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a2b      	ldr	r2, [pc, #172]	@ (800aeb4 <TIM_OC2_SetConfig+0x114>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d003      	beq.n	800ae14 <TIM_OC2_SetConfig+0x74>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a2a      	ldr	r2, [pc, #168]	@ (800aeb8 <TIM_OC2_SetConfig+0x118>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d10d      	bne.n	800ae30 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	011b      	lsls	r3, r3, #4
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a1f      	ldr	r2, [pc, #124]	@ (800aeb0 <TIM_OC2_SetConfig+0x110>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d013      	beq.n	800ae60 <TIM_OC2_SetConfig+0xc0>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a1e      	ldr	r2, [pc, #120]	@ (800aeb4 <TIM_OC2_SetConfig+0x114>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d00f      	beq.n	800ae60 <TIM_OC2_SetConfig+0xc0>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a1e      	ldr	r2, [pc, #120]	@ (800aebc <TIM_OC2_SetConfig+0x11c>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d00b      	beq.n	800ae60 <TIM_OC2_SetConfig+0xc0>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a1d      	ldr	r2, [pc, #116]	@ (800aec0 <TIM_OC2_SetConfig+0x120>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d007      	beq.n	800ae60 <TIM_OC2_SetConfig+0xc0>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a1c      	ldr	r2, [pc, #112]	@ (800aec4 <TIM_OC2_SetConfig+0x124>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d003      	beq.n	800ae60 <TIM_OC2_SetConfig+0xc0>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a17      	ldr	r2, [pc, #92]	@ (800aeb8 <TIM_OC2_SetConfig+0x118>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d113      	bne.n	800ae88 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ae6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	695b      	ldr	r3, [r3, #20]
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	693a      	ldr	r2, [r7, #16]
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	693a      	ldr	r2, [r7, #16]
 800ae8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	685a      	ldr	r2, [r3, #4]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	621a      	str	r2, [r3, #32]
}
 800aea2:	bf00      	nop
 800aea4:	371c      	adds	r7, #28
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	40012c00 	.word	0x40012c00
 800aeb4:	40013400 	.word	0x40013400
 800aeb8:	40015000 	.word	0x40015000
 800aebc:	40014000 	.word	0x40014000
 800aec0:	40014400 	.word	0x40014400
 800aec4:	40014800 	.word	0x40014800

0800aec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b087      	sub	sp, #28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6a1b      	ldr	r3, [r3, #32]
 800aedc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aefa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f023 0303 	bic.w	r3, r3, #3
 800af02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800af14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	021b      	lsls	r3, r3, #8
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	4313      	orrs	r3, r2
 800af20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a2b      	ldr	r2, [pc, #172]	@ (800afd4 <TIM_OC3_SetConfig+0x10c>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d007      	beq.n	800af3a <TIM_OC3_SetConfig+0x72>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4a2a      	ldr	r2, [pc, #168]	@ (800afd8 <TIM_OC3_SetConfig+0x110>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d003      	beq.n	800af3a <TIM_OC3_SetConfig+0x72>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4a29      	ldr	r2, [pc, #164]	@ (800afdc <TIM_OC3_SetConfig+0x114>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d10d      	bne.n	800af56 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	021b      	lsls	r3, r3, #8
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800af54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a1e      	ldr	r2, [pc, #120]	@ (800afd4 <TIM_OC3_SetConfig+0x10c>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d013      	beq.n	800af86 <TIM_OC3_SetConfig+0xbe>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a1d      	ldr	r2, [pc, #116]	@ (800afd8 <TIM_OC3_SetConfig+0x110>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d00f      	beq.n	800af86 <TIM_OC3_SetConfig+0xbe>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a1d      	ldr	r2, [pc, #116]	@ (800afe0 <TIM_OC3_SetConfig+0x118>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d00b      	beq.n	800af86 <TIM_OC3_SetConfig+0xbe>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a1c      	ldr	r2, [pc, #112]	@ (800afe4 <TIM_OC3_SetConfig+0x11c>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d007      	beq.n	800af86 <TIM_OC3_SetConfig+0xbe>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a1b      	ldr	r2, [pc, #108]	@ (800afe8 <TIM_OC3_SetConfig+0x120>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d003      	beq.n	800af86 <TIM_OC3_SetConfig+0xbe>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a16      	ldr	r2, [pc, #88]	@ (800afdc <TIM_OC3_SetConfig+0x114>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d113      	bne.n	800afae <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800af94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	695b      	ldr	r3, [r3, #20]
 800af9a:	011b      	lsls	r3, r3, #4
 800af9c:	693a      	ldr	r2, [r7, #16]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	011b      	lsls	r3, r3, #4
 800afa8:	693a      	ldr	r2, [r7, #16]
 800afaa:	4313      	orrs	r3, r2
 800afac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	685a      	ldr	r2, [r3, #4]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	621a      	str	r2, [r3, #32]
}
 800afc8:	bf00      	nop
 800afca:	371c      	adds	r7, #28
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr
 800afd4:	40012c00 	.word	0x40012c00
 800afd8:	40013400 	.word	0x40013400
 800afdc:	40015000 	.word	0x40015000
 800afe0:	40014000 	.word	0x40014000
 800afe4:	40014400 	.word	0x40014400
 800afe8:	40014800 	.word	0x40014800

0800afec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afec:	b480      	push	{r7}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a1b      	ldr	r3, [r3, #32]
 800affa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6a1b      	ldr	r3, [r3, #32]
 800b000:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	69db      	ldr	r3, [r3, #28]
 800b012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b01a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b01e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	021b      	lsls	r3, r3, #8
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	4313      	orrs	r3, r2
 800b032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b03a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	031b      	lsls	r3, r3, #12
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	4313      	orrs	r3, r2
 800b046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a2c      	ldr	r2, [pc, #176]	@ (800b0fc <TIM_OC4_SetConfig+0x110>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d007      	beq.n	800b060 <TIM_OC4_SetConfig+0x74>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a2b      	ldr	r2, [pc, #172]	@ (800b100 <TIM_OC4_SetConfig+0x114>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d003      	beq.n	800b060 <TIM_OC4_SetConfig+0x74>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a2a      	ldr	r2, [pc, #168]	@ (800b104 <TIM_OC4_SetConfig+0x118>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d10d      	bne.n	800b07c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	031b      	lsls	r3, r3, #12
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	4313      	orrs	r3, r2
 800b072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b07a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4a1f      	ldr	r2, [pc, #124]	@ (800b0fc <TIM_OC4_SetConfig+0x110>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d013      	beq.n	800b0ac <TIM_OC4_SetConfig+0xc0>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a1e      	ldr	r2, [pc, #120]	@ (800b100 <TIM_OC4_SetConfig+0x114>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d00f      	beq.n	800b0ac <TIM_OC4_SetConfig+0xc0>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a1e      	ldr	r2, [pc, #120]	@ (800b108 <TIM_OC4_SetConfig+0x11c>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d00b      	beq.n	800b0ac <TIM_OC4_SetConfig+0xc0>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a1d      	ldr	r2, [pc, #116]	@ (800b10c <TIM_OC4_SetConfig+0x120>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d007      	beq.n	800b0ac <TIM_OC4_SetConfig+0xc0>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a1c      	ldr	r2, [pc, #112]	@ (800b110 <TIM_OC4_SetConfig+0x124>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d003      	beq.n	800b0ac <TIM_OC4_SetConfig+0xc0>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a17      	ldr	r2, [pc, #92]	@ (800b104 <TIM_OC4_SetConfig+0x118>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d113      	bne.n	800b0d4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b0b2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b0ba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	695b      	ldr	r3, [r3, #20]
 800b0c0:	019b      	lsls	r3, r3, #6
 800b0c2:	693a      	ldr	r2, [r7, #16]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	019b      	lsls	r3, r3, #6
 800b0ce:	693a      	ldr	r2, [r7, #16]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	693a      	ldr	r2, [r7, #16]
 800b0d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	685a      	ldr	r2, [r3, #4]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	621a      	str	r2, [r3, #32]
}
 800b0ee:	bf00      	nop
 800b0f0:	371c      	adds	r7, #28
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	40012c00 	.word	0x40012c00
 800b100:	40013400 	.word	0x40013400
 800b104:	40015000 	.word	0x40015000
 800b108:	40014000 	.word	0x40014000
 800b10c:	40014400 	.word	0x40014400
 800b110:	40014800 	.word	0x40014800

0800b114 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b114:	b480      	push	{r7}
 800b116:	b087      	sub	sp, #28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a1b      	ldr	r3, [r3, #32]
 800b128:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	4313      	orrs	r3, r2
 800b150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b158:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	041b      	lsls	r3, r3, #16
 800b160:	693a      	ldr	r2, [r7, #16]
 800b162:	4313      	orrs	r3, r2
 800b164:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a19      	ldr	r2, [pc, #100]	@ (800b1d0 <TIM_OC5_SetConfig+0xbc>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d013      	beq.n	800b196 <TIM_OC5_SetConfig+0x82>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a18      	ldr	r2, [pc, #96]	@ (800b1d4 <TIM_OC5_SetConfig+0xc0>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d00f      	beq.n	800b196 <TIM_OC5_SetConfig+0x82>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a17      	ldr	r2, [pc, #92]	@ (800b1d8 <TIM_OC5_SetConfig+0xc4>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d00b      	beq.n	800b196 <TIM_OC5_SetConfig+0x82>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a16      	ldr	r2, [pc, #88]	@ (800b1dc <TIM_OC5_SetConfig+0xc8>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d007      	beq.n	800b196 <TIM_OC5_SetConfig+0x82>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a15      	ldr	r2, [pc, #84]	@ (800b1e0 <TIM_OC5_SetConfig+0xcc>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d003      	beq.n	800b196 <TIM_OC5_SetConfig+0x82>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a14      	ldr	r2, [pc, #80]	@ (800b1e4 <TIM_OC5_SetConfig+0xd0>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d109      	bne.n	800b1aa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b19c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	695b      	ldr	r3, [r3, #20]
 800b1a2:	021b      	lsls	r3, r3, #8
 800b1a4:	697a      	ldr	r2, [r7, #20]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	697a      	ldr	r2, [r7, #20]
 800b1ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	685a      	ldr	r2, [r3, #4]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	621a      	str	r2, [r3, #32]
}
 800b1c4:	bf00      	nop
 800b1c6:	371c      	adds	r7, #28
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr
 800b1d0:	40012c00 	.word	0x40012c00
 800b1d4:	40013400 	.word	0x40013400
 800b1d8:	40014000 	.word	0x40014000
 800b1dc:	40014400 	.word	0x40014400
 800b1e0:	40014800 	.word	0x40014800
 800b1e4:	40015000 	.word	0x40015000

0800b1e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b087      	sub	sp, #28
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a1b      	ldr	r3, [r3, #32]
 800b1f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a1b      	ldr	r3, [r3, #32]
 800b1fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b21a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	021b      	lsls	r3, r3, #8
 800b222:	68fa      	ldr	r2, [r7, #12]
 800b224:	4313      	orrs	r3, r2
 800b226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b22e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	051b      	lsls	r3, r3, #20
 800b236:	693a      	ldr	r2, [r7, #16]
 800b238:	4313      	orrs	r3, r2
 800b23a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a1a      	ldr	r2, [pc, #104]	@ (800b2a8 <TIM_OC6_SetConfig+0xc0>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d013      	beq.n	800b26c <TIM_OC6_SetConfig+0x84>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a19      	ldr	r2, [pc, #100]	@ (800b2ac <TIM_OC6_SetConfig+0xc4>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d00f      	beq.n	800b26c <TIM_OC6_SetConfig+0x84>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a18      	ldr	r2, [pc, #96]	@ (800b2b0 <TIM_OC6_SetConfig+0xc8>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d00b      	beq.n	800b26c <TIM_OC6_SetConfig+0x84>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4a17      	ldr	r2, [pc, #92]	@ (800b2b4 <TIM_OC6_SetConfig+0xcc>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d007      	beq.n	800b26c <TIM_OC6_SetConfig+0x84>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a16      	ldr	r2, [pc, #88]	@ (800b2b8 <TIM_OC6_SetConfig+0xd0>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d003      	beq.n	800b26c <TIM_OC6_SetConfig+0x84>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a15      	ldr	r2, [pc, #84]	@ (800b2bc <TIM_OC6_SetConfig+0xd4>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d109      	bne.n	800b280 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b272:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	695b      	ldr	r3, [r3, #20]
 800b278:	029b      	lsls	r3, r3, #10
 800b27a:	697a      	ldr	r2, [r7, #20]
 800b27c:	4313      	orrs	r3, r2
 800b27e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	697a      	ldr	r2, [r7, #20]
 800b284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	685a      	ldr	r2, [r3, #4]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	693a      	ldr	r2, [r7, #16]
 800b298:	621a      	str	r2, [r3, #32]
}
 800b29a:	bf00      	nop
 800b29c:	371c      	adds	r7, #28
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	40012c00 	.word	0x40012c00
 800b2ac:	40013400 	.word	0x40013400
 800b2b0:	40014000 	.word	0x40014000
 800b2b4:	40014400 	.word	0x40014400
 800b2b8:	40014800 	.word	0x40014800
 800b2bc:	40015000 	.word	0x40015000

0800b2c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b087      	sub	sp, #28
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6a1b      	ldr	r3, [r3, #32]
 800b2d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	f023 0201 	bic.w	r2, r3, #1
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b2ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	011b      	lsls	r3, r3, #4
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	f023 030a 	bic.w	r3, r3, #10
 800b2fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2fe:	697a      	ldr	r2, [r7, #20]
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	4313      	orrs	r3, r2
 800b304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	621a      	str	r2, [r3, #32]
}
 800b312:	bf00      	nop
 800b314:	371c      	adds	r7, #28
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr

0800b31e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b31e:	b480      	push	{r7}
 800b320:	b087      	sub	sp, #28
 800b322:	af00      	add	r7, sp, #0
 800b324:	60f8      	str	r0, [r7, #12]
 800b326:	60b9      	str	r1, [r7, #8]
 800b328:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6a1b      	ldr	r3, [r3, #32]
 800b32e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6a1b      	ldr	r3, [r3, #32]
 800b334:	f023 0210 	bic.w	r2, r3, #16
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b348:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	031b      	lsls	r3, r3, #12
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	4313      	orrs	r3, r2
 800b352:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b35a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	011b      	lsls	r3, r3, #4
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	4313      	orrs	r3, r2
 800b364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	693a      	ldr	r2, [r7, #16]
 800b36a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	697a      	ldr	r2, [r7, #20]
 800b370:	621a      	str	r2, [r3, #32]
}
 800b372:	bf00      	nop
 800b374:	371c      	adds	r7, #28
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr

0800b37e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b37e:	b480      	push	{r7}
 800b380:	b085      	sub	sp, #20
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
 800b386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b394:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b398:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b39a:	683a      	ldr	r2, [r7, #0]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	f043 0307 	orr.w	r3, r3, #7
 800b3a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	609a      	str	r2, [r3, #8]
}
 800b3ac:	bf00      	nop
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
 800b3c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	021a      	lsls	r2, r3, #8
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	431a      	orrs	r2, r3
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	697a      	ldr	r2, [r7, #20]
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	697a      	ldr	r2, [r7, #20]
 800b3ea:	609a      	str	r2, [r3, #8]
}
 800b3ec:	bf00      	nop
 800b3ee:	371c      	adds	r7, #28
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	f003 031f 	and.w	r3, r3, #31
 800b40a:	2201      	movs	r2, #1
 800b40c:	fa02 f303 	lsl.w	r3, r2, r3
 800b410:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6a1a      	ldr	r2, [r3, #32]
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	43db      	mvns	r3, r3
 800b41a:	401a      	ands	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6a1a      	ldr	r2, [r3, #32]
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	f003 031f 	and.w	r3, r3, #31
 800b42a:	6879      	ldr	r1, [r7, #4]
 800b42c:	fa01 f303 	lsl.w	r3, r1, r3
 800b430:	431a      	orrs	r2, r3
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	621a      	str	r2, [r3, #32]
}
 800b436:	bf00      	nop
 800b438:	371c      	adds	r7, #28
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
	...

0800b444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b454:	2b01      	cmp	r3, #1
 800b456:	d101      	bne.n	800b45c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b458:	2302      	movs	r3, #2
 800b45a:	e074      	b.n	800b546 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2202      	movs	r2, #2
 800b468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a34      	ldr	r2, [pc, #208]	@ (800b554 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d009      	beq.n	800b49a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a33      	ldr	r2, [pc, #204]	@ (800b558 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d004      	beq.n	800b49a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a31      	ldr	r2, [pc, #196]	@ (800b55c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d108      	bne.n	800b4ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b4a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b4b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a21      	ldr	r2, [pc, #132]	@ (800b554 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d022      	beq.n	800b51a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4dc:	d01d      	beq.n	800b51a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a1f      	ldr	r2, [pc, #124]	@ (800b560 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d018      	beq.n	800b51a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a1d      	ldr	r2, [pc, #116]	@ (800b564 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d013      	beq.n	800b51a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a1c      	ldr	r2, [pc, #112]	@ (800b568 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d00e      	beq.n	800b51a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a15      	ldr	r2, [pc, #84]	@ (800b558 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d009      	beq.n	800b51a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a18      	ldr	r2, [pc, #96]	@ (800b56c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d004      	beq.n	800b51a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a11      	ldr	r2, [pc, #68]	@ (800b55c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d10c      	bne.n	800b534 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b520:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	4313      	orrs	r3, r2
 800b52a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3714      	adds	r7, #20
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop
 800b554:	40012c00 	.word	0x40012c00
 800b558:	40013400 	.word	0x40013400
 800b55c:	40015000 	.word	0x40015000
 800b560:	40000400 	.word	0x40000400
 800b564:	40000800 	.word	0x40000800
 800b568:	40000c00 	.word	0x40000c00
 800b56c:	40014000 	.word	0x40014000

0800b570 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b570:	b480      	push	{r7}
 800b572:	b085      	sub	sp, #20
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b57a:	2300      	movs	r3, #0
 800b57c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b584:	2b01      	cmp	r3, #1
 800b586:	d101      	bne.n	800b58c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b588:	2302      	movs	r3, #2
 800b58a:	e078      	b.n	800b67e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	695b      	ldr	r3, [r3, #20]
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	041b      	lsls	r3, r3, #16
 800b602:	4313      	orrs	r3, r2
 800b604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	69db      	ldr	r3, [r3, #28]
 800b610:	4313      	orrs	r3, r2
 800b612:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a1c      	ldr	r2, [pc, #112]	@ (800b68c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d009      	beq.n	800b632 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a1b      	ldr	r2, [pc, #108]	@ (800b690 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d004      	beq.n	800b632 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a19      	ldr	r2, [pc, #100]	@ (800b694 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d11c      	bne.n	800b66c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b63c:	051b      	lsls	r3, r3, #20
 800b63e:	4313      	orrs	r3, r2
 800b640:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	4313      	orrs	r3, r2
 800b64e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b65a:	4313      	orrs	r3, r2
 800b65c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b668:	4313      	orrs	r3, r2
 800b66a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3714      	adds	r7, #20
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	40012c00 	.word	0x40012c00
 800b690:	40013400 	.word	0x40013400
 800b694:	40015000 	.word	0x40015000

0800b698 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b6c8:	bf00      	nop
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b6dc:	bf00      	nop
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e042      	b.n	800b7bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d106      	bne.n	800b74e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7f8 fdb1 	bl	80042b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2224      	movs	r2, #36	@ 0x24
 800b752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f022 0201 	bic.w	r2, r2, #1
 800b764:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d002      	beq.n	800b774 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fb24 	bl	800bdbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 f825 	bl	800b7c4 <UART_SetConfig>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d101      	bne.n	800b784 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b780:	2301      	movs	r3, #1
 800b782:	e01b      	b.n	800b7bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	685a      	ldr	r2, [r3, #4]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	689a      	ldr	r2, [r3, #8]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b7a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f042 0201 	orr.w	r2, r2, #1
 800b7b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 fba3 	bl	800bf00 <UART_CheckIdleState>
 800b7ba:	4603      	mov	r3, r0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3708      	adds	r7, #8
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7c8:	b08c      	sub	sp, #48	@ 0x30
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	689a      	ldr	r2, [r3, #8]
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	431a      	orrs	r2, r3
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	431a      	orrs	r2, r3
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	69db      	ldr	r3, [r3, #28]
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	4baa      	ldr	r3, [pc, #680]	@ (800ba9c <UART_SetConfig+0x2d8>)
 800b7f4:	4013      	ands	r3, r2
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	6812      	ldr	r2, [r2, #0]
 800b7fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7fc:	430b      	orrs	r3, r1
 800b7fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	68da      	ldr	r2, [r3, #12]
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	430a      	orrs	r2, r1
 800b814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a9f      	ldr	r2, [pc, #636]	@ (800baa0 <UART_SetConfig+0x2dc>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d004      	beq.n	800b830 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	6a1b      	ldr	r3, [r3, #32]
 800b82a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b82c:	4313      	orrs	r3, r2
 800b82e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b83a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b83e:	697a      	ldr	r2, [r7, #20]
 800b840:	6812      	ldr	r2, [r2, #0]
 800b842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b844:	430b      	orrs	r3, r1
 800b846:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b84e:	f023 010f 	bic.w	r1, r3, #15
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	430a      	orrs	r2, r1
 800b85c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a90      	ldr	r2, [pc, #576]	@ (800baa4 <UART_SetConfig+0x2e0>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d125      	bne.n	800b8b4 <UART_SetConfig+0xf0>
 800b868:	4b8f      	ldr	r3, [pc, #572]	@ (800baa8 <UART_SetConfig+0x2e4>)
 800b86a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b86e:	f003 0303 	and.w	r3, r3, #3
 800b872:	2b03      	cmp	r3, #3
 800b874:	d81a      	bhi.n	800b8ac <UART_SetConfig+0xe8>
 800b876:	a201      	add	r2, pc, #4	@ (adr r2, 800b87c <UART_SetConfig+0xb8>)
 800b878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87c:	0800b88d 	.word	0x0800b88d
 800b880:	0800b89d 	.word	0x0800b89d
 800b884:	0800b895 	.word	0x0800b895
 800b888:	0800b8a5 	.word	0x0800b8a5
 800b88c:	2301      	movs	r3, #1
 800b88e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b892:	e116      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b894:	2302      	movs	r3, #2
 800b896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b89a:	e112      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b89c:	2304      	movs	r3, #4
 800b89e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8a2:	e10e      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b8a4:	2308      	movs	r3, #8
 800b8a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8aa:	e10a      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b8ac:	2310      	movs	r3, #16
 800b8ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8b2:	e106      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a7c      	ldr	r2, [pc, #496]	@ (800baac <UART_SetConfig+0x2e8>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d138      	bne.n	800b930 <UART_SetConfig+0x16c>
 800b8be:	4b7a      	ldr	r3, [pc, #488]	@ (800baa8 <UART_SetConfig+0x2e4>)
 800b8c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8c4:	f003 030c 	and.w	r3, r3, #12
 800b8c8:	2b0c      	cmp	r3, #12
 800b8ca:	d82d      	bhi.n	800b928 <UART_SetConfig+0x164>
 800b8cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d4 <UART_SetConfig+0x110>)
 800b8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d2:	bf00      	nop
 800b8d4:	0800b909 	.word	0x0800b909
 800b8d8:	0800b929 	.word	0x0800b929
 800b8dc:	0800b929 	.word	0x0800b929
 800b8e0:	0800b929 	.word	0x0800b929
 800b8e4:	0800b919 	.word	0x0800b919
 800b8e8:	0800b929 	.word	0x0800b929
 800b8ec:	0800b929 	.word	0x0800b929
 800b8f0:	0800b929 	.word	0x0800b929
 800b8f4:	0800b911 	.word	0x0800b911
 800b8f8:	0800b929 	.word	0x0800b929
 800b8fc:	0800b929 	.word	0x0800b929
 800b900:	0800b929 	.word	0x0800b929
 800b904:	0800b921 	.word	0x0800b921
 800b908:	2300      	movs	r3, #0
 800b90a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b90e:	e0d8      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b910:	2302      	movs	r3, #2
 800b912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b916:	e0d4      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b918:	2304      	movs	r3, #4
 800b91a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b91e:	e0d0      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b920:	2308      	movs	r3, #8
 800b922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b926:	e0cc      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b928:	2310      	movs	r3, #16
 800b92a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b92e:	e0c8      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a5e      	ldr	r2, [pc, #376]	@ (800bab0 <UART_SetConfig+0x2ec>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d125      	bne.n	800b986 <UART_SetConfig+0x1c2>
 800b93a:	4b5b      	ldr	r3, [pc, #364]	@ (800baa8 <UART_SetConfig+0x2e4>)
 800b93c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b940:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b944:	2b30      	cmp	r3, #48	@ 0x30
 800b946:	d016      	beq.n	800b976 <UART_SetConfig+0x1b2>
 800b948:	2b30      	cmp	r3, #48	@ 0x30
 800b94a:	d818      	bhi.n	800b97e <UART_SetConfig+0x1ba>
 800b94c:	2b20      	cmp	r3, #32
 800b94e:	d00a      	beq.n	800b966 <UART_SetConfig+0x1a2>
 800b950:	2b20      	cmp	r3, #32
 800b952:	d814      	bhi.n	800b97e <UART_SetConfig+0x1ba>
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <UART_SetConfig+0x19a>
 800b958:	2b10      	cmp	r3, #16
 800b95a:	d008      	beq.n	800b96e <UART_SetConfig+0x1aa>
 800b95c:	e00f      	b.n	800b97e <UART_SetConfig+0x1ba>
 800b95e:	2300      	movs	r3, #0
 800b960:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b964:	e0ad      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b966:	2302      	movs	r3, #2
 800b968:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b96c:	e0a9      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b96e:	2304      	movs	r3, #4
 800b970:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b974:	e0a5      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b976:	2308      	movs	r3, #8
 800b978:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b97c:	e0a1      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b97e:	2310      	movs	r3, #16
 800b980:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b984:	e09d      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a4a      	ldr	r2, [pc, #296]	@ (800bab4 <UART_SetConfig+0x2f0>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d125      	bne.n	800b9dc <UART_SetConfig+0x218>
 800b990:	4b45      	ldr	r3, [pc, #276]	@ (800baa8 <UART_SetConfig+0x2e4>)
 800b992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b996:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b99a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b99c:	d016      	beq.n	800b9cc <UART_SetConfig+0x208>
 800b99e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b9a0:	d818      	bhi.n	800b9d4 <UART_SetConfig+0x210>
 800b9a2:	2b80      	cmp	r3, #128	@ 0x80
 800b9a4:	d00a      	beq.n	800b9bc <UART_SetConfig+0x1f8>
 800b9a6:	2b80      	cmp	r3, #128	@ 0x80
 800b9a8:	d814      	bhi.n	800b9d4 <UART_SetConfig+0x210>
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d002      	beq.n	800b9b4 <UART_SetConfig+0x1f0>
 800b9ae:	2b40      	cmp	r3, #64	@ 0x40
 800b9b0:	d008      	beq.n	800b9c4 <UART_SetConfig+0x200>
 800b9b2:	e00f      	b.n	800b9d4 <UART_SetConfig+0x210>
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9ba:	e082      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b9bc:	2302      	movs	r3, #2
 800b9be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9c2:	e07e      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b9c4:	2304      	movs	r3, #4
 800b9c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9ca:	e07a      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b9cc:	2308      	movs	r3, #8
 800b9ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9d2:	e076      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b9d4:	2310      	movs	r3, #16
 800b9d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9da:	e072      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a35      	ldr	r2, [pc, #212]	@ (800bab8 <UART_SetConfig+0x2f4>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d12a      	bne.n	800ba3c <UART_SetConfig+0x278>
 800b9e6:	4b30      	ldr	r3, [pc, #192]	@ (800baa8 <UART_SetConfig+0x2e4>)
 800b9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b9f4:	d01a      	beq.n	800ba2c <UART_SetConfig+0x268>
 800b9f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b9fa:	d81b      	bhi.n	800ba34 <UART_SetConfig+0x270>
 800b9fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba00:	d00c      	beq.n	800ba1c <UART_SetConfig+0x258>
 800ba02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba06:	d815      	bhi.n	800ba34 <UART_SetConfig+0x270>
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d003      	beq.n	800ba14 <UART_SetConfig+0x250>
 800ba0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba10:	d008      	beq.n	800ba24 <UART_SetConfig+0x260>
 800ba12:	e00f      	b.n	800ba34 <UART_SetConfig+0x270>
 800ba14:	2300      	movs	r3, #0
 800ba16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba1a:	e052      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800ba1c:	2302      	movs	r3, #2
 800ba1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba22:	e04e      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800ba24:	2304      	movs	r3, #4
 800ba26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba2a:	e04a      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800ba2c:	2308      	movs	r3, #8
 800ba2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba32:	e046      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800ba34:	2310      	movs	r3, #16
 800ba36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba3a:	e042      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a17      	ldr	r2, [pc, #92]	@ (800baa0 <UART_SetConfig+0x2dc>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d13a      	bne.n	800babc <UART_SetConfig+0x2f8>
 800ba46:	4b18      	ldr	r3, [pc, #96]	@ (800baa8 <UART_SetConfig+0x2e4>)
 800ba48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ba50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ba54:	d01a      	beq.n	800ba8c <UART_SetConfig+0x2c8>
 800ba56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ba5a:	d81b      	bhi.n	800ba94 <UART_SetConfig+0x2d0>
 800ba5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba60:	d00c      	beq.n	800ba7c <UART_SetConfig+0x2b8>
 800ba62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba66:	d815      	bhi.n	800ba94 <UART_SetConfig+0x2d0>
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d003      	beq.n	800ba74 <UART_SetConfig+0x2b0>
 800ba6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba70:	d008      	beq.n	800ba84 <UART_SetConfig+0x2c0>
 800ba72:	e00f      	b.n	800ba94 <UART_SetConfig+0x2d0>
 800ba74:	2300      	movs	r3, #0
 800ba76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba7a:	e022      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba82:	e01e      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800ba84:	2304      	movs	r3, #4
 800ba86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba8a:	e01a      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800ba8c:	2308      	movs	r3, #8
 800ba8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba92:	e016      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800ba94:	2310      	movs	r3, #16
 800ba96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba9a:	e012      	b.n	800bac2 <UART_SetConfig+0x2fe>
 800ba9c:	cfff69f3 	.word	0xcfff69f3
 800baa0:	40008000 	.word	0x40008000
 800baa4:	40013800 	.word	0x40013800
 800baa8:	40021000 	.word	0x40021000
 800baac:	40004400 	.word	0x40004400
 800bab0:	40004800 	.word	0x40004800
 800bab4:	40004c00 	.word	0x40004c00
 800bab8:	40005000 	.word	0x40005000
 800babc:	2310      	movs	r3, #16
 800babe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4aae      	ldr	r2, [pc, #696]	@ (800bd80 <UART_SetConfig+0x5bc>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	f040 8097 	bne.w	800bbfc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bace:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bad2:	2b08      	cmp	r3, #8
 800bad4:	d823      	bhi.n	800bb1e <UART_SetConfig+0x35a>
 800bad6:	a201      	add	r2, pc, #4	@ (adr r2, 800badc <UART_SetConfig+0x318>)
 800bad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800badc:	0800bb01 	.word	0x0800bb01
 800bae0:	0800bb1f 	.word	0x0800bb1f
 800bae4:	0800bb09 	.word	0x0800bb09
 800bae8:	0800bb1f 	.word	0x0800bb1f
 800baec:	0800bb0f 	.word	0x0800bb0f
 800baf0:	0800bb1f 	.word	0x0800bb1f
 800baf4:	0800bb1f 	.word	0x0800bb1f
 800baf8:	0800bb1f 	.word	0x0800bb1f
 800bafc:	0800bb17 	.word	0x0800bb17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb00:	f7fd fec6 	bl	8009890 <HAL_RCC_GetPCLK1Freq>
 800bb04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb06:	e010      	b.n	800bb2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb08:	4b9e      	ldr	r3, [pc, #632]	@ (800bd84 <UART_SetConfig+0x5c0>)
 800bb0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb0c:	e00d      	b.n	800bb2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb0e:	f7fd fe51 	bl	80097b4 <HAL_RCC_GetSysClockFreq>
 800bb12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb14:	e009      	b.n	800bb2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb1c:	e005      	b.n	800bb2a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb22:	2301      	movs	r3, #1
 800bb24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bb28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f000 8130 	beq.w	800bd92 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb36:	4a94      	ldr	r2, [pc, #592]	@ (800bd88 <UART_SetConfig+0x5c4>)
 800bb38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb40:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	685a      	ldr	r2, [r3, #4]
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	005b      	lsls	r3, r3, #1
 800bb4e:	4413      	add	r3, r2
 800bb50:	69ba      	ldr	r2, [r7, #24]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d305      	bcc.n	800bb62 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb5c:	69ba      	ldr	r2, [r7, #24]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d903      	bls.n	800bb6a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bb68:	e113      	b.n	800bd92 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	60bb      	str	r3, [r7, #8]
 800bb70:	60fa      	str	r2, [r7, #12]
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb76:	4a84      	ldr	r2, [pc, #528]	@ (800bd88 <UART_SetConfig+0x5c4>)
 800bb78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	2200      	movs	r2, #0
 800bb80:	603b      	str	r3, [r7, #0]
 800bb82:	607a      	str	r2, [r7, #4]
 800bb84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb8c:	f7f5 f8a4 	bl	8000cd8 <__aeabi_uldivmod>
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	4610      	mov	r0, r2
 800bb96:	4619      	mov	r1, r3
 800bb98:	f04f 0200 	mov.w	r2, #0
 800bb9c:	f04f 0300 	mov.w	r3, #0
 800bba0:	020b      	lsls	r3, r1, #8
 800bba2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bba6:	0202      	lsls	r2, r0, #8
 800bba8:	6979      	ldr	r1, [r7, #20]
 800bbaa:	6849      	ldr	r1, [r1, #4]
 800bbac:	0849      	lsrs	r1, r1, #1
 800bbae:	2000      	movs	r0, #0
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	4605      	mov	r5, r0
 800bbb4:	eb12 0804 	adds.w	r8, r2, r4
 800bbb8:	eb43 0905 	adc.w	r9, r3, r5
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	469a      	mov	sl, r3
 800bbc4:	4693      	mov	fp, r2
 800bbc6:	4652      	mov	r2, sl
 800bbc8:	465b      	mov	r3, fp
 800bbca:	4640      	mov	r0, r8
 800bbcc:	4649      	mov	r1, r9
 800bbce:	f7f5 f883 	bl	8000cd8 <__aeabi_uldivmod>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bbe0:	d308      	bcc.n	800bbf4 <UART_SetConfig+0x430>
 800bbe2:	6a3b      	ldr	r3, [r7, #32]
 800bbe4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbe8:	d204      	bcs.n	800bbf4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	6a3a      	ldr	r2, [r7, #32]
 800bbf0:	60da      	str	r2, [r3, #12]
 800bbf2:	e0ce      	b.n	800bd92 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bbfa:	e0ca      	b.n	800bd92 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	69db      	ldr	r3, [r3, #28]
 800bc00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc04:	d166      	bne.n	800bcd4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bc06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bc0a:	2b08      	cmp	r3, #8
 800bc0c:	d827      	bhi.n	800bc5e <UART_SetConfig+0x49a>
 800bc0e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc14 <UART_SetConfig+0x450>)
 800bc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc14:	0800bc39 	.word	0x0800bc39
 800bc18:	0800bc41 	.word	0x0800bc41
 800bc1c:	0800bc49 	.word	0x0800bc49
 800bc20:	0800bc5f 	.word	0x0800bc5f
 800bc24:	0800bc4f 	.word	0x0800bc4f
 800bc28:	0800bc5f 	.word	0x0800bc5f
 800bc2c:	0800bc5f 	.word	0x0800bc5f
 800bc30:	0800bc5f 	.word	0x0800bc5f
 800bc34:	0800bc57 	.word	0x0800bc57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc38:	f7fd fe2a 	bl	8009890 <HAL_RCC_GetPCLK1Freq>
 800bc3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc3e:	e014      	b.n	800bc6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc40:	f7fd fe3c 	bl	80098bc <HAL_RCC_GetPCLK2Freq>
 800bc44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc46:	e010      	b.n	800bc6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc48:	4b4e      	ldr	r3, [pc, #312]	@ (800bd84 <UART_SetConfig+0x5c0>)
 800bc4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc4c:	e00d      	b.n	800bc6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc4e:	f7fd fdb1 	bl	80097b4 <HAL_RCC_GetSysClockFreq>
 800bc52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc54:	e009      	b.n	800bc6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc5c:	e005      	b.n	800bc6a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bc68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f000 8090 	beq.w	800bd92 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc76:	4a44      	ldr	r2, [pc, #272]	@ (800bd88 <UART_SetConfig+0x5c4>)
 800bc78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc80:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc84:	005a      	lsls	r2, r3, #1
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	085b      	lsrs	r3, r3, #1
 800bc8c:	441a      	add	r2, r3
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc98:	6a3b      	ldr	r3, [r7, #32]
 800bc9a:	2b0f      	cmp	r3, #15
 800bc9c:	d916      	bls.n	800bccc <UART_SetConfig+0x508>
 800bc9e:	6a3b      	ldr	r3, [r7, #32]
 800bca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bca4:	d212      	bcs.n	800bccc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bca6:	6a3b      	ldr	r3, [r7, #32]
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	f023 030f 	bic.w	r3, r3, #15
 800bcae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcb0:	6a3b      	ldr	r3, [r7, #32]
 800bcb2:	085b      	lsrs	r3, r3, #1
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	f003 0307 	and.w	r3, r3, #7
 800bcba:	b29a      	uxth	r2, r3
 800bcbc:	8bfb      	ldrh	r3, [r7, #30]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	8bfa      	ldrh	r2, [r7, #30]
 800bcc8:	60da      	str	r2, [r3, #12]
 800bcca:	e062      	b.n	800bd92 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bcd2:	e05e      	b.n	800bd92 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bcd4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bcd8:	2b08      	cmp	r3, #8
 800bcda:	d828      	bhi.n	800bd2e <UART_SetConfig+0x56a>
 800bcdc:	a201      	add	r2, pc, #4	@ (adr r2, 800bce4 <UART_SetConfig+0x520>)
 800bcde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce2:	bf00      	nop
 800bce4:	0800bd09 	.word	0x0800bd09
 800bce8:	0800bd11 	.word	0x0800bd11
 800bcec:	0800bd19 	.word	0x0800bd19
 800bcf0:	0800bd2f 	.word	0x0800bd2f
 800bcf4:	0800bd1f 	.word	0x0800bd1f
 800bcf8:	0800bd2f 	.word	0x0800bd2f
 800bcfc:	0800bd2f 	.word	0x0800bd2f
 800bd00:	0800bd2f 	.word	0x0800bd2f
 800bd04:	0800bd27 	.word	0x0800bd27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd08:	f7fd fdc2 	bl	8009890 <HAL_RCC_GetPCLK1Freq>
 800bd0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd0e:	e014      	b.n	800bd3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd10:	f7fd fdd4 	bl	80098bc <HAL_RCC_GetPCLK2Freq>
 800bd14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd16:	e010      	b.n	800bd3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd18:	4b1a      	ldr	r3, [pc, #104]	@ (800bd84 <UART_SetConfig+0x5c0>)
 800bd1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd1c:	e00d      	b.n	800bd3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd1e:	f7fd fd49 	bl	80097b4 <HAL_RCC_GetSysClockFreq>
 800bd22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd24:	e009      	b.n	800bd3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd2c:	e005      	b.n	800bd3a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bd32:	2301      	movs	r3, #1
 800bd34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bd38:	bf00      	nop
    }

    if (pclk != 0U)
 800bd3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d028      	beq.n	800bd92 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd44:	4a10      	ldr	r2, [pc, #64]	@ (800bd88 <UART_SetConfig+0x5c4>)
 800bd46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd4e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	085b      	lsrs	r3, r3, #1
 800bd58:	441a      	add	r2, r3
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd64:	6a3b      	ldr	r3, [r7, #32]
 800bd66:	2b0f      	cmp	r3, #15
 800bd68:	d910      	bls.n	800bd8c <UART_SetConfig+0x5c8>
 800bd6a:	6a3b      	ldr	r3, [r7, #32]
 800bd6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd70:	d20c      	bcs.n	800bd8c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd72:	6a3b      	ldr	r3, [r7, #32]
 800bd74:	b29a      	uxth	r2, r3
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	60da      	str	r2, [r3, #12]
 800bd7c:	e009      	b.n	800bd92 <UART_SetConfig+0x5ce>
 800bd7e:	bf00      	nop
 800bd80:	40008000 	.word	0x40008000
 800bd84:	00f42400 	.word	0x00f42400
 800bd88:	080174c0 	.word	0x080174c0
      }
      else
      {
        ret = HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	2201      	movs	r2, #1
 800bd96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	2200      	movs	r2, #0
 800bda6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bdae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3730      	adds	r7, #48	@ 0x30
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bdbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc8:	f003 0308 	and.w	r3, r3, #8
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d00a      	beq.n	800bde6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	430a      	orrs	r2, r1
 800bde4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdea:	f003 0301 	and.w	r3, r3, #1
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00a      	beq.n	800be08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	430a      	orrs	r2, r1
 800be06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be0c:	f003 0302 	and.w	r3, r3, #2
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00a      	beq.n	800be2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	430a      	orrs	r2, r1
 800be28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be2e:	f003 0304 	and.w	r3, r3, #4
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00a      	beq.n	800be4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	430a      	orrs	r2, r1
 800be4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be50:	f003 0310 	and.w	r3, r3, #16
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00a      	beq.n	800be6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	430a      	orrs	r2, r1
 800be6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be72:	f003 0320 	and.w	r3, r3, #32
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00a      	beq.n	800be90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	430a      	orrs	r2, r1
 800be8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d01a      	beq.n	800bed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	430a      	orrs	r2, r1
 800beb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800beba:	d10a      	bne.n	800bed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	430a      	orrs	r2, r1
 800bed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00a      	beq.n	800bef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	430a      	orrs	r2, r1
 800bef2:	605a      	str	r2, [r3, #4]
  }
}
 800bef4:	bf00      	nop
 800bef6:	370c      	adds	r7, #12
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b098      	sub	sp, #96	@ 0x60
 800bf04:	af02      	add	r7, sp, #8
 800bf06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf10:	f7f8 fc16 	bl	8004740 <HAL_GetTick>
 800bf14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f003 0308 	and.w	r3, r3, #8
 800bf20:	2b08      	cmp	r3, #8
 800bf22:	d12f      	bne.n	800bf84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 f88e 	bl	800c054 <UART_WaitOnFlagUntilTimeout>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d022      	beq.n	800bf84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf46:	e853 3f00 	ldrex	r3, [r3]
 800bf4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf52:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	461a      	mov	r2, r3
 800bf5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf64:	e841 2300 	strex	r3, r2, [r1]
 800bf68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1e6      	bne.n	800bf3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2220      	movs	r2, #32
 800bf74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf80:	2303      	movs	r3, #3
 800bf82:	e063      	b.n	800c04c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f003 0304 	and.w	r3, r3, #4
 800bf8e:	2b04      	cmp	r3, #4
 800bf90:	d149      	bne.n	800c026 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 f857 	bl	800c054 <UART_WaitOnFlagUntilTimeout>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d03c      	beq.n	800c026 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb4:	e853 3f00 	ldrex	r3, [r3]
 800bfb8:	623b      	str	r3, [r7, #32]
   return(result);
 800bfba:	6a3b      	ldr	r3, [r7, #32]
 800bfbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bfc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfca:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfd2:	e841 2300 	strex	r3, r2, [r1]
 800bfd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bfd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1e6      	bne.n	800bfac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	3308      	adds	r3, #8
 800bfe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	e853 3f00 	ldrex	r3, [r3]
 800bfec:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f023 0301 	bic.w	r3, r3, #1
 800bff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	3308      	adds	r3, #8
 800bffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bffe:	61fa      	str	r2, [r7, #28]
 800c000:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c002:	69b9      	ldr	r1, [r7, #24]
 800c004:	69fa      	ldr	r2, [r7, #28]
 800c006:	e841 2300 	strex	r3, r2, [r1]
 800c00a:	617b      	str	r3, [r7, #20]
   return(result);
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1e5      	bne.n	800bfde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2220      	movs	r2, #32
 800c016:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c022:	2303      	movs	r3, #3
 800c024:	e012      	b.n	800c04c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2220      	movs	r2, #32
 800c02a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2220      	movs	r2, #32
 800c032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3758      	adds	r7, #88	@ 0x58
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	603b      	str	r3, [r7, #0]
 800c060:	4613      	mov	r3, r2
 800c062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c064:	e04f      	b.n	800c106 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06c:	d04b      	beq.n	800c106 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c06e:	f7f8 fb67 	bl	8004740 <HAL_GetTick>
 800c072:	4602      	mov	r2, r0
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	1ad3      	subs	r3, r2, r3
 800c078:	69ba      	ldr	r2, [r7, #24]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d302      	bcc.n	800c084 <UART_WaitOnFlagUntilTimeout+0x30>
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d101      	bne.n	800c088 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c084:	2303      	movs	r3, #3
 800c086:	e04e      	b.n	800c126 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f003 0304 	and.w	r3, r3, #4
 800c092:	2b00      	cmp	r3, #0
 800c094:	d037      	beq.n	800c106 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	2b80      	cmp	r3, #128	@ 0x80
 800c09a:	d034      	beq.n	800c106 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	2b40      	cmp	r3, #64	@ 0x40
 800c0a0:	d031      	beq.n	800c106 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	69db      	ldr	r3, [r3, #28]
 800c0a8:	f003 0308 	and.w	r3, r3, #8
 800c0ac:	2b08      	cmp	r3, #8
 800c0ae:	d110      	bne.n	800c0d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2208      	movs	r2, #8
 800c0b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f000 f838 	bl	800c12e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2208      	movs	r2, #8
 800c0c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e029      	b.n	800c126 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	69db      	ldr	r3, [r3, #28]
 800c0d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c0dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c0e0:	d111      	bne.n	800c106 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c0ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f000 f81e 	bl	800c12e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2220      	movs	r2, #32
 800c0f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c102:	2303      	movs	r3, #3
 800c104:	e00f      	b.n	800c126 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	69da      	ldr	r2, [r3, #28]
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	4013      	ands	r3, r2
 800c110:	68ba      	ldr	r2, [r7, #8]
 800c112:	429a      	cmp	r2, r3
 800c114:	bf0c      	ite	eq
 800c116:	2301      	moveq	r3, #1
 800c118:	2300      	movne	r3, #0
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	461a      	mov	r2, r3
 800c11e:	79fb      	ldrb	r3, [r7, #7]
 800c120:	429a      	cmp	r2, r3
 800c122:	d0a0      	beq.n	800c066 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c12e:	b480      	push	{r7}
 800c130:	b095      	sub	sp, #84	@ 0x54
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c13e:	e853 3f00 	ldrex	r3, [r3]
 800c142:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c146:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c14a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	461a      	mov	r2, r3
 800c152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c154:	643b      	str	r3, [r7, #64]	@ 0x40
 800c156:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c158:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c15a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c15c:	e841 2300 	strex	r3, r2, [r1]
 800c160:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1e6      	bne.n	800c136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	3308      	adds	r3, #8
 800c16e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	e853 3f00 	ldrex	r3, [r3]
 800c176:	61fb      	str	r3, [r7, #28]
   return(result);
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c17e:	f023 0301 	bic.w	r3, r3, #1
 800c182:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	3308      	adds	r3, #8
 800c18a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c18c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c18e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c194:	e841 2300 	strex	r3, r2, [r1]
 800c198:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1e3      	bne.n	800c168 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d118      	bne.n	800c1da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	e853 3f00 	ldrex	r3, [r3]
 800c1b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	f023 0310 	bic.w	r3, r3, #16
 800c1bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1c6:	61bb      	str	r3, [r7, #24]
 800c1c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ca:	6979      	ldr	r1, [r7, #20]
 800c1cc:	69ba      	ldr	r2, [r7, #24]
 800c1ce:	e841 2300 	strex	r3, r2, [r1]
 800c1d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d1e6      	bne.n	800c1a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2220      	movs	r2, #32
 800c1de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c1ee:	bf00      	nop
 800c1f0:	3754      	adds	r7, #84	@ 0x54
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr

0800c1fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c1fa:	b480      	push	{r7}
 800c1fc:	b085      	sub	sp, #20
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d101      	bne.n	800c210 <HAL_UARTEx_DisableFifoMode+0x16>
 800c20c:	2302      	movs	r3, #2
 800c20e:	e027      	b.n	800c260 <HAL_UARTEx_DisableFifoMode+0x66>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2201      	movs	r2, #1
 800c214:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2224      	movs	r2, #36	@ 0x24
 800c21c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f022 0201 	bic.w	r2, r2, #1
 800c236:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c23e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2220      	movs	r2, #32
 800c252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3714      	adds	r7, #20
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d101      	bne.n	800c284 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c280:	2302      	movs	r3, #2
 800c282:	e02d      	b.n	800c2e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2201      	movs	r2, #1
 800c288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2224      	movs	r2, #36	@ 0x24
 800c290:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f022 0201 	bic.w	r2, r2, #1
 800c2aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	683a      	ldr	r2, [r7, #0]
 800c2bc:	430a      	orrs	r2, r1
 800c2be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 f84f 	bl	800c364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2220      	movs	r2, #32
 800c2d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2de:	2300      	movs	r3, #0
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3710      	adds	r7, #16
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d101      	bne.n	800c300 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c2fc:	2302      	movs	r3, #2
 800c2fe:	e02d      	b.n	800c35c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2224      	movs	r2, #36	@ 0x24
 800c30c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f022 0201 	bic.w	r2, r2, #1
 800c326:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	430a      	orrs	r2, r1
 800c33a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 f811 	bl	800c364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2220      	movs	r2, #32
 800c34e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2200      	movs	r2, #0
 800c356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c370:	2b00      	cmp	r3, #0
 800c372:	d108      	bne.n	800c386 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2201      	movs	r2, #1
 800c378:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2201      	movs	r2, #1
 800c380:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c384:	e031      	b.n	800c3ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c386:	2308      	movs	r3, #8
 800c388:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c38a:	2308      	movs	r3, #8
 800c38c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	0e5b      	lsrs	r3, r3, #25
 800c396:	b2db      	uxtb	r3, r3
 800c398:	f003 0307 	and.w	r3, r3, #7
 800c39c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	0f5b      	lsrs	r3, r3, #29
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	f003 0307 	and.w	r3, r3, #7
 800c3ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c3ae:	7bbb      	ldrb	r3, [r7, #14]
 800c3b0:	7b3a      	ldrb	r2, [r7, #12]
 800c3b2:	4911      	ldr	r1, [pc, #68]	@ (800c3f8 <UARTEx_SetNbDataToProcess+0x94>)
 800c3b4:	5c8a      	ldrb	r2, [r1, r2]
 800c3b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c3ba:	7b3a      	ldrb	r2, [r7, #12]
 800c3bc:	490f      	ldr	r1, [pc, #60]	@ (800c3fc <UARTEx_SetNbDataToProcess+0x98>)
 800c3be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c3c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3c4:	b29a      	uxth	r2, r3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c3cc:	7bfb      	ldrb	r3, [r7, #15]
 800c3ce:	7b7a      	ldrb	r2, [r7, #13]
 800c3d0:	4909      	ldr	r1, [pc, #36]	@ (800c3f8 <UARTEx_SetNbDataToProcess+0x94>)
 800c3d2:	5c8a      	ldrb	r2, [r1, r2]
 800c3d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c3d8:	7b7a      	ldrb	r2, [r7, #13]
 800c3da:	4908      	ldr	r1, [pc, #32]	@ (800c3fc <UARTEx_SetNbDataToProcess+0x98>)
 800c3dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c3de:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3e2:	b29a      	uxth	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c3ea:	bf00      	nop
 800c3ec:	3714      	adds	r7, #20
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	080174d8 	.word	0x080174d8
 800c3fc:	080174e0 	.word	0x080174e0

0800c400 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c410:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c414:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	b29a      	uxth	r2, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3714      	adds	r7, #20
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr

0800c42e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c42e:	b480      	push	{r7}
 800c430:	b085      	sub	sp, #20
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c436:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c43a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c442:	b29a      	uxth	r2, r3
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	b29b      	uxth	r3, r3
 800c448:	43db      	mvns	r3, r3
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	4013      	ands	r3, r2
 800c44e:	b29a      	uxth	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c464:	b480      	push	{r7}
 800c466:	b085      	sub	sp, #20
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	1d3b      	adds	r3, r7, #4
 800c46e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2201      	movs	r2, #1
 800c476:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2200      	movs	r2, #0
 800c47e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2200      	movs	r2, #0
 800c486:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2200      	movs	r2, #0
 800c48e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	3714      	adds	r7, #20
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b09d      	sub	sp, #116	@ 0x74
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	881b      	ldrh	r3, [r3, #0]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800c4c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4c6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	78db      	ldrb	r3, [r3, #3]
 800c4ce:	2b03      	cmp	r3, #3
 800c4d0:	d81f      	bhi.n	800c512 <USB_ActivateEndpoint+0x72>
 800c4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4d8 <USB_ActivateEndpoint+0x38>)
 800c4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4d8:	0800c4e9 	.word	0x0800c4e9
 800c4dc:	0800c505 	.word	0x0800c505
 800c4e0:	0800c51b 	.word	0x0800c51b
 800c4e4:	0800c4f7 	.word	0x0800c4f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c4e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c4ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c4f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c4f4:	e012      	b.n	800c51c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c4f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c4fa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c4fe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c502:	e00b      	b.n	800c51c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c504:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c508:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c50c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c510:	e004      	b.n	800c51c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c512:	2301      	movs	r3, #1
 800c514:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800c518:	e000      	b.n	800c51c <USB_ActivateEndpoint+0x7c>
      break;
 800c51a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	441a      	add	r2, r3
 800c526:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c52a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c52e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	4413      	add	r3, r2
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	b21b      	sxth	r3, r3
 800c54e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c556:	b21a      	sxth	r2, r3
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	b21b      	sxth	r3, r3
 800c55e:	4313      	orrs	r3, r2
 800c560:	b21b      	sxth	r3, r3
 800c562:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	441a      	add	r2, r3
 800c570:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c574:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c578:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c57c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c584:	b29b      	uxth	r3, r3
 800c586:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	7b1b      	ldrb	r3, [r3, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f040 8178 	bne.w	800c882 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	785b      	ldrb	r3, [r3, #1]
 800c596:	2b00      	cmp	r3, #0
 800c598:	f000 8084 	beq.w	800c6a4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	61bb      	str	r3, [r7, #24]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	61bb      	str	r3, [r7, #24]
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	00da      	lsls	r2, r3, #3
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c5be:	617b      	str	r3, [r7, #20]
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	88db      	ldrh	r3, [r3, #6]
 800c5c4:	085b      	lsrs	r3, r3, #1
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	881b      	ldrh	r3, [r3, #0]
 800c5dc:	827b      	strh	r3, [r7, #18]
 800c5de:	8a7b      	ldrh	r3, [r7, #18]
 800c5e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d01b      	beq.n	800c620 <USB_ActivateEndpoint+0x180>
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	4413      	add	r3, r2
 800c5f2:	881b      	ldrh	r3, [r3, #0]
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5fe:	823b      	strh	r3, [r7, #16]
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	441a      	add	r2, r3
 800c60a:	8a3b      	ldrh	r3, [r7, #16]
 800c60c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c610:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c614:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c618:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	78db      	ldrb	r3, [r3, #3]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d020      	beq.n	800c66a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	4413      	add	r3, r2
 800c632:	881b      	ldrh	r3, [r3, #0]
 800c634:	b29b      	uxth	r3, r3
 800c636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c63a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c63e:	81bb      	strh	r3, [r7, #12]
 800c640:	89bb      	ldrh	r3, [r7, #12]
 800c642:	f083 0320 	eor.w	r3, r3, #32
 800c646:	81bb      	strh	r3, [r7, #12]
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	441a      	add	r2, r3
 800c652:	89bb      	ldrh	r3, [r7, #12]
 800c654:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c658:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c65c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c664:	b29b      	uxth	r3, r3
 800c666:	8013      	strh	r3, [r2, #0]
 800c668:	e2d5      	b.n	800cc16 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	881b      	ldrh	r3, [r3, #0]
 800c676:	b29b      	uxth	r3, r3
 800c678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c67c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c680:	81fb      	strh	r3, [r7, #14]
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	441a      	add	r2, r3
 800c68c:	89fb      	ldrh	r3, [r7, #14]
 800c68e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c69a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	8013      	strh	r3, [r2, #0]
 800c6a2:	e2b8      	b.n	800cc16 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b4:	4413      	add	r3, r2
 800c6b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	00da      	lsls	r2, r3, #3
 800c6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c0:	4413      	add	r3, r2
 800c6c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c6c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	88db      	ldrh	r3, [r3, #6]
 800c6cc:	085b      	lsrs	r3, r3, #1
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	005b      	lsls	r3, r3, #1
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6d6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e8:	4413      	add	r3, r2
 800c6ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	00da      	lsls	r2, r3, #3
 800c6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f4:	4413      	add	r3, r2
 800c6f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c6fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	b29b      	uxth	r3, r3
 800c702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c706:	b29a      	uxth	r2, r3
 800c708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c70a:	801a      	strh	r2, [r3, #0]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d10a      	bne.n	800c72a <USB_ActivateEndpoint+0x28a>
 800c714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c716:	881b      	ldrh	r3, [r3, #0]
 800c718:	b29b      	uxth	r3, r3
 800c71a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c71e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c722:	b29a      	uxth	r2, r3
 800c724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c726:	801a      	strh	r2, [r3, #0]
 800c728:	e039      	b.n	800c79e <USB_ActivateEndpoint+0x2fe>
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	691b      	ldr	r3, [r3, #16]
 800c72e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c730:	d818      	bhi.n	800c764 <USB_ActivateEndpoint+0x2c4>
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	085b      	lsrs	r3, r3, #1
 800c738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	691b      	ldr	r3, [r3, #16]
 800c73e:	f003 0301 	and.w	r3, r3, #1
 800c742:	2b00      	cmp	r3, #0
 800c744:	d002      	beq.n	800c74c <USB_ActivateEndpoint+0x2ac>
 800c746:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c748:	3301      	adds	r3, #1
 800c74a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74e:	881b      	ldrh	r3, [r3, #0]
 800c750:	b29a      	uxth	r2, r3
 800c752:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c754:	b29b      	uxth	r3, r3
 800c756:	029b      	lsls	r3, r3, #10
 800c758:	b29b      	uxth	r3, r3
 800c75a:	4313      	orrs	r3, r2
 800c75c:	b29a      	uxth	r2, r3
 800c75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c760:	801a      	strh	r2, [r3, #0]
 800c762:	e01c      	b.n	800c79e <USB_ActivateEndpoint+0x2fe>
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	691b      	ldr	r3, [r3, #16]
 800c768:	095b      	lsrs	r3, r3, #5
 800c76a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	691b      	ldr	r3, [r3, #16]
 800c770:	f003 031f 	and.w	r3, r3, #31
 800c774:	2b00      	cmp	r3, #0
 800c776:	d102      	bne.n	800c77e <USB_ActivateEndpoint+0x2de>
 800c778:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c77a:	3b01      	subs	r3, #1
 800c77c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c780:	881b      	ldrh	r3, [r3, #0]
 800c782:	b29a      	uxth	r2, r3
 800c784:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c786:	b29b      	uxth	r3, r3
 800c788:	029b      	lsls	r3, r3, #10
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	4313      	orrs	r3, r2
 800c78e:	b29b      	uxth	r3, r3
 800c790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c798:	b29a      	uxth	r2, r3
 800c79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	4413      	add	r3, r2
 800c7a8:	881b      	ldrh	r3, [r3, #0]
 800c7aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c7ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c7ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d01b      	beq.n	800c7ee <USB_ActivateEndpoint+0x34e>
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	4413      	add	r3, r2
 800c7c0:	881b      	ldrh	r3, [r3, #0]
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7cc:	843b      	strh	r3, [r7, #32]
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	441a      	add	r2, r3
 800c7d8:	8c3b      	ldrh	r3, [r7, #32]
 800c7da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c7e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d124      	bne.n	800c840 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	4413      	add	r3, r2
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	b29b      	uxth	r3, r3
 800c804:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c80c:	83bb      	strh	r3, [r7, #28]
 800c80e:	8bbb      	ldrh	r3, [r7, #28]
 800c810:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c814:	83bb      	strh	r3, [r7, #28]
 800c816:	8bbb      	ldrh	r3, [r7, #28]
 800c818:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c81c:	83bb      	strh	r3, [r7, #28]
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	441a      	add	r2, r3
 800c828:	8bbb      	ldrh	r3, [r7, #28]
 800c82a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c82e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	8013      	strh	r3, [r2, #0]
 800c83e:	e1ea      	b.n	800cc16 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	4413      	add	r3, r2
 800c84a:	881b      	ldrh	r3, [r3, #0]
 800c84c:	b29b      	uxth	r3, r3
 800c84e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c856:	83fb      	strh	r3, [r7, #30]
 800c858:	8bfb      	ldrh	r3, [r7, #30]
 800c85a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c85e:	83fb      	strh	r3, [r7, #30]
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	009b      	lsls	r3, r3, #2
 800c868:	441a      	add	r2, r3
 800c86a:	8bfb      	ldrh	r3, [r7, #30]
 800c86c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	8013      	strh	r3, [r2, #0]
 800c880:	e1c9      	b.n	800cc16 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	78db      	ldrb	r3, [r3, #3]
 800c886:	2b02      	cmp	r3, #2
 800c888:	d11e      	bne.n	800c8c8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	4413      	add	r3, r2
 800c894:	881b      	ldrh	r3, [r3, #0]
 800c896:	b29b      	uxth	r3, r3
 800c898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c89c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8a0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	441a      	add	r2, r3
 800c8ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c8b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8ba:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c8be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	8013      	strh	r3, [r2, #0]
 800c8c6:	e01d      	b.n	800c904 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	4413      	add	r3, r2
 800c8d2:	881b      	ldrh	r3, [r3, #0]
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c8da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8de:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	441a      	add	r2, r3
 800c8ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c8f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c900:	b29b      	uxth	r3, r3
 800c902:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c90e:	b29b      	uxth	r3, r3
 800c910:	461a      	mov	r2, r3
 800c912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c914:	4413      	add	r3, r2
 800c916:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	00da      	lsls	r2, r3, #3
 800c91e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c920:	4413      	add	r3, r2
 800c922:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c926:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	891b      	ldrh	r3, [r3, #8]
 800c92c:	085b      	lsrs	r3, r3, #1
 800c92e:	b29b      	uxth	r3, r3
 800c930:	005b      	lsls	r3, r3, #1
 800c932:	b29a      	uxth	r2, r3
 800c934:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c936:	801a      	strh	r2, [r3, #0]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c942:	b29b      	uxth	r3, r3
 800c944:	461a      	mov	r2, r3
 800c946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c948:	4413      	add	r3, r2
 800c94a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	00da      	lsls	r2, r3, #3
 800c952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c954:	4413      	add	r3, r2
 800c956:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c95a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	895b      	ldrh	r3, [r3, #10]
 800c960:	085b      	lsrs	r3, r3, #1
 800c962:	b29b      	uxth	r3, r3
 800c964:	005b      	lsls	r3, r3, #1
 800c966:	b29a      	uxth	r2, r3
 800c968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c96a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	785b      	ldrb	r3, [r3, #1]
 800c970:	2b00      	cmp	r3, #0
 800c972:	f040 8093 	bne.w	800ca9c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	4413      	add	r3, r2
 800c980:	881b      	ldrh	r3, [r3, #0]
 800c982:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c986:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c98a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d01b      	beq.n	800c9ca <USB_ActivateEndpoint+0x52a>
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	4413      	add	r3, r2
 800c99c:	881b      	ldrh	r3, [r3, #0]
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	441a      	add	r2, r3
 800c9b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c9b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c9c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	4413      	add	r3, r2
 800c9d4:	881b      	ldrh	r3, [r3, #0]
 800c9d6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c9d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c9da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d01b      	beq.n	800ca1a <USB_ActivateEndpoint+0x57a>
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	4413      	add	r3, r2
 800c9ec:	881b      	ldrh	r3, [r3, #0]
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	441a      	add	r2, r3
 800ca04:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ca06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	4413      	add	r3, r2
 800ca24:	881b      	ldrh	r3, [r3, #0]
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ca2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca30:	873b      	strh	r3, [r7, #56]	@ 0x38
 800ca32:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ca34:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ca38:	873b      	strh	r3, [r7, #56]	@ 0x38
 800ca3a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ca3c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ca40:	873b      	strh	r3, [r7, #56]	@ 0x38
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	441a      	add	r2, r3
 800ca4c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ca4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	4413      	add	r3, r2
 800ca6c:	881b      	ldrh	r3, [r3, #0]
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca78:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	441a      	add	r2, r3
 800ca84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ca86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	8013      	strh	r3, [r2, #0]
 800ca9a:	e0bc      	b.n	800cc16 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	4413      	add	r3, r2
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800caac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800cab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d01d      	beq.n	800caf4 <USB_ActivateEndpoint+0x654>
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	4413      	add	r3, r2
 800cac2:	881b      	ldrh	r3, [r3, #0]
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800caca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cace:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	441a      	add	r2, r3
 800cadc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800cae0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cae4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cae8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800caec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	4413      	add	r3, r2
 800cafe:	881b      	ldrh	r3, [r3, #0]
 800cb00:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800cb04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800cb08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d01d      	beq.n	800cb4c <USB_ActivateEndpoint+0x6ac>
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4413      	add	r3, r2
 800cb1a:	881b      	ldrh	r3, [r3, #0]
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb26:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	441a      	add	r2, r3
 800cb34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800cb38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	78db      	ldrb	r3, [r3, #3]
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d024      	beq.n	800cb9e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	4413      	add	r3, r2
 800cb5e:	881b      	ldrh	r3, [r3, #0]
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb6a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800cb6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cb72:	f083 0320 	eor.w	r3, r3, #32
 800cb76:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	441a      	add	r2, r3
 800cb84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cb88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	8013      	strh	r3, [r2, #0]
 800cb9c:	e01d      	b.n	800cbda <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	4413      	add	r3, r2
 800cba8:	881b      	ldrh	r3, [r3, #0]
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbb4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800cbb8:	687a      	ldr	r2, [r7, #4]
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	441a      	add	r2, r3
 800cbc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cbc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbd6:	b29b      	uxth	r3, r3
 800cbd8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	4413      	add	r3, r2
 800cbe4:	881b      	ldrh	r3, [r3, #0]
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cbec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbf0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	441a      	add	r2, r3
 800cbfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cc02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800cc16:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3774      	adds	r7, #116	@ 0x74
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop

0800cc28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b08d      	sub	sp, #52	@ 0x34
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	7b1b      	ldrb	r3, [r3, #12]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	f040 808e 	bne.w	800cd58 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	785b      	ldrb	r3, [r3, #1]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d044      	beq.n	800ccce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	4413      	add	r3, r2
 800cc4e:	881b      	ldrh	r3, [r3, #0]
 800cc50:	81bb      	strh	r3, [r7, #12]
 800cc52:	89bb      	ldrh	r3, [r7, #12]
 800cc54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d01b      	beq.n	800cc94 <USB_DeactivateEndpoint+0x6c>
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	4413      	add	r3, r2
 800cc66:	881b      	ldrh	r3, [r3, #0]
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc72:	817b      	strh	r3, [r7, #10]
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	441a      	add	r2, r3
 800cc7e:	897b      	ldrh	r3, [r7, #10]
 800cc80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc8c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	4413      	add	r3, r2
 800cc9e:	881b      	ldrh	r3, [r3, #0]
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cca6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccaa:	813b      	strh	r3, [r7, #8]
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	441a      	add	r2, r3
 800ccb6:	893b      	ldrh	r3, [r7, #8]
 800ccb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ccc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	8013      	strh	r3, [r2, #0]
 800cccc:	e192      	b.n	800cff4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	4413      	add	r3, r2
 800ccd8:	881b      	ldrh	r3, [r3, #0]
 800ccda:	827b      	strh	r3, [r7, #18]
 800ccdc:	8a7b      	ldrh	r3, [r7, #18]
 800ccde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d01b      	beq.n	800cd1e <USB_DeactivateEndpoint+0xf6>
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4413      	add	r3, r2
 800ccf0:	881b      	ldrh	r3, [r3, #0]
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ccfc:	823b      	strh	r3, [r7, #16]
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	441a      	add	r2, r3
 800cd08:	8a3b      	ldrh	r3, [r7, #16]
 800cd0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cd16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	4413      	add	r3, r2
 800cd28:	881b      	ldrh	r3, [r3, #0]
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd34:	81fb      	strh	r3, [r7, #14]
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	441a      	add	r2, r3
 800cd40:	89fb      	ldrh	r3, [r7, #14]
 800cd42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	8013      	strh	r3, [r2, #0]
 800cd56:	e14d      	b.n	800cff4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	785b      	ldrb	r3, [r3, #1]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f040 80a5 	bne.w	800ceac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	4413      	add	r3, r2
 800cd6c:	881b      	ldrh	r3, [r3, #0]
 800cd6e:	843b      	strh	r3, [r7, #32]
 800cd70:	8c3b      	ldrh	r3, [r7, #32]
 800cd72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d01b      	beq.n	800cdb2 <USB_DeactivateEndpoint+0x18a>
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4413      	add	r3, r2
 800cd84:	881b      	ldrh	r3, [r3, #0]
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd90:	83fb      	strh	r3, [r7, #30]
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	441a      	add	r2, r3
 800cd9c:	8bfb      	ldrh	r3, [r7, #30]
 800cd9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cda2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cda6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cdaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	4413      	add	r3, r2
 800cdbc:	881b      	ldrh	r3, [r3, #0]
 800cdbe:	83bb      	strh	r3, [r7, #28]
 800cdc0:	8bbb      	ldrh	r3, [r7, #28]
 800cdc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d01b      	beq.n	800ce02 <USB_DeactivateEndpoint+0x1da>
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	4413      	add	r3, r2
 800cdd4:	881b      	ldrh	r3, [r3, #0]
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cde0:	837b      	strh	r3, [r7, #26]
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	441a      	add	r2, r3
 800cdec:	8b7b      	ldrh	r3, [r7, #26]
 800cdee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	4413      	add	r3, r2
 800ce0c:	881b      	ldrh	r3, [r3, #0]
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce18:	833b      	strh	r3, [r7, #24]
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	441a      	add	r2, r3
 800ce24:	8b3b      	ldrh	r3, [r7, #24]
 800ce26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	009b      	lsls	r3, r3, #2
 800ce42:	4413      	add	r3, r2
 800ce44:	881b      	ldrh	r3, [r3, #0]
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ce4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce50:	82fb      	strh	r3, [r7, #22]
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	441a      	add	r2, r3
 800ce5c:	8afb      	ldrh	r3, [r7, #22]
 800ce5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	4413      	add	r3, r2
 800ce7c:	881b      	ldrh	r3, [r3, #0]
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce88:	82bb      	strh	r3, [r7, #20]
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	441a      	add	r2, r3
 800ce94:	8abb      	ldrh	r3, [r7, #20]
 800ce96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	8013      	strh	r3, [r2, #0]
 800ceaa:	e0a3      	b.n	800cff4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	4413      	add	r3, r2
 800ceb6:	881b      	ldrh	r3, [r3, #0]
 800ceb8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800ceba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d01b      	beq.n	800cefc <USB_DeactivateEndpoint+0x2d4>
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	4413      	add	r3, r2
 800cece:	881b      	ldrh	r3, [r3, #0]
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ced6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ceda:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	441a      	add	r2, r3
 800cee6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ceec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cef0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cef8:	b29b      	uxth	r3, r3
 800cefa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	4413      	add	r3, r2
 800cf06:	881b      	ldrh	r3, [r3, #0]
 800cf08:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cf0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cf0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d01b      	beq.n	800cf4c <USB_DeactivateEndpoint+0x324>
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	4413      	add	r3, r2
 800cf1e:	881b      	ldrh	r3, [r3, #0]
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf2a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	009b      	lsls	r3, r3, #2
 800cf34:	441a      	add	r2, r3
 800cf36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cf38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4413      	add	r3, r2
 800cf56:	881b      	ldrh	r3, [r3, #0]
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf62:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	441a      	add	r2, r3
 800cf6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cf70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cf7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	4413      	add	r3, r2
 800cf8e:	881b      	ldrh	r3, [r3, #0]
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	441a      	add	r2, r3
 800cfa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cfa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	881b      	ldrh	r3, [r3, #0]
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cfce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfd2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	441a      	add	r2, r3
 800cfde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cfe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cff4:	2300      	movs	r3, #0
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3734      	adds	r7, #52	@ 0x34
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr

0800d002 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b0c2      	sub	sp, #264	@ 0x108
 800d006:	af00      	add	r7, sp, #0
 800d008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d00c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d010:	6018      	str	r0, [r3, #0]
 800d012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d01a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d01c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	785b      	ldrb	r3, [r3, #1]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	f040 86b7 	bne.w	800dd9c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d02e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	699a      	ldr	r2, [r3, #24]
 800d03a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d03e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	691b      	ldr	r3, [r3, #16]
 800d046:	429a      	cmp	r2, r3
 800d048:	d908      	bls.n	800d05c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800d04a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d04e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	691b      	ldr	r3, [r3, #16]
 800d056:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d05a:	e007      	b.n	800d06c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800d05c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	699b      	ldr	r3, [r3, #24]
 800d068:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d06c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	7b1b      	ldrb	r3, [r3, #12]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d13a      	bne.n	800d0f2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d07c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	6959      	ldr	r1, [r3, #20]
 800d088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d08c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	88da      	ldrh	r2, [r3, #6]
 800d094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d098:	b29b      	uxth	r3, r3
 800d09a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d09e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d0a2:	6800      	ldr	r0, [r0, #0]
 800d0a4:	f001 fc99 	bl	800e9da <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d0a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	613b      	str	r3, [r7, #16]
 800d0b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	613b      	str	r3, [r7, #16]
 800d0cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	00da      	lsls	r2, r3, #3
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	4413      	add	r3, r2
 800d0de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d0e2:	60fb      	str	r3, [r7, #12]
 800d0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0e8:	b29a      	uxth	r2, r3
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	801a      	strh	r2, [r3, #0]
 800d0ee:	f000 be1f 	b.w	800dd30 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d0f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	78db      	ldrb	r3, [r3, #3]
 800d0fe:	2b02      	cmp	r3, #2
 800d100:	f040 8462 	bne.w	800d9c8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	6a1a      	ldr	r2, [r3, #32]
 800d110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	691b      	ldr	r3, [r3, #16]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	f240 83df 	bls.w	800d8e0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	4413      	add	r3, r2
 800d13c:	881b      	ldrh	r3, [r3, #0]
 800d13e:	b29b      	uxth	r3, r3
 800d140:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d148:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800d14c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d150:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d15a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	441a      	add	r2, r3
 800d166:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d16a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d16e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d172:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d17e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	6a1a      	ldr	r2, [r3, #32]
 800d18a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d18e:	1ad2      	subs	r2, r2, r3
 800d190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d19c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	4413      	add	r3, r2
 800d1b6:	881b      	ldrh	r3, [r3, #0]
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f000 81c7 	beq.w	800d552 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d1c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	785b      	ldrb	r3, [r3, #1]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d177      	bne.n	800d2d0 <USB_EPStartXfer+0x2ce>
 800d1e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d1ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d200:	4413      	add	r3, r2
 800d202:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	00da      	lsls	r2, r3, #3
 800d212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d214:	4413      	add	r3, r2
 800d216:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d21a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21e:	881b      	ldrh	r3, [r3, #0]
 800d220:	b29b      	uxth	r3, r3
 800d222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d226:	b29a      	uxth	r2, r3
 800d228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22a:	801a      	strh	r2, [r3, #0]
 800d22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d230:	2b00      	cmp	r3, #0
 800d232:	d10a      	bne.n	800d24a <USB_EPStartXfer+0x248>
 800d234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d236:	881b      	ldrh	r3, [r3, #0]
 800d238:	b29b      	uxth	r3, r3
 800d23a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d23e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d242:	b29a      	uxth	r2, r3
 800d244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d246:	801a      	strh	r2, [r3, #0]
 800d248:	e067      	b.n	800d31a <USB_EPStartXfer+0x318>
 800d24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d24e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d250:	d81c      	bhi.n	800d28c <USB_EPStartXfer+0x28a>
 800d252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d256:	085b      	lsrs	r3, r3, #1
 800d258:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d260:	f003 0301 	and.w	r3, r3, #1
 800d264:	2b00      	cmp	r3, #0
 800d266:	d004      	beq.n	800d272 <USB_EPStartXfer+0x270>
 800d268:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d26c:	3301      	adds	r3, #1
 800d26e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d274:	881b      	ldrh	r3, [r3, #0]
 800d276:	b29a      	uxth	r2, r3
 800d278:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	029b      	lsls	r3, r3, #10
 800d280:	b29b      	uxth	r3, r3
 800d282:	4313      	orrs	r3, r2
 800d284:	b29a      	uxth	r2, r3
 800d286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d288:	801a      	strh	r2, [r3, #0]
 800d28a:	e046      	b.n	800d31a <USB_EPStartXfer+0x318>
 800d28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d290:	095b      	lsrs	r3, r3, #5
 800d292:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d29a:	f003 031f 	and.w	r3, r3, #31
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d104      	bne.n	800d2ac <USB_EPStartXfer+0x2aa>
 800d2a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d2a6:	3b01      	subs	r3, #1
 800d2a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ae:	881b      	ldrh	r3, [r3, #0]
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	029b      	lsls	r3, r3, #10
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	b29b      	uxth	r3, r3
 800d2c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2cc:	801a      	strh	r2, [r3, #0]
 800d2ce:	e024      	b.n	800d31a <USB_EPStartXfer+0x318>
 800d2d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	785b      	ldrb	r3, [r3, #1]
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d11c      	bne.n	800d31a <USB_EPStartXfer+0x318>
 800d2e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f4:	4413      	add	r3, r2
 800d2f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	00da      	lsls	r2, r3, #3
 800d306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d308:	4413      	add	r3, r2
 800d30a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d30e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d314:	b29a      	uxth	r2, r3
 800d316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d318:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d31a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d31e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	895b      	ldrh	r3, [r3, #10]
 800d326:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d32a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d32e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	6959      	ldr	r1, [r3, #20]
 800d336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d340:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d344:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d348:	6800      	ldr	r0, [r0, #0]
 800d34a:	f001 fb46 	bl	800e9da <USB_WritePMA>
            ep->xfer_buff += len;
 800d34e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	695a      	ldr	r2, [r3, #20]
 800d35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d35e:	441a      	add	r2, r3
 800d360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d36c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	6a1a      	ldr	r2, [r3, #32]
 800d378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d37c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	429a      	cmp	r2, r3
 800d386:	d90f      	bls.n	800d3a8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d38c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	6a1a      	ldr	r2, [r3, #32]
 800d394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d398:	1ad2      	subs	r2, r2, r3
 800d39a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d39e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	621a      	str	r2, [r3, #32]
 800d3a6:	e00e      	b.n	800d3c6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d3a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	6a1b      	ldr	r3, [r3, #32]
 800d3b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d3b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d3c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	785b      	ldrb	r3, [r3, #1]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d177      	bne.n	800d4c6 <USB_EPStartXfer+0x4c4>
 800d3d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	61bb      	str	r3, [r7, #24]
 800d3e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	61bb      	str	r3, [r7, #24]
 800d3fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	00da      	lsls	r2, r3, #3
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	4413      	add	r3, r2
 800d40c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d410:	617b      	str	r3, [r7, #20]
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	881b      	ldrh	r3, [r3, #0]
 800d416:	b29b      	uxth	r3, r3
 800d418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d41c:	b29a      	uxth	r2, r3
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	801a      	strh	r2, [r3, #0]
 800d422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d426:	2b00      	cmp	r3, #0
 800d428:	d10a      	bne.n	800d440 <USB_EPStartXfer+0x43e>
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	881b      	ldrh	r3, [r3, #0]
 800d42e:	b29b      	uxth	r3, r3
 800d430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d438:	b29a      	uxth	r2, r3
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	801a      	strh	r2, [r3, #0]
 800d43e:	e06d      	b.n	800d51c <USB_EPStartXfer+0x51a>
 800d440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d444:	2b3e      	cmp	r3, #62	@ 0x3e
 800d446:	d81c      	bhi.n	800d482 <USB_EPStartXfer+0x480>
 800d448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d44c:	085b      	lsrs	r3, r3, #1
 800d44e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d456:	f003 0301 	and.w	r3, r3, #1
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d004      	beq.n	800d468 <USB_EPStartXfer+0x466>
 800d45e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d462:	3301      	adds	r3, #1
 800d464:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	881b      	ldrh	r3, [r3, #0]
 800d46c:	b29a      	uxth	r2, r3
 800d46e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d472:	b29b      	uxth	r3, r3
 800d474:	029b      	lsls	r3, r3, #10
 800d476:	b29b      	uxth	r3, r3
 800d478:	4313      	orrs	r3, r2
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	801a      	strh	r2, [r3, #0]
 800d480:	e04c      	b.n	800d51c <USB_EPStartXfer+0x51a>
 800d482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d486:	095b      	lsrs	r3, r3, #5
 800d488:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d490:	f003 031f 	and.w	r3, r3, #31
 800d494:	2b00      	cmp	r3, #0
 800d496:	d104      	bne.n	800d4a2 <USB_EPStartXfer+0x4a0>
 800d498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d49c:	3b01      	subs	r3, #1
 800d49e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	881b      	ldrh	r3, [r3, #0]
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	029b      	lsls	r3, r3, #10
 800d4b0:	b29b      	uxth	r3, r3
 800d4b2:	4313      	orrs	r3, r2
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	801a      	strh	r2, [r3, #0]
 800d4c4:	e02a      	b.n	800d51c <USB_EPStartXfer+0x51a>
 800d4c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	785b      	ldrb	r3, [r3, #1]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d122      	bne.n	800d51c <USB_EPStartXfer+0x51a>
 800d4d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	623b      	str	r3, [r7, #32]
 800d4e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	6a3b      	ldr	r3, [r7, #32]
 800d4f6:	4413      	add	r3, r2
 800d4f8:	623b      	str	r3, [r7, #32]
 800d4fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	00da      	lsls	r2, r3, #3
 800d508:	6a3b      	ldr	r3, [r7, #32]
 800d50a:	4413      	add	r3, r2
 800d50c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d510:	61fb      	str	r3, [r7, #28]
 800d512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d516:	b29a      	uxth	r2, r3
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d51c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	891b      	ldrh	r3, [r3, #8]
 800d528:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d52c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	6959      	ldr	r1, [r3, #20]
 800d538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d542:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d546:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d54a:	6800      	ldr	r0, [r0, #0]
 800d54c:	f001 fa45 	bl	800e9da <USB_WritePMA>
 800d550:	e3ee      	b.n	800dd30 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	785b      	ldrb	r3, [r3, #1]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d177      	bne.n	800d652 <USB_EPStartXfer+0x650>
 800d562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d566:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d56e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d572:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	461a      	mov	r2, r3
 800d580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d582:	4413      	add	r3, r2
 800d584:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d58a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	00da      	lsls	r2, r3, #3
 800d594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d596:	4413      	add	r3, r2
 800d598:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d59c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d59e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5a0:	881b      	ldrh	r3, [r3, #0]
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5ac:	801a      	strh	r2, [r3, #0]
 800d5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d10a      	bne.n	800d5cc <USB_EPStartXfer+0x5ca>
 800d5b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5b8:	881b      	ldrh	r3, [r3, #0]
 800d5ba:	b29b      	uxth	r3, r3
 800d5bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5c4:	b29a      	uxth	r2, r3
 800d5c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5c8:	801a      	strh	r2, [r3, #0]
 800d5ca:	e06d      	b.n	800d6a8 <USB_EPStartXfer+0x6a6>
 800d5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5d0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d5d2:	d81c      	bhi.n	800d60e <USB_EPStartXfer+0x60c>
 800d5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5d8:	085b      	lsrs	r3, r3, #1
 800d5da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5e2:	f003 0301 	and.w	r3, r3, #1
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d004      	beq.n	800d5f4 <USB_EPStartXfer+0x5f2>
 800d5ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d5f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5f6:	881b      	ldrh	r3, [r3, #0]
 800d5f8:	b29a      	uxth	r2, r3
 800d5fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	029b      	lsls	r3, r3, #10
 800d602:	b29b      	uxth	r3, r3
 800d604:	4313      	orrs	r3, r2
 800d606:	b29a      	uxth	r2, r3
 800d608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d60a:	801a      	strh	r2, [r3, #0]
 800d60c:	e04c      	b.n	800d6a8 <USB_EPStartXfer+0x6a6>
 800d60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d612:	095b      	lsrs	r3, r3, #5
 800d614:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d61c:	f003 031f 	and.w	r3, r3, #31
 800d620:	2b00      	cmp	r3, #0
 800d622:	d104      	bne.n	800d62e <USB_EPStartXfer+0x62c>
 800d624:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d628:	3b01      	subs	r3, #1
 800d62a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d62e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d630:	881b      	ldrh	r3, [r3, #0]
 800d632:	b29a      	uxth	r2, r3
 800d634:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d638:	b29b      	uxth	r3, r3
 800d63a:	029b      	lsls	r3, r3, #10
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	4313      	orrs	r3, r2
 800d640:	b29b      	uxth	r3, r3
 800d642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d64e:	801a      	strh	r2, [r3, #0]
 800d650:	e02a      	b.n	800d6a8 <USB_EPStartXfer+0x6a6>
 800d652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	785b      	ldrb	r3, [r3, #1]
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d122      	bne.n	800d6a8 <USB_EPStartXfer+0x6a6>
 800d662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d66e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	461a      	mov	r2, r3
 800d680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d682:	4413      	add	r3, r2
 800d684:	653b      	str	r3, [r7, #80]	@ 0x50
 800d686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d68a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	00da      	lsls	r2, r3, #3
 800d694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d696:	4413      	add	r3, r2
 800d698:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d69c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d6a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	891b      	ldrh	r3, [r3, #8]
 800d6b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d6b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	6959      	ldr	r1, [r3, #20]
 800d6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d6ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d6d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d6d6:	6800      	ldr	r0, [r0, #0]
 800d6d8:	f001 f97f 	bl	800e9da <USB_WritePMA>
            ep->xfer_buff += len;
 800d6dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	695a      	ldr	r2, [r3, #20]
 800d6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6ec:	441a      	add	r2, r3
 800d6ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d6fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	6a1a      	ldr	r2, [r3, #32]
 800d706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d70a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	691b      	ldr	r3, [r3, #16]
 800d712:	429a      	cmp	r2, r3
 800d714:	d90f      	bls.n	800d736 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d71a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	6a1a      	ldr	r2, [r3, #32]
 800d722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d726:	1ad2      	subs	r2, r2, r3
 800d728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d72c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	621a      	str	r2, [r3, #32]
 800d734:	e00e      	b.n	800d754 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d73a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	6a1b      	ldr	r3, [r3, #32]
 800d742:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d74a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	2200      	movs	r2, #0
 800d752:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	785b      	ldrb	r3, [r3, #1]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d177      	bne.n	800d860 <USB_EPStartXfer+0x85e>
 800d770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d774:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d77c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	461a      	mov	r2, r3
 800d78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d790:	4413      	add	r3, r2
 800d792:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	00da      	lsls	r2, r3, #3
 800d7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a4:	4413      	add	r3, r2
 800d7a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d7aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7ae:	881b      	ldrh	r3, [r3, #0]
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d7b6:	b29a      	uxth	r2, r3
 800d7b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7ba:	801a      	strh	r2, [r3, #0]
 800d7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d10a      	bne.n	800d7da <USB_EPStartXfer+0x7d8>
 800d7c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7c6:	881b      	ldrh	r3, [r3, #0]
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7d2:	b29a      	uxth	r2, r3
 800d7d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7d6:	801a      	strh	r2, [r3, #0]
 800d7d8:	e067      	b.n	800d8aa <USB_EPStartXfer+0x8a8>
 800d7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7de:	2b3e      	cmp	r3, #62	@ 0x3e
 800d7e0:	d81c      	bhi.n	800d81c <USB_EPStartXfer+0x81a>
 800d7e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7e6:	085b      	lsrs	r3, r3, #1
 800d7e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7f0:	f003 0301 	and.w	r3, r3, #1
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d004      	beq.n	800d802 <USB_EPStartXfer+0x800>
 800d7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d804:	881b      	ldrh	r3, [r3, #0]
 800d806:	b29a      	uxth	r2, r3
 800d808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	029b      	lsls	r3, r3, #10
 800d810:	b29b      	uxth	r3, r3
 800d812:	4313      	orrs	r3, r2
 800d814:	b29a      	uxth	r2, r3
 800d816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d818:	801a      	strh	r2, [r3, #0]
 800d81a:	e046      	b.n	800d8aa <USB_EPStartXfer+0x8a8>
 800d81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d820:	095b      	lsrs	r3, r3, #5
 800d822:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d82a:	f003 031f 	and.w	r3, r3, #31
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d104      	bne.n	800d83c <USB_EPStartXfer+0x83a>
 800d832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d836:	3b01      	subs	r3, #1
 800d838:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d83c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d83e:	881b      	ldrh	r3, [r3, #0]
 800d840:	b29a      	uxth	r2, r3
 800d842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d846:	b29b      	uxth	r3, r3
 800d848:	029b      	lsls	r3, r3, #10
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	4313      	orrs	r3, r2
 800d84e:	b29b      	uxth	r3, r3
 800d850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d858:	b29a      	uxth	r2, r3
 800d85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d85c:	801a      	strh	r2, [r3, #0]
 800d85e:	e024      	b.n	800d8aa <USB_EPStartXfer+0x8a8>
 800d860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	785b      	ldrb	r3, [r3, #1]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d11c      	bne.n	800d8aa <USB_EPStartXfer+0x8a8>
 800d870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d87e:	b29b      	uxth	r3, r3
 800d880:	461a      	mov	r2, r3
 800d882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d884:	4413      	add	r3, r2
 800d886:	643b      	str	r3, [r7, #64]	@ 0x40
 800d888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d88c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	00da      	lsls	r2, r3, #3
 800d896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d898:	4413      	add	r3, r2
 800d89a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8a4:	b29a      	uxth	r2, r3
 800d8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d8aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	895b      	ldrh	r3, [r3, #10]
 800d8b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d8ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	6959      	ldr	r1, [r3, #20]
 800d8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d8d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d8d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d8d8:	6800      	ldr	r0, [r0, #0]
 800d8da:	f001 f87e 	bl	800e9da <USB_WritePMA>
 800d8de:	e227      	b.n	800dd30 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d8e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	6a1b      	ldr	r3, [r3, #32]
 800d8ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d8f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	009b      	lsls	r3, r3, #2
 800d908:	4413      	add	r3, r2
 800d90a:	881b      	ldrh	r3, [r3, #0]
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d916:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d91a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d91e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	009b      	lsls	r3, r3, #2
 800d932:	441a      	add	r2, r3
 800d934:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d938:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d93c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d940:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d948:	b29b      	uxth	r3, r3
 800d94a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d94c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d950:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d95c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d966:	b29b      	uxth	r3, r3
 800d968:	461a      	mov	r2, r3
 800d96a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d96c:	4413      	add	r3, r2
 800d96e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	00da      	lsls	r2, r3, #3
 800d97e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d980:	4413      	add	r3, r2
 800d982:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d986:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d990:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	891b      	ldrh	r3, [r3, #8]
 800d99e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d9a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	6959      	ldr	r1, [r3, #20]
 800d9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d9b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d9bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d9c0:	6800      	ldr	r0, [r0, #0]
 800d9c2:	f001 f80a 	bl	800e9da <USB_WritePMA>
 800d9c6:	e1b3      	b.n	800dd30 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d9c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	6a1a      	ldr	r2, [r3, #32]
 800d9d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9d8:	1ad2      	subs	r2, r2, r3
 800d9da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d9e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	4413      	add	r3, r2
 800da00:	881b      	ldrh	r3, [r3, #0]
 800da02:	b29b      	uxth	r3, r3
 800da04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f000 80c6 	beq.w	800db9a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800da0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	673b      	str	r3, [r7, #112]	@ 0x70
 800da1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	785b      	ldrb	r3, [r3, #1]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d177      	bne.n	800db1a <USB_EPStartXfer+0xb18>
 800da2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	66bb      	str	r3, [r7, #104]	@ 0x68
 800da36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da44:	b29b      	uxth	r3, r3
 800da46:	461a      	mov	r2, r3
 800da48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800da4a:	4413      	add	r3, r2
 800da4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800da4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	00da      	lsls	r2, r3, #3
 800da5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800da5e:	4413      	add	r3, r2
 800da60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800da64:	667b      	str	r3, [r7, #100]	@ 0x64
 800da66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da68:	881b      	ldrh	r3, [r3, #0]
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da70:	b29a      	uxth	r2, r3
 800da72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da74:	801a      	strh	r2, [r3, #0]
 800da76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d10a      	bne.n	800da94 <USB_EPStartXfer+0xa92>
 800da7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da80:	881b      	ldrh	r3, [r3, #0]
 800da82:	b29b      	uxth	r3, r3
 800da84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da90:	801a      	strh	r2, [r3, #0]
 800da92:	e067      	b.n	800db64 <USB_EPStartXfer+0xb62>
 800da94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da98:	2b3e      	cmp	r3, #62	@ 0x3e
 800da9a:	d81c      	bhi.n	800dad6 <USB_EPStartXfer+0xad4>
 800da9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800daa0:	085b      	lsrs	r3, r3, #1
 800daa2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800daa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800daaa:	f003 0301 	and.w	r3, r3, #1
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d004      	beq.n	800dabc <USB_EPStartXfer+0xaba>
 800dab2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800dab6:	3301      	adds	r3, #1
 800dab8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dabc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dabe:	881b      	ldrh	r3, [r3, #0]
 800dac0:	b29a      	uxth	r2, r3
 800dac2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	029b      	lsls	r3, r3, #10
 800daca:	b29b      	uxth	r3, r3
 800dacc:	4313      	orrs	r3, r2
 800dace:	b29a      	uxth	r2, r3
 800dad0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dad2:	801a      	strh	r2, [r3, #0]
 800dad4:	e046      	b.n	800db64 <USB_EPStartXfer+0xb62>
 800dad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dada:	095b      	lsrs	r3, r3, #5
 800dadc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dae4:	f003 031f 	and.w	r3, r3, #31
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d104      	bne.n	800daf6 <USB_EPStartXfer+0xaf4>
 800daec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800daf0:	3b01      	subs	r3, #1
 800daf2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800daf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800daf8:	881b      	ldrh	r3, [r3, #0]
 800dafa:	b29a      	uxth	r2, r3
 800dafc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800db00:	b29b      	uxth	r3, r3
 800db02:	029b      	lsls	r3, r3, #10
 800db04:	b29b      	uxth	r3, r3
 800db06:	4313      	orrs	r3, r2
 800db08:	b29b      	uxth	r3, r3
 800db0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db12:	b29a      	uxth	r2, r3
 800db14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db16:	801a      	strh	r2, [r3, #0]
 800db18:	e024      	b.n	800db64 <USB_EPStartXfer+0xb62>
 800db1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	785b      	ldrb	r3, [r3, #1]
 800db26:	2b01      	cmp	r3, #1
 800db28:	d11c      	bne.n	800db64 <USB_EPStartXfer+0xb62>
 800db2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db38:	b29b      	uxth	r3, r3
 800db3a:	461a      	mov	r2, r3
 800db3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800db3e:	4413      	add	r3, r2
 800db40:	673b      	str	r3, [r7, #112]	@ 0x70
 800db42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	00da      	lsls	r2, r3, #3
 800db50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800db52:	4413      	add	r3, r2
 800db54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800db58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800db5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db5e:	b29a      	uxth	r2, r3
 800db60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800db64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	895b      	ldrh	r3, [r3, #10]
 800db70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800db74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	6959      	ldr	r1, [r3, #20]
 800db80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db84:	b29b      	uxth	r3, r3
 800db86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800db8a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800db8e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800db92:	6800      	ldr	r0, [r0, #0]
 800db94:	f000 ff21 	bl	800e9da <USB_WritePMA>
 800db98:	e0ca      	b.n	800dd30 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800db9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	785b      	ldrb	r3, [r3, #1]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d177      	bne.n	800dc9a <USB_EPStartXfer+0xc98>
 800dbaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dbb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dbca:	4413      	add	r3, r2
 800dbcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dbce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	00da      	lsls	r2, r3, #3
 800dbdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dbde:	4413      	add	r3, r2
 800dbe0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dbe4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dbe6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbe8:	881b      	ldrh	r3, [r3, #0]
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dbf0:	b29a      	uxth	r2, r3
 800dbf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbf4:	801a      	strh	r2, [r3, #0]
 800dbf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d10a      	bne.n	800dc14 <USB_EPStartXfer+0xc12>
 800dbfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc00:	881b      	ldrh	r3, [r3, #0]
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc0c:	b29a      	uxth	r2, r3
 800dc0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc10:	801a      	strh	r2, [r3, #0]
 800dc12:	e073      	b.n	800dcfc <USB_EPStartXfer+0xcfa>
 800dc14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc18:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc1a:	d81c      	bhi.n	800dc56 <USB_EPStartXfer+0xc54>
 800dc1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc20:	085b      	lsrs	r3, r3, #1
 800dc22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dc26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc2a:	f003 0301 	and.w	r3, r3, #1
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d004      	beq.n	800dc3c <USB_EPStartXfer+0xc3a>
 800dc32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dc36:	3301      	adds	r3, #1
 800dc38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dc3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc3e:	881b      	ldrh	r3, [r3, #0]
 800dc40:	b29a      	uxth	r2, r3
 800dc42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	029b      	lsls	r3, r3, #10
 800dc4a:	b29b      	uxth	r3, r3
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	b29a      	uxth	r2, r3
 800dc50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc52:	801a      	strh	r2, [r3, #0]
 800dc54:	e052      	b.n	800dcfc <USB_EPStartXfer+0xcfa>
 800dc56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc5a:	095b      	lsrs	r3, r3, #5
 800dc5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc64:	f003 031f 	and.w	r3, r3, #31
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d104      	bne.n	800dc76 <USB_EPStartXfer+0xc74>
 800dc6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dc70:	3b01      	subs	r3, #1
 800dc72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dc76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc78:	881b      	ldrh	r3, [r3, #0]
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	029b      	lsls	r3, r3, #10
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	4313      	orrs	r3, r2
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc92:	b29a      	uxth	r2, r3
 800dc94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc96:	801a      	strh	r2, [r3, #0]
 800dc98:	e030      	b.n	800dcfc <USB_EPStartXfer+0xcfa>
 800dc9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	785b      	ldrb	r3, [r3, #1]
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d128      	bne.n	800dcfc <USB_EPStartXfer+0xcfa>
 800dcaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dcb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	461a      	mov	r2, r3
 800dcca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dcce:	4413      	add	r3, r2
 800dcd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dcd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	00da      	lsls	r2, r3, #3
 800dce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dce6:	4413      	add	r3, r2
 800dce8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dcec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dcf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcf4:	b29a      	uxth	r2, r3
 800dcf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dcfa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800dcfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	891b      	ldrh	r3, [r3, #8]
 800dd08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dd0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	6959      	ldr	r1, [r3, #20]
 800dd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dd22:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dd26:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dd2a:	6800      	ldr	r0, [r0, #0]
 800dd2c:	f000 fe55 	bl	800e9da <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800dd30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	009b      	lsls	r3, r3, #2
 800dd48:	4413      	add	r3, r2
 800dd4a:	881b      	ldrh	r3, [r3, #0]
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd56:	817b      	strh	r3, [r7, #10]
 800dd58:	897b      	ldrh	r3, [r7, #10]
 800dd5a:	f083 0310 	eor.w	r3, r3, #16
 800dd5e:	817b      	strh	r3, [r7, #10]
 800dd60:	897b      	ldrh	r3, [r7, #10]
 800dd62:	f083 0320 	eor.w	r3, r3, #32
 800dd66:	817b      	strh	r3, [r7, #10]
 800dd68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd70:	681a      	ldr	r2, [r3, #0]
 800dd72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	441a      	add	r2, r3
 800dd82:	897b      	ldrh	r3, [r7, #10]
 800dd84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	8013      	strh	r3, [r2, #0]
 800dd98:	f000 bcdf 	b.w	800e75a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800dd9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dda0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	7b1b      	ldrb	r3, [r3, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	f040 80bc 	bne.w	800df26 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ddae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	699a      	ldr	r2, [r3, #24]
 800ddba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	691b      	ldr	r3, [r3, #16]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d917      	bls.n	800ddfa <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800ddca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	691b      	ldr	r3, [r3, #16]
 800ddd6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800ddda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	699a      	ldr	r2, [r3, #24]
 800dde6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddea:	1ad2      	subs	r2, r2, r3
 800ddec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	619a      	str	r2, [r3, #24]
 800ddf8:	e00e      	b.n	800de18 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800ddfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	699b      	ldr	r3, [r3, #24]
 800de06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800de0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	2200      	movs	r2, #0
 800de16:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800de18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800de26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de34:	b29b      	uxth	r3, r3
 800de36:	461a      	mov	r2, r3
 800de38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800de3c:	4413      	add	r3, r2
 800de3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800de42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	00da      	lsls	r2, r3, #3
 800de50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800de54:	4413      	add	r3, r2
 800de56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800de5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800de5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de62:	881b      	ldrh	r3, [r3, #0]
 800de64:	b29b      	uxth	r3, r3
 800de66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de70:	801a      	strh	r2, [r3, #0]
 800de72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de76:	2b00      	cmp	r3, #0
 800de78:	d10d      	bne.n	800de96 <USB_EPStartXfer+0xe94>
 800de7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de7e:	881b      	ldrh	r3, [r3, #0]
 800de80:	b29b      	uxth	r3, r3
 800de82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de90:	801a      	strh	r2, [r3, #0]
 800de92:	f000 bc28 	b.w	800e6e6 <USB_EPStartXfer+0x16e4>
 800de96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de9a:	2b3e      	cmp	r3, #62	@ 0x3e
 800de9c:	d81f      	bhi.n	800dede <USB_EPStartXfer+0xedc>
 800de9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dea2:	085b      	lsrs	r3, r3, #1
 800dea4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deac:	f003 0301 	and.w	r3, r3, #1
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d004      	beq.n	800debe <USB_EPStartXfer+0xebc>
 800deb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800deb8:	3301      	adds	r3, #1
 800deba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800debe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dec2:	881b      	ldrh	r3, [r3, #0]
 800dec4:	b29a      	uxth	r2, r3
 800dec6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800deca:	b29b      	uxth	r3, r3
 800decc:	029b      	lsls	r3, r3, #10
 800dece:	b29b      	uxth	r3, r3
 800ded0:	4313      	orrs	r3, r2
 800ded2:	b29a      	uxth	r2, r3
 800ded4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ded8:	801a      	strh	r2, [r3, #0]
 800deda:	f000 bc04 	b.w	800e6e6 <USB_EPStartXfer+0x16e4>
 800dede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dee2:	095b      	lsrs	r3, r3, #5
 800dee4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deec:	f003 031f 	and.w	r3, r3, #31
 800def0:	2b00      	cmp	r3, #0
 800def2:	d104      	bne.n	800defe <USB_EPStartXfer+0xefc>
 800def4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800def8:	3b01      	subs	r3, #1
 800defa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800defe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df02:	881b      	ldrh	r3, [r3, #0]
 800df04:	b29a      	uxth	r2, r3
 800df06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	029b      	lsls	r3, r3, #10
 800df0e:	b29b      	uxth	r3, r3
 800df10:	4313      	orrs	r3, r2
 800df12:	b29b      	uxth	r3, r3
 800df14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df1c:	b29a      	uxth	r2, r3
 800df1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df22:	801a      	strh	r2, [r3, #0]
 800df24:	e3df      	b.n	800e6e6 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800df26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	78db      	ldrb	r3, [r3, #3]
 800df32:	2b02      	cmp	r3, #2
 800df34:	f040 8218 	bne.w	800e368 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800df38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	785b      	ldrb	r3, [r3, #1]
 800df44:	2b00      	cmp	r3, #0
 800df46:	f040 809d 	bne.w	800e084 <USB_EPStartXfer+0x1082>
 800df4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800df58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df66:	b29b      	uxth	r3, r3
 800df68:	461a      	mov	r2, r3
 800df6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df6e:	4413      	add	r3, r2
 800df70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800df74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	00da      	lsls	r2, r3, #3
 800df82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df86:	4413      	add	r3, r2
 800df88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800df8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800df90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df94:	881b      	ldrh	r3, [r3, #0]
 800df96:	b29b      	uxth	r3, r3
 800df98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df9c:	b29a      	uxth	r2, r3
 800df9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dfa2:	801a      	strh	r2, [r3, #0]
 800dfa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	691b      	ldr	r3, [r3, #16]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d10c      	bne.n	800dfce <USB_EPStartXfer+0xfcc>
 800dfb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dfb8:	881b      	ldrh	r3, [r3, #0]
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dfca:	801a      	strh	r2, [r3, #0]
 800dfcc:	e08f      	b.n	800e0ee <USB_EPStartXfer+0x10ec>
 800dfce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	691b      	ldr	r3, [r3, #16]
 800dfda:	2b3e      	cmp	r3, #62	@ 0x3e
 800dfdc:	d826      	bhi.n	800e02c <USB_EPStartXfer+0x102a>
 800dfde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	691b      	ldr	r3, [r3, #16]
 800dfea:	085b      	lsrs	r3, r3, #1
 800dfec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	691b      	ldr	r3, [r3, #16]
 800dffc:	f003 0301 	and.w	r3, r3, #1
 800e000:	2b00      	cmp	r3, #0
 800e002:	d004      	beq.n	800e00e <USB_EPStartXfer+0x100c>
 800e004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e008:	3301      	adds	r3, #1
 800e00a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e00e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e012:	881b      	ldrh	r3, [r3, #0]
 800e014:	b29a      	uxth	r2, r3
 800e016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	029b      	lsls	r3, r3, #10
 800e01e:	b29b      	uxth	r3, r3
 800e020:	4313      	orrs	r3, r2
 800e022:	b29a      	uxth	r2, r3
 800e024:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e028:	801a      	strh	r2, [r3, #0]
 800e02a:	e060      	b.n	800e0ee <USB_EPStartXfer+0x10ec>
 800e02c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	691b      	ldr	r3, [r3, #16]
 800e038:	095b      	lsrs	r3, r3, #5
 800e03a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e03e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	691b      	ldr	r3, [r3, #16]
 800e04a:	f003 031f 	and.w	r3, r3, #31
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d104      	bne.n	800e05c <USB_EPStartXfer+0x105a>
 800e052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e056:	3b01      	subs	r3, #1
 800e058:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e05c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e060:	881b      	ldrh	r3, [r3, #0]
 800e062:	b29a      	uxth	r2, r3
 800e064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e068:	b29b      	uxth	r3, r3
 800e06a:	029b      	lsls	r3, r3, #10
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	4313      	orrs	r3, r2
 800e070:	b29b      	uxth	r3, r3
 800e072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e07a:	b29a      	uxth	r2, r3
 800e07c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e080:	801a      	strh	r2, [r3, #0]
 800e082:	e034      	b.n	800e0ee <USB_EPStartXfer+0x10ec>
 800e084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	785b      	ldrb	r3, [r3, #1]
 800e090:	2b01      	cmp	r3, #1
 800e092:	d12c      	bne.n	800e0ee <USB_EPStartXfer+0x10ec>
 800e094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e098:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e0a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e0b8:	4413      	add	r3, r2
 800e0ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e0be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	00da      	lsls	r2, r3, #3
 800e0cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e0d0:	4413      	add	r3, r2
 800e0d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e0d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e0da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	691b      	ldr	r3, [r3, #16]
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e0ec:	801a      	strh	r2, [r3, #0]
 800e0ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e0fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	785b      	ldrb	r3, [r3, #1]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	f040 809d 	bne.w	800e248 <USB_EPStartXfer+0x1246>
 800e10e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e11c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	461a      	mov	r2, r3
 800e12e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e132:	4413      	add	r3, r2
 800e134:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e13c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	00da      	lsls	r2, r3, #3
 800e146:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e14a:	4413      	add	r3, r2
 800e14c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e150:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e154:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e158:	881b      	ldrh	r3, [r3, #0]
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e160:	b29a      	uxth	r2, r3
 800e162:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e166:	801a      	strh	r2, [r3, #0]
 800e168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e16c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	691b      	ldr	r3, [r3, #16]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d10c      	bne.n	800e192 <USB_EPStartXfer+0x1190>
 800e178:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e17c:	881b      	ldrh	r3, [r3, #0]
 800e17e:	b29b      	uxth	r3, r3
 800e180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e188:	b29a      	uxth	r2, r3
 800e18a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e18e:	801a      	strh	r2, [r3, #0]
 800e190:	e088      	b.n	800e2a4 <USB_EPStartXfer+0x12a2>
 800e192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	691b      	ldr	r3, [r3, #16]
 800e19e:	2b3e      	cmp	r3, #62	@ 0x3e
 800e1a0:	d826      	bhi.n	800e1f0 <USB_EPStartXfer+0x11ee>
 800e1a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	691b      	ldr	r3, [r3, #16]
 800e1ae:	085b      	lsrs	r3, r3, #1
 800e1b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e1b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	691b      	ldr	r3, [r3, #16]
 800e1c0:	f003 0301 	and.w	r3, r3, #1
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d004      	beq.n	800e1d2 <USB_EPStartXfer+0x11d0>
 800e1c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e1d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e1d6:	881b      	ldrh	r3, [r3, #0]
 800e1d8:	b29a      	uxth	r2, r3
 800e1da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	029b      	lsls	r3, r3, #10
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	b29a      	uxth	r2, r3
 800e1e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e1ec:	801a      	strh	r2, [r3, #0]
 800e1ee:	e059      	b.n	800e2a4 <USB_EPStartXfer+0x12a2>
 800e1f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	691b      	ldr	r3, [r3, #16]
 800e1fc:	095b      	lsrs	r3, r3, #5
 800e1fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	691b      	ldr	r3, [r3, #16]
 800e20e:	f003 031f 	and.w	r3, r3, #31
 800e212:	2b00      	cmp	r3, #0
 800e214:	d104      	bne.n	800e220 <USB_EPStartXfer+0x121e>
 800e216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e21a:	3b01      	subs	r3, #1
 800e21c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e220:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e224:	881b      	ldrh	r3, [r3, #0]
 800e226:	b29a      	uxth	r2, r3
 800e228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	029b      	lsls	r3, r3, #10
 800e230:	b29b      	uxth	r3, r3
 800e232:	4313      	orrs	r3, r2
 800e234:	b29b      	uxth	r3, r3
 800e236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e23a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e23e:	b29a      	uxth	r2, r3
 800e240:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e244:	801a      	strh	r2, [r3, #0]
 800e246:	e02d      	b.n	800e2a4 <USB_EPStartXfer+0x12a2>
 800e248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e24c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	785b      	ldrb	r3, [r3, #1]
 800e254:	2b01      	cmp	r3, #1
 800e256:	d125      	bne.n	800e2a4 <USB_EPStartXfer+0x12a2>
 800e258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e25c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e266:	b29b      	uxth	r3, r3
 800e268:	461a      	mov	r2, r3
 800e26a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e26e:	4413      	add	r3, r2
 800e270:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	00da      	lsls	r2, r3, #3
 800e282:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e286:	4413      	add	r3, r2
 800e288:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e28c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	691b      	ldr	r3, [r3, #16]
 800e29c:	b29a      	uxth	r2, r3
 800e29e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e2a2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e2a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	69db      	ldr	r3, [r3, #28]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	f000 8218 	beq.w	800e6e6 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	009b      	lsls	r3, r3, #2
 800e2ce:	4413      	add	r3, r2
 800e2d0:	881b      	ldrh	r3, [r3, #0]
 800e2d2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e2d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e2da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d005      	beq.n	800e2ee <USB_EPStartXfer+0x12ec>
 800e2e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e2e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10d      	bne.n	800e30a <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e2ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e2f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f040 81f5 	bne.w	800e6e6 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e2fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e304:	2b00      	cmp	r3, #0
 800e306:	f040 81ee 	bne.w	800e6e6 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e30a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e30e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	4413      	add	r3, r2
 800e324:	881b      	ldrh	r3, [r3, #0]
 800e326:	b29b      	uxth	r3, r3
 800e328:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e32c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e330:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800e334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e338:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	441a      	add	r2, r3
 800e34e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e35a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e35e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e362:	b29b      	uxth	r3, r3
 800e364:	8013      	strh	r3, [r2, #0]
 800e366:	e1be      	b.n	800e6e6 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e36c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	78db      	ldrb	r3, [r3, #3]
 800e374:	2b01      	cmp	r3, #1
 800e376:	f040 81b4 	bne.w	800e6e2 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e37e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	699a      	ldr	r2, [r3, #24]
 800e386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e38a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	691b      	ldr	r3, [r3, #16]
 800e392:	429a      	cmp	r2, r3
 800e394:	d917      	bls.n	800e3c6 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800e396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e39a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	691b      	ldr	r3, [r3, #16]
 800e3a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800e3a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	699a      	ldr	r2, [r3, #24]
 800e3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3b6:	1ad2      	subs	r2, r2, r3
 800e3b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	619a      	str	r2, [r3, #24]
 800e3c4:	e00e      	b.n	800e3e4 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800e3c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	699b      	ldr	r3, [r3, #24]
 800e3d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800e3d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e3e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	785b      	ldrb	r3, [r3, #1]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	f040 8085 	bne.w	800e500 <USB_EPStartXfer+0x14fe>
 800e3f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e408:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e412:	b29b      	uxth	r3, r3
 800e414:	461a      	mov	r2, r3
 800e416:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e41a:	4413      	add	r3, r2
 800e41c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	00da      	lsls	r2, r3, #3
 800e42e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e432:	4413      	add	r3, r2
 800e434:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e438:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e43c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e440:	881b      	ldrh	r3, [r3, #0]
 800e442:	b29b      	uxth	r3, r3
 800e444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e448:	b29a      	uxth	r2, r3
 800e44a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e44e:	801a      	strh	r2, [r3, #0]
 800e450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e454:	2b00      	cmp	r3, #0
 800e456:	d10c      	bne.n	800e472 <USB_EPStartXfer+0x1470>
 800e458:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e45c:	881b      	ldrh	r3, [r3, #0]
 800e45e:	b29b      	uxth	r3, r3
 800e460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e468:	b29a      	uxth	r2, r3
 800e46a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e46e:	801a      	strh	r2, [r3, #0]
 800e470:	e077      	b.n	800e562 <USB_EPStartXfer+0x1560>
 800e472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e476:	2b3e      	cmp	r3, #62	@ 0x3e
 800e478:	d81e      	bhi.n	800e4b8 <USB_EPStartXfer+0x14b6>
 800e47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e47e:	085b      	lsrs	r3, r3, #1
 800e480:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e488:	f003 0301 	and.w	r3, r3, #1
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d004      	beq.n	800e49a <USB_EPStartXfer+0x1498>
 800e490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e494:	3301      	adds	r3, #1
 800e496:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e49a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e49e:	881b      	ldrh	r3, [r3, #0]
 800e4a0:	b29a      	uxth	r2, r3
 800e4a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	029b      	lsls	r3, r3, #10
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	4313      	orrs	r3, r2
 800e4ae:	b29a      	uxth	r2, r3
 800e4b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e4b4:	801a      	strh	r2, [r3, #0]
 800e4b6:	e054      	b.n	800e562 <USB_EPStartXfer+0x1560>
 800e4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4bc:	095b      	lsrs	r3, r3, #5
 800e4be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4c6:	f003 031f 	and.w	r3, r3, #31
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d104      	bne.n	800e4d8 <USB_EPStartXfer+0x14d6>
 800e4ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e4d2:	3b01      	subs	r3, #1
 800e4d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e4d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e4dc:	881b      	ldrh	r3, [r3, #0]
 800e4de:	b29a      	uxth	r2, r3
 800e4e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	029b      	lsls	r3, r3, #10
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e4f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e4fc:	801a      	strh	r2, [r3, #0]
 800e4fe:	e030      	b.n	800e562 <USB_EPStartXfer+0x1560>
 800e500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	785b      	ldrb	r3, [r3, #1]
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d128      	bne.n	800e562 <USB_EPStartXfer+0x1560>
 800e510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e514:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e51e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e522:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	461a      	mov	r2, r3
 800e530:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e534:	4413      	add	r3, r2
 800e536:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e53a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e53e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	00da      	lsls	r2, r3, #3
 800e548:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e54c:	4413      	add	r3, r2
 800e54e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e552:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e55a:	b29a      	uxth	r2, r3
 800e55c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e560:	801a      	strh	r2, [r3, #0]
 800e562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e566:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	785b      	ldrb	r3, [r3, #1]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f040 8085 	bne.w	800e68c <USB_EPStartXfer+0x168a>
 800e582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e586:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e5a6:	4413      	add	r3, r2
 800e5a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e5ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	00da      	lsls	r2, r3, #3
 800e5ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e5be:	4413      	add	r3, r2
 800e5c0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e5c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e5c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e5cc:	881b      	ldrh	r3, [r3, #0]
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e5da:	801a      	strh	r2, [r3, #0]
 800e5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d10c      	bne.n	800e5fe <USB_EPStartXfer+0x15fc>
 800e5e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e5e8:	881b      	ldrh	r3, [r3, #0]
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5f4:	b29a      	uxth	r2, r3
 800e5f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e5fa:	801a      	strh	r2, [r3, #0]
 800e5fc:	e073      	b.n	800e6e6 <USB_EPStartXfer+0x16e4>
 800e5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e602:	2b3e      	cmp	r3, #62	@ 0x3e
 800e604:	d81e      	bhi.n	800e644 <USB_EPStartXfer+0x1642>
 800e606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e60a:	085b      	lsrs	r3, r3, #1
 800e60c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e614:	f003 0301 	and.w	r3, r3, #1
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d004      	beq.n	800e626 <USB_EPStartXfer+0x1624>
 800e61c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e620:	3301      	adds	r3, #1
 800e622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e626:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e62a:	881b      	ldrh	r3, [r3, #0]
 800e62c:	b29a      	uxth	r2, r3
 800e62e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e632:	b29b      	uxth	r3, r3
 800e634:	029b      	lsls	r3, r3, #10
 800e636:	b29b      	uxth	r3, r3
 800e638:	4313      	orrs	r3, r2
 800e63a:	b29a      	uxth	r2, r3
 800e63c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e640:	801a      	strh	r2, [r3, #0]
 800e642:	e050      	b.n	800e6e6 <USB_EPStartXfer+0x16e4>
 800e644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e648:	095b      	lsrs	r3, r3, #5
 800e64a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e652:	f003 031f 	and.w	r3, r3, #31
 800e656:	2b00      	cmp	r3, #0
 800e658:	d104      	bne.n	800e664 <USB_EPStartXfer+0x1662>
 800e65a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e65e:	3b01      	subs	r3, #1
 800e660:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e664:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e668:	881b      	ldrh	r3, [r3, #0]
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e670:	b29b      	uxth	r3, r3
 800e672:	029b      	lsls	r3, r3, #10
 800e674:	b29b      	uxth	r3, r3
 800e676:	4313      	orrs	r3, r2
 800e678:	b29b      	uxth	r3, r3
 800e67a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e67e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e682:	b29a      	uxth	r2, r3
 800e684:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e688:	801a      	strh	r2, [r3, #0]
 800e68a:	e02c      	b.n	800e6e6 <USB_EPStartXfer+0x16e4>
 800e68c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	785b      	ldrb	r3, [r3, #1]
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d124      	bne.n	800e6e6 <USB_EPStartXfer+0x16e4>
 800e69c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e6b2:	4413      	add	r3, r2
 800e6b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e6b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	00da      	lsls	r2, r3, #3
 800e6c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e6ca:	4413      	add	r3, r2
 800e6cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e6d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e6de:	801a      	strh	r2, [r3, #0]
 800e6e0:	e001      	b.n	800e6e6 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	e03a      	b.n	800e75c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e6e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	4413      	add	r3, r2
 800e700:	881b      	ldrh	r3, [r3, #0]
 800e702:	b29b      	uxth	r3, r3
 800e704:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e70c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e710:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e714:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e718:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e71c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e720:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e724:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e72c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	009b      	lsls	r3, r3, #2
 800e740:	441a      	add	r2, r3
 800e742:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e74a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e74e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e756:	b29b      	uxth	r3, r3
 800e758:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e75a:	2300      	movs	r3, #0
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e766:	b480      	push	{r7}
 800e768:	b085      	sub	sp, #20
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
 800e76e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	785b      	ldrb	r3, [r3, #1]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d020      	beq.n	800e7ba <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	009b      	lsls	r3, r3, #2
 800e780:	4413      	add	r3, r2
 800e782:	881b      	ldrh	r3, [r3, #0]
 800e784:	b29b      	uxth	r3, r3
 800e786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e78a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e78e:	81bb      	strh	r3, [r7, #12]
 800e790:	89bb      	ldrh	r3, [r7, #12]
 800e792:	f083 0310 	eor.w	r3, r3, #16
 800e796:	81bb      	strh	r3, [r7, #12]
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	009b      	lsls	r3, r3, #2
 800e7a0:	441a      	add	r2, r3
 800e7a2:	89bb      	ldrh	r3, [r7, #12]
 800e7a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e7a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e7ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e7b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	8013      	strh	r3, [r2, #0]
 800e7b8:	e01f      	b.n	800e7fa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e7ba:	687a      	ldr	r2, [r7, #4]
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	009b      	lsls	r3, r3, #2
 800e7c2:	4413      	add	r3, r2
 800e7c4:	881b      	ldrh	r3, [r3, #0]
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e7cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7d0:	81fb      	strh	r3, [r7, #14]
 800e7d2:	89fb      	ldrh	r3, [r7, #14]
 800e7d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e7d8:	81fb      	strh	r3, [r7, #14]
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	441a      	add	r2, r3
 800e7e4:	89fb      	ldrh	r3, [r7, #14]
 800e7e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e7ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e7ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e7f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7f6:	b29b      	uxth	r3, r3
 800e7f8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e7fa:	2300      	movs	r3, #0
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3714      	adds	r7, #20
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e808:	b480      	push	{r7}
 800e80a:	b087      	sub	sp, #28
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	7b1b      	ldrb	r3, [r3, #12]
 800e816:	2b00      	cmp	r3, #0
 800e818:	f040 809d 	bne.w	800e956 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	785b      	ldrb	r3, [r3, #1]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d04c      	beq.n	800e8be <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	4413      	add	r3, r2
 800e82e:	881b      	ldrh	r3, [r3, #0]
 800e830:	823b      	strh	r3, [r7, #16]
 800e832:	8a3b      	ldrh	r3, [r7, #16]
 800e834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d01b      	beq.n	800e874 <USB_EPClearStall+0x6c>
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	781b      	ldrb	r3, [r3, #0]
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	4413      	add	r3, r2
 800e846:	881b      	ldrh	r3, [r3, #0]
 800e848:	b29b      	uxth	r3, r3
 800e84a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e84e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e852:	81fb      	strh	r3, [r7, #14]
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	441a      	add	r2, r3
 800e85e:	89fb      	ldrh	r3, [r7, #14]
 800e860:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e864:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e868:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e86c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e870:	b29b      	uxth	r3, r3
 800e872:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	78db      	ldrb	r3, [r3, #3]
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d06c      	beq.n	800e956 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	4413      	add	r3, r2
 800e886:	881b      	ldrh	r3, [r3, #0]
 800e888:	b29b      	uxth	r3, r3
 800e88a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e88e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e892:	81bb      	strh	r3, [r7, #12]
 800e894:	89bb      	ldrh	r3, [r7, #12]
 800e896:	f083 0320 	eor.w	r3, r3, #32
 800e89a:	81bb      	strh	r3, [r7, #12]
 800e89c:	687a      	ldr	r2, [r7, #4]
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	009b      	lsls	r3, r3, #2
 800e8a4:	441a      	add	r2, r3
 800e8a6:	89bb      	ldrh	r3, [r7, #12]
 800e8a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	8013      	strh	r3, [r2, #0]
 800e8bc:	e04b      	b.n	800e956 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	4413      	add	r3, r2
 800e8c8:	881b      	ldrh	r3, [r3, #0]
 800e8ca:	82fb      	strh	r3, [r7, #22]
 800e8cc:	8afb      	ldrh	r3, [r7, #22]
 800e8ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d01b      	beq.n	800e90e <USB_EPClearStall+0x106>
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	4413      	add	r3, r2
 800e8e0:	881b      	ldrh	r3, [r3, #0]
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8ec:	82bb      	strh	r3, [r7, #20]
 800e8ee:	687a      	ldr	r2, [r7, #4]
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	441a      	add	r2, r3
 800e8f8:	8abb      	ldrh	r3, [r7, #20]
 800e8fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e902:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	009b      	lsls	r3, r3, #2
 800e916:	4413      	add	r3, r2
 800e918:	881b      	ldrh	r3, [r3, #0]
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e924:	827b      	strh	r3, [r7, #18]
 800e926:	8a7b      	ldrh	r3, [r7, #18]
 800e928:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e92c:	827b      	strh	r3, [r7, #18]
 800e92e:	8a7b      	ldrh	r3, [r7, #18]
 800e930:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e934:	827b      	strh	r3, [r7, #18]
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	441a      	add	r2, r3
 800e940:	8a7b      	ldrh	r3, [r7, #18]
 800e942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e94a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e94e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e952:	b29b      	uxth	r3, r3
 800e954:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e956:	2300      	movs	r3, #0
}
 800e958:	4618      	mov	r0, r3
 800e95a:	371c      	adds	r7, #28
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	460b      	mov	r3, r1
 800e96e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e970:	78fb      	ldrb	r3, [r7, #3]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d103      	bne.n	800e97e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2280      	movs	r2, #128	@ 0x80
 800e97a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e97e:	2300      	movs	r3, #0
}
 800e980:	4618      	mov	r0, r3
 800e982:	370c      	adds	r7, #12
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e9a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e9a4:	b29a      	uxth	r2, r3
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e9ac:	2300      	movs	r3, #0
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	370c      	adds	r7, #12
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b8:	4770      	bx	lr

0800e9ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e9ba:	b480      	push	{r7}
 800e9bc:	b085      	sub	sp, #20
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3714      	adds	r7, #20
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr

0800e9da <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e9da:	b480      	push	{r7}
 800e9dc:	b08b      	sub	sp, #44	@ 0x2c
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	60f8      	str	r0, [r7, #12]
 800e9e2:	60b9      	str	r1, [r7, #8]
 800e9e4:	4611      	mov	r1, r2
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	80fb      	strh	r3, [r7, #6]
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e9f0:	88bb      	ldrh	r3, [r7, #4]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	085b      	lsrs	r3, r3, #1
 800e9f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ea00:	88fa      	ldrh	r2, [r7, #6]
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	4413      	add	r3, r2
 800ea06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ea0a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ea0c:	69bb      	ldr	r3, [r7, #24]
 800ea0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea10:	e01b      	b.n	800ea4a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ea12:	69fb      	ldr	r3, [r7, #28]
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	3301      	adds	r3, #1
 800ea1c:	781b      	ldrb	r3, [r3, #0]
 800ea1e:	021b      	lsls	r3, r3, #8
 800ea20:	b21a      	sxth	r2, r3
 800ea22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ea26:	4313      	orrs	r3, r2
 800ea28:	b21b      	sxth	r3, r3
 800ea2a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ea2c:	6a3b      	ldr	r3, [r7, #32]
 800ea2e:	8a7a      	ldrh	r2, [r7, #18]
 800ea30:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ea32:	6a3b      	ldr	r3, [r7, #32]
 800ea34:	3302      	adds	r3, #2
 800ea36:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	3301      	adds	r3, #1
 800ea42:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ea44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea46:	3b01      	subs	r3, #1
 800ea48:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d1e0      	bne.n	800ea12 <USB_WritePMA+0x38>
  }
}
 800ea50:	bf00      	nop
 800ea52:	bf00      	nop
 800ea54:	372c      	adds	r7, #44	@ 0x2c
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr

0800ea5e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ea5e:	b480      	push	{r7}
 800ea60:	b08b      	sub	sp, #44	@ 0x2c
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	60f8      	str	r0, [r7, #12]
 800ea66:	60b9      	str	r1, [r7, #8]
 800ea68:	4611      	mov	r1, r2
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	80fb      	strh	r3, [r7, #6]
 800ea70:	4613      	mov	r3, r2
 800ea72:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ea74:	88bb      	ldrh	r3, [r7, #4]
 800ea76:	085b      	lsrs	r3, r3, #1
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ea84:	88fa      	ldrh	r2, [r7, #6]
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	4413      	add	r3, r2
 800ea8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ea8e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea94:	e018      	b.n	800eac8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ea96:	6a3b      	ldr	r3, [r7, #32]
 800ea98:	881b      	ldrh	r3, [r3, #0]
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ea9e:	6a3b      	ldr	r3, [r7, #32]
 800eaa0:	3302      	adds	r3, #2
 800eaa2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	b2da      	uxtb	r2, r3
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	3301      	adds	r3, #1
 800eab0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	0a1b      	lsrs	r3, r3, #8
 800eab6:	b2da      	uxtb	r2, r3
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	3301      	adds	r3, #1
 800eac0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800eac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac4:	3b01      	subs	r3, #1
 800eac6:	627b      	str	r3, [r7, #36]	@ 0x24
 800eac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d1e3      	bne.n	800ea96 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800eace:	88bb      	ldrh	r3, [r7, #4]
 800ead0:	f003 0301 	and.w	r3, r3, #1
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d007      	beq.n	800eaea <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800eada:	6a3b      	ldr	r3, [r7, #32]
 800eadc:	881b      	ldrh	r3, [r3, #0]
 800eade:	b29b      	uxth	r3, r3
 800eae0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	b2da      	uxtb	r2, r3
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	701a      	strb	r2, [r3, #0]
  }
}
 800eaea:	bf00      	nop
 800eaec:	372c      	adds	r7, #44	@ 0x2c
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr

0800eaf6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b084      	sub	sp, #16
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
 800eafe:	460b      	mov	r3, r1
 800eb00:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800eb02:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800eb06:	f002 f90f 	bl	8010d28 <USBD_static_malloc>
 800eb0a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d105      	bne.n	800eb1e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800eb1a:	2302      	movs	r3, #2
 800eb1c:	e066      	b.n	800ebec <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	68fa      	ldr	r2, [r7, #12]
 800eb22:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	7c1b      	ldrb	r3, [r3, #16]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d119      	bne.n	800eb62 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800eb2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eb32:	2202      	movs	r2, #2
 800eb34:	2181      	movs	r1, #129	@ 0x81
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f001 ff9d 	bl	8010a76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eb42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eb46:	2202      	movs	r2, #2
 800eb48:	2101      	movs	r1, #1
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f001 ff93 	bl	8010a76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2201      	movs	r2, #1
 800eb54:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2210      	movs	r2, #16
 800eb5c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800eb60:	e016      	b.n	800eb90 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800eb62:	2340      	movs	r3, #64	@ 0x40
 800eb64:	2202      	movs	r2, #2
 800eb66:	2181      	movs	r1, #129	@ 0x81
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f001 ff84 	bl	8010a76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2201      	movs	r2, #1
 800eb72:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eb74:	2340      	movs	r3, #64	@ 0x40
 800eb76:	2202      	movs	r2, #2
 800eb78:	2101      	movs	r1, #1
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f001 ff7b 	bl	8010a76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2201      	movs	r2, #1
 800eb84:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2210      	movs	r2, #16
 800eb8c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800eb90:	2308      	movs	r3, #8
 800eb92:	2203      	movs	r2, #3
 800eb94:	2182      	movs	r1, #130	@ 0x82
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f001 ff6d 	bl	8010a76 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2201      	movs	r2, #1
 800eba0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	7c1b      	ldrb	r3, [r3, #16]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d109      	bne.n	800ebda <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ebcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ebd0:	2101      	movs	r1, #1
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f002 f83e 	bl	8010c54 <USBD_LL_PrepareReceive>
 800ebd8:	e007      	b.n	800ebea <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ebe0:	2340      	movs	r3, #64	@ 0x40
 800ebe2:	2101      	movs	r1, #1
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f002 f835 	bl	8010c54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ebea:	2300      	movs	r3, #0
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ec00:	2181      	movs	r1, #129	@ 0x81
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f001 ff5d 	bl	8010ac2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ec0e:	2101      	movs	r1, #1
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f001 ff56 	bl	8010ac2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ec1e:	2182      	movs	r1, #130	@ 0x82
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f001 ff4e 	bl	8010ac2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2200      	movs	r2, #0
 800ec32:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d00e      	beq.n	800ec5e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ec50:	4618      	mov	r0, r3
 800ec52:	f002 f877 	bl	8010d44 <USBD_static_free>
    pdev->pClassData = NULL;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ec5e:	2300      	movs	r3, #0
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b086      	sub	sp, #24
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ec78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec82:	2300      	movs	r3, #0
 800ec84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d101      	bne.n	800ec90 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ec8c:	2303      	movs	r3, #3
 800ec8e:	e0af      	b.n	800edf0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d03f      	beq.n	800ed1c <USBD_CDC_Setup+0xb4>
 800ec9c:	2b20      	cmp	r3, #32
 800ec9e:	f040 809f 	bne.w	800ede0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	88db      	ldrh	r3, [r3, #6]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d02e      	beq.n	800ed08 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	b25b      	sxtb	r3, r3
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	da16      	bge.n	800ece2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ecba:	689b      	ldr	r3, [r3, #8]
 800ecbc:	683a      	ldr	r2, [r7, #0]
 800ecbe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ecc0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ecc2:	683a      	ldr	r2, [r7, #0]
 800ecc4:	88d2      	ldrh	r2, [r2, #6]
 800ecc6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	88db      	ldrh	r3, [r3, #6]
 800eccc:	2b07      	cmp	r3, #7
 800ecce:	bf28      	it	cs
 800ecd0:	2307      	movcs	r3, #7
 800ecd2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	89fa      	ldrh	r2, [r7, #14]
 800ecd8:	4619      	mov	r1, r3
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f001 facd 	bl	801027a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ece0:	e085      	b.n	800edee <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	785a      	ldrb	r2, [r3, #1]
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	88db      	ldrh	r3, [r3, #6]
 800ecf0:	b2da      	uxtb	r2, r3
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ecf8:	6939      	ldr	r1, [r7, #16]
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	88db      	ldrh	r3, [r3, #6]
 800ecfe:	461a      	mov	r2, r3
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f001 fae6 	bl	80102d2 <USBD_CtlPrepareRx>
      break;
 800ed06:	e072      	b.n	800edee <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	683a      	ldr	r2, [r7, #0]
 800ed12:	7850      	ldrb	r0, [r2, #1]
 800ed14:	2200      	movs	r2, #0
 800ed16:	6839      	ldr	r1, [r7, #0]
 800ed18:	4798      	blx	r3
      break;
 800ed1a:	e068      	b.n	800edee <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	785b      	ldrb	r3, [r3, #1]
 800ed20:	2b0b      	cmp	r3, #11
 800ed22:	d852      	bhi.n	800edca <USBD_CDC_Setup+0x162>
 800ed24:	a201      	add	r2, pc, #4	@ (adr r2, 800ed2c <USBD_CDC_Setup+0xc4>)
 800ed26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed2a:	bf00      	nop
 800ed2c:	0800ed5d 	.word	0x0800ed5d
 800ed30:	0800edd9 	.word	0x0800edd9
 800ed34:	0800edcb 	.word	0x0800edcb
 800ed38:	0800edcb 	.word	0x0800edcb
 800ed3c:	0800edcb 	.word	0x0800edcb
 800ed40:	0800edcb 	.word	0x0800edcb
 800ed44:	0800edcb 	.word	0x0800edcb
 800ed48:	0800edcb 	.word	0x0800edcb
 800ed4c:	0800edcb 	.word	0x0800edcb
 800ed50:	0800edcb 	.word	0x0800edcb
 800ed54:	0800ed87 	.word	0x0800ed87
 800ed58:	0800edb1 	.word	0x0800edb1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	2b03      	cmp	r3, #3
 800ed66:	d107      	bne.n	800ed78 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ed68:	f107 030a 	add.w	r3, r7, #10
 800ed6c:	2202      	movs	r2, #2
 800ed6e:	4619      	mov	r1, r3
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f001 fa82 	bl	801027a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ed76:	e032      	b.n	800edde <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ed78:	6839      	ldr	r1, [r7, #0]
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f001 fa0c 	bl	8010198 <USBD_CtlError>
            ret = USBD_FAIL;
 800ed80:	2303      	movs	r3, #3
 800ed82:	75fb      	strb	r3, [r7, #23]
          break;
 800ed84:	e02b      	b.n	800edde <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	2b03      	cmp	r3, #3
 800ed90:	d107      	bne.n	800eda2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ed92:	f107 030d 	add.w	r3, r7, #13
 800ed96:	2201      	movs	r2, #1
 800ed98:	4619      	mov	r1, r3
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f001 fa6d 	bl	801027a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eda0:	e01d      	b.n	800edde <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800eda2:	6839      	ldr	r1, [r7, #0]
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f001 f9f7 	bl	8010198 <USBD_CtlError>
            ret = USBD_FAIL;
 800edaa:	2303      	movs	r3, #3
 800edac:	75fb      	strb	r3, [r7, #23]
          break;
 800edae:	e016      	b.n	800edde <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edb6:	b2db      	uxtb	r3, r3
 800edb8:	2b03      	cmp	r3, #3
 800edba:	d00f      	beq.n	800eddc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800edbc:	6839      	ldr	r1, [r7, #0]
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f001 f9ea 	bl	8010198 <USBD_CtlError>
            ret = USBD_FAIL;
 800edc4:	2303      	movs	r3, #3
 800edc6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800edc8:	e008      	b.n	800eddc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800edca:	6839      	ldr	r1, [r7, #0]
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f001 f9e3 	bl	8010198 <USBD_CtlError>
          ret = USBD_FAIL;
 800edd2:	2303      	movs	r3, #3
 800edd4:	75fb      	strb	r3, [r7, #23]
          break;
 800edd6:	e002      	b.n	800edde <USBD_CDC_Setup+0x176>
          break;
 800edd8:	bf00      	nop
 800edda:	e008      	b.n	800edee <USBD_CDC_Setup+0x186>
          break;
 800eddc:	bf00      	nop
      }
      break;
 800edde:	e006      	b.n	800edee <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ede0:	6839      	ldr	r1, [r7, #0]
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f001 f9d8 	bl	8010198 <USBD_CtlError>
      ret = USBD_FAIL;
 800ede8:	2303      	movs	r3, #3
 800edea:	75fb      	strb	r3, [r7, #23]
      break;
 800edec:	bf00      	nop
  }

  return (uint8_t)ret;
 800edee:	7dfb      	ldrb	r3, [r7, #23]
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3718      	adds	r7, #24
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b084      	sub	sp, #16
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	460b      	mov	r3, r1
 800ee02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ee0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d101      	bne.n	800ee1a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ee16:	2303      	movs	r3, #3
 800ee18:	e04f      	b.n	800eeba <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee20:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ee22:	78fa      	ldrb	r2, [r7, #3]
 800ee24:	6879      	ldr	r1, [r7, #4]
 800ee26:	4613      	mov	r3, r2
 800ee28:	009b      	lsls	r3, r3, #2
 800ee2a:	4413      	add	r3, r2
 800ee2c:	009b      	lsls	r3, r3, #2
 800ee2e:	440b      	add	r3, r1
 800ee30:	3318      	adds	r3, #24
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d029      	beq.n	800ee8c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ee38:	78fa      	ldrb	r2, [r7, #3]
 800ee3a:	6879      	ldr	r1, [r7, #4]
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	009b      	lsls	r3, r3, #2
 800ee40:	4413      	add	r3, r2
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	440b      	add	r3, r1
 800ee46:	3318      	adds	r3, #24
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	78f9      	ldrb	r1, [r7, #3]
 800ee4c:	68f8      	ldr	r0, [r7, #12]
 800ee4e:	460b      	mov	r3, r1
 800ee50:	009b      	lsls	r3, r3, #2
 800ee52:	440b      	add	r3, r1
 800ee54:	00db      	lsls	r3, r3, #3
 800ee56:	4403      	add	r3, r0
 800ee58:	3320      	adds	r3, #32
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ee60:	fb01 f303 	mul.w	r3, r1, r3
 800ee64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d110      	bne.n	800ee8c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ee6a:	78fa      	ldrb	r2, [r7, #3]
 800ee6c:	6879      	ldr	r1, [r7, #4]
 800ee6e:	4613      	mov	r3, r2
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	4413      	add	r3, r2
 800ee74:	009b      	lsls	r3, r3, #2
 800ee76:	440b      	add	r3, r1
 800ee78:	3318      	adds	r3, #24
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ee7e:	78f9      	ldrb	r1, [r7, #3]
 800ee80:	2300      	movs	r3, #0
 800ee82:	2200      	movs	r2, #0
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f001 fec4 	bl	8010c12 <USBD_LL_Transmit>
 800ee8a:	e015      	b.n	800eeb8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee9a:	691b      	ldr	r3, [r3, #16]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d00b      	beq.n	800eeb8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eea6:	691b      	ldr	r3, [r3, #16]
 800eea8:	68ba      	ldr	r2, [r7, #8]
 800eeaa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800eeae:	68ba      	ldr	r2, [r7, #8]
 800eeb0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800eeb4:	78fa      	ldrb	r2, [r7, #3]
 800eeb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800eeb8:	2300      	movs	r3, #0
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3710      	adds	r7, #16
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}

0800eec2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eec2:	b580      	push	{r7, lr}
 800eec4:	b084      	sub	sp, #16
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
 800eeca:	460b      	mov	r3, r1
 800eecc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eed4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d101      	bne.n	800eee4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eee0:	2303      	movs	r3, #3
 800eee2:	e015      	b.n	800ef10 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800eee4:	78fb      	ldrb	r3, [r7, #3]
 800eee6:	4619      	mov	r1, r3
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f001 fed4 	bl	8010c96 <USBD_LL_GetRxDataSize>
 800eeee:	4602      	mov	r2, r0
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	68fa      	ldr	r2, [r7, #12]
 800ef00:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ef0a:	4611      	mov	r1, r2
 800ef0c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3710      	adds	r7, #16
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef26:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d101      	bne.n	800ef32 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ef2e:	2303      	movs	r3, #3
 800ef30:	e01a      	b.n	800ef68 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d014      	beq.n	800ef66 <USBD_CDC_EP0_RxReady+0x4e>
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ef42:	2bff      	cmp	r3, #255	@ 0xff
 800ef44:	d00f      	beq.n	800ef66 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	68fa      	ldr	r2, [r7, #12]
 800ef50:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800ef54:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ef5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	22ff      	movs	r2, #255	@ 0xff
 800ef62:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ef66:	2300      	movs	r3, #0
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3710      	adds	r7, #16
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2243      	movs	r2, #67	@ 0x43
 800ef7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ef7e:	4b03      	ldr	r3, [pc, #12]	@ (800ef8c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	370c      	adds	r7, #12
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr
 800ef8c:	200000d0 	.word	0x200000d0

0800ef90 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2243      	movs	r2, #67	@ 0x43
 800ef9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ef9e:	4b03      	ldr	r3, [pc, #12]	@ (800efac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	370c      	adds	r7, #12
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr
 800efac:	2000008c 	.word	0x2000008c

0800efb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2243      	movs	r2, #67	@ 0x43
 800efbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800efbe:	4b03      	ldr	r3, [pc, #12]	@ (800efcc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	370c      	adds	r7, #12
 800efc4:	46bd      	mov	sp, r7
 800efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efca:	4770      	bx	lr
 800efcc:	20000114 	.word	0x20000114

0800efd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	220a      	movs	r2, #10
 800efdc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800efde:	4b03      	ldr	r3, [pc, #12]	@ (800efec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	370c      	adds	r7, #12
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr
 800efec:	20000048 	.word	0x20000048

0800eff0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b083      	sub	sp, #12
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d101      	bne.n	800f004 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f000:	2303      	movs	r3, #3
 800f002:	e004      	b.n	800f00e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	683a      	ldr	r2, [r7, #0]
 800f008:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800f00c:	2300      	movs	r3, #0
}
 800f00e:	4618      	mov	r0, r3
 800f010:	370c      	adds	r7, #12
 800f012:	46bd      	mov	sp, r7
 800f014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f018:	4770      	bx	lr

0800f01a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f01a:	b480      	push	{r7}
 800f01c:	b087      	sub	sp, #28
 800f01e:	af00      	add	r7, sp, #0
 800f020:	60f8      	str	r0, [r7, #12]
 800f022:	60b9      	str	r1, [r7, #8]
 800f024:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f02c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d101      	bne.n	800f038 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f034:	2303      	movs	r3, #3
 800f036:	e008      	b.n	800f04a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	68ba      	ldr	r2, [r7, #8]
 800f03c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f048:	2300      	movs	r3, #0
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	371c      	adds	r7, #28
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr

0800f056 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f056:	b480      	push	{r7}
 800f058:	b085      	sub	sp, #20
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
 800f05e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f066:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d101      	bne.n	800f072 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f06e:	2303      	movs	r3, #3
 800f070:	e004      	b.n	800f07c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	683a      	ldr	r2, [r7, #0]
 800f076:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f07a:	2300      	movs	r3, #0
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3714      	adds	r7, #20
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr

0800f088 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f096:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f098:	2301      	movs	r3, #1
 800f09a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d101      	bne.n	800f0aa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f0a6:	2303      	movs	r3, #3
 800f0a8:	e01a      	b.n	800f0e0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d114      	bne.n	800f0de <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f0d2:	2181      	movs	r1, #129	@ 0x81
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f001 fd9c 	bl	8010c12 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3710      	adds	r7, #16
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f0f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d101      	bne.n	800f106 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f102:	2303      	movs	r3, #3
 800f104:	e016      	b.n	800f134 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	7c1b      	ldrb	r3, [r3, #16]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d109      	bne.n	800f122 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f114:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f118:	2101      	movs	r1, #1
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f001 fd9a 	bl	8010c54 <USBD_LL_PrepareReceive>
 800f120:	e007      	b.n	800f132 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f128:	2340      	movs	r3, #64	@ 0x40
 800f12a:	2101      	movs	r1, #1
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f001 fd91 	bl	8010c54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f132:	2300      	movs	r3, #0
}
 800f134:	4618      	mov	r0, r3
 800f136:	3710      	adds	r7, #16
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b086      	sub	sp, #24
 800f140:	af00      	add	r7, sp, #0
 800f142:	60f8      	str	r0, [r7, #12]
 800f144:	60b9      	str	r1, [r7, #8]
 800f146:	4613      	mov	r3, r2
 800f148:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d101      	bne.n	800f154 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f150:	2303      	movs	r3, #3
 800f152:	e01f      	b.n	800f194 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2200      	movs	r2, #0
 800f158:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2200      	movs	r2, #0
 800f160:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	2200      	movs	r2, #0
 800f168:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d003      	beq.n	800f17a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	68ba      	ldr	r2, [r7, #8]
 800f176:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2201      	movs	r2, #1
 800f17e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	79fa      	ldrb	r2, [r7, #7]
 800f186:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f188:	68f8      	ldr	r0, [r7, #12]
 800f18a:	f001 fbf9 	bl	8010980 <USBD_LL_Init>
 800f18e:	4603      	mov	r3, r0
 800f190:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f192:	7dfb      	ldrb	r3, [r7, #23]
}
 800f194:	4618      	mov	r0, r3
 800f196:	3718      	adds	r7, #24
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b084      	sub	sp, #16
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d101      	bne.n	800f1b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f1b0:	2303      	movs	r3, #3
 800f1b2:	e016      	b.n	800f1e2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d00b      	beq.n	800f1e0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1d0:	f107 020e 	add.w	r2, r7, #14
 800f1d4:	4610      	mov	r0, r2
 800f1d6:	4798      	blx	r3
 800f1d8:	4602      	mov	r2, r0
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3710      	adds	r7, #16
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}

0800f1ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f1ea:	b580      	push	{r7, lr}
 800f1ec:	b082      	sub	sp, #8
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f001 fc24 	bl	8010a40 <USBD_LL_Start>
 800f1f8:	4603      	mov	r3, r0
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3708      	adds	r7, #8
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}

0800f202 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f202:	b480      	push	{r7}
 800f204:	b083      	sub	sp, #12
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f20a:	2300      	movs	r3, #0
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	370c      	adds	r7, #12
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	460b      	mov	r3, r1
 800f222:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f224:	2303      	movs	r3, #3
 800f226:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d009      	beq.n	800f246 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	78fa      	ldrb	r2, [r7, #3]
 800f23c:	4611      	mov	r1, r2
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	4798      	blx	r3
 800f242:	4603      	mov	r3, r0
 800f244:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f246:	7bfb      	ldrb	r3, [r7, #15]
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3710      	adds	r7, #16
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	460b      	mov	r3, r1
 800f25a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f262:	2b00      	cmp	r3, #0
 800f264:	d007      	beq.n	800f276 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f26c:	685b      	ldr	r3, [r3, #4]
 800f26e:	78fa      	ldrb	r2, [r7, #3]
 800f270:	4611      	mov	r1, r2
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	4798      	blx	r3
  }

  return USBD_OK;
 800f276:	2300      	movs	r3, #0
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f290:	6839      	ldr	r1, [r7, #0]
 800f292:	4618      	mov	r0, r3
 800f294:	f000 ff46 	bl	8010124 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2201      	movs	r2, #1
 800f29c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f2b4:	f003 031f 	and.w	r3, r3, #31
 800f2b8:	2b02      	cmp	r3, #2
 800f2ba:	d01a      	beq.n	800f2f2 <USBD_LL_SetupStage+0x72>
 800f2bc:	2b02      	cmp	r3, #2
 800f2be:	d822      	bhi.n	800f306 <USBD_LL_SetupStage+0x86>
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d002      	beq.n	800f2ca <USBD_LL_SetupStage+0x4a>
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d00a      	beq.n	800f2de <USBD_LL_SetupStage+0x5e>
 800f2c8:	e01d      	b.n	800f306 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 f9ee 	bl	800f6b4 <USBD_StdDevReq>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	73fb      	strb	r3, [r7, #15]
      break;
 800f2dc:	e020      	b.n	800f320 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f000 fa52 	bl	800f790 <USBD_StdItfReq>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	73fb      	strb	r3, [r7, #15]
      break;
 800f2f0:	e016      	b.n	800f320 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f000 fa91 	bl	800f822 <USBD_StdEPReq>
 800f300:	4603      	mov	r3, r0
 800f302:	73fb      	strb	r3, [r7, #15]
      break;
 800f304:	e00c      	b.n	800f320 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f30c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f310:	b2db      	uxtb	r3, r3
 800f312:	4619      	mov	r1, r3
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f001 fbf3 	bl	8010b00 <USBD_LL_StallEP>
 800f31a:	4603      	mov	r3, r0
 800f31c:	73fb      	strb	r3, [r7, #15]
      break;
 800f31e:	bf00      	nop
  }

  return ret;
 800f320:	7bfb      	ldrb	r3, [r7, #15]
}
 800f322:	4618      	mov	r0, r3
 800f324:	3710      	adds	r7, #16
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}

0800f32a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f32a:	b580      	push	{r7, lr}
 800f32c:	b086      	sub	sp, #24
 800f32e:	af00      	add	r7, sp, #0
 800f330:	60f8      	str	r0, [r7, #12]
 800f332:	460b      	mov	r3, r1
 800f334:	607a      	str	r2, [r7, #4]
 800f336:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f338:	7afb      	ldrb	r3, [r7, #11]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d138      	bne.n	800f3b0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f344:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f34c:	2b03      	cmp	r3, #3
 800f34e:	d14a      	bne.n	800f3e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	689a      	ldr	r2, [r3, #8]
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	68db      	ldr	r3, [r3, #12]
 800f358:	429a      	cmp	r2, r3
 800f35a:	d913      	bls.n	800f384 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	689a      	ldr	r2, [r3, #8]
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	1ad2      	subs	r2, r2, r3
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	68da      	ldr	r2, [r3, #12]
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	689b      	ldr	r3, [r3, #8]
 800f372:	4293      	cmp	r3, r2
 800f374:	bf28      	it	cs
 800f376:	4613      	movcs	r3, r2
 800f378:	461a      	mov	r2, r3
 800f37a:	6879      	ldr	r1, [r7, #4]
 800f37c:	68f8      	ldr	r0, [r7, #12]
 800f37e:	f000 ffc5 	bl	801030c <USBD_CtlContinueRx>
 800f382:	e030      	b.n	800f3e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	2b03      	cmp	r3, #3
 800f38e:	d10b      	bne.n	800f3a8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f396:	691b      	ldr	r3, [r3, #16]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d005      	beq.n	800f3a8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3a2:	691b      	ldr	r3, [r3, #16]
 800f3a4:	68f8      	ldr	r0, [r7, #12]
 800f3a6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f3a8:	68f8      	ldr	r0, [r7, #12]
 800f3aa:	f000 ffc0 	bl	801032e <USBD_CtlSendStatus>
 800f3ae:	e01a      	b.n	800f3e6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3b6:	b2db      	uxtb	r3, r3
 800f3b8:	2b03      	cmp	r3, #3
 800f3ba:	d114      	bne.n	800f3e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3c2:	699b      	ldr	r3, [r3, #24]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d00e      	beq.n	800f3e6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3ce:	699b      	ldr	r3, [r3, #24]
 800f3d0:	7afa      	ldrb	r2, [r7, #11]
 800f3d2:	4611      	mov	r1, r2
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	4798      	blx	r3
 800f3d8:	4603      	mov	r3, r0
 800f3da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f3dc:	7dfb      	ldrb	r3, [r7, #23]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d001      	beq.n	800f3e6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f3e2:	7dfb      	ldrb	r3, [r7, #23]
 800f3e4:	e000      	b.n	800f3e8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f3e6:	2300      	movs	r3, #0
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3718      	adds	r7, #24
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b086      	sub	sp, #24
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	60f8      	str	r0, [r7, #12]
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	607a      	str	r2, [r7, #4]
 800f3fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f3fe:	7afb      	ldrb	r3, [r7, #11]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d16b      	bne.n	800f4dc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	3314      	adds	r3, #20
 800f408:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f410:	2b02      	cmp	r3, #2
 800f412:	d156      	bne.n	800f4c2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	689a      	ldr	r2, [r3, #8]
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d914      	bls.n	800f44a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	689a      	ldr	r2, [r3, #8]
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	68db      	ldr	r3, [r3, #12]
 800f428:	1ad2      	subs	r2, r2, r3
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	689b      	ldr	r3, [r3, #8]
 800f432:	461a      	mov	r2, r3
 800f434:	6879      	ldr	r1, [r7, #4]
 800f436:	68f8      	ldr	r0, [r7, #12]
 800f438:	f000 ff3a 	bl	80102b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f43c:	2300      	movs	r3, #0
 800f43e:	2200      	movs	r2, #0
 800f440:	2100      	movs	r1, #0
 800f442:	68f8      	ldr	r0, [r7, #12]
 800f444:	f001 fc06 	bl	8010c54 <USBD_LL_PrepareReceive>
 800f448:	e03b      	b.n	800f4c2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	68da      	ldr	r2, [r3, #12]
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	689b      	ldr	r3, [r3, #8]
 800f452:	429a      	cmp	r2, r3
 800f454:	d11c      	bne.n	800f490 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	685a      	ldr	r2, [r3, #4]
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f45e:	429a      	cmp	r2, r3
 800f460:	d316      	bcc.n	800f490 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	685a      	ldr	r2, [r3, #4]
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d20f      	bcs.n	800f490 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f470:	2200      	movs	r2, #0
 800f472:	2100      	movs	r1, #0
 800f474:	68f8      	ldr	r0, [r7, #12]
 800f476:	f000 ff1b 	bl	80102b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2200      	movs	r2, #0
 800f47e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f482:	2300      	movs	r3, #0
 800f484:	2200      	movs	r2, #0
 800f486:	2100      	movs	r1, #0
 800f488:	68f8      	ldr	r0, [r7, #12]
 800f48a:	f001 fbe3 	bl	8010c54 <USBD_LL_PrepareReceive>
 800f48e:	e018      	b.n	800f4c2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f496:	b2db      	uxtb	r3, r3
 800f498:	2b03      	cmp	r3, #3
 800f49a:	d10b      	bne.n	800f4b4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d005      	beq.n	800f4b4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	68f8      	ldr	r0, [r7, #12]
 800f4b2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f4b4:	2180      	movs	r1, #128	@ 0x80
 800f4b6:	68f8      	ldr	r0, [r7, #12]
 800f4b8:	f001 fb22 	bl	8010b00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f4bc:	68f8      	ldr	r0, [r7, #12]
 800f4be:	f000 ff49 	bl	8010354 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d122      	bne.n	800f512 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f7ff fe98 	bl	800f202 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f4da:	e01a      	b.n	800f512 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	2b03      	cmp	r3, #3
 800f4e6:	d114      	bne.n	800f512 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4ee:	695b      	ldr	r3, [r3, #20]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d00e      	beq.n	800f512 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4fa:	695b      	ldr	r3, [r3, #20]
 800f4fc:	7afa      	ldrb	r2, [r7, #11]
 800f4fe:	4611      	mov	r1, r2
 800f500:	68f8      	ldr	r0, [r7, #12]
 800f502:	4798      	blx	r3
 800f504:	4603      	mov	r3, r0
 800f506:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f508:	7dfb      	ldrb	r3, [r7, #23]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d001      	beq.n	800f512 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f50e:	7dfb      	ldrb	r3, [r7, #23]
 800f510:	e000      	b.n	800f514 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f512:	2300      	movs	r3, #0
}
 800f514:	4618      	mov	r0, r3
 800f516:	3718      	adds	r7, #24
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b082      	sub	sp, #8
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2201      	movs	r2, #1
 800f528:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2200      	movs	r2, #0
 800f530:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2200      	movs	r2, #0
 800f538:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2200      	movs	r2, #0
 800f53e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d101      	bne.n	800f550 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f54c:	2303      	movs	r3, #3
 800f54e:	e02f      	b.n	800f5b0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f556:	2b00      	cmp	r3, #0
 800f558:	d00f      	beq.n	800f57a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d009      	beq.n	800f57a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	687a      	ldr	r2, [r7, #4]
 800f570:	6852      	ldr	r2, [r2, #4]
 800f572:	b2d2      	uxtb	r2, r2
 800f574:	4611      	mov	r1, r2
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f57a:	2340      	movs	r3, #64	@ 0x40
 800f57c:	2200      	movs	r2, #0
 800f57e:	2100      	movs	r1, #0
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f001 fa78 	bl	8010a76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2201      	movs	r2, #1
 800f58a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2240      	movs	r2, #64	@ 0x40
 800f592:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f596:	2340      	movs	r3, #64	@ 0x40
 800f598:	2200      	movs	r2, #0
 800f59a:	2180      	movs	r1, #128	@ 0x80
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f001 fa6a 	bl	8010a76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2201      	movs	r2, #1
 800f5a6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2240      	movs	r2, #64	@ 0x40
 800f5ac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f5ae:	2300      	movs	r3, #0
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3708      	adds	r7, #8
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}

0800f5b8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b083      	sub	sp, #12
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	460b      	mov	r3, r1
 800f5c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	78fa      	ldrb	r2, [r7, #3]
 800f5c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f5ca:	2300      	movs	r3, #0
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	370c      	adds	r7, #12
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr

0800f5d8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b083      	sub	sp, #12
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5e6:	b2da      	uxtb	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2204      	movs	r2, #4
 800f5f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f5f6:	2300      	movs	r3, #0
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	370c      	adds	r7, #12
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f602:	4770      	bx	lr

0800f604 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f612:	b2db      	uxtb	r3, r3
 800f614:	2b04      	cmp	r3, #4
 800f616:	d106      	bne.n	800f626 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f61e:	b2da      	uxtb	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f626:	2300      	movs	r3, #0
}
 800f628:	4618      	mov	r0, r3
 800f62a:	370c      	adds	r7, #12
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr

0800f634 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f642:	2b00      	cmp	r3, #0
 800f644:	d101      	bne.n	800f64a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f646:	2303      	movs	r3, #3
 800f648:	e012      	b.n	800f670 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f650:	b2db      	uxtb	r3, r3
 800f652:	2b03      	cmp	r3, #3
 800f654:	d10b      	bne.n	800f66e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f65c:	69db      	ldr	r3, [r3, #28]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d005      	beq.n	800f66e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f668:	69db      	ldr	r3, [r3, #28]
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f66e:	2300      	movs	r3, #0
}
 800f670:	4618      	mov	r0, r3
 800f672:	3708      	adds	r7, #8
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f678:	b480      	push	{r7}
 800f67a:	b087      	sub	sp, #28
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	3301      	adds	r3, #1
 800f68e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f696:	8a3b      	ldrh	r3, [r7, #16]
 800f698:	021b      	lsls	r3, r3, #8
 800f69a:	b21a      	sxth	r2, r3
 800f69c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f6a0:	4313      	orrs	r3, r2
 800f6a2:	b21b      	sxth	r3, r3
 800f6a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f6a6:	89fb      	ldrh	r3, [r7, #14]
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	371c      	adds	r7, #28
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr

0800f6b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b084      	sub	sp, #16
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f6ca:	2b40      	cmp	r3, #64	@ 0x40
 800f6cc:	d005      	beq.n	800f6da <USBD_StdDevReq+0x26>
 800f6ce:	2b40      	cmp	r3, #64	@ 0x40
 800f6d0:	d853      	bhi.n	800f77a <USBD_StdDevReq+0xc6>
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d00b      	beq.n	800f6ee <USBD_StdDevReq+0x3a>
 800f6d6:	2b20      	cmp	r3, #32
 800f6d8:	d14f      	bne.n	800f77a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	6839      	ldr	r1, [r7, #0]
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	4798      	blx	r3
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	73fb      	strb	r3, [r7, #15]
      break;
 800f6ec:	e04a      	b.n	800f784 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	785b      	ldrb	r3, [r3, #1]
 800f6f2:	2b09      	cmp	r3, #9
 800f6f4:	d83b      	bhi.n	800f76e <USBD_StdDevReq+0xba>
 800f6f6:	a201      	add	r2, pc, #4	@ (adr r2, 800f6fc <USBD_StdDevReq+0x48>)
 800f6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6fc:	0800f751 	.word	0x0800f751
 800f700:	0800f765 	.word	0x0800f765
 800f704:	0800f76f 	.word	0x0800f76f
 800f708:	0800f75b 	.word	0x0800f75b
 800f70c:	0800f76f 	.word	0x0800f76f
 800f710:	0800f72f 	.word	0x0800f72f
 800f714:	0800f725 	.word	0x0800f725
 800f718:	0800f76f 	.word	0x0800f76f
 800f71c:	0800f747 	.word	0x0800f747
 800f720:	0800f739 	.word	0x0800f739
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f724:	6839      	ldr	r1, [r7, #0]
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f000 f9de 	bl	800fae8 <USBD_GetDescriptor>
          break;
 800f72c:	e024      	b.n	800f778 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f72e:	6839      	ldr	r1, [r7, #0]
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f000 fb6d 	bl	800fe10 <USBD_SetAddress>
          break;
 800f736:	e01f      	b.n	800f778 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f738:	6839      	ldr	r1, [r7, #0]
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 fbac 	bl	800fe98 <USBD_SetConfig>
 800f740:	4603      	mov	r3, r0
 800f742:	73fb      	strb	r3, [r7, #15]
          break;
 800f744:	e018      	b.n	800f778 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f746:	6839      	ldr	r1, [r7, #0]
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f000 fc4b 	bl	800ffe4 <USBD_GetConfig>
          break;
 800f74e:	e013      	b.n	800f778 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f750:	6839      	ldr	r1, [r7, #0]
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f000 fc7c 	bl	8010050 <USBD_GetStatus>
          break;
 800f758:	e00e      	b.n	800f778 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f75a:	6839      	ldr	r1, [r7, #0]
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f000 fcab 	bl	80100b8 <USBD_SetFeature>
          break;
 800f762:	e009      	b.n	800f778 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f764:	6839      	ldr	r1, [r7, #0]
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f000 fcba 	bl	80100e0 <USBD_ClrFeature>
          break;
 800f76c:	e004      	b.n	800f778 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f76e:	6839      	ldr	r1, [r7, #0]
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f000 fd11 	bl	8010198 <USBD_CtlError>
          break;
 800f776:	bf00      	nop
      }
      break;
 800f778:	e004      	b.n	800f784 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f77a:	6839      	ldr	r1, [r7, #0]
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f000 fd0b 	bl	8010198 <USBD_CtlError>
      break;
 800f782:	bf00      	nop
  }

  return ret;
 800f784:	7bfb      	ldrb	r3, [r7, #15]
}
 800f786:	4618      	mov	r0, r3
 800f788:	3710      	adds	r7, #16
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop

0800f790 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f79a:	2300      	movs	r3, #0
 800f79c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f7a6:	2b40      	cmp	r3, #64	@ 0x40
 800f7a8:	d005      	beq.n	800f7b6 <USBD_StdItfReq+0x26>
 800f7aa:	2b40      	cmp	r3, #64	@ 0x40
 800f7ac:	d82f      	bhi.n	800f80e <USBD_StdItfReq+0x7e>
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d001      	beq.n	800f7b6 <USBD_StdItfReq+0x26>
 800f7b2:	2b20      	cmp	r3, #32
 800f7b4:	d12b      	bne.n	800f80e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	3b01      	subs	r3, #1
 800f7c0:	2b02      	cmp	r3, #2
 800f7c2:	d81d      	bhi.n	800f800 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	889b      	ldrh	r3, [r3, #4]
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	2b01      	cmp	r3, #1
 800f7cc:	d813      	bhi.n	800f7f6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7d4:	689b      	ldr	r3, [r3, #8]
 800f7d6:	6839      	ldr	r1, [r7, #0]
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	4798      	blx	r3
 800f7dc:	4603      	mov	r3, r0
 800f7de:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	88db      	ldrh	r3, [r3, #6]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d110      	bne.n	800f80a <USBD_StdItfReq+0x7a>
 800f7e8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d10d      	bne.n	800f80a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f000 fd9d 	bl	801032e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f7f4:	e009      	b.n	800f80a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f7f6:	6839      	ldr	r1, [r7, #0]
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f000 fccd 	bl	8010198 <USBD_CtlError>
          break;
 800f7fe:	e004      	b.n	800f80a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f800:	6839      	ldr	r1, [r7, #0]
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 fcc8 	bl	8010198 <USBD_CtlError>
          break;
 800f808:	e000      	b.n	800f80c <USBD_StdItfReq+0x7c>
          break;
 800f80a:	bf00      	nop
      }
      break;
 800f80c:	e004      	b.n	800f818 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f80e:	6839      	ldr	r1, [r7, #0]
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 fcc1 	bl	8010198 <USBD_CtlError>
      break;
 800f816:	bf00      	nop
  }

  return ret;
 800f818:	7bfb      	ldrb	r3, [r7, #15]
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3710      	adds	r7, #16
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}

0800f822 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f822:	b580      	push	{r7, lr}
 800f824:	b084      	sub	sp, #16
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]
 800f82a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f82c:	2300      	movs	r3, #0
 800f82e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	889b      	ldrh	r3, [r3, #4]
 800f834:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f83e:	2b40      	cmp	r3, #64	@ 0x40
 800f840:	d007      	beq.n	800f852 <USBD_StdEPReq+0x30>
 800f842:	2b40      	cmp	r3, #64	@ 0x40
 800f844:	f200 8145 	bhi.w	800fad2 <USBD_StdEPReq+0x2b0>
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00c      	beq.n	800f866 <USBD_StdEPReq+0x44>
 800f84c:	2b20      	cmp	r3, #32
 800f84e:	f040 8140 	bne.w	800fad2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f858:	689b      	ldr	r3, [r3, #8]
 800f85a:	6839      	ldr	r1, [r7, #0]
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	4798      	blx	r3
 800f860:	4603      	mov	r3, r0
 800f862:	73fb      	strb	r3, [r7, #15]
      break;
 800f864:	e13a      	b.n	800fadc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	785b      	ldrb	r3, [r3, #1]
 800f86a:	2b03      	cmp	r3, #3
 800f86c:	d007      	beq.n	800f87e <USBD_StdEPReq+0x5c>
 800f86e:	2b03      	cmp	r3, #3
 800f870:	f300 8129 	bgt.w	800fac6 <USBD_StdEPReq+0x2a4>
 800f874:	2b00      	cmp	r3, #0
 800f876:	d07f      	beq.n	800f978 <USBD_StdEPReq+0x156>
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d03c      	beq.n	800f8f6 <USBD_StdEPReq+0xd4>
 800f87c:	e123      	b.n	800fac6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f884:	b2db      	uxtb	r3, r3
 800f886:	2b02      	cmp	r3, #2
 800f888:	d002      	beq.n	800f890 <USBD_StdEPReq+0x6e>
 800f88a:	2b03      	cmp	r3, #3
 800f88c:	d016      	beq.n	800f8bc <USBD_StdEPReq+0x9a>
 800f88e:	e02c      	b.n	800f8ea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f890:	7bbb      	ldrb	r3, [r7, #14]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d00d      	beq.n	800f8b2 <USBD_StdEPReq+0x90>
 800f896:	7bbb      	ldrb	r3, [r7, #14]
 800f898:	2b80      	cmp	r3, #128	@ 0x80
 800f89a:	d00a      	beq.n	800f8b2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f89c:	7bbb      	ldrb	r3, [r7, #14]
 800f89e:	4619      	mov	r1, r3
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f001 f92d 	bl	8010b00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f8a6:	2180      	movs	r1, #128	@ 0x80
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f001 f929 	bl	8010b00 <USBD_LL_StallEP>
 800f8ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f8b0:	e020      	b.n	800f8f4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f8b2:	6839      	ldr	r1, [r7, #0]
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f000 fc6f 	bl	8010198 <USBD_CtlError>
              break;
 800f8ba:	e01b      	b.n	800f8f4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	885b      	ldrh	r3, [r3, #2]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d10e      	bne.n	800f8e2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f8c4:	7bbb      	ldrb	r3, [r7, #14]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d00b      	beq.n	800f8e2 <USBD_StdEPReq+0xc0>
 800f8ca:	7bbb      	ldrb	r3, [r7, #14]
 800f8cc:	2b80      	cmp	r3, #128	@ 0x80
 800f8ce:	d008      	beq.n	800f8e2 <USBD_StdEPReq+0xc0>
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	88db      	ldrh	r3, [r3, #6]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d104      	bne.n	800f8e2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f8d8:	7bbb      	ldrb	r3, [r7, #14]
 800f8da:	4619      	mov	r1, r3
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f001 f90f 	bl	8010b00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f000 fd23 	bl	801032e <USBD_CtlSendStatus>

              break;
 800f8e8:	e004      	b.n	800f8f4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f8ea:	6839      	ldr	r1, [r7, #0]
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f000 fc53 	bl	8010198 <USBD_CtlError>
              break;
 800f8f2:	bf00      	nop
          }
          break;
 800f8f4:	e0ec      	b.n	800fad0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8fc:	b2db      	uxtb	r3, r3
 800f8fe:	2b02      	cmp	r3, #2
 800f900:	d002      	beq.n	800f908 <USBD_StdEPReq+0xe6>
 800f902:	2b03      	cmp	r3, #3
 800f904:	d016      	beq.n	800f934 <USBD_StdEPReq+0x112>
 800f906:	e030      	b.n	800f96a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f908:	7bbb      	ldrb	r3, [r7, #14]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d00d      	beq.n	800f92a <USBD_StdEPReq+0x108>
 800f90e:	7bbb      	ldrb	r3, [r7, #14]
 800f910:	2b80      	cmp	r3, #128	@ 0x80
 800f912:	d00a      	beq.n	800f92a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f914:	7bbb      	ldrb	r3, [r7, #14]
 800f916:	4619      	mov	r1, r3
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f001 f8f1 	bl	8010b00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f91e:	2180      	movs	r1, #128	@ 0x80
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f001 f8ed 	bl	8010b00 <USBD_LL_StallEP>
 800f926:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f928:	e025      	b.n	800f976 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f92a:	6839      	ldr	r1, [r7, #0]
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f000 fc33 	bl	8010198 <USBD_CtlError>
              break;
 800f932:	e020      	b.n	800f976 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	885b      	ldrh	r3, [r3, #2]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d11b      	bne.n	800f974 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f93c:	7bbb      	ldrb	r3, [r7, #14]
 800f93e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f942:	2b00      	cmp	r3, #0
 800f944:	d004      	beq.n	800f950 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f946:	7bbb      	ldrb	r3, [r7, #14]
 800f948:	4619      	mov	r1, r3
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f001 f8f7 	bl	8010b3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f000 fcec 	bl	801032e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f95c:	689b      	ldr	r3, [r3, #8]
 800f95e:	6839      	ldr	r1, [r7, #0]
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	4798      	blx	r3
 800f964:	4603      	mov	r3, r0
 800f966:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f968:	e004      	b.n	800f974 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f96a:	6839      	ldr	r1, [r7, #0]
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f000 fc13 	bl	8010198 <USBD_CtlError>
              break;
 800f972:	e000      	b.n	800f976 <USBD_StdEPReq+0x154>
              break;
 800f974:	bf00      	nop
          }
          break;
 800f976:	e0ab      	b.n	800fad0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f97e:	b2db      	uxtb	r3, r3
 800f980:	2b02      	cmp	r3, #2
 800f982:	d002      	beq.n	800f98a <USBD_StdEPReq+0x168>
 800f984:	2b03      	cmp	r3, #3
 800f986:	d032      	beq.n	800f9ee <USBD_StdEPReq+0x1cc>
 800f988:	e097      	b.n	800faba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f98a:	7bbb      	ldrb	r3, [r7, #14]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d007      	beq.n	800f9a0 <USBD_StdEPReq+0x17e>
 800f990:	7bbb      	ldrb	r3, [r7, #14]
 800f992:	2b80      	cmp	r3, #128	@ 0x80
 800f994:	d004      	beq.n	800f9a0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f996:	6839      	ldr	r1, [r7, #0]
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 fbfd 	bl	8010198 <USBD_CtlError>
                break;
 800f99e:	e091      	b.n	800fac4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f9a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	da0b      	bge.n	800f9c0 <USBD_StdEPReq+0x19e>
 800f9a8:	7bbb      	ldrb	r3, [r7, #14]
 800f9aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	4413      	add	r3, r2
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	3310      	adds	r3, #16
 800f9b8:	687a      	ldr	r2, [r7, #4]
 800f9ba:	4413      	add	r3, r2
 800f9bc:	3304      	adds	r3, #4
 800f9be:	e00b      	b.n	800f9d8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f9c0:	7bbb      	ldrb	r3, [r7, #14]
 800f9c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f9c6:	4613      	mov	r3, r2
 800f9c8:	009b      	lsls	r3, r3, #2
 800f9ca:	4413      	add	r3, r2
 800f9cc:	009b      	lsls	r3, r3, #2
 800f9ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	4413      	add	r3, r2
 800f9d6:	3304      	adds	r3, #4
 800f9d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	2202      	movs	r2, #2
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 fc47 	bl	801027a <USBD_CtlSendData>
              break;
 800f9ec:	e06a      	b.n	800fac4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f9ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	da11      	bge.n	800fa1a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f9f6:	7bbb      	ldrb	r3, [r7, #14]
 800f9f8:	f003 020f 	and.w	r2, r3, #15
 800f9fc:	6879      	ldr	r1, [r7, #4]
 800f9fe:	4613      	mov	r3, r2
 800fa00:	009b      	lsls	r3, r3, #2
 800fa02:	4413      	add	r3, r2
 800fa04:	009b      	lsls	r3, r3, #2
 800fa06:	440b      	add	r3, r1
 800fa08:	3324      	adds	r3, #36	@ 0x24
 800fa0a:	881b      	ldrh	r3, [r3, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d117      	bne.n	800fa40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fa10:	6839      	ldr	r1, [r7, #0]
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 fbc0 	bl	8010198 <USBD_CtlError>
                  break;
 800fa18:	e054      	b.n	800fac4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fa1a:	7bbb      	ldrb	r3, [r7, #14]
 800fa1c:	f003 020f 	and.w	r2, r3, #15
 800fa20:	6879      	ldr	r1, [r7, #4]
 800fa22:	4613      	mov	r3, r2
 800fa24:	009b      	lsls	r3, r3, #2
 800fa26:	4413      	add	r3, r2
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	440b      	add	r3, r1
 800fa2c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fa30:	881b      	ldrh	r3, [r3, #0]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d104      	bne.n	800fa40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fa36:	6839      	ldr	r1, [r7, #0]
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f000 fbad 	bl	8010198 <USBD_CtlError>
                  break;
 800fa3e:	e041      	b.n	800fac4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	da0b      	bge.n	800fa60 <USBD_StdEPReq+0x23e>
 800fa48:	7bbb      	ldrb	r3, [r7, #14]
 800fa4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fa4e:	4613      	mov	r3, r2
 800fa50:	009b      	lsls	r3, r3, #2
 800fa52:	4413      	add	r3, r2
 800fa54:	009b      	lsls	r3, r3, #2
 800fa56:	3310      	adds	r3, #16
 800fa58:	687a      	ldr	r2, [r7, #4]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	3304      	adds	r3, #4
 800fa5e:	e00b      	b.n	800fa78 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fa60:	7bbb      	ldrb	r3, [r7, #14]
 800fa62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa66:	4613      	mov	r3, r2
 800fa68:	009b      	lsls	r3, r3, #2
 800fa6a:	4413      	add	r3, r2
 800fa6c:	009b      	lsls	r3, r3, #2
 800fa6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fa72:	687a      	ldr	r2, [r7, #4]
 800fa74:	4413      	add	r3, r2
 800fa76:	3304      	adds	r3, #4
 800fa78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fa7a:	7bbb      	ldrb	r3, [r7, #14]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d002      	beq.n	800fa86 <USBD_StdEPReq+0x264>
 800fa80:	7bbb      	ldrb	r3, [r7, #14]
 800fa82:	2b80      	cmp	r3, #128	@ 0x80
 800fa84:	d103      	bne.n	800fa8e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	601a      	str	r2, [r3, #0]
 800fa8c:	e00e      	b.n	800faac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fa8e:	7bbb      	ldrb	r3, [r7, #14]
 800fa90:	4619      	mov	r1, r3
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f001 f872 	bl	8010b7c <USBD_LL_IsStallEP>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d003      	beq.n	800faa6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	2201      	movs	r2, #1
 800faa2:	601a      	str	r2, [r3, #0]
 800faa4:	e002      	b.n	800faac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	2200      	movs	r2, #0
 800faaa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	2202      	movs	r2, #2
 800fab0:	4619      	mov	r1, r3
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f000 fbe1 	bl	801027a <USBD_CtlSendData>
              break;
 800fab8:	e004      	b.n	800fac4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800faba:	6839      	ldr	r1, [r7, #0]
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 fb6b 	bl	8010198 <USBD_CtlError>
              break;
 800fac2:	bf00      	nop
          }
          break;
 800fac4:	e004      	b.n	800fad0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800fac6:	6839      	ldr	r1, [r7, #0]
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f000 fb65 	bl	8010198 <USBD_CtlError>
          break;
 800face:	bf00      	nop
      }
      break;
 800fad0:	e004      	b.n	800fadc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800fad2:	6839      	ldr	r1, [r7, #0]
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 fb5f 	bl	8010198 <USBD_CtlError>
      break;
 800fada:	bf00      	nop
  }

  return ret;
 800fadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3710      	adds	r7, #16
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
	...

0800fae8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800faf2:	2300      	movs	r3, #0
 800faf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800faf6:	2300      	movs	r3, #0
 800faf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fafa:	2300      	movs	r3, #0
 800fafc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	885b      	ldrh	r3, [r3, #2]
 800fb02:	0a1b      	lsrs	r3, r3, #8
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	3b01      	subs	r3, #1
 800fb08:	2b0e      	cmp	r3, #14
 800fb0a:	f200 8152 	bhi.w	800fdb2 <USBD_GetDescriptor+0x2ca>
 800fb0e:	a201      	add	r2, pc, #4	@ (adr r2, 800fb14 <USBD_GetDescriptor+0x2c>)
 800fb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb14:	0800fb85 	.word	0x0800fb85
 800fb18:	0800fb9d 	.word	0x0800fb9d
 800fb1c:	0800fbdd 	.word	0x0800fbdd
 800fb20:	0800fdb3 	.word	0x0800fdb3
 800fb24:	0800fdb3 	.word	0x0800fdb3
 800fb28:	0800fd53 	.word	0x0800fd53
 800fb2c:	0800fd7f 	.word	0x0800fd7f
 800fb30:	0800fdb3 	.word	0x0800fdb3
 800fb34:	0800fdb3 	.word	0x0800fdb3
 800fb38:	0800fdb3 	.word	0x0800fdb3
 800fb3c:	0800fdb3 	.word	0x0800fdb3
 800fb40:	0800fdb3 	.word	0x0800fdb3
 800fb44:	0800fdb3 	.word	0x0800fdb3
 800fb48:	0800fdb3 	.word	0x0800fdb3
 800fb4c:	0800fb51 	.word	0x0800fb51
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb56:	69db      	ldr	r3, [r3, #28]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00b      	beq.n	800fb74 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb62:	69db      	ldr	r3, [r3, #28]
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	7c12      	ldrb	r2, [r2, #16]
 800fb68:	f107 0108 	add.w	r1, r7, #8
 800fb6c:	4610      	mov	r0, r2
 800fb6e:	4798      	blx	r3
 800fb70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb72:	e126      	b.n	800fdc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fb74:	6839      	ldr	r1, [r7, #0]
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 fb0e 	bl	8010198 <USBD_CtlError>
        err++;
 800fb7c:	7afb      	ldrb	r3, [r7, #11]
 800fb7e:	3301      	adds	r3, #1
 800fb80:	72fb      	strb	r3, [r7, #11]
      break;
 800fb82:	e11e      	b.n	800fdc2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	7c12      	ldrb	r2, [r2, #16]
 800fb90:	f107 0108 	add.w	r1, r7, #8
 800fb94:	4610      	mov	r0, r2
 800fb96:	4798      	blx	r3
 800fb98:	60f8      	str	r0, [r7, #12]
      break;
 800fb9a:	e112      	b.n	800fdc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	7c1b      	ldrb	r3, [r3, #16]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d10d      	bne.n	800fbc0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fbaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbac:	f107 0208 	add.w	r2, r7, #8
 800fbb0:	4610      	mov	r0, r2
 800fbb2:	4798      	blx	r3
 800fbb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	2202      	movs	r2, #2
 800fbbc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fbbe:	e100      	b.n	800fdc2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fbc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbc8:	f107 0208 	add.w	r2, r7, #8
 800fbcc:	4610      	mov	r0, r2
 800fbce:	4798      	blx	r3
 800fbd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	3301      	adds	r3, #1
 800fbd6:	2202      	movs	r2, #2
 800fbd8:	701a      	strb	r2, [r3, #0]
      break;
 800fbda:	e0f2      	b.n	800fdc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	885b      	ldrh	r3, [r3, #2]
 800fbe0:	b2db      	uxtb	r3, r3
 800fbe2:	2b05      	cmp	r3, #5
 800fbe4:	f200 80ac 	bhi.w	800fd40 <USBD_GetDescriptor+0x258>
 800fbe8:	a201      	add	r2, pc, #4	@ (adr r2, 800fbf0 <USBD_GetDescriptor+0x108>)
 800fbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbee:	bf00      	nop
 800fbf0:	0800fc09 	.word	0x0800fc09
 800fbf4:	0800fc3d 	.word	0x0800fc3d
 800fbf8:	0800fc71 	.word	0x0800fc71
 800fbfc:	0800fca5 	.word	0x0800fca5
 800fc00:	0800fcd9 	.word	0x0800fcd9
 800fc04:	0800fd0d 	.word	0x0800fd0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc0e:	685b      	ldr	r3, [r3, #4]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d00b      	beq.n	800fc2c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	687a      	ldr	r2, [r7, #4]
 800fc1e:	7c12      	ldrb	r2, [r2, #16]
 800fc20:	f107 0108 	add.w	r1, r7, #8
 800fc24:	4610      	mov	r0, r2
 800fc26:	4798      	blx	r3
 800fc28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc2a:	e091      	b.n	800fd50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc2c:	6839      	ldr	r1, [r7, #0]
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	f000 fab2 	bl	8010198 <USBD_CtlError>
            err++;
 800fc34:	7afb      	ldrb	r3, [r7, #11]
 800fc36:	3301      	adds	r3, #1
 800fc38:	72fb      	strb	r3, [r7, #11]
          break;
 800fc3a:	e089      	b.n	800fd50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc42:	689b      	ldr	r3, [r3, #8]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d00b      	beq.n	800fc60 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc4e:	689b      	ldr	r3, [r3, #8]
 800fc50:	687a      	ldr	r2, [r7, #4]
 800fc52:	7c12      	ldrb	r2, [r2, #16]
 800fc54:	f107 0108 	add.w	r1, r7, #8
 800fc58:	4610      	mov	r0, r2
 800fc5a:	4798      	blx	r3
 800fc5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc5e:	e077      	b.n	800fd50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc60:	6839      	ldr	r1, [r7, #0]
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f000 fa98 	bl	8010198 <USBD_CtlError>
            err++;
 800fc68:	7afb      	ldrb	r3, [r7, #11]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	72fb      	strb	r3, [r7, #11]
          break;
 800fc6e:	e06f      	b.n	800fd50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d00b      	beq.n	800fc94 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	7c12      	ldrb	r2, [r2, #16]
 800fc88:	f107 0108 	add.w	r1, r7, #8
 800fc8c:	4610      	mov	r0, r2
 800fc8e:	4798      	blx	r3
 800fc90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc92:	e05d      	b.n	800fd50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc94:	6839      	ldr	r1, [r7, #0]
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f000 fa7e 	bl	8010198 <USBD_CtlError>
            err++;
 800fc9c:	7afb      	ldrb	r3, [r7, #11]
 800fc9e:	3301      	adds	r3, #1
 800fca0:	72fb      	strb	r3, [r7, #11]
          break;
 800fca2:	e055      	b.n	800fd50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fcaa:	691b      	ldr	r3, [r3, #16]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d00b      	beq.n	800fcc8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fcb6:	691b      	ldr	r3, [r3, #16]
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	7c12      	ldrb	r2, [r2, #16]
 800fcbc:	f107 0108 	add.w	r1, r7, #8
 800fcc0:	4610      	mov	r0, r2
 800fcc2:	4798      	blx	r3
 800fcc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcc6:	e043      	b.n	800fd50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fcc8:	6839      	ldr	r1, [r7, #0]
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 fa64 	bl	8010198 <USBD_CtlError>
            err++;
 800fcd0:	7afb      	ldrb	r3, [r7, #11]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	72fb      	strb	r3, [r7, #11]
          break;
 800fcd6:	e03b      	b.n	800fd50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fcde:	695b      	ldr	r3, [r3, #20]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d00b      	beq.n	800fcfc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fcea:	695b      	ldr	r3, [r3, #20]
 800fcec:	687a      	ldr	r2, [r7, #4]
 800fcee:	7c12      	ldrb	r2, [r2, #16]
 800fcf0:	f107 0108 	add.w	r1, r7, #8
 800fcf4:	4610      	mov	r0, r2
 800fcf6:	4798      	blx	r3
 800fcf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcfa:	e029      	b.n	800fd50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fcfc:	6839      	ldr	r1, [r7, #0]
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 fa4a 	bl	8010198 <USBD_CtlError>
            err++;
 800fd04:	7afb      	ldrb	r3, [r7, #11]
 800fd06:	3301      	adds	r3, #1
 800fd08:	72fb      	strb	r3, [r7, #11]
          break;
 800fd0a:	e021      	b.n	800fd50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd12:	699b      	ldr	r3, [r3, #24]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d00b      	beq.n	800fd30 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd1e:	699b      	ldr	r3, [r3, #24]
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	7c12      	ldrb	r2, [r2, #16]
 800fd24:	f107 0108 	add.w	r1, r7, #8
 800fd28:	4610      	mov	r0, r2
 800fd2a:	4798      	blx	r3
 800fd2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd2e:	e00f      	b.n	800fd50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd30:	6839      	ldr	r1, [r7, #0]
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f000 fa30 	bl	8010198 <USBD_CtlError>
            err++;
 800fd38:	7afb      	ldrb	r3, [r7, #11]
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	72fb      	strb	r3, [r7, #11]
          break;
 800fd3e:	e007      	b.n	800fd50 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fd40:	6839      	ldr	r1, [r7, #0]
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 fa28 	bl	8010198 <USBD_CtlError>
          err++;
 800fd48:	7afb      	ldrb	r3, [r7, #11]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800fd4e:	bf00      	nop
      }
      break;
 800fd50:	e037      	b.n	800fdc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	7c1b      	ldrb	r3, [r3, #16]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d109      	bne.n	800fd6e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd62:	f107 0208 	add.w	r2, r7, #8
 800fd66:	4610      	mov	r0, r2
 800fd68:	4798      	blx	r3
 800fd6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd6c:	e029      	b.n	800fdc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fd6e:	6839      	ldr	r1, [r7, #0]
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f000 fa11 	bl	8010198 <USBD_CtlError>
        err++;
 800fd76:	7afb      	ldrb	r3, [r7, #11]
 800fd78:	3301      	adds	r3, #1
 800fd7a:	72fb      	strb	r3, [r7, #11]
      break;
 800fd7c:	e021      	b.n	800fdc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	7c1b      	ldrb	r3, [r3, #16]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d10d      	bne.n	800fda2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd8e:	f107 0208 	add.w	r2, r7, #8
 800fd92:	4610      	mov	r0, r2
 800fd94:	4798      	blx	r3
 800fd96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	3301      	adds	r3, #1
 800fd9c:	2207      	movs	r2, #7
 800fd9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fda0:	e00f      	b.n	800fdc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fda2:	6839      	ldr	r1, [r7, #0]
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f000 f9f7 	bl	8010198 <USBD_CtlError>
        err++;
 800fdaa:	7afb      	ldrb	r3, [r7, #11]
 800fdac:	3301      	adds	r3, #1
 800fdae:	72fb      	strb	r3, [r7, #11]
      break;
 800fdb0:	e007      	b.n	800fdc2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fdb2:	6839      	ldr	r1, [r7, #0]
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f000 f9ef 	bl	8010198 <USBD_CtlError>
      err++;
 800fdba:	7afb      	ldrb	r3, [r7, #11]
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	72fb      	strb	r3, [r7, #11]
      break;
 800fdc0:	bf00      	nop
  }

  if (err != 0U)
 800fdc2:	7afb      	ldrb	r3, [r7, #11]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d11e      	bne.n	800fe06 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	88db      	ldrh	r3, [r3, #6]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d016      	beq.n	800fdfe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fdd0:	893b      	ldrh	r3, [r7, #8]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d00e      	beq.n	800fdf4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	88da      	ldrh	r2, [r3, #6]
 800fdda:	893b      	ldrh	r3, [r7, #8]
 800fddc:	4293      	cmp	r3, r2
 800fdde:	bf28      	it	cs
 800fde0:	4613      	movcs	r3, r2
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fde6:	893b      	ldrh	r3, [r7, #8]
 800fde8:	461a      	mov	r2, r3
 800fdea:	68f9      	ldr	r1, [r7, #12]
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f000 fa44 	bl	801027a <USBD_CtlSendData>
 800fdf2:	e009      	b.n	800fe08 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fdf4:	6839      	ldr	r1, [r7, #0]
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f000 f9ce 	bl	8010198 <USBD_CtlError>
 800fdfc:	e004      	b.n	800fe08 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f000 fa95 	bl	801032e <USBD_CtlSendStatus>
 800fe04:	e000      	b.n	800fe08 <USBD_GetDescriptor+0x320>
    return;
 800fe06:	bf00      	nop
  }
}
 800fe08:	3710      	adds	r7, #16
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop

0800fe10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	889b      	ldrh	r3, [r3, #4]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d131      	bne.n	800fe86 <USBD_SetAddress+0x76>
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	88db      	ldrh	r3, [r3, #6]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d12d      	bne.n	800fe86 <USBD_SetAddress+0x76>
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	885b      	ldrh	r3, [r3, #2]
 800fe2e:	2b7f      	cmp	r3, #127	@ 0x7f
 800fe30:	d829      	bhi.n	800fe86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	885b      	ldrh	r3, [r3, #2]
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe44:	b2db      	uxtb	r3, r3
 800fe46:	2b03      	cmp	r3, #3
 800fe48:	d104      	bne.n	800fe54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fe4a:	6839      	ldr	r1, [r7, #0]
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f000 f9a3 	bl	8010198 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe52:	e01d      	b.n	800fe90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	7bfa      	ldrb	r2, [r7, #15]
 800fe58:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fe5c:	7bfb      	ldrb	r3, [r7, #15]
 800fe5e:	4619      	mov	r1, r3
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f000 feb7 	bl	8010bd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f000 fa61 	bl	801032e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fe6c:	7bfb      	ldrb	r3, [r7, #15]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d004      	beq.n	800fe7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2202      	movs	r2, #2
 800fe76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe7a:	e009      	b.n	800fe90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2201      	movs	r2, #1
 800fe80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe84:	e004      	b.n	800fe90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fe86:	6839      	ldr	r1, [r7, #0]
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 f985 	bl	8010198 <USBD_CtlError>
  }
}
 800fe8e:	bf00      	nop
 800fe90:	bf00      	nop
 800fe92:	3710      	adds	r7, #16
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}

0800fe98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fea2:	2300      	movs	r3, #0
 800fea4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	885b      	ldrh	r3, [r3, #2]
 800feaa:	b2da      	uxtb	r2, r3
 800feac:	4b4c      	ldr	r3, [pc, #304]	@ (800ffe0 <USBD_SetConfig+0x148>)
 800feae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800feb0:	4b4b      	ldr	r3, [pc, #300]	@ (800ffe0 <USBD_SetConfig+0x148>)
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	d905      	bls.n	800fec4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800feb8:	6839      	ldr	r1, [r7, #0]
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f000 f96c 	bl	8010198 <USBD_CtlError>
    return USBD_FAIL;
 800fec0:	2303      	movs	r3, #3
 800fec2:	e088      	b.n	800ffd6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800feca:	b2db      	uxtb	r3, r3
 800fecc:	2b02      	cmp	r3, #2
 800fece:	d002      	beq.n	800fed6 <USBD_SetConfig+0x3e>
 800fed0:	2b03      	cmp	r3, #3
 800fed2:	d025      	beq.n	800ff20 <USBD_SetConfig+0x88>
 800fed4:	e071      	b.n	800ffba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fed6:	4b42      	ldr	r3, [pc, #264]	@ (800ffe0 <USBD_SetConfig+0x148>)
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d01c      	beq.n	800ff18 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800fede:	4b40      	ldr	r3, [pc, #256]	@ (800ffe0 <USBD_SetConfig+0x148>)
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	461a      	mov	r2, r3
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fee8:	4b3d      	ldr	r3, [pc, #244]	@ (800ffe0 <USBD_SetConfig+0x148>)
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	4619      	mov	r1, r3
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f7ff f992 	bl	800f218 <USBD_SetClassConfig>
 800fef4:	4603      	mov	r3, r0
 800fef6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fef8:	7bfb      	ldrb	r3, [r7, #15]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d004      	beq.n	800ff08 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800fefe:	6839      	ldr	r1, [r7, #0]
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f000 f949 	bl	8010198 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ff06:	e065      	b.n	800ffd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f000 fa10 	bl	801032e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2203      	movs	r2, #3
 800ff12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ff16:	e05d      	b.n	800ffd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f000 fa08 	bl	801032e <USBD_CtlSendStatus>
      break;
 800ff1e:	e059      	b.n	800ffd4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ff20:	4b2f      	ldr	r3, [pc, #188]	@ (800ffe0 <USBD_SetConfig+0x148>)
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d112      	bne.n	800ff4e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2202      	movs	r2, #2
 800ff2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ff30:	4b2b      	ldr	r3, [pc, #172]	@ (800ffe0 <USBD_SetConfig+0x148>)
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	461a      	mov	r2, r3
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff3a:	4b29      	ldr	r3, [pc, #164]	@ (800ffe0 <USBD_SetConfig+0x148>)
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	4619      	mov	r1, r3
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f7ff f985 	bl	800f250 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f000 f9f1 	bl	801032e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ff4c:	e042      	b.n	800ffd4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ff4e:	4b24      	ldr	r3, [pc, #144]	@ (800ffe0 <USBD_SetConfig+0x148>)
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	461a      	mov	r2, r3
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d02a      	beq.n	800ffb2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	685b      	ldr	r3, [r3, #4]
 800ff60:	b2db      	uxtb	r3, r3
 800ff62:	4619      	mov	r1, r3
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f7ff f973 	bl	800f250 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ff6a:	4b1d      	ldr	r3, [pc, #116]	@ (800ffe0 <USBD_SetConfig+0x148>)
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	461a      	mov	r2, r3
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff74:	4b1a      	ldr	r3, [pc, #104]	@ (800ffe0 <USBD_SetConfig+0x148>)
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	4619      	mov	r1, r3
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f7ff f94c 	bl	800f218 <USBD_SetClassConfig>
 800ff80:	4603      	mov	r3, r0
 800ff82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ff84:	7bfb      	ldrb	r3, [r7, #15]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00f      	beq.n	800ffaa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ff8a:	6839      	ldr	r1, [r7, #0]
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 f903 	bl	8010198 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	b2db      	uxtb	r3, r3
 800ff98:	4619      	mov	r1, r3
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f7ff f958 	bl	800f250 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2202      	movs	r2, #2
 800ffa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ffa8:	e014      	b.n	800ffd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f000 f9bf 	bl	801032e <USBD_CtlSendStatus>
      break;
 800ffb0:	e010      	b.n	800ffd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 f9bb 	bl	801032e <USBD_CtlSendStatus>
      break;
 800ffb8:	e00c      	b.n	800ffd4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ffba:	6839      	ldr	r1, [r7, #0]
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f000 f8eb 	bl	8010198 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ffc2:	4b07      	ldr	r3, [pc, #28]	@ (800ffe0 <USBD_SetConfig+0x148>)
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f7ff f941 	bl	800f250 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ffce:	2303      	movs	r3, #3
 800ffd0:	73fb      	strb	r3, [r7, #15]
      break;
 800ffd2:	bf00      	nop
  }

  return ret;
 800ffd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3710      	adds	r7, #16
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}
 800ffde:	bf00      	nop
 800ffe0:	20000bb8 	.word	0x20000bb8

0800ffe4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	88db      	ldrh	r3, [r3, #6]
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	d004      	beq.n	8010000 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fff6:	6839      	ldr	r1, [r7, #0]
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 f8cd 	bl	8010198 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fffe:	e023      	b.n	8010048 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010006:	b2db      	uxtb	r3, r3
 8010008:	2b02      	cmp	r3, #2
 801000a:	dc02      	bgt.n	8010012 <USBD_GetConfig+0x2e>
 801000c:	2b00      	cmp	r3, #0
 801000e:	dc03      	bgt.n	8010018 <USBD_GetConfig+0x34>
 8010010:	e015      	b.n	801003e <USBD_GetConfig+0x5a>
 8010012:	2b03      	cmp	r3, #3
 8010014:	d00b      	beq.n	801002e <USBD_GetConfig+0x4a>
 8010016:	e012      	b.n	801003e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2200      	movs	r2, #0
 801001c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	3308      	adds	r3, #8
 8010022:	2201      	movs	r2, #1
 8010024:	4619      	mov	r1, r3
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f000 f927 	bl	801027a <USBD_CtlSendData>
        break;
 801002c:	e00c      	b.n	8010048 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	3304      	adds	r3, #4
 8010032:	2201      	movs	r2, #1
 8010034:	4619      	mov	r1, r3
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f000 f91f 	bl	801027a <USBD_CtlSendData>
        break;
 801003c:	e004      	b.n	8010048 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801003e:	6839      	ldr	r1, [r7, #0]
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f000 f8a9 	bl	8010198 <USBD_CtlError>
        break;
 8010046:	bf00      	nop
}
 8010048:	bf00      	nop
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010060:	b2db      	uxtb	r3, r3
 8010062:	3b01      	subs	r3, #1
 8010064:	2b02      	cmp	r3, #2
 8010066:	d81e      	bhi.n	80100a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	88db      	ldrh	r3, [r3, #6]
 801006c:	2b02      	cmp	r3, #2
 801006e:	d004      	beq.n	801007a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010070:	6839      	ldr	r1, [r7, #0]
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 f890 	bl	8010198 <USBD_CtlError>
        break;
 8010078:	e01a      	b.n	80100b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2201      	movs	r2, #1
 801007e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010086:	2b00      	cmp	r3, #0
 8010088:	d005      	beq.n	8010096 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	f043 0202 	orr.w	r2, r3, #2
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	330c      	adds	r3, #12
 801009a:	2202      	movs	r2, #2
 801009c:	4619      	mov	r1, r3
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f000 f8eb 	bl	801027a <USBD_CtlSendData>
      break;
 80100a4:	e004      	b.n	80100b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80100a6:	6839      	ldr	r1, [r7, #0]
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f000 f875 	bl	8010198 <USBD_CtlError>
      break;
 80100ae:	bf00      	nop
  }
}
 80100b0:	bf00      	nop
 80100b2:	3708      	adds	r7, #8
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	885b      	ldrh	r3, [r3, #2]
 80100c6:	2b01      	cmp	r3, #1
 80100c8:	d106      	bne.n	80100d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2201      	movs	r2, #1
 80100ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f000 f92b 	bl	801032e <USBD_CtlSendStatus>
  }
}
 80100d8:	bf00      	nop
 80100da:	3708      	adds	r7, #8
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b082      	sub	sp, #8
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	3b01      	subs	r3, #1
 80100f4:	2b02      	cmp	r3, #2
 80100f6:	d80b      	bhi.n	8010110 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	885b      	ldrh	r3, [r3, #2]
 80100fc:	2b01      	cmp	r3, #1
 80100fe:	d10c      	bne.n	801011a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2200      	movs	r2, #0
 8010104:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f000 f910 	bl	801032e <USBD_CtlSendStatus>
      }
      break;
 801010e:	e004      	b.n	801011a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010110:	6839      	ldr	r1, [r7, #0]
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f000 f840 	bl	8010198 <USBD_CtlError>
      break;
 8010118:	e000      	b.n	801011c <USBD_ClrFeature+0x3c>
      break;
 801011a:	bf00      	nop
  }
}
 801011c:	bf00      	nop
 801011e:	3708      	adds	r7, #8
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}

08010124 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b084      	sub	sp, #16
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	781a      	ldrb	r2, [r3, #0]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	3301      	adds	r3, #1
 801013e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	781a      	ldrb	r2, [r3, #0]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	3301      	adds	r3, #1
 801014c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801014e:	68f8      	ldr	r0, [r7, #12]
 8010150:	f7ff fa92 	bl	800f678 <SWAPBYTE>
 8010154:	4603      	mov	r3, r0
 8010156:	461a      	mov	r2, r3
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	3301      	adds	r3, #1
 8010160:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	3301      	adds	r3, #1
 8010166:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010168:	68f8      	ldr	r0, [r7, #12]
 801016a:	f7ff fa85 	bl	800f678 <SWAPBYTE>
 801016e:	4603      	mov	r3, r0
 8010170:	461a      	mov	r2, r3
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	3301      	adds	r3, #1
 801017a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	3301      	adds	r3, #1
 8010180:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010182:	68f8      	ldr	r0, [r7, #12]
 8010184:	f7ff fa78 	bl	800f678 <SWAPBYTE>
 8010188:	4603      	mov	r3, r0
 801018a:	461a      	mov	r2, r3
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	80da      	strh	r2, [r3, #6]
}
 8010190:	bf00      	nop
 8010192:	3710      	adds	r7, #16
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}

08010198 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80101a2:	2180      	movs	r1, #128	@ 0x80
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f000 fcab 	bl	8010b00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80101aa:	2100      	movs	r1, #0
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f000 fca7 	bl	8010b00 <USBD_LL_StallEP>
}
 80101b2:	bf00      	nop
 80101b4:	3708      	adds	r7, #8
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}

080101ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b086      	sub	sp, #24
 80101be:	af00      	add	r7, sp, #0
 80101c0:	60f8      	str	r0, [r7, #12]
 80101c2:	60b9      	str	r1, [r7, #8]
 80101c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80101c6:	2300      	movs	r3, #0
 80101c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d036      	beq.n	801023e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80101d4:	6938      	ldr	r0, [r7, #16]
 80101d6:	f000 f836 	bl	8010246 <USBD_GetLen>
 80101da:	4603      	mov	r3, r0
 80101dc:	3301      	adds	r3, #1
 80101de:	b29b      	uxth	r3, r3
 80101e0:	005b      	lsls	r3, r3, #1
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80101e8:	7dfb      	ldrb	r3, [r7, #23]
 80101ea:	68ba      	ldr	r2, [r7, #8]
 80101ec:	4413      	add	r3, r2
 80101ee:	687a      	ldr	r2, [r7, #4]
 80101f0:	7812      	ldrb	r2, [r2, #0]
 80101f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80101f4:	7dfb      	ldrb	r3, [r7, #23]
 80101f6:	3301      	adds	r3, #1
 80101f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80101fa:	7dfb      	ldrb	r3, [r7, #23]
 80101fc:	68ba      	ldr	r2, [r7, #8]
 80101fe:	4413      	add	r3, r2
 8010200:	2203      	movs	r2, #3
 8010202:	701a      	strb	r2, [r3, #0]
  idx++;
 8010204:	7dfb      	ldrb	r3, [r7, #23]
 8010206:	3301      	adds	r3, #1
 8010208:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801020a:	e013      	b.n	8010234 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801020c:	7dfb      	ldrb	r3, [r7, #23]
 801020e:	68ba      	ldr	r2, [r7, #8]
 8010210:	4413      	add	r3, r2
 8010212:	693a      	ldr	r2, [r7, #16]
 8010214:	7812      	ldrb	r2, [r2, #0]
 8010216:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	3301      	adds	r3, #1
 801021c:	613b      	str	r3, [r7, #16]
    idx++;
 801021e:	7dfb      	ldrb	r3, [r7, #23]
 8010220:	3301      	adds	r3, #1
 8010222:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010224:	7dfb      	ldrb	r3, [r7, #23]
 8010226:	68ba      	ldr	r2, [r7, #8]
 8010228:	4413      	add	r3, r2
 801022a:	2200      	movs	r2, #0
 801022c:	701a      	strb	r2, [r3, #0]
    idx++;
 801022e:	7dfb      	ldrb	r3, [r7, #23]
 8010230:	3301      	adds	r3, #1
 8010232:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	781b      	ldrb	r3, [r3, #0]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d1e7      	bne.n	801020c <USBD_GetString+0x52>
 801023c:	e000      	b.n	8010240 <USBD_GetString+0x86>
    return;
 801023e:	bf00      	nop
  }
}
 8010240:	3718      	adds	r7, #24
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}

08010246 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010246:	b480      	push	{r7}
 8010248:	b085      	sub	sp, #20
 801024a:	af00      	add	r7, sp, #0
 801024c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801024e:	2300      	movs	r3, #0
 8010250:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010256:	e005      	b.n	8010264 <USBD_GetLen+0x1e>
  {
    len++;
 8010258:	7bfb      	ldrb	r3, [r7, #15]
 801025a:	3301      	adds	r3, #1
 801025c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	3301      	adds	r3, #1
 8010262:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d1f5      	bne.n	8010258 <USBD_GetLen+0x12>
  }

  return len;
 801026c:	7bfb      	ldrb	r3, [r7, #15]
}
 801026e:	4618      	mov	r0, r3
 8010270:	3714      	adds	r7, #20
 8010272:	46bd      	mov	sp, r7
 8010274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010278:	4770      	bx	lr

0801027a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801027a:	b580      	push	{r7, lr}
 801027c:	b084      	sub	sp, #16
 801027e:	af00      	add	r7, sp, #0
 8010280:	60f8      	str	r0, [r7, #12]
 8010282:	60b9      	str	r1, [r7, #8]
 8010284:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	2202      	movs	r2, #2
 801028a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	687a      	ldr	r2, [r7, #4]
 8010298:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	68ba      	ldr	r2, [r7, #8]
 801029e:	2100      	movs	r1, #0
 80102a0:	68f8      	ldr	r0, [r7, #12]
 80102a2:	f000 fcb6 	bl	8010c12 <USBD_LL_Transmit>

  return USBD_OK;
 80102a6:	2300      	movs	r3, #0
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3710      	adds	r7, #16
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	60f8      	str	r0, [r7, #12]
 80102b8:	60b9      	str	r1, [r7, #8]
 80102ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	68ba      	ldr	r2, [r7, #8]
 80102c0:	2100      	movs	r1, #0
 80102c2:	68f8      	ldr	r0, [r7, #12]
 80102c4:	f000 fca5 	bl	8010c12 <USBD_LL_Transmit>

  return USBD_OK;
 80102c8:	2300      	movs	r3, #0
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	3710      	adds	r7, #16
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}

080102d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80102d2:	b580      	push	{r7, lr}
 80102d4:	b084      	sub	sp, #16
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	60f8      	str	r0, [r7, #12]
 80102da:	60b9      	str	r1, [r7, #8]
 80102dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	2203      	movs	r2, #3
 80102e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	687a      	ldr	r2, [r7, #4]
 80102ea:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	68ba      	ldr	r2, [r7, #8]
 80102fa:	2100      	movs	r1, #0
 80102fc:	68f8      	ldr	r0, [r7, #12]
 80102fe:	f000 fca9 	bl	8010c54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010302:	2300      	movs	r3, #0
}
 8010304:	4618      	mov	r0, r3
 8010306:	3710      	adds	r7, #16
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}

0801030c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b084      	sub	sp, #16
 8010310:	af00      	add	r7, sp, #0
 8010312:	60f8      	str	r0, [r7, #12]
 8010314:	60b9      	str	r1, [r7, #8]
 8010316:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	68ba      	ldr	r2, [r7, #8]
 801031c:	2100      	movs	r1, #0
 801031e:	68f8      	ldr	r0, [r7, #12]
 8010320:	f000 fc98 	bl	8010c54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010324:	2300      	movs	r3, #0
}
 8010326:	4618      	mov	r0, r3
 8010328:	3710      	adds	r7, #16
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801032e:	b580      	push	{r7, lr}
 8010330:	b082      	sub	sp, #8
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2204      	movs	r2, #4
 801033a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801033e:	2300      	movs	r3, #0
 8010340:	2200      	movs	r2, #0
 8010342:	2100      	movs	r1, #0
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f000 fc64 	bl	8010c12 <USBD_LL_Transmit>

  return USBD_OK;
 801034a:	2300      	movs	r3, #0
}
 801034c:	4618      	mov	r0, r3
 801034e:	3708      	adds	r7, #8
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b082      	sub	sp, #8
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2205      	movs	r2, #5
 8010360:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010364:	2300      	movs	r3, #0
 8010366:	2200      	movs	r2, #0
 8010368:	2100      	movs	r1, #0
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	f000 fc72 	bl	8010c54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010370:	2300      	movs	r3, #0
}
 8010372:	4618      	mov	r0, r3
 8010374:	3708      	adds	r7, #8
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
	...

0801037c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010380:	2200      	movs	r2, #0
 8010382:	4912      	ldr	r1, [pc, #72]	@ (80103cc <MX_USB_Device_Init+0x50>)
 8010384:	4812      	ldr	r0, [pc, #72]	@ (80103d0 <MX_USB_Device_Init+0x54>)
 8010386:	f7fe fed9 	bl	800f13c <USBD_Init>
 801038a:	4603      	mov	r3, r0
 801038c:	2b00      	cmp	r3, #0
 801038e:	d001      	beq.n	8010394 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010390:	f7f3 fb6c 	bl	8003a6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010394:	490f      	ldr	r1, [pc, #60]	@ (80103d4 <MX_USB_Device_Init+0x58>)
 8010396:	480e      	ldr	r0, [pc, #56]	@ (80103d0 <MX_USB_Device_Init+0x54>)
 8010398:	f7fe ff00 	bl	800f19c <USBD_RegisterClass>
 801039c:	4603      	mov	r3, r0
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d001      	beq.n	80103a6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80103a2:	f7f3 fb63 	bl	8003a6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80103a6:	490c      	ldr	r1, [pc, #48]	@ (80103d8 <MX_USB_Device_Init+0x5c>)
 80103a8:	4809      	ldr	r0, [pc, #36]	@ (80103d0 <MX_USB_Device_Init+0x54>)
 80103aa:	f7fe fe21 	bl	800eff0 <USBD_CDC_RegisterInterface>
 80103ae:	4603      	mov	r3, r0
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d001      	beq.n	80103b8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80103b4:	f7f3 fb5a 	bl	8003a6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80103b8:	4805      	ldr	r0, [pc, #20]	@ (80103d0 <MX_USB_Device_Init+0x54>)
 80103ba:	f7fe ff16 	bl	800f1ea <USBD_Start>
 80103be:	4603      	mov	r3, r0
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d001      	beq.n	80103c8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80103c4:	f7f3 fb52 	bl	8003a6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80103c8:	bf00      	nop
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	2000016c 	.word	0x2000016c
 80103d0:	20000bbc 	.word	0x20000bbc
 80103d4:	20000054 	.word	0x20000054
 80103d8:	20000158 	.word	0x20000158

080103dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80103e0:	2200      	movs	r2, #0
 80103e2:	4905      	ldr	r1, [pc, #20]	@ (80103f8 <CDC_Init_FS+0x1c>)
 80103e4:	4805      	ldr	r0, [pc, #20]	@ (80103fc <CDC_Init_FS+0x20>)
 80103e6:	f7fe fe18 	bl	800f01a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80103ea:	4905      	ldr	r1, [pc, #20]	@ (8010400 <CDC_Init_FS+0x24>)
 80103ec:	4803      	ldr	r0, [pc, #12]	@ (80103fc <CDC_Init_FS+0x20>)
 80103ee:	f7fe fe32 	bl	800f056 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80103f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	2000168c 	.word	0x2000168c
 80103fc:	20000bbc 	.word	0x20000bbc
 8010400:	20000e8c 	.word	0x20000e8c

08010404 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010404:	b480      	push	{r7}
 8010406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010408:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801040a:	4618      	mov	r0, r3
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr

08010414 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010414:	b480      	push	{r7}
 8010416:	b083      	sub	sp, #12
 8010418:	af00      	add	r7, sp, #0
 801041a:	4603      	mov	r3, r0
 801041c:	6039      	str	r1, [r7, #0]
 801041e:	71fb      	strb	r3, [r7, #7]
 8010420:	4613      	mov	r3, r2
 8010422:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010424:	79fb      	ldrb	r3, [r7, #7]
 8010426:	2b23      	cmp	r3, #35	@ 0x23
 8010428:	d84a      	bhi.n	80104c0 <CDC_Control_FS+0xac>
 801042a:	a201      	add	r2, pc, #4	@ (adr r2, 8010430 <CDC_Control_FS+0x1c>)
 801042c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010430:	080104c1 	.word	0x080104c1
 8010434:	080104c1 	.word	0x080104c1
 8010438:	080104c1 	.word	0x080104c1
 801043c:	080104c1 	.word	0x080104c1
 8010440:	080104c1 	.word	0x080104c1
 8010444:	080104c1 	.word	0x080104c1
 8010448:	080104c1 	.word	0x080104c1
 801044c:	080104c1 	.word	0x080104c1
 8010450:	080104c1 	.word	0x080104c1
 8010454:	080104c1 	.word	0x080104c1
 8010458:	080104c1 	.word	0x080104c1
 801045c:	080104c1 	.word	0x080104c1
 8010460:	080104c1 	.word	0x080104c1
 8010464:	080104c1 	.word	0x080104c1
 8010468:	080104c1 	.word	0x080104c1
 801046c:	080104c1 	.word	0x080104c1
 8010470:	080104c1 	.word	0x080104c1
 8010474:	080104c1 	.word	0x080104c1
 8010478:	080104c1 	.word	0x080104c1
 801047c:	080104c1 	.word	0x080104c1
 8010480:	080104c1 	.word	0x080104c1
 8010484:	080104c1 	.word	0x080104c1
 8010488:	080104c1 	.word	0x080104c1
 801048c:	080104c1 	.word	0x080104c1
 8010490:	080104c1 	.word	0x080104c1
 8010494:	080104c1 	.word	0x080104c1
 8010498:	080104c1 	.word	0x080104c1
 801049c:	080104c1 	.word	0x080104c1
 80104a0:	080104c1 	.word	0x080104c1
 80104a4:	080104c1 	.word	0x080104c1
 80104a8:	080104c1 	.word	0x080104c1
 80104ac:	080104c1 	.word	0x080104c1
 80104b0:	080104c1 	.word	0x080104c1
 80104b4:	080104c1 	.word	0x080104c1
 80104b8:	080104c1 	.word	0x080104c1
 80104bc:	080104c1 	.word	0x080104c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80104c0:	bf00      	nop
  }

  return (USBD_OK);
 80104c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	370c      	adds	r7, #12
 80104c8:	46bd      	mov	sp, r7
 80104ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ce:	4770      	bx	lr

080104d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > sizeof(USB_RX_Buffer)) {
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80104e2:	d903      	bls.n	80104ec <CDC_Receive_FS+0x1c>
	          *Len = sizeof(USB_RX_Buffer);  // Prevent buffer overflow
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80104ea:	601a      	str	r2, [r3, #0]
	      }
	      memcpy(USB_RX_Buffer, Buf, *Len);
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	461a      	mov	r2, r3
 80104f2:	6879      	ldr	r1, [r7, #4]
 80104f4:	4808      	ldr	r0, [pc, #32]	@ (8010518 <CDC_Receive_FS+0x48>)
 80104f6:	f001 fcb0 	bl	8011e5a <memcpy>

	      dataReceivedFlag = 1;
 80104fa:	4b08      	ldr	r3, [pc, #32]	@ (801051c <CDC_Receive_FS+0x4c>)
 80104fc:	2201      	movs	r2, #1
 80104fe:	601a      	str	r2, [r3, #0]

	      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010500:	6879      	ldr	r1, [r7, #4]
 8010502:	4807      	ldr	r0, [pc, #28]	@ (8010520 <CDC_Receive_FS+0x50>)
 8010504:	f7fe fda7 	bl	800f056 <USBD_CDC_SetRxBuffer>
	      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010508:	4805      	ldr	r0, [pc, #20]	@ (8010520 <CDC_Receive_FS+0x50>)
 801050a:	f7fe fded 	bl	800f0e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801050e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010510:	4618      	mov	r0, r3
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	20000a98 	.word	0x20000a98
 801051c:	20000b58 	.word	0x20000b58
 8010520:	20000bbc 	.word	0x20000bbc

08010524 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b084      	sub	sp, #16
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	460b      	mov	r3, r1
 801052e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010530:	2300      	movs	r3, #0
 8010532:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010534:	4b0d      	ldr	r3, [pc, #52]	@ (801056c <CDC_Transmit_FS+0x48>)
 8010536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801053a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010542:	2b00      	cmp	r3, #0
 8010544:	d001      	beq.n	801054a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010546:	2301      	movs	r3, #1
 8010548:	e00b      	b.n	8010562 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801054a:	887b      	ldrh	r3, [r7, #2]
 801054c:	461a      	mov	r2, r3
 801054e:	6879      	ldr	r1, [r7, #4]
 8010550:	4806      	ldr	r0, [pc, #24]	@ (801056c <CDC_Transmit_FS+0x48>)
 8010552:	f7fe fd62 	bl	800f01a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010556:	4805      	ldr	r0, [pc, #20]	@ (801056c <CDC_Transmit_FS+0x48>)
 8010558:	f7fe fd96 	bl	800f088 <USBD_CDC_TransmitPacket>
 801055c:	4603      	mov	r3, r0
 801055e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010560:	7bfb      	ldrb	r3, [r7, #15]
}
 8010562:	4618      	mov	r0, r3
 8010564:	3710      	adds	r7, #16
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	20000bbc 	.word	0x20000bbc

08010570 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010570:	b480      	push	{r7}
 8010572:	b087      	sub	sp, #28
 8010574:	af00      	add	r7, sp, #0
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	60b9      	str	r1, [r7, #8]
 801057a:	4613      	mov	r3, r2
 801057c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801057e:	2300      	movs	r3, #0
 8010580:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010586:	4618      	mov	r0, r3
 8010588:	371c      	adds	r7, #28
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr
	...

08010594 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
 801059a:	4603      	mov	r3, r0
 801059c:	6039      	str	r1, [r7, #0]
 801059e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	2212      	movs	r2, #18
 80105a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80105a6:	4b03      	ldr	r3, [pc, #12]	@ (80105b4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	370c      	adds	r7, #12
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr
 80105b4:	2000018c 	.word	0x2000018c

080105b8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105b8:	b480      	push	{r7}
 80105ba:	b083      	sub	sp, #12
 80105bc:	af00      	add	r7, sp, #0
 80105be:	4603      	mov	r3, r0
 80105c0:	6039      	str	r1, [r7, #0]
 80105c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	2204      	movs	r2, #4
 80105c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80105ca:	4b03      	ldr	r3, [pc, #12]	@ (80105d8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	370c      	adds	r7, #12
 80105d0:	46bd      	mov	sp, r7
 80105d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d6:	4770      	bx	lr
 80105d8:	200001a0 	.word	0x200001a0

080105dc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	4603      	mov	r3, r0
 80105e4:	6039      	str	r1, [r7, #0]
 80105e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80105e8:	79fb      	ldrb	r3, [r7, #7]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d105      	bne.n	80105fa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80105ee:	683a      	ldr	r2, [r7, #0]
 80105f0:	4907      	ldr	r1, [pc, #28]	@ (8010610 <USBD_CDC_ProductStrDescriptor+0x34>)
 80105f2:	4808      	ldr	r0, [pc, #32]	@ (8010614 <USBD_CDC_ProductStrDescriptor+0x38>)
 80105f4:	f7ff fde1 	bl	80101ba <USBD_GetString>
 80105f8:	e004      	b.n	8010604 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80105fa:	683a      	ldr	r2, [r7, #0]
 80105fc:	4904      	ldr	r1, [pc, #16]	@ (8010610 <USBD_CDC_ProductStrDescriptor+0x34>)
 80105fe:	4805      	ldr	r0, [pc, #20]	@ (8010614 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010600:	f7ff fddb 	bl	80101ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8010604:	4b02      	ldr	r3, [pc, #8]	@ (8010610 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8010606:	4618      	mov	r0, r3
 8010608:	3708      	adds	r7, #8
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	20001e8c 	.word	0x20001e8c
 8010614:	08017454 	.word	0x08017454

08010618 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	4603      	mov	r3, r0
 8010620:	6039      	str	r1, [r7, #0]
 8010622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010624:	683a      	ldr	r2, [r7, #0]
 8010626:	4904      	ldr	r1, [pc, #16]	@ (8010638 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8010628:	4804      	ldr	r0, [pc, #16]	@ (801063c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801062a:	f7ff fdc6 	bl	80101ba <USBD_GetString>
  return USBD_StrDesc;
 801062e:	4b02      	ldr	r3, [pc, #8]	@ (8010638 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010630:	4618      	mov	r0, r3
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	20001e8c 	.word	0x20001e8c
 801063c:	0801746c 	.word	0x0801746c

08010640 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b082      	sub	sp, #8
 8010644:	af00      	add	r7, sp, #0
 8010646:	4603      	mov	r3, r0
 8010648:	6039      	str	r1, [r7, #0]
 801064a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	221a      	movs	r2, #26
 8010650:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010652:	f000 f843 	bl	80106dc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010656:	4b02      	ldr	r3, [pc, #8]	@ (8010660 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8010658:	4618      	mov	r0, r3
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	200001a4 	.word	0x200001a4

08010664 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
 801066a:	4603      	mov	r3, r0
 801066c:	6039      	str	r1, [r7, #0]
 801066e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010670:	79fb      	ldrb	r3, [r7, #7]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d105      	bne.n	8010682 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010676:	683a      	ldr	r2, [r7, #0]
 8010678:	4907      	ldr	r1, [pc, #28]	@ (8010698 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801067a:	4808      	ldr	r0, [pc, #32]	@ (801069c <USBD_CDC_ConfigStrDescriptor+0x38>)
 801067c:	f7ff fd9d 	bl	80101ba <USBD_GetString>
 8010680:	e004      	b.n	801068c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010682:	683a      	ldr	r2, [r7, #0]
 8010684:	4904      	ldr	r1, [pc, #16]	@ (8010698 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010686:	4805      	ldr	r0, [pc, #20]	@ (801069c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010688:	f7ff fd97 	bl	80101ba <USBD_GetString>
  }
  return USBD_StrDesc;
 801068c:	4b02      	ldr	r3, [pc, #8]	@ (8010698 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801068e:	4618      	mov	r0, r3
 8010690:	3708      	adds	r7, #8
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	20001e8c 	.word	0x20001e8c
 801069c:	08017480 	.word	0x08017480

080106a0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b082      	sub	sp, #8
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	4603      	mov	r3, r0
 80106a8:	6039      	str	r1, [r7, #0]
 80106aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80106ac:	79fb      	ldrb	r3, [r7, #7]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d105      	bne.n	80106be <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80106b2:	683a      	ldr	r2, [r7, #0]
 80106b4:	4907      	ldr	r1, [pc, #28]	@ (80106d4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80106b6:	4808      	ldr	r0, [pc, #32]	@ (80106d8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80106b8:	f7ff fd7f 	bl	80101ba <USBD_GetString>
 80106bc:	e004      	b.n	80106c8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80106be:	683a      	ldr	r2, [r7, #0]
 80106c0:	4904      	ldr	r1, [pc, #16]	@ (80106d4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80106c2:	4805      	ldr	r0, [pc, #20]	@ (80106d8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80106c4:	f7ff fd79 	bl	80101ba <USBD_GetString>
  }
  return USBD_StrDesc;
 80106c8:	4b02      	ldr	r3, [pc, #8]	@ (80106d4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3708      	adds	r7, #8
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	20001e8c 	.word	0x20001e8c
 80106d8:	0801748c 	.word	0x0801748c

080106dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b084      	sub	sp, #16
 80106e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80106e2:	4b0f      	ldr	r3, [pc, #60]	@ (8010720 <Get_SerialNum+0x44>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80106e8:	4b0e      	ldr	r3, [pc, #56]	@ (8010724 <Get_SerialNum+0x48>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80106ee:	4b0e      	ldr	r3, [pc, #56]	@ (8010728 <Get_SerialNum+0x4c>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80106f4:	68fa      	ldr	r2, [r7, #12]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	4413      	add	r3, r2
 80106fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d009      	beq.n	8010716 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010702:	2208      	movs	r2, #8
 8010704:	4909      	ldr	r1, [pc, #36]	@ (801072c <Get_SerialNum+0x50>)
 8010706:	68f8      	ldr	r0, [r7, #12]
 8010708:	f000 f814 	bl	8010734 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801070c:	2204      	movs	r2, #4
 801070e:	4908      	ldr	r1, [pc, #32]	@ (8010730 <Get_SerialNum+0x54>)
 8010710:	68b8      	ldr	r0, [r7, #8]
 8010712:	f000 f80f 	bl	8010734 <IntToUnicode>
  }
}
 8010716:	bf00      	nop
 8010718:	3710      	adds	r7, #16
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
 801071e:	bf00      	nop
 8010720:	1fff7590 	.word	0x1fff7590
 8010724:	1fff7594 	.word	0x1fff7594
 8010728:	1fff7598 	.word	0x1fff7598
 801072c:	200001a6 	.word	0x200001a6
 8010730:	200001b6 	.word	0x200001b6

08010734 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010734:	b480      	push	{r7}
 8010736:	b087      	sub	sp, #28
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	4613      	mov	r3, r2
 8010740:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010742:	2300      	movs	r3, #0
 8010744:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010746:	2300      	movs	r3, #0
 8010748:	75fb      	strb	r3, [r7, #23]
 801074a:	e027      	b.n	801079c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	0f1b      	lsrs	r3, r3, #28
 8010750:	2b09      	cmp	r3, #9
 8010752:	d80b      	bhi.n	801076c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	0f1b      	lsrs	r3, r3, #28
 8010758:	b2da      	uxtb	r2, r3
 801075a:	7dfb      	ldrb	r3, [r7, #23]
 801075c:	005b      	lsls	r3, r3, #1
 801075e:	4619      	mov	r1, r3
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	440b      	add	r3, r1
 8010764:	3230      	adds	r2, #48	@ 0x30
 8010766:	b2d2      	uxtb	r2, r2
 8010768:	701a      	strb	r2, [r3, #0]
 801076a:	e00a      	b.n	8010782 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	0f1b      	lsrs	r3, r3, #28
 8010770:	b2da      	uxtb	r2, r3
 8010772:	7dfb      	ldrb	r3, [r7, #23]
 8010774:	005b      	lsls	r3, r3, #1
 8010776:	4619      	mov	r1, r3
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	440b      	add	r3, r1
 801077c:	3237      	adds	r2, #55	@ 0x37
 801077e:	b2d2      	uxtb	r2, r2
 8010780:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	011b      	lsls	r3, r3, #4
 8010786:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010788:	7dfb      	ldrb	r3, [r7, #23]
 801078a:	005b      	lsls	r3, r3, #1
 801078c:	3301      	adds	r3, #1
 801078e:	68ba      	ldr	r2, [r7, #8]
 8010790:	4413      	add	r3, r2
 8010792:	2200      	movs	r2, #0
 8010794:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010796:	7dfb      	ldrb	r3, [r7, #23]
 8010798:	3301      	adds	r3, #1
 801079a:	75fb      	strb	r3, [r7, #23]
 801079c:	7dfa      	ldrb	r2, [r7, #23]
 801079e:	79fb      	ldrb	r3, [r7, #7]
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d3d3      	bcc.n	801074c <IntToUnicode+0x18>
  }
}
 80107a4:	bf00      	nop
 80107a6:	bf00      	nop
 80107a8:	371c      	adds	r7, #28
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr
	...

080107b4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b098      	sub	sp, #96	@ 0x60
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80107bc:	f107 030c 	add.w	r3, r7, #12
 80107c0:	2254      	movs	r2, #84	@ 0x54
 80107c2:	2100      	movs	r1, #0
 80107c4:	4618      	mov	r0, r3
 80107c6:	f001 fab6 	bl	8011d36 <memset>
  if(pcdHandle->Instance==USB)
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	4a15      	ldr	r2, [pc, #84]	@ (8010824 <HAL_PCD_MspInit+0x70>)
 80107d0:	4293      	cmp	r3, r2
 80107d2:	d122      	bne.n	801081a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80107d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80107d8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80107da:	2300      	movs	r3, #0
 80107dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80107de:	f107 030c 	add.w	r3, r7, #12
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7f9 f8c6 	bl	8009974 <HAL_RCCEx_PeriphCLKConfig>
 80107e8:	4603      	mov	r3, r0
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d001      	beq.n	80107f2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80107ee:	f7f3 f93d 	bl	8003a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80107f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010828 <HAL_PCD_MspInit+0x74>)
 80107f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80107f6:	4a0c      	ldr	r2, [pc, #48]	@ (8010828 <HAL_PCD_MspInit+0x74>)
 80107f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80107fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80107fe:	4b0a      	ldr	r3, [pc, #40]	@ (8010828 <HAL_PCD_MspInit+0x74>)
 8010800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010802:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010806:	60bb      	str	r3, [r7, #8]
 8010808:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801080a:	2200      	movs	r2, #0
 801080c:	2100      	movs	r1, #0
 801080e:	2014      	movs	r0, #20
 8010810:	f7f5 fe47 	bl	80064a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010814:	2014      	movs	r0, #20
 8010816:	f7f5 fe5e 	bl	80064d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801081a:	bf00      	nop
 801081c:	3760      	adds	r7, #96	@ 0x60
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}
 8010822:	bf00      	nop
 8010824:	40005c00 	.word	0x40005c00
 8010828:	40021000 	.word	0x40021000

0801082c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8010840:	4619      	mov	r1, r3
 8010842:	4610      	mov	r0, r2
 8010844:	f7fe fd1c 	bl	800f280 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010848:	bf00      	nop
 801084a:	3708      	adds	r7, #8
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	460b      	mov	r3, r1
 801085a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010862:	78fa      	ldrb	r2, [r7, #3]
 8010864:	6879      	ldr	r1, [r7, #4]
 8010866:	4613      	mov	r3, r2
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	4413      	add	r3, r2
 801086c:	00db      	lsls	r3, r3, #3
 801086e:	440b      	add	r3, r1
 8010870:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010874:	681a      	ldr	r2, [r3, #0]
 8010876:	78fb      	ldrb	r3, [r7, #3]
 8010878:	4619      	mov	r1, r3
 801087a:	f7fe fd56 	bl	800f32a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801087e:	bf00      	nop
 8010880:	3708      	adds	r7, #8
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010886:	b580      	push	{r7, lr}
 8010888:	b082      	sub	sp, #8
 801088a:	af00      	add	r7, sp, #0
 801088c:	6078      	str	r0, [r7, #4]
 801088e:	460b      	mov	r3, r1
 8010890:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010898:	78fa      	ldrb	r2, [r7, #3]
 801089a:	6879      	ldr	r1, [r7, #4]
 801089c:	4613      	mov	r3, r2
 801089e:	009b      	lsls	r3, r3, #2
 80108a0:	4413      	add	r3, r2
 80108a2:	00db      	lsls	r3, r3, #3
 80108a4:	440b      	add	r3, r1
 80108a6:	3324      	adds	r3, #36	@ 0x24
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	78fb      	ldrb	r3, [r7, #3]
 80108ac:	4619      	mov	r1, r3
 80108ae:	f7fe fd9f 	bl	800f3f0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80108b2:	bf00      	nop
 80108b4:	3708      	adds	r7, #8
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}

080108ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108ba:	b580      	push	{r7, lr}
 80108bc:	b082      	sub	sp, #8
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80108c8:	4618      	mov	r0, r3
 80108ca:	f7fe feb3 	bl	800f634 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80108ce:	bf00      	nop
 80108d0:	3708      	adds	r7, #8
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}

080108d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108d6:	b580      	push	{r7, lr}
 80108d8:	b084      	sub	sp, #16
 80108da:	af00      	add	r7, sp, #0
 80108dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80108de:	2301      	movs	r3, #1
 80108e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	795b      	ldrb	r3, [r3, #5]
 80108e6:	2b02      	cmp	r3, #2
 80108e8:	d001      	beq.n	80108ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80108ea:	f7f3 f8bf 	bl	8003a6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80108f4:	7bfa      	ldrb	r2, [r7, #15]
 80108f6:	4611      	mov	r1, r2
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7fe fe5d 	bl	800f5b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010904:	4618      	mov	r0, r3
 8010906:	f7fe fe09 	bl	800f51c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801090a:	bf00      	nop
 801090c:	3710      	adds	r7, #16
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
	...

08010914 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010922:	4618      	mov	r0, r3
 8010924:	f7fe fe58 	bl	800f5d8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	7a5b      	ldrb	r3, [r3, #9]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d005      	beq.n	801093c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010930:	4b04      	ldr	r3, [pc, #16]	@ (8010944 <HAL_PCD_SuspendCallback+0x30>)
 8010932:	691b      	ldr	r3, [r3, #16]
 8010934:	4a03      	ldr	r2, [pc, #12]	@ (8010944 <HAL_PCD_SuspendCallback+0x30>)
 8010936:	f043 0306 	orr.w	r3, r3, #6
 801093a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801093c:	bf00      	nop
 801093e:	3708      	adds	r7, #8
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}
 8010944:	e000ed00 	.word	0xe000ed00

08010948 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b082      	sub	sp, #8
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	7a5b      	ldrb	r3, [r3, #9]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d007      	beq.n	8010968 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010958:	4b08      	ldr	r3, [pc, #32]	@ (801097c <HAL_PCD_ResumeCallback+0x34>)
 801095a:	691b      	ldr	r3, [r3, #16]
 801095c:	4a07      	ldr	r2, [pc, #28]	@ (801097c <HAL_PCD_ResumeCallback+0x34>)
 801095e:	f023 0306 	bic.w	r3, r3, #6
 8010962:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010964:	f000 f9f8 	bl	8010d58 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801096e:	4618      	mov	r0, r3
 8010970:	f7fe fe48 	bl	800f604 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010974:	bf00      	nop
 8010976:	3708      	adds	r7, #8
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}
 801097c:	e000ed00 	.word	0xe000ed00

08010980 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010988:	4a2b      	ldr	r2, [pc, #172]	@ (8010a38 <USBD_LL_Init+0xb8>)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	4a29      	ldr	r2, [pc, #164]	@ (8010a38 <USBD_LL_Init+0xb8>)
 8010994:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010998:	4b27      	ldr	r3, [pc, #156]	@ (8010a38 <USBD_LL_Init+0xb8>)
 801099a:	4a28      	ldr	r2, [pc, #160]	@ (8010a3c <USBD_LL_Init+0xbc>)
 801099c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801099e:	4b26      	ldr	r3, [pc, #152]	@ (8010a38 <USBD_LL_Init+0xb8>)
 80109a0:	2208      	movs	r2, #8
 80109a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80109a4:	4b24      	ldr	r3, [pc, #144]	@ (8010a38 <USBD_LL_Init+0xb8>)
 80109a6:	2202      	movs	r2, #2
 80109a8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80109aa:	4b23      	ldr	r3, [pc, #140]	@ (8010a38 <USBD_LL_Init+0xb8>)
 80109ac:	2202      	movs	r2, #2
 80109ae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80109b0:	4b21      	ldr	r3, [pc, #132]	@ (8010a38 <USBD_LL_Init+0xb8>)
 80109b2:	2200      	movs	r2, #0
 80109b4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80109b6:	4b20      	ldr	r3, [pc, #128]	@ (8010a38 <USBD_LL_Init+0xb8>)
 80109b8:	2200      	movs	r2, #0
 80109ba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80109bc:	4b1e      	ldr	r3, [pc, #120]	@ (8010a38 <USBD_LL_Init+0xb8>)
 80109be:	2200      	movs	r2, #0
 80109c0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80109c2:	4b1d      	ldr	r3, [pc, #116]	@ (8010a38 <USBD_LL_Init+0xb8>)
 80109c4:	2200      	movs	r2, #0
 80109c6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80109c8:	481b      	ldr	r0, [pc, #108]	@ (8010a38 <USBD_LL_Init+0xb8>)
 80109ca:	f7f6 fcbb 	bl	8007344 <HAL_PCD_Init>
 80109ce:	4603      	mov	r3, r0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d001      	beq.n	80109d8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80109d4:	f7f3 f84a 	bl	8003a6c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80109de:	2318      	movs	r3, #24
 80109e0:	2200      	movs	r2, #0
 80109e2:	2100      	movs	r1, #0
 80109e4:	f7f8 f976 	bl	8008cd4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80109ee:	2358      	movs	r3, #88	@ 0x58
 80109f0:	2200      	movs	r2, #0
 80109f2:	2180      	movs	r1, #128	@ 0x80
 80109f4:	f7f8 f96e 	bl	8008cd4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80109fe:	23c0      	movs	r3, #192	@ 0xc0
 8010a00:	2200      	movs	r2, #0
 8010a02:	2181      	movs	r1, #129	@ 0x81
 8010a04:	f7f8 f966 	bl	8008cd4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a0e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8010a12:	2200      	movs	r2, #0
 8010a14:	2101      	movs	r1, #1
 8010a16:	f7f8 f95d 	bl	8008cd4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010a24:	2200      	movs	r2, #0
 8010a26:	2182      	movs	r1, #130	@ 0x82
 8010a28:	f7f8 f954 	bl	8008cd4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010a2c:	2300      	movs	r3, #0
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3708      	adds	r7, #8
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	2000208c 	.word	0x2000208c
 8010a3c:	40005c00 	.word	0x40005c00

08010a40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b084      	sub	sp, #16
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7f6 fd42 	bl	80074e0 <HAL_PCD_Start>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a60:	7bfb      	ldrb	r3, [r7, #15]
 8010a62:	4618      	mov	r0, r3
 8010a64:	f000 f97e 	bl	8010d64 <USBD_Get_USB_Status>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3710      	adds	r7, #16
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b084      	sub	sp, #16
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
 8010a7e:	4608      	mov	r0, r1
 8010a80:	4611      	mov	r1, r2
 8010a82:	461a      	mov	r2, r3
 8010a84:	4603      	mov	r3, r0
 8010a86:	70fb      	strb	r3, [r7, #3]
 8010a88:	460b      	mov	r3, r1
 8010a8a:	70bb      	strb	r3, [r7, #2]
 8010a8c:	4613      	mov	r3, r2
 8010a8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a90:	2300      	movs	r3, #0
 8010a92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a94:	2300      	movs	r3, #0
 8010a96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a9e:	78bb      	ldrb	r3, [r7, #2]
 8010aa0:	883a      	ldrh	r2, [r7, #0]
 8010aa2:	78f9      	ldrb	r1, [r7, #3]
 8010aa4:	f7f6 fe89 	bl	80077ba <HAL_PCD_EP_Open>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010aac:	7bfb      	ldrb	r3, [r7, #15]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f000 f958 	bl	8010d64 <USBD_Get_USB_Status>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ab8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3710      	adds	r7, #16
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}

08010ac2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ac2:	b580      	push	{r7, lr}
 8010ac4:	b084      	sub	sp, #16
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	6078      	str	r0, [r7, #4]
 8010aca:	460b      	mov	r3, r1
 8010acc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010adc:	78fa      	ldrb	r2, [r7, #3]
 8010ade:	4611      	mov	r1, r2
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7f6 fec9 	bl	8007878 <HAL_PCD_EP_Close>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010aea:	7bfb      	ldrb	r3, [r7, #15]
 8010aec:	4618      	mov	r0, r3
 8010aee:	f000 f939 	bl	8010d64 <USBD_Get_USB_Status>
 8010af2:	4603      	mov	r3, r0
 8010af4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010af6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3710      	adds	r7, #16
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}

08010b00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b084      	sub	sp, #16
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	460b      	mov	r3, r1
 8010b0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b10:	2300      	movs	r3, #0
 8010b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b1a:	78fa      	ldrb	r2, [r7, #3]
 8010b1c:	4611      	mov	r1, r2
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7f6 ff72 	bl	8007a08 <HAL_PCD_EP_SetStall>
 8010b24:	4603      	mov	r3, r0
 8010b26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b28:	7bfb      	ldrb	r3, [r7, #15]
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f000 f91a 	bl	8010d64 <USBD_Get_USB_Status>
 8010b30:	4603      	mov	r3, r0
 8010b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3710      	adds	r7, #16
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}

08010b3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b3e:	b580      	push	{r7, lr}
 8010b40:	b084      	sub	sp, #16
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	6078      	str	r0, [r7, #4]
 8010b46:	460b      	mov	r3, r1
 8010b48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b58:	78fa      	ldrb	r2, [r7, #3]
 8010b5a:	4611      	mov	r1, r2
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f7f6 ffa5 	bl	8007aac <HAL_PCD_EP_ClrStall>
 8010b62:	4603      	mov	r3, r0
 8010b64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b66:	7bfb      	ldrb	r3, [r7, #15]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 f8fb 	bl	8010d64 <USBD_Get_USB_Status>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b72:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3710      	adds	r7, #16
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	b085      	sub	sp, #20
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	460b      	mov	r3, r1
 8010b86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010b90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	da0b      	bge.n	8010bb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010b98:	78fb      	ldrb	r3, [r7, #3]
 8010b9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b9e:	68f9      	ldr	r1, [r7, #12]
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	009b      	lsls	r3, r3, #2
 8010ba4:	4413      	add	r3, r2
 8010ba6:	00db      	lsls	r3, r3, #3
 8010ba8:	440b      	add	r3, r1
 8010baa:	3312      	adds	r3, #18
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	e00b      	b.n	8010bc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010bb0:	78fb      	ldrb	r3, [r7, #3]
 8010bb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010bb6:	68f9      	ldr	r1, [r7, #12]
 8010bb8:	4613      	mov	r3, r2
 8010bba:	009b      	lsls	r3, r3, #2
 8010bbc:	4413      	add	r3, r2
 8010bbe:	00db      	lsls	r3, r3, #3
 8010bc0:	440b      	add	r3, r1
 8010bc2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010bc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3714      	adds	r7, #20
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd2:	4770      	bx	lr

08010bd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b084      	sub	sp, #16
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	460b      	mov	r3, r1
 8010bde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010be0:	2300      	movs	r3, #0
 8010be2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010be4:	2300      	movs	r3, #0
 8010be6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010bee:	78fa      	ldrb	r2, [r7, #3]
 8010bf0:	4611      	mov	r1, r2
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7f6 fdbd 	bl	8007772 <HAL_PCD_SetAddress>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bfc:	7bfb      	ldrb	r3, [r7, #15]
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f000 f8b0 	bl	8010d64 <USBD_Get_USB_Status>
 8010c04:	4603      	mov	r3, r0
 8010c06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c08:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	3710      	adds	r7, #16
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}

08010c12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b086      	sub	sp, #24
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	60f8      	str	r0, [r7, #12]
 8010c1a:	607a      	str	r2, [r7, #4]
 8010c1c:	603b      	str	r3, [r7, #0]
 8010c1e:	460b      	mov	r3, r1
 8010c20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c22:	2300      	movs	r3, #0
 8010c24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c26:	2300      	movs	r3, #0
 8010c28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010c30:	7af9      	ldrb	r1, [r7, #11]
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	687a      	ldr	r2, [r7, #4]
 8010c36:	f7f6 feb0 	bl	800799a <HAL_PCD_EP_Transmit>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c3e:	7dfb      	ldrb	r3, [r7, #23]
 8010c40:	4618      	mov	r0, r3
 8010c42:	f000 f88f 	bl	8010d64 <USBD_Get_USB_Status>
 8010c46:	4603      	mov	r3, r0
 8010c48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010c4a:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3718      	adds	r7, #24
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b086      	sub	sp, #24
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	60f8      	str	r0, [r7, #12]
 8010c5c:	607a      	str	r2, [r7, #4]
 8010c5e:	603b      	str	r3, [r7, #0]
 8010c60:	460b      	mov	r3, r1
 8010c62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c64:	2300      	movs	r3, #0
 8010c66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010c72:	7af9      	ldrb	r1, [r7, #11]
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	687a      	ldr	r2, [r7, #4]
 8010c78:	f7f6 fe46 	bl	8007908 <HAL_PCD_EP_Receive>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c80:	7dfb      	ldrb	r3, [r7, #23]
 8010c82:	4618      	mov	r0, r3
 8010c84:	f000 f86e 	bl	8010d64 <USBD_Get_USB_Status>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010c8c:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3718      	adds	r7, #24
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}

08010c96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c96:	b580      	push	{r7, lr}
 8010c98:	b082      	sub	sp, #8
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	6078      	str	r0, [r7, #4]
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010ca8:	78fa      	ldrb	r2, [r7, #3]
 8010caa:	4611      	mov	r1, r2
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7f6 fe5c 	bl	800796a <HAL_PCD_EP_GetRxCount>
 8010cb2:	4603      	mov	r3, r0
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3708      	adds	r7, #8
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}

08010cbc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010cc8:	78fb      	ldrb	r3, [r7, #3]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d002      	beq.n	8010cd4 <HAL_PCDEx_LPM_Callback+0x18>
 8010cce:	2b01      	cmp	r3, #1
 8010cd0:	d013      	beq.n	8010cfa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010cd2:	e023      	b.n	8010d1c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	7a5b      	ldrb	r3, [r3, #9]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d007      	beq.n	8010cec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010cdc:	f000 f83c 	bl	8010d58 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ce0:	4b10      	ldr	r3, [pc, #64]	@ (8010d24 <HAL_PCDEx_LPM_Callback+0x68>)
 8010ce2:	691b      	ldr	r3, [r3, #16]
 8010ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8010d24 <HAL_PCDEx_LPM_Callback+0x68>)
 8010ce6:	f023 0306 	bic.w	r3, r3, #6
 8010cea:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7fe fc86 	bl	800f604 <USBD_LL_Resume>
    break;
 8010cf8:	e010      	b.n	8010d1c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7fe fc69 	bl	800f5d8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	7a5b      	ldrb	r3, [r3, #9]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d005      	beq.n	8010d1a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d0e:	4b05      	ldr	r3, [pc, #20]	@ (8010d24 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d10:	691b      	ldr	r3, [r3, #16]
 8010d12:	4a04      	ldr	r2, [pc, #16]	@ (8010d24 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d14:	f043 0306 	orr.w	r3, r3, #6
 8010d18:	6113      	str	r3, [r2, #16]
    break;
 8010d1a:	bf00      	nop
}
 8010d1c:	bf00      	nop
 8010d1e:	3708      	adds	r7, #8
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}
 8010d24:	e000ed00 	.word	0xe000ed00

08010d28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010d30:	4b03      	ldr	r3, [pc, #12]	@ (8010d40 <USBD_static_malloc+0x18>)
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	370c      	adds	r7, #12
 8010d36:	46bd      	mov	sp, r7
 8010d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop
 8010d40:	20002368 	.word	0x20002368

08010d44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b083      	sub	sp, #12
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]

}
 8010d4c:	bf00      	nop
 8010d4e:	370c      	adds	r7, #12
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010d5c:	f7f0 fe78 	bl	8001a50 <SystemClock_Config>
}
 8010d60:	bf00      	nop
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b085      	sub	sp, #20
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d6e:	2300      	movs	r3, #0
 8010d70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010d72:	79fb      	ldrb	r3, [r7, #7]
 8010d74:	2b03      	cmp	r3, #3
 8010d76:	d817      	bhi.n	8010da8 <USBD_Get_USB_Status+0x44>
 8010d78:	a201      	add	r2, pc, #4	@ (adr r2, 8010d80 <USBD_Get_USB_Status+0x1c>)
 8010d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d7e:	bf00      	nop
 8010d80:	08010d91 	.word	0x08010d91
 8010d84:	08010d97 	.word	0x08010d97
 8010d88:	08010d9d 	.word	0x08010d9d
 8010d8c:	08010da3 	.word	0x08010da3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010d90:	2300      	movs	r3, #0
 8010d92:	73fb      	strb	r3, [r7, #15]
    break;
 8010d94:	e00b      	b.n	8010dae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010d96:	2303      	movs	r3, #3
 8010d98:	73fb      	strb	r3, [r7, #15]
    break;
 8010d9a:	e008      	b.n	8010dae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8010da0:	e005      	b.n	8010dae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010da2:	2303      	movs	r3, #3
 8010da4:	73fb      	strb	r3, [r7, #15]
    break;
 8010da6:	e002      	b.n	8010dae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010da8:	2303      	movs	r3, #3
 8010daa:	73fb      	strb	r3, [r7, #15]
    break;
 8010dac:	bf00      	nop
  }
  return usb_status;
 8010dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3714      	adds	r7, #20
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr

08010dbc <__cvt>:
 8010dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010dc0:	ec57 6b10 	vmov	r6, r7, d0
 8010dc4:	2f00      	cmp	r7, #0
 8010dc6:	460c      	mov	r4, r1
 8010dc8:	4619      	mov	r1, r3
 8010dca:	463b      	mov	r3, r7
 8010dcc:	bfbb      	ittet	lt
 8010dce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010dd2:	461f      	movlt	r7, r3
 8010dd4:	2300      	movge	r3, #0
 8010dd6:	232d      	movlt	r3, #45	@ 0x2d
 8010dd8:	700b      	strb	r3, [r1, #0]
 8010dda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ddc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010de0:	4691      	mov	r9, r2
 8010de2:	f023 0820 	bic.w	r8, r3, #32
 8010de6:	bfbc      	itt	lt
 8010de8:	4632      	movlt	r2, r6
 8010dea:	4616      	movlt	r6, r2
 8010dec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010df0:	d005      	beq.n	8010dfe <__cvt+0x42>
 8010df2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010df6:	d100      	bne.n	8010dfa <__cvt+0x3e>
 8010df8:	3401      	adds	r4, #1
 8010dfa:	2102      	movs	r1, #2
 8010dfc:	e000      	b.n	8010e00 <__cvt+0x44>
 8010dfe:	2103      	movs	r1, #3
 8010e00:	ab03      	add	r3, sp, #12
 8010e02:	9301      	str	r3, [sp, #4]
 8010e04:	ab02      	add	r3, sp, #8
 8010e06:	9300      	str	r3, [sp, #0]
 8010e08:	ec47 6b10 	vmov	d0, r6, r7
 8010e0c:	4653      	mov	r3, sl
 8010e0e:	4622      	mov	r2, r4
 8010e10:	f001 f8c2 	bl	8011f98 <_dtoa_r>
 8010e14:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010e18:	4605      	mov	r5, r0
 8010e1a:	d119      	bne.n	8010e50 <__cvt+0x94>
 8010e1c:	f019 0f01 	tst.w	r9, #1
 8010e20:	d00e      	beq.n	8010e40 <__cvt+0x84>
 8010e22:	eb00 0904 	add.w	r9, r0, r4
 8010e26:	2200      	movs	r2, #0
 8010e28:	2300      	movs	r3, #0
 8010e2a:	4630      	mov	r0, r6
 8010e2c:	4639      	mov	r1, r7
 8010e2e:	f7ef fe73 	bl	8000b18 <__aeabi_dcmpeq>
 8010e32:	b108      	cbz	r0, 8010e38 <__cvt+0x7c>
 8010e34:	f8cd 900c 	str.w	r9, [sp, #12]
 8010e38:	2230      	movs	r2, #48	@ 0x30
 8010e3a:	9b03      	ldr	r3, [sp, #12]
 8010e3c:	454b      	cmp	r3, r9
 8010e3e:	d31e      	bcc.n	8010e7e <__cvt+0xc2>
 8010e40:	9b03      	ldr	r3, [sp, #12]
 8010e42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e44:	1b5b      	subs	r3, r3, r5
 8010e46:	4628      	mov	r0, r5
 8010e48:	6013      	str	r3, [r2, #0]
 8010e4a:	b004      	add	sp, #16
 8010e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010e54:	eb00 0904 	add.w	r9, r0, r4
 8010e58:	d1e5      	bne.n	8010e26 <__cvt+0x6a>
 8010e5a:	7803      	ldrb	r3, [r0, #0]
 8010e5c:	2b30      	cmp	r3, #48	@ 0x30
 8010e5e:	d10a      	bne.n	8010e76 <__cvt+0xba>
 8010e60:	2200      	movs	r2, #0
 8010e62:	2300      	movs	r3, #0
 8010e64:	4630      	mov	r0, r6
 8010e66:	4639      	mov	r1, r7
 8010e68:	f7ef fe56 	bl	8000b18 <__aeabi_dcmpeq>
 8010e6c:	b918      	cbnz	r0, 8010e76 <__cvt+0xba>
 8010e6e:	f1c4 0401 	rsb	r4, r4, #1
 8010e72:	f8ca 4000 	str.w	r4, [sl]
 8010e76:	f8da 3000 	ldr.w	r3, [sl]
 8010e7a:	4499      	add	r9, r3
 8010e7c:	e7d3      	b.n	8010e26 <__cvt+0x6a>
 8010e7e:	1c59      	adds	r1, r3, #1
 8010e80:	9103      	str	r1, [sp, #12]
 8010e82:	701a      	strb	r2, [r3, #0]
 8010e84:	e7d9      	b.n	8010e3a <__cvt+0x7e>

08010e86 <__exponent>:
 8010e86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e88:	2900      	cmp	r1, #0
 8010e8a:	bfba      	itte	lt
 8010e8c:	4249      	neglt	r1, r1
 8010e8e:	232d      	movlt	r3, #45	@ 0x2d
 8010e90:	232b      	movge	r3, #43	@ 0x2b
 8010e92:	2909      	cmp	r1, #9
 8010e94:	7002      	strb	r2, [r0, #0]
 8010e96:	7043      	strb	r3, [r0, #1]
 8010e98:	dd29      	ble.n	8010eee <__exponent+0x68>
 8010e9a:	f10d 0307 	add.w	r3, sp, #7
 8010e9e:	461d      	mov	r5, r3
 8010ea0:	270a      	movs	r7, #10
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	fbb1 f6f7 	udiv	r6, r1, r7
 8010ea8:	fb07 1416 	mls	r4, r7, r6, r1
 8010eac:	3430      	adds	r4, #48	@ 0x30
 8010eae:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010eb2:	460c      	mov	r4, r1
 8010eb4:	2c63      	cmp	r4, #99	@ 0x63
 8010eb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8010eba:	4631      	mov	r1, r6
 8010ebc:	dcf1      	bgt.n	8010ea2 <__exponent+0x1c>
 8010ebe:	3130      	adds	r1, #48	@ 0x30
 8010ec0:	1e94      	subs	r4, r2, #2
 8010ec2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010ec6:	1c41      	adds	r1, r0, #1
 8010ec8:	4623      	mov	r3, r4
 8010eca:	42ab      	cmp	r3, r5
 8010ecc:	d30a      	bcc.n	8010ee4 <__exponent+0x5e>
 8010ece:	f10d 0309 	add.w	r3, sp, #9
 8010ed2:	1a9b      	subs	r3, r3, r2
 8010ed4:	42ac      	cmp	r4, r5
 8010ed6:	bf88      	it	hi
 8010ed8:	2300      	movhi	r3, #0
 8010eda:	3302      	adds	r3, #2
 8010edc:	4403      	add	r3, r0
 8010ede:	1a18      	subs	r0, r3, r0
 8010ee0:	b003      	add	sp, #12
 8010ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ee4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010ee8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010eec:	e7ed      	b.n	8010eca <__exponent+0x44>
 8010eee:	2330      	movs	r3, #48	@ 0x30
 8010ef0:	3130      	adds	r1, #48	@ 0x30
 8010ef2:	7083      	strb	r3, [r0, #2]
 8010ef4:	70c1      	strb	r1, [r0, #3]
 8010ef6:	1d03      	adds	r3, r0, #4
 8010ef8:	e7f1      	b.n	8010ede <__exponent+0x58>
	...

08010efc <_printf_float>:
 8010efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f00:	b08d      	sub	sp, #52	@ 0x34
 8010f02:	460c      	mov	r4, r1
 8010f04:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010f08:	4616      	mov	r6, r2
 8010f0a:	461f      	mov	r7, r3
 8010f0c:	4605      	mov	r5, r0
 8010f0e:	f000 ff2d 	bl	8011d6c <_localeconv_r>
 8010f12:	6803      	ldr	r3, [r0, #0]
 8010f14:	9304      	str	r3, [sp, #16]
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7ef f9d2 	bl	80002c0 <strlen>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f20:	f8d8 3000 	ldr.w	r3, [r8]
 8010f24:	9005      	str	r0, [sp, #20]
 8010f26:	3307      	adds	r3, #7
 8010f28:	f023 0307 	bic.w	r3, r3, #7
 8010f2c:	f103 0208 	add.w	r2, r3, #8
 8010f30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010f34:	f8d4 b000 	ldr.w	fp, [r4]
 8010f38:	f8c8 2000 	str.w	r2, [r8]
 8010f3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010f44:	9307      	str	r3, [sp, #28]
 8010f46:	f8cd 8018 	str.w	r8, [sp, #24]
 8010f4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010f4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f52:	4b9c      	ldr	r3, [pc, #624]	@ (80111c4 <_printf_float+0x2c8>)
 8010f54:	f04f 32ff 	mov.w	r2, #4294967295
 8010f58:	f7ef fe10 	bl	8000b7c <__aeabi_dcmpun>
 8010f5c:	bb70      	cbnz	r0, 8010fbc <_printf_float+0xc0>
 8010f5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f62:	4b98      	ldr	r3, [pc, #608]	@ (80111c4 <_printf_float+0x2c8>)
 8010f64:	f04f 32ff 	mov.w	r2, #4294967295
 8010f68:	f7ef fdea 	bl	8000b40 <__aeabi_dcmple>
 8010f6c:	bb30      	cbnz	r0, 8010fbc <_printf_float+0xc0>
 8010f6e:	2200      	movs	r2, #0
 8010f70:	2300      	movs	r3, #0
 8010f72:	4640      	mov	r0, r8
 8010f74:	4649      	mov	r1, r9
 8010f76:	f7ef fdd9 	bl	8000b2c <__aeabi_dcmplt>
 8010f7a:	b110      	cbz	r0, 8010f82 <_printf_float+0x86>
 8010f7c:	232d      	movs	r3, #45	@ 0x2d
 8010f7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f82:	4a91      	ldr	r2, [pc, #580]	@ (80111c8 <_printf_float+0x2cc>)
 8010f84:	4b91      	ldr	r3, [pc, #580]	@ (80111cc <_printf_float+0x2d0>)
 8010f86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010f8a:	bf94      	ite	ls
 8010f8c:	4690      	movls	r8, r2
 8010f8e:	4698      	movhi	r8, r3
 8010f90:	2303      	movs	r3, #3
 8010f92:	6123      	str	r3, [r4, #16]
 8010f94:	f02b 0304 	bic.w	r3, fp, #4
 8010f98:	6023      	str	r3, [r4, #0]
 8010f9a:	f04f 0900 	mov.w	r9, #0
 8010f9e:	9700      	str	r7, [sp, #0]
 8010fa0:	4633      	mov	r3, r6
 8010fa2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010fa4:	4621      	mov	r1, r4
 8010fa6:	4628      	mov	r0, r5
 8010fa8:	f000 f9d2 	bl	8011350 <_printf_common>
 8010fac:	3001      	adds	r0, #1
 8010fae:	f040 808d 	bne.w	80110cc <_printf_float+0x1d0>
 8010fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8010fb6:	b00d      	add	sp, #52	@ 0x34
 8010fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fbc:	4642      	mov	r2, r8
 8010fbe:	464b      	mov	r3, r9
 8010fc0:	4640      	mov	r0, r8
 8010fc2:	4649      	mov	r1, r9
 8010fc4:	f7ef fdda 	bl	8000b7c <__aeabi_dcmpun>
 8010fc8:	b140      	cbz	r0, 8010fdc <_printf_float+0xe0>
 8010fca:	464b      	mov	r3, r9
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	bfbc      	itt	lt
 8010fd0:	232d      	movlt	r3, #45	@ 0x2d
 8010fd2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010fd6:	4a7e      	ldr	r2, [pc, #504]	@ (80111d0 <_printf_float+0x2d4>)
 8010fd8:	4b7e      	ldr	r3, [pc, #504]	@ (80111d4 <_printf_float+0x2d8>)
 8010fda:	e7d4      	b.n	8010f86 <_printf_float+0x8a>
 8010fdc:	6863      	ldr	r3, [r4, #4]
 8010fde:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010fe2:	9206      	str	r2, [sp, #24]
 8010fe4:	1c5a      	adds	r2, r3, #1
 8010fe6:	d13b      	bne.n	8011060 <_printf_float+0x164>
 8010fe8:	2306      	movs	r3, #6
 8010fea:	6063      	str	r3, [r4, #4]
 8010fec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	6022      	str	r2, [r4, #0]
 8010ff4:	9303      	str	r3, [sp, #12]
 8010ff6:	ab0a      	add	r3, sp, #40	@ 0x28
 8010ff8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010ffc:	ab09      	add	r3, sp, #36	@ 0x24
 8010ffe:	9300      	str	r3, [sp, #0]
 8011000:	6861      	ldr	r1, [r4, #4]
 8011002:	ec49 8b10 	vmov	d0, r8, r9
 8011006:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801100a:	4628      	mov	r0, r5
 801100c:	f7ff fed6 	bl	8010dbc <__cvt>
 8011010:	9b06      	ldr	r3, [sp, #24]
 8011012:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011014:	2b47      	cmp	r3, #71	@ 0x47
 8011016:	4680      	mov	r8, r0
 8011018:	d129      	bne.n	801106e <_printf_float+0x172>
 801101a:	1cc8      	adds	r0, r1, #3
 801101c:	db02      	blt.n	8011024 <_printf_float+0x128>
 801101e:	6863      	ldr	r3, [r4, #4]
 8011020:	4299      	cmp	r1, r3
 8011022:	dd41      	ble.n	80110a8 <_printf_float+0x1ac>
 8011024:	f1aa 0a02 	sub.w	sl, sl, #2
 8011028:	fa5f fa8a 	uxtb.w	sl, sl
 801102c:	3901      	subs	r1, #1
 801102e:	4652      	mov	r2, sl
 8011030:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011034:	9109      	str	r1, [sp, #36]	@ 0x24
 8011036:	f7ff ff26 	bl	8010e86 <__exponent>
 801103a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801103c:	1813      	adds	r3, r2, r0
 801103e:	2a01      	cmp	r2, #1
 8011040:	4681      	mov	r9, r0
 8011042:	6123      	str	r3, [r4, #16]
 8011044:	dc02      	bgt.n	801104c <_printf_float+0x150>
 8011046:	6822      	ldr	r2, [r4, #0]
 8011048:	07d2      	lsls	r2, r2, #31
 801104a:	d501      	bpl.n	8011050 <_printf_float+0x154>
 801104c:	3301      	adds	r3, #1
 801104e:	6123      	str	r3, [r4, #16]
 8011050:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011054:	2b00      	cmp	r3, #0
 8011056:	d0a2      	beq.n	8010f9e <_printf_float+0xa2>
 8011058:	232d      	movs	r3, #45	@ 0x2d
 801105a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801105e:	e79e      	b.n	8010f9e <_printf_float+0xa2>
 8011060:	9a06      	ldr	r2, [sp, #24]
 8011062:	2a47      	cmp	r2, #71	@ 0x47
 8011064:	d1c2      	bne.n	8010fec <_printf_float+0xf0>
 8011066:	2b00      	cmp	r3, #0
 8011068:	d1c0      	bne.n	8010fec <_printf_float+0xf0>
 801106a:	2301      	movs	r3, #1
 801106c:	e7bd      	b.n	8010fea <_printf_float+0xee>
 801106e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011072:	d9db      	bls.n	801102c <_printf_float+0x130>
 8011074:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011078:	d118      	bne.n	80110ac <_printf_float+0x1b0>
 801107a:	2900      	cmp	r1, #0
 801107c:	6863      	ldr	r3, [r4, #4]
 801107e:	dd0b      	ble.n	8011098 <_printf_float+0x19c>
 8011080:	6121      	str	r1, [r4, #16]
 8011082:	b913      	cbnz	r3, 801108a <_printf_float+0x18e>
 8011084:	6822      	ldr	r2, [r4, #0]
 8011086:	07d0      	lsls	r0, r2, #31
 8011088:	d502      	bpl.n	8011090 <_printf_float+0x194>
 801108a:	3301      	adds	r3, #1
 801108c:	440b      	add	r3, r1
 801108e:	6123      	str	r3, [r4, #16]
 8011090:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011092:	f04f 0900 	mov.w	r9, #0
 8011096:	e7db      	b.n	8011050 <_printf_float+0x154>
 8011098:	b913      	cbnz	r3, 80110a0 <_printf_float+0x1a4>
 801109a:	6822      	ldr	r2, [r4, #0]
 801109c:	07d2      	lsls	r2, r2, #31
 801109e:	d501      	bpl.n	80110a4 <_printf_float+0x1a8>
 80110a0:	3302      	adds	r3, #2
 80110a2:	e7f4      	b.n	801108e <_printf_float+0x192>
 80110a4:	2301      	movs	r3, #1
 80110a6:	e7f2      	b.n	801108e <_printf_float+0x192>
 80110a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80110ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110ae:	4299      	cmp	r1, r3
 80110b0:	db05      	blt.n	80110be <_printf_float+0x1c2>
 80110b2:	6823      	ldr	r3, [r4, #0]
 80110b4:	6121      	str	r1, [r4, #16]
 80110b6:	07d8      	lsls	r0, r3, #31
 80110b8:	d5ea      	bpl.n	8011090 <_printf_float+0x194>
 80110ba:	1c4b      	adds	r3, r1, #1
 80110bc:	e7e7      	b.n	801108e <_printf_float+0x192>
 80110be:	2900      	cmp	r1, #0
 80110c0:	bfd4      	ite	le
 80110c2:	f1c1 0202 	rsble	r2, r1, #2
 80110c6:	2201      	movgt	r2, #1
 80110c8:	4413      	add	r3, r2
 80110ca:	e7e0      	b.n	801108e <_printf_float+0x192>
 80110cc:	6823      	ldr	r3, [r4, #0]
 80110ce:	055a      	lsls	r2, r3, #21
 80110d0:	d407      	bmi.n	80110e2 <_printf_float+0x1e6>
 80110d2:	6923      	ldr	r3, [r4, #16]
 80110d4:	4642      	mov	r2, r8
 80110d6:	4631      	mov	r1, r6
 80110d8:	4628      	mov	r0, r5
 80110da:	47b8      	blx	r7
 80110dc:	3001      	adds	r0, #1
 80110de:	d12b      	bne.n	8011138 <_printf_float+0x23c>
 80110e0:	e767      	b.n	8010fb2 <_printf_float+0xb6>
 80110e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80110e6:	f240 80dd 	bls.w	80112a4 <_printf_float+0x3a8>
 80110ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80110ee:	2200      	movs	r2, #0
 80110f0:	2300      	movs	r3, #0
 80110f2:	f7ef fd11 	bl	8000b18 <__aeabi_dcmpeq>
 80110f6:	2800      	cmp	r0, #0
 80110f8:	d033      	beq.n	8011162 <_printf_float+0x266>
 80110fa:	4a37      	ldr	r2, [pc, #220]	@ (80111d8 <_printf_float+0x2dc>)
 80110fc:	2301      	movs	r3, #1
 80110fe:	4631      	mov	r1, r6
 8011100:	4628      	mov	r0, r5
 8011102:	47b8      	blx	r7
 8011104:	3001      	adds	r0, #1
 8011106:	f43f af54 	beq.w	8010fb2 <_printf_float+0xb6>
 801110a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801110e:	4543      	cmp	r3, r8
 8011110:	db02      	blt.n	8011118 <_printf_float+0x21c>
 8011112:	6823      	ldr	r3, [r4, #0]
 8011114:	07d8      	lsls	r0, r3, #31
 8011116:	d50f      	bpl.n	8011138 <_printf_float+0x23c>
 8011118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801111c:	4631      	mov	r1, r6
 801111e:	4628      	mov	r0, r5
 8011120:	47b8      	blx	r7
 8011122:	3001      	adds	r0, #1
 8011124:	f43f af45 	beq.w	8010fb2 <_printf_float+0xb6>
 8011128:	f04f 0900 	mov.w	r9, #0
 801112c:	f108 38ff 	add.w	r8, r8, #4294967295
 8011130:	f104 0a1a 	add.w	sl, r4, #26
 8011134:	45c8      	cmp	r8, r9
 8011136:	dc09      	bgt.n	801114c <_printf_float+0x250>
 8011138:	6823      	ldr	r3, [r4, #0]
 801113a:	079b      	lsls	r3, r3, #30
 801113c:	f100 8103 	bmi.w	8011346 <_printf_float+0x44a>
 8011140:	68e0      	ldr	r0, [r4, #12]
 8011142:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011144:	4298      	cmp	r0, r3
 8011146:	bfb8      	it	lt
 8011148:	4618      	movlt	r0, r3
 801114a:	e734      	b.n	8010fb6 <_printf_float+0xba>
 801114c:	2301      	movs	r3, #1
 801114e:	4652      	mov	r2, sl
 8011150:	4631      	mov	r1, r6
 8011152:	4628      	mov	r0, r5
 8011154:	47b8      	blx	r7
 8011156:	3001      	adds	r0, #1
 8011158:	f43f af2b 	beq.w	8010fb2 <_printf_float+0xb6>
 801115c:	f109 0901 	add.w	r9, r9, #1
 8011160:	e7e8      	b.n	8011134 <_printf_float+0x238>
 8011162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011164:	2b00      	cmp	r3, #0
 8011166:	dc39      	bgt.n	80111dc <_printf_float+0x2e0>
 8011168:	4a1b      	ldr	r2, [pc, #108]	@ (80111d8 <_printf_float+0x2dc>)
 801116a:	2301      	movs	r3, #1
 801116c:	4631      	mov	r1, r6
 801116e:	4628      	mov	r0, r5
 8011170:	47b8      	blx	r7
 8011172:	3001      	adds	r0, #1
 8011174:	f43f af1d 	beq.w	8010fb2 <_printf_float+0xb6>
 8011178:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801117c:	ea59 0303 	orrs.w	r3, r9, r3
 8011180:	d102      	bne.n	8011188 <_printf_float+0x28c>
 8011182:	6823      	ldr	r3, [r4, #0]
 8011184:	07d9      	lsls	r1, r3, #31
 8011186:	d5d7      	bpl.n	8011138 <_printf_float+0x23c>
 8011188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801118c:	4631      	mov	r1, r6
 801118e:	4628      	mov	r0, r5
 8011190:	47b8      	blx	r7
 8011192:	3001      	adds	r0, #1
 8011194:	f43f af0d 	beq.w	8010fb2 <_printf_float+0xb6>
 8011198:	f04f 0a00 	mov.w	sl, #0
 801119c:	f104 0b1a 	add.w	fp, r4, #26
 80111a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111a2:	425b      	negs	r3, r3
 80111a4:	4553      	cmp	r3, sl
 80111a6:	dc01      	bgt.n	80111ac <_printf_float+0x2b0>
 80111a8:	464b      	mov	r3, r9
 80111aa:	e793      	b.n	80110d4 <_printf_float+0x1d8>
 80111ac:	2301      	movs	r3, #1
 80111ae:	465a      	mov	r2, fp
 80111b0:	4631      	mov	r1, r6
 80111b2:	4628      	mov	r0, r5
 80111b4:	47b8      	blx	r7
 80111b6:	3001      	adds	r0, #1
 80111b8:	f43f aefb 	beq.w	8010fb2 <_printf_float+0xb6>
 80111bc:	f10a 0a01 	add.w	sl, sl, #1
 80111c0:	e7ee      	b.n	80111a0 <_printf_float+0x2a4>
 80111c2:	bf00      	nop
 80111c4:	7fefffff 	.word	0x7fefffff
 80111c8:	080174e8 	.word	0x080174e8
 80111cc:	080174ec 	.word	0x080174ec
 80111d0:	080174f0 	.word	0x080174f0
 80111d4:	080174f4 	.word	0x080174f4
 80111d8:	08017888 	.word	0x08017888
 80111dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80111de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80111e2:	4553      	cmp	r3, sl
 80111e4:	bfa8      	it	ge
 80111e6:	4653      	movge	r3, sl
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	4699      	mov	r9, r3
 80111ec:	dc36      	bgt.n	801125c <_printf_float+0x360>
 80111ee:	f04f 0b00 	mov.w	fp, #0
 80111f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80111f6:	f104 021a 	add.w	r2, r4, #26
 80111fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80111fc:	9306      	str	r3, [sp, #24]
 80111fe:	eba3 0309 	sub.w	r3, r3, r9
 8011202:	455b      	cmp	r3, fp
 8011204:	dc31      	bgt.n	801126a <_printf_float+0x36e>
 8011206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011208:	459a      	cmp	sl, r3
 801120a:	dc3a      	bgt.n	8011282 <_printf_float+0x386>
 801120c:	6823      	ldr	r3, [r4, #0]
 801120e:	07da      	lsls	r2, r3, #31
 8011210:	d437      	bmi.n	8011282 <_printf_float+0x386>
 8011212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011214:	ebaa 0903 	sub.w	r9, sl, r3
 8011218:	9b06      	ldr	r3, [sp, #24]
 801121a:	ebaa 0303 	sub.w	r3, sl, r3
 801121e:	4599      	cmp	r9, r3
 8011220:	bfa8      	it	ge
 8011222:	4699      	movge	r9, r3
 8011224:	f1b9 0f00 	cmp.w	r9, #0
 8011228:	dc33      	bgt.n	8011292 <_printf_float+0x396>
 801122a:	f04f 0800 	mov.w	r8, #0
 801122e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011232:	f104 0b1a 	add.w	fp, r4, #26
 8011236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011238:	ebaa 0303 	sub.w	r3, sl, r3
 801123c:	eba3 0309 	sub.w	r3, r3, r9
 8011240:	4543      	cmp	r3, r8
 8011242:	f77f af79 	ble.w	8011138 <_printf_float+0x23c>
 8011246:	2301      	movs	r3, #1
 8011248:	465a      	mov	r2, fp
 801124a:	4631      	mov	r1, r6
 801124c:	4628      	mov	r0, r5
 801124e:	47b8      	blx	r7
 8011250:	3001      	adds	r0, #1
 8011252:	f43f aeae 	beq.w	8010fb2 <_printf_float+0xb6>
 8011256:	f108 0801 	add.w	r8, r8, #1
 801125a:	e7ec      	b.n	8011236 <_printf_float+0x33a>
 801125c:	4642      	mov	r2, r8
 801125e:	4631      	mov	r1, r6
 8011260:	4628      	mov	r0, r5
 8011262:	47b8      	blx	r7
 8011264:	3001      	adds	r0, #1
 8011266:	d1c2      	bne.n	80111ee <_printf_float+0x2f2>
 8011268:	e6a3      	b.n	8010fb2 <_printf_float+0xb6>
 801126a:	2301      	movs	r3, #1
 801126c:	4631      	mov	r1, r6
 801126e:	4628      	mov	r0, r5
 8011270:	9206      	str	r2, [sp, #24]
 8011272:	47b8      	blx	r7
 8011274:	3001      	adds	r0, #1
 8011276:	f43f ae9c 	beq.w	8010fb2 <_printf_float+0xb6>
 801127a:	9a06      	ldr	r2, [sp, #24]
 801127c:	f10b 0b01 	add.w	fp, fp, #1
 8011280:	e7bb      	b.n	80111fa <_printf_float+0x2fe>
 8011282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011286:	4631      	mov	r1, r6
 8011288:	4628      	mov	r0, r5
 801128a:	47b8      	blx	r7
 801128c:	3001      	adds	r0, #1
 801128e:	d1c0      	bne.n	8011212 <_printf_float+0x316>
 8011290:	e68f      	b.n	8010fb2 <_printf_float+0xb6>
 8011292:	9a06      	ldr	r2, [sp, #24]
 8011294:	464b      	mov	r3, r9
 8011296:	4442      	add	r2, r8
 8011298:	4631      	mov	r1, r6
 801129a:	4628      	mov	r0, r5
 801129c:	47b8      	blx	r7
 801129e:	3001      	adds	r0, #1
 80112a0:	d1c3      	bne.n	801122a <_printf_float+0x32e>
 80112a2:	e686      	b.n	8010fb2 <_printf_float+0xb6>
 80112a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80112a8:	f1ba 0f01 	cmp.w	sl, #1
 80112ac:	dc01      	bgt.n	80112b2 <_printf_float+0x3b6>
 80112ae:	07db      	lsls	r3, r3, #31
 80112b0:	d536      	bpl.n	8011320 <_printf_float+0x424>
 80112b2:	2301      	movs	r3, #1
 80112b4:	4642      	mov	r2, r8
 80112b6:	4631      	mov	r1, r6
 80112b8:	4628      	mov	r0, r5
 80112ba:	47b8      	blx	r7
 80112bc:	3001      	adds	r0, #1
 80112be:	f43f ae78 	beq.w	8010fb2 <_printf_float+0xb6>
 80112c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112c6:	4631      	mov	r1, r6
 80112c8:	4628      	mov	r0, r5
 80112ca:	47b8      	blx	r7
 80112cc:	3001      	adds	r0, #1
 80112ce:	f43f ae70 	beq.w	8010fb2 <_printf_float+0xb6>
 80112d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80112d6:	2200      	movs	r2, #0
 80112d8:	2300      	movs	r3, #0
 80112da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112de:	f7ef fc1b 	bl	8000b18 <__aeabi_dcmpeq>
 80112e2:	b9c0      	cbnz	r0, 8011316 <_printf_float+0x41a>
 80112e4:	4653      	mov	r3, sl
 80112e6:	f108 0201 	add.w	r2, r8, #1
 80112ea:	4631      	mov	r1, r6
 80112ec:	4628      	mov	r0, r5
 80112ee:	47b8      	blx	r7
 80112f0:	3001      	adds	r0, #1
 80112f2:	d10c      	bne.n	801130e <_printf_float+0x412>
 80112f4:	e65d      	b.n	8010fb2 <_printf_float+0xb6>
 80112f6:	2301      	movs	r3, #1
 80112f8:	465a      	mov	r2, fp
 80112fa:	4631      	mov	r1, r6
 80112fc:	4628      	mov	r0, r5
 80112fe:	47b8      	blx	r7
 8011300:	3001      	adds	r0, #1
 8011302:	f43f ae56 	beq.w	8010fb2 <_printf_float+0xb6>
 8011306:	f108 0801 	add.w	r8, r8, #1
 801130a:	45d0      	cmp	r8, sl
 801130c:	dbf3      	blt.n	80112f6 <_printf_float+0x3fa>
 801130e:	464b      	mov	r3, r9
 8011310:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011314:	e6df      	b.n	80110d6 <_printf_float+0x1da>
 8011316:	f04f 0800 	mov.w	r8, #0
 801131a:	f104 0b1a 	add.w	fp, r4, #26
 801131e:	e7f4      	b.n	801130a <_printf_float+0x40e>
 8011320:	2301      	movs	r3, #1
 8011322:	4642      	mov	r2, r8
 8011324:	e7e1      	b.n	80112ea <_printf_float+0x3ee>
 8011326:	2301      	movs	r3, #1
 8011328:	464a      	mov	r2, r9
 801132a:	4631      	mov	r1, r6
 801132c:	4628      	mov	r0, r5
 801132e:	47b8      	blx	r7
 8011330:	3001      	adds	r0, #1
 8011332:	f43f ae3e 	beq.w	8010fb2 <_printf_float+0xb6>
 8011336:	f108 0801 	add.w	r8, r8, #1
 801133a:	68e3      	ldr	r3, [r4, #12]
 801133c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801133e:	1a5b      	subs	r3, r3, r1
 8011340:	4543      	cmp	r3, r8
 8011342:	dcf0      	bgt.n	8011326 <_printf_float+0x42a>
 8011344:	e6fc      	b.n	8011140 <_printf_float+0x244>
 8011346:	f04f 0800 	mov.w	r8, #0
 801134a:	f104 0919 	add.w	r9, r4, #25
 801134e:	e7f4      	b.n	801133a <_printf_float+0x43e>

08011350 <_printf_common>:
 8011350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011354:	4616      	mov	r6, r2
 8011356:	4698      	mov	r8, r3
 8011358:	688a      	ldr	r2, [r1, #8]
 801135a:	690b      	ldr	r3, [r1, #16]
 801135c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011360:	4293      	cmp	r3, r2
 8011362:	bfb8      	it	lt
 8011364:	4613      	movlt	r3, r2
 8011366:	6033      	str	r3, [r6, #0]
 8011368:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801136c:	4607      	mov	r7, r0
 801136e:	460c      	mov	r4, r1
 8011370:	b10a      	cbz	r2, 8011376 <_printf_common+0x26>
 8011372:	3301      	adds	r3, #1
 8011374:	6033      	str	r3, [r6, #0]
 8011376:	6823      	ldr	r3, [r4, #0]
 8011378:	0699      	lsls	r1, r3, #26
 801137a:	bf42      	ittt	mi
 801137c:	6833      	ldrmi	r3, [r6, #0]
 801137e:	3302      	addmi	r3, #2
 8011380:	6033      	strmi	r3, [r6, #0]
 8011382:	6825      	ldr	r5, [r4, #0]
 8011384:	f015 0506 	ands.w	r5, r5, #6
 8011388:	d106      	bne.n	8011398 <_printf_common+0x48>
 801138a:	f104 0a19 	add.w	sl, r4, #25
 801138e:	68e3      	ldr	r3, [r4, #12]
 8011390:	6832      	ldr	r2, [r6, #0]
 8011392:	1a9b      	subs	r3, r3, r2
 8011394:	42ab      	cmp	r3, r5
 8011396:	dc26      	bgt.n	80113e6 <_printf_common+0x96>
 8011398:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801139c:	6822      	ldr	r2, [r4, #0]
 801139e:	3b00      	subs	r3, #0
 80113a0:	bf18      	it	ne
 80113a2:	2301      	movne	r3, #1
 80113a4:	0692      	lsls	r2, r2, #26
 80113a6:	d42b      	bmi.n	8011400 <_printf_common+0xb0>
 80113a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80113ac:	4641      	mov	r1, r8
 80113ae:	4638      	mov	r0, r7
 80113b0:	47c8      	blx	r9
 80113b2:	3001      	adds	r0, #1
 80113b4:	d01e      	beq.n	80113f4 <_printf_common+0xa4>
 80113b6:	6823      	ldr	r3, [r4, #0]
 80113b8:	6922      	ldr	r2, [r4, #16]
 80113ba:	f003 0306 	and.w	r3, r3, #6
 80113be:	2b04      	cmp	r3, #4
 80113c0:	bf02      	ittt	eq
 80113c2:	68e5      	ldreq	r5, [r4, #12]
 80113c4:	6833      	ldreq	r3, [r6, #0]
 80113c6:	1aed      	subeq	r5, r5, r3
 80113c8:	68a3      	ldr	r3, [r4, #8]
 80113ca:	bf0c      	ite	eq
 80113cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80113d0:	2500      	movne	r5, #0
 80113d2:	4293      	cmp	r3, r2
 80113d4:	bfc4      	itt	gt
 80113d6:	1a9b      	subgt	r3, r3, r2
 80113d8:	18ed      	addgt	r5, r5, r3
 80113da:	2600      	movs	r6, #0
 80113dc:	341a      	adds	r4, #26
 80113de:	42b5      	cmp	r5, r6
 80113e0:	d11a      	bne.n	8011418 <_printf_common+0xc8>
 80113e2:	2000      	movs	r0, #0
 80113e4:	e008      	b.n	80113f8 <_printf_common+0xa8>
 80113e6:	2301      	movs	r3, #1
 80113e8:	4652      	mov	r2, sl
 80113ea:	4641      	mov	r1, r8
 80113ec:	4638      	mov	r0, r7
 80113ee:	47c8      	blx	r9
 80113f0:	3001      	adds	r0, #1
 80113f2:	d103      	bne.n	80113fc <_printf_common+0xac>
 80113f4:	f04f 30ff 	mov.w	r0, #4294967295
 80113f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113fc:	3501      	adds	r5, #1
 80113fe:	e7c6      	b.n	801138e <_printf_common+0x3e>
 8011400:	18e1      	adds	r1, r4, r3
 8011402:	1c5a      	adds	r2, r3, #1
 8011404:	2030      	movs	r0, #48	@ 0x30
 8011406:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801140a:	4422      	add	r2, r4
 801140c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011410:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011414:	3302      	adds	r3, #2
 8011416:	e7c7      	b.n	80113a8 <_printf_common+0x58>
 8011418:	2301      	movs	r3, #1
 801141a:	4622      	mov	r2, r4
 801141c:	4641      	mov	r1, r8
 801141e:	4638      	mov	r0, r7
 8011420:	47c8      	blx	r9
 8011422:	3001      	adds	r0, #1
 8011424:	d0e6      	beq.n	80113f4 <_printf_common+0xa4>
 8011426:	3601      	adds	r6, #1
 8011428:	e7d9      	b.n	80113de <_printf_common+0x8e>
	...

0801142c <_printf_i>:
 801142c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011430:	7e0f      	ldrb	r7, [r1, #24]
 8011432:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011434:	2f78      	cmp	r7, #120	@ 0x78
 8011436:	4691      	mov	r9, r2
 8011438:	4680      	mov	r8, r0
 801143a:	460c      	mov	r4, r1
 801143c:	469a      	mov	sl, r3
 801143e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011442:	d807      	bhi.n	8011454 <_printf_i+0x28>
 8011444:	2f62      	cmp	r7, #98	@ 0x62
 8011446:	d80a      	bhi.n	801145e <_printf_i+0x32>
 8011448:	2f00      	cmp	r7, #0
 801144a:	f000 80d2 	beq.w	80115f2 <_printf_i+0x1c6>
 801144e:	2f58      	cmp	r7, #88	@ 0x58
 8011450:	f000 80b9 	beq.w	80115c6 <_printf_i+0x19a>
 8011454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011458:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801145c:	e03a      	b.n	80114d4 <_printf_i+0xa8>
 801145e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011462:	2b15      	cmp	r3, #21
 8011464:	d8f6      	bhi.n	8011454 <_printf_i+0x28>
 8011466:	a101      	add	r1, pc, #4	@ (adr r1, 801146c <_printf_i+0x40>)
 8011468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801146c:	080114c5 	.word	0x080114c5
 8011470:	080114d9 	.word	0x080114d9
 8011474:	08011455 	.word	0x08011455
 8011478:	08011455 	.word	0x08011455
 801147c:	08011455 	.word	0x08011455
 8011480:	08011455 	.word	0x08011455
 8011484:	080114d9 	.word	0x080114d9
 8011488:	08011455 	.word	0x08011455
 801148c:	08011455 	.word	0x08011455
 8011490:	08011455 	.word	0x08011455
 8011494:	08011455 	.word	0x08011455
 8011498:	080115d9 	.word	0x080115d9
 801149c:	08011503 	.word	0x08011503
 80114a0:	08011593 	.word	0x08011593
 80114a4:	08011455 	.word	0x08011455
 80114a8:	08011455 	.word	0x08011455
 80114ac:	080115fb 	.word	0x080115fb
 80114b0:	08011455 	.word	0x08011455
 80114b4:	08011503 	.word	0x08011503
 80114b8:	08011455 	.word	0x08011455
 80114bc:	08011455 	.word	0x08011455
 80114c0:	0801159b 	.word	0x0801159b
 80114c4:	6833      	ldr	r3, [r6, #0]
 80114c6:	1d1a      	adds	r2, r3, #4
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	6032      	str	r2, [r6, #0]
 80114cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80114d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80114d4:	2301      	movs	r3, #1
 80114d6:	e09d      	b.n	8011614 <_printf_i+0x1e8>
 80114d8:	6833      	ldr	r3, [r6, #0]
 80114da:	6820      	ldr	r0, [r4, #0]
 80114dc:	1d19      	adds	r1, r3, #4
 80114de:	6031      	str	r1, [r6, #0]
 80114e0:	0606      	lsls	r6, r0, #24
 80114e2:	d501      	bpl.n	80114e8 <_printf_i+0xbc>
 80114e4:	681d      	ldr	r5, [r3, #0]
 80114e6:	e003      	b.n	80114f0 <_printf_i+0xc4>
 80114e8:	0645      	lsls	r5, r0, #25
 80114ea:	d5fb      	bpl.n	80114e4 <_printf_i+0xb8>
 80114ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80114f0:	2d00      	cmp	r5, #0
 80114f2:	da03      	bge.n	80114fc <_printf_i+0xd0>
 80114f4:	232d      	movs	r3, #45	@ 0x2d
 80114f6:	426d      	negs	r5, r5
 80114f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80114fc:	4859      	ldr	r0, [pc, #356]	@ (8011664 <_printf_i+0x238>)
 80114fe:	230a      	movs	r3, #10
 8011500:	e011      	b.n	8011526 <_printf_i+0xfa>
 8011502:	6821      	ldr	r1, [r4, #0]
 8011504:	6833      	ldr	r3, [r6, #0]
 8011506:	0608      	lsls	r0, r1, #24
 8011508:	f853 5b04 	ldr.w	r5, [r3], #4
 801150c:	d402      	bmi.n	8011514 <_printf_i+0xe8>
 801150e:	0649      	lsls	r1, r1, #25
 8011510:	bf48      	it	mi
 8011512:	b2ad      	uxthmi	r5, r5
 8011514:	2f6f      	cmp	r7, #111	@ 0x6f
 8011516:	4853      	ldr	r0, [pc, #332]	@ (8011664 <_printf_i+0x238>)
 8011518:	6033      	str	r3, [r6, #0]
 801151a:	bf14      	ite	ne
 801151c:	230a      	movne	r3, #10
 801151e:	2308      	moveq	r3, #8
 8011520:	2100      	movs	r1, #0
 8011522:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011526:	6866      	ldr	r6, [r4, #4]
 8011528:	60a6      	str	r6, [r4, #8]
 801152a:	2e00      	cmp	r6, #0
 801152c:	bfa2      	ittt	ge
 801152e:	6821      	ldrge	r1, [r4, #0]
 8011530:	f021 0104 	bicge.w	r1, r1, #4
 8011534:	6021      	strge	r1, [r4, #0]
 8011536:	b90d      	cbnz	r5, 801153c <_printf_i+0x110>
 8011538:	2e00      	cmp	r6, #0
 801153a:	d04b      	beq.n	80115d4 <_printf_i+0x1a8>
 801153c:	4616      	mov	r6, r2
 801153e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011542:	fb03 5711 	mls	r7, r3, r1, r5
 8011546:	5dc7      	ldrb	r7, [r0, r7]
 8011548:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801154c:	462f      	mov	r7, r5
 801154e:	42bb      	cmp	r3, r7
 8011550:	460d      	mov	r5, r1
 8011552:	d9f4      	bls.n	801153e <_printf_i+0x112>
 8011554:	2b08      	cmp	r3, #8
 8011556:	d10b      	bne.n	8011570 <_printf_i+0x144>
 8011558:	6823      	ldr	r3, [r4, #0]
 801155a:	07df      	lsls	r7, r3, #31
 801155c:	d508      	bpl.n	8011570 <_printf_i+0x144>
 801155e:	6923      	ldr	r3, [r4, #16]
 8011560:	6861      	ldr	r1, [r4, #4]
 8011562:	4299      	cmp	r1, r3
 8011564:	bfde      	ittt	le
 8011566:	2330      	movle	r3, #48	@ 0x30
 8011568:	f806 3c01 	strble.w	r3, [r6, #-1]
 801156c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011570:	1b92      	subs	r2, r2, r6
 8011572:	6122      	str	r2, [r4, #16]
 8011574:	f8cd a000 	str.w	sl, [sp]
 8011578:	464b      	mov	r3, r9
 801157a:	aa03      	add	r2, sp, #12
 801157c:	4621      	mov	r1, r4
 801157e:	4640      	mov	r0, r8
 8011580:	f7ff fee6 	bl	8011350 <_printf_common>
 8011584:	3001      	adds	r0, #1
 8011586:	d14a      	bne.n	801161e <_printf_i+0x1f2>
 8011588:	f04f 30ff 	mov.w	r0, #4294967295
 801158c:	b004      	add	sp, #16
 801158e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011592:	6823      	ldr	r3, [r4, #0]
 8011594:	f043 0320 	orr.w	r3, r3, #32
 8011598:	6023      	str	r3, [r4, #0]
 801159a:	4833      	ldr	r0, [pc, #204]	@ (8011668 <_printf_i+0x23c>)
 801159c:	2778      	movs	r7, #120	@ 0x78
 801159e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80115a2:	6823      	ldr	r3, [r4, #0]
 80115a4:	6831      	ldr	r1, [r6, #0]
 80115a6:	061f      	lsls	r7, r3, #24
 80115a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80115ac:	d402      	bmi.n	80115b4 <_printf_i+0x188>
 80115ae:	065f      	lsls	r7, r3, #25
 80115b0:	bf48      	it	mi
 80115b2:	b2ad      	uxthmi	r5, r5
 80115b4:	6031      	str	r1, [r6, #0]
 80115b6:	07d9      	lsls	r1, r3, #31
 80115b8:	bf44      	itt	mi
 80115ba:	f043 0320 	orrmi.w	r3, r3, #32
 80115be:	6023      	strmi	r3, [r4, #0]
 80115c0:	b11d      	cbz	r5, 80115ca <_printf_i+0x19e>
 80115c2:	2310      	movs	r3, #16
 80115c4:	e7ac      	b.n	8011520 <_printf_i+0xf4>
 80115c6:	4827      	ldr	r0, [pc, #156]	@ (8011664 <_printf_i+0x238>)
 80115c8:	e7e9      	b.n	801159e <_printf_i+0x172>
 80115ca:	6823      	ldr	r3, [r4, #0]
 80115cc:	f023 0320 	bic.w	r3, r3, #32
 80115d0:	6023      	str	r3, [r4, #0]
 80115d2:	e7f6      	b.n	80115c2 <_printf_i+0x196>
 80115d4:	4616      	mov	r6, r2
 80115d6:	e7bd      	b.n	8011554 <_printf_i+0x128>
 80115d8:	6833      	ldr	r3, [r6, #0]
 80115da:	6825      	ldr	r5, [r4, #0]
 80115dc:	6961      	ldr	r1, [r4, #20]
 80115de:	1d18      	adds	r0, r3, #4
 80115e0:	6030      	str	r0, [r6, #0]
 80115e2:	062e      	lsls	r6, r5, #24
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	d501      	bpl.n	80115ec <_printf_i+0x1c0>
 80115e8:	6019      	str	r1, [r3, #0]
 80115ea:	e002      	b.n	80115f2 <_printf_i+0x1c6>
 80115ec:	0668      	lsls	r0, r5, #25
 80115ee:	d5fb      	bpl.n	80115e8 <_printf_i+0x1bc>
 80115f0:	8019      	strh	r1, [r3, #0]
 80115f2:	2300      	movs	r3, #0
 80115f4:	6123      	str	r3, [r4, #16]
 80115f6:	4616      	mov	r6, r2
 80115f8:	e7bc      	b.n	8011574 <_printf_i+0x148>
 80115fa:	6833      	ldr	r3, [r6, #0]
 80115fc:	1d1a      	adds	r2, r3, #4
 80115fe:	6032      	str	r2, [r6, #0]
 8011600:	681e      	ldr	r6, [r3, #0]
 8011602:	6862      	ldr	r2, [r4, #4]
 8011604:	2100      	movs	r1, #0
 8011606:	4630      	mov	r0, r6
 8011608:	f7ee fe0a 	bl	8000220 <memchr>
 801160c:	b108      	cbz	r0, 8011612 <_printf_i+0x1e6>
 801160e:	1b80      	subs	r0, r0, r6
 8011610:	6060      	str	r0, [r4, #4]
 8011612:	6863      	ldr	r3, [r4, #4]
 8011614:	6123      	str	r3, [r4, #16]
 8011616:	2300      	movs	r3, #0
 8011618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801161c:	e7aa      	b.n	8011574 <_printf_i+0x148>
 801161e:	6923      	ldr	r3, [r4, #16]
 8011620:	4632      	mov	r2, r6
 8011622:	4649      	mov	r1, r9
 8011624:	4640      	mov	r0, r8
 8011626:	47d0      	blx	sl
 8011628:	3001      	adds	r0, #1
 801162a:	d0ad      	beq.n	8011588 <_printf_i+0x15c>
 801162c:	6823      	ldr	r3, [r4, #0]
 801162e:	079b      	lsls	r3, r3, #30
 8011630:	d413      	bmi.n	801165a <_printf_i+0x22e>
 8011632:	68e0      	ldr	r0, [r4, #12]
 8011634:	9b03      	ldr	r3, [sp, #12]
 8011636:	4298      	cmp	r0, r3
 8011638:	bfb8      	it	lt
 801163a:	4618      	movlt	r0, r3
 801163c:	e7a6      	b.n	801158c <_printf_i+0x160>
 801163e:	2301      	movs	r3, #1
 8011640:	4632      	mov	r2, r6
 8011642:	4649      	mov	r1, r9
 8011644:	4640      	mov	r0, r8
 8011646:	47d0      	blx	sl
 8011648:	3001      	adds	r0, #1
 801164a:	d09d      	beq.n	8011588 <_printf_i+0x15c>
 801164c:	3501      	adds	r5, #1
 801164e:	68e3      	ldr	r3, [r4, #12]
 8011650:	9903      	ldr	r1, [sp, #12]
 8011652:	1a5b      	subs	r3, r3, r1
 8011654:	42ab      	cmp	r3, r5
 8011656:	dcf2      	bgt.n	801163e <_printf_i+0x212>
 8011658:	e7eb      	b.n	8011632 <_printf_i+0x206>
 801165a:	2500      	movs	r5, #0
 801165c:	f104 0619 	add.w	r6, r4, #25
 8011660:	e7f5      	b.n	801164e <_printf_i+0x222>
 8011662:	bf00      	nop
 8011664:	080174f8 	.word	0x080174f8
 8011668:	08017509 	.word	0x08017509

0801166c <_scanf_float>:
 801166c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011670:	b087      	sub	sp, #28
 8011672:	4617      	mov	r7, r2
 8011674:	9303      	str	r3, [sp, #12]
 8011676:	688b      	ldr	r3, [r1, #8]
 8011678:	1e5a      	subs	r2, r3, #1
 801167a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801167e:	bf81      	itttt	hi
 8011680:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011684:	eb03 0b05 	addhi.w	fp, r3, r5
 8011688:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801168c:	608b      	strhi	r3, [r1, #8]
 801168e:	680b      	ldr	r3, [r1, #0]
 8011690:	460a      	mov	r2, r1
 8011692:	f04f 0500 	mov.w	r5, #0
 8011696:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801169a:	f842 3b1c 	str.w	r3, [r2], #28
 801169e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80116a2:	4680      	mov	r8, r0
 80116a4:	460c      	mov	r4, r1
 80116a6:	bf98      	it	ls
 80116a8:	f04f 0b00 	movls.w	fp, #0
 80116ac:	9201      	str	r2, [sp, #4]
 80116ae:	4616      	mov	r6, r2
 80116b0:	46aa      	mov	sl, r5
 80116b2:	46a9      	mov	r9, r5
 80116b4:	9502      	str	r5, [sp, #8]
 80116b6:	68a2      	ldr	r2, [r4, #8]
 80116b8:	b152      	cbz	r2, 80116d0 <_scanf_float+0x64>
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	2b4e      	cmp	r3, #78	@ 0x4e
 80116c0:	d864      	bhi.n	801178c <_scanf_float+0x120>
 80116c2:	2b40      	cmp	r3, #64	@ 0x40
 80116c4:	d83c      	bhi.n	8011740 <_scanf_float+0xd4>
 80116c6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80116ca:	b2c8      	uxtb	r0, r1
 80116cc:	280e      	cmp	r0, #14
 80116ce:	d93a      	bls.n	8011746 <_scanf_float+0xda>
 80116d0:	f1b9 0f00 	cmp.w	r9, #0
 80116d4:	d003      	beq.n	80116de <_scanf_float+0x72>
 80116d6:	6823      	ldr	r3, [r4, #0]
 80116d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80116dc:	6023      	str	r3, [r4, #0]
 80116de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80116e2:	f1ba 0f01 	cmp.w	sl, #1
 80116e6:	f200 8117 	bhi.w	8011918 <_scanf_float+0x2ac>
 80116ea:	9b01      	ldr	r3, [sp, #4]
 80116ec:	429e      	cmp	r6, r3
 80116ee:	f200 8108 	bhi.w	8011902 <_scanf_float+0x296>
 80116f2:	2001      	movs	r0, #1
 80116f4:	b007      	add	sp, #28
 80116f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116fa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80116fe:	2a0d      	cmp	r2, #13
 8011700:	d8e6      	bhi.n	80116d0 <_scanf_float+0x64>
 8011702:	a101      	add	r1, pc, #4	@ (adr r1, 8011708 <_scanf_float+0x9c>)
 8011704:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011708:	0801184f 	.word	0x0801184f
 801170c:	080116d1 	.word	0x080116d1
 8011710:	080116d1 	.word	0x080116d1
 8011714:	080116d1 	.word	0x080116d1
 8011718:	080118af 	.word	0x080118af
 801171c:	08011887 	.word	0x08011887
 8011720:	080116d1 	.word	0x080116d1
 8011724:	080116d1 	.word	0x080116d1
 8011728:	0801185d 	.word	0x0801185d
 801172c:	080116d1 	.word	0x080116d1
 8011730:	080116d1 	.word	0x080116d1
 8011734:	080116d1 	.word	0x080116d1
 8011738:	080116d1 	.word	0x080116d1
 801173c:	08011815 	.word	0x08011815
 8011740:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8011744:	e7db      	b.n	80116fe <_scanf_float+0x92>
 8011746:	290e      	cmp	r1, #14
 8011748:	d8c2      	bhi.n	80116d0 <_scanf_float+0x64>
 801174a:	a001      	add	r0, pc, #4	@ (adr r0, 8011750 <_scanf_float+0xe4>)
 801174c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011750:	08011805 	.word	0x08011805
 8011754:	080116d1 	.word	0x080116d1
 8011758:	08011805 	.word	0x08011805
 801175c:	0801189b 	.word	0x0801189b
 8011760:	080116d1 	.word	0x080116d1
 8011764:	080117ad 	.word	0x080117ad
 8011768:	080117eb 	.word	0x080117eb
 801176c:	080117eb 	.word	0x080117eb
 8011770:	080117eb 	.word	0x080117eb
 8011774:	080117eb 	.word	0x080117eb
 8011778:	080117eb 	.word	0x080117eb
 801177c:	080117eb 	.word	0x080117eb
 8011780:	080117eb 	.word	0x080117eb
 8011784:	080117eb 	.word	0x080117eb
 8011788:	080117eb 	.word	0x080117eb
 801178c:	2b6e      	cmp	r3, #110	@ 0x6e
 801178e:	d809      	bhi.n	80117a4 <_scanf_float+0x138>
 8011790:	2b60      	cmp	r3, #96	@ 0x60
 8011792:	d8b2      	bhi.n	80116fa <_scanf_float+0x8e>
 8011794:	2b54      	cmp	r3, #84	@ 0x54
 8011796:	d07b      	beq.n	8011890 <_scanf_float+0x224>
 8011798:	2b59      	cmp	r3, #89	@ 0x59
 801179a:	d199      	bne.n	80116d0 <_scanf_float+0x64>
 801179c:	2d07      	cmp	r5, #7
 801179e:	d197      	bne.n	80116d0 <_scanf_float+0x64>
 80117a0:	2508      	movs	r5, #8
 80117a2:	e02c      	b.n	80117fe <_scanf_float+0x192>
 80117a4:	2b74      	cmp	r3, #116	@ 0x74
 80117a6:	d073      	beq.n	8011890 <_scanf_float+0x224>
 80117a8:	2b79      	cmp	r3, #121	@ 0x79
 80117aa:	e7f6      	b.n	801179a <_scanf_float+0x12e>
 80117ac:	6821      	ldr	r1, [r4, #0]
 80117ae:	05c8      	lsls	r0, r1, #23
 80117b0:	d51b      	bpl.n	80117ea <_scanf_float+0x17e>
 80117b2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80117b6:	6021      	str	r1, [r4, #0]
 80117b8:	f109 0901 	add.w	r9, r9, #1
 80117bc:	f1bb 0f00 	cmp.w	fp, #0
 80117c0:	d003      	beq.n	80117ca <_scanf_float+0x15e>
 80117c2:	3201      	adds	r2, #1
 80117c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80117c8:	60a2      	str	r2, [r4, #8]
 80117ca:	68a3      	ldr	r3, [r4, #8]
 80117cc:	3b01      	subs	r3, #1
 80117ce:	60a3      	str	r3, [r4, #8]
 80117d0:	6923      	ldr	r3, [r4, #16]
 80117d2:	3301      	adds	r3, #1
 80117d4:	6123      	str	r3, [r4, #16]
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	3b01      	subs	r3, #1
 80117da:	2b00      	cmp	r3, #0
 80117dc:	607b      	str	r3, [r7, #4]
 80117de:	f340 8087 	ble.w	80118f0 <_scanf_float+0x284>
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	3301      	adds	r3, #1
 80117e6:	603b      	str	r3, [r7, #0]
 80117e8:	e765      	b.n	80116b6 <_scanf_float+0x4a>
 80117ea:	eb1a 0105 	adds.w	r1, sl, r5
 80117ee:	f47f af6f 	bne.w	80116d0 <_scanf_float+0x64>
 80117f2:	6822      	ldr	r2, [r4, #0]
 80117f4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80117f8:	6022      	str	r2, [r4, #0]
 80117fa:	460d      	mov	r5, r1
 80117fc:	468a      	mov	sl, r1
 80117fe:	f806 3b01 	strb.w	r3, [r6], #1
 8011802:	e7e2      	b.n	80117ca <_scanf_float+0x15e>
 8011804:	6822      	ldr	r2, [r4, #0]
 8011806:	0610      	lsls	r0, r2, #24
 8011808:	f57f af62 	bpl.w	80116d0 <_scanf_float+0x64>
 801180c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011810:	6022      	str	r2, [r4, #0]
 8011812:	e7f4      	b.n	80117fe <_scanf_float+0x192>
 8011814:	f1ba 0f00 	cmp.w	sl, #0
 8011818:	d10e      	bne.n	8011838 <_scanf_float+0x1cc>
 801181a:	f1b9 0f00 	cmp.w	r9, #0
 801181e:	d10e      	bne.n	801183e <_scanf_float+0x1d2>
 8011820:	6822      	ldr	r2, [r4, #0]
 8011822:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011826:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801182a:	d108      	bne.n	801183e <_scanf_float+0x1d2>
 801182c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011830:	6022      	str	r2, [r4, #0]
 8011832:	f04f 0a01 	mov.w	sl, #1
 8011836:	e7e2      	b.n	80117fe <_scanf_float+0x192>
 8011838:	f1ba 0f02 	cmp.w	sl, #2
 801183c:	d055      	beq.n	80118ea <_scanf_float+0x27e>
 801183e:	2d01      	cmp	r5, #1
 8011840:	d002      	beq.n	8011848 <_scanf_float+0x1dc>
 8011842:	2d04      	cmp	r5, #4
 8011844:	f47f af44 	bne.w	80116d0 <_scanf_float+0x64>
 8011848:	3501      	adds	r5, #1
 801184a:	b2ed      	uxtb	r5, r5
 801184c:	e7d7      	b.n	80117fe <_scanf_float+0x192>
 801184e:	f1ba 0f01 	cmp.w	sl, #1
 8011852:	f47f af3d 	bne.w	80116d0 <_scanf_float+0x64>
 8011856:	f04f 0a02 	mov.w	sl, #2
 801185a:	e7d0      	b.n	80117fe <_scanf_float+0x192>
 801185c:	b97d      	cbnz	r5, 801187e <_scanf_float+0x212>
 801185e:	f1b9 0f00 	cmp.w	r9, #0
 8011862:	f47f af38 	bne.w	80116d6 <_scanf_float+0x6a>
 8011866:	6822      	ldr	r2, [r4, #0]
 8011868:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801186c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011870:	f040 8108 	bne.w	8011a84 <_scanf_float+0x418>
 8011874:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011878:	6022      	str	r2, [r4, #0]
 801187a:	2501      	movs	r5, #1
 801187c:	e7bf      	b.n	80117fe <_scanf_float+0x192>
 801187e:	2d03      	cmp	r5, #3
 8011880:	d0e2      	beq.n	8011848 <_scanf_float+0x1dc>
 8011882:	2d05      	cmp	r5, #5
 8011884:	e7de      	b.n	8011844 <_scanf_float+0x1d8>
 8011886:	2d02      	cmp	r5, #2
 8011888:	f47f af22 	bne.w	80116d0 <_scanf_float+0x64>
 801188c:	2503      	movs	r5, #3
 801188e:	e7b6      	b.n	80117fe <_scanf_float+0x192>
 8011890:	2d06      	cmp	r5, #6
 8011892:	f47f af1d 	bne.w	80116d0 <_scanf_float+0x64>
 8011896:	2507      	movs	r5, #7
 8011898:	e7b1      	b.n	80117fe <_scanf_float+0x192>
 801189a:	6822      	ldr	r2, [r4, #0]
 801189c:	0591      	lsls	r1, r2, #22
 801189e:	f57f af17 	bpl.w	80116d0 <_scanf_float+0x64>
 80118a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80118a6:	6022      	str	r2, [r4, #0]
 80118a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80118ac:	e7a7      	b.n	80117fe <_scanf_float+0x192>
 80118ae:	6822      	ldr	r2, [r4, #0]
 80118b0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80118b4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80118b8:	d006      	beq.n	80118c8 <_scanf_float+0x25c>
 80118ba:	0550      	lsls	r0, r2, #21
 80118bc:	f57f af08 	bpl.w	80116d0 <_scanf_float+0x64>
 80118c0:	f1b9 0f00 	cmp.w	r9, #0
 80118c4:	f000 80de 	beq.w	8011a84 <_scanf_float+0x418>
 80118c8:	0591      	lsls	r1, r2, #22
 80118ca:	bf58      	it	pl
 80118cc:	9902      	ldrpl	r1, [sp, #8]
 80118ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80118d2:	bf58      	it	pl
 80118d4:	eba9 0101 	subpl.w	r1, r9, r1
 80118d8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80118dc:	bf58      	it	pl
 80118de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80118e2:	6022      	str	r2, [r4, #0]
 80118e4:	f04f 0900 	mov.w	r9, #0
 80118e8:	e789      	b.n	80117fe <_scanf_float+0x192>
 80118ea:	f04f 0a03 	mov.w	sl, #3
 80118ee:	e786      	b.n	80117fe <_scanf_float+0x192>
 80118f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80118f4:	4639      	mov	r1, r7
 80118f6:	4640      	mov	r0, r8
 80118f8:	4798      	blx	r3
 80118fa:	2800      	cmp	r0, #0
 80118fc:	f43f aedb 	beq.w	80116b6 <_scanf_float+0x4a>
 8011900:	e6e6      	b.n	80116d0 <_scanf_float+0x64>
 8011902:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011906:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801190a:	463a      	mov	r2, r7
 801190c:	4640      	mov	r0, r8
 801190e:	4798      	blx	r3
 8011910:	6923      	ldr	r3, [r4, #16]
 8011912:	3b01      	subs	r3, #1
 8011914:	6123      	str	r3, [r4, #16]
 8011916:	e6e8      	b.n	80116ea <_scanf_float+0x7e>
 8011918:	1e6b      	subs	r3, r5, #1
 801191a:	2b06      	cmp	r3, #6
 801191c:	d824      	bhi.n	8011968 <_scanf_float+0x2fc>
 801191e:	2d02      	cmp	r5, #2
 8011920:	d836      	bhi.n	8011990 <_scanf_float+0x324>
 8011922:	9b01      	ldr	r3, [sp, #4]
 8011924:	429e      	cmp	r6, r3
 8011926:	f67f aee4 	bls.w	80116f2 <_scanf_float+0x86>
 801192a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801192e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011932:	463a      	mov	r2, r7
 8011934:	4640      	mov	r0, r8
 8011936:	4798      	blx	r3
 8011938:	6923      	ldr	r3, [r4, #16]
 801193a:	3b01      	subs	r3, #1
 801193c:	6123      	str	r3, [r4, #16]
 801193e:	e7f0      	b.n	8011922 <_scanf_float+0x2b6>
 8011940:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011944:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011948:	463a      	mov	r2, r7
 801194a:	4640      	mov	r0, r8
 801194c:	4798      	blx	r3
 801194e:	6923      	ldr	r3, [r4, #16]
 8011950:	3b01      	subs	r3, #1
 8011952:	6123      	str	r3, [r4, #16]
 8011954:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011958:	fa5f fa8a 	uxtb.w	sl, sl
 801195c:	f1ba 0f02 	cmp.w	sl, #2
 8011960:	d1ee      	bne.n	8011940 <_scanf_float+0x2d4>
 8011962:	3d03      	subs	r5, #3
 8011964:	b2ed      	uxtb	r5, r5
 8011966:	1b76      	subs	r6, r6, r5
 8011968:	6823      	ldr	r3, [r4, #0]
 801196a:	05da      	lsls	r2, r3, #23
 801196c:	d530      	bpl.n	80119d0 <_scanf_float+0x364>
 801196e:	055b      	lsls	r3, r3, #21
 8011970:	d511      	bpl.n	8011996 <_scanf_float+0x32a>
 8011972:	9b01      	ldr	r3, [sp, #4]
 8011974:	429e      	cmp	r6, r3
 8011976:	f67f aebc 	bls.w	80116f2 <_scanf_float+0x86>
 801197a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801197e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011982:	463a      	mov	r2, r7
 8011984:	4640      	mov	r0, r8
 8011986:	4798      	blx	r3
 8011988:	6923      	ldr	r3, [r4, #16]
 801198a:	3b01      	subs	r3, #1
 801198c:	6123      	str	r3, [r4, #16]
 801198e:	e7f0      	b.n	8011972 <_scanf_float+0x306>
 8011990:	46aa      	mov	sl, r5
 8011992:	46b3      	mov	fp, r6
 8011994:	e7de      	b.n	8011954 <_scanf_float+0x2e8>
 8011996:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801199a:	6923      	ldr	r3, [r4, #16]
 801199c:	2965      	cmp	r1, #101	@ 0x65
 801199e:	f103 33ff 	add.w	r3, r3, #4294967295
 80119a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80119a6:	6123      	str	r3, [r4, #16]
 80119a8:	d00c      	beq.n	80119c4 <_scanf_float+0x358>
 80119aa:	2945      	cmp	r1, #69	@ 0x45
 80119ac:	d00a      	beq.n	80119c4 <_scanf_float+0x358>
 80119ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80119b2:	463a      	mov	r2, r7
 80119b4:	4640      	mov	r0, r8
 80119b6:	4798      	blx	r3
 80119b8:	6923      	ldr	r3, [r4, #16]
 80119ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80119be:	3b01      	subs	r3, #1
 80119c0:	1eb5      	subs	r5, r6, #2
 80119c2:	6123      	str	r3, [r4, #16]
 80119c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80119c8:	463a      	mov	r2, r7
 80119ca:	4640      	mov	r0, r8
 80119cc:	4798      	blx	r3
 80119ce:	462e      	mov	r6, r5
 80119d0:	6822      	ldr	r2, [r4, #0]
 80119d2:	f012 0210 	ands.w	r2, r2, #16
 80119d6:	d001      	beq.n	80119dc <_scanf_float+0x370>
 80119d8:	2000      	movs	r0, #0
 80119da:	e68b      	b.n	80116f4 <_scanf_float+0x88>
 80119dc:	7032      	strb	r2, [r6, #0]
 80119de:	6823      	ldr	r3, [r4, #0]
 80119e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80119e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80119e8:	d11c      	bne.n	8011a24 <_scanf_float+0x3b8>
 80119ea:	9b02      	ldr	r3, [sp, #8]
 80119ec:	454b      	cmp	r3, r9
 80119ee:	eba3 0209 	sub.w	r2, r3, r9
 80119f2:	d123      	bne.n	8011a3c <_scanf_float+0x3d0>
 80119f4:	9901      	ldr	r1, [sp, #4]
 80119f6:	2200      	movs	r2, #0
 80119f8:	4640      	mov	r0, r8
 80119fa:	f002 fc45 	bl	8014288 <_strtod_r>
 80119fe:	9b03      	ldr	r3, [sp, #12]
 8011a00:	6821      	ldr	r1, [r4, #0]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	f011 0f02 	tst.w	r1, #2
 8011a08:	ec57 6b10 	vmov	r6, r7, d0
 8011a0c:	f103 0204 	add.w	r2, r3, #4
 8011a10:	d01f      	beq.n	8011a52 <_scanf_float+0x3e6>
 8011a12:	9903      	ldr	r1, [sp, #12]
 8011a14:	600a      	str	r2, [r1, #0]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	e9c3 6700 	strd	r6, r7, [r3]
 8011a1c:	68e3      	ldr	r3, [r4, #12]
 8011a1e:	3301      	adds	r3, #1
 8011a20:	60e3      	str	r3, [r4, #12]
 8011a22:	e7d9      	b.n	80119d8 <_scanf_float+0x36c>
 8011a24:	9b04      	ldr	r3, [sp, #16]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d0e4      	beq.n	80119f4 <_scanf_float+0x388>
 8011a2a:	9905      	ldr	r1, [sp, #20]
 8011a2c:	230a      	movs	r3, #10
 8011a2e:	3101      	adds	r1, #1
 8011a30:	4640      	mov	r0, r8
 8011a32:	f002 fca9 	bl	8014388 <_strtol_r>
 8011a36:	9b04      	ldr	r3, [sp, #16]
 8011a38:	9e05      	ldr	r6, [sp, #20]
 8011a3a:	1ac2      	subs	r2, r0, r3
 8011a3c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011a40:	429e      	cmp	r6, r3
 8011a42:	bf28      	it	cs
 8011a44:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011a48:	4910      	ldr	r1, [pc, #64]	@ (8011a8c <_scanf_float+0x420>)
 8011a4a:	4630      	mov	r0, r6
 8011a4c:	f000 f8e4 	bl	8011c18 <siprintf>
 8011a50:	e7d0      	b.n	80119f4 <_scanf_float+0x388>
 8011a52:	f011 0f04 	tst.w	r1, #4
 8011a56:	9903      	ldr	r1, [sp, #12]
 8011a58:	600a      	str	r2, [r1, #0]
 8011a5a:	d1dc      	bne.n	8011a16 <_scanf_float+0x3aa>
 8011a5c:	681d      	ldr	r5, [r3, #0]
 8011a5e:	4632      	mov	r2, r6
 8011a60:	463b      	mov	r3, r7
 8011a62:	4630      	mov	r0, r6
 8011a64:	4639      	mov	r1, r7
 8011a66:	f7ef f889 	bl	8000b7c <__aeabi_dcmpun>
 8011a6a:	b128      	cbz	r0, 8011a78 <_scanf_float+0x40c>
 8011a6c:	4808      	ldr	r0, [pc, #32]	@ (8011a90 <_scanf_float+0x424>)
 8011a6e:	f000 fa03 	bl	8011e78 <nanf>
 8011a72:	ed85 0a00 	vstr	s0, [r5]
 8011a76:	e7d1      	b.n	8011a1c <_scanf_float+0x3b0>
 8011a78:	4630      	mov	r0, r6
 8011a7a:	4639      	mov	r1, r7
 8011a7c:	f7ef f8dc 	bl	8000c38 <__aeabi_d2f>
 8011a80:	6028      	str	r0, [r5, #0]
 8011a82:	e7cb      	b.n	8011a1c <_scanf_float+0x3b0>
 8011a84:	f04f 0900 	mov.w	r9, #0
 8011a88:	e629      	b.n	80116de <_scanf_float+0x72>
 8011a8a:	bf00      	nop
 8011a8c:	0801751a 	.word	0x0801751a
 8011a90:	080178d0 	.word	0x080178d0

08011a94 <std>:
 8011a94:	2300      	movs	r3, #0
 8011a96:	b510      	push	{r4, lr}
 8011a98:	4604      	mov	r4, r0
 8011a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8011a9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011aa2:	6083      	str	r3, [r0, #8]
 8011aa4:	8181      	strh	r1, [r0, #12]
 8011aa6:	6643      	str	r3, [r0, #100]	@ 0x64
 8011aa8:	81c2      	strh	r2, [r0, #14]
 8011aaa:	6183      	str	r3, [r0, #24]
 8011aac:	4619      	mov	r1, r3
 8011aae:	2208      	movs	r2, #8
 8011ab0:	305c      	adds	r0, #92	@ 0x5c
 8011ab2:	f000 f940 	bl	8011d36 <memset>
 8011ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8011aec <std+0x58>)
 8011ab8:	6263      	str	r3, [r4, #36]	@ 0x24
 8011aba:	4b0d      	ldr	r3, [pc, #52]	@ (8011af0 <std+0x5c>)
 8011abc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011abe:	4b0d      	ldr	r3, [pc, #52]	@ (8011af4 <std+0x60>)
 8011ac0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8011af8 <std+0x64>)
 8011ac4:	6323      	str	r3, [r4, #48]	@ 0x30
 8011ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8011afc <std+0x68>)
 8011ac8:	6224      	str	r4, [r4, #32]
 8011aca:	429c      	cmp	r4, r3
 8011acc:	d006      	beq.n	8011adc <std+0x48>
 8011ace:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011ad2:	4294      	cmp	r4, r2
 8011ad4:	d002      	beq.n	8011adc <std+0x48>
 8011ad6:	33d0      	adds	r3, #208	@ 0xd0
 8011ad8:	429c      	cmp	r4, r3
 8011ada:	d105      	bne.n	8011ae8 <std+0x54>
 8011adc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ae4:	f000 b9b6 	b.w	8011e54 <__retarget_lock_init_recursive>
 8011ae8:	bd10      	pop	{r4, pc}
 8011aea:	bf00      	nop
 8011aec:	08011cad 	.word	0x08011cad
 8011af0:	08011cd3 	.word	0x08011cd3
 8011af4:	08011d0b 	.word	0x08011d0b
 8011af8:	08011d2f 	.word	0x08011d2f
 8011afc:	20002588 	.word	0x20002588

08011b00 <stdio_exit_handler>:
 8011b00:	4a02      	ldr	r2, [pc, #8]	@ (8011b0c <stdio_exit_handler+0xc>)
 8011b02:	4903      	ldr	r1, [pc, #12]	@ (8011b10 <stdio_exit_handler+0x10>)
 8011b04:	4803      	ldr	r0, [pc, #12]	@ (8011b14 <stdio_exit_handler+0x14>)
 8011b06:	f000 b869 	b.w	8011bdc <_fwalk_sglue>
 8011b0a:	bf00      	nop
 8011b0c:	200001c0 	.word	0x200001c0
 8011b10:	08014d79 	.word	0x08014d79
 8011b14:	200001d0 	.word	0x200001d0

08011b18 <cleanup_stdio>:
 8011b18:	6841      	ldr	r1, [r0, #4]
 8011b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8011b4c <cleanup_stdio+0x34>)
 8011b1c:	4299      	cmp	r1, r3
 8011b1e:	b510      	push	{r4, lr}
 8011b20:	4604      	mov	r4, r0
 8011b22:	d001      	beq.n	8011b28 <cleanup_stdio+0x10>
 8011b24:	f003 f928 	bl	8014d78 <_fflush_r>
 8011b28:	68a1      	ldr	r1, [r4, #8]
 8011b2a:	4b09      	ldr	r3, [pc, #36]	@ (8011b50 <cleanup_stdio+0x38>)
 8011b2c:	4299      	cmp	r1, r3
 8011b2e:	d002      	beq.n	8011b36 <cleanup_stdio+0x1e>
 8011b30:	4620      	mov	r0, r4
 8011b32:	f003 f921 	bl	8014d78 <_fflush_r>
 8011b36:	68e1      	ldr	r1, [r4, #12]
 8011b38:	4b06      	ldr	r3, [pc, #24]	@ (8011b54 <cleanup_stdio+0x3c>)
 8011b3a:	4299      	cmp	r1, r3
 8011b3c:	d004      	beq.n	8011b48 <cleanup_stdio+0x30>
 8011b3e:	4620      	mov	r0, r4
 8011b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b44:	f003 b918 	b.w	8014d78 <_fflush_r>
 8011b48:	bd10      	pop	{r4, pc}
 8011b4a:	bf00      	nop
 8011b4c:	20002588 	.word	0x20002588
 8011b50:	200025f0 	.word	0x200025f0
 8011b54:	20002658 	.word	0x20002658

08011b58 <global_stdio_init.part.0>:
 8011b58:	b510      	push	{r4, lr}
 8011b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8011b88 <global_stdio_init.part.0+0x30>)
 8011b5c:	4c0b      	ldr	r4, [pc, #44]	@ (8011b8c <global_stdio_init.part.0+0x34>)
 8011b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8011b90 <global_stdio_init.part.0+0x38>)
 8011b60:	601a      	str	r2, [r3, #0]
 8011b62:	4620      	mov	r0, r4
 8011b64:	2200      	movs	r2, #0
 8011b66:	2104      	movs	r1, #4
 8011b68:	f7ff ff94 	bl	8011a94 <std>
 8011b6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011b70:	2201      	movs	r2, #1
 8011b72:	2109      	movs	r1, #9
 8011b74:	f7ff ff8e 	bl	8011a94 <std>
 8011b78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011b7c:	2202      	movs	r2, #2
 8011b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b82:	2112      	movs	r1, #18
 8011b84:	f7ff bf86 	b.w	8011a94 <std>
 8011b88:	200026c0 	.word	0x200026c0
 8011b8c:	20002588 	.word	0x20002588
 8011b90:	08011b01 	.word	0x08011b01

08011b94 <__sfp_lock_acquire>:
 8011b94:	4801      	ldr	r0, [pc, #4]	@ (8011b9c <__sfp_lock_acquire+0x8>)
 8011b96:	f000 b95e 	b.w	8011e56 <__retarget_lock_acquire_recursive>
 8011b9a:	bf00      	nop
 8011b9c:	200026c9 	.word	0x200026c9

08011ba0 <__sfp_lock_release>:
 8011ba0:	4801      	ldr	r0, [pc, #4]	@ (8011ba8 <__sfp_lock_release+0x8>)
 8011ba2:	f000 b959 	b.w	8011e58 <__retarget_lock_release_recursive>
 8011ba6:	bf00      	nop
 8011ba8:	200026c9 	.word	0x200026c9

08011bac <__sinit>:
 8011bac:	b510      	push	{r4, lr}
 8011bae:	4604      	mov	r4, r0
 8011bb0:	f7ff fff0 	bl	8011b94 <__sfp_lock_acquire>
 8011bb4:	6a23      	ldr	r3, [r4, #32]
 8011bb6:	b11b      	cbz	r3, 8011bc0 <__sinit+0x14>
 8011bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bbc:	f7ff bff0 	b.w	8011ba0 <__sfp_lock_release>
 8011bc0:	4b04      	ldr	r3, [pc, #16]	@ (8011bd4 <__sinit+0x28>)
 8011bc2:	6223      	str	r3, [r4, #32]
 8011bc4:	4b04      	ldr	r3, [pc, #16]	@ (8011bd8 <__sinit+0x2c>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d1f5      	bne.n	8011bb8 <__sinit+0xc>
 8011bcc:	f7ff ffc4 	bl	8011b58 <global_stdio_init.part.0>
 8011bd0:	e7f2      	b.n	8011bb8 <__sinit+0xc>
 8011bd2:	bf00      	nop
 8011bd4:	08011b19 	.word	0x08011b19
 8011bd8:	200026c0 	.word	0x200026c0

08011bdc <_fwalk_sglue>:
 8011bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011be0:	4607      	mov	r7, r0
 8011be2:	4688      	mov	r8, r1
 8011be4:	4614      	mov	r4, r2
 8011be6:	2600      	movs	r6, #0
 8011be8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011bec:	f1b9 0901 	subs.w	r9, r9, #1
 8011bf0:	d505      	bpl.n	8011bfe <_fwalk_sglue+0x22>
 8011bf2:	6824      	ldr	r4, [r4, #0]
 8011bf4:	2c00      	cmp	r4, #0
 8011bf6:	d1f7      	bne.n	8011be8 <_fwalk_sglue+0xc>
 8011bf8:	4630      	mov	r0, r6
 8011bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bfe:	89ab      	ldrh	r3, [r5, #12]
 8011c00:	2b01      	cmp	r3, #1
 8011c02:	d907      	bls.n	8011c14 <_fwalk_sglue+0x38>
 8011c04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c08:	3301      	adds	r3, #1
 8011c0a:	d003      	beq.n	8011c14 <_fwalk_sglue+0x38>
 8011c0c:	4629      	mov	r1, r5
 8011c0e:	4638      	mov	r0, r7
 8011c10:	47c0      	blx	r8
 8011c12:	4306      	orrs	r6, r0
 8011c14:	3568      	adds	r5, #104	@ 0x68
 8011c16:	e7e9      	b.n	8011bec <_fwalk_sglue+0x10>

08011c18 <siprintf>:
 8011c18:	b40e      	push	{r1, r2, r3}
 8011c1a:	b500      	push	{lr}
 8011c1c:	b09c      	sub	sp, #112	@ 0x70
 8011c1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8011c20:	9002      	str	r0, [sp, #8]
 8011c22:	9006      	str	r0, [sp, #24]
 8011c24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011c28:	4809      	ldr	r0, [pc, #36]	@ (8011c50 <siprintf+0x38>)
 8011c2a:	9107      	str	r1, [sp, #28]
 8011c2c:	9104      	str	r1, [sp, #16]
 8011c2e:	4909      	ldr	r1, [pc, #36]	@ (8011c54 <siprintf+0x3c>)
 8011c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c34:	9105      	str	r1, [sp, #20]
 8011c36:	6800      	ldr	r0, [r0, #0]
 8011c38:	9301      	str	r3, [sp, #4]
 8011c3a:	a902      	add	r1, sp, #8
 8011c3c:	f002 fc02 	bl	8014444 <_svfiprintf_r>
 8011c40:	9b02      	ldr	r3, [sp, #8]
 8011c42:	2200      	movs	r2, #0
 8011c44:	701a      	strb	r2, [r3, #0]
 8011c46:	b01c      	add	sp, #112	@ 0x70
 8011c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c4c:	b003      	add	sp, #12
 8011c4e:	4770      	bx	lr
 8011c50:	200001cc 	.word	0x200001cc
 8011c54:	ffff0208 	.word	0xffff0208

08011c58 <siscanf>:
 8011c58:	b40e      	push	{r1, r2, r3}
 8011c5a:	b530      	push	{r4, r5, lr}
 8011c5c:	b09c      	sub	sp, #112	@ 0x70
 8011c5e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8011c60:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011c64:	f854 5b04 	ldr.w	r5, [r4], #4
 8011c68:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011c6c:	9002      	str	r0, [sp, #8]
 8011c6e:	9006      	str	r0, [sp, #24]
 8011c70:	f7ee fb26 	bl	80002c0 <strlen>
 8011c74:	4b0b      	ldr	r3, [pc, #44]	@ (8011ca4 <siscanf+0x4c>)
 8011c76:	9003      	str	r0, [sp, #12]
 8011c78:	9007      	str	r0, [sp, #28]
 8011c7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c7c:	480a      	ldr	r0, [pc, #40]	@ (8011ca8 <siscanf+0x50>)
 8011c7e:	9401      	str	r4, [sp, #4]
 8011c80:	2300      	movs	r3, #0
 8011c82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011c84:	9314      	str	r3, [sp, #80]	@ 0x50
 8011c86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011c8a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011c8e:	462a      	mov	r2, r5
 8011c90:	4623      	mov	r3, r4
 8011c92:	a902      	add	r1, sp, #8
 8011c94:	6800      	ldr	r0, [r0, #0]
 8011c96:	f002 fd29 	bl	80146ec <__ssvfiscanf_r>
 8011c9a:	b01c      	add	sp, #112	@ 0x70
 8011c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ca0:	b003      	add	sp, #12
 8011ca2:	4770      	bx	lr
 8011ca4:	08011ccf 	.word	0x08011ccf
 8011ca8:	200001cc 	.word	0x200001cc

08011cac <__sread>:
 8011cac:	b510      	push	{r4, lr}
 8011cae:	460c      	mov	r4, r1
 8011cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cb4:	f000 f880 	bl	8011db8 <_read_r>
 8011cb8:	2800      	cmp	r0, #0
 8011cba:	bfab      	itete	ge
 8011cbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8011cc0:	181b      	addge	r3, r3, r0
 8011cc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011cc6:	bfac      	ite	ge
 8011cc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011cca:	81a3      	strhlt	r3, [r4, #12]
 8011ccc:	bd10      	pop	{r4, pc}

08011cce <__seofread>:
 8011cce:	2000      	movs	r0, #0
 8011cd0:	4770      	bx	lr

08011cd2 <__swrite>:
 8011cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cd6:	461f      	mov	r7, r3
 8011cd8:	898b      	ldrh	r3, [r1, #12]
 8011cda:	05db      	lsls	r3, r3, #23
 8011cdc:	4605      	mov	r5, r0
 8011cde:	460c      	mov	r4, r1
 8011ce0:	4616      	mov	r6, r2
 8011ce2:	d505      	bpl.n	8011cf0 <__swrite+0x1e>
 8011ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ce8:	2302      	movs	r3, #2
 8011cea:	2200      	movs	r2, #0
 8011cec:	f000 f852 	bl	8011d94 <_lseek_r>
 8011cf0:	89a3      	ldrh	r3, [r4, #12]
 8011cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011cfa:	81a3      	strh	r3, [r4, #12]
 8011cfc:	4632      	mov	r2, r6
 8011cfe:	463b      	mov	r3, r7
 8011d00:	4628      	mov	r0, r5
 8011d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d06:	f000 b869 	b.w	8011ddc <_write_r>

08011d0a <__sseek>:
 8011d0a:	b510      	push	{r4, lr}
 8011d0c:	460c      	mov	r4, r1
 8011d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d12:	f000 f83f 	bl	8011d94 <_lseek_r>
 8011d16:	1c43      	adds	r3, r0, #1
 8011d18:	89a3      	ldrh	r3, [r4, #12]
 8011d1a:	bf15      	itete	ne
 8011d1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011d1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011d22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011d26:	81a3      	strheq	r3, [r4, #12]
 8011d28:	bf18      	it	ne
 8011d2a:	81a3      	strhne	r3, [r4, #12]
 8011d2c:	bd10      	pop	{r4, pc}

08011d2e <__sclose>:
 8011d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d32:	f000 b81f 	b.w	8011d74 <_close_r>

08011d36 <memset>:
 8011d36:	4402      	add	r2, r0
 8011d38:	4603      	mov	r3, r0
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	d100      	bne.n	8011d40 <memset+0xa>
 8011d3e:	4770      	bx	lr
 8011d40:	f803 1b01 	strb.w	r1, [r3], #1
 8011d44:	e7f9      	b.n	8011d3a <memset+0x4>

08011d46 <strncmp>:
 8011d46:	b510      	push	{r4, lr}
 8011d48:	b16a      	cbz	r2, 8011d66 <strncmp+0x20>
 8011d4a:	3901      	subs	r1, #1
 8011d4c:	1884      	adds	r4, r0, r2
 8011d4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d52:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d103      	bne.n	8011d62 <strncmp+0x1c>
 8011d5a:	42a0      	cmp	r0, r4
 8011d5c:	d001      	beq.n	8011d62 <strncmp+0x1c>
 8011d5e:	2a00      	cmp	r2, #0
 8011d60:	d1f5      	bne.n	8011d4e <strncmp+0x8>
 8011d62:	1ad0      	subs	r0, r2, r3
 8011d64:	bd10      	pop	{r4, pc}
 8011d66:	4610      	mov	r0, r2
 8011d68:	e7fc      	b.n	8011d64 <strncmp+0x1e>
	...

08011d6c <_localeconv_r>:
 8011d6c:	4800      	ldr	r0, [pc, #0]	@ (8011d70 <_localeconv_r+0x4>)
 8011d6e:	4770      	bx	lr
 8011d70:	2000030c 	.word	0x2000030c

08011d74 <_close_r>:
 8011d74:	b538      	push	{r3, r4, r5, lr}
 8011d76:	4d06      	ldr	r5, [pc, #24]	@ (8011d90 <_close_r+0x1c>)
 8011d78:	2300      	movs	r3, #0
 8011d7a:	4604      	mov	r4, r0
 8011d7c:	4608      	mov	r0, r1
 8011d7e:	602b      	str	r3, [r5, #0]
 8011d80:	f7f2 fbd4 	bl	800452c <_close>
 8011d84:	1c43      	adds	r3, r0, #1
 8011d86:	d102      	bne.n	8011d8e <_close_r+0x1a>
 8011d88:	682b      	ldr	r3, [r5, #0]
 8011d8a:	b103      	cbz	r3, 8011d8e <_close_r+0x1a>
 8011d8c:	6023      	str	r3, [r4, #0]
 8011d8e:	bd38      	pop	{r3, r4, r5, pc}
 8011d90:	200026c4 	.word	0x200026c4

08011d94 <_lseek_r>:
 8011d94:	b538      	push	{r3, r4, r5, lr}
 8011d96:	4d07      	ldr	r5, [pc, #28]	@ (8011db4 <_lseek_r+0x20>)
 8011d98:	4604      	mov	r4, r0
 8011d9a:	4608      	mov	r0, r1
 8011d9c:	4611      	mov	r1, r2
 8011d9e:	2200      	movs	r2, #0
 8011da0:	602a      	str	r2, [r5, #0]
 8011da2:	461a      	mov	r2, r3
 8011da4:	f7f2 fbe9 	bl	800457a <_lseek>
 8011da8:	1c43      	adds	r3, r0, #1
 8011daa:	d102      	bne.n	8011db2 <_lseek_r+0x1e>
 8011dac:	682b      	ldr	r3, [r5, #0]
 8011dae:	b103      	cbz	r3, 8011db2 <_lseek_r+0x1e>
 8011db0:	6023      	str	r3, [r4, #0]
 8011db2:	bd38      	pop	{r3, r4, r5, pc}
 8011db4:	200026c4 	.word	0x200026c4

08011db8 <_read_r>:
 8011db8:	b538      	push	{r3, r4, r5, lr}
 8011dba:	4d07      	ldr	r5, [pc, #28]	@ (8011dd8 <_read_r+0x20>)
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	4608      	mov	r0, r1
 8011dc0:	4611      	mov	r1, r2
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	602a      	str	r2, [r5, #0]
 8011dc6:	461a      	mov	r2, r3
 8011dc8:	f7f2 fb77 	bl	80044ba <_read>
 8011dcc:	1c43      	adds	r3, r0, #1
 8011dce:	d102      	bne.n	8011dd6 <_read_r+0x1e>
 8011dd0:	682b      	ldr	r3, [r5, #0]
 8011dd2:	b103      	cbz	r3, 8011dd6 <_read_r+0x1e>
 8011dd4:	6023      	str	r3, [r4, #0]
 8011dd6:	bd38      	pop	{r3, r4, r5, pc}
 8011dd8:	200026c4 	.word	0x200026c4

08011ddc <_write_r>:
 8011ddc:	b538      	push	{r3, r4, r5, lr}
 8011dde:	4d07      	ldr	r5, [pc, #28]	@ (8011dfc <_write_r+0x20>)
 8011de0:	4604      	mov	r4, r0
 8011de2:	4608      	mov	r0, r1
 8011de4:	4611      	mov	r1, r2
 8011de6:	2200      	movs	r2, #0
 8011de8:	602a      	str	r2, [r5, #0]
 8011dea:	461a      	mov	r2, r3
 8011dec:	f7f2 fb82 	bl	80044f4 <_write>
 8011df0:	1c43      	adds	r3, r0, #1
 8011df2:	d102      	bne.n	8011dfa <_write_r+0x1e>
 8011df4:	682b      	ldr	r3, [r5, #0]
 8011df6:	b103      	cbz	r3, 8011dfa <_write_r+0x1e>
 8011df8:	6023      	str	r3, [r4, #0]
 8011dfa:	bd38      	pop	{r3, r4, r5, pc}
 8011dfc:	200026c4 	.word	0x200026c4

08011e00 <__errno>:
 8011e00:	4b01      	ldr	r3, [pc, #4]	@ (8011e08 <__errno+0x8>)
 8011e02:	6818      	ldr	r0, [r3, #0]
 8011e04:	4770      	bx	lr
 8011e06:	bf00      	nop
 8011e08:	200001cc 	.word	0x200001cc

08011e0c <__libc_init_array>:
 8011e0c:	b570      	push	{r4, r5, r6, lr}
 8011e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8011e44 <__libc_init_array+0x38>)
 8011e10:	4c0d      	ldr	r4, [pc, #52]	@ (8011e48 <__libc_init_array+0x3c>)
 8011e12:	1b64      	subs	r4, r4, r5
 8011e14:	10a4      	asrs	r4, r4, #2
 8011e16:	2600      	movs	r6, #0
 8011e18:	42a6      	cmp	r6, r4
 8011e1a:	d109      	bne.n	8011e30 <__libc_init_array+0x24>
 8011e1c:	4d0b      	ldr	r5, [pc, #44]	@ (8011e4c <__libc_init_array+0x40>)
 8011e1e:	4c0c      	ldr	r4, [pc, #48]	@ (8011e50 <__libc_init_array+0x44>)
 8011e20:	f005 f97e 	bl	8017120 <_init>
 8011e24:	1b64      	subs	r4, r4, r5
 8011e26:	10a4      	asrs	r4, r4, #2
 8011e28:	2600      	movs	r6, #0
 8011e2a:	42a6      	cmp	r6, r4
 8011e2c:	d105      	bne.n	8011e3a <__libc_init_array+0x2e>
 8011e2e:	bd70      	pop	{r4, r5, r6, pc}
 8011e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e34:	4798      	blx	r3
 8011e36:	3601      	adds	r6, #1
 8011e38:	e7ee      	b.n	8011e18 <__libc_init_array+0xc>
 8011e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e3e:	4798      	blx	r3
 8011e40:	3601      	adds	r6, #1
 8011e42:	e7f2      	b.n	8011e2a <__libc_init_array+0x1e>
 8011e44:	08017970 	.word	0x08017970
 8011e48:	08017970 	.word	0x08017970
 8011e4c:	08017970 	.word	0x08017970
 8011e50:	08017974 	.word	0x08017974

08011e54 <__retarget_lock_init_recursive>:
 8011e54:	4770      	bx	lr

08011e56 <__retarget_lock_acquire_recursive>:
 8011e56:	4770      	bx	lr

08011e58 <__retarget_lock_release_recursive>:
 8011e58:	4770      	bx	lr

08011e5a <memcpy>:
 8011e5a:	440a      	add	r2, r1
 8011e5c:	4291      	cmp	r1, r2
 8011e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011e62:	d100      	bne.n	8011e66 <memcpy+0xc>
 8011e64:	4770      	bx	lr
 8011e66:	b510      	push	{r4, lr}
 8011e68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e70:	4291      	cmp	r1, r2
 8011e72:	d1f9      	bne.n	8011e68 <memcpy+0xe>
 8011e74:	bd10      	pop	{r4, pc}
	...

08011e78 <nanf>:
 8011e78:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011e80 <nanf+0x8>
 8011e7c:	4770      	bx	lr
 8011e7e:	bf00      	nop
 8011e80:	7fc00000 	.word	0x7fc00000

08011e84 <quorem>:
 8011e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e88:	6903      	ldr	r3, [r0, #16]
 8011e8a:	690c      	ldr	r4, [r1, #16]
 8011e8c:	42a3      	cmp	r3, r4
 8011e8e:	4607      	mov	r7, r0
 8011e90:	db7e      	blt.n	8011f90 <quorem+0x10c>
 8011e92:	3c01      	subs	r4, #1
 8011e94:	f101 0814 	add.w	r8, r1, #20
 8011e98:	00a3      	lsls	r3, r4, #2
 8011e9a:	f100 0514 	add.w	r5, r0, #20
 8011e9e:	9300      	str	r3, [sp, #0]
 8011ea0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ea4:	9301      	str	r3, [sp, #4]
 8011ea6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011eaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011eae:	3301      	adds	r3, #1
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011eb6:	fbb2 f6f3 	udiv	r6, r2, r3
 8011eba:	d32e      	bcc.n	8011f1a <quorem+0x96>
 8011ebc:	f04f 0a00 	mov.w	sl, #0
 8011ec0:	46c4      	mov	ip, r8
 8011ec2:	46ae      	mov	lr, r5
 8011ec4:	46d3      	mov	fp, sl
 8011ec6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011eca:	b298      	uxth	r0, r3
 8011ecc:	fb06 a000 	mla	r0, r6, r0, sl
 8011ed0:	0c02      	lsrs	r2, r0, #16
 8011ed2:	0c1b      	lsrs	r3, r3, #16
 8011ed4:	fb06 2303 	mla	r3, r6, r3, r2
 8011ed8:	f8de 2000 	ldr.w	r2, [lr]
 8011edc:	b280      	uxth	r0, r0
 8011ede:	b292      	uxth	r2, r2
 8011ee0:	1a12      	subs	r2, r2, r0
 8011ee2:	445a      	add	r2, fp
 8011ee4:	f8de 0000 	ldr.w	r0, [lr]
 8011ee8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011eec:	b29b      	uxth	r3, r3
 8011eee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011ef2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011ef6:	b292      	uxth	r2, r2
 8011ef8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011efc:	45e1      	cmp	r9, ip
 8011efe:	f84e 2b04 	str.w	r2, [lr], #4
 8011f02:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011f06:	d2de      	bcs.n	8011ec6 <quorem+0x42>
 8011f08:	9b00      	ldr	r3, [sp, #0]
 8011f0a:	58eb      	ldr	r3, [r5, r3]
 8011f0c:	b92b      	cbnz	r3, 8011f1a <quorem+0x96>
 8011f0e:	9b01      	ldr	r3, [sp, #4]
 8011f10:	3b04      	subs	r3, #4
 8011f12:	429d      	cmp	r5, r3
 8011f14:	461a      	mov	r2, r3
 8011f16:	d32f      	bcc.n	8011f78 <quorem+0xf4>
 8011f18:	613c      	str	r4, [r7, #16]
 8011f1a:	4638      	mov	r0, r7
 8011f1c:	f001 f9c4 	bl	80132a8 <__mcmp>
 8011f20:	2800      	cmp	r0, #0
 8011f22:	db25      	blt.n	8011f70 <quorem+0xec>
 8011f24:	4629      	mov	r1, r5
 8011f26:	2000      	movs	r0, #0
 8011f28:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f2c:	f8d1 c000 	ldr.w	ip, [r1]
 8011f30:	fa1f fe82 	uxth.w	lr, r2
 8011f34:	fa1f f38c 	uxth.w	r3, ip
 8011f38:	eba3 030e 	sub.w	r3, r3, lr
 8011f3c:	4403      	add	r3, r0
 8011f3e:	0c12      	lsrs	r2, r2, #16
 8011f40:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011f44:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011f48:	b29b      	uxth	r3, r3
 8011f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f4e:	45c1      	cmp	r9, r8
 8011f50:	f841 3b04 	str.w	r3, [r1], #4
 8011f54:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011f58:	d2e6      	bcs.n	8011f28 <quorem+0xa4>
 8011f5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f62:	b922      	cbnz	r2, 8011f6e <quorem+0xea>
 8011f64:	3b04      	subs	r3, #4
 8011f66:	429d      	cmp	r5, r3
 8011f68:	461a      	mov	r2, r3
 8011f6a:	d30b      	bcc.n	8011f84 <quorem+0x100>
 8011f6c:	613c      	str	r4, [r7, #16]
 8011f6e:	3601      	adds	r6, #1
 8011f70:	4630      	mov	r0, r6
 8011f72:	b003      	add	sp, #12
 8011f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f78:	6812      	ldr	r2, [r2, #0]
 8011f7a:	3b04      	subs	r3, #4
 8011f7c:	2a00      	cmp	r2, #0
 8011f7e:	d1cb      	bne.n	8011f18 <quorem+0x94>
 8011f80:	3c01      	subs	r4, #1
 8011f82:	e7c6      	b.n	8011f12 <quorem+0x8e>
 8011f84:	6812      	ldr	r2, [r2, #0]
 8011f86:	3b04      	subs	r3, #4
 8011f88:	2a00      	cmp	r2, #0
 8011f8a:	d1ef      	bne.n	8011f6c <quorem+0xe8>
 8011f8c:	3c01      	subs	r4, #1
 8011f8e:	e7ea      	b.n	8011f66 <quorem+0xe2>
 8011f90:	2000      	movs	r0, #0
 8011f92:	e7ee      	b.n	8011f72 <quorem+0xee>
 8011f94:	0000      	movs	r0, r0
	...

08011f98 <_dtoa_r>:
 8011f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f9c:	69c7      	ldr	r7, [r0, #28]
 8011f9e:	b099      	sub	sp, #100	@ 0x64
 8011fa0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011fa4:	ec55 4b10 	vmov	r4, r5, d0
 8011fa8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011faa:	9109      	str	r1, [sp, #36]	@ 0x24
 8011fac:	4683      	mov	fp, r0
 8011fae:	920e      	str	r2, [sp, #56]	@ 0x38
 8011fb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011fb2:	b97f      	cbnz	r7, 8011fd4 <_dtoa_r+0x3c>
 8011fb4:	2010      	movs	r0, #16
 8011fb6:	f000 fdfd 	bl	8012bb4 <malloc>
 8011fba:	4602      	mov	r2, r0
 8011fbc:	f8cb 001c 	str.w	r0, [fp, #28]
 8011fc0:	b920      	cbnz	r0, 8011fcc <_dtoa_r+0x34>
 8011fc2:	4ba7      	ldr	r3, [pc, #668]	@ (8012260 <_dtoa_r+0x2c8>)
 8011fc4:	21ef      	movs	r1, #239	@ 0xef
 8011fc6:	48a7      	ldr	r0, [pc, #668]	@ (8012264 <_dtoa_r+0x2cc>)
 8011fc8:	f002 ffa6 	bl	8014f18 <__assert_func>
 8011fcc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011fd0:	6007      	str	r7, [r0, #0]
 8011fd2:	60c7      	str	r7, [r0, #12]
 8011fd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011fd8:	6819      	ldr	r1, [r3, #0]
 8011fda:	b159      	cbz	r1, 8011ff4 <_dtoa_r+0x5c>
 8011fdc:	685a      	ldr	r2, [r3, #4]
 8011fde:	604a      	str	r2, [r1, #4]
 8011fe0:	2301      	movs	r3, #1
 8011fe2:	4093      	lsls	r3, r2
 8011fe4:	608b      	str	r3, [r1, #8]
 8011fe6:	4658      	mov	r0, fp
 8011fe8:	f000 feda 	bl	8012da0 <_Bfree>
 8011fec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	601a      	str	r2, [r3, #0]
 8011ff4:	1e2b      	subs	r3, r5, #0
 8011ff6:	bfb9      	ittee	lt
 8011ff8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011ffc:	9303      	strlt	r3, [sp, #12]
 8011ffe:	2300      	movge	r3, #0
 8012000:	6033      	strge	r3, [r6, #0]
 8012002:	9f03      	ldr	r7, [sp, #12]
 8012004:	4b98      	ldr	r3, [pc, #608]	@ (8012268 <_dtoa_r+0x2d0>)
 8012006:	bfbc      	itt	lt
 8012008:	2201      	movlt	r2, #1
 801200a:	6032      	strlt	r2, [r6, #0]
 801200c:	43bb      	bics	r3, r7
 801200e:	d112      	bne.n	8012036 <_dtoa_r+0x9e>
 8012010:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012012:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012016:	6013      	str	r3, [r2, #0]
 8012018:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801201c:	4323      	orrs	r3, r4
 801201e:	f000 854d 	beq.w	8012abc <_dtoa_r+0xb24>
 8012022:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012024:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801227c <_dtoa_r+0x2e4>
 8012028:	2b00      	cmp	r3, #0
 801202a:	f000 854f 	beq.w	8012acc <_dtoa_r+0xb34>
 801202e:	f10a 0303 	add.w	r3, sl, #3
 8012032:	f000 bd49 	b.w	8012ac8 <_dtoa_r+0xb30>
 8012036:	ed9d 7b02 	vldr	d7, [sp, #8]
 801203a:	2200      	movs	r2, #0
 801203c:	ec51 0b17 	vmov	r0, r1, d7
 8012040:	2300      	movs	r3, #0
 8012042:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012046:	f7ee fd67 	bl	8000b18 <__aeabi_dcmpeq>
 801204a:	4680      	mov	r8, r0
 801204c:	b158      	cbz	r0, 8012066 <_dtoa_r+0xce>
 801204e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012050:	2301      	movs	r3, #1
 8012052:	6013      	str	r3, [r2, #0]
 8012054:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012056:	b113      	cbz	r3, 801205e <_dtoa_r+0xc6>
 8012058:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801205a:	4b84      	ldr	r3, [pc, #528]	@ (801226c <_dtoa_r+0x2d4>)
 801205c:	6013      	str	r3, [r2, #0]
 801205e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012280 <_dtoa_r+0x2e8>
 8012062:	f000 bd33 	b.w	8012acc <_dtoa_r+0xb34>
 8012066:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801206a:	aa16      	add	r2, sp, #88	@ 0x58
 801206c:	a917      	add	r1, sp, #92	@ 0x5c
 801206e:	4658      	mov	r0, fp
 8012070:	f001 fa3a 	bl	80134e8 <__d2b>
 8012074:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012078:	4681      	mov	r9, r0
 801207a:	2e00      	cmp	r6, #0
 801207c:	d077      	beq.n	801216e <_dtoa_r+0x1d6>
 801207e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012080:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801208c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012090:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012094:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012098:	4619      	mov	r1, r3
 801209a:	2200      	movs	r2, #0
 801209c:	4b74      	ldr	r3, [pc, #464]	@ (8012270 <_dtoa_r+0x2d8>)
 801209e:	f7ee f91b 	bl	80002d8 <__aeabi_dsub>
 80120a2:	a369      	add	r3, pc, #420	@ (adr r3, 8012248 <_dtoa_r+0x2b0>)
 80120a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a8:	f7ee face 	bl	8000648 <__aeabi_dmul>
 80120ac:	a368      	add	r3, pc, #416	@ (adr r3, 8012250 <_dtoa_r+0x2b8>)
 80120ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b2:	f7ee f913 	bl	80002dc <__adddf3>
 80120b6:	4604      	mov	r4, r0
 80120b8:	4630      	mov	r0, r6
 80120ba:	460d      	mov	r5, r1
 80120bc:	f7ee fa5a 	bl	8000574 <__aeabi_i2d>
 80120c0:	a365      	add	r3, pc, #404	@ (adr r3, 8012258 <_dtoa_r+0x2c0>)
 80120c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c6:	f7ee fabf 	bl	8000648 <__aeabi_dmul>
 80120ca:	4602      	mov	r2, r0
 80120cc:	460b      	mov	r3, r1
 80120ce:	4620      	mov	r0, r4
 80120d0:	4629      	mov	r1, r5
 80120d2:	f7ee f903 	bl	80002dc <__adddf3>
 80120d6:	4604      	mov	r4, r0
 80120d8:	460d      	mov	r5, r1
 80120da:	f7ee fd65 	bl	8000ba8 <__aeabi_d2iz>
 80120de:	2200      	movs	r2, #0
 80120e0:	4607      	mov	r7, r0
 80120e2:	2300      	movs	r3, #0
 80120e4:	4620      	mov	r0, r4
 80120e6:	4629      	mov	r1, r5
 80120e8:	f7ee fd20 	bl	8000b2c <__aeabi_dcmplt>
 80120ec:	b140      	cbz	r0, 8012100 <_dtoa_r+0x168>
 80120ee:	4638      	mov	r0, r7
 80120f0:	f7ee fa40 	bl	8000574 <__aeabi_i2d>
 80120f4:	4622      	mov	r2, r4
 80120f6:	462b      	mov	r3, r5
 80120f8:	f7ee fd0e 	bl	8000b18 <__aeabi_dcmpeq>
 80120fc:	b900      	cbnz	r0, 8012100 <_dtoa_r+0x168>
 80120fe:	3f01      	subs	r7, #1
 8012100:	2f16      	cmp	r7, #22
 8012102:	d851      	bhi.n	80121a8 <_dtoa_r+0x210>
 8012104:	4b5b      	ldr	r3, [pc, #364]	@ (8012274 <_dtoa_r+0x2dc>)
 8012106:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012112:	f7ee fd0b 	bl	8000b2c <__aeabi_dcmplt>
 8012116:	2800      	cmp	r0, #0
 8012118:	d048      	beq.n	80121ac <_dtoa_r+0x214>
 801211a:	3f01      	subs	r7, #1
 801211c:	2300      	movs	r3, #0
 801211e:	9312      	str	r3, [sp, #72]	@ 0x48
 8012120:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012122:	1b9b      	subs	r3, r3, r6
 8012124:	1e5a      	subs	r2, r3, #1
 8012126:	bf44      	itt	mi
 8012128:	f1c3 0801 	rsbmi	r8, r3, #1
 801212c:	2300      	movmi	r3, #0
 801212e:	9208      	str	r2, [sp, #32]
 8012130:	bf54      	ite	pl
 8012132:	f04f 0800 	movpl.w	r8, #0
 8012136:	9308      	strmi	r3, [sp, #32]
 8012138:	2f00      	cmp	r7, #0
 801213a:	db39      	blt.n	80121b0 <_dtoa_r+0x218>
 801213c:	9b08      	ldr	r3, [sp, #32]
 801213e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012140:	443b      	add	r3, r7
 8012142:	9308      	str	r3, [sp, #32]
 8012144:	2300      	movs	r3, #0
 8012146:	930a      	str	r3, [sp, #40]	@ 0x28
 8012148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801214a:	2b09      	cmp	r3, #9
 801214c:	d864      	bhi.n	8012218 <_dtoa_r+0x280>
 801214e:	2b05      	cmp	r3, #5
 8012150:	bfc4      	itt	gt
 8012152:	3b04      	subgt	r3, #4
 8012154:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012158:	f1a3 0302 	sub.w	r3, r3, #2
 801215c:	bfcc      	ite	gt
 801215e:	2400      	movgt	r4, #0
 8012160:	2401      	movle	r4, #1
 8012162:	2b03      	cmp	r3, #3
 8012164:	d863      	bhi.n	801222e <_dtoa_r+0x296>
 8012166:	e8df f003 	tbb	[pc, r3]
 801216a:	372a      	.short	0x372a
 801216c:	5535      	.short	0x5535
 801216e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012172:	441e      	add	r6, r3
 8012174:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012178:	2b20      	cmp	r3, #32
 801217a:	bfc1      	itttt	gt
 801217c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012180:	409f      	lslgt	r7, r3
 8012182:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012186:	fa24 f303 	lsrgt.w	r3, r4, r3
 801218a:	bfd6      	itet	le
 801218c:	f1c3 0320 	rsble	r3, r3, #32
 8012190:	ea47 0003 	orrgt.w	r0, r7, r3
 8012194:	fa04 f003 	lslle.w	r0, r4, r3
 8012198:	f7ee f9dc 	bl	8000554 <__aeabi_ui2d>
 801219c:	2201      	movs	r2, #1
 801219e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80121a2:	3e01      	subs	r6, #1
 80121a4:	9214      	str	r2, [sp, #80]	@ 0x50
 80121a6:	e777      	b.n	8012098 <_dtoa_r+0x100>
 80121a8:	2301      	movs	r3, #1
 80121aa:	e7b8      	b.n	801211e <_dtoa_r+0x186>
 80121ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80121ae:	e7b7      	b.n	8012120 <_dtoa_r+0x188>
 80121b0:	427b      	negs	r3, r7
 80121b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80121b4:	2300      	movs	r3, #0
 80121b6:	eba8 0807 	sub.w	r8, r8, r7
 80121ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80121bc:	e7c4      	b.n	8012148 <_dtoa_r+0x1b0>
 80121be:	2300      	movs	r3, #0
 80121c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	dc35      	bgt.n	8012234 <_dtoa_r+0x29c>
 80121c8:	2301      	movs	r3, #1
 80121ca:	9300      	str	r3, [sp, #0]
 80121cc:	9307      	str	r3, [sp, #28]
 80121ce:	461a      	mov	r2, r3
 80121d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80121d2:	e00b      	b.n	80121ec <_dtoa_r+0x254>
 80121d4:	2301      	movs	r3, #1
 80121d6:	e7f3      	b.n	80121c0 <_dtoa_r+0x228>
 80121d8:	2300      	movs	r3, #0
 80121da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121de:	18fb      	adds	r3, r7, r3
 80121e0:	9300      	str	r3, [sp, #0]
 80121e2:	3301      	adds	r3, #1
 80121e4:	2b01      	cmp	r3, #1
 80121e6:	9307      	str	r3, [sp, #28]
 80121e8:	bfb8      	it	lt
 80121ea:	2301      	movlt	r3, #1
 80121ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 80121f0:	2100      	movs	r1, #0
 80121f2:	2204      	movs	r2, #4
 80121f4:	f102 0514 	add.w	r5, r2, #20
 80121f8:	429d      	cmp	r5, r3
 80121fa:	d91f      	bls.n	801223c <_dtoa_r+0x2a4>
 80121fc:	6041      	str	r1, [r0, #4]
 80121fe:	4658      	mov	r0, fp
 8012200:	f000 fd8e 	bl	8012d20 <_Balloc>
 8012204:	4682      	mov	sl, r0
 8012206:	2800      	cmp	r0, #0
 8012208:	d13c      	bne.n	8012284 <_dtoa_r+0x2ec>
 801220a:	4b1b      	ldr	r3, [pc, #108]	@ (8012278 <_dtoa_r+0x2e0>)
 801220c:	4602      	mov	r2, r0
 801220e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012212:	e6d8      	b.n	8011fc6 <_dtoa_r+0x2e>
 8012214:	2301      	movs	r3, #1
 8012216:	e7e0      	b.n	80121da <_dtoa_r+0x242>
 8012218:	2401      	movs	r4, #1
 801221a:	2300      	movs	r3, #0
 801221c:	9309      	str	r3, [sp, #36]	@ 0x24
 801221e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012220:	f04f 33ff 	mov.w	r3, #4294967295
 8012224:	9300      	str	r3, [sp, #0]
 8012226:	9307      	str	r3, [sp, #28]
 8012228:	2200      	movs	r2, #0
 801222a:	2312      	movs	r3, #18
 801222c:	e7d0      	b.n	80121d0 <_dtoa_r+0x238>
 801222e:	2301      	movs	r3, #1
 8012230:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012232:	e7f5      	b.n	8012220 <_dtoa_r+0x288>
 8012234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012236:	9300      	str	r3, [sp, #0]
 8012238:	9307      	str	r3, [sp, #28]
 801223a:	e7d7      	b.n	80121ec <_dtoa_r+0x254>
 801223c:	3101      	adds	r1, #1
 801223e:	0052      	lsls	r2, r2, #1
 8012240:	e7d8      	b.n	80121f4 <_dtoa_r+0x25c>
 8012242:	bf00      	nop
 8012244:	f3af 8000 	nop.w
 8012248:	636f4361 	.word	0x636f4361
 801224c:	3fd287a7 	.word	0x3fd287a7
 8012250:	8b60c8b3 	.word	0x8b60c8b3
 8012254:	3fc68a28 	.word	0x3fc68a28
 8012258:	509f79fb 	.word	0x509f79fb
 801225c:	3fd34413 	.word	0x3fd34413
 8012260:	0801752c 	.word	0x0801752c
 8012264:	08017543 	.word	0x08017543
 8012268:	7ff00000 	.word	0x7ff00000
 801226c:	08017889 	.word	0x08017889
 8012270:	3ff80000 	.word	0x3ff80000
 8012274:	08017640 	.word	0x08017640
 8012278:	0801759b 	.word	0x0801759b
 801227c:	08017528 	.word	0x08017528
 8012280:	08017888 	.word	0x08017888
 8012284:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012288:	6018      	str	r0, [r3, #0]
 801228a:	9b07      	ldr	r3, [sp, #28]
 801228c:	2b0e      	cmp	r3, #14
 801228e:	f200 80a4 	bhi.w	80123da <_dtoa_r+0x442>
 8012292:	2c00      	cmp	r4, #0
 8012294:	f000 80a1 	beq.w	80123da <_dtoa_r+0x442>
 8012298:	2f00      	cmp	r7, #0
 801229a:	dd33      	ble.n	8012304 <_dtoa_r+0x36c>
 801229c:	4bad      	ldr	r3, [pc, #692]	@ (8012554 <_dtoa_r+0x5bc>)
 801229e:	f007 020f 	and.w	r2, r7, #15
 80122a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80122a6:	ed93 7b00 	vldr	d7, [r3]
 80122aa:	05f8      	lsls	r0, r7, #23
 80122ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80122b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80122b4:	d516      	bpl.n	80122e4 <_dtoa_r+0x34c>
 80122b6:	4ba8      	ldr	r3, [pc, #672]	@ (8012558 <_dtoa_r+0x5c0>)
 80122b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80122bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80122c0:	f7ee faec 	bl	800089c <__aeabi_ddiv>
 80122c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122c8:	f004 040f 	and.w	r4, r4, #15
 80122cc:	2603      	movs	r6, #3
 80122ce:	4da2      	ldr	r5, [pc, #648]	@ (8012558 <_dtoa_r+0x5c0>)
 80122d0:	b954      	cbnz	r4, 80122e8 <_dtoa_r+0x350>
 80122d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80122d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122da:	f7ee fadf 	bl	800089c <__aeabi_ddiv>
 80122de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122e2:	e028      	b.n	8012336 <_dtoa_r+0x39e>
 80122e4:	2602      	movs	r6, #2
 80122e6:	e7f2      	b.n	80122ce <_dtoa_r+0x336>
 80122e8:	07e1      	lsls	r1, r4, #31
 80122ea:	d508      	bpl.n	80122fe <_dtoa_r+0x366>
 80122ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80122f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80122f4:	f7ee f9a8 	bl	8000648 <__aeabi_dmul>
 80122f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80122fc:	3601      	adds	r6, #1
 80122fe:	1064      	asrs	r4, r4, #1
 8012300:	3508      	adds	r5, #8
 8012302:	e7e5      	b.n	80122d0 <_dtoa_r+0x338>
 8012304:	f000 80d2 	beq.w	80124ac <_dtoa_r+0x514>
 8012308:	427c      	negs	r4, r7
 801230a:	4b92      	ldr	r3, [pc, #584]	@ (8012554 <_dtoa_r+0x5bc>)
 801230c:	4d92      	ldr	r5, [pc, #584]	@ (8012558 <_dtoa_r+0x5c0>)
 801230e:	f004 020f 	and.w	r2, r4, #15
 8012312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801231e:	f7ee f993 	bl	8000648 <__aeabi_dmul>
 8012322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012326:	1124      	asrs	r4, r4, #4
 8012328:	2300      	movs	r3, #0
 801232a:	2602      	movs	r6, #2
 801232c:	2c00      	cmp	r4, #0
 801232e:	f040 80b2 	bne.w	8012496 <_dtoa_r+0x4fe>
 8012332:	2b00      	cmp	r3, #0
 8012334:	d1d3      	bne.n	80122de <_dtoa_r+0x346>
 8012336:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012338:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801233c:	2b00      	cmp	r3, #0
 801233e:	f000 80b7 	beq.w	80124b0 <_dtoa_r+0x518>
 8012342:	4b86      	ldr	r3, [pc, #536]	@ (801255c <_dtoa_r+0x5c4>)
 8012344:	2200      	movs	r2, #0
 8012346:	4620      	mov	r0, r4
 8012348:	4629      	mov	r1, r5
 801234a:	f7ee fbef 	bl	8000b2c <__aeabi_dcmplt>
 801234e:	2800      	cmp	r0, #0
 8012350:	f000 80ae 	beq.w	80124b0 <_dtoa_r+0x518>
 8012354:	9b07      	ldr	r3, [sp, #28]
 8012356:	2b00      	cmp	r3, #0
 8012358:	f000 80aa 	beq.w	80124b0 <_dtoa_r+0x518>
 801235c:	9b00      	ldr	r3, [sp, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	dd37      	ble.n	80123d2 <_dtoa_r+0x43a>
 8012362:	1e7b      	subs	r3, r7, #1
 8012364:	9304      	str	r3, [sp, #16]
 8012366:	4620      	mov	r0, r4
 8012368:	4b7d      	ldr	r3, [pc, #500]	@ (8012560 <_dtoa_r+0x5c8>)
 801236a:	2200      	movs	r2, #0
 801236c:	4629      	mov	r1, r5
 801236e:	f7ee f96b 	bl	8000648 <__aeabi_dmul>
 8012372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012376:	9c00      	ldr	r4, [sp, #0]
 8012378:	3601      	adds	r6, #1
 801237a:	4630      	mov	r0, r6
 801237c:	f7ee f8fa 	bl	8000574 <__aeabi_i2d>
 8012380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012384:	f7ee f960 	bl	8000648 <__aeabi_dmul>
 8012388:	4b76      	ldr	r3, [pc, #472]	@ (8012564 <_dtoa_r+0x5cc>)
 801238a:	2200      	movs	r2, #0
 801238c:	f7ed ffa6 	bl	80002dc <__adddf3>
 8012390:	4605      	mov	r5, r0
 8012392:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012396:	2c00      	cmp	r4, #0
 8012398:	f040 808d 	bne.w	80124b6 <_dtoa_r+0x51e>
 801239c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123a0:	4b71      	ldr	r3, [pc, #452]	@ (8012568 <_dtoa_r+0x5d0>)
 80123a2:	2200      	movs	r2, #0
 80123a4:	f7ed ff98 	bl	80002d8 <__aeabi_dsub>
 80123a8:	4602      	mov	r2, r0
 80123aa:	460b      	mov	r3, r1
 80123ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80123b0:	462a      	mov	r2, r5
 80123b2:	4633      	mov	r3, r6
 80123b4:	f7ee fbd8 	bl	8000b68 <__aeabi_dcmpgt>
 80123b8:	2800      	cmp	r0, #0
 80123ba:	f040 828b 	bne.w	80128d4 <_dtoa_r+0x93c>
 80123be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123c2:	462a      	mov	r2, r5
 80123c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80123c8:	f7ee fbb0 	bl	8000b2c <__aeabi_dcmplt>
 80123cc:	2800      	cmp	r0, #0
 80123ce:	f040 8128 	bne.w	8012622 <_dtoa_r+0x68a>
 80123d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80123d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80123da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80123dc:	2b00      	cmp	r3, #0
 80123de:	f2c0 815a 	blt.w	8012696 <_dtoa_r+0x6fe>
 80123e2:	2f0e      	cmp	r7, #14
 80123e4:	f300 8157 	bgt.w	8012696 <_dtoa_r+0x6fe>
 80123e8:	4b5a      	ldr	r3, [pc, #360]	@ (8012554 <_dtoa_r+0x5bc>)
 80123ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80123ee:	ed93 7b00 	vldr	d7, [r3]
 80123f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	ed8d 7b00 	vstr	d7, [sp]
 80123fa:	da03      	bge.n	8012404 <_dtoa_r+0x46c>
 80123fc:	9b07      	ldr	r3, [sp, #28]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	f340 8101 	ble.w	8012606 <_dtoa_r+0x66e>
 8012404:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012408:	4656      	mov	r6, sl
 801240a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801240e:	4620      	mov	r0, r4
 8012410:	4629      	mov	r1, r5
 8012412:	f7ee fa43 	bl	800089c <__aeabi_ddiv>
 8012416:	f7ee fbc7 	bl	8000ba8 <__aeabi_d2iz>
 801241a:	4680      	mov	r8, r0
 801241c:	f7ee f8aa 	bl	8000574 <__aeabi_i2d>
 8012420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012424:	f7ee f910 	bl	8000648 <__aeabi_dmul>
 8012428:	4602      	mov	r2, r0
 801242a:	460b      	mov	r3, r1
 801242c:	4620      	mov	r0, r4
 801242e:	4629      	mov	r1, r5
 8012430:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012434:	f7ed ff50 	bl	80002d8 <__aeabi_dsub>
 8012438:	f806 4b01 	strb.w	r4, [r6], #1
 801243c:	9d07      	ldr	r5, [sp, #28]
 801243e:	eba6 040a 	sub.w	r4, r6, sl
 8012442:	42a5      	cmp	r5, r4
 8012444:	4602      	mov	r2, r0
 8012446:	460b      	mov	r3, r1
 8012448:	f040 8117 	bne.w	801267a <_dtoa_r+0x6e2>
 801244c:	f7ed ff46 	bl	80002dc <__adddf3>
 8012450:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012454:	4604      	mov	r4, r0
 8012456:	460d      	mov	r5, r1
 8012458:	f7ee fb86 	bl	8000b68 <__aeabi_dcmpgt>
 801245c:	2800      	cmp	r0, #0
 801245e:	f040 80f9 	bne.w	8012654 <_dtoa_r+0x6bc>
 8012462:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012466:	4620      	mov	r0, r4
 8012468:	4629      	mov	r1, r5
 801246a:	f7ee fb55 	bl	8000b18 <__aeabi_dcmpeq>
 801246e:	b118      	cbz	r0, 8012478 <_dtoa_r+0x4e0>
 8012470:	f018 0f01 	tst.w	r8, #1
 8012474:	f040 80ee 	bne.w	8012654 <_dtoa_r+0x6bc>
 8012478:	4649      	mov	r1, r9
 801247a:	4658      	mov	r0, fp
 801247c:	f000 fc90 	bl	8012da0 <_Bfree>
 8012480:	2300      	movs	r3, #0
 8012482:	7033      	strb	r3, [r6, #0]
 8012484:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012486:	3701      	adds	r7, #1
 8012488:	601f      	str	r7, [r3, #0]
 801248a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801248c:	2b00      	cmp	r3, #0
 801248e:	f000 831d 	beq.w	8012acc <_dtoa_r+0xb34>
 8012492:	601e      	str	r6, [r3, #0]
 8012494:	e31a      	b.n	8012acc <_dtoa_r+0xb34>
 8012496:	07e2      	lsls	r2, r4, #31
 8012498:	d505      	bpl.n	80124a6 <_dtoa_r+0x50e>
 801249a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801249e:	f7ee f8d3 	bl	8000648 <__aeabi_dmul>
 80124a2:	3601      	adds	r6, #1
 80124a4:	2301      	movs	r3, #1
 80124a6:	1064      	asrs	r4, r4, #1
 80124a8:	3508      	adds	r5, #8
 80124aa:	e73f      	b.n	801232c <_dtoa_r+0x394>
 80124ac:	2602      	movs	r6, #2
 80124ae:	e742      	b.n	8012336 <_dtoa_r+0x39e>
 80124b0:	9c07      	ldr	r4, [sp, #28]
 80124b2:	9704      	str	r7, [sp, #16]
 80124b4:	e761      	b.n	801237a <_dtoa_r+0x3e2>
 80124b6:	4b27      	ldr	r3, [pc, #156]	@ (8012554 <_dtoa_r+0x5bc>)
 80124b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80124ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80124be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80124c2:	4454      	add	r4, sl
 80124c4:	2900      	cmp	r1, #0
 80124c6:	d053      	beq.n	8012570 <_dtoa_r+0x5d8>
 80124c8:	4928      	ldr	r1, [pc, #160]	@ (801256c <_dtoa_r+0x5d4>)
 80124ca:	2000      	movs	r0, #0
 80124cc:	f7ee f9e6 	bl	800089c <__aeabi_ddiv>
 80124d0:	4633      	mov	r3, r6
 80124d2:	462a      	mov	r2, r5
 80124d4:	f7ed ff00 	bl	80002d8 <__aeabi_dsub>
 80124d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80124dc:	4656      	mov	r6, sl
 80124de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124e2:	f7ee fb61 	bl	8000ba8 <__aeabi_d2iz>
 80124e6:	4605      	mov	r5, r0
 80124e8:	f7ee f844 	bl	8000574 <__aeabi_i2d>
 80124ec:	4602      	mov	r2, r0
 80124ee:	460b      	mov	r3, r1
 80124f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124f4:	f7ed fef0 	bl	80002d8 <__aeabi_dsub>
 80124f8:	3530      	adds	r5, #48	@ 0x30
 80124fa:	4602      	mov	r2, r0
 80124fc:	460b      	mov	r3, r1
 80124fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012502:	f806 5b01 	strb.w	r5, [r6], #1
 8012506:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801250a:	f7ee fb0f 	bl	8000b2c <__aeabi_dcmplt>
 801250e:	2800      	cmp	r0, #0
 8012510:	d171      	bne.n	80125f6 <_dtoa_r+0x65e>
 8012512:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012516:	4911      	ldr	r1, [pc, #68]	@ (801255c <_dtoa_r+0x5c4>)
 8012518:	2000      	movs	r0, #0
 801251a:	f7ed fedd 	bl	80002d8 <__aeabi_dsub>
 801251e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012522:	f7ee fb03 	bl	8000b2c <__aeabi_dcmplt>
 8012526:	2800      	cmp	r0, #0
 8012528:	f040 8095 	bne.w	8012656 <_dtoa_r+0x6be>
 801252c:	42a6      	cmp	r6, r4
 801252e:	f43f af50 	beq.w	80123d2 <_dtoa_r+0x43a>
 8012532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012536:	4b0a      	ldr	r3, [pc, #40]	@ (8012560 <_dtoa_r+0x5c8>)
 8012538:	2200      	movs	r2, #0
 801253a:	f7ee f885 	bl	8000648 <__aeabi_dmul>
 801253e:	4b08      	ldr	r3, [pc, #32]	@ (8012560 <_dtoa_r+0x5c8>)
 8012540:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012544:	2200      	movs	r2, #0
 8012546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801254a:	f7ee f87d 	bl	8000648 <__aeabi_dmul>
 801254e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012552:	e7c4      	b.n	80124de <_dtoa_r+0x546>
 8012554:	08017640 	.word	0x08017640
 8012558:	08017618 	.word	0x08017618
 801255c:	3ff00000 	.word	0x3ff00000
 8012560:	40240000 	.word	0x40240000
 8012564:	401c0000 	.word	0x401c0000
 8012568:	40140000 	.word	0x40140000
 801256c:	3fe00000 	.word	0x3fe00000
 8012570:	4631      	mov	r1, r6
 8012572:	4628      	mov	r0, r5
 8012574:	f7ee f868 	bl	8000648 <__aeabi_dmul>
 8012578:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801257c:	9415      	str	r4, [sp, #84]	@ 0x54
 801257e:	4656      	mov	r6, sl
 8012580:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012584:	f7ee fb10 	bl	8000ba8 <__aeabi_d2iz>
 8012588:	4605      	mov	r5, r0
 801258a:	f7ed fff3 	bl	8000574 <__aeabi_i2d>
 801258e:	4602      	mov	r2, r0
 8012590:	460b      	mov	r3, r1
 8012592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012596:	f7ed fe9f 	bl	80002d8 <__aeabi_dsub>
 801259a:	3530      	adds	r5, #48	@ 0x30
 801259c:	f806 5b01 	strb.w	r5, [r6], #1
 80125a0:	4602      	mov	r2, r0
 80125a2:	460b      	mov	r3, r1
 80125a4:	42a6      	cmp	r6, r4
 80125a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80125aa:	f04f 0200 	mov.w	r2, #0
 80125ae:	d124      	bne.n	80125fa <_dtoa_r+0x662>
 80125b0:	4bac      	ldr	r3, [pc, #688]	@ (8012864 <_dtoa_r+0x8cc>)
 80125b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80125b6:	f7ed fe91 	bl	80002dc <__adddf3>
 80125ba:	4602      	mov	r2, r0
 80125bc:	460b      	mov	r3, r1
 80125be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125c2:	f7ee fad1 	bl	8000b68 <__aeabi_dcmpgt>
 80125c6:	2800      	cmp	r0, #0
 80125c8:	d145      	bne.n	8012656 <_dtoa_r+0x6be>
 80125ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80125ce:	49a5      	ldr	r1, [pc, #660]	@ (8012864 <_dtoa_r+0x8cc>)
 80125d0:	2000      	movs	r0, #0
 80125d2:	f7ed fe81 	bl	80002d8 <__aeabi_dsub>
 80125d6:	4602      	mov	r2, r0
 80125d8:	460b      	mov	r3, r1
 80125da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125de:	f7ee faa5 	bl	8000b2c <__aeabi_dcmplt>
 80125e2:	2800      	cmp	r0, #0
 80125e4:	f43f aef5 	beq.w	80123d2 <_dtoa_r+0x43a>
 80125e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80125ea:	1e73      	subs	r3, r6, #1
 80125ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80125ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80125f2:	2b30      	cmp	r3, #48	@ 0x30
 80125f4:	d0f8      	beq.n	80125e8 <_dtoa_r+0x650>
 80125f6:	9f04      	ldr	r7, [sp, #16]
 80125f8:	e73e      	b.n	8012478 <_dtoa_r+0x4e0>
 80125fa:	4b9b      	ldr	r3, [pc, #620]	@ (8012868 <_dtoa_r+0x8d0>)
 80125fc:	f7ee f824 	bl	8000648 <__aeabi_dmul>
 8012600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012604:	e7bc      	b.n	8012580 <_dtoa_r+0x5e8>
 8012606:	d10c      	bne.n	8012622 <_dtoa_r+0x68a>
 8012608:	4b98      	ldr	r3, [pc, #608]	@ (801286c <_dtoa_r+0x8d4>)
 801260a:	2200      	movs	r2, #0
 801260c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012610:	f7ee f81a 	bl	8000648 <__aeabi_dmul>
 8012614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012618:	f7ee fa9c 	bl	8000b54 <__aeabi_dcmpge>
 801261c:	2800      	cmp	r0, #0
 801261e:	f000 8157 	beq.w	80128d0 <_dtoa_r+0x938>
 8012622:	2400      	movs	r4, #0
 8012624:	4625      	mov	r5, r4
 8012626:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012628:	43db      	mvns	r3, r3
 801262a:	9304      	str	r3, [sp, #16]
 801262c:	4656      	mov	r6, sl
 801262e:	2700      	movs	r7, #0
 8012630:	4621      	mov	r1, r4
 8012632:	4658      	mov	r0, fp
 8012634:	f000 fbb4 	bl	8012da0 <_Bfree>
 8012638:	2d00      	cmp	r5, #0
 801263a:	d0dc      	beq.n	80125f6 <_dtoa_r+0x65e>
 801263c:	b12f      	cbz	r7, 801264a <_dtoa_r+0x6b2>
 801263e:	42af      	cmp	r7, r5
 8012640:	d003      	beq.n	801264a <_dtoa_r+0x6b2>
 8012642:	4639      	mov	r1, r7
 8012644:	4658      	mov	r0, fp
 8012646:	f000 fbab 	bl	8012da0 <_Bfree>
 801264a:	4629      	mov	r1, r5
 801264c:	4658      	mov	r0, fp
 801264e:	f000 fba7 	bl	8012da0 <_Bfree>
 8012652:	e7d0      	b.n	80125f6 <_dtoa_r+0x65e>
 8012654:	9704      	str	r7, [sp, #16]
 8012656:	4633      	mov	r3, r6
 8012658:	461e      	mov	r6, r3
 801265a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801265e:	2a39      	cmp	r2, #57	@ 0x39
 8012660:	d107      	bne.n	8012672 <_dtoa_r+0x6da>
 8012662:	459a      	cmp	sl, r3
 8012664:	d1f8      	bne.n	8012658 <_dtoa_r+0x6c0>
 8012666:	9a04      	ldr	r2, [sp, #16]
 8012668:	3201      	adds	r2, #1
 801266a:	9204      	str	r2, [sp, #16]
 801266c:	2230      	movs	r2, #48	@ 0x30
 801266e:	f88a 2000 	strb.w	r2, [sl]
 8012672:	781a      	ldrb	r2, [r3, #0]
 8012674:	3201      	adds	r2, #1
 8012676:	701a      	strb	r2, [r3, #0]
 8012678:	e7bd      	b.n	80125f6 <_dtoa_r+0x65e>
 801267a:	4b7b      	ldr	r3, [pc, #492]	@ (8012868 <_dtoa_r+0x8d0>)
 801267c:	2200      	movs	r2, #0
 801267e:	f7ed ffe3 	bl	8000648 <__aeabi_dmul>
 8012682:	2200      	movs	r2, #0
 8012684:	2300      	movs	r3, #0
 8012686:	4604      	mov	r4, r0
 8012688:	460d      	mov	r5, r1
 801268a:	f7ee fa45 	bl	8000b18 <__aeabi_dcmpeq>
 801268e:	2800      	cmp	r0, #0
 8012690:	f43f aebb 	beq.w	801240a <_dtoa_r+0x472>
 8012694:	e6f0      	b.n	8012478 <_dtoa_r+0x4e0>
 8012696:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012698:	2a00      	cmp	r2, #0
 801269a:	f000 80db 	beq.w	8012854 <_dtoa_r+0x8bc>
 801269e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80126a0:	2a01      	cmp	r2, #1
 80126a2:	f300 80bf 	bgt.w	8012824 <_dtoa_r+0x88c>
 80126a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80126a8:	2a00      	cmp	r2, #0
 80126aa:	f000 80b7 	beq.w	801281c <_dtoa_r+0x884>
 80126ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80126b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80126b4:	4646      	mov	r6, r8
 80126b6:	9a08      	ldr	r2, [sp, #32]
 80126b8:	2101      	movs	r1, #1
 80126ba:	441a      	add	r2, r3
 80126bc:	4658      	mov	r0, fp
 80126be:	4498      	add	r8, r3
 80126c0:	9208      	str	r2, [sp, #32]
 80126c2:	f000 fc6b 	bl	8012f9c <__i2b>
 80126c6:	4605      	mov	r5, r0
 80126c8:	b15e      	cbz	r6, 80126e2 <_dtoa_r+0x74a>
 80126ca:	9b08      	ldr	r3, [sp, #32]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	dd08      	ble.n	80126e2 <_dtoa_r+0x74a>
 80126d0:	42b3      	cmp	r3, r6
 80126d2:	9a08      	ldr	r2, [sp, #32]
 80126d4:	bfa8      	it	ge
 80126d6:	4633      	movge	r3, r6
 80126d8:	eba8 0803 	sub.w	r8, r8, r3
 80126dc:	1af6      	subs	r6, r6, r3
 80126de:	1ad3      	subs	r3, r2, r3
 80126e0:	9308      	str	r3, [sp, #32]
 80126e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126e4:	b1f3      	cbz	r3, 8012724 <_dtoa_r+0x78c>
 80126e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	f000 80b7 	beq.w	801285c <_dtoa_r+0x8c4>
 80126ee:	b18c      	cbz	r4, 8012714 <_dtoa_r+0x77c>
 80126f0:	4629      	mov	r1, r5
 80126f2:	4622      	mov	r2, r4
 80126f4:	4658      	mov	r0, fp
 80126f6:	f000 fd11 	bl	801311c <__pow5mult>
 80126fa:	464a      	mov	r2, r9
 80126fc:	4601      	mov	r1, r0
 80126fe:	4605      	mov	r5, r0
 8012700:	4658      	mov	r0, fp
 8012702:	f000 fc61 	bl	8012fc8 <__multiply>
 8012706:	4649      	mov	r1, r9
 8012708:	9004      	str	r0, [sp, #16]
 801270a:	4658      	mov	r0, fp
 801270c:	f000 fb48 	bl	8012da0 <_Bfree>
 8012710:	9b04      	ldr	r3, [sp, #16]
 8012712:	4699      	mov	r9, r3
 8012714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012716:	1b1a      	subs	r2, r3, r4
 8012718:	d004      	beq.n	8012724 <_dtoa_r+0x78c>
 801271a:	4649      	mov	r1, r9
 801271c:	4658      	mov	r0, fp
 801271e:	f000 fcfd 	bl	801311c <__pow5mult>
 8012722:	4681      	mov	r9, r0
 8012724:	2101      	movs	r1, #1
 8012726:	4658      	mov	r0, fp
 8012728:	f000 fc38 	bl	8012f9c <__i2b>
 801272c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801272e:	4604      	mov	r4, r0
 8012730:	2b00      	cmp	r3, #0
 8012732:	f000 81cf 	beq.w	8012ad4 <_dtoa_r+0xb3c>
 8012736:	461a      	mov	r2, r3
 8012738:	4601      	mov	r1, r0
 801273a:	4658      	mov	r0, fp
 801273c:	f000 fcee 	bl	801311c <__pow5mult>
 8012740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012742:	2b01      	cmp	r3, #1
 8012744:	4604      	mov	r4, r0
 8012746:	f300 8095 	bgt.w	8012874 <_dtoa_r+0x8dc>
 801274a:	9b02      	ldr	r3, [sp, #8]
 801274c:	2b00      	cmp	r3, #0
 801274e:	f040 8087 	bne.w	8012860 <_dtoa_r+0x8c8>
 8012752:	9b03      	ldr	r3, [sp, #12]
 8012754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012758:	2b00      	cmp	r3, #0
 801275a:	f040 8089 	bne.w	8012870 <_dtoa_r+0x8d8>
 801275e:	9b03      	ldr	r3, [sp, #12]
 8012760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012764:	0d1b      	lsrs	r3, r3, #20
 8012766:	051b      	lsls	r3, r3, #20
 8012768:	b12b      	cbz	r3, 8012776 <_dtoa_r+0x7de>
 801276a:	9b08      	ldr	r3, [sp, #32]
 801276c:	3301      	adds	r3, #1
 801276e:	9308      	str	r3, [sp, #32]
 8012770:	f108 0801 	add.w	r8, r8, #1
 8012774:	2301      	movs	r3, #1
 8012776:	930a      	str	r3, [sp, #40]	@ 0x28
 8012778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801277a:	2b00      	cmp	r3, #0
 801277c:	f000 81b0 	beq.w	8012ae0 <_dtoa_r+0xb48>
 8012780:	6923      	ldr	r3, [r4, #16]
 8012782:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012786:	6918      	ldr	r0, [r3, #16]
 8012788:	f000 fbbc 	bl	8012f04 <__hi0bits>
 801278c:	f1c0 0020 	rsb	r0, r0, #32
 8012790:	9b08      	ldr	r3, [sp, #32]
 8012792:	4418      	add	r0, r3
 8012794:	f010 001f 	ands.w	r0, r0, #31
 8012798:	d077      	beq.n	801288a <_dtoa_r+0x8f2>
 801279a:	f1c0 0320 	rsb	r3, r0, #32
 801279e:	2b04      	cmp	r3, #4
 80127a0:	dd6b      	ble.n	801287a <_dtoa_r+0x8e2>
 80127a2:	9b08      	ldr	r3, [sp, #32]
 80127a4:	f1c0 001c 	rsb	r0, r0, #28
 80127a8:	4403      	add	r3, r0
 80127aa:	4480      	add	r8, r0
 80127ac:	4406      	add	r6, r0
 80127ae:	9308      	str	r3, [sp, #32]
 80127b0:	f1b8 0f00 	cmp.w	r8, #0
 80127b4:	dd05      	ble.n	80127c2 <_dtoa_r+0x82a>
 80127b6:	4649      	mov	r1, r9
 80127b8:	4642      	mov	r2, r8
 80127ba:	4658      	mov	r0, fp
 80127bc:	f000 fd08 	bl	80131d0 <__lshift>
 80127c0:	4681      	mov	r9, r0
 80127c2:	9b08      	ldr	r3, [sp, #32]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	dd05      	ble.n	80127d4 <_dtoa_r+0x83c>
 80127c8:	4621      	mov	r1, r4
 80127ca:	461a      	mov	r2, r3
 80127cc:	4658      	mov	r0, fp
 80127ce:	f000 fcff 	bl	80131d0 <__lshift>
 80127d2:	4604      	mov	r4, r0
 80127d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d059      	beq.n	801288e <_dtoa_r+0x8f6>
 80127da:	4621      	mov	r1, r4
 80127dc:	4648      	mov	r0, r9
 80127de:	f000 fd63 	bl	80132a8 <__mcmp>
 80127e2:	2800      	cmp	r0, #0
 80127e4:	da53      	bge.n	801288e <_dtoa_r+0x8f6>
 80127e6:	1e7b      	subs	r3, r7, #1
 80127e8:	9304      	str	r3, [sp, #16]
 80127ea:	4649      	mov	r1, r9
 80127ec:	2300      	movs	r3, #0
 80127ee:	220a      	movs	r2, #10
 80127f0:	4658      	mov	r0, fp
 80127f2:	f000 faf7 	bl	8012de4 <__multadd>
 80127f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80127f8:	4681      	mov	r9, r0
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	f000 8172 	beq.w	8012ae4 <_dtoa_r+0xb4c>
 8012800:	2300      	movs	r3, #0
 8012802:	4629      	mov	r1, r5
 8012804:	220a      	movs	r2, #10
 8012806:	4658      	mov	r0, fp
 8012808:	f000 faec 	bl	8012de4 <__multadd>
 801280c:	9b00      	ldr	r3, [sp, #0]
 801280e:	2b00      	cmp	r3, #0
 8012810:	4605      	mov	r5, r0
 8012812:	dc67      	bgt.n	80128e4 <_dtoa_r+0x94c>
 8012814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012816:	2b02      	cmp	r3, #2
 8012818:	dc41      	bgt.n	801289e <_dtoa_r+0x906>
 801281a:	e063      	b.n	80128e4 <_dtoa_r+0x94c>
 801281c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801281e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012822:	e746      	b.n	80126b2 <_dtoa_r+0x71a>
 8012824:	9b07      	ldr	r3, [sp, #28]
 8012826:	1e5c      	subs	r4, r3, #1
 8012828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801282a:	42a3      	cmp	r3, r4
 801282c:	bfbf      	itttt	lt
 801282e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012830:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012832:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012834:	1ae3      	sublt	r3, r4, r3
 8012836:	bfb4      	ite	lt
 8012838:	18d2      	addlt	r2, r2, r3
 801283a:	1b1c      	subge	r4, r3, r4
 801283c:	9b07      	ldr	r3, [sp, #28]
 801283e:	bfbc      	itt	lt
 8012840:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012842:	2400      	movlt	r4, #0
 8012844:	2b00      	cmp	r3, #0
 8012846:	bfb5      	itete	lt
 8012848:	eba8 0603 	sublt.w	r6, r8, r3
 801284c:	9b07      	ldrge	r3, [sp, #28]
 801284e:	2300      	movlt	r3, #0
 8012850:	4646      	movge	r6, r8
 8012852:	e730      	b.n	80126b6 <_dtoa_r+0x71e>
 8012854:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012856:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012858:	4646      	mov	r6, r8
 801285a:	e735      	b.n	80126c8 <_dtoa_r+0x730>
 801285c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801285e:	e75c      	b.n	801271a <_dtoa_r+0x782>
 8012860:	2300      	movs	r3, #0
 8012862:	e788      	b.n	8012776 <_dtoa_r+0x7de>
 8012864:	3fe00000 	.word	0x3fe00000
 8012868:	40240000 	.word	0x40240000
 801286c:	40140000 	.word	0x40140000
 8012870:	9b02      	ldr	r3, [sp, #8]
 8012872:	e780      	b.n	8012776 <_dtoa_r+0x7de>
 8012874:	2300      	movs	r3, #0
 8012876:	930a      	str	r3, [sp, #40]	@ 0x28
 8012878:	e782      	b.n	8012780 <_dtoa_r+0x7e8>
 801287a:	d099      	beq.n	80127b0 <_dtoa_r+0x818>
 801287c:	9a08      	ldr	r2, [sp, #32]
 801287e:	331c      	adds	r3, #28
 8012880:	441a      	add	r2, r3
 8012882:	4498      	add	r8, r3
 8012884:	441e      	add	r6, r3
 8012886:	9208      	str	r2, [sp, #32]
 8012888:	e792      	b.n	80127b0 <_dtoa_r+0x818>
 801288a:	4603      	mov	r3, r0
 801288c:	e7f6      	b.n	801287c <_dtoa_r+0x8e4>
 801288e:	9b07      	ldr	r3, [sp, #28]
 8012890:	9704      	str	r7, [sp, #16]
 8012892:	2b00      	cmp	r3, #0
 8012894:	dc20      	bgt.n	80128d8 <_dtoa_r+0x940>
 8012896:	9300      	str	r3, [sp, #0]
 8012898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801289a:	2b02      	cmp	r3, #2
 801289c:	dd1e      	ble.n	80128dc <_dtoa_r+0x944>
 801289e:	9b00      	ldr	r3, [sp, #0]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	f47f aec0 	bne.w	8012626 <_dtoa_r+0x68e>
 80128a6:	4621      	mov	r1, r4
 80128a8:	2205      	movs	r2, #5
 80128aa:	4658      	mov	r0, fp
 80128ac:	f000 fa9a 	bl	8012de4 <__multadd>
 80128b0:	4601      	mov	r1, r0
 80128b2:	4604      	mov	r4, r0
 80128b4:	4648      	mov	r0, r9
 80128b6:	f000 fcf7 	bl	80132a8 <__mcmp>
 80128ba:	2800      	cmp	r0, #0
 80128bc:	f77f aeb3 	ble.w	8012626 <_dtoa_r+0x68e>
 80128c0:	4656      	mov	r6, sl
 80128c2:	2331      	movs	r3, #49	@ 0x31
 80128c4:	f806 3b01 	strb.w	r3, [r6], #1
 80128c8:	9b04      	ldr	r3, [sp, #16]
 80128ca:	3301      	adds	r3, #1
 80128cc:	9304      	str	r3, [sp, #16]
 80128ce:	e6ae      	b.n	801262e <_dtoa_r+0x696>
 80128d0:	9c07      	ldr	r4, [sp, #28]
 80128d2:	9704      	str	r7, [sp, #16]
 80128d4:	4625      	mov	r5, r4
 80128d6:	e7f3      	b.n	80128c0 <_dtoa_r+0x928>
 80128d8:	9b07      	ldr	r3, [sp, #28]
 80128da:	9300      	str	r3, [sp, #0]
 80128dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128de:	2b00      	cmp	r3, #0
 80128e0:	f000 8104 	beq.w	8012aec <_dtoa_r+0xb54>
 80128e4:	2e00      	cmp	r6, #0
 80128e6:	dd05      	ble.n	80128f4 <_dtoa_r+0x95c>
 80128e8:	4629      	mov	r1, r5
 80128ea:	4632      	mov	r2, r6
 80128ec:	4658      	mov	r0, fp
 80128ee:	f000 fc6f 	bl	80131d0 <__lshift>
 80128f2:	4605      	mov	r5, r0
 80128f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d05a      	beq.n	80129b0 <_dtoa_r+0xa18>
 80128fa:	6869      	ldr	r1, [r5, #4]
 80128fc:	4658      	mov	r0, fp
 80128fe:	f000 fa0f 	bl	8012d20 <_Balloc>
 8012902:	4606      	mov	r6, r0
 8012904:	b928      	cbnz	r0, 8012912 <_dtoa_r+0x97a>
 8012906:	4b84      	ldr	r3, [pc, #528]	@ (8012b18 <_dtoa_r+0xb80>)
 8012908:	4602      	mov	r2, r0
 801290a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801290e:	f7ff bb5a 	b.w	8011fc6 <_dtoa_r+0x2e>
 8012912:	692a      	ldr	r2, [r5, #16]
 8012914:	3202      	adds	r2, #2
 8012916:	0092      	lsls	r2, r2, #2
 8012918:	f105 010c 	add.w	r1, r5, #12
 801291c:	300c      	adds	r0, #12
 801291e:	f7ff fa9c 	bl	8011e5a <memcpy>
 8012922:	2201      	movs	r2, #1
 8012924:	4631      	mov	r1, r6
 8012926:	4658      	mov	r0, fp
 8012928:	f000 fc52 	bl	80131d0 <__lshift>
 801292c:	f10a 0301 	add.w	r3, sl, #1
 8012930:	9307      	str	r3, [sp, #28]
 8012932:	9b00      	ldr	r3, [sp, #0]
 8012934:	4453      	add	r3, sl
 8012936:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012938:	9b02      	ldr	r3, [sp, #8]
 801293a:	f003 0301 	and.w	r3, r3, #1
 801293e:	462f      	mov	r7, r5
 8012940:	930a      	str	r3, [sp, #40]	@ 0x28
 8012942:	4605      	mov	r5, r0
 8012944:	9b07      	ldr	r3, [sp, #28]
 8012946:	4621      	mov	r1, r4
 8012948:	3b01      	subs	r3, #1
 801294a:	4648      	mov	r0, r9
 801294c:	9300      	str	r3, [sp, #0]
 801294e:	f7ff fa99 	bl	8011e84 <quorem>
 8012952:	4639      	mov	r1, r7
 8012954:	9002      	str	r0, [sp, #8]
 8012956:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801295a:	4648      	mov	r0, r9
 801295c:	f000 fca4 	bl	80132a8 <__mcmp>
 8012960:	462a      	mov	r2, r5
 8012962:	9008      	str	r0, [sp, #32]
 8012964:	4621      	mov	r1, r4
 8012966:	4658      	mov	r0, fp
 8012968:	f000 fcba 	bl	80132e0 <__mdiff>
 801296c:	68c2      	ldr	r2, [r0, #12]
 801296e:	4606      	mov	r6, r0
 8012970:	bb02      	cbnz	r2, 80129b4 <_dtoa_r+0xa1c>
 8012972:	4601      	mov	r1, r0
 8012974:	4648      	mov	r0, r9
 8012976:	f000 fc97 	bl	80132a8 <__mcmp>
 801297a:	4602      	mov	r2, r0
 801297c:	4631      	mov	r1, r6
 801297e:	4658      	mov	r0, fp
 8012980:	920e      	str	r2, [sp, #56]	@ 0x38
 8012982:	f000 fa0d 	bl	8012da0 <_Bfree>
 8012986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012988:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801298a:	9e07      	ldr	r6, [sp, #28]
 801298c:	ea43 0102 	orr.w	r1, r3, r2
 8012990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012992:	4319      	orrs	r1, r3
 8012994:	d110      	bne.n	80129b8 <_dtoa_r+0xa20>
 8012996:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801299a:	d029      	beq.n	80129f0 <_dtoa_r+0xa58>
 801299c:	9b08      	ldr	r3, [sp, #32]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	dd02      	ble.n	80129a8 <_dtoa_r+0xa10>
 80129a2:	9b02      	ldr	r3, [sp, #8]
 80129a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80129a8:	9b00      	ldr	r3, [sp, #0]
 80129aa:	f883 8000 	strb.w	r8, [r3]
 80129ae:	e63f      	b.n	8012630 <_dtoa_r+0x698>
 80129b0:	4628      	mov	r0, r5
 80129b2:	e7bb      	b.n	801292c <_dtoa_r+0x994>
 80129b4:	2201      	movs	r2, #1
 80129b6:	e7e1      	b.n	801297c <_dtoa_r+0x9e4>
 80129b8:	9b08      	ldr	r3, [sp, #32]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	db04      	blt.n	80129c8 <_dtoa_r+0xa30>
 80129be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80129c0:	430b      	orrs	r3, r1
 80129c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80129c4:	430b      	orrs	r3, r1
 80129c6:	d120      	bne.n	8012a0a <_dtoa_r+0xa72>
 80129c8:	2a00      	cmp	r2, #0
 80129ca:	dded      	ble.n	80129a8 <_dtoa_r+0xa10>
 80129cc:	4649      	mov	r1, r9
 80129ce:	2201      	movs	r2, #1
 80129d0:	4658      	mov	r0, fp
 80129d2:	f000 fbfd 	bl	80131d0 <__lshift>
 80129d6:	4621      	mov	r1, r4
 80129d8:	4681      	mov	r9, r0
 80129da:	f000 fc65 	bl	80132a8 <__mcmp>
 80129de:	2800      	cmp	r0, #0
 80129e0:	dc03      	bgt.n	80129ea <_dtoa_r+0xa52>
 80129e2:	d1e1      	bne.n	80129a8 <_dtoa_r+0xa10>
 80129e4:	f018 0f01 	tst.w	r8, #1
 80129e8:	d0de      	beq.n	80129a8 <_dtoa_r+0xa10>
 80129ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80129ee:	d1d8      	bne.n	80129a2 <_dtoa_r+0xa0a>
 80129f0:	9a00      	ldr	r2, [sp, #0]
 80129f2:	2339      	movs	r3, #57	@ 0x39
 80129f4:	7013      	strb	r3, [r2, #0]
 80129f6:	4633      	mov	r3, r6
 80129f8:	461e      	mov	r6, r3
 80129fa:	3b01      	subs	r3, #1
 80129fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012a00:	2a39      	cmp	r2, #57	@ 0x39
 8012a02:	d052      	beq.n	8012aaa <_dtoa_r+0xb12>
 8012a04:	3201      	adds	r2, #1
 8012a06:	701a      	strb	r2, [r3, #0]
 8012a08:	e612      	b.n	8012630 <_dtoa_r+0x698>
 8012a0a:	2a00      	cmp	r2, #0
 8012a0c:	dd07      	ble.n	8012a1e <_dtoa_r+0xa86>
 8012a0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012a12:	d0ed      	beq.n	80129f0 <_dtoa_r+0xa58>
 8012a14:	9a00      	ldr	r2, [sp, #0]
 8012a16:	f108 0301 	add.w	r3, r8, #1
 8012a1a:	7013      	strb	r3, [r2, #0]
 8012a1c:	e608      	b.n	8012630 <_dtoa_r+0x698>
 8012a1e:	9b07      	ldr	r3, [sp, #28]
 8012a20:	9a07      	ldr	r2, [sp, #28]
 8012a22:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a28:	4293      	cmp	r3, r2
 8012a2a:	d028      	beq.n	8012a7e <_dtoa_r+0xae6>
 8012a2c:	4649      	mov	r1, r9
 8012a2e:	2300      	movs	r3, #0
 8012a30:	220a      	movs	r2, #10
 8012a32:	4658      	mov	r0, fp
 8012a34:	f000 f9d6 	bl	8012de4 <__multadd>
 8012a38:	42af      	cmp	r7, r5
 8012a3a:	4681      	mov	r9, r0
 8012a3c:	f04f 0300 	mov.w	r3, #0
 8012a40:	f04f 020a 	mov.w	r2, #10
 8012a44:	4639      	mov	r1, r7
 8012a46:	4658      	mov	r0, fp
 8012a48:	d107      	bne.n	8012a5a <_dtoa_r+0xac2>
 8012a4a:	f000 f9cb 	bl	8012de4 <__multadd>
 8012a4e:	4607      	mov	r7, r0
 8012a50:	4605      	mov	r5, r0
 8012a52:	9b07      	ldr	r3, [sp, #28]
 8012a54:	3301      	adds	r3, #1
 8012a56:	9307      	str	r3, [sp, #28]
 8012a58:	e774      	b.n	8012944 <_dtoa_r+0x9ac>
 8012a5a:	f000 f9c3 	bl	8012de4 <__multadd>
 8012a5e:	4629      	mov	r1, r5
 8012a60:	4607      	mov	r7, r0
 8012a62:	2300      	movs	r3, #0
 8012a64:	220a      	movs	r2, #10
 8012a66:	4658      	mov	r0, fp
 8012a68:	f000 f9bc 	bl	8012de4 <__multadd>
 8012a6c:	4605      	mov	r5, r0
 8012a6e:	e7f0      	b.n	8012a52 <_dtoa_r+0xaba>
 8012a70:	9b00      	ldr	r3, [sp, #0]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	bfcc      	ite	gt
 8012a76:	461e      	movgt	r6, r3
 8012a78:	2601      	movle	r6, #1
 8012a7a:	4456      	add	r6, sl
 8012a7c:	2700      	movs	r7, #0
 8012a7e:	4649      	mov	r1, r9
 8012a80:	2201      	movs	r2, #1
 8012a82:	4658      	mov	r0, fp
 8012a84:	f000 fba4 	bl	80131d0 <__lshift>
 8012a88:	4621      	mov	r1, r4
 8012a8a:	4681      	mov	r9, r0
 8012a8c:	f000 fc0c 	bl	80132a8 <__mcmp>
 8012a90:	2800      	cmp	r0, #0
 8012a92:	dcb0      	bgt.n	80129f6 <_dtoa_r+0xa5e>
 8012a94:	d102      	bne.n	8012a9c <_dtoa_r+0xb04>
 8012a96:	f018 0f01 	tst.w	r8, #1
 8012a9a:	d1ac      	bne.n	80129f6 <_dtoa_r+0xa5e>
 8012a9c:	4633      	mov	r3, r6
 8012a9e:	461e      	mov	r6, r3
 8012aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012aa4:	2a30      	cmp	r2, #48	@ 0x30
 8012aa6:	d0fa      	beq.n	8012a9e <_dtoa_r+0xb06>
 8012aa8:	e5c2      	b.n	8012630 <_dtoa_r+0x698>
 8012aaa:	459a      	cmp	sl, r3
 8012aac:	d1a4      	bne.n	80129f8 <_dtoa_r+0xa60>
 8012aae:	9b04      	ldr	r3, [sp, #16]
 8012ab0:	3301      	adds	r3, #1
 8012ab2:	9304      	str	r3, [sp, #16]
 8012ab4:	2331      	movs	r3, #49	@ 0x31
 8012ab6:	f88a 3000 	strb.w	r3, [sl]
 8012aba:	e5b9      	b.n	8012630 <_dtoa_r+0x698>
 8012abc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012abe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012b1c <_dtoa_r+0xb84>
 8012ac2:	b11b      	cbz	r3, 8012acc <_dtoa_r+0xb34>
 8012ac4:	f10a 0308 	add.w	r3, sl, #8
 8012ac8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012aca:	6013      	str	r3, [r2, #0]
 8012acc:	4650      	mov	r0, sl
 8012ace:	b019      	add	sp, #100	@ 0x64
 8012ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ad6:	2b01      	cmp	r3, #1
 8012ad8:	f77f ae37 	ble.w	801274a <_dtoa_r+0x7b2>
 8012adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ae0:	2001      	movs	r0, #1
 8012ae2:	e655      	b.n	8012790 <_dtoa_r+0x7f8>
 8012ae4:	9b00      	ldr	r3, [sp, #0]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	f77f aed6 	ble.w	8012898 <_dtoa_r+0x900>
 8012aec:	4656      	mov	r6, sl
 8012aee:	4621      	mov	r1, r4
 8012af0:	4648      	mov	r0, r9
 8012af2:	f7ff f9c7 	bl	8011e84 <quorem>
 8012af6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012afa:	f806 8b01 	strb.w	r8, [r6], #1
 8012afe:	9b00      	ldr	r3, [sp, #0]
 8012b00:	eba6 020a 	sub.w	r2, r6, sl
 8012b04:	4293      	cmp	r3, r2
 8012b06:	ddb3      	ble.n	8012a70 <_dtoa_r+0xad8>
 8012b08:	4649      	mov	r1, r9
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	220a      	movs	r2, #10
 8012b0e:	4658      	mov	r0, fp
 8012b10:	f000 f968 	bl	8012de4 <__multadd>
 8012b14:	4681      	mov	r9, r0
 8012b16:	e7ea      	b.n	8012aee <_dtoa_r+0xb56>
 8012b18:	0801759b 	.word	0x0801759b
 8012b1c:	0801751f 	.word	0x0801751f

08012b20 <_free_r>:
 8012b20:	b538      	push	{r3, r4, r5, lr}
 8012b22:	4605      	mov	r5, r0
 8012b24:	2900      	cmp	r1, #0
 8012b26:	d041      	beq.n	8012bac <_free_r+0x8c>
 8012b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b2c:	1f0c      	subs	r4, r1, #4
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	bfb8      	it	lt
 8012b32:	18e4      	addlt	r4, r4, r3
 8012b34:	f000 f8e8 	bl	8012d08 <__malloc_lock>
 8012b38:	4a1d      	ldr	r2, [pc, #116]	@ (8012bb0 <_free_r+0x90>)
 8012b3a:	6813      	ldr	r3, [r2, #0]
 8012b3c:	b933      	cbnz	r3, 8012b4c <_free_r+0x2c>
 8012b3e:	6063      	str	r3, [r4, #4]
 8012b40:	6014      	str	r4, [r2, #0]
 8012b42:	4628      	mov	r0, r5
 8012b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b48:	f000 b8e4 	b.w	8012d14 <__malloc_unlock>
 8012b4c:	42a3      	cmp	r3, r4
 8012b4e:	d908      	bls.n	8012b62 <_free_r+0x42>
 8012b50:	6820      	ldr	r0, [r4, #0]
 8012b52:	1821      	adds	r1, r4, r0
 8012b54:	428b      	cmp	r3, r1
 8012b56:	bf01      	itttt	eq
 8012b58:	6819      	ldreq	r1, [r3, #0]
 8012b5a:	685b      	ldreq	r3, [r3, #4]
 8012b5c:	1809      	addeq	r1, r1, r0
 8012b5e:	6021      	streq	r1, [r4, #0]
 8012b60:	e7ed      	b.n	8012b3e <_free_r+0x1e>
 8012b62:	461a      	mov	r2, r3
 8012b64:	685b      	ldr	r3, [r3, #4]
 8012b66:	b10b      	cbz	r3, 8012b6c <_free_r+0x4c>
 8012b68:	42a3      	cmp	r3, r4
 8012b6a:	d9fa      	bls.n	8012b62 <_free_r+0x42>
 8012b6c:	6811      	ldr	r1, [r2, #0]
 8012b6e:	1850      	adds	r0, r2, r1
 8012b70:	42a0      	cmp	r0, r4
 8012b72:	d10b      	bne.n	8012b8c <_free_r+0x6c>
 8012b74:	6820      	ldr	r0, [r4, #0]
 8012b76:	4401      	add	r1, r0
 8012b78:	1850      	adds	r0, r2, r1
 8012b7a:	4283      	cmp	r3, r0
 8012b7c:	6011      	str	r1, [r2, #0]
 8012b7e:	d1e0      	bne.n	8012b42 <_free_r+0x22>
 8012b80:	6818      	ldr	r0, [r3, #0]
 8012b82:	685b      	ldr	r3, [r3, #4]
 8012b84:	6053      	str	r3, [r2, #4]
 8012b86:	4408      	add	r0, r1
 8012b88:	6010      	str	r0, [r2, #0]
 8012b8a:	e7da      	b.n	8012b42 <_free_r+0x22>
 8012b8c:	d902      	bls.n	8012b94 <_free_r+0x74>
 8012b8e:	230c      	movs	r3, #12
 8012b90:	602b      	str	r3, [r5, #0]
 8012b92:	e7d6      	b.n	8012b42 <_free_r+0x22>
 8012b94:	6820      	ldr	r0, [r4, #0]
 8012b96:	1821      	adds	r1, r4, r0
 8012b98:	428b      	cmp	r3, r1
 8012b9a:	bf04      	itt	eq
 8012b9c:	6819      	ldreq	r1, [r3, #0]
 8012b9e:	685b      	ldreq	r3, [r3, #4]
 8012ba0:	6063      	str	r3, [r4, #4]
 8012ba2:	bf04      	itt	eq
 8012ba4:	1809      	addeq	r1, r1, r0
 8012ba6:	6021      	streq	r1, [r4, #0]
 8012ba8:	6054      	str	r4, [r2, #4]
 8012baa:	e7ca      	b.n	8012b42 <_free_r+0x22>
 8012bac:	bd38      	pop	{r3, r4, r5, pc}
 8012bae:	bf00      	nop
 8012bb0:	200026d0 	.word	0x200026d0

08012bb4 <malloc>:
 8012bb4:	4b02      	ldr	r3, [pc, #8]	@ (8012bc0 <malloc+0xc>)
 8012bb6:	4601      	mov	r1, r0
 8012bb8:	6818      	ldr	r0, [r3, #0]
 8012bba:	f000 b825 	b.w	8012c08 <_malloc_r>
 8012bbe:	bf00      	nop
 8012bc0:	200001cc 	.word	0x200001cc

08012bc4 <sbrk_aligned>:
 8012bc4:	b570      	push	{r4, r5, r6, lr}
 8012bc6:	4e0f      	ldr	r6, [pc, #60]	@ (8012c04 <sbrk_aligned+0x40>)
 8012bc8:	460c      	mov	r4, r1
 8012bca:	6831      	ldr	r1, [r6, #0]
 8012bcc:	4605      	mov	r5, r0
 8012bce:	b911      	cbnz	r1, 8012bd6 <sbrk_aligned+0x12>
 8012bd0:	f002 f988 	bl	8014ee4 <_sbrk_r>
 8012bd4:	6030      	str	r0, [r6, #0]
 8012bd6:	4621      	mov	r1, r4
 8012bd8:	4628      	mov	r0, r5
 8012bda:	f002 f983 	bl	8014ee4 <_sbrk_r>
 8012bde:	1c43      	adds	r3, r0, #1
 8012be0:	d103      	bne.n	8012bea <sbrk_aligned+0x26>
 8012be2:	f04f 34ff 	mov.w	r4, #4294967295
 8012be6:	4620      	mov	r0, r4
 8012be8:	bd70      	pop	{r4, r5, r6, pc}
 8012bea:	1cc4      	adds	r4, r0, #3
 8012bec:	f024 0403 	bic.w	r4, r4, #3
 8012bf0:	42a0      	cmp	r0, r4
 8012bf2:	d0f8      	beq.n	8012be6 <sbrk_aligned+0x22>
 8012bf4:	1a21      	subs	r1, r4, r0
 8012bf6:	4628      	mov	r0, r5
 8012bf8:	f002 f974 	bl	8014ee4 <_sbrk_r>
 8012bfc:	3001      	adds	r0, #1
 8012bfe:	d1f2      	bne.n	8012be6 <sbrk_aligned+0x22>
 8012c00:	e7ef      	b.n	8012be2 <sbrk_aligned+0x1e>
 8012c02:	bf00      	nop
 8012c04:	200026cc 	.word	0x200026cc

08012c08 <_malloc_r>:
 8012c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c0c:	1ccd      	adds	r5, r1, #3
 8012c0e:	f025 0503 	bic.w	r5, r5, #3
 8012c12:	3508      	adds	r5, #8
 8012c14:	2d0c      	cmp	r5, #12
 8012c16:	bf38      	it	cc
 8012c18:	250c      	movcc	r5, #12
 8012c1a:	2d00      	cmp	r5, #0
 8012c1c:	4606      	mov	r6, r0
 8012c1e:	db01      	blt.n	8012c24 <_malloc_r+0x1c>
 8012c20:	42a9      	cmp	r1, r5
 8012c22:	d904      	bls.n	8012c2e <_malloc_r+0x26>
 8012c24:	230c      	movs	r3, #12
 8012c26:	6033      	str	r3, [r6, #0]
 8012c28:	2000      	movs	r0, #0
 8012c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d04 <_malloc_r+0xfc>
 8012c32:	f000 f869 	bl	8012d08 <__malloc_lock>
 8012c36:	f8d8 3000 	ldr.w	r3, [r8]
 8012c3a:	461c      	mov	r4, r3
 8012c3c:	bb44      	cbnz	r4, 8012c90 <_malloc_r+0x88>
 8012c3e:	4629      	mov	r1, r5
 8012c40:	4630      	mov	r0, r6
 8012c42:	f7ff ffbf 	bl	8012bc4 <sbrk_aligned>
 8012c46:	1c43      	adds	r3, r0, #1
 8012c48:	4604      	mov	r4, r0
 8012c4a:	d158      	bne.n	8012cfe <_malloc_r+0xf6>
 8012c4c:	f8d8 4000 	ldr.w	r4, [r8]
 8012c50:	4627      	mov	r7, r4
 8012c52:	2f00      	cmp	r7, #0
 8012c54:	d143      	bne.n	8012cde <_malloc_r+0xd6>
 8012c56:	2c00      	cmp	r4, #0
 8012c58:	d04b      	beq.n	8012cf2 <_malloc_r+0xea>
 8012c5a:	6823      	ldr	r3, [r4, #0]
 8012c5c:	4639      	mov	r1, r7
 8012c5e:	4630      	mov	r0, r6
 8012c60:	eb04 0903 	add.w	r9, r4, r3
 8012c64:	f002 f93e 	bl	8014ee4 <_sbrk_r>
 8012c68:	4581      	cmp	r9, r0
 8012c6a:	d142      	bne.n	8012cf2 <_malloc_r+0xea>
 8012c6c:	6821      	ldr	r1, [r4, #0]
 8012c6e:	1a6d      	subs	r5, r5, r1
 8012c70:	4629      	mov	r1, r5
 8012c72:	4630      	mov	r0, r6
 8012c74:	f7ff ffa6 	bl	8012bc4 <sbrk_aligned>
 8012c78:	3001      	adds	r0, #1
 8012c7a:	d03a      	beq.n	8012cf2 <_malloc_r+0xea>
 8012c7c:	6823      	ldr	r3, [r4, #0]
 8012c7e:	442b      	add	r3, r5
 8012c80:	6023      	str	r3, [r4, #0]
 8012c82:	f8d8 3000 	ldr.w	r3, [r8]
 8012c86:	685a      	ldr	r2, [r3, #4]
 8012c88:	bb62      	cbnz	r2, 8012ce4 <_malloc_r+0xdc>
 8012c8a:	f8c8 7000 	str.w	r7, [r8]
 8012c8e:	e00f      	b.n	8012cb0 <_malloc_r+0xa8>
 8012c90:	6822      	ldr	r2, [r4, #0]
 8012c92:	1b52      	subs	r2, r2, r5
 8012c94:	d420      	bmi.n	8012cd8 <_malloc_r+0xd0>
 8012c96:	2a0b      	cmp	r2, #11
 8012c98:	d917      	bls.n	8012cca <_malloc_r+0xc2>
 8012c9a:	1961      	adds	r1, r4, r5
 8012c9c:	42a3      	cmp	r3, r4
 8012c9e:	6025      	str	r5, [r4, #0]
 8012ca0:	bf18      	it	ne
 8012ca2:	6059      	strne	r1, [r3, #4]
 8012ca4:	6863      	ldr	r3, [r4, #4]
 8012ca6:	bf08      	it	eq
 8012ca8:	f8c8 1000 	streq.w	r1, [r8]
 8012cac:	5162      	str	r2, [r4, r5]
 8012cae:	604b      	str	r3, [r1, #4]
 8012cb0:	4630      	mov	r0, r6
 8012cb2:	f000 f82f 	bl	8012d14 <__malloc_unlock>
 8012cb6:	f104 000b 	add.w	r0, r4, #11
 8012cba:	1d23      	adds	r3, r4, #4
 8012cbc:	f020 0007 	bic.w	r0, r0, #7
 8012cc0:	1ac2      	subs	r2, r0, r3
 8012cc2:	bf1c      	itt	ne
 8012cc4:	1a1b      	subne	r3, r3, r0
 8012cc6:	50a3      	strne	r3, [r4, r2]
 8012cc8:	e7af      	b.n	8012c2a <_malloc_r+0x22>
 8012cca:	6862      	ldr	r2, [r4, #4]
 8012ccc:	42a3      	cmp	r3, r4
 8012cce:	bf0c      	ite	eq
 8012cd0:	f8c8 2000 	streq.w	r2, [r8]
 8012cd4:	605a      	strne	r2, [r3, #4]
 8012cd6:	e7eb      	b.n	8012cb0 <_malloc_r+0xa8>
 8012cd8:	4623      	mov	r3, r4
 8012cda:	6864      	ldr	r4, [r4, #4]
 8012cdc:	e7ae      	b.n	8012c3c <_malloc_r+0x34>
 8012cde:	463c      	mov	r4, r7
 8012ce0:	687f      	ldr	r7, [r7, #4]
 8012ce2:	e7b6      	b.n	8012c52 <_malloc_r+0x4a>
 8012ce4:	461a      	mov	r2, r3
 8012ce6:	685b      	ldr	r3, [r3, #4]
 8012ce8:	42a3      	cmp	r3, r4
 8012cea:	d1fb      	bne.n	8012ce4 <_malloc_r+0xdc>
 8012cec:	2300      	movs	r3, #0
 8012cee:	6053      	str	r3, [r2, #4]
 8012cf0:	e7de      	b.n	8012cb0 <_malloc_r+0xa8>
 8012cf2:	230c      	movs	r3, #12
 8012cf4:	6033      	str	r3, [r6, #0]
 8012cf6:	4630      	mov	r0, r6
 8012cf8:	f000 f80c 	bl	8012d14 <__malloc_unlock>
 8012cfc:	e794      	b.n	8012c28 <_malloc_r+0x20>
 8012cfe:	6005      	str	r5, [r0, #0]
 8012d00:	e7d6      	b.n	8012cb0 <_malloc_r+0xa8>
 8012d02:	bf00      	nop
 8012d04:	200026d0 	.word	0x200026d0

08012d08 <__malloc_lock>:
 8012d08:	4801      	ldr	r0, [pc, #4]	@ (8012d10 <__malloc_lock+0x8>)
 8012d0a:	f7ff b8a4 	b.w	8011e56 <__retarget_lock_acquire_recursive>
 8012d0e:	bf00      	nop
 8012d10:	200026c8 	.word	0x200026c8

08012d14 <__malloc_unlock>:
 8012d14:	4801      	ldr	r0, [pc, #4]	@ (8012d1c <__malloc_unlock+0x8>)
 8012d16:	f7ff b89f 	b.w	8011e58 <__retarget_lock_release_recursive>
 8012d1a:	bf00      	nop
 8012d1c:	200026c8 	.word	0x200026c8

08012d20 <_Balloc>:
 8012d20:	b570      	push	{r4, r5, r6, lr}
 8012d22:	69c6      	ldr	r6, [r0, #28]
 8012d24:	4604      	mov	r4, r0
 8012d26:	460d      	mov	r5, r1
 8012d28:	b976      	cbnz	r6, 8012d48 <_Balloc+0x28>
 8012d2a:	2010      	movs	r0, #16
 8012d2c:	f7ff ff42 	bl	8012bb4 <malloc>
 8012d30:	4602      	mov	r2, r0
 8012d32:	61e0      	str	r0, [r4, #28]
 8012d34:	b920      	cbnz	r0, 8012d40 <_Balloc+0x20>
 8012d36:	4b18      	ldr	r3, [pc, #96]	@ (8012d98 <_Balloc+0x78>)
 8012d38:	4818      	ldr	r0, [pc, #96]	@ (8012d9c <_Balloc+0x7c>)
 8012d3a:	216b      	movs	r1, #107	@ 0x6b
 8012d3c:	f002 f8ec 	bl	8014f18 <__assert_func>
 8012d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d44:	6006      	str	r6, [r0, #0]
 8012d46:	60c6      	str	r6, [r0, #12]
 8012d48:	69e6      	ldr	r6, [r4, #28]
 8012d4a:	68f3      	ldr	r3, [r6, #12]
 8012d4c:	b183      	cbz	r3, 8012d70 <_Balloc+0x50>
 8012d4e:	69e3      	ldr	r3, [r4, #28]
 8012d50:	68db      	ldr	r3, [r3, #12]
 8012d52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012d56:	b9b8      	cbnz	r0, 8012d88 <_Balloc+0x68>
 8012d58:	2101      	movs	r1, #1
 8012d5a:	fa01 f605 	lsl.w	r6, r1, r5
 8012d5e:	1d72      	adds	r2, r6, #5
 8012d60:	0092      	lsls	r2, r2, #2
 8012d62:	4620      	mov	r0, r4
 8012d64:	f002 f8f6 	bl	8014f54 <_calloc_r>
 8012d68:	b160      	cbz	r0, 8012d84 <_Balloc+0x64>
 8012d6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012d6e:	e00e      	b.n	8012d8e <_Balloc+0x6e>
 8012d70:	2221      	movs	r2, #33	@ 0x21
 8012d72:	2104      	movs	r1, #4
 8012d74:	4620      	mov	r0, r4
 8012d76:	f002 f8ed 	bl	8014f54 <_calloc_r>
 8012d7a:	69e3      	ldr	r3, [r4, #28]
 8012d7c:	60f0      	str	r0, [r6, #12]
 8012d7e:	68db      	ldr	r3, [r3, #12]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d1e4      	bne.n	8012d4e <_Balloc+0x2e>
 8012d84:	2000      	movs	r0, #0
 8012d86:	bd70      	pop	{r4, r5, r6, pc}
 8012d88:	6802      	ldr	r2, [r0, #0]
 8012d8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d8e:	2300      	movs	r3, #0
 8012d90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d94:	e7f7      	b.n	8012d86 <_Balloc+0x66>
 8012d96:	bf00      	nop
 8012d98:	0801752c 	.word	0x0801752c
 8012d9c:	080175ac 	.word	0x080175ac

08012da0 <_Bfree>:
 8012da0:	b570      	push	{r4, r5, r6, lr}
 8012da2:	69c6      	ldr	r6, [r0, #28]
 8012da4:	4605      	mov	r5, r0
 8012da6:	460c      	mov	r4, r1
 8012da8:	b976      	cbnz	r6, 8012dc8 <_Bfree+0x28>
 8012daa:	2010      	movs	r0, #16
 8012dac:	f7ff ff02 	bl	8012bb4 <malloc>
 8012db0:	4602      	mov	r2, r0
 8012db2:	61e8      	str	r0, [r5, #28]
 8012db4:	b920      	cbnz	r0, 8012dc0 <_Bfree+0x20>
 8012db6:	4b09      	ldr	r3, [pc, #36]	@ (8012ddc <_Bfree+0x3c>)
 8012db8:	4809      	ldr	r0, [pc, #36]	@ (8012de0 <_Bfree+0x40>)
 8012dba:	218f      	movs	r1, #143	@ 0x8f
 8012dbc:	f002 f8ac 	bl	8014f18 <__assert_func>
 8012dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012dc4:	6006      	str	r6, [r0, #0]
 8012dc6:	60c6      	str	r6, [r0, #12]
 8012dc8:	b13c      	cbz	r4, 8012dda <_Bfree+0x3a>
 8012dca:	69eb      	ldr	r3, [r5, #28]
 8012dcc:	6862      	ldr	r2, [r4, #4]
 8012dce:	68db      	ldr	r3, [r3, #12]
 8012dd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012dd4:	6021      	str	r1, [r4, #0]
 8012dd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012dda:	bd70      	pop	{r4, r5, r6, pc}
 8012ddc:	0801752c 	.word	0x0801752c
 8012de0:	080175ac 	.word	0x080175ac

08012de4 <__multadd>:
 8012de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012de8:	690d      	ldr	r5, [r1, #16]
 8012dea:	4607      	mov	r7, r0
 8012dec:	460c      	mov	r4, r1
 8012dee:	461e      	mov	r6, r3
 8012df0:	f101 0c14 	add.w	ip, r1, #20
 8012df4:	2000      	movs	r0, #0
 8012df6:	f8dc 3000 	ldr.w	r3, [ip]
 8012dfa:	b299      	uxth	r1, r3
 8012dfc:	fb02 6101 	mla	r1, r2, r1, r6
 8012e00:	0c1e      	lsrs	r6, r3, #16
 8012e02:	0c0b      	lsrs	r3, r1, #16
 8012e04:	fb02 3306 	mla	r3, r2, r6, r3
 8012e08:	b289      	uxth	r1, r1
 8012e0a:	3001      	adds	r0, #1
 8012e0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012e10:	4285      	cmp	r5, r0
 8012e12:	f84c 1b04 	str.w	r1, [ip], #4
 8012e16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012e1a:	dcec      	bgt.n	8012df6 <__multadd+0x12>
 8012e1c:	b30e      	cbz	r6, 8012e62 <__multadd+0x7e>
 8012e1e:	68a3      	ldr	r3, [r4, #8]
 8012e20:	42ab      	cmp	r3, r5
 8012e22:	dc19      	bgt.n	8012e58 <__multadd+0x74>
 8012e24:	6861      	ldr	r1, [r4, #4]
 8012e26:	4638      	mov	r0, r7
 8012e28:	3101      	adds	r1, #1
 8012e2a:	f7ff ff79 	bl	8012d20 <_Balloc>
 8012e2e:	4680      	mov	r8, r0
 8012e30:	b928      	cbnz	r0, 8012e3e <__multadd+0x5a>
 8012e32:	4602      	mov	r2, r0
 8012e34:	4b0c      	ldr	r3, [pc, #48]	@ (8012e68 <__multadd+0x84>)
 8012e36:	480d      	ldr	r0, [pc, #52]	@ (8012e6c <__multadd+0x88>)
 8012e38:	21ba      	movs	r1, #186	@ 0xba
 8012e3a:	f002 f86d 	bl	8014f18 <__assert_func>
 8012e3e:	6922      	ldr	r2, [r4, #16]
 8012e40:	3202      	adds	r2, #2
 8012e42:	f104 010c 	add.w	r1, r4, #12
 8012e46:	0092      	lsls	r2, r2, #2
 8012e48:	300c      	adds	r0, #12
 8012e4a:	f7ff f806 	bl	8011e5a <memcpy>
 8012e4e:	4621      	mov	r1, r4
 8012e50:	4638      	mov	r0, r7
 8012e52:	f7ff ffa5 	bl	8012da0 <_Bfree>
 8012e56:	4644      	mov	r4, r8
 8012e58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012e5c:	3501      	adds	r5, #1
 8012e5e:	615e      	str	r6, [r3, #20]
 8012e60:	6125      	str	r5, [r4, #16]
 8012e62:	4620      	mov	r0, r4
 8012e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e68:	0801759b 	.word	0x0801759b
 8012e6c:	080175ac 	.word	0x080175ac

08012e70 <__s2b>:
 8012e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e74:	460c      	mov	r4, r1
 8012e76:	4615      	mov	r5, r2
 8012e78:	461f      	mov	r7, r3
 8012e7a:	2209      	movs	r2, #9
 8012e7c:	3308      	adds	r3, #8
 8012e7e:	4606      	mov	r6, r0
 8012e80:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e84:	2100      	movs	r1, #0
 8012e86:	2201      	movs	r2, #1
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	db09      	blt.n	8012ea0 <__s2b+0x30>
 8012e8c:	4630      	mov	r0, r6
 8012e8e:	f7ff ff47 	bl	8012d20 <_Balloc>
 8012e92:	b940      	cbnz	r0, 8012ea6 <__s2b+0x36>
 8012e94:	4602      	mov	r2, r0
 8012e96:	4b19      	ldr	r3, [pc, #100]	@ (8012efc <__s2b+0x8c>)
 8012e98:	4819      	ldr	r0, [pc, #100]	@ (8012f00 <__s2b+0x90>)
 8012e9a:	21d3      	movs	r1, #211	@ 0xd3
 8012e9c:	f002 f83c 	bl	8014f18 <__assert_func>
 8012ea0:	0052      	lsls	r2, r2, #1
 8012ea2:	3101      	adds	r1, #1
 8012ea4:	e7f0      	b.n	8012e88 <__s2b+0x18>
 8012ea6:	9b08      	ldr	r3, [sp, #32]
 8012ea8:	6143      	str	r3, [r0, #20]
 8012eaa:	2d09      	cmp	r5, #9
 8012eac:	f04f 0301 	mov.w	r3, #1
 8012eb0:	6103      	str	r3, [r0, #16]
 8012eb2:	dd16      	ble.n	8012ee2 <__s2b+0x72>
 8012eb4:	f104 0909 	add.w	r9, r4, #9
 8012eb8:	46c8      	mov	r8, r9
 8012eba:	442c      	add	r4, r5
 8012ebc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012ec0:	4601      	mov	r1, r0
 8012ec2:	3b30      	subs	r3, #48	@ 0x30
 8012ec4:	220a      	movs	r2, #10
 8012ec6:	4630      	mov	r0, r6
 8012ec8:	f7ff ff8c 	bl	8012de4 <__multadd>
 8012ecc:	45a0      	cmp	r8, r4
 8012ece:	d1f5      	bne.n	8012ebc <__s2b+0x4c>
 8012ed0:	f1a5 0408 	sub.w	r4, r5, #8
 8012ed4:	444c      	add	r4, r9
 8012ed6:	1b2d      	subs	r5, r5, r4
 8012ed8:	1963      	adds	r3, r4, r5
 8012eda:	42bb      	cmp	r3, r7
 8012edc:	db04      	blt.n	8012ee8 <__s2b+0x78>
 8012ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ee2:	340a      	adds	r4, #10
 8012ee4:	2509      	movs	r5, #9
 8012ee6:	e7f6      	b.n	8012ed6 <__s2b+0x66>
 8012ee8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012eec:	4601      	mov	r1, r0
 8012eee:	3b30      	subs	r3, #48	@ 0x30
 8012ef0:	220a      	movs	r2, #10
 8012ef2:	4630      	mov	r0, r6
 8012ef4:	f7ff ff76 	bl	8012de4 <__multadd>
 8012ef8:	e7ee      	b.n	8012ed8 <__s2b+0x68>
 8012efa:	bf00      	nop
 8012efc:	0801759b 	.word	0x0801759b
 8012f00:	080175ac 	.word	0x080175ac

08012f04 <__hi0bits>:
 8012f04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012f08:	4603      	mov	r3, r0
 8012f0a:	bf36      	itet	cc
 8012f0c:	0403      	lslcc	r3, r0, #16
 8012f0e:	2000      	movcs	r0, #0
 8012f10:	2010      	movcc	r0, #16
 8012f12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012f16:	bf3c      	itt	cc
 8012f18:	021b      	lslcc	r3, r3, #8
 8012f1a:	3008      	addcc	r0, #8
 8012f1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012f20:	bf3c      	itt	cc
 8012f22:	011b      	lslcc	r3, r3, #4
 8012f24:	3004      	addcc	r0, #4
 8012f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012f2a:	bf3c      	itt	cc
 8012f2c:	009b      	lslcc	r3, r3, #2
 8012f2e:	3002      	addcc	r0, #2
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	db05      	blt.n	8012f40 <__hi0bits+0x3c>
 8012f34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012f38:	f100 0001 	add.w	r0, r0, #1
 8012f3c:	bf08      	it	eq
 8012f3e:	2020      	moveq	r0, #32
 8012f40:	4770      	bx	lr

08012f42 <__lo0bits>:
 8012f42:	6803      	ldr	r3, [r0, #0]
 8012f44:	4602      	mov	r2, r0
 8012f46:	f013 0007 	ands.w	r0, r3, #7
 8012f4a:	d00b      	beq.n	8012f64 <__lo0bits+0x22>
 8012f4c:	07d9      	lsls	r1, r3, #31
 8012f4e:	d421      	bmi.n	8012f94 <__lo0bits+0x52>
 8012f50:	0798      	lsls	r0, r3, #30
 8012f52:	bf49      	itett	mi
 8012f54:	085b      	lsrmi	r3, r3, #1
 8012f56:	089b      	lsrpl	r3, r3, #2
 8012f58:	2001      	movmi	r0, #1
 8012f5a:	6013      	strmi	r3, [r2, #0]
 8012f5c:	bf5c      	itt	pl
 8012f5e:	6013      	strpl	r3, [r2, #0]
 8012f60:	2002      	movpl	r0, #2
 8012f62:	4770      	bx	lr
 8012f64:	b299      	uxth	r1, r3
 8012f66:	b909      	cbnz	r1, 8012f6c <__lo0bits+0x2a>
 8012f68:	0c1b      	lsrs	r3, r3, #16
 8012f6a:	2010      	movs	r0, #16
 8012f6c:	b2d9      	uxtb	r1, r3
 8012f6e:	b909      	cbnz	r1, 8012f74 <__lo0bits+0x32>
 8012f70:	3008      	adds	r0, #8
 8012f72:	0a1b      	lsrs	r3, r3, #8
 8012f74:	0719      	lsls	r1, r3, #28
 8012f76:	bf04      	itt	eq
 8012f78:	091b      	lsreq	r3, r3, #4
 8012f7a:	3004      	addeq	r0, #4
 8012f7c:	0799      	lsls	r1, r3, #30
 8012f7e:	bf04      	itt	eq
 8012f80:	089b      	lsreq	r3, r3, #2
 8012f82:	3002      	addeq	r0, #2
 8012f84:	07d9      	lsls	r1, r3, #31
 8012f86:	d403      	bmi.n	8012f90 <__lo0bits+0x4e>
 8012f88:	085b      	lsrs	r3, r3, #1
 8012f8a:	f100 0001 	add.w	r0, r0, #1
 8012f8e:	d003      	beq.n	8012f98 <__lo0bits+0x56>
 8012f90:	6013      	str	r3, [r2, #0]
 8012f92:	4770      	bx	lr
 8012f94:	2000      	movs	r0, #0
 8012f96:	4770      	bx	lr
 8012f98:	2020      	movs	r0, #32
 8012f9a:	4770      	bx	lr

08012f9c <__i2b>:
 8012f9c:	b510      	push	{r4, lr}
 8012f9e:	460c      	mov	r4, r1
 8012fa0:	2101      	movs	r1, #1
 8012fa2:	f7ff febd 	bl	8012d20 <_Balloc>
 8012fa6:	4602      	mov	r2, r0
 8012fa8:	b928      	cbnz	r0, 8012fb6 <__i2b+0x1a>
 8012faa:	4b05      	ldr	r3, [pc, #20]	@ (8012fc0 <__i2b+0x24>)
 8012fac:	4805      	ldr	r0, [pc, #20]	@ (8012fc4 <__i2b+0x28>)
 8012fae:	f240 1145 	movw	r1, #325	@ 0x145
 8012fb2:	f001 ffb1 	bl	8014f18 <__assert_func>
 8012fb6:	2301      	movs	r3, #1
 8012fb8:	6144      	str	r4, [r0, #20]
 8012fba:	6103      	str	r3, [r0, #16]
 8012fbc:	bd10      	pop	{r4, pc}
 8012fbe:	bf00      	nop
 8012fc0:	0801759b 	.word	0x0801759b
 8012fc4:	080175ac 	.word	0x080175ac

08012fc8 <__multiply>:
 8012fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fcc:	4614      	mov	r4, r2
 8012fce:	690a      	ldr	r2, [r1, #16]
 8012fd0:	6923      	ldr	r3, [r4, #16]
 8012fd2:	429a      	cmp	r2, r3
 8012fd4:	bfa8      	it	ge
 8012fd6:	4623      	movge	r3, r4
 8012fd8:	460f      	mov	r7, r1
 8012fda:	bfa4      	itt	ge
 8012fdc:	460c      	movge	r4, r1
 8012fde:	461f      	movge	r7, r3
 8012fe0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012fe4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012fe8:	68a3      	ldr	r3, [r4, #8]
 8012fea:	6861      	ldr	r1, [r4, #4]
 8012fec:	eb0a 0609 	add.w	r6, sl, r9
 8012ff0:	42b3      	cmp	r3, r6
 8012ff2:	b085      	sub	sp, #20
 8012ff4:	bfb8      	it	lt
 8012ff6:	3101      	addlt	r1, #1
 8012ff8:	f7ff fe92 	bl	8012d20 <_Balloc>
 8012ffc:	b930      	cbnz	r0, 801300c <__multiply+0x44>
 8012ffe:	4602      	mov	r2, r0
 8013000:	4b44      	ldr	r3, [pc, #272]	@ (8013114 <__multiply+0x14c>)
 8013002:	4845      	ldr	r0, [pc, #276]	@ (8013118 <__multiply+0x150>)
 8013004:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013008:	f001 ff86 	bl	8014f18 <__assert_func>
 801300c:	f100 0514 	add.w	r5, r0, #20
 8013010:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013014:	462b      	mov	r3, r5
 8013016:	2200      	movs	r2, #0
 8013018:	4543      	cmp	r3, r8
 801301a:	d321      	bcc.n	8013060 <__multiply+0x98>
 801301c:	f107 0114 	add.w	r1, r7, #20
 8013020:	f104 0214 	add.w	r2, r4, #20
 8013024:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013028:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801302c:	9302      	str	r3, [sp, #8]
 801302e:	1b13      	subs	r3, r2, r4
 8013030:	3b15      	subs	r3, #21
 8013032:	f023 0303 	bic.w	r3, r3, #3
 8013036:	3304      	adds	r3, #4
 8013038:	f104 0715 	add.w	r7, r4, #21
 801303c:	42ba      	cmp	r2, r7
 801303e:	bf38      	it	cc
 8013040:	2304      	movcc	r3, #4
 8013042:	9301      	str	r3, [sp, #4]
 8013044:	9b02      	ldr	r3, [sp, #8]
 8013046:	9103      	str	r1, [sp, #12]
 8013048:	428b      	cmp	r3, r1
 801304a:	d80c      	bhi.n	8013066 <__multiply+0x9e>
 801304c:	2e00      	cmp	r6, #0
 801304e:	dd03      	ble.n	8013058 <__multiply+0x90>
 8013050:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013054:	2b00      	cmp	r3, #0
 8013056:	d05b      	beq.n	8013110 <__multiply+0x148>
 8013058:	6106      	str	r6, [r0, #16]
 801305a:	b005      	add	sp, #20
 801305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013060:	f843 2b04 	str.w	r2, [r3], #4
 8013064:	e7d8      	b.n	8013018 <__multiply+0x50>
 8013066:	f8b1 a000 	ldrh.w	sl, [r1]
 801306a:	f1ba 0f00 	cmp.w	sl, #0
 801306e:	d024      	beq.n	80130ba <__multiply+0xf2>
 8013070:	f104 0e14 	add.w	lr, r4, #20
 8013074:	46a9      	mov	r9, r5
 8013076:	f04f 0c00 	mov.w	ip, #0
 801307a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801307e:	f8d9 3000 	ldr.w	r3, [r9]
 8013082:	fa1f fb87 	uxth.w	fp, r7
 8013086:	b29b      	uxth	r3, r3
 8013088:	fb0a 330b 	mla	r3, sl, fp, r3
 801308c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013090:	f8d9 7000 	ldr.w	r7, [r9]
 8013094:	4463      	add	r3, ip
 8013096:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801309a:	fb0a c70b 	mla	r7, sl, fp, ip
 801309e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80130a2:	b29b      	uxth	r3, r3
 80130a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80130a8:	4572      	cmp	r2, lr
 80130aa:	f849 3b04 	str.w	r3, [r9], #4
 80130ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80130b2:	d8e2      	bhi.n	801307a <__multiply+0xb2>
 80130b4:	9b01      	ldr	r3, [sp, #4]
 80130b6:	f845 c003 	str.w	ip, [r5, r3]
 80130ba:	9b03      	ldr	r3, [sp, #12]
 80130bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80130c0:	3104      	adds	r1, #4
 80130c2:	f1b9 0f00 	cmp.w	r9, #0
 80130c6:	d021      	beq.n	801310c <__multiply+0x144>
 80130c8:	682b      	ldr	r3, [r5, #0]
 80130ca:	f104 0c14 	add.w	ip, r4, #20
 80130ce:	46ae      	mov	lr, r5
 80130d0:	f04f 0a00 	mov.w	sl, #0
 80130d4:	f8bc b000 	ldrh.w	fp, [ip]
 80130d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80130dc:	fb09 770b 	mla	r7, r9, fp, r7
 80130e0:	4457      	add	r7, sl
 80130e2:	b29b      	uxth	r3, r3
 80130e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80130e8:	f84e 3b04 	str.w	r3, [lr], #4
 80130ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80130f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80130f4:	f8be 3000 	ldrh.w	r3, [lr]
 80130f8:	fb09 330a 	mla	r3, r9, sl, r3
 80130fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013100:	4562      	cmp	r2, ip
 8013102:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013106:	d8e5      	bhi.n	80130d4 <__multiply+0x10c>
 8013108:	9f01      	ldr	r7, [sp, #4]
 801310a:	51eb      	str	r3, [r5, r7]
 801310c:	3504      	adds	r5, #4
 801310e:	e799      	b.n	8013044 <__multiply+0x7c>
 8013110:	3e01      	subs	r6, #1
 8013112:	e79b      	b.n	801304c <__multiply+0x84>
 8013114:	0801759b 	.word	0x0801759b
 8013118:	080175ac 	.word	0x080175ac

0801311c <__pow5mult>:
 801311c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013120:	4615      	mov	r5, r2
 8013122:	f012 0203 	ands.w	r2, r2, #3
 8013126:	4607      	mov	r7, r0
 8013128:	460e      	mov	r6, r1
 801312a:	d007      	beq.n	801313c <__pow5mult+0x20>
 801312c:	4c25      	ldr	r4, [pc, #148]	@ (80131c4 <__pow5mult+0xa8>)
 801312e:	3a01      	subs	r2, #1
 8013130:	2300      	movs	r3, #0
 8013132:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013136:	f7ff fe55 	bl	8012de4 <__multadd>
 801313a:	4606      	mov	r6, r0
 801313c:	10ad      	asrs	r5, r5, #2
 801313e:	d03d      	beq.n	80131bc <__pow5mult+0xa0>
 8013140:	69fc      	ldr	r4, [r7, #28]
 8013142:	b97c      	cbnz	r4, 8013164 <__pow5mult+0x48>
 8013144:	2010      	movs	r0, #16
 8013146:	f7ff fd35 	bl	8012bb4 <malloc>
 801314a:	4602      	mov	r2, r0
 801314c:	61f8      	str	r0, [r7, #28]
 801314e:	b928      	cbnz	r0, 801315c <__pow5mult+0x40>
 8013150:	4b1d      	ldr	r3, [pc, #116]	@ (80131c8 <__pow5mult+0xac>)
 8013152:	481e      	ldr	r0, [pc, #120]	@ (80131cc <__pow5mult+0xb0>)
 8013154:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013158:	f001 fede 	bl	8014f18 <__assert_func>
 801315c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013160:	6004      	str	r4, [r0, #0]
 8013162:	60c4      	str	r4, [r0, #12]
 8013164:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013168:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801316c:	b94c      	cbnz	r4, 8013182 <__pow5mult+0x66>
 801316e:	f240 2171 	movw	r1, #625	@ 0x271
 8013172:	4638      	mov	r0, r7
 8013174:	f7ff ff12 	bl	8012f9c <__i2b>
 8013178:	2300      	movs	r3, #0
 801317a:	f8c8 0008 	str.w	r0, [r8, #8]
 801317e:	4604      	mov	r4, r0
 8013180:	6003      	str	r3, [r0, #0]
 8013182:	f04f 0900 	mov.w	r9, #0
 8013186:	07eb      	lsls	r3, r5, #31
 8013188:	d50a      	bpl.n	80131a0 <__pow5mult+0x84>
 801318a:	4631      	mov	r1, r6
 801318c:	4622      	mov	r2, r4
 801318e:	4638      	mov	r0, r7
 8013190:	f7ff ff1a 	bl	8012fc8 <__multiply>
 8013194:	4631      	mov	r1, r6
 8013196:	4680      	mov	r8, r0
 8013198:	4638      	mov	r0, r7
 801319a:	f7ff fe01 	bl	8012da0 <_Bfree>
 801319e:	4646      	mov	r6, r8
 80131a0:	106d      	asrs	r5, r5, #1
 80131a2:	d00b      	beq.n	80131bc <__pow5mult+0xa0>
 80131a4:	6820      	ldr	r0, [r4, #0]
 80131a6:	b938      	cbnz	r0, 80131b8 <__pow5mult+0x9c>
 80131a8:	4622      	mov	r2, r4
 80131aa:	4621      	mov	r1, r4
 80131ac:	4638      	mov	r0, r7
 80131ae:	f7ff ff0b 	bl	8012fc8 <__multiply>
 80131b2:	6020      	str	r0, [r4, #0]
 80131b4:	f8c0 9000 	str.w	r9, [r0]
 80131b8:	4604      	mov	r4, r0
 80131ba:	e7e4      	b.n	8013186 <__pow5mult+0x6a>
 80131bc:	4630      	mov	r0, r6
 80131be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131c2:	bf00      	nop
 80131c4:	08017608 	.word	0x08017608
 80131c8:	0801752c 	.word	0x0801752c
 80131cc:	080175ac 	.word	0x080175ac

080131d0 <__lshift>:
 80131d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131d4:	460c      	mov	r4, r1
 80131d6:	6849      	ldr	r1, [r1, #4]
 80131d8:	6923      	ldr	r3, [r4, #16]
 80131da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80131de:	68a3      	ldr	r3, [r4, #8]
 80131e0:	4607      	mov	r7, r0
 80131e2:	4691      	mov	r9, r2
 80131e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80131e8:	f108 0601 	add.w	r6, r8, #1
 80131ec:	42b3      	cmp	r3, r6
 80131ee:	db0b      	blt.n	8013208 <__lshift+0x38>
 80131f0:	4638      	mov	r0, r7
 80131f2:	f7ff fd95 	bl	8012d20 <_Balloc>
 80131f6:	4605      	mov	r5, r0
 80131f8:	b948      	cbnz	r0, 801320e <__lshift+0x3e>
 80131fa:	4602      	mov	r2, r0
 80131fc:	4b28      	ldr	r3, [pc, #160]	@ (80132a0 <__lshift+0xd0>)
 80131fe:	4829      	ldr	r0, [pc, #164]	@ (80132a4 <__lshift+0xd4>)
 8013200:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013204:	f001 fe88 	bl	8014f18 <__assert_func>
 8013208:	3101      	adds	r1, #1
 801320a:	005b      	lsls	r3, r3, #1
 801320c:	e7ee      	b.n	80131ec <__lshift+0x1c>
 801320e:	2300      	movs	r3, #0
 8013210:	f100 0114 	add.w	r1, r0, #20
 8013214:	f100 0210 	add.w	r2, r0, #16
 8013218:	4618      	mov	r0, r3
 801321a:	4553      	cmp	r3, sl
 801321c:	db33      	blt.n	8013286 <__lshift+0xb6>
 801321e:	6920      	ldr	r0, [r4, #16]
 8013220:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013224:	f104 0314 	add.w	r3, r4, #20
 8013228:	f019 091f 	ands.w	r9, r9, #31
 801322c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013230:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013234:	d02b      	beq.n	801328e <__lshift+0xbe>
 8013236:	f1c9 0e20 	rsb	lr, r9, #32
 801323a:	468a      	mov	sl, r1
 801323c:	2200      	movs	r2, #0
 801323e:	6818      	ldr	r0, [r3, #0]
 8013240:	fa00 f009 	lsl.w	r0, r0, r9
 8013244:	4310      	orrs	r0, r2
 8013246:	f84a 0b04 	str.w	r0, [sl], #4
 801324a:	f853 2b04 	ldr.w	r2, [r3], #4
 801324e:	459c      	cmp	ip, r3
 8013250:	fa22 f20e 	lsr.w	r2, r2, lr
 8013254:	d8f3      	bhi.n	801323e <__lshift+0x6e>
 8013256:	ebac 0304 	sub.w	r3, ip, r4
 801325a:	3b15      	subs	r3, #21
 801325c:	f023 0303 	bic.w	r3, r3, #3
 8013260:	3304      	adds	r3, #4
 8013262:	f104 0015 	add.w	r0, r4, #21
 8013266:	4584      	cmp	ip, r0
 8013268:	bf38      	it	cc
 801326a:	2304      	movcc	r3, #4
 801326c:	50ca      	str	r2, [r1, r3]
 801326e:	b10a      	cbz	r2, 8013274 <__lshift+0xa4>
 8013270:	f108 0602 	add.w	r6, r8, #2
 8013274:	3e01      	subs	r6, #1
 8013276:	4638      	mov	r0, r7
 8013278:	612e      	str	r6, [r5, #16]
 801327a:	4621      	mov	r1, r4
 801327c:	f7ff fd90 	bl	8012da0 <_Bfree>
 8013280:	4628      	mov	r0, r5
 8013282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013286:	f842 0f04 	str.w	r0, [r2, #4]!
 801328a:	3301      	adds	r3, #1
 801328c:	e7c5      	b.n	801321a <__lshift+0x4a>
 801328e:	3904      	subs	r1, #4
 8013290:	f853 2b04 	ldr.w	r2, [r3], #4
 8013294:	f841 2f04 	str.w	r2, [r1, #4]!
 8013298:	459c      	cmp	ip, r3
 801329a:	d8f9      	bhi.n	8013290 <__lshift+0xc0>
 801329c:	e7ea      	b.n	8013274 <__lshift+0xa4>
 801329e:	bf00      	nop
 80132a0:	0801759b 	.word	0x0801759b
 80132a4:	080175ac 	.word	0x080175ac

080132a8 <__mcmp>:
 80132a8:	690a      	ldr	r2, [r1, #16]
 80132aa:	4603      	mov	r3, r0
 80132ac:	6900      	ldr	r0, [r0, #16]
 80132ae:	1a80      	subs	r0, r0, r2
 80132b0:	b530      	push	{r4, r5, lr}
 80132b2:	d10e      	bne.n	80132d2 <__mcmp+0x2a>
 80132b4:	3314      	adds	r3, #20
 80132b6:	3114      	adds	r1, #20
 80132b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80132bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80132c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80132c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80132c8:	4295      	cmp	r5, r2
 80132ca:	d003      	beq.n	80132d4 <__mcmp+0x2c>
 80132cc:	d205      	bcs.n	80132da <__mcmp+0x32>
 80132ce:	f04f 30ff 	mov.w	r0, #4294967295
 80132d2:	bd30      	pop	{r4, r5, pc}
 80132d4:	42a3      	cmp	r3, r4
 80132d6:	d3f3      	bcc.n	80132c0 <__mcmp+0x18>
 80132d8:	e7fb      	b.n	80132d2 <__mcmp+0x2a>
 80132da:	2001      	movs	r0, #1
 80132dc:	e7f9      	b.n	80132d2 <__mcmp+0x2a>
	...

080132e0 <__mdiff>:
 80132e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132e4:	4689      	mov	r9, r1
 80132e6:	4606      	mov	r6, r0
 80132e8:	4611      	mov	r1, r2
 80132ea:	4648      	mov	r0, r9
 80132ec:	4614      	mov	r4, r2
 80132ee:	f7ff ffdb 	bl	80132a8 <__mcmp>
 80132f2:	1e05      	subs	r5, r0, #0
 80132f4:	d112      	bne.n	801331c <__mdiff+0x3c>
 80132f6:	4629      	mov	r1, r5
 80132f8:	4630      	mov	r0, r6
 80132fa:	f7ff fd11 	bl	8012d20 <_Balloc>
 80132fe:	4602      	mov	r2, r0
 8013300:	b928      	cbnz	r0, 801330e <__mdiff+0x2e>
 8013302:	4b3f      	ldr	r3, [pc, #252]	@ (8013400 <__mdiff+0x120>)
 8013304:	f240 2137 	movw	r1, #567	@ 0x237
 8013308:	483e      	ldr	r0, [pc, #248]	@ (8013404 <__mdiff+0x124>)
 801330a:	f001 fe05 	bl	8014f18 <__assert_func>
 801330e:	2301      	movs	r3, #1
 8013310:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013314:	4610      	mov	r0, r2
 8013316:	b003      	add	sp, #12
 8013318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801331c:	bfbc      	itt	lt
 801331e:	464b      	movlt	r3, r9
 8013320:	46a1      	movlt	r9, r4
 8013322:	4630      	mov	r0, r6
 8013324:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013328:	bfba      	itte	lt
 801332a:	461c      	movlt	r4, r3
 801332c:	2501      	movlt	r5, #1
 801332e:	2500      	movge	r5, #0
 8013330:	f7ff fcf6 	bl	8012d20 <_Balloc>
 8013334:	4602      	mov	r2, r0
 8013336:	b918      	cbnz	r0, 8013340 <__mdiff+0x60>
 8013338:	4b31      	ldr	r3, [pc, #196]	@ (8013400 <__mdiff+0x120>)
 801333a:	f240 2145 	movw	r1, #581	@ 0x245
 801333e:	e7e3      	b.n	8013308 <__mdiff+0x28>
 8013340:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013344:	6926      	ldr	r6, [r4, #16]
 8013346:	60c5      	str	r5, [r0, #12]
 8013348:	f109 0310 	add.w	r3, r9, #16
 801334c:	f109 0514 	add.w	r5, r9, #20
 8013350:	f104 0e14 	add.w	lr, r4, #20
 8013354:	f100 0b14 	add.w	fp, r0, #20
 8013358:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801335c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013360:	9301      	str	r3, [sp, #4]
 8013362:	46d9      	mov	r9, fp
 8013364:	f04f 0c00 	mov.w	ip, #0
 8013368:	9b01      	ldr	r3, [sp, #4]
 801336a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801336e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013372:	9301      	str	r3, [sp, #4]
 8013374:	fa1f f38a 	uxth.w	r3, sl
 8013378:	4619      	mov	r1, r3
 801337a:	b283      	uxth	r3, r0
 801337c:	1acb      	subs	r3, r1, r3
 801337e:	0c00      	lsrs	r0, r0, #16
 8013380:	4463      	add	r3, ip
 8013382:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013386:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801338a:	b29b      	uxth	r3, r3
 801338c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013390:	4576      	cmp	r6, lr
 8013392:	f849 3b04 	str.w	r3, [r9], #4
 8013396:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801339a:	d8e5      	bhi.n	8013368 <__mdiff+0x88>
 801339c:	1b33      	subs	r3, r6, r4
 801339e:	3b15      	subs	r3, #21
 80133a0:	f023 0303 	bic.w	r3, r3, #3
 80133a4:	3415      	adds	r4, #21
 80133a6:	3304      	adds	r3, #4
 80133a8:	42a6      	cmp	r6, r4
 80133aa:	bf38      	it	cc
 80133ac:	2304      	movcc	r3, #4
 80133ae:	441d      	add	r5, r3
 80133b0:	445b      	add	r3, fp
 80133b2:	461e      	mov	r6, r3
 80133b4:	462c      	mov	r4, r5
 80133b6:	4544      	cmp	r4, r8
 80133b8:	d30e      	bcc.n	80133d8 <__mdiff+0xf8>
 80133ba:	f108 0103 	add.w	r1, r8, #3
 80133be:	1b49      	subs	r1, r1, r5
 80133c0:	f021 0103 	bic.w	r1, r1, #3
 80133c4:	3d03      	subs	r5, #3
 80133c6:	45a8      	cmp	r8, r5
 80133c8:	bf38      	it	cc
 80133ca:	2100      	movcc	r1, #0
 80133cc:	440b      	add	r3, r1
 80133ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80133d2:	b191      	cbz	r1, 80133fa <__mdiff+0x11a>
 80133d4:	6117      	str	r7, [r2, #16]
 80133d6:	e79d      	b.n	8013314 <__mdiff+0x34>
 80133d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80133dc:	46e6      	mov	lr, ip
 80133de:	0c08      	lsrs	r0, r1, #16
 80133e0:	fa1c fc81 	uxtah	ip, ip, r1
 80133e4:	4471      	add	r1, lr
 80133e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80133ea:	b289      	uxth	r1, r1
 80133ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80133f0:	f846 1b04 	str.w	r1, [r6], #4
 80133f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80133f8:	e7dd      	b.n	80133b6 <__mdiff+0xd6>
 80133fa:	3f01      	subs	r7, #1
 80133fc:	e7e7      	b.n	80133ce <__mdiff+0xee>
 80133fe:	bf00      	nop
 8013400:	0801759b 	.word	0x0801759b
 8013404:	080175ac 	.word	0x080175ac

08013408 <__ulp>:
 8013408:	b082      	sub	sp, #8
 801340a:	ed8d 0b00 	vstr	d0, [sp]
 801340e:	9a01      	ldr	r2, [sp, #4]
 8013410:	4b0f      	ldr	r3, [pc, #60]	@ (8013450 <__ulp+0x48>)
 8013412:	4013      	ands	r3, r2
 8013414:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013418:	2b00      	cmp	r3, #0
 801341a:	dc08      	bgt.n	801342e <__ulp+0x26>
 801341c:	425b      	negs	r3, r3
 801341e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8013422:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013426:	da04      	bge.n	8013432 <__ulp+0x2a>
 8013428:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801342c:	4113      	asrs	r3, r2
 801342e:	2200      	movs	r2, #0
 8013430:	e008      	b.n	8013444 <__ulp+0x3c>
 8013432:	f1a2 0314 	sub.w	r3, r2, #20
 8013436:	2b1e      	cmp	r3, #30
 8013438:	bfda      	itte	le
 801343a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801343e:	40da      	lsrle	r2, r3
 8013440:	2201      	movgt	r2, #1
 8013442:	2300      	movs	r3, #0
 8013444:	4619      	mov	r1, r3
 8013446:	4610      	mov	r0, r2
 8013448:	ec41 0b10 	vmov	d0, r0, r1
 801344c:	b002      	add	sp, #8
 801344e:	4770      	bx	lr
 8013450:	7ff00000 	.word	0x7ff00000

08013454 <__b2d>:
 8013454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013458:	6906      	ldr	r6, [r0, #16]
 801345a:	f100 0814 	add.w	r8, r0, #20
 801345e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013462:	1f37      	subs	r7, r6, #4
 8013464:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013468:	4610      	mov	r0, r2
 801346a:	f7ff fd4b 	bl	8012f04 <__hi0bits>
 801346e:	f1c0 0320 	rsb	r3, r0, #32
 8013472:	280a      	cmp	r0, #10
 8013474:	600b      	str	r3, [r1, #0]
 8013476:	491b      	ldr	r1, [pc, #108]	@ (80134e4 <__b2d+0x90>)
 8013478:	dc15      	bgt.n	80134a6 <__b2d+0x52>
 801347a:	f1c0 0c0b 	rsb	ip, r0, #11
 801347e:	fa22 f30c 	lsr.w	r3, r2, ip
 8013482:	45b8      	cmp	r8, r7
 8013484:	ea43 0501 	orr.w	r5, r3, r1
 8013488:	bf34      	ite	cc
 801348a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801348e:	2300      	movcs	r3, #0
 8013490:	3015      	adds	r0, #21
 8013492:	fa02 f000 	lsl.w	r0, r2, r0
 8013496:	fa23 f30c 	lsr.w	r3, r3, ip
 801349a:	4303      	orrs	r3, r0
 801349c:	461c      	mov	r4, r3
 801349e:	ec45 4b10 	vmov	d0, r4, r5
 80134a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134a6:	45b8      	cmp	r8, r7
 80134a8:	bf3a      	itte	cc
 80134aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80134ae:	f1a6 0708 	subcc.w	r7, r6, #8
 80134b2:	2300      	movcs	r3, #0
 80134b4:	380b      	subs	r0, #11
 80134b6:	d012      	beq.n	80134de <__b2d+0x8a>
 80134b8:	f1c0 0120 	rsb	r1, r0, #32
 80134bc:	fa23 f401 	lsr.w	r4, r3, r1
 80134c0:	4082      	lsls	r2, r0
 80134c2:	4322      	orrs	r2, r4
 80134c4:	4547      	cmp	r7, r8
 80134c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80134ca:	bf8c      	ite	hi
 80134cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80134d0:	2200      	movls	r2, #0
 80134d2:	4083      	lsls	r3, r0
 80134d4:	40ca      	lsrs	r2, r1
 80134d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80134da:	4313      	orrs	r3, r2
 80134dc:	e7de      	b.n	801349c <__b2d+0x48>
 80134de:	ea42 0501 	orr.w	r5, r2, r1
 80134e2:	e7db      	b.n	801349c <__b2d+0x48>
 80134e4:	3ff00000 	.word	0x3ff00000

080134e8 <__d2b>:
 80134e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80134ec:	460f      	mov	r7, r1
 80134ee:	2101      	movs	r1, #1
 80134f0:	ec59 8b10 	vmov	r8, r9, d0
 80134f4:	4616      	mov	r6, r2
 80134f6:	f7ff fc13 	bl	8012d20 <_Balloc>
 80134fa:	4604      	mov	r4, r0
 80134fc:	b930      	cbnz	r0, 801350c <__d2b+0x24>
 80134fe:	4602      	mov	r2, r0
 8013500:	4b23      	ldr	r3, [pc, #140]	@ (8013590 <__d2b+0xa8>)
 8013502:	4824      	ldr	r0, [pc, #144]	@ (8013594 <__d2b+0xac>)
 8013504:	f240 310f 	movw	r1, #783	@ 0x30f
 8013508:	f001 fd06 	bl	8014f18 <__assert_func>
 801350c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013510:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013514:	b10d      	cbz	r5, 801351a <__d2b+0x32>
 8013516:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801351a:	9301      	str	r3, [sp, #4]
 801351c:	f1b8 0300 	subs.w	r3, r8, #0
 8013520:	d023      	beq.n	801356a <__d2b+0x82>
 8013522:	4668      	mov	r0, sp
 8013524:	9300      	str	r3, [sp, #0]
 8013526:	f7ff fd0c 	bl	8012f42 <__lo0bits>
 801352a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801352e:	b1d0      	cbz	r0, 8013566 <__d2b+0x7e>
 8013530:	f1c0 0320 	rsb	r3, r0, #32
 8013534:	fa02 f303 	lsl.w	r3, r2, r3
 8013538:	430b      	orrs	r3, r1
 801353a:	40c2      	lsrs	r2, r0
 801353c:	6163      	str	r3, [r4, #20]
 801353e:	9201      	str	r2, [sp, #4]
 8013540:	9b01      	ldr	r3, [sp, #4]
 8013542:	61a3      	str	r3, [r4, #24]
 8013544:	2b00      	cmp	r3, #0
 8013546:	bf0c      	ite	eq
 8013548:	2201      	moveq	r2, #1
 801354a:	2202      	movne	r2, #2
 801354c:	6122      	str	r2, [r4, #16]
 801354e:	b1a5      	cbz	r5, 801357a <__d2b+0x92>
 8013550:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013554:	4405      	add	r5, r0
 8013556:	603d      	str	r5, [r7, #0]
 8013558:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801355c:	6030      	str	r0, [r6, #0]
 801355e:	4620      	mov	r0, r4
 8013560:	b003      	add	sp, #12
 8013562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013566:	6161      	str	r1, [r4, #20]
 8013568:	e7ea      	b.n	8013540 <__d2b+0x58>
 801356a:	a801      	add	r0, sp, #4
 801356c:	f7ff fce9 	bl	8012f42 <__lo0bits>
 8013570:	9b01      	ldr	r3, [sp, #4]
 8013572:	6163      	str	r3, [r4, #20]
 8013574:	3020      	adds	r0, #32
 8013576:	2201      	movs	r2, #1
 8013578:	e7e8      	b.n	801354c <__d2b+0x64>
 801357a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801357e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013582:	6038      	str	r0, [r7, #0]
 8013584:	6918      	ldr	r0, [r3, #16]
 8013586:	f7ff fcbd 	bl	8012f04 <__hi0bits>
 801358a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801358e:	e7e5      	b.n	801355c <__d2b+0x74>
 8013590:	0801759b 	.word	0x0801759b
 8013594:	080175ac 	.word	0x080175ac

08013598 <__ratio>:
 8013598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801359c:	b085      	sub	sp, #20
 801359e:	e9cd 1000 	strd	r1, r0, [sp]
 80135a2:	a902      	add	r1, sp, #8
 80135a4:	f7ff ff56 	bl	8013454 <__b2d>
 80135a8:	9800      	ldr	r0, [sp, #0]
 80135aa:	a903      	add	r1, sp, #12
 80135ac:	ec55 4b10 	vmov	r4, r5, d0
 80135b0:	f7ff ff50 	bl	8013454 <__b2d>
 80135b4:	9b01      	ldr	r3, [sp, #4]
 80135b6:	6919      	ldr	r1, [r3, #16]
 80135b8:	9b00      	ldr	r3, [sp, #0]
 80135ba:	691b      	ldr	r3, [r3, #16]
 80135bc:	1ac9      	subs	r1, r1, r3
 80135be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80135c2:	1a9b      	subs	r3, r3, r2
 80135c4:	ec5b ab10 	vmov	sl, fp, d0
 80135c8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	bfce      	itee	gt
 80135d0:	462a      	movgt	r2, r5
 80135d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80135d6:	465a      	movle	r2, fp
 80135d8:	462f      	mov	r7, r5
 80135da:	46d9      	mov	r9, fp
 80135dc:	bfcc      	ite	gt
 80135de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80135e2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80135e6:	464b      	mov	r3, r9
 80135e8:	4652      	mov	r2, sl
 80135ea:	4620      	mov	r0, r4
 80135ec:	4639      	mov	r1, r7
 80135ee:	f7ed f955 	bl	800089c <__aeabi_ddiv>
 80135f2:	ec41 0b10 	vmov	d0, r0, r1
 80135f6:	b005      	add	sp, #20
 80135f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080135fc <__copybits>:
 80135fc:	3901      	subs	r1, #1
 80135fe:	b570      	push	{r4, r5, r6, lr}
 8013600:	1149      	asrs	r1, r1, #5
 8013602:	6914      	ldr	r4, [r2, #16]
 8013604:	3101      	adds	r1, #1
 8013606:	f102 0314 	add.w	r3, r2, #20
 801360a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801360e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013612:	1f05      	subs	r5, r0, #4
 8013614:	42a3      	cmp	r3, r4
 8013616:	d30c      	bcc.n	8013632 <__copybits+0x36>
 8013618:	1aa3      	subs	r3, r4, r2
 801361a:	3b11      	subs	r3, #17
 801361c:	f023 0303 	bic.w	r3, r3, #3
 8013620:	3211      	adds	r2, #17
 8013622:	42a2      	cmp	r2, r4
 8013624:	bf88      	it	hi
 8013626:	2300      	movhi	r3, #0
 8013628:	4418      	add	r0, r3
 801362a:	2300      	movs	r3, #0
 801362c:	4288      	cmp	r0, r1
 801362e:	d305      	bcc.n	801363c <__copybits+0x40>
 8013630:	bd70      	pop	{r4, r5, r6, pc}
 8013632:	f853 6b04 	ldr.w	r6, [r3], #4
 8013636:	f845 6f04 	str.w	r6, [r5, #4]!
 801363a:	e7eb      	b.n	8013614 <__copybits+0x18>
 801363c:	f840 3b04 	str.w	r3, [r0], #4
 8013640:	e7f4      	b.n	801362c <__copybits+0x30>

08013642 <__any_on>:
 8013642:	f100 0214 	add.w	r2, r0, #20
 8013646:	6900      	ldr	r0, [r0, #16]
 8013648:	114b      	asrs	r3, r1, #5
 801364a:	4298      	cmp	r0, r3
 801364c:	b510      	push	{r4, lr}
 801364e:	db11      	blt.n	8013674 <__any_on+0x32>
 8013650:	dd0a      	ble.n	8013668 <__any_on+0x26>
 8013652:	f011 011f 	ands.w	r1, r1, #31
 8013656:	d007      	beq.n	8013668 <__any_on+0x26>
 8013658:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801365c:	fa24 f001 	lsr.w	r0, r4, r1
 8013660:	fa00 f101 	lsl.w	r1, r0, r1
 8013664:	428c      	cmp	r4, r1
 8013666:	d10b      	bne.n	8013680 <__any_on+0x3e>
 8013668:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801366c:	4293      	cmp	r3, r2
 801366e:	d803      	bhi.n	8013678 <__any_on+0x36>
 8013670:	2000      	movs	r0, #0
 8013672:	bd10      	pop	{r4, pc}
 8013674:	4603      	mov	r3, r0
 8013676:	e7f7      	b.n	8013668 <__any_on+0x26>
 8013678:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801367c:	2900      	cmp	r1, #0
 801367e:	d0f5      	beq.n	801366c <__any_on+0x2a>
 8013680:	2001      	movs	r0, #1
 8013682:	e7f6      	b.n	8013672 <__any_on+0x30>

08013684 <sulp>:
 8013684:	b570      	push	{r4, r5, r6, lr}
 8013686:	4604      	mov	r4, r0
 8013688:	460d      	mov	r5, r1
 801368a:	ec45 4b10 	vmov	d0, r4, r5
 801368e:	4616      	mov	r6, r2
 8013690:	f7ff feba 	bl	8013408 <__ulp>
 8013694:	ec51 0b10 	vmov	r0, r1, d0
 8013698:	b17e      	cbz	r6, 80136ba <sulp+0x36>
 801369a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801369e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	dd09      	ble.n	80136ba <sulp+0x36>
 80136a6:	051b      	lsls	r3, r3, #20
 80136a8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80136ac:	2400      	movs	r4, #0
 80136ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80136b2:	4622      	mov	r2, r4
 80136b4:	462b      	mov	r3, r5
 80136b6:	f7ec ffc7 	bl	8000648 <__aeabi_dmul>
 80136ba:	ec41 0b10 	vmov	d0, r0, r1
 80136be:	bd70      	pop	{r4, r5, r6, pc}

080136c0 <_strtod_l>:
 80136c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136c4:	b09f      	sub	sp, #124	@ 0x7c
 80136c6:	460c      	mov	r4, r1
 80136c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80136ca:	2200      	movs	r2, #0
 80136cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80136ce:	9005      	str	r0, [sp, #20]
 80136d0:	f04f 0a00 	mov.w	sl, #0
 80136d4:	f04f 0b00 	mov.w	fp, #0
 80136d8:	460a      	mov	r2, r1
 80136da:	9219      	str	r2, [sp, #100]	@ 0x64
 80136dc:	7811      	ldrb	r1, [r2, #0]
 80136de:	292b      	cmp	r1, #43	@ 0x2b
 80136e0:	d04a      	beq.n	8013778 <_strtod_l+0xb8>
 80136e2:	d838      	bhi.n	8013756 <_strtod_l+0x96>
 80136e4:	290d      	cmp	r1, #13
 80136e6:	d832      	bhi.n	801374e <_strtod_l+0x8e>
 80136e8:	2908      	cmp	r1, #8
 80136ea:	d832      	bhi.n	8013752 <_strtod_l+0x92>
 80136ec:	2900      	cmp	r1, #0
 80136ee:	d03b      	beq.n	8013768 <_strtod_l+0xa8>
 80136f0:	2200      	movs	r2, #0
 80136f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80136f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80136f6:	782a      	ldrb	r2, [r5, #0]
 80136f8:	2a30      	cmp	r2, #48	@ 0x30
 80136fa:	f040 80b3 	bne.w	8013864 <_strtod_l+0x1a4>
 80136fe:	786a      	ldrb	r2, [r5, #1]
 8013700:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013704:	2a58      	cmp	r2, #88	@ 0x58
 8013706:	d16e      	bne.n	80137e6 <_strtod_l+0x126>
 8013708:	9302      	str	r3, [sp, #8]
 801370a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801370c:	9301      	str	r3, [sp, #4]
 801370e:	ab1a      	add	r3, sp, #104	@ 0x68
 8013710:	9300      	str	r3, [sp, #0]
 8013712:	4a8e      	ldr	r2, [pc, #568]	@ (801394c <_strtod_l+0x28c>)
 8013714:	9805      	ldr	r0, [sp, #20]
 8013716:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013718:	a919      	add	r1, sp, #100	@ 0x64
 801371a:	f001 fc97 	bl	801504c <__gethex>
 801371e:	f010 060f 	ands.w	r6, r0, #15
 8013722:	4604      	mov	r4, r0
 8013724:	d005      	beq.n	8013732 <_strtod_l+0x72>
 8013726:	2e06      	cmp	r6, #6
 8013728:	d128      	bne.n	801377c <_strtod_l+0xbc>
 801372a:	3501      	adds	r5, #1
 801372c:	2300      	movs	r3, #0
 801372e:	9519      	str	r5, [sp, #100]	@ 0x64
 8013730:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013732:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013734:	2b00      	cmp	r3, #0
 8013736:	f040 858e 	bne.w	8014256 <_strtod_l+0xb96>
 801373a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801373c:	b1cb      	cbz	r3, 8013772 <_strtod_l+0xb2>
 801373e:	4652      	mov	r2, sl
 8013740:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8013744:	ec43 2b10 	vmov	d0, r2, r3
 8013748:	b01f      	add	sp, #124	@ 0x7c
 801374a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801374e:	2920      	cmp	r1, #32
 8013750:	d1ce      	bne.n	80136f0 <_strtod_l+0x30>
 8013752:	3201      	adds	r2, #1
 8013754:	e7c1      	b.n	80136da <_strtod_l+0x1a>
 8013756:	292d      	cmp	r1, #45	@ 0x2d
 8013758:	d1ca      	bne.n	80136f0 <_strtod_l+0x30>
 801375a:	2101      	movs	r1, #1
 801375c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801375e:	1c51      	adds	r1, r2, #1
 8013760:	9119      	str	r1, [sp, #100]	@ 0x64
 8013762:	7852      	ldrb	r2, [r2, #1]
 8013764:	2a00      	cmp	r2, #0
 8013766:	d1c5      	bne.n	80136f4 <_strtod_l+0x34>
 8013768:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801376a:	9419      	str	r4, [sp, #100]	@ 0x64
 801376c:	2b00      	cmp	r3, #0
 801376e:	f040 8570 	bne.w	8014252 <_strtod_l+0xb92>
 8013772:	4652      	mov	r2, sl
 8013774:	465b      	mov	r3, fp
 8013776:	e7e5      	b.n	8013744 <_strtod_l+0x84>
 8013778:	2100      	movs	r1, #0
 801377a:	e7ef      	b.n	801375c <_strtod_l+0x9c>
 801377c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801377e:	b13a      	cbz	r2, 8013790 <_strtod_l+0xd0>
 8013780:	2135      	movs	r1, #53	@ 0x35
 8013782:	a81c      	add	r0, sp, #112	@ 0x70
 8013784:	f7ff ff3a 	bl	80135fc <__copybits>
 8013788:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801378a:	9805      	ldr	r0, [sp, #20]
 801378c:	f7ff fb08 	bl	8012da0 <_Bfree>
 8013790:	3e01      	subs	r6, #1
 8013792:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013794:	2e04      	cmp	r6, #4
 8013796:	d806      	bhi.n	80137a6 <_strtod_l+0xe6>
 8013798:	e8df f006 	tbb	[pc, r6]
 801379c:	201d0314 	.word	0x201d0314
 80137a0:	14          	.byte	0x14
 80137a1:	00          	.byte	0x00
 80137a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80137a6:	05e1      	lsls	r1, r4, #23
 80137a8:	bf48      	it	mi
 80137aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80137ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80137b2:	0d1b      	lsrs	r3, r3, #20
 80137b4:	051b      	lsls	r3, r3, #20
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d1bb      	bne.n	8013732 <_strtod_l+0x72>
 80137ba:	f7fe fb21 	bl	8011e00 <__errno>
 80137be:	2322      	movs	r3, #34	@ 0x22
 80137c0:	6003      	str	r3, [r0, #0]
 80137c2:	e7b6      	b.n	8013732 <_strtod_l+0x72>
 80137c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80137c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80137cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80137d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80137d4:	e7e7      	b.n	80137a6 <_strtod_l+0xe6>
 80137d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8013954 <_strtod_l+0x294>
 80137da:	e7e4      	b.n	80137a6 <_strtod_l+0xe6>
 80137dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80137e0:	f04f 3aff 	mov.w	sl, #4294967295
 80137e4:	e7df      	b.n	80137a6 <_strtod_l+0xe6>
 80137e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80137e8:	1c5a      	adds	r2, r3, #1
 80137ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80137ec:	785b      	ldrb	r3, [r3, #1]
 80137ee:	2b30      	cmp	r3, #48	@ 0x30
 80137f0:	d0f9      	beq.n	80137e6 <_strtod_l+0x126>
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d09d      	beq.n	8013732 <_strtod_l+0x72>
 80137f6:	2301      	movs	r3, #1
 80137f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80137fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80137fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80137fe:	2300      	movs	r3, #0
 8013800:	9308      	str	r3, [sp, #32]
 8013802:	930a      	str	r3, [sp, #40]	@ 0x28
 8013804:	461f      	mov	r7, r3
 8013806:	220a      	movs	r2, #10
 8013808:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801380a:	7805      	ldrb	r5, [r0, #0]
 801380c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013810:	b2d9      	uxtb	r1, r3
 8013812:	2909      	cmp	r1, #9
 8013814:	d928      	bls.n	8013868 <_strtod_l+0x1a8>
 8013816:	494e      	ldr	r1, [pc, #312]	@ (8013950 <_strtod_l+0x290>)
 8013818:	2201      	movs	r2, #1
 801381a:	f7fe fa94 	bl	8011d46 <strncmp>
 801381e:	2800      	cmp	r0, #0
 8013820:	d032      	beq.n	8013888 <_strtod_l+0x1c8>
 8013822:	2000      	movs	r0, #0
 8013824:	462a      	mov	r2, r5
 8013826:	4681      	mov	r9, r0
 8013828:	463d      	mov	r5, r7
 801382a:	4603      	mov	r3, r0
 801382c:	2a65      	cmp	r2, #101	@ 0x65
 801382e:	d001      	beq.n	8013834 <_strtod_l+0x174>
 8013830:	2a45      	cmp	r2, #69	@ 0x45
 8013832:	d114      	bne.n	801385e <_strtod_l+0x19e>
 8013834:	b91d      	cbnz	r5, 801383e <_strtod_l+0x17e>
 8013836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013838:	4302      	orrs	r2, r0
 801383a:	d095      	beq.n	8013768 <_strtod_l+0xa8>
 801383c:	2500      	movs	r5, #0
 801383e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013840:	1c62      	adds	r2, r4, #1
 8013842:	9219      	str	r2, [sp, #100]	@ 0x64
 8013844:	7862      	ldrb	r2, [r4, #1]
 8013846:	2a2b      	cmp	r2, #43	@ 0x2b
 8013848:	d077      	beq.n	801393a <_strtod_l+0x27a>
 801384a:	2a2d      	cmp	r2, #45	@ 0x2d
 801384c:	d07b      	beq.n	8013946 <_strtod_l+0x286>
 801384e:	f04f 0c00 	mov.w	ip, #0
 8013852:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013856:	2909      	cmp	r1, #9
 8013858:	f240 8082 	bls.w	8013960 <_strtod_l+0x2a0>
 801385c:	9419      	str	r4, [sp, #100]	@ 0x64
 801385e:	f04f 0800 	mov.w	r8, #0
 8013862:	e0a2      	b.n	80139aa <_strtod_l+0x2ea>
 8013864:	2300      	movs	r3, #0
 8013866:	e7c7      	b.n	80137f8 <_strtod_l+0x138>
 8013868:	2f08      	cmp	r7, #8
 801386a:	bfd5      	itete	le
 801386c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801386e:	9908      	ldrgt	r1, [sp, #32]
 8013870:	fb02 3301 	mlale	r3, r2, r1, r3
 8013874:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013878:	f100 0001 	add.w	r0, r0, #1
 801387c:	bfd4      	ite	le
 801387e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8013880:	9308      	strgt	r3, [sp, #32]
 8013882:	3701      	adds	r7, #1
 8013884:	9019      	str	r0, [sp, #100]	@ 0x64
 8013886:	e7bf      	b.n	8013808 <_strtod_l+0x148>
 8013888:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801388a:	1c5a      	adds	r2, r3, #1
 801388c:	9219      	str	r2, [sp, #100]	@ 0x64
 801388e:	785a      	ldrb	r2, [r3, #1]
 8013890:	b37f      	cbz	r7, 80138f2 <_strtod_l+0x232>
 8013892:	4681      	mov	r9, r0
 8013894:	463d      	mov	r5, r7
 8013896:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801389a:	2b09      	cmp	r3, #9
 801389c:	d912      	bls.n	80138c4 <_strtod_l+0x204>
 801389e:	2301      	movs	r3, #1
 80138a0:	e7c4      	b.n	801382c <_strtod_l+0x16c>
 80138a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80138a4:	1c5a      	adds	r2, r3, #1
 80138a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80138a8:	785a      	ldrb	r2, [r3, #1]
 80138aa:	3001      	adds	r0, #1
 80138ac:	2a30      	cmp	r2, #48	@ 0x30
 80138ae:	d0f8      	beq.n	80138a2 <_strtod_l+0x1e2>
 80138b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80138b4:	2b08      	cmp	r3, #8
 80138b6:	f200 84d3 	bhi.w	8014260 <_strtod_l+0xba0>
 80138ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80138bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80138be:	4681      	mov	r9, r0
 80138c0:	2000      	movs	r0, #0
 80138c2:	4605      	mov	r5, r0
 80138c4:	3a30      	subs	r2, #48	@ 0x30
 80138c6:	f100 0301 	add.w	r3, r0, #1
 80138ca:	d02a      	beq.n	8013922 <_strtod_l+0x262>
 80138cc:	4499      	add	r9, r3
 80138ce:	eb00 0c05 	add.w	ip, r0, r5
 80138d2:	462b      	mov	r3, r5
 80138d4:	210a      	movs	r1, #10
 80138d6:	4563      	cmp	r3, ip
 80138d8:	d10d      	bne.n	80138f6 <_strtod_l+0x236>
 80138da:	1c69      	adds	r1, r5, #1
 80138dc:	4401      	add	r1, r0
 80138de:	4428      	add	r0, r5
 80138e0:	2808      	cmp	r0, #8
 80138e2:	dc16      	bgt.n	8013912 <_strtod_l+0x252>
 80138e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80138e6:	230a      	movs	r3, #10
 80138e8:	fb03 2300 	mla	r3, r3, r0, r2
 80138ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80138ee:	2300      	movs	r3, #0
 80138f0:	e018      	b.n	8013924 <_strtod_l+0x264>
 80138f2:	4638      	mov	r0, r7
 80138f4:	e7da      	b.n	80138ac <_strtod_l+0x1ec>
 80138f6:	2b08      	cmp	r3, #8
 80138f8:	f103 0301 	add.w	r3, r3, #1
 80138fc:	dc03      	bgt.n	8013906 <_strtod_l+0x246>
 80138fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013900:	434e      	muls	r6, r1
 8013902:	960a      	str	r6, [sp, #40]	@ 0x28
 8013904:	e7e7      	b.n	80138d6 <_strtod_l+0x216>
 8013906:	2b10      	cmp	r3, #16
 8013908:	bfde      	ittt	le
 801390a:	9e08      	ldrle	r6, [sp, #32]
 801390c:	434e      	mulle	r6, r1
 801390e:	9608      	strle	r6, [sp, #32]
 8013910:	e7e1      	b.n	80138d6 <_strtod_l+0x216>
 8013912:	280f      	cmp	r0, #15
 8013914:	dceb      	bgt.n	80138ee <_strtod_l+0x22e>
 8013916:	9808      	ldr	r0, [sp, #32]
 8013918:	230a      	movs	r3, #10
 801391a:	fb03 2300 	mla	r3, r3, r0, r2
 801391e:	9308      	str	r3, [sp, #32]
 8013920:	e7e5      	b.n	80138ee <_strtod_l+0x22e>
 8013922:	4629      	mov	r1, r5
 8013924:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013926:	1c50      	adds	r0, r2, #1
 8013928:	9019      	str	r0, [sp, #100]	@ 0x64
 801392a:	7852      	ldrb	r2, [r2, #1]
 801392c:	4618      	mov	r0, r3
 801392e:	460d      	mov	r5, r1
 8013930:	e7b1      	b.n	8013896 <_strtod_l+0x1d6>
 8013932:	f04f 0900 	mov.w	r9, #0
 8013936:	2301      	movs	r3, #1
 8013938:	e77d      	b.n	8013836 <_strtod_l+0x176>
 801393a:	f04f 0c00 	mov.w	ip, #0
 801393e:	1ca2      	adds	r2, r4, #2
 8013940:	9219      	str	r2, [sp, #100]	@ 0x64
 8013942:	78a2      	ldrb	r2, [r4, #2]
 8013944:	e785      	b.n	8013852 <_strtod_l+0x192>
 8013946:	f04f 0c01 	mov.w	ip, #1
 801394a:	e7f8      	b.n	801393e <_strtod_l+0x27e>
 801394c:	08017720 	.word	0x08017720
 8013950:	08017708 	.word	0x08017708
 8013954:	7ff00000 	.word	0x7ff00000
 8013958:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801395a:	1c51      	adds	r1, r2, #1
 801395c:	9119      	str	r1, [sp, #100]	@ 0x64
 801395e:	7852      	ldrb	r2, [r2, #1]
 8013960:	2a30      	cmp	r2, #48	@ 0x30
 8013962:	d0f9      	beq.n	8013958 <_strtod_l+0x298>
 8013964:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013968:	2908      	cmp	r1, #8
 801396a:	f63f af78 	bhi.w	801385e <_strtod_l+0x19e>
 801396e:	3a30      	subs	r2, #48	@ 0x30
 8013970:	920e      	str	r2, [sp, #56]	@ 0x38
 8013972:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013974:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013976:	f04f 080a 	mov.w	r8, #10
 801397a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801397c:	1c56      	adds	r6, r2, #1
 801397e:	9619      	str	r6, [sp, #100]	@ 0x64
 8013980:	7852      	ldrb	r2, [r2, #1]
 8013982:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013986:	f1be 0f09 	cmp.w	lr, #9
 801398a:	d939      	bls.n	8013a00 <_strtod_l+0x340>
 801398c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801398e:	1a76      	subs	r6, r6, r1
 8013990:	2e08      	cmp	r6, #8
 8013992:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013996:	dc03      	bgt.n	80139a0 <_strtod_l+0x2e0>
 8013998:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801399a:	4588      	cmp	r8, r1
 801399c:	bfa8      	it	ge
 801399e:	4688      	movge	r8, r1
 80139a0:	f1bc 0f00 	cmp.w	ip, #0
 80139a4:	d001      	beq.n	80139aa <_strtod_l+0x2ea>
 80139a6:	f1c8 0800 	rsb	r8, r8, #0
 80139aa:	2d00      	cmp	r5, #0
 80139ac:	d14e      	bne.n	8013a4c <_strtod_l+0x38c>
 80139ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80139b0:	4308      	orrs	r0, r1
 80139b2:	f47f aebe 	bne.w	8013732 <_strtod_l+0x72>
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	f47f aed6 	bne.w	8013768 <_strtod_l+0xa8>
 80139bc:	2a69      	cmp	r2, #105	@ 0x69
 80139be:	d028      	beq.n	8013a12 <_strtod_l+0x352>
 80139c0:	dc25      	bgt.n	8013a0e <_strtod_l+0x34e>
 80139c2:	2a49      	cmp	r2, #73	@ 0x49
 80139c4:	d025      	beq.n	8013a12 <_strtod_l+0x352>
 80139c6:	2a4e      	cmp	r2, #78	@ 0x4e
 80139c8:	f47f aece 	bne.w	8013768 <_strtod_l+0xa8>
 80139cc:	499b      	ldr	r1, [pc, #620]	@ (8013c3c <_strtod_l+0x57c>)
 80139ce:	a819      	add	r0, sp, #100	@ 0x64
 80139d0:	f001 fd5e 	bl	8015490 <__match>
 80139d4:	2800      	cmp	r0, #0
 80139d6:	f43f aec7 	beq.w	8013768 <_strtod_l+0xa8>
 80139da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80139dc:	781b      	ldrb	r3, [r3, #0]
 80139de:	2b28      	cmp	r3, #40	@ 0x28
 80139e0:	d12e      	bne.n	8013a40 <_strtod_l+0x380>
 80139e2:	4997      	ldr	r1, [pc, #604]	@ (8013c40 <_strtod_l+0x580>)
 80139e4:	aa1c      	add	r2, sp, #112	@ 0x70
 80139e6:	a819      	add	r0, sp, #100	@ 0x64
 80139e8:	f001 fd66 	bl	80154b8 <__hexnan>
 80139ec:	2805      	cmp	r0, #5
 80139ee:	d127      	bne.n	8013a40 <_strtod_l+0x380>
 80139f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80139f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80139f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80139fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80139fe:	e698      	b.n	8013732 <_strtod_l+0x72>
 8013a00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013a02:	fb08 2101 	mla	r1, r8, r1, r2
 8013a06:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013a0a:	920e      	str	r2, [sp, #56]	@ 0x38
 8013a0c:	e7b5      	b.n	801397a <_strtod_l+0x2ba>
 8013a0e:	2a6e      	cmp	r2, #110	@ 0x6e
 8013a10:	e7da      	b.n	80139c8 <_strtod_l+0x308>
 8013a12:	498c      	ldr	r1, [pc, #560]	@ (8013c44 <_strtod_l+0x584>)
 8013a14:	a819      	add	r0, sp, #100	@ 0x64
 8013a16:	f001 fd3b 	bl	8015490 <__match>
 8013a1a:	2800      	cmp	r0, #0
 8013a1c:	f43f aea4 	beq.w	8013768 <_strtod_l+0xa8>
 8013a20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a22:	4989      	ldr	r1, [pc, #548]	@ (8013c48 <_strtod_l+0x588>)
 8013a24:	3b01      	subs	r3, #1
 8013a26:	a819      	add	r0, sp, #100	@ 0x64
 8013a28:	9319      	str	r3, [sp, #100]	@ 0x64
 8013a2a:	f001 fd31 	bl	8015490 <__match>
 8013a2e:	b910      	cbnz	r0, 8013a36 <_strtod_l+0x376>
 8013a30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a32:	3301      	adds	r3, #1
 8013a34:	9319      	str	r3, [sp, #100]	@ 0x64
 8013a36:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8013c58 <_strtod_l+0x598>
 8013a3a:	f04f 0a00 	mov.w	sl, #0
 8013a3e:	e678      	b.n	8013732 <_strtod_l+0x72>
 8013a40:	4882      	ldr	r0, [pc, #520]	@ (8013c4c <_strtod_l+0x58c>)
 8013a42:	f001 fa61 	bl	8014f08 <nan>
 8013a46:	ec5b ab10 	vmov	sl, fp, d0
 8013a4a:	e672      	b.n	8013732 <_strtod_l+0x72>
 8013a4c:	eba8 0309 	sub.w	r3, r8, r9
 8013a50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013a52:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a54:	2f00      	cmp	r7, #0
 8013a56:	bf08      	it	eq
 8013a58:	462f      	moveq	r7, r5
 8013a5a:	2d10      	cmp	r5, #16
 8013a5c:	462c      	mov	r4, r5
 8013a5e:	bfa8      	it	ge
 8013a60:	2410      	movge	r4, #16
 8013a62:	f7ec fd77 	bl	8000554 <__aeabi_ui2d>
 8013a66:	2d09      	cmp	r5, #9
 8013a68:	4682      	mov	sl, r0
 8013a6a:	468b      	mov	fp, r1
 8013a6c:	dc13      	bgt.n	8013a96 <_strtod_l+0x3d6>
 8013a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	f43f ae5e 	beq.w	8013732 <_strtod_l+0x72>
 8013a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a78:	dd78      	ble.n	8013b6c <_strtod_l+0x4ac>
 8013a7a:	2b16      	cmp	r3, #22
 8013a7c:	dc5f      	bgt.n	8013b3e <_strtod_l+0x47e>
 8013a7e:	4974      	ldr	r1, [pc, #464]	@ (8013c50 <_strtod_l+0x590>)
 8013a80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a88:	4652      	mov	r2, sl
 8013a8a:	465b      	mov	r3, fp
 8013a8c:	f7ec fddc 	bl	8000648 <__aeabi_dmul>
 8013a90:	4682      	mov	sl, r0
 8013a92:	468b      	mov	fp, r1
 8013a94:	e64d      	b.n	8013732 <_strtod_l+0x72>
 8013a96:	4b6e      	ldr	r3, [pc, #440]	@ (8013c50 <_strtod_l+0x590>)
 8013a98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013a9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013aa0:	f7ec fdd2 	bl	8000648 <__aeabi_dmul>
 8013aa4:	4682      	mov	sl, r0
 8013aa6:	9808      	ldr	r0, [sp, #32]
 8013aa8:	468b      	mov	fp, r1
 8013aaa:	f7ec fd53 	bl	8000554 <__aeabi_ui2d>
 8013aae:	4602      	mov	r2, r0
 8013ab0:	460b      	mov	r3, r1
 8013ab2:	4650      	mov	r0, sl
 8013ab4:	4659      	mov	r1, fp
 8013ab6:	f7ec fc11 	bl	80002dc <__adddf3>
 8013aba:	2d0f      	cmp	r5, #15
 8013abc:	4682      	mov	sl, r0
 8013abe:	468b      	mov	fp, r1
 8013ac0:	ddd5      	ble.n	8013a6e <_strtod_l+0x3ae>
 8013ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ac4:	1b2c      	subs	r4, r5, r4
 8013ac6:	441c      	add	r4, r3
 8013ac8:	2c00      	cmp	r4, #0
 8013aca:	f340 8096 	ble.w	8013bfa <_strtod_l+0x53a>
 8013ace:	f014 030f 	ands.w	r3, r4, #15
 8013ad2:	d00a      	beq.n	8013aea <_strtod_l+0x42a>
 8013ad4:	495e      	ldr	r1, [pc, #376]	@ (8013c50 <_strtod_l+0x590>)
 8013ad6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013ada:	4652      	mov	r2, sl
 8013adc:	465b      	mov	r3, fp
 8013ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ae2:	f7ec fdb1 	bl	8000648 <__aeabi_dmul>
 8013ae6:	4682      	mov	sl, r0
 8013ae8:	468b      	mov	fp, r1
 8013aea:	f034 040f 	bics.w	r4, r4, #15
 8013aee:	d073      	beq.n	8013bd8 <_strtod_l+0x518>
 8013af0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013af4:	dd48      	ble.n	8013b88 <_strtod_l+0x4c8>
 8013af6:	2400      	movs	r4, #0
 8013af8:	46a0      	mov	r8, r4
 8013afa:	940a      	str	r4, [sp, #40]	@ 0x28
 8013afc:	46a1      	mov	r9, r4
 8013afe:	9a05      	ldr	r2, [sp, #20]
 8013b00:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013c58 <_strtod_l+0x598>
 8013b04:	2322      	movs	r3, #34	@ 0x22
 8013b06:	6013      	str	r3, [r2, #0]
 8013b08:	f04f 0a00 	mov.w	sl, #0
 8013b0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	f43f ae0f 	beq.w	8013732 <_strtod_l+0x72>
 8013b14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013b16:	9805      	ldr	r0, [sp, #20]
 8013b18:	f7ff f942 	bl	8012da0 <_Bfree>
 8013b1c:	9805      	ldr	r0, [sp, #20]
 8013b1e:	4649      	mov	r1, r9
 8013b20:	f7ff f93e 	bl	8012da0 <_Bfree>
 8013b24:	9805      	ldr	r0, [sp, #20]
 8013b26:	4641      	mov	r1, r8
 8013b28:	f7ff f93a 	bl	8012da0 <_Bfree>
 8013b2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013b2e:	9805      	ldr	r0, [sp, #20]
 8013b30:	f7ff f936 	bl	8012da0 <_Bfree>
 8013b34:	9805      	ldr	r0, [sp, #20]
 8013b36:	4621      	mov	r1, r4
 8013b38:	f7ff f932 	bl	8012da0 <_Bfree>
 8013b3c:	e5f9      	b.n	8013732 <_strtod_l+0x72>
 8013b3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013b40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013b44:	4293      	cmp	r3, r2
 8013b46:	dbbc      	blt.n	8013ac2 <_strtod_l+0x402>
 8013b48:	4c41      	ldr	r4, [pc, #260]	@ (8013c50 <_strtod_l+0x590>)
 8013b4a:	f1c5 050f 	rsb	r5, r5, #15
 8013b4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013b52:	4652      	mov	r2, sl
 8013b54:	465b      	mov	r3, fp
 8013b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b5a:	f7ec fd75 	bl	8000648 <__aeabi_dmul>
 8013b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b60:	1b5d      	subs	r5, r3, r5
 8013b62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013b66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013b6a:	e78f      	b.n	8013a8c <_strtod_l+0x3cc>
 8013b6c:	3316      	adds	r3, #22
 8013b6e:	dba8      	blt.n	8013ac2 <_strtod_l+0x402>
 8013b70:	4b37      	ldr	r3, [pc, #220]	@ (8013c50 <_strtod_l+0x590>)
 8013b72:	eba9 0808 	sub.w	r8, r9, r8
 8013b76:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013b7a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013b7e:	4650      	mov	r0, sl
 8013b80:	4659      	mov	r1, fp
 8013b82:	f7ec fe8b 	bl	800089c <__aeabi_ddiv>
 8013b86:	e783      	b.n	8013a90 <_strtod_l+0x3d0>
 8013b88:	4b32      	ldr	r3, [pc, #200]	@ (8013c54 <_strtod_l+0x594>)
 8013b8a:	9308      	str	r3, [sp, #32]
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	1124      	asrs	r4, r4, #4
 8013b90:	4650      	mov	r0, sl
 8013b92:	4659      	mov	r1, fp
 8013b94:	461e      	mov	r6, r3
 8013b96:	2c01      	cmp	r4, #1
 8013b98:	dc21      	bgt.n	8013bde <_strtod_l+0x51e>
 8013b9a:	b10b      	cbz	r3, 8013ba0 <_strtod_l+0x4e0>
 8013b9c:	4682      	mov	sl, r0
 8013b9e:	468b      	mov	fp, r1
 8013ba0:	492c      	ldr	r1, [pc, #176]	@ (8013c54 <_strtod_l+0x594>)
 8013ba2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013ba6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013baa:	4652      	mov	r2, sl
 8013bac:	465b      	mov	r3, fp
 8013bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bb2:	f7ec fd49 	bl	8000648 <__aeabi_dmul>
 8013bb6:	4b28      	ldr	r3, [pc, #160]	@ (8013c58 <_strtod_l+0x598>)
 8013bb8:	460a      	mov	r2, r1
 8013bba:	400b      	ands	r3, r1
 8013bbc:	4927      	ldr	r1, [pc, #156]	@ (8013c5c <_strtod_l+0x59c>)
 8013bbe:	428b      	cmp	r3, r1
 8013bc0:	4682      	mov	sl, r0
 8013bc2:	d898      	bhi.n	8013af6 <_strtod_l+0x436>
 8013bc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013bc8:	428b      	cmp	r3, r1
 8013bca:	bf86      	itte	hi
 8013bcc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8013c60 <_strtod_l+0x5a0>
 8013bd0:	f04f 3aff 	movhi.w	sl, #4294967295
 8013bd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013bd8:	2300      	movs	r3, #0
 8013bda:	9308      	str	r3, [sp, #32]
 8013bdc:	e07a      	b.n	8013cd4 <_strtod_l+0x614>
 8013bde:	07e2      	lsls	r2, r4, #31
 8013be0:	d505      	bpl.n	8013bee <_strtod_l+0x52e>
 8013be2:	9b08      	ldr	r3, [sp, #32]
 8013be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be8:	f7ec fd2e 	bl	8000648 <__aeabi_dmul>
 8013bec:	2301      	movs	r3, #1
 8013bee:	9a08      	ldr	r2, [sp, #32]
 8013bf0:	3208      	adds	r2, #8
 8013bf2:	3601      	adds	r6, #1
 8013bf4:	1064      	asrs	r4, r4, #1
 8013bf6:	9208      	str	r2, [sp, #32]
 8013bf8:	e7cd      	b.n	8013b96 <_strtod_l+0x4d6>
 8013bfa:	d0ed      	beq.n	8013bd8 <_strtod_l+0x518>
 8013bfc:	4264      	negs	r4, r4
 8013bfe:	f014 020f 	ands.w	r2, r4, #15
 8013c02:	d00a      	beq.n	8013c1a <_strtod_l+0x55a>
 8013c04:	4b12      	ldr	r3, [pc, #72]	@ (8013c50 <_strtod_l+0x590>)
 8013c06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c0a:	4650      	mov	r0, sl
 8013c0c:	4659      	mov	r1, fp
 8013c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c12:	f7ec fe43 	bl	800089c <__aeabi_ddiv>
 8013c16:	4682      	mov	sl, r0
 8013c18:	468b      	mov	fp, r1
 8013c1a:	1124      	asrs	r4, r4, #4
 8013c1c:	d0dc      	beq.n	8013bd8 <_strtod_l+0x518>
 8013c1e:	2c1f      	cmp	r4, #31
 8013c20:	dd20      	ble.n	8013c64 <_strtod_l+0x5a4>
 8013c22:	2400      	movs	r4, #0
 8013c24:	46a0      	mov	r8, r4
 8013c26:	940a      	str	r4, [sp, #40]	@ 0x28
 8013c28:	46a1      	mov	r9, r4
 8013c2a:	9a05      	ldr	r2, [sp, #20]
 8013c2c:	2322      	movs	r3, #34	@ 0x22
 8013c2e:	f04f 0a00 	mov.w	sl, #0
 8013c32:	f04f 0b00 	mov.w	fp, #0
 8013c36:	6013      	str	r3, [r2, #0]
 8013c38:	e768      	b.n	8013b0c <_strtod_l+0x44c>
 8013c3a:	bf00      	nop
 8013c3c:	080174f5 	.word	0x080174f5
 8013c40:	0801770c 	.word	0x0801770c
 8013c44:	080174ed 	.word	0x080174ed
 8013c48:	08017522 	.word	0x08017522
 8013c4c:	080178d0 	.word	0x080178d0
 8013c50:	08017640 	.word	0x08017640
 8013c54:	08017618 	.word	0x08017618
 8013c58:	7ff00000 	.word	0x7ff00000
 8013c5c:	7ca00000 	.word	0x7ca00000
 8013c60:	7fefffff 	.word	0x7fefffff
 8013c64:	f014 0310 	ands.w	r3, r4, #16
 8013c68:	bf18      	it	ne
 8013c6a:	236a      	movne	r3, #106	@ 0x6a
 8013c6c:	4ea9      	ldr	r6, [pc, #676]	@ (8013f14 <_strtod_l+0x854>)
 8013c6e:	9308      	str	r3, [sp, #32]
 8013c70:	4650      	mov	r0, sl
 8013c72:	4659      	mov	r1, fp
 8013c74:	2300      	movs	r3, #0
 8013c76:	07e2      	lsls	r2, r4, #31
 8013c78:	d504      	bpl.n	8013c84 <_strtod_l+0x5c4>
 8013c7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013c7e:	f7ec fce3 	bl	8000648 <__aeabi_dmul>
 8013c82:	2301      	movs	r3, #1
 8013c84:	1064      	asrs	r4, r4, #1
 8013c86:	f106 0608 	add.w	r6, r6, #8
 8013c8a:	d1f4      	bne.n	8013c76 <_strtod_l+0x5b6>
 8013c8c:	b10b      	cbz	r3, 8013c92 <_strtod_l+0x5d2>
 8013c8e:	4682      	mov	sl, r0
 8013c90:	468b      	mov	fp, r1
 8013c92:	9b08      	ldr	r3, [sp, #32]
 8013c94:	b1b3      	cbz	r3, 8013cc4 <_strtod_l+0x604>
 8013c96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013c9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	4659      	mov	r1, fp
 8013ca2:	dd0f      	ble.n	8013cc4 <_strtod_l+0x604>
 8013ca4:	2b1f      	cmp	r3, #31
 8013ca6:	dd55      	ble.n	8013d54 <_strtod_l+0x694>
 8013ca8:	2b34      	cmp	r3, #52	@ 0x34
 8013caa:	bfde      	ittt	le
 8013cac:	f04f 33ff 	movle.w	r3, #4294967295
 8013cb0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013cb4:	4093      	lslle	r3, r2
 8013cb6:	f04f 0a00 	mov.w	sl, #0
 8013cba:	bfcc      	ite	gt
 8013cbc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013cc0:	ea03 0b01 	andle.w	fp, r3, r1
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	4650      	mov	r0, sl
 8013cca:	4659      	mov	r1, fp
 8013ccc:	f7ec ff24 	bl	8000b18 <__aeabi_dcmpeq>
 8013cd0:	2800      	cmp	r0, #0
 8013cd2:	d1a6      	bne.n	8013c22 <_strtod_l+0x562>
 8013cd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013cd6:	9300      	str	r3, [sp, #0]
 8013cd8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013cda:	9805      	ldr	r0, [sp, #20]
 8013cdc:	462b      	mov	r3, r5
 8013cde:	463a      	mov	r2, r7
 8013ce0:	f7ff f8c6 	bl	8012e70 <__s2b>
 8013ce4:	900a      	str	r0, [sp, #40]	@ 0x28
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	f43f af05 	beq.w	8013af6 <_strtod_l+0x436>
 8013cec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013cee:	2a00      	cmp	r2, #0
 8013cf0:	eba9 0308 	sub.w	r3, r9, r8
 8013cf4:	bfa8      	it	ge
 8013cf6:	2300      	movge	r3, #0
 8013cf8:	9312      	str	r3, [sp, #72]	@ 0x48
 8013cfa:	2400      	movs	r4, #0
 8013cfc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013d00:	9316      	str	r3, [sp, #88]	@ 0x58
 8013d02:	46a0      	mov	r8, r4
 8013d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d06:	9805      	ldr	r0, [sp, #20]
 8013d08:	6859      	ldr	r1, [r3, #4]
 8013d0a:	f7ff f809 	bl	8012d20 <_Balloc>
 8013d0e:	4681      	mov	r9, r0
 8013d10:	2800      	cmp	r0, #0
 8013d12:	f43f aef4 	beq.w	8013afe <_strtod_l+0x43e>
 8013d16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d18:	691a      	ldr	r2, [r3, #16]
 8013d1a:	3202      	adds	r2, #2
 8013d1c:	f103 010c 	add.w	r1, r3, #12
 8013d20:	0092      	lsls	r2, r2, #2
 8013d22:	300c      	adds	r0, #12
 8013d24:	f7fe f899 	bl	8011e5a <memcpy>
 8013d28:	ec4b ab10 	vmov	d0, sl, fp
 8013d2c:	9805      	ldr	r0, [sp, #20]
 8013d2e:	aa1c      	add	r2, sp, #112	@ 0x70
 8013d30:	a91b      	add	r1, sp, #108	@ 0x6c
 8013d32:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013d36:	f7ff fbd7 	bl	80134e8 <__d2b>
 8013d3a:	901a      	str	r0, [sp, #104]	@ 0x68
 8013d3c:	2800      	cmp	r0, #0
 8013d3e:	f43f aede 	beq.w	8013afe <_strtod_l+0x43e>
 8013d42:	9805      	ldr	r0, [sp, #20]
 8013d44:	2101      	movs	r1, #1
 8013d46:	f7ff f929 	bl	8012f9c <__i2b>
 8013d4a:	4680      	mov	r8, r0
 8013d4c:	b948      	cbnz	r0, 8013d62 <_strtod_l+0x6a2>
 8013d4e:	f04f 0800 	mov.w	r8, #0
 8013d52:	e6d4      	b.n	8013afe <_strtod_l+0x43e>
 8013d54:	f04f 32ff 	mov.w	r2, #4294967295
 8013d58:	fa02 f303 	lsl.w	r3, r2, r3
 8013d5c:	ea03 0a0a 	and.w	sl, r3, sl
 8013d60:	e7b0      	b.n	8013cc4 <_strtod_l+0x604>
 8013d62:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013d64:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013d66:	2d00      	cmp	r5, #0
 8013d68:	bfab      	itete	ge
 8013d6a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8013d6c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013d6e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013d70:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013d72:	bfac      	ite	ge
 8013d74:	18ef      	addge	r7, r5, r3
 8013d76:	1b5e      	sublt	r6, r3, r5
 8013d78:	9b08      	ldr	r3, [sp, #32]
 8013d7a:	1aed      	subs	r5, r5, r3
 8013d7c:	4415      	add	r5, r2
 8013d7e:	4b66      	ldr	r3, [pc, #408]	@ (8013f18 <_strtod_l+0x858>)
 8013d80:	3d01      	subs	r5, #1
 8013d82:	429d      	cmp	r5, r3
 8013d84:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013d88:	da50      	bge.n	8013e2c <_strtod_l+0x76c>
 8013d8a:	1b5b      	subs	r3, r3, r5
 8013d8c:	2b1f      	cmp	r3, #31
 8013d8e:	eba2 0203 	sub.w	r2, r2, r3
 8013d92:	f04f 0101 	mov.w	r1, #1
 8013d96:	dc3d      	bgt.n	8013e14 <_strtod_l+0x754>
 8013d98:	fa01 f303 	lsl.w	r3, r1, r3
 8013d9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013d9e:	2300      	movs	r3, #0
 8013da0:	9310      	str	r3, [sp, #64]	@ 0x40
 8013da2:	18bd      	adds	r5, r7, r2
 8013da4:	9b08      	ldr	r3, [sp, #32]
 8013da6:	42af      	cmp	r7, r5
 8013da8:	4416      	add	r6, r2
 8013daa:	441e      	add	r6, r3
 8013dac:	463b      	mov	r3, r7
 8013dae:	bfa8      	it	ge
 8013db0:	462b      	movge	r3, r5
 8013db2:	42b3      	cmp	r3, r6
 8013db4:	bfa8      	it	ge
 8013db6:	4633      	movge	r3, r6
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	bfc2      	ittt	gt
 8013dbc:	1aed      	subgt	r5, r5, r3
 8013dbe:	1af6      	subgt	r6, r6, r3
 8013dc0:	1aff      	subgt	r7, r7, r3
 8013dc2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	dd16      	ble.n	8013df6 <_strtod_l+0x736>
 8013dc8:	4641      	mov	r1, r8
 8013dca:	9805      	ldr	r0, [sp, #20]
 8013dcc:	461a      	mov	r2, r3
 8013dce:	f7ff f9a5 	bl	801311c <__pow5mult>
 8013dd2:	4680      	mov	r8, r0
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	d0ba      	beq.n	8013d4e <_strtod_l+0x68e>
 8013dd8:	4601      	mov	r1, r0
 8013dda:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013ddc:	9805      	ldr	r0, [sp, #20]
 8013dde:	f7ff f8f3 	bl	8012fc8 <__multiply>
 8013de2:	900e      	str	r0, [sp, #56]	@ 0x38
 8013de4:	2800      	cmp	r0, #0
 8013de6:	f43f ae8a 	beq.w	8013afe <_strtod_l+0x43e>
 8013dea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013dec:	9805      	ldr	r0, [sp, #20]
 8013dee:	f7fe ffd7 	bl	8012da0 <_Bfree>
 8013df2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013df4:	931a      	str	r3, [sp, #104]	@ 0x68
 8013df6:	2d00      	cmp	r5, #0
 8013df8:	dc1d      	bgt.n	8013e36 <_strtod_l+0x776>
 8013dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	dd23      	ble.n	8013e48 <_strtod_l+0x788>
 8013e00:	4649      	mov	r1, r9
 8013e02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013e04:	9805      	ldr	r0, [sp, #20]
 8013e06:	f7ff f989 	bl	801311c <__pow5mult>
 8013e0a:	4681      	mov	r9, r0
 8013e0c:	b9e0      	cbnz	r0, 8013e48 <_strtod_l+0x788>
 8013e0e:	f04f 0900 	mov.w	r9, #0
 8013e12:	e674      	b.n	8013afe <_strtod_l+0x43e>
 8013e14:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013e18:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8013e1c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013e20:	35e2      	adds	r5, #226	@ 0xe2
 8013e22:	fa01 f305 	lsl.w	r3, r1, r5
 8013e26:	9310      	str	r3, [sp, #64]	@ 0x40
 8013e28:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013e2a:	e7ba      	b.n	8013da2 <_strtod_l+0x6e2>
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8013e30:	2301      	movs	r3, #1
 8013e32:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013e34:	e7b5      	b.n	8013da2 <_strtod_l+0x6e2>
 8013e36:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013e38:	9805      	ldr	r0, [sp, #20]
 8013e3a:	462a      	mov	r2, r5
 8013e3c:	f7ff f9c8 	bl	80131d0 <__lshift>
 8013e40:	901a      	str	r0, [sp, #104]	@ 0x68
 8013e42:	2800      	cmp	r0, #0
 8013e44:	d1d9      	bne.n	8013dfa <_strtod_l+0x73a>
 8013e46:	e65a      	b.n	8013afe <_strtod_l+0x43e>
 8013e48:	2e00      	cmp	r6, #0
 8013e4a:	dd07      	ble.n	8013e5c <_strtod_l+0x79c>
 8013e4c:	4649      	mov	r1, r9
 8013e4e:	9805      	ldr	r0, [sp, #20]
 8013e50:	4632      	mov	r2, r6
 8013e52:	f7ff f9bd 	bl	80131d0 <__lshift>
 8013e56:	4681      	mov	r9, r0
 8013e58:	2800      	cmp	r0, #0
 8013e5a:	d0d8      	beq.n	8013e0e <_strtod_l+0x74e>
 8013e5c:	2f00      	cmp	r7, #0
 8013e5e:	dd08      	ble.n	8013e72 <_strtod_l+0x7b2>
 8013e60:	4641      	mov	r1, r8
 8013e62:	9805      	ldr	r0, [sp, #20]
 8013e64:	463a      	mov	r2, r7
 8013e66:	f7ff f9b3 	bl	80131d0 <__lshift>
 8013e6a:	4680      	mov	r8, r0
 8013e6c:	2800      	cmp	r0, #0
 8013e6e:	f43f ae46 	beq.w	8013afe <_strtod_l+0x43e>
 8013e72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013e74:	9805      	ldr	r0, [sp, #20]
 8013e76:	464a      	mov	r2, r9
 8013e78:	f7ff fa32 	bl	80132e0 <__mdiff>
 8013e7c:	4604      	mov	r4, r0
 8013e7e:	2800      	cmp	r0, #0
 8013e80:	f43f ae3d 	beq.w	8013afe <_strtod_l+0x43e>
 8013e84:	68c3      	ldr	r3, [r0, #12]
 8013e86:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013e88:	2300      	movs	r3, #0
 8013e8a:	60c3      	str	r3, [r0, #12]
 8013e8c:	4641      	mov	r1, r8
 8013e8e:	f7ff fa0b 	bl	80132a8 <__mcmp>
 8013e92:	2800      	cmp	r0, #0
 8013e94:	da46      	bge.n	8013f24 <_strtod_l+0x864>
 8013e96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e98:	ea53 030a 	orrs.w	r3, r3, sl
 8013e9c:	d16c      	bne.n	8013f78 <_strtod_l+0x8b8>
 8013e9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d168      	bne.n	8013f78 <_strtod_l+0x8b8>
 8013ea6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013eaa:	0d1b      	lsrs	r3, r3, #20
 8013eac:	051b      	lsls	r3, r3, #20
 8013eae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013eb2:	d961      	bls.n	8013f78 <_strtod_l+0x8b8>
 8013eb4:	6963      	ldr	r3, [r4, #20]
 8013eb6:	b913      	cbnz	r3, 8013ebe <_strtod_l+0x7fe>
 8013eb8:	6923      	ldr	r3, [r4, #16]
 8013eba:	2b01      	cmp	r3, #1
 8013ebc:	dd5c      	ble.n	8013f78 <_strtod_l+0x8b8>
 8013ebe:	4621      	mov	r1, r4
 8013ec0:	2201      	movs	r2, #1
 8013ec2:	9805      	ldr	r0, [sp, #20]
 8013ec4:	f7ff f984 	bl	80131d0 <__lshift>
 8013ec8:	4641      	mov	r1, r8
 8013eca:	4604      	mov	r4, r0
 8013ecc:	f7ff f9ec 	bl	80132a8 <__mcmp>
 8013ed0:	2800      	cmp	r0, #0
 8013ed2:	dd51      	ble.n	8013f78 <_strtod_l+0x8b8>
 8013ed4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013ed8:	9a08      	ldr	r2, [sp, #32]
 8013eda:	0d1b      	lsrs	r3, r3, #20
 8013edc:	051b      	lsls	r3, r3, #20
 8013ede:	2a00      	cmp	r2, #0
 8013ee0:	d06b      	beq.n	8013fba <_strtod_l+0x8fa>
 8013ee2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013ee6:	d868      	bhi.n	8013fba <_strtod_l+0x8fa>
 8013ee8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013eec:	f67f ae9d 	bls.w	8013c2a <_strtod_l+0x56a>
 8013ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8013f1c <_strtod_l+0x85c>)
 8013ef2:	4650      	mov	r0, sl
 8013ef4:	4659      	mov	r1, fp
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	f7ec fba6 	bl	8000648 <__aeabi_dmul>
 8013efc:	4b08      	ldr	r3, [pc, #32]	@ (8013f20 <_strtod_l+0x860>)
 8013efe:	400b      	ands	r3, r1
 8013f00:	4682      	mov	sl, r0
 8013f02:	468b      	mov	fp, r1
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	f47f ae05 	bne.w	8013b14 <_strtod_l+0x454>
 8013f0a:	9a05      	ldr	r2, [sp, #20]
 8013f0c:	2322      	movs	r3, #34	@ 0x22
 8013f0e:	6013      	str	r3, [r2, #0]
 8013f10:	e600      	b.n	8013b14 <_strtod_l+0x454>
 8013f12:	bf00      	nop
 8013f14:	08017738 	.word	0x08017738
 8013f18:	fffffc02 	.word	0xfffffc02
 8013f1c:	39500000 	.word	0x39500000
 8013f20:	7ff00000 	.word	0x7ff00000
 8013f24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013f28:	d165      	bne.n	8013ff6 <_strtod_l+0x936>
 8013f2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013f2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f30:	b35a      	cbz	r2, 8013f8a <_strtod_l+0x8ca>
 8013f32:	4a9f      	ldr	r2, [pc, #636]	@ (80141b0 <_strtod_l+0xaf0>)
 8013f34:	4293      	cmp	r3, r2
 8013f36:	d12b      	bne.n	8013f90 <_strtod_l+0x8d0>
 8013f38:	9b08      	ldr	r3, [sp, #32]
 8013f3a:	4651      	mov	r1, sl
 8013f3c:	b303      	cbz	r3, 8013f80 <_strtod_l+0x8c0>
 8013f3e:	4b9d      	ldr	r3, [pc, #628]	@ (80141b4 <_strtod_l+0xaf4>)
 8013f40:	465a      	mov	r2, fp
 8013f42:	4013      	ands	r3, r2
 8013f44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013f48:	f04f 32ff 	mov.w	r2, #4294967295
 8013f4c:	d81b      	bhi.n	8013f86 <_strtod_l+0x8c6>
 8013f4e:	0d1b      	lsrs	r3, r3, #20
 8013f50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013f54:	fa02 f303 	lsl.w	r3, r2, r3
 8013f58:	4299      	cmp	r1, r3
 8013f5a:	d119      	bne.n	8013f90 <_strtod_l+0x8d0>
 8013f5c:	4b96      	ldr	r3, [pc, #600]	@ (80141b8 <_strtod_l+0xaf8>)
 8013f5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013f60:	429a      	cmp	r2, r3
 8013f62:	d102      	bne.n	8013f6a <_strtod_l+0x8aa>
 8013f64:	3101      	adds	r1, #1
 8013f66:	f43f adca 	beq.w	8013afe <_strtod_l+0x43e>
 8013f6a:	4b92      	ldr	r3, [pc, #584]	@ (80141b4 <_strtod_l+0xaf4>)
 8013f6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013f6e:	401a      	ands	r2, r3
 8013f70:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8013f74:	f04f 0a00 	mov.w	sl, #0
 8013f78:	9b08      	ldr	r3, [sp, #32]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d1b8      	bne.n	8013ef0 <_strtod_l+0x830>
 8013f7e:	e5c9      	b.n	8013b14 <_strtod_l+0x454>
 8013f80:	f04f 33ff 	mov.w	r3, #4294967295
 8013f84:	e7e8      	b.n	8013f58 <_strtod_l+0x898>
 8013f86:	4613      	mov	r3, r2
 8013f88:	e7e6      	b.n	8013f58 <_strtod_l+0x898>
 8013f8a:	ea53 030a 	orrs.w	r3, r3, sl
 8013f8e:	d0a1      	beq.n	8013ed4 <_strtod_l+0x814>
 8013f90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013f92:	b1db      	cbz	r3, 8013fcc <_strtod_l+0x90c>
 8013f94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013f96:	4213      	tst	r3, r2
 8013f98:	d0ee      	beq.n	8013f78 <_strtod_l+0x8b8>
 8013f9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f9c:	9a08      	ldr	r2, [sp, #32]
 8013f9e:	4650      	mov	r0, sl
 8013fa0:	4659      	mov	r1, fp
 8013fa2:	b1bb      	cbz	r3, 8013fd4 <_strtod_l+0x914>
 8013fa4:	f7ff fb6e 	bl	8013684 <sulp>
 8013fa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013fac:	ec53 2b10 	vmov	r2, r3, d0
 8013fb0:	f7ec f994 	bl	80002dc <__adddf3>
 8013fb4:	4682      	mov	sl, r0
 8013fb6:	468b      	mov	fp, r1
 8013fb8:	e7de      	b.n	8013f78 <_strtod_l+0x8b8>
 8013fba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013fbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013fc2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013fc6:	f04f 3aff 	mov.w	sl, #4294967295
 8013fca:	e7d5      	b.n	8013f78 <_strtod_l+0x8b8>
 8013fcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013fce:	ea13 0f0a 	tst.w	r3, sl
 8013fd2:	e7e1      	b.n	8013f98 <_strtod_l+0x8d8>
 8013fd4:	f7ff fb56 	bl	8013684 <sulp>
 8013fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013fdc:	ec53 2b10 	vmov	r2, r3, d0
 8013fe0:	f7ec f97a 	bl	80002d8 <__aeabi_dsub>
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	4682      	mov	sl, r0
 8013fea:	468b      	mov	fp, r1
 8013fec:	f7ec fd94 	bl	8000b18 <__aeabi_dcmpeq>
 8013ff0:	2800      	cmp	r0, #0
 8013ff2:	d0c1      	beq.n	8013f78 <_strtod_l+0x8b8>
 8013ff4:	e619      	b.n	8013c2a <_strtod_l+0x56a>
 8013ff6:	4641      	mov	r1, r8
 8013ff8:	4620      	mov	r0, r4
 8013ffa:	f7ff facd 	bl	8013598 <__ratio>
 8013ffe:	ec57 6b10 	vmov	r6, r7, d0
 8014002:	2200      	movs	r2, #0
 8014004:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014008:	4630      	mov	r0, r6
 801400a:	4639      	mov	r1, r7
 801400c:	f7ec fd98 	bl	8000b40 <__aeabi_dcmple>
 8014010:	2800      	cmp	r0, #0
 8014012:	d06f      	beq.n	80140f4 <_strtod_l+0xa34>
 8014014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014016:	2b00      	cmp	r3, #0
 8014018:	d17a      	bne.n	8014110 <_strtod_l+0xa50>
 801401a:	f1ba 0f00 	cmp.w	sl, #0
 801401e:	d158      	bne.n	80140d2 <_strtod_l+0xa12>
 8014020:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014022:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014026:	2b00      	cmp	r3, #0
 8014028:	d15a      	bne.n	80140e0 <_strtod_l+0xa20>
 801402a:	4b64      	ldr	r3, [pc, #400]	@ (80141bc <_strtod_l+0xafc>)
 801402c:	2200      	movs	r2, #0
 801402e:	4630      	mov	r0, r6
 8014030:	4639      	mov	r1, r7
 8014032:	f7ec fd7b 	bl	8000b2c <__aeabi_dcmplt>
 8014036:	2800      	cmp	r0, #0
 8014038:	d159      	bne.n	80140ee <_strtod_l+0xa2e>
 801403a:	4630      	mov	r0, r6
 801403c:	4639      	mov	r1, r7
 801403e:	4b60      	ldr	r3, [pc, #384]	@ (80141c0 <_strtod_l+0xb00>)
 8014040:	2200      	movs	r2, #0
 8014042:	f7ec fb01 	bl	8000648 <__aeabi_dmul>
 8014046:	4606      	mov	r6, r0
 8014048:	460f      	mov	r7, r1
 801404a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801404e:	9606      	str	r6, [sp, #24]
 8014050:	9307      	str	r3, [sp, #28]
 8014052:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014056:	4d57      	ldr	r5, [pc, #348]	@ (80141b4 <_strtod_l+0xaf4>)
 8014058:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801405c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801405e:	401d      	ands	r5, r3
 8014060:	4b58      	ldr	r3, [pc, #352]	@ (80141c4 <_strtod_l+0xb04>)
 8014062:	429d      	cmp	r5, r3
 8014064:	f040 80b2 	bne.w	80141cc <_strtod_l+0xb0c>
 8014068:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801406a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801406e:	ec4b ab10 	vmov	d0, sl, fp
 8014072:	f7ff f9c9 	bl	8013408 <__ulp>
 8014076:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801407a:	ec51 0b10 	vmov	r0, r1, d0
 801407e:	f7ec fae3 	bl	8000648 <__aeabi_dmul>
 8014082:	4652      	mov	r2, sl
 8014084:	465b      	mov	r3, fp
 8014086:	f7ec f929 	bl	80002dc <__adddf3>
 801408a:	460b      	mov	r3, r1
 801408c:	4949      	ldr	r1, [pc, #292]	@ (80141b4 <_strtod_l+0xaf4>)
 801408e:	4a4e      	ldr	r2, [pc, #312]	@ (80141c8 <_strtod_l+0xb08>)
 8014090:	4019      	ands	r1, r3
 8014092:	4291      	cmp	r1, r2
 8014094:	4682      	mov	sl, r0
 8014096:	d942      	bls.n	801411e <_strtod_l+0xa5e>
 8014098:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801409a:	4b47      	ldr	r3, [pc, #284]	@ (80141b8 <_strtod_l+0xaf8>)
 801409c:	429a      	cmp	r2, r3
 801409e:	d103      	bne.n	80140a8 <_strtod_l+0x9e8>
 80140a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80140a2:	3301      	adds	r3, #1
 80140a4:	f43f ad2b 	beq.w	8013afe <_strtod_l+0x43e>
 80140a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80141b8 <_strtod_l+0xaf8>
 80140ac:	f04f 3aff 	mov.w	sl, #4294967295
 80140b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80140b2:	9805      	ldr	r0, [sp, #20]
 80140b4:	f7fe fe74 	bl	8012da0 <_Bfree>
 80140b8:	9805      	ldr	r0, [sp, #20]
 80140ba:	4649      	mov	r1, r9
 80140bc:	f7fe fe70 	bl	8012da0 <_Bfree>
 80140c0:	9805      	ldr	r0, [sp, #20]
 80140c2:	4641      	mov	r1, r8
 80140c4:	f7fe fe6c 	bl	8012da0 <_Bfree>
 80140c8:	9805      	ldr	r0, [sp, #20]
 80140ca:	4621      	mov	r1, r4
 80140cc:	f7fe fe68 	bl	8012da0 <_Bfree>
 80140d0:	e618      	b.n	8013d04 <_strtod_l+0x644>
 80140d2:	f1ba 0f01 	cmp.w	sl, #1
 80140d6:	d103      	bne.n	80140e0 <_strtod_l+0xa20>
 80140d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80140da:	2b00      	cmp	r3, #0
 80140dc:	f43f ada5 	beq.w	8013c2a <_strtod_l+0x56a>
 80140e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8014190 <_strtod_l+0xad0>
 80140e4:	4f35      	ldr	r7, [pc, #212]	@ (80141bc <_strtod_l+0xafc>)
 80140e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80140ea:	2600      	movs	r6, #0
 80140ec:	e7b1      	b.n	8014052 <_strtod_l+0x992>
 80140ee:	4f34      	ldr	r7, [pc, #208]	@ (80141c0 <_strtod_l+0xb00>)
 80140f0:	2600      	movs	r6, #0
 80140f2:	e7aa      	b.n	801404a <_strtod_l+0x98a>
 80140f4:	4b32      	ldr	r3, [pc, #200]	@ (80141c0 <_strtod_l+0xb00>)
 80140f6:	4630      	mov	r0, r6
 80140f8:	4639      	mov	r1, r7
 80140fa:	2200      	movs	r2, #0
 80140fc:	f7ec faa4 	bl	8000648 <__aeabi_dmul>
 8014100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014102:	4606      	mov	r6, r0
 8014104:	460f      	mov	r7, r1
 8014106:	2b00      	cmp	r3, #0
 8014108:	d09f      	beq.n	801404a <_strtod_l+0x98a>
 801410a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801410e:	e7a0      	b.n	8014052 <_strtod_l+0x992>
 8014110:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014198 <_strtod_l+0xad8>
 8014114:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014118:	ec57 6b17 	vmov	r6, r7, d7
 801411c:	e799      	b.n	8014052 <_strtod_l+0x992>
 801411e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8014122:	9b08      	ldr	r3, [sp, #32]
 8014124:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8014128:	2b00      	cmp	r3, #0
 801412a:	d1c1      	bne.n	80140b0 <_strtod_l+0x9f0>
 801412c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014130:	0d1b      	lsrs	r3, r3, #20
 8014132:	051b      	lsls	r3, r3, #20
 8014134:	429d      	cmp	r5, r3
 8014136:	d1bb      	bne.n	80140b0 <_strtod_l+0x9f0>
 8014138:	4630      	mov	r0, r6
 801413a:	4639      	mov	r1, r7
 801413c:	f7ec fde4 	bl	8000d08 <__aeabi_d2lz>
 8014140:	f7ec fa54 	bl	80005ec <__aeabi_l2d>
 8014144:	4602      	mov	r2, r0
 8014146:	460b      	mov	r3, r1
 8014148:	4630      	mov	r0, r6
 801414a:	4639      	mov	r1, r7
 801414c:	f7ec f8c4 	bl	80002d8 <__aeabi_dsub>
 8014150:	460b      	mov	r3, r1
 8014152:	4602      	mov	r2, r0
 8014154:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8014158:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801415c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801415e:	ea46 060a 	orr.w	r6, r6, sl
 8014162:	431e      	orrs	r6, r3
 8014164:	d06f      	beq.n	8014246 <_strtod_l+0xb86>
 8014166:	a30e      	add	r3, pc, #56	@ (adr r3, 80141a0 <_strtod_l+0xae0>)
 8014168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801416c:	f7ec fcde 	bl	8000b2c <__aeabi_dcmplt>
 8014170:	2800      	cmp	r0, #0
 8014172:	f47f accf 	bne.w	8013b14 <_strtod_l+0x454>
 8014176:	a30c      	add	r3, pc, #48	@ (adr r3, 80141a8 <_strtod_l+0xae8>)
 8014178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801417c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014180:	f7ec fcf2 	bl	8000b68 <__aeabi_dcmpgt>
 8014184:	2800      	cmp	r0, #0
 8014186:	d093      	beq.n	80140b0 <_strtod_l+0x9f0>
 8014188:	e4c4      	b.n	8013b14 <_strtod_l+0x454>
 801418a:	bf00      	nop
 801418c:	f3af 8000 	nop.w
 8014190:	00000000 	.word	0x00000000
 8014194:	bff00000 	.word	0xbff00000
 8014198:	00000000 	.word	0x00000000
 801419c:	3ff00000 	.word	0x3ff00000
 80141a0:	94a03595 	.word	0x94a03595
 80141a4:	3fdfffff 	.word	0x3fdfffff
 80141a8:	35afe535 	.word	0x35afe535
 80141ac:	3fe00000 	.word	0x3fe00000
 80141b0:	000fffff 	.word	0x000fffff
 80141b4:	7ff00000 	.word	0x7ff00000
 80141b8:	7fefffff 	.word	0x7fefffff
 80141bc:	3ff00000 	.word	0x3ff00000
 80141c0:	3fe00000 	.word	0x3fe00000
 80141c4:	7fe00000 	.word	0x7fe00000
 80141c8:	7c9fffff 	.word	0x7c9fffff
 80141cc:	9b08      	ldr	r3, [sp, #32]
 80141ce:	b323      	cbz	r3, 801421a <_strtod_l+0xb5a>
 80141d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80141d4:	d821      	bhi.n	801421a <_strtod_l+0xb5a>
 80141d6:	a328      	add	r3, pc, #160	@ (adr r3, 8014278 <_strtod_l+0xbb8>)
 80141d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141dc:	4630      	mov	r0, r6
 80141de:	4639      	mov	r1, r7
 80141e0:	f7ec fcae 	bl	8000b40 <__aeabi_dcmple>
 80141e4:	b1a0      	cbz	r0, 8014210 <_strtod_l+0xb50>
 80141e6:	4639      	mov	r1, r7
 80141e8:	4630      	mov	r0, r6
 80141ea:	f7ec fd05 	bl	8000bf8 <__aeabi_d2uiz>
 80141ee:	2801      	cmp	r0, #1
 80141f0:	bf38      	it	cc
 80141f2:	2001      	movcc	r0, #1
 80141f4:	f7ec f9ae 	bl	8000554 <__aeabi_ui2d>
 80141f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141fa:	4606      	mov	r6, r0
 80141fc:	460f      	mov	r7, r1
 80141fe:	b9fb      	cbnz	r3, 8014240 <_strtod_l+0xb80>
 8014200:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014204:	9014      	str	r0, [sp, #80]	@ 0x50
 8014206:	9315      	str	r3, [sp, #84]	@ 0x54
 8014208:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801420c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014210:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014212:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8014216:	1b5b      	subs	r3, r3, r5
 8014218:	9311      	str	r3, [sp, #68]	@ 0x44
 801421a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801421e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8014222:	f7ff f8f1 	bl	8013408 <__ulp>
 8014226:	4650      	mov	r0, sl
 8014228:	ec53 2b10 	vmov	r2, r3, d0
 801422c:	4659      	mov	r1, fp
 801422e:	f7ec fa0b 	bl	8000648 <__aeabi_dmul>
 8014232:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8014236:	f7ec f851 	bl	80002dc <__adddf3>
 801423a:	4682      	mov	sl, r0
 801423c:	468b      	mov	fp, r1
 801423e:	e770      	b.n	8014122 <_strtod_l+0xa62>
 8014240:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8014244:	e7e0      	b.n	8014208 <_strtod_l+0xb48>
 8014246:	a30e      	add	r3, pc, #56	@ (adr r3, 8014280 <_strtod_l+0xbc0>)
 8014248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801424c:	f7ec fc6e 	bl	8000b2c <__aeabi_dcmplt>
 8014250:	e798      	b.n	8014184 <_strtod_l+0xac4>
 8014252:	2300      	movs	r3, #0
 8014254:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014256:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8014258:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801425a:	6013      	str	r3, [r2, #0]
 801425c:	f7ff ba6d 	b.w	801373a <_strtod_l+0x7a>
 8014260:	2a65      	cmp	r2, #101	@ 0x65
 8014262:	f43f ab66 	beq.w	8013932 <_strtod_l+0x272>
 8014266:	2a45      	cmp	r2, #69	@ 0x45
 8014268:	f43f ab63 	beq.w	8013932 <_strtod_l+0x272>
 801426c:	2301      	movs	r3, #1
 801426e:	f7ff bb9e 	b.w	80139ae <_strtod_l+0x2ee>
 8014272:	bf00      	nop
 8014274:	f3af 8000 	nop.w
 8014278:	ffc00000 	.word	0xffc00000
 801427c:	41dfffff 	.word	0x41dfffff
 8014280:	94a03595 	.word	0x94a03595
 8014284:	3fcfffff 	.word	0x3fcfffff

08014288 <_strtod_r>:
 8014288:	4b01      	ldr	r3, [pc, #4]	@ (8014290 <_strtod_r+0x8>)
 801428a:	f7ff ba19 	b.w	80136c0 <_strtod_l>
 801428e:	bf00      	nop
 8014290:	2000021c 	.word	0x2000021c

08014294 <_strtol_l.constprop.0>:
 8014294:	2b24      	cmp	r3, #36	@ 0x24
 8014296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801429a:	4686      	mov	lr, r0
 801429c:	4690      	mov	r8, r2
 801429e:	d801      	bhi.n	80142a4 <_strtol_l.constprop.0+0x10>
 80142a0:	2b01      	cmp	r3, #1
 80142a2:	d106      	bne.n	80142b2 <_strtol_l.constprop.0+0x1e>
 80142a4:	f7fd fdac 	bl	8011e00 <__errno>
 80142a8:	2316      	movs	r3, #22
 80142aa:	6003      	str	r3, [r0, #0]
 80142ac:	2000      	movs	r0, #0
 80142ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142b2:	4834      	ldr	r0, [pc, #208]	@ (8014384 <_strtol_l.constprop.0+0xf0>)
 80142b4:	460d      	mov	r5, r1
 80142b6:	462a      	mov	r2, r5
 80142b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80142bc:	5d06      	ldrb	r6, [r0, r4]
 80142be:	f016 0608 	ands.w	r6, r6, #8
 80142c2:	d1f8      	bne.n	80142b6 <_strtol_l.constprop.0+0x22>
 80142c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80142c6:	d12d      	bne.n	8014324 <_strtol_l.constprop.0+0x90>
 80142c8:	782c      	ldrb	r4, [r5, #0]
 80142ca:	2601      	movs	r6, #1
 80142cc:	1c95      	adds	r5, r2, #2
 80142ce:	f033 0210 	bics.w	r2, r3, #16
 80142d2:	d109      	bne.n	80142e8 <_strtol_l.constprop.0+0x54>
 80142d4:	2c30      	cmp	r4, #48	@ 0x30
 80142d6:	d12a      	bne.n	801432e <_strtol_l.constprop.0+0x9a>
 80142d8:	782a      	ldrb	r2, [r5, #0]
 80142da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80142de:	2a58      	cmp	r2, #88	@ 0x58
 80142e0:	d125      	bne.n	801432e <_strtol_l.constprop.0+0x9a>
 80142e2:	786c      	ldrb	r4, [r5, #1]
 80142e4:	2310      	movs	r3, #16
 80142e6:	3502      	adds	r5, #2
 80142e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80142ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80142f0:	2200      	movs	r2, #0
 80142f2:	fbbc f9f3 	udiv	r9, ip, r3
 80142f6:	4610      	mov	r0, r2
 80142f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80142fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014300:	2f09      	cmp	r7, #9
 8014302:	d81b      	bhi.n	801433c <_strtol_l.constprop.0+0xa8>
 8014304:	463c      	mov	r4, r7
 8014306:	42a3      	cmp	r3, r4
 8014308:	dd27      	ble.n	801435a <_strtol_l.constprop.0+0xc6>
 801430a:	1c57      	adds	r7, r2, #1
 801430c:	d007      	beq.n	801431e <_strtol_l.constprop.0+0x8a>
 801430e:	4581      	cmp	r9, r0
 8014310:	d320      	bcc.n	8014354 <_strtol_l.constprop.0+0xc0>
 8014312:	d101      	bne.n	8014318 <_strtol_l.constprop.0+0x84>
 8014314:	45a2      	cmp	sl, r4
 8014316:	db1d      	blt.n	8014354 <_strtol_l.constprop.0+0xc0>
 8014318:	fb00 4003 	mla	r0, r0, r3, r4
 801431c:	2201      	movs	r2, #1
 801431e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014322:	e7eb      	b.n	80142fc <_strtol_l.constprop.0+0x68>
 8014324:	2c2b      	cmp	r4, #43	@ 0x2b
 8014326:	bf04      	itt	eq
 8014328:	782c      	ldrbeq	r4, [r5, #0]
 801432a:	1c95      	addeq	r5, r2, #2
 801432c:	e7cf      	b.n	80142ce <_strtol_l.constprop.0+0x3a>
 801432e:	2b00      	cmp	r3, #0
 8014330:	d1da      	bne.n	80142e8 <_strtol_l.constprop.0+0x54>
 8014332:	2c30      	cmp	r4, #48	@ 0x30
 8014334:	bf0c      	ite	eq
 8014336:	2308      	moveq	r3, #8
 8014338:	230a      	movne	r3, #10
 801433a:	e7d5      	b.n	80142e8 <_strtol_l.constprop.0+0x54>
 801433c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014340:	2f19      	cmp	r7, #25
 8014342:	d801      	bhi.n	8014348 <_strtol_l.constprop.0+0xb4>
 8014344:	3c37      	subs	r4, #55	@ 0x37
 8014346:	e7de      	b.n	8014306 <_strtol_l.constprop.0+0x72>
 8014348:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801434c:	2f19      	cmp	r7, #25
 801434e:	d804      	bhi.n	801435a <_strtol_l.constprop.0+0xc6>
 8014350:	3c57      	subs	r4, #87	@ 0x57
 8014352:	e7d8      	b.n	8014306 <_strtol_l.constprop.0+0x72>
 8014354:	f04f 32ff 	mov.w	r2, #4294967295
 8014358:	e7e1      	b.n	801431e <_strtol_l.constprop.0+0x8a>
 801435a:	1c53      	adds	r3, r2, #1
 801435c:	d108      	bne.n	8014370 <_strtol_l.constprop.0+0xdc>
 801435e:	2322      	movs	r3, #34	@ 0x22
 8014360:	f8ce 3000 	str.w	r3, [lr]
 8014364:	4660      	mov	r0, ip
 8014366:	f1b8 0f00 	cmp.w	r8, #0
 801436a:	d0a0      	beq.n	80142ae <_strtol_l.constprop.0+0x1a>
 801436c:	1e69      	subs	r1, r5, #1
 801436e:	e006      	b.n	801437e <_strtol_l.constprop.0+0xea>
 8014370:	b106      	cbz	r6, 8014374 <_strtol_l.constprop.0+0xe0>
 8014372:	4240      	negs	r0, r0
 8014374:	f1b8 0f00 	cmp.w	r8, #0
 8014378:	d099      	beq.n	80142ae <_strtol_l.constprop.0+0x1a>
 801437a:	2a00      	cmp	r2, #0
 801437c:	d1f6      	bne.n	801436c <_strtol_l.constprop.0+0xd8>
 801437e:	f8c8 1000 	str.w	r1, [r8]
 8014382:	e794      	b.n	80142ae <_strtol_l.constprop.0+0x1a>
 8014384:	08017761 	.word	0x08017761

08014388 <_strtol_r>:
 8014388:	f7ff bf84 	b.w	8014294 <_strtol_l.constprop.0>

0801438c <__ssputs_r>:
 801438c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014390:	688e      	ldr	r6, [r1, #8]
 8014392:	461f      	mov	r7, r3
 8014394:	42be      	cmp	r6, r7
 8014396:	680b      	ldr	r3, [r1, #0]
 8014398:	4682      	mov	sl, r0
 801439a:	460c      	mov	r4, r1
 801439c:	4690      	mov	r8, r2
 801439e:	d82d      	bhi.n	80143fc <__ssputs_r+0x70>
 80143a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80143a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80143a8:	d026      	beq.n	80143f8 <__ssputs_r+0x6c>
 80143aa:	6965      	ldr	r5, [r4, #20]
 80143ac:	6909      	ldr	r1, [r1, #16]
 80143ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80143b2:	eba3 0901 	sub.w	r9, r3, r1
 80143b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80143ba:	1c7b      	adds	r3, r7, #1
 80143bc:	444b      	add	r3, r9
 80143be:	106d      	asrs	r5, r5, #1
 80143c0:	429d      	cmp	r5, r3
 80143c2:	bf38      	it	cc
 80143c4:	461d      	movcc	r5, r3
 80143c6:	0553      	lsls	r3, r2, #21
 80143c8:	d527      	bpl.n	801441a <__ssputs_r+0x8e>
 80143ca:	4629      	mov	r1, r5
 80143cc:	f7fe fc1c 	bl	8012c08 <_malloc_r>
 80143d0:	4606      	mov	r6, r0
 80143d2:	b360      	cbz	r0, 801442e <__ssputs_r+0xa2>
 80143d4:	6921      	ldr	r1, [r4, #16]
 80143d6:	464a      	mov	r2, r9
 80143d8:	f7fd fd3f 	bl	8011e5a <memcpy>
 80143dc:	89a3      	ldrh	r3, [r4, #12]
 80143de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80143e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80143e6:	81a3      	strh	r3, [r4, #12]
 80143e8:	6126      	str	r6, [r4, #16]
 80143ea:	6165      	str	r5, [r4, #20]
 80143ec:	444e      	add	r6, r9
 80143ee:	eba5 0509 	sub.w	r5, r5, r9
 80143f2:	6026      	str	r6, [r4, #0]
 80143f4:	60a5      	str	r5, [r4, #8]
 80143f6:	463e      	mov	r6, r7
 80143f8:	42be      	cmp	r6, r7
 80143fa:	d900      	bls.n	80143fe <__ssputs_r+0x72>
 80143fc:	463e      	mov	r6, r7
 80143fe:	6820      	ldr	r0, [r4, #0]
 8014400:	4632      	mov	r2, r6
 8014402:	4641      	mov	r1, r8
 8014404:	f000 fd53 	bl	8014eae <memmove>
 8014408:	68a3      	ldr	r3, [r4, #8]
 801440a:	1b9b      	subs	r3, r3, r6
 801440c:	60a3      	str	r3, [r4, #8]
 801440e:	6823      	ldr	r3, [r4, #0]
 8014410:	4433      	add	r3, r6
 8014412:	6023      	str	r3, [r4, #0]
 8014414:	2000      	movs	r0, #0
 8014416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801441a:	462a      	mov	r2, r5
 801441c:	f001 f8f9 	bl	8015612 <_realloc_r>
 8014420:	4606      	mov	r6, r0
 8014422:	2800      	cmp	r0, #0
 8014424:	d1e0      	bne.n	80143e8 <__ssputs_r+0x5c>
 8014426:	6921      	ldr	r1, [r4, #16]
 8014428:	4650      	mov	r0, sl
 801442a:	f7fe fb79 	bl	8012b20 <_free_r>
 801442e:	230c      	movs	r3, #12
 8014430:	f8ca 3000 	str.w	r3, [sl]
 8014434:	89a3      	ldrh	r3, [r4, #12]
 8014436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801443a:	81a3      	strh	r3, [r4, #12]
 801443c:	f04f 30ff 	mov.w	r0, #4294967295
 8014440:	e7e9      	b.n	8014416 <__ssputs_r+0x8a>
	...

08014444 <_svfiprintf_r>:
 8014444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014448:	4698      	mov	r8, r3
 801444a:	898b      	ldrh	r3, [r1, #12]
 801444c:	061b      	lsls	r3, r3, #24
 801444e:	b09d      	sub	sp, #116	@ 0x74
 8014450:	4607      	mov	r7, r0
 8014452:	460d      	mov	r5, r1
 8014454:	4614      	mov	r4, r2
 8014456:	d510      	bpl.n	801447a <_svfiprintf_r+0x36>
 8014458:	690b      	ldr	r3, [r1, #16]
 801445a:	b973      	cbnz	r3, 801447a <_svfiprintf_r+0x36>
 801445c:	2140      	movs	r1, #64	@ 0x40
 801445e:	f7fe fbd3 	bl	8012c08 <_malloc_r>
 8014462:	6028      	str	r0, [r5, #0]
 8014464:	6128      	str	r0, [r5, #16]
 8014466:	b930      	cbnz	r0, 8014476 <_svfiprintf_r+0x32>
 8014468:	230c      	movs	r3, #12
 801446a:	603b      	str	r3, [r7, #0]
 801446c:	f04f 30ff 	mov.w	r0, #4294967295
 8014470:	b01d      	add	sp, #116	@ 0x74
 8014472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014476:	2340      	movs	r3, #64	@ 0x40
 8014478:	616b      	str	r3, [r5, #20]
 801447a:	2300      	movs	r3, #0
 801447c:	9309      	str	r3, [sp, #36]	@ 0x24
 801447e:	2320      	movs	r3, #32
 8014480:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014484:	f8cd 800c 	str.w	r8, [sp, #12]
 8014488:	2330      	movs	r3, #48	@ 0x30
 801448a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014628 <_svfiprintf_r+0x1e4>
 801448e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014492:	f04f 0901 	mov.w	r9, #1
 8014496:	4623      	mov	r3, r4
 8014498:	469a      	mov	sl, r3
 801449a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801449e:	b10a      	cbz	r2, 80144a4 <_svfiprintf_r+0x60>
 80144a0:	2a25      	cmp	r2, #37	@ 0x25
 80144a2:	d1f9      	bne.n	8014498 <_svfiprintf_r+0x54>
 80144a4:	ebba 0b04 	subs.w	fp, sl, r4
 80144a8:	d00b      	beq.n	80144c2 <_svfiprintf_r+0x7e>
 80144aa:	465b      	mov	r3, fp
 80144ac:	4622      	mov	r2, r4
 80144ae:	4629      	mov	r1, r5
 80144b0:	4638      	mov	r0, r7
 80144b2:	f7ff ff6b 	bl	801438c <__ssputs_r>
 80144b6:	3001      	adds	r0, #1
 80144b8:	f000 80a7 	beq.w	801460a <_svfiprintf_r+0x1c6>
 80144bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80144be:	445a      	add	r2, fp
 80144c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80144c2:	f89a 3000 	ldrb.w	r3, [sl]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	f000 809f 	beq.w	801460a <_svfiprintf_r+0x1c6>
 80144cc:	2300      	movs	r3, #0
 80144ce:	f04f 32ff 	mov.w	r2, #4294967295
 80144d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144d6:	f10a 0a01 	add.w	sl, sl, #1
 80144da:	9304      	str	r3, [sp, #16]
 80144dc:	9307      	str	r3, [sp, #28]
 80144de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80144e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80144e4:	4654      	mov	r4, sl
 80144e6:	2205      	movs	r2, #5
 80144e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144ec:	484e      	ldr	r0, [pc, #312]	@ (8014628 <_svfiprintf_r+0x1e4>)
 80144ee:	f7eb fe97 	bl	8000220 <memchr>
 80144f2:	9a04      	ldr	r2, [sp, #16]
 80144f4:	b9d8      	cbnz	r0, 801452e <_svfiprintf_r+0xea>
 80144f6:	06d0      	lsls	r0, r2, #27
 80144f8:	bf44      	itt	mi
 80144fa:	2320      	movmi	r3, #32
 80144fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014500:	0711      	lsls	r1, r2, #28
 8014502:	bf44      	itt	mi
 8014504:	232b      	movmi	r3, #43	@ 0x2b
 8014506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801450a:	f89a 3000 	ldrb.w	r3, [sl]
 801450e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014510:	d015      	beq.n	801453e <_svfiprintf_r+0xfa>
 8014512:	9a07      	ldr	r2, [sp, #28]
 8014514:	4654      	mov	r4, sl
 8014516:	2000      	movs	r0, #0
 8014518:	f04f 0c0a 	mov.w	ip, #10
 801451c:	4621      	mov	r1, r4
 801451e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014522:	3b30      	subs	r3, #48	@ 0x30
 8014524:	2b09      	cmp	r3, #9
 8014526:	d94b      	bls.n	80145c0 <_svfiprintf_r+0x17c>
 8014528:	b1b0      	cbz	r0, 8014558 <_svfiprintf_r+0x114>
 801452a:	9207      	str	r2, [sp, #28]
 801452c:	e014      	b.n	8014558 <_svfiprintf_r+0x114>
 801452e:	eba0 0308 	sub.w	r3, r0, r8
 8014532:	fa09 f303 	lsl.w	r3, r9, r3
 8014536:	4313      	orrs	r3, r2
 8014538:	9304      	str	r3, [sp, #16]
 801453a:	46a2      	mov	sl, r4
 801453c:	e7d2      	b.n	80144e4 <_svfiprintf_r+0xa0>
 801453e:	9b03      	ldr	r3, [sp, #12]
 8014540:	1d19      	adds	r1, r3, #4
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	9103      	str	r1, [sp, #12]
 8014546:	2b00      	cmp	r3, #0
 8014548:	bfbb      	ittet	lt
 801454a:	425b      	neglt	r3, r3
 801454c:	f042 0202 	orrlt.w	r2, r2, #2
 8014550:	9307      	strge	r3, [sp, #28]
 8014552:	9307      	strlt	r3, [sp, #28]
 8014554:	bfb8      	it	lt
 8014556:	9204      	strlt	r2, [sp, #16]
 8014558:	7823      	ldrb	r3, [r4, #0]
 801455a:	2b2e      	cmp	r3, #46	@ 0x2e
 801455c:	d10a      	bne.n	8014574 <_svfiprintf_r+0x130>
 801455e:	7863      	ldrb	r3, [r4, #1]
 8014560:	2b2a      	cmp	r3, #42	@ 0x2a
 8014562:	d132      	bne.n	80145ca <_svfiprintf_r+0x186>
 8014564:	9b03      	ldr	r3, [sp, #12]
 8014566:	1d1a      	adds	r2, r3, #4
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	9203      	str	r2, [sp, #12]
 801456c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014570:	3402      	adds	r4, #2
 8014572:	9305      	str	r3, [sp, #20]
 8014574:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014638 <_svfiprintf_r+0x1f4>
 8014578:	7821      	ldrb	r1, [r4, #0]
 801457a:	2203      	movs	r2, #3
 801457c:	4650      	mov	r0, sl
 801457e:	f7eb fe4f 	bl	8000220 <memchr>
 8014582:	b138      	cbz	r0, 8014594 <_svfiprintf_r+0x150>
 8014584:	9b04      	ldr	r3, [sp, #16]
 8014586:	eba0 000a 	sub.w	r0, r0, sl
 801458a:	2240      	movs	r2, #64	@ 0x40
 801458c:	4082      	lsls	r2, r0
 801458e:	4313      	orrs	r3, r2
 8014590:	3401      	adds	r4, #1
 8014592:	9304      	str	r3, [sp, #16]
 8014594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014598:	4824      	ldr	r0, [pc, #144]	@ (801462c <_svfiprintf_r+0x1e8>)
 801459a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801459e:	2206      	movs	r2, #6
 80145a0:	f7eb fe3e 	bl	8000220 <memchr>
 80145a4:	2800      	cmp	r0, #0
 80145a6:	d036      	beq.n	8014616 <_svfiprintf_r+0x1d2>
 80145a8:	4b21      	ldr	r3, [pc, #132]	@ (8014630 <_svfiprintf_r+0x1ec>)
 80145aa:	bb1b      	cbnz	r3, 80145f4 <_svfiprintf_r+0x1b0>
 80145ac:	9b03      	ldr	r3, [sp, #12]
 80145ae:	3307      	adds	r3, #7
 80145b0:	f023 0307 	bic.w	r3, r3, #7
 80145b4:	3308      	adds	r3, #8
 80145b6:	9303      	str	r3, [sp, #12]
 80145b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145ba:	4433      	add	r3, r6
 80145bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80145be:	e76a      	b.n	8014496 <_svfiprintf_r+0x52>
 80145c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80145c4:	460c      	mov	r4, r1
 80145c6:	2001      	movs	r0, #1
 80145c8:	e7a8      	b.n	801451c <_svfiprintf_r+0xd8>
 80145ca:	2300      	movs	r3, #0
 80145cc:	3401      	adds	r4, #1
 80145ce:	9305      	str	r3, [sp, #20]
 80145d0:	4619      	mov	r1, r3
 80145d2:	f04f 0c0a 	mov.w	ip, #10
 80145d6:	4620      	mov	r0, r4
 80145d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145dc:	3a30      	subs	r2, #48	@ 0x30
 80145de:	2a09      	cmp	r2, #9
 80145e0:	d903      	bls.n	80145ea <_svfiprintf_r+0x1a6>
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d0c6      	beq.n	8014574 <_svfiprintf_r+0x130>
 80145e6:	9105      	str	r1, [sp, #20]
 80145e8:	e7c4      	b.n	8014574 <_svfiprintf_r+0x130>
 80145ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80145ee:	4604      	mov	r4, r0
 80145f0:	2301      	movs	r3, #1
 80145f2:	e7f0      	b.n	80145d6 <_svfiprintf_r+0x192>
 80145f4:	ab03      	add	r3, sp, #12
 80145f6:	9300      	str	r3, [sp, #0]
 80145f8:	462a      	mov	r2, r5
 80145fa:	4b0e      	ldr	r3, [pc, #56]	@ (8014634 <_svfiprintf_r+0x1f0>)
 80145fc:	a904      	add	r1, sp, #16
 80145fe:	4638      	mov	r0, r7
 8014600:	f7fc fc7c 	bl	8010efc <_printf_float>
 8014604:	1c42      	adds	r2, r0, #1
 8014606:	4606      	mov	r6, r0
 8014608:	d1d6      	bne.n	80145b8 <_svfiprintf_r+0x174>
 801460a:	89ab      	ldrh	r3, [r5, #12]
 801460c:	065b      	lsls	r3, r3, #25
 801460e:	f53f af2d 	bmi.w	801446c <_svfiprintf_r+0x28>
 8014612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014614:	e72c      	b.n	8014470 <_svfiprintf_r+0x2c>
 8014616:	ab03      	add	r3, sp, #12
 8014618:	9300      	str	r3, [sp, #0]
 801461a:	462a      	mov	r2, r5
 801461c:	4b05      	ldr	r3, [pc, #20]	@ (8014634 <_svfiprintf_r+0x1f0>)
 801461e:	a904      	add	r1, sp, #16
 8014620:	4638      	mov	r0, r7
 8014622:	f7fc ff03 	bl	801142c <_printf_i>
 8014626:	e7ed      	b.n	8014604 <_svfiprintf_r+0x1c0>
 8014628:	08017861 	.word	0x08017861
 801462c:	0801786b 	.word	0x0801786b
 8014630:	08010efd 	.word	0x08010efd
 8014634:	0801438d 	.word	0x0801438d
 8014638:	08017867 	.word	0x08017867

0801463c <_sungetc_r>:
 801463c:	b538      	push	{r3, r4, r5, lr}
 801463e:	1c4b      	adds	r3, r1, #1
 8014640:	4614      	mov	r4, r2
 8014642:	d103      	bne.n	801464c <_sungetc_r+0x10>
 8014644:	f04f 35ff 	mov.w	r5, #4294967295
 8014648:	4628      	mov	r0, r5
 801464a:	bd38      	pop	{r3, r4, r5, pc}
 801464c:	8993      	ldrh	r3, [r2, #12]
 801464e:	f023 0320 	bic.w	r3, r3, #32
 8014652:	8193      	strh	r3, [r2, #12]
 8014654:	6853      	ldr	r3, [r2, #4]
 8014656:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8014658:	b2cd      	uxtb	r5, r1
 801465a:	b18a      	cbz	r2, 8014680 <_sungetc_r+0x44>
 801465c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801465e:	429a      	cmp	r2, r3
 8014660:	dd08      	ble.n	8014674 <_sungetc_r+0x38>
 8014662:	6823      	ldr	r3, [r4, #0]
 8014664:	1e5a      	subs	r2, r3, #1
 8014666:	6022      	str	r2, [r4, #0]
 8014668:	f803 5c01 	strb.w	r5, [r3, #-1]
 801466c:	6863      	ldr	r3, [r4, #4]
 801466e:	3301      	adds	r3, #1
 8014670:	6063      	str	r3, [r4, #4]
 8014672:	e7e9      	b.n	8014648 <_sungetc_r+0xc>
 8014674:	4621      	mov	r1, r4
 8014676:	f000 fbe0 	bl	8014e3a <__submore>
 801467a:	2800      	cmp	r0, #0
 801467c:	d0f1      	beq.n	8014662 <_sungetc_r+0x26>
 801467e:	e7e1      	b.n	8014644 <_sungetc_r+0x8>
 8014680:	6921      	ldr	r1, [r4, #16]
 8014682:	6822      	ldr	r2, [r4, #0]
 8014684:	b141      	cbz	r1, 8014698 <_sungetc_r+0x5c>
 8014686:	4291      	cmp	r1, r2
 8014688:	d206      	bcs.n	8014698 <_sungetc_r+0x5c>
 801468a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801468e:	42a9      	cmp	r1, r5
 8014690:	d102      	bne.n	8014698 <_sungetc_r+0x5c>
 8014692:	3a01      	subs	r2, #1
 8014694:	6022      	str	r2, [r4, #0]
 8014696:	e7ea      	b.n	801466e <_sungetc_r+0x32>
 8014698:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801469c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80146a2:	2303      	movs	r3, #3
 80146a4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80146a6:	4623      	mov	r3, r4
 80146a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80146ac:	6023      	str	r3, [r4, #0]
 80146ae:	2301      	movs	r3, #1
 80146b0:	e7de      	b.n	8014670 <_sungetc_r+0x34>

080146b2 <__ssrefill_r>:
 80146b2:	b510      	push	{r4, lr}
 80146b4:	460c      	mov	r4, r1
 80146b6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80146b8:	b169      	cbz	r1, 80146d6 <__ssrefill_r+0x24>
 80146ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146be:	4299      	cmp	r1, r3
 80146c0:	d001      	beq.n	80146c6 <__ssrefill_r+0x14>
 80146c2:	f7fe fa2d 	bl	8012b20 <_free_r>
 80146c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80146c8:	6063      	str	r3, [r4, #4]
 80146ca:	2000      	movs	r0, #0
 80146cc:	6360      	str	r0, [r4, #52]	@ 0x34
 80146ce:	b113      	cbz	r3, 80146d6 <__ssrefill_r+0x24>
 80146d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80146d2:	6023      	str	r3, [r4, #0]
 80146d4:	bd10      	pop	{r4, pc}
 80146d6:	6923      	ldr	r3, [r4, #16]
 80146d8:	6023      	str	r3, [r4, #0]
 80146da:	2300      	movs	r3, #0
 80146dc:	6063      	str	r3, [r4, #4]
 80146de:	89a3      	ldrh	r3, [r4, #12]
 80146e0:	f043 0320 	orr.w	r3, r3, #32
 80146e4:	81a3      	strh	r3, [r4, #12]
 80146e6:	f04f 30ff 	mov.w	r0, #4294967295
 80146ea:	e7f3      	b.n	80146d4 <__ssrefill_r+0x22>

080146ec <__ssvfiscanf_r>:
 80146ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146f0:	460c      	mov	r4, r1
 80146f2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80146f6:	2100      	movs	r1, #0
 80146f8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80146fc:	49a5      	ldr	r1, [pc, #660]	@ (8014994 <__ssvfiscanf_r+0x2a8>)
 80146fe:	91a0      	str	r1, [sp, #640]	@ 0x280
 8014700:	f10d 0804 	add.w	r8, sp, #4
 8014704:	49a4      	ldr	r1, [pc, #656]	@ (8014998 <__ssvfiscanf_r+0x2ac>)
 8014706:	4fa5      	ldr	r7, [pc, #660]	@ (801499c <__ssvfiscanf_r+0x2b0>)
 8014708:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801470c:	4606      	mov	r6, r0
 801470e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8014710:	9300      	str	r3, [sp, #0]
 8014712:	7813      	ldrb	r3, [r2, #0]
 8014714:	2b00      	cmp	r3, #0
 8014716:	f000 8158 	beq.w	80149ca <__ssvfiscanf_r+0x2de>
 801471a:	5cf9      	ldrb	r1, [r7, r3]
 801471c:	f011 0108 	ands.w	r1, r1, #8
 8014720:	f102 0501 	add.w	r5, r2, #1
 8014724:	d019      	beq.n	801475a <__ssvfiscanf_r+0x6e>
 8014726:	6863      	ldr	r3, [r4, #4]
 8014728:	2b00      	cmp	r3, #0
 801472a:	dd0f      	ble.n	801474c <__ssvfiscanf_r+0x60>
 801472c:	6823      	ldr	r3, [r4, #0]
 801472e:	781a      	ldrb	r2, [r3, #0]
 8014730:	5cba      	ldrb	r2, [r7, r2]
 8014732:	0712      	lsls	r2, r2, #28
 8014734:	d401      	bmi.n	801473a <__ssvfiscanf_r+0x4e>
 8014736:	462a      	mov	r2, r5
 8014738:	e7eb      	b.n	8014712 <__ssvfiscanf_r+0x26>
 801473a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801473c:	3201      	adds	r2, #1
 801473e:	9245      	str	r2, [sp, #276]	@ 0x114
 8014740:	6862      	ldr	r2, [r4, #4]
 8014742:	3301      	adds	r3, #1
 8014744:	3a01      	subs	r2, #1
 8014746:	6062      	str	r2, [r4, #4]
 8014748:	6023      	str	r3, [r4, #0]
 801474a:	e7ec      	b.n	8014726 <__ssvfiscanf_r+0x3a>
 801474c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801474e:	4621      	mov	r1, r4
 8014750:	4630      	mov	r0, r6
 8014752:	4798      	blx	r3
 8014754:	2800      	cmp	r0, #0
 8014756:	d0e9      	beq.n	801472c <__ssvfiscanf_r+0x40>
 8014758:	e7ed      	b.n	8014736 <__ssvfiscanf_r+0x4a>
 801475a:	2b25      	cmp	r3, #37	@ 0x25
 801475c:	d012      	beq.n	8014784 <__ssvfiscanf_r+0x98>
 801475e:	4699      	mov	r9, r3
 8014760:	6863      	ldr	r3, [r4, #4]
 8014762:	2b00      	cmp	r3, #0
 8014764:	f340 8093 	ble.w	801488e <__ssvfiscanf_r+0x1a2>
 8014768:	6822      	ldr	r2, [r4, #0]
 801476a:	7813      	ldrb	r3, [r2, #0]
 801476c:	454b      	cmp	r3, r9
 801476e:	f040 812c 	bne.w	80149ca <__ssvfiscanf_r+0x2de>
 8014772:	6863      	ldr	r3, [r4, #4]
 8014774:	3b01      	subs	r3, #1
 8014776:	6063      	str	r3, [r4, #4]
 8014778:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801477a:	3201      	adds	r2, #1
 801477c:	3301      	adds	r3, #1
 801477e:	6022      	str	r2, [r4, #0]
 8014780:	9345      	str	r3, [sp, #276]	@ 0x114
 8014782:	e7d8      	b.n	8014736 <__ssvfiscanf_r+0x4a>
 8014784:	9141      	str	r1, [sp, #260]	@ 0x104
 8014786:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014788:	7853      	ldrb	r3, [r2, #1]
 801478a:	2b2a      	cmp	r3, #42	@ 0x2a
 801478c:	bf02      	ittt	eq
 801478e:	2310      	moveq	r3, #16
 8014790:	1c95      	addeq	r5, r2, #2
 8014792:	9341      	streq	r3, [sp, #260]	@ 0x104
 8014794:	220a      	movs	r2, #10
 8014796:	46a9      	mov	r9, r5
 8014798:	f819 1b01 	ldrb.w	r1, [r9], #1
 801479c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80147a0:	2b09      	cmp	r3, #9
 80147a2:	d91e      	bls.n	80147e2 <__ssvfiscanf_r+0xf6>
 80147a4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80149a0 <__ssvfiscanf_r+0x2b4>
 80147a8:	2203      	movs	r2, #3
 80147aa:	4650      	mov	r0, sl
 80147ac:	f7eb fd38 	bl	8000220 <memchr>
 80147b0:	b138      	cbz	r0, 80147c2 <__ssvfiscanf_r+0xd6>
 80147b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80147b4:	eba0 000a 	sub.w	r0, r0, sl
 80147b8:	2301      	movs	r3, #1
 80147ba:	4083      	lsls	r3, r0
 80147bc:	4313      	orrs	r3, r2
 80147be:	9341      	str	r3, [sp, #260]	@ 0x104
 80147c0:	464d      	mov	r5, r9
 80147c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80147c6:	2b78      	cmp	r3, #120	@ 0x78
 80147c8:	d806      	bhi.n	80147d8 <__ssvfiscanf_r+0xec>
 80147ca:	2b57      	cmp	r3, #87	@ 0x57
 80147cc:	d810      	bhi.n	80147f0 <__ssvfiscanf_r+0x104>
 80147ce:	2b25      	cmp	r3, #37	@ 0x25
 80147d0:	d0c5      	beq.n	801475e <__ssvfiscanf_r+0x72>
 80147d2:	d857      	bhi.n	8014884 <__ssvfiscanf_r+0x198>
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d065      	beq.n	80148a4 <__ssvfiscanf_r+0x1b8>
 80147d8:	2303      	movs	r3, #3
 80147da:	9347      	str	r3, [sp, #284]	@ 0x11c
 80147dc:	230a      	movs	r3, #10
 80147de:	9342      	str	r3, [sp, #264]	@ 0x108
 80147e0:	e078      	b.n	80148d4 <__ssvfiscanf_r+0x1e8>
 80147e2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80147e4:	fb02 1103 	mla	r1, r2, r3, r1
 80147e8:	3930      	subs	r1, #48	@ 0x30
 80147ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 80147ec:	464d      	mov	r5, r9
 80147ee:	e7d2      	b.n	8014796 <__ssvfiscanf_r+0xaa>
 80147f0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80147f4:	2a20      	cmp	r2, #32
 80147f6:	d8ef      	bhi.n	80147d8 <__ssvfiscanf_r+0xec>
 80147f8:	a101      	add	r1, pc, #4	@ (adr r1, 8014800 <__ssvfiscanf_r+0x114>)
 80147fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80147fe:	bf00      	nop
 8014800:	080148b3 	.word	0x080148b3
 8014804:	080147d9 	.word	0x080147d9
 8014808:	080147d9 	.word	0x080147d9
 801480c:	0801490d 	.word	0x0801490d
 8014810:	080147d9 	.word	0x080147d9
 8014814:	080147d9 	.word	0x080147d9
 8014818:	080147d9 	.word	0x080147d9
 801481c:	080147d9 	.word	0x080147d9
 8014820:	080147d9 	.word	0x080147d9
 8014824:	080147d9 	.word	0x080147d9
 8014828:	080147d9 	.word	0x080147d9
 801482c:	08014923 	.word	0x08014923
 8014830:	08014909 	.word	0x08014909
 8014834:	0801488b 	.word	0x0801488b
 8014838:	0801488b 	.word	0x0801488b
 801483c:	0801488b 	.word	0x0801488b
 8014840:	080147d9 	.word	0x080147d9
 8014844:	080148c5 	.word	0x080148c5
 8014848:	080147d9 	.word	0x080147d9
 801484c:	080147d9 	.word	0x080147d9
 8014850:	080147d9 	.word	0x080147d9
 8014854:	080147d9 	.word	0x080147d9
 8014858:	08014933 	.word	0x08014933
 801485c:	080148cd 	.word	0x080148cd
 8014860:	080148ab 	.word	0x080148ab
 8014864:	080147d9 	.word	0x080147d9
 8014868:	080147d9 	.word	0x080147d9
 801486c:	0801492f 	.word	0x0801492f
 8014870:	080147d9 	.word	0x080147d9
 8014874:	08014909 	.word	0x08014909
 8014878:	080147d9 	.word	0x080147d9
 801487c:	080147d9 	.word	0x080147d9
 8014880:	080148b3 	.word	0x080148b3
 8014884:	3b45      	subs	r3, #69	@ 0x45
 8014886:	2b02      	cmp	r3, #2
 8014888:	d8a6      	bhi.n	80147d8 <__ssvfiscanf_r+0xec>
 801488a:	2305      	movs	r3, #5
 801488c:	e021      	b.n	80148d2 <__ssvfiscanf_r+0x1e6>
 801488e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014890:	4621      	mov	r1, r4
 8014892:	4630      	mov	r0, r6
 8014894:	4798      	blx	r3
 8014896:	2800      	cmp	r0, #0
 8014898:	f43f af66 	beq.w	8014768 <__ssvfiscanf_r+0x7c>
 801489c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801489e:	2800      	cmp	r0, #0
 80148a0:	f040 808b 	bne.w	80149ba <__ssvfiscanf_r+0x2ce>
 80148a4:	f04f 30ff 	mov.w	r0, #4294967295
 80148a8:	e08b      	b.n	80149c2 <__ssvfiscanf_r+0x2d6>
 80148aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80148ac:	f042 0220 	orr.w	r2, r2, #32
 80148b0:	9241      	str	r2, [sp, #260]	@ 0x104
 80148b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80148b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80148b8:	9241      	str	r2, [sp, #260]	@ 0x104
 80148ba:	2210      	movs	r2, #16
 80148bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80148be:	9242      	str	r2, [sp, #264]	@ 0x108
 80148c0:	d902      	bls.n	80148c8 <__ssvfiscanf_r+0x1dc>
 80148c2:	e005      	b.n	80148d0 <__ssvfiscanf_r+0x1e4>
 80148c4:	2300      	movs	r3, #0
 80148c6:	9342      	str	r3, [sp, #264]	@ 0x108
 80148c8:	2303      	movs	r3, #3
 80148ca:	e002      	b.n	80148d2 <__ssvfiscanf_r+0x1e6>
 80148cc:	2308      	movs	r3, #8
 80148ce:	9342      	str	r3, [sp, #264]	@ 0x108
 80148d0:	2304      	movs	r3, #4
 80148d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80148d4:	6863      	ldr	r3, [r4, #4]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	dd39      	ble.n	801494e <__ssvfiscanf_r+0x262>
 80148da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80148dc:	0659      	lsls	r1, r3, #25
 80148de:	d404      	bmi.n	80148ea <__ssvfiscanf_r+0x1fe>
 80148e0:	6823      	ldr	r3, [r4, #0]
 80148e2:	781a      	ldrb	r2, [r3, #0]
 80148e4:	5cba      	ldrb	r2, [r7, r2]
 80148e6:	0712      	lsls	r2, r2, #28
 80148e8:	d438      	bmi.n	801495c <__ssvfiscanf_r+0x270>
 80148ea:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80148ec:	2b02      	cmp	r3, #2
 80148ee:	dc47      	bgt.n	8014980 <__ssvfiscanf_r+0x294>
 80148f0:	466b      	mov	r3, sp
 80148f2:	4622      	mov	r2, r4
 80148f4:	a941      	add	r1, sp, #260	@ 0x104
 80148f6:	4630      	mov	r0, r6
 80148f8:	f000 f86c 	bl	80149d4 <_scanf_chars>
 80148fc:	2801      	cmp	r0, #1
 80148fe:	d064      	beq.n	80149ca <__ssvfiscanf_r+0x2de>
 8014900:	2802      	cmp	r0, #2
 8014902:	f47f af18 	bne.w	8014736 <__ssvfiscanf_r+0x4a>
 8014906:	e7c9      	b.n	801489c <__ssvfiscanf_r+0x1b0>
 8014908:	220a      	movs	r2, #10
 801490a:	e7d7      	b.n	80148bc <__ssvfiscanf_r+0x1d0>
 801490c:	4629      	mov	r1, r5
 801490e:	4640      	mov	r0, r8
 8014910:	f000 fa5a 	bl	8014dc8 <__sccl>
 8014914:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801491a:	9341      	str	r3, [sp, #260]	@ 0x104
 801491c:	4605      	mov	r5, r0
 801491e:	2301      	movs	r3, #1
 8014920:	e7d7      	b.n	80148d2 <__ssvfiscanf_r+0x1e6>
 8014922:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014928:	9341      	str	r3, [sp, #260]	@ 0x104
 801492a:	2300      	movs	r3, #0
 801492c:	e7d1      	b.n	80148d2 <__ssvfiscanf_r+0x1e6>
 801492e:	2302      	movs	r3, #2
 8014930:	e7cf      	b.n	80148d2 <__ssvfiscanf_r+0x1e6>
 8014932:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8014934:	06c3      	lsls	r3, r0, #27
 8014936:	f53f aefe 	bmi.w	8014736 <__ssvfiscanf_r+0x4a>
 801493a:	9b00      	ldr	r3, [sp, #0]
 801493c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801493e:	1d19      	adds	r1, r3, #4
 8014940:	9100      	str	r1, [sp, #0]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	07c0      	lsls	r0, r0, #31
 8014946:	bf4c      	ite	mi
 8014948:	801a      	strhmi	r2, [r3, #0]
 801494a:	601a      	strpl	r2, [r3, #0]
 801494c:	e6f3      	b.n	8014736 <__ssvfiscanf_r+0x4a>
 801494e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014950:	4621      	mov	r1, r4
 8014952:	4630      	mov	r0, r6
 8014954:	4798      	blx	r3
 8014956:	2800      	cmp	r0, #0
 8014958:	d0bf      	beq.n	80148da <__ssvfiscanf_r+0x1ee>
 801495a:	e79f      	b.n	801489c <__ssvfiscanf_r+0x1b0>
 801495c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801495e:	3201      	adds	r2, #1
 8014960:	9245      	str	r2, [sp, #276]	@ 0x114
 8014962:	6862      	ldr	r2, [r4, #4]
 8014964:	3a01      	subs	r2, #1
 8014966:	2a00      	cmp	r2, #0
 8014968:	6062      	str	r2, [r4, #4]
 801496a:	dd02      	ble.n	8014972 <__ssvfiscanf_r+0x286>
 801496c:	3301      	adds	r3, #1
 801496e:	6023      	str	r3, [r4, #0]
 8014970:	e7b6      	b.n	80148e0 <__ssvfiscanf_r+0x1f4>
 8014972:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014974:	4621      	mov	r1, r4
 8014976:	4630      	mov	r0, r6
 8014978:	4798      	blx	r3
 801497a:	2800      	cmp	r0, #0
 801497c:	d0b0      	beq.n	80148e0 <__ssvfiscanf_r+0x1f4>
 801497e:	e78d      	b.n	801489c <__ssvfiscanf_r+0x1b0>
 8014980:	2b04      	cmp	r3, #4
 8014982:	dc0f      	bgt.n	80149a4 <__ssvfiscanf_r+0x2b8>
 8014984:	466b      	mov	r3, sp
 8014986:	4622      	mov	r2, r4
 8014988:	a941      	add	r1, sp, #260	@ 0x104
 801498a:	4630      	mov	r0, r6
 801498c:	f000 f87c 	bl	8014a88 <_scanf_i>
 8014990:	e7b4      	b.n	80148fc <__ssvfiscanf_r+0x210>
 8014992:	bf00      	nop
 8014994:	0801463d 	.word	0x0801463d
 8014998:	080146b3 	.word	0x080146b3
 801499c:	08017761 	.word	0x08017761
 80149a0:	08017867 	.word	0x08017867
 80149a4:	4b0a      	ldr	r3, [pc, #40]	@ (80149d0 <__ssvfiscanf_r+0x2e4>)
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	f43f aec5 	beq.w	8014736 <__ssvfiscanf_r+0x4a>
 80149ac:	466b      	mov	r3, sp
 80149ae:	4622      	mov	r2, r4
 80149b0:	a941      	add	r1, sp, #260	@ 0x104
 80149b2:	4630      	mov	r0, r6
 80149b4:	f7fc fe5a 	bl	801166c <_scanf_float>
 80149b8:	e7a0      	b.n	80148fc <__ssvfiscanf_r+0x210>
 80149ba:	89a3      	ldrh	r3, [r4, #12]
 80149bc:	065b      	lsls	r3, r3, #25
 80149be:	f53f af71 	bmi.w	80148a4 <__ssvfiscanf_r+0x1b8>
 80149c2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80149c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149ca:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80149cc:	e7f9      	b.n	80149c2 <__ssvfiscanf_r+0x2d6>
 80149ce:	bf00      	nop
 80149d0:	0801166d 	.word	0x0801166d

080149d4 <_scanf_chars>:
 80149d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149d8:	4615      	mov	r5, r2
 80149da:	688a      	ldr	r2, [r1, #8]
 80149dc:	4680      	mov	r8, r0
 80149de:	460c      	mov	r4, r1
 80149e0:	b932      	cbnz	r2, 80149f0 <_scanf_chars+0x1c>
 80149e2:	698a      	ldr	r2, [r1, #24]
 80149e4:	2a00      	cmp	r2, #0
 80149e6:	bf14      	ite	ne
 80149e8:	f04f 32ff 	movne.w	r2, #4294967295
 80149ec:	2201      	moveq	r2, #1
 80149ee:	608a      	str	r2, [r1, #8]
 80149f0:	6822      	ldr	r2, [r4, #0]
 80149f2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8014a84 <_scanf_chars+0xb0>
 80149f6:	06d1      	lsls	r1, r2, #27
 80149f8:	bf5f      	itttt	pl
 80149fa:	681a      	ldrpl	r2, [r3, #0]
 80149fc:	1d11      	addpl	r1, r2, #4
 80149fe:	6019      	strpl	r1, [r3, #0]
 8014a00:	6816      	ldrpl	r6, [r2, #0]
 8014a02:	2700      	movs	r7, #0
 8014a04:	69a0      	ldr	r0, [r4, #24]
 8014a06:	b188      	cbz	r0, 8014a2c <_scanf_chars+0x58>
 8014a08:	2801      	cmp	r0, #1
 8014a0a:	d107      	bne.n	8014a1c <_scanf_chars+0x48>
 8014a0c:	682b      	ldr	r3, [r5, #0]
 8014a0e:	781a      	ldrb	r2, [r3, #0]
 8014a10:	6963      	ldr	r3, [r4, #20]
 8014a12:	5c9b      	ldrb	r3, [r3, r2]
 8014a14:	b953      	cbnz	r3, 8014a2c <_scanf_chars+0x58>
 8014a16:	2f00      	cmp	r7, #0
 8014a18:	d031      	beq.n	8014a7e <_scanf_chars+0xaa>
 8014a1a:	e022      	b.n	8014a62 <_scanf_chars+0x8e>
 8014a1c:	2802      	cmp	r0, #2
 8014a1e:	d120      	bne.n	8014a62 <_scanf_chars+0x8e>
 8014a20:	682b      	ldr	r3, [r5, #0]
 8014a22:	781b      	ldrb	r3, [r3, #0]
 8014a24:	f819 3003 	ldrb.w	r3, [r9, r3]
 8014a28:	071b      	lsls	r3, r3, #28
 8014a2a:	d41a      	bmi.n	8014a62 <_scanf_chars+0x8e>
 8014a2c:	6823      	ldr	r3, [r4, #0]
 8014a2e:	06da      	lsls	r2, r3, #27
 8014a30:	bf5e      	ittt	pl
 8014a32:	682b      	ldrpl	r3, [r5, #0]
 8014a34:	781b      	ldrbpl	r3, [r3, #0]
 8014a36:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014a3a:	682a      	ldr	r2, [r5, #0]
 8014a3c:	686b      	ldr	r3, [r5, #4]
 8014a3e:	3201      	adds	r2, #1
 8014a40:	602a      	str	r2, [r5, #0]
 8014a42:	68a2      	ldr	r2, [r4, #8]
 8014a44:	3b01      	subs	r3, #1
 8014a46:	3a01      	subs	r2, #1
 8014a48:	606b      	str	r3, [r5, #4]
 8014a4a:	3701      	adds	r7, #1
 8014a4c:	60a2      	str	r2, [r4, #8]
 8014a4e:	b142      	cbz	r2, 8014a62 <_scanf_chars+0x8e>
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	dcd7      	bgt.n	8014a04 <_scanf_chars+0x30>
 8014a54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014a58:	4629      	mov	r1, r5
 8014a5a:	4640      	mov	r0, r8
 8014a5c:	4798      	blx	r3
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	d0d0      	beq.n	8014a04 <_scanf_chars+0x30>
 8014a62:	6823      	ldr	r3, [r4, #0]
 8014a64:	f013 0310 	ands.w	r3, r3, #16
 8014a68:	d105      	bne.n	8014a76 <_scanf_chars+0xa2>
 8014a6a:	68e2      	ldr	r2, [r4, #12]
 8014a6c:	3201      	adds	r2, #1
 8014a6e:	60e2      	str	r2, [r4, #12]
 8014a70:	69a2      	ldr	r2, [r4, #24]
 8014a72:	b102      	cbz	r2, 8014a76 <_scanf_chars+0xa2>
 8014a74:	7033      	strb	r3, [r6, #0]
 8014a76:	6923      	ldr	r3, [r4, #16]
 8014a78:	443b      	add	r3, r7
 8014a7a:	6123      	str	r3, [r4, #16]
 8014a7c:	2000      	movs	r0, #0
 8014a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a82:	bf00      	nop
 8014a84:	08017761 	.word	0x08017761

08014a88 <_scanf_i>:
 8014a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a8c:	4698      	mov	r8, r3
 8014a8e:	4b74      	ldr	r3, [pc, #464]	@ (8014c60 <_scanf_i+0x1d8>)
 8014a90:	460c      	mov	r4, r1
 8014a92:	4682      	mov	sl, r0
 8014a94:	4616      	mov	r6, r2
 8014a96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014a9a:	b087      	sub	sp, #28
 8014a9c:	ab03      	add	r3, sp, #12
 8014a9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014aa2:	4b70      	ldr	r3, [pc, #448]	@ (8014c64 <_scanf_i+0x1dc>)
 8014aa4:	69a1      	ldr	r1, [r4, #24]
 8014aa6:	4a70      	ldr	r2, [pc, #448]	@ (8014c68 <_scanf_i+0x1e0>)
 8014aa8:	2903      	cmp	r1, #3
 8014aaa:	bf08      	it	eq
 8014aac:	461a      	moveq	r2, r3
 8014aae:	68a3      	ldr	r3, [r4, #8]
 8014ab0:	9201      	str	r2, [sp, #4]
 8014ab2:	1e5a      	subs	r2, r3, #1
 8014ab4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014ab8:	bf88      	it	hi
 8014aba:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014abe:	4627      	mov	r7, r4
 8014ac0:	bf82      	ittt	hi
 8014ac2:	eb03 0905 	addhi.w	r9, r3, r5
 8014ac6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014aca:	60a3      	strhi	r3, [r4, #8]
 8014acc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014ad0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8014ad4:	bf98      	it	ls
 8014ad6:	f04f 0900 	movls.w	r9, #0
 8014ada:	6023      	str	r3, [r4, #0]
 8014adc:	463d      	mov	r5, r7
 8014ade:	f04f 0b00 	mov.w	fp, #0
 8014ae2:	6831      	ldr	r1, [r6, #0]
 8014ae4:	ab03      	add	r3, sp, #12
 8014ae6:	7809      	ldrb	r1, [r1, #0]
 8014ae8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014aec:	2202      	movs	r2, #2
 8014aee:	f7eb fb97 	bl	8000220 <memchr>
 8014af2:	b328      	cbz	r0, 8014b40 <_scanf_i+0xb8>
 8014af4:	f1bb 0f01 	cmp.w	fp, #1
 8014af8:	d159      	bne.n	8014bae <_scanf_i+0x126>
 8014afa:	6862      	ldr	r2, [r4, #4]
 8014afc:	b92a      	cbnz	r2, 8014b0a <_scanf_i+0x82>
 8014afe:	6822      	ldr	r2, [r4, #0]
 8014b00:	2108      	movs	r1, #8
 8014b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014b06:	6061      	str	r1, [r4, #4]
 8014b08:	6022      	str	r2, [r4, #0]
 8014b0a:	6822      	ldr	r2, [r4, #0]
 8014b0c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8014b10:	6022      	str	r2, [r4, #0]
 8014b12:	68a2      	ldr	r2, [r4, #8]
 8014b14:	1e51      	subs	r1, r2, #1
 8014b16:	60a1      	str	r1, [r4, #8]
 8014b18:	b192      	cbz	r2, 8014b40 <_scanf_i+0xb8>
 8014b1a:	6832      	ldr	r2, [r6, #0]
 8014b1c:	1c51      	adds	r1, r2, #1
 8014b1e:	6031      	str	r1, [r6, #0]
 8014b20:	7812      	ldrb	r2, [r2, #0]
 8014b22:	f805 2b01 	strb.w	r2, [r5], #1
 8014b26:	6872      	ldr	r2, [r6, #4]
 8014b28:	3a01      	subs	r2, #1
 8014b2a:	2a00      	cmp	r2, #0
 8014b2c:	6072      	str	r2, [r6, #4]
 8014b2e:	dc07      	bgt.n	8014b40 <_scanf_i+0xb8>
 8014b30:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8014b34:	4631      	mov	r1, r6
 8014b36:	4650      	mov	r0, sl
 8014b38:	4790      	blx	r2
 8014b3a:	2800      	cmp	r0, #0
 8014b3c:	f040 8085 	bne.w	8014c4a <_scanf_i+0x1c2>
 8014b40:	f10b 0b01 	add.w	fp, fp, #1
 8014b44:	f1bb 0f03 	cmp.w	fp, #3
 8014b48:	d1cb      	bne.n	8014ae2 <_scanf_i+0x5a>
 8014b4a:	6863      	ldr	r3, [r4, #4]
 8014b4c:	b90b      	cbnz	r3, 8014b52 <_scanf_i+0xca>
 8014b4e:	230a      	movs	r3, #10
 8014b50:	6063      	str	r3, [r4, #4]
 8014b52:	6863      	ldr	r3, [r4, #4]
 8014b54:	4945      	ldr	r1, [pc, #276]	@ (8014c6c <_scanf_i+0x1e4>)
 8014b56:	6960      	ldr	r0, [r4, #20]
 8014b58:	1ac9      	subs	r1, r1, r3
 8014b5a:	f000 f935 	bl	8014dc8 <__sccl>
 8014b5e:	f04f 0b00 	mov.w	fp, #0
 8014b62:	68a3      	ldr	r3, [r4, #8]
 8014b64:	6822      	ldr	r2, [r4, #0]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d03d      	beq.n	8014be6 <_scanf_i+0x15e>
 8014b6a:	6831      	ldr	r1, [r6, #0]
 8014b6c:	6960      	ldr	r0, [r4, #20]
 8014b6e:	f891 c000 	ldrb.w	ip, [r1]
 8014b72:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014b76:	2800      	cmp	r0, #0
 8014b78:	d035      	beq.n	8014be6 <_scanf_i+0x15e>
 8014b7a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8014b7e:	d124      	bne.n	8014bca <_scanf_i+0x142>
 8014b80:	0510      	lsls	r0, r2, #20
 8014b82:	d522      	bpl.n	8014bca <_scanf_i+0x142>
 8014b84:	f10b 0b01 	add.w	fp, fp, #1
 8014b88:	f1b9 0f00 	cmp.w	r9, #0
 8014b8c:	d003      	beq.n	8014b96 <_scanf_i+0x10e>
 8014b8e:	3301      	adds	r3, #1
 8014b90:	f109 39ff 	add.w	r9, r9, #4294967295
 8014b94:	60a3      	str	r3, [r4, #8]
 8014b96:	6873      	ldr	r3, [r6, #4]
 8014b98:	3b01      	subs	r3, #1
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	6073      	str	r3, [r6, #4]
 8014b9e:	dd1b      	ble.n	8014bd8 <_scanf_i+0x150>
 8014ba0:	6833      	ldr	r3, [r6, #0]
 8014ba2:	3301      	adds	r3, #1
 8014ba4:	6033      	str	r3, [r6, #0]
 8014ba6:	68a3      	ldr	r3, [r4, #8]
 8014ba8:	3b01      	subs	r3, #1
 8014baa:	60a3      	str	r3, [r4, #8]
 8014bac:	e7d9      	b.n	8014b62 <_scanf_i+0xda>
 8014bae:	f1bb 0f02 	cmp.w	fp, #2
 8014bb2:	d1ae      	bne.n	8014b12 <_scanf_i+0x8a>
 8014bb4:	6822      	ldr	r2, [r4, #0]
 8014bb6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8014bba:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8014bbe:	d1bf      	bne.n	8014b40 <_scanf_i+0xb8>
 8014bc0:	2110      	movs	r1, #16
 8014bc2:	6061      	str	r1, [r4, #4]
 8014bc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014bc8:	e7a2      	b.n	8014b10 <_scanf_i+0x88>
 8014bca:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8014bce:	6022      	str	r2, [r4, #0]
 8014bd0:	780b      	ldrb	r3, [r1, #0]
 8014bd2:	f805 3b01 	strb.w	r3, [r5], #1
 8014bd6:	e7de      	b.n	8014b96 <_scanf_i+0x10e>
 8014bd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014bdc:	4631      	mov	r1, r6
 8014bde:	4650      	mov	r0, sl
 8014be0:	4798      	blx	r3
 8014be2:	2800      	cmp	r0, #0
 8014be4:	d0df      	beq.n	8014ba6 <_scanf_i+0x11e>
 8014be6:	6823      	ldr	r3, [r4, #0]
 8014be8:	05d9      	lsls	r1, r3, #23
 8014bea:	d50d      	bpl.n	8014c08 <_scanf_i+0x180>
 8014bec:	42bd      	cmp	r5, r7
 8014bee:	d909      	bls.n	8014c04 <_scanf_i+0x17c>
 8014bf0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014bf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014bf8:	4632      	mov	r2, r6
 8014bfa:	4650      	mov	r0, sl
 8014bfc:	4798      	blx	r3
 8014bfe:	f105 39ff 	add.w	r9, r5, #4294967295
 8014c02:	464d      	mov	r5, r9
 8014c04:	42bd      	cmp	r5, r7
 8014c06:	d028      	beq.n	8014c5a <_scanf_i+0x1d2>
 8014c08:	6822      	ldr	r2, [r4, #0]
 8014c0a:	f012 0210 	ands.w	r2, r2, #16
 8014c0e:	d113      	bne.n	8014c38 <_scanf_i+0x1b0>
 8014c10:	702a      	strb	r2, [r5, #0]
 8014c12:	6863      	ldr	r3, [r4, #4]
 8014c14:	9e01      	ldr	r6, [sp, #4]
 8014c16:	4639      	mov	r1, r7
 8014c18:	4650      	mov	r0, sl
 8014c1a:	47b0      	blx	r6
 8014c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8014c20:	6821      	ldr	r1, [r4, #0]
 8014c22:	1d1a      	adds	r2, r3, #4
 8014c24:	f8c8 2000 	str.w	r2, [r8]
 8014c28:	f011 0f20 	tst.w	r1, #32
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	d00f      	beq.n	8014c50 <_scanf_i+0x1c8>
 8014c30:	6018      	str	r0, [r3, #0]
 8014c32:	68e3      	ldr	r3, [r4, #12]
 8014c34:	3301      	adds	r3, #1
 8014c36:	60e3      	str	r3, [r4, #12]
 8014c38:	6923      	ldr	r3, [r4, #16]
 8014c3a:	1bed      	subs	r5, r5, r7
 8014c3c:	445d      	add	r5, fp
 8014c3e:	442b      	add	r3, r5
 8014c40:	6123      	str	r3, [r4, #16]
 8014c42:	2000      	movs	r0, #0
 8014c44:	b007      	add	sp, #28
 8014c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c4a:	f04f 0b00 	mov.w	fp, #0
 8014c4e:	e7ca      	b.n	8014be6 <_scanf_i+0x15e>
 8014c50:	07ca      	lsls	r2, r1, #31
 8014c52:	bf4c      	ite	mi
 8014c54:	8018      	strhmi	r0, [r3, #0]
 8014c56:	6018      	strpl	r0, [r3, #0]
 8014c58:	e7eb      	b.n	8014c32 <_scanf_i+0x1aa>
 8014c5a:	2001      	movs	r0, #1
 8014c5c:	e7f2      	b.n	8014c44 <_scanf_i+0x1bc>
 8014c5e:	bf00      	nop
 8014c60:	0801749c 	.word	0x0801749c
 8014c64:	08014389 	.word	0x08014389
 8014c68:	0801574d 	.word	0x0801574d
 8014c6c:	08017882 	.word	0x08017882

08014c70 <__sflush_r>:
 8014c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c78:	0716      	lsls	r6, r2, #28
 8014c7a:	4605      	mov	r5, r0
 8014c7c:	460c      	mov	r4, r1
 8014c7e:	d454      	bmi.n	8014d2a <__sflush_r+0xba>
 8014c80:	684b      	ldr	r3, [r1, #4]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	dc02      	bgt.n	8014c8c <__sflush_r+0x1c>
 8014c86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	dd48      	ble.n	8014d1e <__sflush_r+0xae>
 8014c8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014c8e:	2e00      	cmp	r6, #0
 8014c90:	d045      	beq.n	8014d1e <__sflush_r+0xae>
 8014c92:	2300      	movs	r3, #0
 8014c94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014c98:	682f      	ldr	r7, [r5, #0]
 8014c9a:	6a21      	ldr	r1, [r4, #32]
 8014c9c:	602b      	str	r3, [r5, #0]
 8014c9e:	d030      	beq.n	8014d02 <__sflush_r+0x92>
 8014ca0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014ca2:	89a3      	ldrh	r3, [r4, #12]
 8014ca4:	0759      	lsls	r1, r3, #29
 8014ca6:	d505      	bpl.n	8014cb4 <__sflush_r+0x44>
 8014ca8:	6863      	ldr	r3, [r4, #4]
 8014caa:	1ad2      	subs	r2, r2, r3
 8014cac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014cae:	b10b      	cbz	r3, 8014cb4 <__sflush_r+0x44>
 8014cb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014cb2:	1ad2      	subs	r2, r2, r3
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014cb8:	6a21      	ldr	r1, [r4, #32]
 8014cba:	4628      	mov	r0, r5
 8014cbc:	47b0      	blx	r6
 8014cbe:	1c43      	adds	r3, r0, #1
 8014cc0:	89a3      	ldrh	r3, [r4, #12]
 8014cc2:	d106      	bne.n	8014cd2 <__sflush_r+0x62>
 8014cc4:	6829      	ldr	r1, [r5, #0]
 8014cc6:	291d      	cmp	r1, #29
 8014cc8:	d82b      	bhi.n	8014d22 <__sflush_r+0xb2>
 8014cca:	4a2a      	ldr	r2, [pc, #168]	@ (8014d74 <__sflush_r+0x104>)
 8014ccc:	410a      	asrs	r2, r1
 8014cce:	07d6      	lsls	r6, r2, #31
 8014cd0:	d427      	bmi.n	8014d22 <__sflush_r+0xb2>
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	6062      	str	r2, [r4, #4]
 8014cd6:	04d9      	lsls	r1, r3, #19
 8014cd8:	6922      	ldr	r2, [r4, #16]
 8014cda:	6022      	str	r2, [r4, #0]
 8014cdc:	d504      	bpl.n	8014ce8 <__sflush_r+0x78>
 8014cde:	1c42      	adds	r2, r0, #1
 8014ce0:	d101      	bne.n	8014ce6 <__sflush_r+0x76>
 8014ce2:	682b      	ldr	r3, [r5, #0]
 8014ce4:	b903      	cbnz	r3, 8014ce8 <__sflush_r+0x78>
 8014ce6:	6560      	str	r0, [r4, #84]	@ 0x54
 8014ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014cea:	602f      	str	r7, [r5, #0]
 8014cec:	b1b9      	cbz	r1, 8014d1e <__sflush_r+0xae>
 8014cee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014cf2:	4299      	cmp	r1, r3
 8014cf4:	d002      	beq.n	8014cfc <__sflush_r+0x8c>
 8014cf6:	4628      	mov	r0, r5
 8014cf8:	f7fd ff12 	bl	8012b20 <_free_r>
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8014d00:	e00d      	b.n	8014d1e <__sflush_r+0xae>
 8014d02:	2301      	movs	r3, #1
 8014d04:	4628      	mov	r0, r5
 8014d06:	47b0      	blx	r6
 8014d08:	4602      	mov	r2, r0
 8014d0a:	1c50      	adds	r0, r2, #1
 8014d0c:	d1c9      	bne.n	8014ca2 <__sflush_r+0x32>
 8014d0e:	682b      	ldr	r3, [r5, #0]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d0c6      	beq.n	8014ca2 <__sflush_r+0x32>
 8014d14:	2b1d      	cmp	r3, #29
 8014d16:	d001      	beq.n	8014d1c <__sflush_r+0xac>
 8014d18:	2b16      	cmp	r3, #22
 8014d1a:	d11e      	bne.n	8014d5a <__sflush_r+0xea>
 8014d1c:	602f      	str	r7, [r5, #0]
 8014d1e:	2000      	movs	r0, #0
 8014d20:	e022      	b.n	8014d68 <__sflush_r+0xf8>
 8014d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d26:	b21b      	sxth	r3, r3
 8014d28:	e01b      	b.n	8014d62 <__sflush_r+0xf2>
 8014d2a:	690f      	ldr	r7, [r1, #16]
 8014d2c:	2f00      	cmp	r7, #0
 8014d2e:	d0f6      	beq.n	8014d1e <__sflush_r+0xae>
 8014d30:	0793      	lsls	r3, r2, #30
 8014d32:	680e      	ldr	r6, [r1, #0]
 8014d34:	bf08      	it	eq
 8014d36:	694b      	ldreq	r3, [r1, #20]
 8014d38:	600f      	str	r7, [r1, #0]
 8014d3a:	bf18      	it	ne
 8014d3c:	2300      	movne	r3, #0
 8014d3e:	eba6 0807 	sub.w	r8, r6, r7
 8014d42:	608b      	str	r3, [r1, #8]
 8014d44:	f1b8 0f00 	cmp.w	r8, #0
 8014d48:	dde9      	ble.n	8014d1e <__sflush_r+0xae>
 8014d4a:	6a21      	ldr	r1, [r4, #32]
 8014d4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014d4e:	4643      	mov	r3, r8
 8014d50:	463a      	mov	r2, r7
 8014d52:	4628      	mov	r0, r5
 8014d54:	47b0      	blx	r6
 8014d56:	2800      	cmp	r0, #0
 8014d58:	dc08      	bgt.n	8014d6c <__sflush_r+0xfc>
 8014d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d62:	81a3      	strh	r3, [r4, #12]
 8014d64:	f04f 30ff 	mov.w	r0, #4294967295
 8014d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d6c:	4407      	add	r7, r0
 8014d6e:	eba8 0800 	sub.w	r8, r8, r0
 8014d72:	e7e7      	b.n	8014d44 <__sflush_r+0xd4>
 8014d74:	dfbffffe 	.word	0xdfbffffe

08014d78 <_fflush_r>:
 8014d78:	b538      	push	{r3, r4, r5, lr}
 8014d7a:	690b      	ldr	r3, [r1, #16]
 8014d7c:	4605      	mov	r5, r0
 8014d7e:	460c      	mov	r4, r1
 8014d80:	b913      	cbnz	r3, 8014d88 <_fflush_r+0x10>
 8014d82:	2500      	movs	r5, #0
 8014d84:	4628      	mov	r0, r5
 8014d86:	bd38      	pop	{r3, r4, r5, pc}
 8014d88:	b118      	cbz	r0, 8014d92 <_fflush_r+0x1a>
 8014d8a:	6a03      	ldr	r3, [r0, #32]
 8014d8c:	b90b      	cbnz	r3, 8014d92 <_fflush_r+0x1a>
 8014d8e:	f7fc ff0d 	bl	8011bac <__sinit>
 8014d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d0f3      	beq.n	8014d82 <_fflush_r+0xa>
 8014d9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014d9c:	07d0      	lsls	r0, r2, #31
 8014d9e:	d404      	bmi.n	8014daa <_fflush_r+0x32>
 8014da0:	0599      	lsls	r1, r3, #22
 8014da2:	d402      	bmi.n	8014daa <_fflush_r+0x32>
 8014da4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014da6:	f7fd f856 	bl	8011e56 <__retarget_lock_acquire_recursive>
 8014daa:	4628      	mov	r0, r5
 8014dac:	4621      	mov	r1, r4
 8014dae:	f7ff ff5f 	bl	8014c70 <__sflush_r>
 8014db2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014db4:	07da      	lsls	r2, r3, #31
 8014db6:	4605      	mov	r5, r0
 8014db8:	d4e4      	bmi.n	8014d84 <_fflush_r+0xc>
 8014dba:	89a3      	ldrh	r3, [r4, #12]
 8014dbc:	059b      	lsls	r3, r3, #22
 8014dbe:	d4e1      	bmi.n	8014d84 <_fflush_r+0xc>
 8014dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014dc2:	f7fd f849 	bl	8011e58 <__retarget_lock_release_recursive>
 8014dc6:	e7dd      	b.n	8014d84 <_fflush_r+0xc>

08014dc8 <__sccl>:
 8014dc8:	b570      	push	{r4, r5, r6, lr}
 8014dca:	780b      	ldrb	r3, [r1, #0]
 8014dcc:	4604      	mov	r4, r0
 8014dce:	2b5e      	cmp	r3, #94	@ 0x5e
 8014dd0:	bf0b      	itete	eq
 8014dd2:	784b      	ldrbeq	r3, [r1, #1]
 8014dd4:	1c4a      	addne	r2, r1, #1
 8014dd6:	1c8a      	addeq	r2, r1, #2
 8014dd8:	2100      	movne	r1, #0
 8014dda:	bf08      	it	eq
 8014ddc:	2101      	moveq	r1, #1
 8014dde:	3801      	subs	r0, #1
 8014de0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8014de4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014de8:	42a8      	cmp	r0, r5
 8014dea:	d1fb      	bne.n	8014de4 <__sccl+0x1c>
 8014dec:	b90b      	cbnz	r3, 8014df2 <__sccl+0x2a>
 8014dee:	1e50      	subs	r0, r2, #1
 8014df0:	bd70      	pop	{r4, r5, r6, pc}
 8014df2:	f081 0101 	eor.w	r1, r1, #1
 8014df6:	54e1      	strb	r1, [r4, r3]
 8014df8:	4610      	mov	r0, r2
 8014dfa:	4602      	mov	r2, r0
 8014dfc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014e00:	2d2d      	cmp	r5, #45	@ 0x2d
 8014e02:	d005      	beq.n	8014e10 <__sccl+0x48>
 8014e04:	2d5d      	cmp	r5, #93	@ 0x5d
 8014e06:	d016      	beq.n	8014e36 <__sccl+0x6e>
 8014e08:	2d00      	cmp	r5, #0
 8014e0a:	d0f1      	beq.n	8014df0 <__sccl+0x28>
 8014e0c:	462b      	mov	r3, r5
 8014e0e:	e7f2      	b.n	8014df6 <__sccl+0x2e>
 8014e10:	7846      	ldrb	r6, [r0, #1]
 8014e12:	2e5d      	cmp	r6, #93	@ 0x5d
 8014e14:	d0fa      	beq.n	8014e0c <__sccl+0x44>
 8014e16:	42b3      	cmp	r3, r6
 8014e18:	dcf8      	bgt.n	8014e0c <__sccl+0x44>
 8014e1a:	3002      	adds	r0, #2
 8014e1c:	461a      	mov	r2, r3
 8014e1e:	3201      	adds	r2, #1
 8014e20:	4296      	cmp	r6, r2
 8014e22:	54a1      	strb	r1, [r4, r2]
 8014e24:	dcfb      	bgt.n	8014e1e <__sccl+0x56>
 8014e26:	1af2      	subs	r2, r6, r3
 8014e28:	3a01      	subs	r2, #1
 8014e2a:	1c5d      	adds	r5, r3, #1
 8014e2c:	42b3      	cmp	r3, r6
 8014e2e:	bfa8      	it	ge
 8014e30:	2200      	movge	r2, #0
 8014e32:	18ab      	adds	r3, r5, r2
 8014e34:	e7e1      	b.n	8014dfa <__sccl+0x32>
 8014e36:	4610      	mov	r0, r2
 8014e38:	e7da      	b.n	8014df0 <__sccl+0x28>

08014e3a <__submore>:
 8014e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e3e:	460c      	mov	r4, r1
 8014e40:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014e42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014e46:	4299      	cmp	r1, r3
 8014e48:	d11d      	bne.n	8014e86 <__submore+0x4c>
 8014e4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8014e4e:	f7fd fedb 	bl	8012c08 <_malloc_r>
 8014e52:	b918      	cbnz	r0, 8014e5c <__submore+0x22>
 8014e54:	f04f 30ff 	mov.w	r0, #4294967295
 8014e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014e60:	63a3      	str	r3, [r4, #56]	@ 0x38
 8014e62:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8014e66:	6360      	str	r0, [r4, #52]	@ 0x34
 8014e68:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8014e6c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8014e70:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8014e74:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014e78:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8014e7c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8014e80:	6020      	str	r0, [r4, #0]
 8014e82:	2000      	movs	r0, #0
 8014e84:	e7e8      	b.n	8014e58 <__submore+0x1e>
 8014e86:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8014e88:	0077      	lsls	r7, r6, #1
 8014e8a:	463a      	mov	r2, r7
 8014e8c:	f000 fbc1 	bl	8015612 <_realloc_r>
 8014e90:	4605      	mov	r5, r0
 8014e92:	2800      	cmp	r0, #0
 8014e94:	d0de      	beq.n	8014e54 <__submore+0x1a>
 8014e96:	eb00 0806 	add.w	r8, r0, r6
 8014e9a:	4601      	mov	r1, r0
 8014e9c:	4632      	mov	r2, r6
 8014e9e:	4640      	mov	r0, r8
 8014ea0:	f7fc ffdb 	bl	8011e5a <memcpy>
 8014ea4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8014ea8:	f8c4 8000 	str.w	r8, [r4]
 8014eac:	e7e9      	b.n	8014e82 <__submore+0x48>

08014eae <memmove>:
 8014eae:	4288      	cmp	r0, r1
 8014eb0:	b510      	push	{r4, lr}
 8014eb2:	eb01 0402 	add.w	r4, r1, r2
 8014eb6:	d902      	bls.n	8014ebe <memmove+0x10>
 8014eb8:	4284      	cmp	r4, r0
 8014eba:	4623      	mov	r3, r4
 8014ebc:	d807      	bhi.n	8014ece <memmove+0x20>
 8014ebe:	1e43      	subs	r3, r0, #1
 8014ec0:	42a1      	cmp	r1, r4
 8014ec2:	d008      	beq.n	8014ed6 <memmove+0x28>
 8014ec4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014ec8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014ecc:	e7f8      	b.n	8014ec0 <memmove+0x12>
 8014ece:	4402      	add	r2, r0
 8014ed0:	4601      	mov	r1, r0
 8014ed2:	428a      	cmp	r2, r1
 8014ed4:	d100      	bne.n	8014ed8 <memmove+0x2a>
 8014ed6:	bd10      	pop	{r4, pc}
 8014ed8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014edc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ee0:	e7f7      	b.n	8014ed2 <memmove+0x24>
	...

08014ee4 <_sbrk_r>:
 8014ee4:	b538      	push	{r3, r4, r5, lr}
 8014ee6:	4d06      	ldr	r5, [pc, #24]	@ (8014f00 <_sbrk_r+0x1c>)
 8014ee8:	2300      	movs	r3, #0
 8014eea:	4604      	mov	r4, r0
 8014eec:	4608      	mov	r0, r1
 8014eee:	602b      	str	r3, [r5, #0]
 8014ef0:	f7ef fb50 	bl	8004594 <_sbrk>
 8014ef4:	1c43      	adds	r3, r0, #1
 8014ef6:	d102      	bne.n	8014efe <_sbrk_r+0x1a>
 8014ef8:	682b      	ldr	r3, [r5, #0]
 8014efa:	b103      	cbz	r3, 8014efe <_sbrk_r+0x1a>
 8014efc:	6023      	str	r3, [r4, #0]
 8014efe:	bd38      	pop	{r3, r4, r5, pc}
 8014f00:	200026c4 	.word	0x200026c4
 8014f04:	00000000 	.word	0x00000000

08014f08 <nan>:
 8014f08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014f10 <nan+0x8>
 8014f0c:	4770      	bx	lr
 8014f0e:	bf00      	nop
 8014f10:	00000000 	.word	0x00000000
 8014f14:	7ff80000 	.word	0x7ff80000

08014f18 <__assert_func>:
 8014f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014f1a:	4614      	mov	r4, r2
 8014f1c:	461a      	mov	r2, r3
 8014f1e:	4b09      	ldr	r3, [pc, #36]	@ (8014f44 <__assert_func+0x2c>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	4605      	mov	r5, r0
 8014f24:	68d8      	ldr	r0, [r3, #12]
 8014f26:	b954      	cbnz	r4, 8014f3e <__assert_func+0x26>
 8014f28:	4b07      	ldr	r3, [pc, #28]	@ (8014f48 <__assert_func+0x30>)
 8014f2a:	461c      	mov	r4, r3
 8014f2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014f30:	9100      	str	r1, [sp, #0]
 8014f32:	462b      	mov	r3, r5
 8014f34:	4905      	ldr	r1, [pc, #20]	@ (8014f4c <__assert_func+0x34>)
 8014f36:	f000 fc19 	bl	801576c <fiprintf>
 8014f3a:	f000 fc29 	bl	8015790 <abort>
 8014f3e:	4b04      	ldr	r3, [pc, #16]	@ (8014f50 <__assert_func+0x38>)
 8014f40:	e7f4      	b.n	8014f2c <__assert_func+0x14>
 8014f42:	bf00      	nop
 8014f44:	200001cc 	.word	0x200001cc
 8014f48:	080178d0 	.word	0x080178d0
 8014f4c:	080178a2 	.word	0x080178a2
 8014f50:	08017895 	.word	0x08017895

08014f54 <_calloc_r>:
 8014f54:	b570      	push	{r4, r5, r6, lr}
 8014f56:	fba1 5402 	umull	r5, r4, r1, r2
 8014f5a:	b93c      	cbnz	r4, 8014f6c <_calloc_r+0x18>
 8014f5c:	4629      	mov	r1, r5
 8014f5e:	f7fd fe53 	bl	8012c08 <_malloc_r>
 8014f62:	4606      	mov	r6, r0
 8014f64:	b928      	cbnz	r0, 8014f72 <_calloc_r+0x1e>
 8014f66:	2600      	movs	r6, #0
 8014f68:	4630      	mov	r0, r6
 8014f6a:	bd70      	pop	{r4, r5, r6, pc}
 8014f6c:	220c      	movs	r2, #12
 8014f6e:	6002      	str	r2, [r0, #0]
 8014f70:	e7f9      	b.n	8014f66 <_calloc_r+0x12>
 8014f72:	462a      	mov	r2, r5
 8014f74:	4621      	mov	r1, r4
 8014f76:	f7fc fede 	bl	8011d36 <memset>
 8014f7a:	e7f5      	b.n	8014f68 <_calloc_r+0x14>

08014f7c <rshift>:
 8014f7c:	6903      	ldr	r3, [r0, #16]
 8014f7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014f82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014f8a:	f100 0414 	add.w	r4, r0, #20
 8014f8e:	dd45      	ble.n	801501c <rshift+0xa0>
 8014f90:	f011 011f 	ands.w	r1, r1, #31
 8014f94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014f98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014f9c:	d10c      	bne.n	8014fb8 <rshift+0x3c>
 8014f9e:	f100 0710 	add.w	r7, r0, #16
 8014fa2:	4629      	mov	r1, r5
 8014fa4:	42b1      	cmp	r1, r6
 8014fa6:	d334      	bcc.n	8015012 <rshift+0x96>
 8014fa8:	1a9b      	subs	r3, r3, r2
 8014faa:	009b      	lsls	r3, r3, #2
 8014fac:	1eea      	subs	r2, r5, #3
 8014fae:	4296      	cmp	r6, r2
 8014fb0:	bf38      	it	cc
 8014fb2:	2300      	movcc	r3, #0
 8014fb4:	4423      	add	r3, r4
 8014fb6:	e015      	b.n	8014fe4 <rshift+0x68>
 8014fb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014fbc:	f1c1 0820 	rsb	r8, r1, #32
 8014fc0:	40cf      	lsrs	r7, r1
 8014fc2:	f105 0e04 	add.w	lr, r5, #4
 8014fc6:	46a1      	mov	r9, r4
 8014fc8:	4576      	cmp	r6, lr
 8014fca:	46f4      	mov	ip, lr
 8014fcc:	d815      	bhi.n	8014ffa <rshift+0x7e>
 8014fce:	1a9a      	subs	r2, r3, r2
 8014fd0:	0092      	lsls	r2, r2, #2
 8014fd2:	3a04      	subs	r2, #4
 8014fd4:	3501      	adds	r5, #1
 8014fd6:	42ae      	cmp	r6, r5
 8014fd8:	bf38      	it	cc
 8014fda:	2200      	movcc	r2, #0
 8014fdc:	18a3      	adds	r3, r4, r2
 8014fde:	50a7      	str	r7, [r4, r2]
 8014fe0:	b107      	cbz	r7, 8014fe4 <rshift+0x68>
 8014fe2:	3304      	adds	r3, #4
 8014fe4:	1b1a      	subs	r2, r3, r4
 8014fe6:	42a3      	cmp	r3, r4
 8014fe8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014fec:	bf08      	it	eq
 8014fee:	2300      	moveq	r3, #0
 8014ff0:	6102      	str	r2, [r0, #16]
 8014ff2:	bf08      	it	eq
 8014ff4:	6143      	streq	r3, [r0, #20]
 8014ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ffa:	f8dc c000 	ldr.w	ip, [ip]
 8014ffe:	fa0c fc08 	lsl.w	ip, ip, r8
 8015002:	ea4c 0707 	orr.w	r7, ip, r7
 8015006:	f849 7b04 	str.w	r7, [r9], #4
 801500a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801500e:	40cf      	lsrs	r7, r1
 8015010:	e7da      	b.n	8014fc8 <rshift+0x4c>
 8015012:	f851 cb04 	ldr.w	ip, [r1], #4
 8015016:	f847 cf04 	str.w	ip, [r7, #4]!
 801501a:	e7c3      	b.n	8014fa4 <rshift+0x28>
 801501c:	4623      	mov	r3, r4
 801501e:	e7e1      	b.n	8014fe4 <rshift+0x68>

08015020 <__hexdig_fun>:
 8015020:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015024:	2b09      	cmp	r3, #9
 8015026:	d802      	bhi.n	801502e <__hexdig_fun+0xe>
 8015028:	3820      	subs	r0, #32
 801502a:	b2c0      	uxtb	r0, r0
 801502c:	4770      	bx	lr
 801502e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015032:	2b05      	cmp	r3, #5
 8015034:	d801      	bhi.n	801503a <__hexdig_fun+0x1a>
 8015036:	3847      	subs	r0, #71	@ 0x47
 8015038:	e7f7      	b.n	801502a <__hexdig_fun+0xa>
 801503a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801503e:	2b05      	cmp	r3, #5
 8015040:	d801      	bhi.n	8015046 <__hexdig_fun+0x26>
 8015042:	3827      	subs	r0, #39	@ 0x27
 8015044:	e7f1      	b.n	801502a <__hexdig_fun+0xa>
 8015046:	2000      	movs	r0, #0
 8015048:	4770      	bx	lr
	...

0801504c <__gethex>:
 801504c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015050:	b085      	sub	sp, #20
 8015052:	468a      	mov	sl, r1
 8015054:	9302      	str	r3, [sp, #8]
 8015056:	680b      	ldr	r3, [r1, #0]
 8015058:	9001      	str	r0, [sp, #4]
 801505a:	4690      	mov	r8, r2
 801505c:	1c9c      	adds	r4, r3, #2
 801505e:	46a1      	mov	r9, r4
 8015060:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015064:	2830      	cmp	r0, #48	@ 0x30
 8015066:	d0fa      	beq.n	801505e <__gethex+0x12>
 8015068:	eba9 0303 	sub.w	r3, r9, r3
 801506c:	f1a3 0b02 	sub.w	fp, r3, #2
 8015070:	f7ff ffd6 	bl	8015020 <__hexdig_fun>
 8015074:	4605      	mov	r5, r0
 8015076:	2800      	cmp	r0, #0
 8015078:	d168      	bne.n	801514c <__gethex+0x100>
 801507a:	49a0      	ldr	r1, [pc, #640]	@ (80152fc <__gethex+0x2b0>)
 801507c:	2201      	movs	r2, #1
 801507e:	4648      	mov	r0, r9
 8015080:	f7fc fe61 	bl	8011d46 <strncmp>
 8015084:	4607      	mov	r7, r0
 8015086:	2800      	cmp	r0, #0
 8015088:	d167      	bne.n	801515a <__gethex+0x10e>
 801508a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801508e:	4626      	mov	r6, r4
 8015090:	f7ff ffc6 	bl	8015020 <__hexdig_fun>
 8015094:	2800      	cmp	r0, #0
 8015096:	d062      	beq.n	801515e <__gethex+0x112>
 8015098:	4623      	mov	r3, r4
 801509a:	7818      	ldrb	r0, [r3, #0]
 801509c:	2830      	cmp	r0, #48	@ 0x30
 801509e:	4699      	mov	r9, r3
 80150a0:	f103 0301 	add.w	r3, r3, #1
 80150a4:	d0f9      	beq.n	801509a <__gethex+0x4e>
 80150a6:	f7ff ffbb 	bl	8015020 <__hexdig_fun>
 80150aa:	fab0 f580 	clz	r5, r0
 80150ae:	096d      	lsrs	r5, r5, #5
 80150b0:	f04f 0b01 	mov.w	fp, #1
 80150b4:	464a      	mov	r2, r9
 80150b6:	4616      	mov	r6, r2
 80150b8:	3201      	adds	r2, #1
 80150ba:	7830      	ldrb	r0, [r6, #0]
 80150bc:	f7ff ffb0 	bl	8015020 <__hexdig_fun>
 80150c0:	2800      	cmp	r0, #0
 80150c2:	d1f8      	bne.n	80150b6 <__gethex+0x6a>
 80150c4:	498d      	ldr	r1, [pc, #564]	@ (80152fc <__gethex+0x2b0>)
 80150c6:	2201      	movs	r2, #1
 80150c8:	4630      	mov	r0, r6
 80150ca:	f7fc fe3c 	bl	8011d46 <strncmp>
 80150ce:	2800      	cmp	r0, #0
 80150d0:	d13f      	bne.n	8015152 <__gethex+0x106>
 80150d2:	b944      	cbnz	r4, 80150e6 <__gethex+0x9a>
 80150d4:	1c74      	adds	r4, r6, #1
 80150d6:	4622      	mov	r2, r4
 80150d8:	4616      	mov	r6, r2
 80150da:	3201      	adds	r2, #1
 80150dc:	7830      	ldrb	r0, [r6, #0]
 80150de:	f7ff ff9f 	bl	8015020 <__hexdig_fun>
 80150e2:	2800      	cmp	r0, #0
 80150e4:	d1f8      	bne.n	80150d8 <__gethex+0x8c>
 80150e6:	1ba4      	subs	r4, r4, r6
 80150e8:	00a7      	lsls	r7, r4, #2
 80150ea:	7833      	ldrb	r3, [r6, #0]
 80150ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80150f0:	2b50      	cmp	r3, #80	@ 0x50
 80150f2:	d13e      	bne.n	8015172 <__gethex+0x126>
 80150f4:	7873      	ldrb	r3, [r6, #1]
 80150f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80150f8:	d033      	beq.n	8015162 <__gethex+0x116>
 80150fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80150fc:	d034      	beq.n	8015168 <__gethex+0x11c>
 80150fe:	1c71      	adds	r1, r6, #1
 8015100:	2400      	movs	r4, #0
 8015102:	7808      	ldrb	r0, [r1, #0]
 8015104:	f7ff ff8c 	bl	8015020 <__hexdig_fun>
 8015108:	1e43      	subs	r3, r0, #1
 801510a:	b2db      	uxtb	r3, r3
 801510c:	2b18      	cmp	r3, #24
 801510e:	d830      	bhi.n	8015172 <__gethex+0x126>
 8015110:	f1a0 0210 	sub.w	r2, r0, #16
 8015114:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015118:	f7ff ff82 	bl	8015020 <__hexdig_fun>
 801511c:	f100 3cff 	add.w	ip, r0, #4294967295
 8015120:	fa5f fc8c 	uxtb.w	ip, ip
 8015124:	f1bc 0f18 	cmp.w	ip, #24
 8015128:	f04f 030a 	mov.w	r3, #10
 801512c:	d91e      	bls.n	801516c <__gethex+0x120>
 801512e:	b104      	cbz	r4, 8015132 <__gethex+0xe6>
 8015130:	4252      	negs	r2, r2
 8015132:	4417      	add	r7, r2
 8015134:	f8ca 1000 	str.w	r1, [sl]
 8015138:	b1ed      	cbz	r5, 8015176 <__gethex+0x12a>
 801513a:	f1bb 0f00 	cmp.w	fp, #0
 801513e:	bf0c      	ite	eq
 8015140:	2506      	moveq	r5, #6
 8015142:	2500      	movne	r5, #0
 8015144:	4628      	mov	r0, r5
 8015146:	b005      	add	sp, #20
 8015148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801514c:	2500      	movs	r5, #0
 801514e:	462c      	mov	r4, r5
 8015150:	e7b0      	b.n	80150b4 <__gethex+0x68>
 8015152:	2c00      	cmp	r4, #0
 8015154:	d1c7      	bne.n	80150e6 <__gethex+0x9a>
 8015156:	4627      	mov	r7, r4
 8015158:	e7c7      	b.n	80150ea <__gethex+0x9e>
 801515a:	464e      	mov	r6, r9
 801515c:	462f      	mov	r7, r5
 801515e:	2501      	movs	r5, #1
 8015160:	e7c3      	b.n	80150ea <__gethex+0x9e>
 8015162:	2400      	movs	r4, #0
 8015164:	1cb1      	adds	r1, r6, #2
 8015166:	e7cc      	b.n	8015102 <__gethex+0xb6>
 8015168:	2401      	movs	r4, #1
 801516a:	e7fb      	b.n	8015164 <__gethex+0x118>
 801516c:	fb03 0002 	mla	r0, r3, r2, r0
 8015170:	e7ce      	b.n	8015110 <__gethex+0xc4>
 8015172:	4631      	mov	r1, r6
 8015174:	e7de      	b.n	8015134 <__gethex+0xe8>
 8015176:	eba6 0309 	sub.w	r3, r6, r9
 801517a:	3b01      	subs	r3, #1
 801517c:	4629      	mov	r1, r5
 801517e:	2b07      	cmp	r3, #7
 8015180:	dc0a      	bgt.n	8015198 <__gethex+0x14c>
 8015182:	9801      	ldr	r0, [sp, #4]
 8015184:	f7fd fdcc 	bl	8012d20 <_Balloc>
 8015188:	4604      	mov	r4, r0
 801518a:	b940      	cbnz	r0, 801519e <__gethex+0x152>
 801518c:	4b5c      	ldr	r3, [pc, #368]	@ (8015300 <__gethex+0x2b4>)
 801518e:	4602      	mov	r2, r0
 8015190:	21e4      	movs	r1, #228	@ 0xe4
 8015192:	485c      	ldr	r0, [pc, #368]	@ (8015304 <__gethex+0x2b8>)
 8015194:	f7ff fec0 	bl	8014f18 <__assert_func>
 8015198:	3101      	adds	r1, #1
 801519a:	105b      	asrs	r3, r3, #1
 801519c:	e7ef      	b.n	801517e <__gethex+0x132>
 801519e:	f100 0a14 	add.w	sl, r0, #20
 80151a2:	2300      	movs	r3, #0
 80151a4:	4655      	mov	r5, sl
 80151a6:	469b      	mov	fp, r3
 80151a8:	45b1      	cmp	r9, r6
 80151aa:	d337      	bcc.n	801521c <__gethex+0x1d0>
 80151ac:	f845 bb04 	str.w	fp, [r5], #4
 80151b0:	eba5 050a 	sub.w	r5, r5, sl
 80151b4:	10ad      	asrs	r5, r5, #2
 80151b6:	6125      	str	r5, [r4, #16]
 80151b8:	4658      	mov	r0, fp
 80151ba:	f7fd fea3 	bl	8012f04 <__hi0bits>
 80151be:	016d      	lsls	r5, r5, #5
 80151c0:	f8d8 6000 	ldr.w	r6, [r8]
 80151c4:	1a2d      	subs	r5, r5, r0
 80151c6:	42b5      	cmp	r5, r6
 80151c8:	dd54      	ble.n	8015274 <__gethex+0x228>
 80151ca:	1bad      	subs	r5, r5, r6
 80151cc:	4629      	mov	r1, r5
 80151ce:	4620      	mov	r0, r4
 80151d0:	f7fe fa37 	bl	8013642 <__any_on>
 80151d4:	4681      	mov	r9, r0
 80151d6:	b178      	cbz	r0, 80151f8 <__gethex+0x1ac>
 80151d8:	1e6b      	subs	r3, r5, #1
 80151da:	1159      	asrs	r1, r3, #5
 80151dc:	f003 021f 	and.w	r2, r3, #31
 80151e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80151e4:	f04f 0901 	mov.w	r9, #1
 80151e8:	fa09 f202 	lsl.w	r2, r9, r2
 80151ec:	420a      	tst	r2, r1
 80151ee:	d003      	beq.n	80151f8 <__gethex+0x1ac>
 80151f0:	454b      	cmp	r3, r9
 80151f2:	dc36      	bgt.n	8015262 <__gethex+0x216>
 80151f4:	f04f 0902 	mov.w	r9, #2
 80151f8:	4629      	mov	r1, r5
 80151fa:	4620      	mov	r0, r4
 80151fc:	f7ff febe 	bl	8014f7c <rshift>
 8015200:	442f      	add	r7, r5
 8015202:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015206:	42bb      	cmp	r3, r7
 8015208:	da42      	bge.n	8015290 <__gethex+0x244>
 801520a:	9801      	ldr	r0, [sp, #4]
 801520c:	4621      	mov	r1, r4
 801520e:	f7fd fdc7 	bl	8012da0 <_Bfree>
 8015212:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015214:	2300      	movs	r3, #0
 8015216:	6013      	str	r3, [r2, #0]
 8015218:	25a3      	movs	r5, #163	@ 0xa3
 801521a:	e793      	b.n	8015144 <__gethex+0xf8>
 801521c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015220:	2a2e      	cmp	r2, #46	@ 0x2e
 8015222:	d012      	beq.n	801524a <__gethex+0x1fe>
 8015224:	2b20      	cmp	r3, #32
 8015226:	d104      	bne.n	8015232 <__gethex+0x1e6>
 8015228:	f845 bb04 	str.w	fp, [r5], #4
 801522c:	f04f 0b00 	mov.w	fp, #0
 8015230:	465b      	mov	r3, fp
 8015232:	7830      	ldrb	r0, [r6, #0]
 8015234:	9303      	str	r3, [sp, #12]
 8015236:	f7ff fef3 	bl	8015020 <__hexdig_fun>
 801523a:	9b03      	ldr	r3, [sp, #12]
 801523c:	f000 000f 	and.w	r0, r0, #15
 8015240:	4098      	lsls	r0, r3
 8015242:	ea4b 0b00 	orr.w	fp, fp, r0
 8015246:	3304      	adds	r3, #4
 8015248:	e7ae      	b.n	80151a8 <__gethex+0x15c>
 801524a:	45b1      	cmp	r9, r6
 801524c:	d8ea      	bhi.n	8015224 <__gethex+0x1d8>
 801524e:	492b      	ldr	r1, [pc, #172]	@ (80152fc <__gethex+0x2b0>)
 8015250:	9303      	str	r3, [sp, #12]
 8015252:	2201      	movs	r2, #1
 8015254:	4630      	mov	r0, r6
 8015256:	f7fc fd76 	bl	8011d46 <strncmp>
 801525a:	9b03      	ldr	r3, [sp, #12]
 801525c:	2800      	cmp	r0, #0
 801525e:	d1e1      	bne.n	8015224 <__gethex+0x1d8>
 8015260:	e7a2      	b.n	80151a8 <__gethex+0x15c>
 8015262:	1ea9      	subs	r1, r5, #2
 8015264:	4620      	mov	r0, r4
 8015266:	f7fe f9ec 	bl	8013642 <__any_on>
 801526a:	2800      	cmp	r0, #0
 801526c:	d0c2      	beq.n	80151f4 <__gethex+0x1a8>
 801526e:	f04f 0903 	mov.w	r9, #3
 8015272:	e7c1      	b.n	80151f8 <__gethex+0x1ac>
 8015274:	da09      	bge.n	801528a <__gethex+0x23e>
 8015276:	1b75      	subs	r5, r6, r5
 8015278:	4621      	mov	r1, r4
 801527a:	9801      	ldr	r0, [sp, #4]
 801527c:	462a      	mov	r2, r5
 801527e:	f7fd ffa7 	bl	80131d0 <__lshift>
 8015282:	1b7f      	subs	r7, r7, r5
 8015284:	4604      	mov	r4, r0
 8015286:	f100 0a14 	add.w	sl, r0, #20
 801528a:	f04f 0900 	mov.w	r9, #0
 801528e:	e7b8      	b.n	8015202 <__gethex+0x1b6>
 8015290:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015294:	42bd      	cmp	r5, r7
 8015296:	dd6f      	ble.n	8015378 <__gethex+0x32c>
 8015298:	1bed      	subs	r5, r5, r7
 801529a:	42ae      	cmp	r6, r5
 801529c:	dc34      	bgt.n	8015308 <__gethex+0x2bc>
 801529e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80152a2:	2b02      	cmp	r3, #2
 80152a4:	d022      	beq.n	80152ec <__gethex+0x2a0>
 80152a6:	2b03      	cmp	r3, #3
 80152a8:	d024      	beq.n	80152f4 <__gethex+0x2a8>
 80152aa:	2b01      	cmp	r3, #1
 80152ac:	d115      	bne.n	80152da <__gethex+0x28e>
 80152ae:	42ae      	cmp	r6, r5
 80152b0:	d113      	bne.n	80152da <__gethex+0x28e>
 80152b2:	2e01      	cmp	r6, #1
 80152b4:	d10b      	bne.n	80152ce <__gethex+0x282>
 80152b6:	9a02      	ldr	r2, [sp, #8]
 80152b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80152bc:	6013      	str	r3, [r2, #0]
 80152be:	2301      	movs	r3, #1
 80152c0:	6123      	str	r3, [r4, #16]
 80152c2:	f8ca 3000 	str.w	r3, [sl]
 80152c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80152c8:	2562      	movs	r5, #98	@ 0x62
 80152ca:	601c      	str	r4, [r3, #0]
 80152cc:	e73a      	b.n	8015144 <__gethex+0xf8>
 80152ce:	1e71      	subs	r1, r6, #1
 80152d0:	4620      	mov	r0, r4
 80152d2:	f7fe f9b6 	bl	8013642 <__any_on>
 80152d6:	2800      	cmp	r0, #0
 80152d8:	d1ed      	bne.n	80152b6 <__gethex+0x26a>
 80152da:	9801      	ldr	r0, [sp, #4]
 80152dc:	4621      	mov	r1, r4
 80152de:	f7fd fd5f 	bl	8012da0 <_Bfree>
 80152e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80152e4:	2300      	movs	r3, #0
 80152e6:	6013      	str	r3, [r2, #0]
 80152e8:	2550      	movs	r5, #80	@ 0x50
 80152ea:	e72b      	b.n	8015144 <__gethex+0xf8>
 80152ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d1f3      	bne.n	80152da <__gethex+0x28e>
 80152f2:	e7e0      	b.n	80152b6 <__gethex+0x26a>
 80152f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d1dd      	bne.n	80152b6 <__gethex+0x26a>
 80152fa:	e7ee      	b.n	80152da <__gethex+0x28e>
 80152fc:	08017708 	.word	0x08017708
 8015300:	0801759b 	.word	0x0801759b
 8015304:	080178d1 	.word	0x080178d1
 8015308:	1e6f      	subs	r7, r5, #1
 801530a:	f1b9 0f00 	cmp.w	r9, #0
 801530e:	d130      	bne.n	8015372 <__gethex+0x326>
 8015310:	b127      	cbz	r7, 801531c <__gethex+0x2d0>
 8015312:	4639      	mov	r1, r7
 8015314:	4620      	mov	r0, r4
 8015316:	f7fe f994 	bl	8013642 <__any_on>
 801531a:	4681      	mov	r9, r0
 801531c:	117a      	asrs	r2, r7, #5
 801531e:	2301      	movs	r3, #1
 8015320:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015324:	f007 071f 	and.w	r7, r7, #31
 8015328:	40bb      	lsls	r3, r7
 801532a:	4213      	tst	r3, r2
 801532c:	4629      	mov	r1, r5
 801532e:	4620      	mov	r0, r4
 8015330:	bf18      	it	ne
 8015332:	f049 0902 	orrne.w	r9, r9, #2
 8015336:	f7ff fe21 	bl	8014f7c <rshift>
 801533a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801533e:	1b76      	subs	r6, r6, r5
 8015340:	2502      	movs	r5, #2
 8015342:	f1b9 0f00 	cmp.w	r9, #0
 8015346:	d047      	beq.n	80153d8 <__gethex+0x38c>
 8015348:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801534c:	2b02      	cmp	r3, #2
 801534e:	d015      	beq.n	801537c <__gethex+0x330>
 8015350:	2b03      	cmp	r3, #3
 8015352:	d017      	beq.n	8015384 <__gethex+0x338>
 8015354:	2b01      	cmp	r3, #1
 8015356:	d109      	bne.n	801536c <__gethex+0x320>
 8015358:	f019 0f02 	tst.w	r9, #2
 801535c:	d006      	beq.n	801536c <__gethex+0x320>
 801535e:	f8da 3000 	ldr.w	r3, [sl]
 8015362:	ea49 0903 	orr.w	r9, r9, r3
 8015366:	f019 0f01 	tst.w	r9, #1
 801536a:	d10e      	bne.n	801538a <__gethex+0x33e>
 801536c:	f045 0510 	orr.w	r5, r5, #16
 8015370:	e032      	b.n	80153d8 <__gethex+0x38c>
 8015372:	f04f 0901 	mov.w	r9, #1
 8015376:	e7d1      	b.n	801531c <__gethex+0x2d0>
 8015378:	2501      	movs	r5, #1
 801537a:	e7e2      	b.n	8015342 <__gethex+0x2f6>
 801537c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801537e:	f1c3 0301 	rsb	r3, r3, #1
 8015382:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015386:	2b00      	cmp	r3, #0
 8015388:	d0f0      	beq.n	801536c <__gethex+0x320>
 801538a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801538e:	f104 0314 	add.w	r3, r4, #20
 8015392:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015396:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801539a:	f04f 0c00 	mov.w	ip, #0
 801539e:	4618      	mov	r0, r3
 80153a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80153a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80153a8:	d01b      	beq.n	80153e2 <__gethex+0x396>
 80153aa:	3201      	adds	r2, #1
 80153ac:	6002      	str	r2, [r0, #0]
 80153ae:	2d02      	cmp	r5, #2
 80153b0:	f104 0314 	add.w	r3, r4, #20
 80153b4:	d13c      	bne.n	8015430 <__gethex+0x3e4>
 80153b6:	f8d8 2000 	ldr.w	r2, [r8]
 80153ba:	3a01      	subs	r2, #1
 80153bc:	42b2      	cmp	r2, r6
 80153be:	d109      	bne.n	80153d4 <__gethex+0x388>
 80153c0:	1171      	asrs	r1, r6, #5
 80153c2:	2201      	movs	r2, #1
 80153c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80153c8:	f006 061f 	and.w	r6, r6, #31
 80153cc:	fa02 f606 	lsl.w	r6, r2, r6
 80153d0:	421e      	tst	r6, r3
 80153d2:	d13a      	bne.n	801544a <__gethex+0x3fe>
 80153d4:	f045 0520 	orr.w	r5, r5, #32
 80153d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153da:	601c      	str	r4, [r3, #0]
 80153dc:	9b02      	ldr	r3, [sp, #8]
 80153de:	601f      	str	r7, [r3, #0]
 80153e0:	e6b0      	b.n	8015144 <__gethex+0xf8>
 80153e2:	4299      	cmp	r1, r3
 80153e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80153e8:	d8d9      	bhi.n	801539e <__gethex+0x352>
 80153ea:	68a3      	ldr	r3, [r4, #8]
 80153ec:	459b      	cmp	fp, r3
 80153ee:	db17      	blt.n	8015420 <__gethex+0x3d4>
 80153f0:	6861      	ldr	r1, [r4, #4]
 80153f2:	9801      	ldr	r0, [sp, #4]
 80153f4:	3101      	adds	r1, #1
 80153f6:	f7fd fc93 	bl	8012d20 <_Balloc>
 80153fa:	4681      	mov	r9, r0
 80153fc:	b918      	cbnz	r0, 8015406 <__gethex+0x3ba>
 80153fe:	4b1a      	ldr	r3, [pc, #104]	@ (8015468 <__gethex+0x41c>)
 8015400:	4602      	mov	r2, r0
 8015402:	2184      	movs	r1, #132	@ 0x84
 8015404:	e6c5      	b.n	8015192 <__gethex+0x146>
 8015406:	6922      	ldr	r2, [r4, #16]
 8015408:	3202      	adds	r2, #2
 801540a:	f104 010c 	add.w	r1, r4, #12
 801540e:	0092      	lsls	r2, r2, #2
 8015410:	300c      	adds	r0, #12
 8015412:	f7fc fd22 	bl	8011e5a <memcpy>
 8015416:	4621      	mov	r1, r4
 8015418:	9801      	ldr	r0, [sp, #4]
 801541a:	f7fd fcc1 	bl	8012da0 <_Bfree>
 801541e:	464c      	mov	r4, r9
 8015420:	6923      	ldr	r3, [r4, #16]
 8015422:	1c5a      	adds	r2, r3, #1
 8015424:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015428:	6122      	str	r2, [r4, #16]
 801542a:	2201      	movs	r2, #1
 801542c:	615a      	str	r2, [r3, #20]
 801542e:	e7be      	b.n	80153ae <__gethex+0x362>
 8015430:	6922      	ldr	r2, [r4, #16]
 8015432:	455a      	cmp	r2, fp
 8015434:	dd0b      	ble.n	801544e <__gethex+0x402>
 8015436:	2101      	movs	r1, #1
 8015438:	4620      	mov	r0, r4
 801543a:	f7ff fd9f 	bl	8014f7c <rshift>
 801543e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015442:	3701      	adds	r7, #1
 8015444:	42bb      	cmp	r3, r7
 8015446:	f6ff aee0 	blt.w	801520a <__gethex+0x1be>
 801544a:	2501      	movs	r5, #1
 801544c:	e7c2      	b.n	80153d4 <__gethex+0x388>
 801544e:	f016 061f 	ands.w	r6, r6, #31
 8015452:	d0fa      	beq.n	801544a <__gethex+0x3fe>
 8015454:	4453      	add	r3, sl
 8015456:	f1c6 0620 	rsb	r6, r6, #32
 801545a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801545e:	f7fd fd51 	bl	8012f04 <__hi0bits>
 8015462:	42b0      	cmp	r0, r6
 8015464:	dbe7      	blt.n	8015436 <__gethex+0x3ea>
 8015466:	e7f0      	b.n	801544a <__gethex+0x3fe>
 8015468:	0801759b 	.word	0x0801759b

0801546c <L_shift>:
 801546c:	f1c2 0208 	rsb	r2, r2, #8
 8015470:	0092      	lsls	r2, r2, #2
 8015472:	b570      	push	{r4, r5, r6, lr}
 8015474:	f1c2 0620 	rsb	r6, r2, #32
 8015478:	6843      	ldr	r3, [r0, #4]
 801547a:	6804      	ldr	r4, [r0, #0]
 801547c:	fa03 f506 	lsl.w	r5, r3, r6
 8015480:	432c      	orrs	r4, r5
 8015482:	40d3      	lsrs	r3, r2
 8015484:	6004      	str	r4, [r0, #0]
 8015486:	f840 3f04 	str.w	r3, [r0, #4]!
 801548a:	4288      	cmp	r0, r1
 801548c:	d3f4      	bcc.n	8015478 <L_shift+0xc>
 801548e:	bd70      	pop	{r4, r5, r6, pc}

08015490 <__match>:
 8015490:	b530      	push	{r4, r5, lr}
 8015492:	6803      	ldr	r3, [r0, #0]
 8015494:	3301      	adds	r3, #1
 8015496:	f811 4b01 	ldrb.w	r4, [r1], #1
 801549a:	b914      	cbnz	r4, 80154a2 <__match+0x12>
 801549c:	6003      	str	r3, [r0, #0]
 801549e:	2001      	movs	r0, #1
 80154a0:	bd30      	pop	{r4, r5, pc}
 80154a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80154aa:	2d19      	cmp	r5, #25
 80154ac:	bf98      	it	ls
 80154ae:	3220      	addls	r2, #32
 80154b0:	42a2      	cmp	r2, r4
 80154b2:	d0f0      	beq.n	8015496 <__match+0x6>
 80154b4:	2000      	movs	r0, #0
 80154b6:	e7f3      	b.n	80154a0 <__match+0x10>

080154b8 <__hexnan>:
 80154b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154bc:	680b      	ldr	r3, [r1, #0]
 80154be:	6801      	ldr	r1, [r0, #0]
 80154c0:	115e      	asrs	r6, r3, #5
 80154c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80154c6:	f013 031f 	ands.w	r3, r3, #31
 80154ca:	b087      	sub	sp, #28
 80154cc:	bf18      	it	ne
 80154ce:	3604      	addne	r6, #4
 80154d0:	2500      	movs	r5, #0
 80154d2:	1f37      	subs	r7, r6, #4
 80154d4:	4682      	mov	sl, r0
 80154d6:	4690      	mov	r8, r2
 80154d8:	9301      	str	r3, [sp, #4]
 80154da:	f846 5c04 	str.w	r5, [r6, #-4]
 80154de:	46b9      	mov	r9, r7
 80154e0:	463c      	mov	r4, r7
 80154e2:	9502      	str	r5, [sp, #8]
 80154e4:	46ab      	mov	fp, r5
 80154e6:	784a      	ldrb	r2, [r1, #1]
 80154e8:	1c4b      	adds	r3, r1, #1
 80154ea:	9303      	str	r3, [sp, #12]
 80154ec:	b342      	cbz	r2, 8015540 <__hexnan+0x88>
 80154ee:	4610      	mov	r0, r2
 80154f0:	9105      	str	r1, [sp, #20]
 80154f2:	9204      	str	r2, [sp, #16]
 80154f4:	f7ff fd94 	bl	8015020 <__hexdig_fun>
 80154f8:	2800      	cmp	r0, #0
 80154fa:	d151      	bne.n	80155a0 <__hexnan+0xe8>
 80154fc:	9a04      	ldr	r2, [sp, #16]
 80154fe:	9905      	ldr	r1, [sp, #20]
 8015500:	2a20      	cmp	r2, #32
 8015502:	d818      	bhi.n	8015536 <__hexnan+0x7e>
 8015504:	9b02      	ldr	r3, [sp, #8]
 8015506:	459b      	cmp	fp, r3
 8015508:	dd13      	ble.n	8015532 <__hexnan+0x7a>
 801550a:	454c      	cmp	r4, r9
 801550c:	d206      	bcs.n	801551c <__hexnan+0x64>
 801550e:	2d07      	cmp	r5, #7
 8015510:	dc04      	bgt.n	801551c <__hexnan+0x64>
 8015512:	462a      	mov	r2, r5
 8015514:	4649      	mov	r1, r9
 8015516:	4620      	mov	r0, r4
 8015518:	f7ff ffa8 	bl	801546c <L_shift>
 801551c:	4544      	cmp	r4, r8
 801551e:	d952      	bls.n	80155c6 <__hexnan+0x10e>
 8015520:	2300      	movs	r3, #0
 8015522:	f1a4 0904 	sub.w	r9, r4, #4
 8015526:	f844 3c04 	str.w	r3, [r4, #-4]
 801552a:	f8cd b008 	str.w	fp, [sp, #8]
 801552e:	464c      	mov	r4, r9
 8015530:	461d      	mov	r5, r3
 8015532:	9903      	ldr	r1, [sp, #12]
 8015534:	e7d7      	b.n	80154e6 <__hexnan+0x2e>
 8015536:	2a29      	cmp	r2, #41	@ 0x29
 8015538:	d157      	bne.n	80155ea <__hexnan+0x132>
 801553a:	3102      	adds	r1, #2
 801553c:	f8ca 1000 	str.w	r1, [sl]
 8015540:	f1bb 0f00 	cmp.w	fp, #0
 8015544:	d051      	beq.n	80155ea <__hexnan+0x132>
 8015546:	454c      	cmp	r4, r9
 8015548:	d206      	bcs.n	8015558 <__hexnan+0xa0>
 801554a:	2d07      	cmp	r5, #7
 801554c:	dc04      	bgt.n	8015558 <__hexnan+0xa0>
 801554e:	462a      	mov	r2, r5
 8015550:	4649      	mov	r1, r9
 8015552:	4620      	mov	r0, r4
 8015554:	f7ff ff8a 	bl	801546c <L_shift>
 8015558:	4544      	cmp	r4, r8
 801555a:	d936      	bls.n	80155ca <__hexnan+0x112>
 801555c:	f1a8 0204 	sub.w	r2, r8, #4
 8015560:	4623      	mov	r3, r4
 8015562:	f853 1b04 	ldr.w	r1, [r3], #4
 8015566:	f842 1f04 	str.w	r1, [r2, #4]!
 801556a:	429f      	cmp	r7, r3
 801556c:	d2f9      	bcs.n	8015562 <__hexnan+0xaa>
 801556e:	1b3b      	subs	r3, r7, r4
 8015570:	f023 0303 	bic.w	r3, r3, #3
 8015574:	3304      	adds	r3, #4
 8015576:	3401      	adds	r4, #1
 8015578:	3e03      	subs	r6, #3
 801557a:	42b4      	cmp	r4, r6
 801557c:	bf88      	it	hi
 801557e:	2304      	movhi	r3, #4
 8015580:	4443      	add	r3, r8
 8015582:	2200      	movs	r2, #0
 8015584:	f843 2b04 	str.w	r2, [r3], #4
 8015588:	429f      	cmp	r7, r3
 801558a:	d2fb      	bcs.n	8015584 <__hexnan+0xcc>
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	b91b      	cbnz	r3, 8015598 <__hexnan+0xe0>
 8015590:	4547      	cmp	r7, r8
 8015592:	d128      	bne.n	80155e6 <__hexnan+0x12e>
 8015594:	2301      	movs	r3, #1
 8015596:	603b      	str	r3, [r7, #0]
 8015598:	2005      	movs	r0, #5
 801559a:	b007      	add	sp, #28
 801559c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155a0:	3501      	adds	r5, #1
 80155a2:	2d08      	cmp	r5, #8
 80155a4:	f10b 0b01 	add.w	fp, fp, #1
 80155a8:	dd06      	ble.n	80155b8 <__hexnan+0x100>
 80155aa:	4544      	cmp	r4, r8
 80155ac:	d9c1      	bls.n	8015532 <__hexnan+0x7a>
 80155ae:	2300      	movs	r3, #0
 80155b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80155b4:	2501      	movs	r5, #1
 80155b6:	3c04      	subs	r4, #4
 80155b8:	6822      	ldr	r2, [r4, #0]
 80155ba:	f000 000f 	and.w	r0, r0, #15
 80155be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80155c2:	6020      	str	r0, [r4, #0]
 80155c4:	e7b5      	b.n	8015532 <__hexnan+0x7a>
 80155c6:	2508      	movs	r5, #8
 80155c8:	e7b3      	b.n	8015532 <__hexnan+0x7a>
 80155ca:	9b01      	ldr	r3, [sp, #4]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d0dd      	beq.n	801558c <__hexnan+0xd4>
 80155d0:	f1c3 0320 	rsb	r3, r3, #32
 80155d4:	f04f 32ff 	mov.w	r2, #4294967295
 80155d8:	40da      	lsrs	r2, r3
 80155da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80155de:	4013      	ands	r3, r2
 80155e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80155e4:	e7d2      	b.n	801558c <__hexnan+0xd4>
 80155e6:	3f04      	subs	r7, #4
 80155e8:	e7d0      	b.n	801558c <__hexnan+0xd4>
 80155ea:	2004      	movs	r0, #4
 80155ec:	e7d5      	b.n	801559a <__hexnan+0xe2>

080155ee <__ascii_mbtowc>:
 80155ee:	b082      	sub	sp, #8
 80155f0:	b901      	cbnz	r1, 80155f4 <__ascii_mbtowc+0x6>
 80155f2:	a901      	add	r1, sp, #4
 80155f4:	b142      	cbz	r2, 8015608 <__ascii_mbtowc+0x1a>
 80155f6:	b14b      	cbz	r3, 801560c <__ascii_mbtowc+0x1e>
 80155f8:	7813      	ldrb	r3, [r2, #0]
 80155fa:	600b      	str	r3, [r1, #0]
 80155fc:	7812      	ldrb	r2, [r2, #0]
 80155fe:	1e10      	subs	r0, r2, #0
 8015600:	bf18      	it	ne
 8015602:	2001      	movne	r0, #1
 8015604:	b002      	add	sp, #8
 8015606:	4770      	bx	lr
 8015608:	4610      	mov	r0, r2
 801560a:	e7fb      	b.n	8015604 <__ascii_mbtowc+0x16>
 801560c:	f06f 0001 	mvn.w	r0, #1
 8015610:	e7f8      	b.n	8015604 <__ascii_mbtowc+0x16>

08015612 <_realloc_r>:
 8015612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015616:	4680      	mov	r8, r0
 8015618:	4615      	mov	r5, r2
 801561a:	460c      	mov	r4, r1
 801561c:	b921      	cbnz	r1, 8015628 <_realloc_r+0x16>
 801561e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015622:	4611      	mov	r1, r2
 8015624:	f7fd baf0 	b.w	8012c08 <_malloc_r>
 8015628:	b92a      	cbnz	r2, 8015636 <_realloc_r+0x24>
 801562a:	f7fd fa79 	bl	8012b20 <_free_r>
 801562e:	2400      	movs	r4, #0
 8015630:	4620      	mov	r0, r4
 8015632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015636:	f000 f8b2 	bl	801579e <_malloc_usable_size_r>
 801563a:	4285      	cmp	r5, r0
 801563c:	4606      	mov	r6, r0
 801563e:	d802      	bhi.n	8015646 <_realloc_r+0x34>
 8015640:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015644:	d8f4      	bhi.n	8015630 <_realloc_r+0x1e>
 8015646:	4629      	mov	r1, r5
 8015648:	4640      	mov	r0, r8
 801564a:	f7fd fadd 	bl	8012c08 <_malloc_r>
 801564e:	4607      	mov	r7, r0
 8015650:	2800      	cmp	r0, #0
 8015652:	d0ec      	beq.n	801562e <_realloc_r+0x1c>
 8015654:	42b5      	cmp	r5, r6
 8015656:	462a      	mov	r2, r5
 8015658:	4621      	mov	r1, r4
 801565a:	bf28      	it	cs
 801565c:	4632      	movcs	r2, r6
 801565e:	f7fc fbfc 	bl	8011e5a <memcpy>
 8015662:	4621      	mov	r1, r4
 8015664:	4640      	mov	r0, r8
 8015666:	f7fd fa5b 	bl	8012b20 <_free_r>
 801566a:	463c      	mov	r4, r7
 801566c:	e7e0      	b.n	8015630 <_realloc_r+0x1e>
	...

08015670 <_strtoul_l.constprop.0>:
 8015670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015674:	4e34      	ldr	r6, [pc, #208]	@ (8015748 <_strtoul_l.constprop.0+0xd8>)
 8015676:	4686      	mov	lr, r0
 8015678:	460d      	mov	r5, r1
 801567a:	4628      	mov	r0, r5
 801567c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015680:	5d37      	ldrb	r7, [r6, r4]
 8015682:	f017 0708 	ands.w	r7, r7, #8
 8015686:	d1f8      	bne.n	801567a <_strtoul_l.constprop.0+0xa>
 8015688:	2c2d      	cmp	r4, #45	@ 0x2d
 801568a:	d12f      	bne.n	80156ec <_strtoul_l.constprop.0+0x7c>
 801568c:	782c      	ldrb	r4, [r5, #0]
 801568e:	2701      	movs	r7, #1
 8015690:	1c85      	adds	r5, r0, #2
 8015692:	f033 0010 	bics.w	r0, r3, #16
 8015696:	d109      	bne.n	80156ac <_strtoul_l.constprop.0+0x3c>
 8015698:	2c30      	cmp	r4, #48	@ 0x30
 801569a:	d12c      	bne.n	80156f6 <_strtoul_l.constprop.0+0x86>
 801569c:	7828      	ldrb	r0, [r5, #0]
 801569e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80156a2:	2858      	cmp	r0, #88	@ 0x58
 80156a4:	d127      	bne.n	80156f6 <_strtoul_l.constprop.0+0x86>
 80156a6:	786c      	ldrb	r4, [r5, #1]
 80156a8:	2310      	movs	r3, #16
 80156aa:	3502      	adds	r5, #2
 80156ac:	f04f 38ff 	mov.w	r8, #4294967295
 80156b0:	2600      	movs	r6, #0
 80156b2:	fbb8 f8f3 	udiv	r8, r8, r3
 80156b6:	fb03 f908 	mul.w	r9, r3, r8
 80156ba:	ea6f 0909 	mvn.w	r9, r9
 80156be:	4630      	mov	r0, r6
 80156c0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80156c4:	f1bc 0f09 	cmp.w	ip, #9
 80156c8:	d81c      	bhi.n	8015704 <_strtoul_l.constprop.0+0x94>
 80156ca:	4664      	mov	r4, ip
 80156cc:	42a3      	cmp	r3, r4
 80156ce:	dd2a      	ble.n	8015726 <_strtoul_l.constprop.0+0xb6>
 80156d0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80156d4:	d007      	beq.n	80156e6 <_strtoul_l.constprop.0+0x76>
 80156d6:	4580      	cmp	r8, r0
 80156d8:	d322      	bcc.n	8015720 <_strtoul_l.constprop.0+0xb0>
 80156da:	d101      	bne.n	80156e0 <_strtoul_l.constprop.0+0x70>
 80156dc:	45a1      	cmp	r9, r4
 80156de:	db1f      	blt.n	8015720 <_strtoul_l.constprop.0+0xb0>
 80156e0:	fb00 4003 	mla	r0, r0, r3, r4
 80156e4:	2601      	movs	r6, #1
 80156e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80156ea:	e7e9      	b.n	80156c0 <_strtoul_l.constprop.0+0x50>
 80156ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80156ee:	bf04      	itt	eq
 80156f0:	782c      	ldrbeq	r4, [r5, #0]
 80156f2:	1c85      	addeq	r5, r0, #2
 80156f4:	e7cd      	b.n	8015692 <_strtoul_l.constprop.0+0x22>
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d1d8      	bne.n	80156ac <_strtoul_l.constprop.0+0x3c>
 80156fa:	2c30      	cmp	r4, #48	@ 0x30
 80156fc:	bf0c      	ite	eq
 80156fe:	2308      	moveq	r3, #8
 8015700:	230a      	movne	r3, #10
 8015702:	e7d3      	b.n	80156ac <_strtoul_l.constprop.0+0x3c>
 8015704:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015708:	f1bc 0f19 	cmp.w	ip, #25
 801570c:	d801      	bhi.n	8015712 <_strtoul_l.constprop.0+0xa2>
 801570e:	3c37      	subs	r4, #55	@ 0x37
 8015710:	e7dc      	b.n	80156cc <_strtoul_l.constprop.0+0x5c>
 8015712:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8015716:	f1bc 0f19 	cmp.w	ip, #25
 801571a:	d804      	bhi.n	8015726 <_strtoul_l.constprop.0+0xb6>
 801571c:	3c57      	subs	r4, #87	@ 0x57
 801571e:	e7d5      	b.n	80156cc <_strtoul_l.constprop.0+0x5c>
 8015720:	f04f 36ff 	mov.w	r6, #4294967295
 8015724:	e7df      	b.n	80156e6 <_strtoul_l.constprop.0+0x76>
 8015726:	1c73      	adds	r3, r6, #1
 8015728:	d106      	bne.n	8015738 <_strtoul_l.constprop.0+0xc8>
 801572a:	2322      	movs	r3, #34	@ 0x22
 801572c:	f8ce 3000 	str.w	r3, [lr]
 8015730:	4630      	mov	r0, r6
 8015732:	b932      	cbnz	r2, 8015742 <_strtoul_l.constprop.0+0xd2>
 8015734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015738:	b107      	cbz	r7, 801573c <_strtoul_l.constprop.0+0xcc>
 801573a:	4240      	negs	r0, r0
 801573c:	2a00      	cmp	r2, #0
 801573e:	d0f9      	beq.n	8015734 <_strtoul_l.constprop.0+0xc4>
 8015740:	b106      	cbz	r6, 8015744 <_strtoul_l.constprop.0+0xd4>
 8015742:	1e69      	subs	r1, r5, #1
 8015744:	6011      	str	r1, [r2, #0]
 8015746:	e7f5      	b.n	8015734 <_strtoul_l.constprop.0+0xc4>
 8015748:	08017761 	.word	0x08017761

0801574c <_strtoul_r>:
 801574c:	f7ff bf90 	b.w	8015670 <_strtoul_l.constprop.0>

08015750 <__ascii_wctomb>:
 8015750:	4603      	mov	r3, r0
 8015752:	4608      	mov	r0, r1
 8015754:	b141      	cbz	r1, 8015768 <__ascii_wctomb+0x18>
 8015756:	2aff      	cmp	r2, #255	@ 0xff
 8015758:	d904      	bls.n	8015764 <__ascii_wctomb+0x14>
 801575a:	228a      	movs	r2, #138	@ 0x8a
 801575c:	601a      	str	r2, [r3, #0]
 801575e:	f04f 30ff 	mov.w	r0, #4294967295
 8015762:	4770      	bx	lr
 8015764:	700a      	strb	r2, [r1, #0]
 8015766:	2001      	movs	r0, #1
 8015768:	4770      	bx	lr
	...

0801576c <fiprintf>:
 801576c:	b40e      	push	{r1, r2, r3}
 801576e:	b503      	push	{r0, r1, lr}
 8015770:	4601      	mov	r1, r0
 8015772:	ab03      	add	r3, sp, #12
 8015774:	4805      	ldr	r0, [pc, #20]	@ (801578c <fiprintf+0x20>)
 8015776:	f853 2b04 	ldr.w	r2, [r3], #4
 801577a:	6800      	ldr	r0, [r0, #0]
 801577c:	9301      	str	r3, [sp, #4]
 801577e:	f000 f83f 	bl	8015800 <_vfiprintf_r>
 8015782:	b002      	add	sp, #8
 8015784:	f85d eb04 	ldr.w	lr, [sp], #4
 8015788:	b003      	add	sp, #12
 801578a:	4770      	bx	lr
 801578c:	200001cc 	.word	0x200001cc

08015790 <abort>:
 8015790:	b508      	push	{r3, lr}
 8015792:	2006      	movs	r0, #6
 8015794:	f000 fa08 	bl	8015ba8 <raise>
 8015798:	2001      	movs	r0, #1
 801579a:	f7ee fe83 	bl	80044a4 <_exit>

0801579e <_malloc_usable_size_r>:
 801579e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80157a2:	1f18      	subs	r0, r3, #4
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	bfbc      	itt	lt
 80157a8:	580b      	ldrlt	r3, [r1, r0]
 80157aa:	18c0      	addlt	r0, r0, r3
 80157ac:	4770      	bx	lr

080157ae <__sfputc_r>:
 80157ae:	6893      	ldr	r3, [r2, #8]
 80157b0:	3b01      	subs	r3, #1
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	b410      	push	{r4}
 80157b6:	6093      	str	r3, [r2, #8]
 80157b8:	da08      	bge.n	80157cc <__sfputc_r+0x1e>
 80157ba:	6994      	ldr	r4, [r2, #24]
 80157bc:	42a3      	cmp	r3, r4
 80157be:	db01      	blt.n	80157c4 <__sfputc_r+0x16>
 80157c0:	290a      	cmp	r1, #10
 80157c2:	d103      	bne.n	80157cc <__sfputc_r+0x1e>
 80157c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80157c8:	f000 b932 	b.w	8015a30 <__swbuf_r>
 80157cc:	6813      	ldr	r3, [r2, #0]
 80157ce:	1c58      	adds	r0, r3, #1
 80157d0:	6010      	str	r0, [r2, #0]
 80157d2:	7019      	strb	r1, [r3, #0]
 80157d4:	4608      	mov	r0, r1
 80157d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80157da:	4770      	bx	lr

080157dc <__sfputs_r>:
 80157dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157de:	4606      	mov	r6, r0
 80157e0:	460f      	mov	r7, r1
 80157e2:	4614      	mov	r4, r2
 80157e4:	18d5      	adds	r5, r2, r3
 80157e6:	42ac      	cmp	r4, r5
 80157e8:	d101      	bne.n	80157ee <__sfputs_r+0x12>
 80157ea:	2000      	movs	r0, #0
 80157ec:	e007      	b.n	80157fe <__sfputs_r+0x22>
 80157ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157f2:	463a      	mov	r2, r7
 80157f4:	4630      	mov	r0, r6
 80157f6:	f7ff ffda 	bl	80157ae <__sfputc_r>
 80157fa:	1c43      	adds	r3, r0, #1
 80157fc:	d1f3      	bne.n	80157e6 <__sfputs_r+0xa>
 80157fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015800 <_vfiprintf_r>:
 8015800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015804:	460d      	mov	r5, r1
 8015806:	b09d      	sub	sp, #116	@ 0x74
 8015808:	4614      	mov	r4, r2
 801580a:	4698      	mov	r8, r3
 801580c:	4606      	mov	r6, r0
 801580e:	b118      	cbz	r0, 8015818 <_vfiprintf_r+0x18>
 8015810:	6a03      	ldr	r3, [r0, #32]
 8015812:	b90b      	cbnz	r3, 8015818 <_vfiprintf_r+0x18>
 8015814:	f7fc f9ca 	bl	8011bac <__sinit>
 8015818:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801581a:	07d9      	lsls	r1, r3, #31
 801581c:	d405      	bmi.n	801582a <_vfiprintf_r+0x2a>
 801581e:	89ab      	ldrh	r3, [r5, #12]
 8015820:	059a      	lsls	r2, r3, #22
 8015822:	d402      	bmi.n	801582a <_vfiprintf_r+0x2a>
 8015824:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015826:	f7fc fb16 	bl	8011e56 <__retarget_lock_acquire_recursive>
 801582a:	89ab      	ldrh	r3, [r5, #12]
 801582c:	071b      	lsls	r3, r3, #28
 801582e:	d501      	bpl.n	8015834 <_vfiprintf_r+0x34>
 8015830:	692b      	ldr	r3, [r5, #16]
 8015832:	b99b      	cbnz	r3, 801585c <_vfiprintf_r+0x5c>
 8015834:	4629      	mov	r1, r5
 8015836:	4630      	mov	r0, r6
 8015838:	f000 f938 	bl	8015aac <__swsetup_r>
 801583c:	b170      	cbz	r0, 801585c <_vfiprintf_r+0x5c>
 801583e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015840:	07dc      	lsls	r4, r3, #31
 8015842:	d504      	bpl.n	801584e <_vfiprintf_r+0x4e>
 8015844:	f04f 30ff 	mov.w	r0, #4294967295
 8015848:	b01d      	add	sp, #116	@ 0x74
 801584a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801584e:	89ab      	ldrh	r3, [r5, #12]
 8015850:	0598      	lsls	r0, r3, #22
 8015852:	d4f7      	bmi.n	8015844 <_vfiprintf_r+0x44>
 8015854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015856:	f7fc faff 	bl	8011e58 <__retarget_lock_release_recursive>
 801585a:	e7f3      	b.n	8015844 <_vfiprintf_r+0x44>
 801585c:	2300      	movs	r3, #0
 801585e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015860:	2320      	movs	r3, #32
 8015862:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015866:	f8cd 800c 	str.w	r8, [sp, #12]
 801586a:	2330      	movs	r3, #48	@ 0x30
 801586c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015a1c <_vfiprintf_r+0x21c>
 8015870:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015874:	f04f 0901 	mov.w	r9, #1
 8015878:	4623      	mov	r3, r4
 801587a:	469a      	mov	sl, r3
 801587c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015880:	b10a      	cbz	r2, 8015886 <_vfiprintf_r+0x86>
 8015882:	2a25      	cmp	r2, #37	@ 0x25
 8015884:	d1f9      	bne.n	801587a <_vfiprintf_r+0x7a>
 8015886:	ebba 0b04 	subs.w	fp, sl, r4
 801588a:	d00b      	beq.n	80158a4 <_vfiprintf_r+0xa4>
 801588c:	465b      	mov	r3, fp
 801588e:	4622      	mov	r2, r4
 8015890:	4629      	mov	r1, r5
 8015892:	4630      	mov	r0, r6
 8015894:	f7ff ffa2 	bl	80157dc <__sfputs_r>
 8015898:	3001      	adds	r0, #1
 801589a:	f000 80a7 	beq.w	80159ec <_vfiprintf_r+0x1ec>
 801589e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80158a0:	445a      	add	r2, fp
 80158a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80158a4:	f89a 3000 	ldrb.w	r3, [sl]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	f000 809f 	beq.w	80159ec <_vfiprintf_r+0x1ec>
 80158ae:	2300      	movs	r3, #0
 80158b0:	f04f 32ff 	mov.w	r2, #4294967295
 80158b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80158b8:	f10a 0a01 	add.w	sl, sl, #1
 80158bc:	9304      	str	r3, [sp, #16]
 80158be:	9307      	str	r3, [sp, #28]
 80158c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80158c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80158c6:	4654      	mov	r4, sl
 80158c8:	2205      	movs	r2, #5
 80158ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158ce:	4853      	ldr	r0, [pc, #332]	@ (8015a1c <_vfiprintf_r+0x21c>)
 80158d0:	f7ea fca6 	bl	8000220 <memchr>
 80158d4:	9a04      	ldr	r2, [sp, #16]
 80158d6:	b9d8      	cbnz	r0, 8015910 <_vfiprintf_r+0x110>
 80158d8:	06d1      	lsls	r1, r2, #27
 80158da:	bf44      	itt	mi
 80158dc:	2320      	movmi	r3, #32
 80158de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80158e2:	0713      	lsls	r3, r2, #28
 80158e4:	bf44      	itt	mi
 80158e6:	232b      	movmi	r3, #43	@ 0x2b
 80158e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80158ec:	f89a 3000 	ldrb.w	r3, [sl]
 80158f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80158f2:	d015      	beq.n	8015920 <_vfiprintf_r+0x120>
 80158f4:	9a07      	ldr	r2, [sp, #28]
 80158f6:	4654      	mov	r4, sl
 80158f8:	2000      	movs	r0, #0
 80158fa:	f04f 0c0a 	mov.w	ip, #10
 80158fe:	4621      	mov	r1, r4
 8015900:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015904:	3b30      	subs	r3, #48	@ 0x30
 8015906:	2b09      	cmp	r3, #9
 8015908:	d94b      	bls.n	80159a2 <_vfiprintf_r+0x1a2>
 801590a:	b1b0      	cbz	r0, 801593a <_vfiprintf_r+0x13a>
 801590c:	9207      	str	r2, [sp, #28]
 801590e:	e014      	b.n	801593a <_vfiprintf_r+0x13a>
 8015910:	eba0 0308 	sub.w	r3, r0, r8
 8015914:	fa09 f303 	lsl.w	r3, r9, r3
 8015918:	4313      	orrs	r3, r2
 801591a:	9304      	str	r3, [sp, #16]
 801591c:	46a2      	mov	sl, r4
 801591e:	e7d2      	b.n	80158c6 <_vfiprintf_r+0xc6>
 8015920:	9b03      	ldr	r3, [sp, #12]
 8015922:	1d19      	adds	r1, r3, #4
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	9103      	str	r1, [sp, #12]
 8015928:	2b00      	cmp	r3, #0
 801592a:	bfbb      	ittet	lt
 801592c:	425b      	neglt	r3, r3
 801592e:	f042 0202 	orrlt.w	r2, r2, #2
 8015932:	9307      	strge	r3, [sp, #28]
 8015934:	9307      	strlt	r3, [sp, #28]
 8015936:	bfb8      	it	lt
 8015938:	9204      	strlt	r2, [sp, #16]
 801593a:	7823      	ldrb	r3, [r4, #0]
 801593c:	2b2e      	cmp	r3, #46	@ 0x2e
 801593e:	d10a      	bne.n	8015956 <_vfiprintf_r+0x156>
 8015940:	7863      	ldrb	r3, [r4, #1]
 8015942:	2b2a      	cmp	r3, #42	@ 0x2a
 8015944:	d132      	bne.n	80159ac <_vfiprintf_r+0x1ac>
 8015946:	9b03      	ldr	r3, [sp, #12]
 8015948:	1d1a      	adds	r2, r3, #4
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	9203      	str	r2, [sp, #12]
 801594e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015952:	3402      	adds	r4, #2
 8015954:	9305      	str	r3, [sp, #20]
 8015956:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015a2c <_vfiprintf_r+0x22c>
 801595a:	7821      	ldrb	r1, [r4, #0]
 801595c:	2203      	movs	r2, #3
 801595e:	4650      	mov	r0, sl
 8015960:	f7ea fc5e 	bl	8000220 <memchr>
 8015964:	b138      	cbz	r0, 8015976 <_vfiprintf_r+0x176>
 8015966:	9b04      	ldr	r3, [sp, #16]
 8015968:	eba0 000a 	sub.w	r0, r0, sl
 801596c:	2240      	movs	r2, #64	@ 0x40
 801596e:	4082      	lsls	r2, r0
 8015970:	4313      	orrs	r3, r2
 8015972:	3401      	adds	r4, #1
 8015974:	9304      	str	r3, [sp, #16]
 8015976:	f814 1b01 	ldrb.w	r1, [r4], #1
 801597a:	4829      	ldr	r0, [pc, #164]	@ (8015a20 <_vfiprintf_r+0x220>)
 801597c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015980:	2206      	movs	r2, #6
 8015982:	f7ea fc4d 	bl	8000220 <memchr>
 8015986:	2800      	cmp	r0, #0
 8015988:	d03f      	beq.n	8015a0a <_vfiprintf_r+0x20a>
 801598a:	4b26      	ldr	r3, [pc, #152]	@ (8015a24 <_vfiprintf_r+0x224>)
 801598c:	bb1b      	cbnz	r3, 80159d6 <_vfiprintf_r+0x1d6>
 801598e:	9b03      	ldr	r3, [sp, #12]
 8015990:	3307      	adds	r3, #7
 8015992:	f023 0307 	bic.w	r3, r3, #7
 8015996:	3308      	adds	r3, #8
 8015998:	9303      	str	r3, [sp, #12]
 801599a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801599c:	443b      	add	r3, r7
 801599e:	9309      	str	r3, [sp, #36]	@ 0x24
 80159a0:	e76a      	b.n	8015878 <_vfiprintf_r+0x78>
 80159a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80159a6:	460c      	mov	r4, r1
 80159a8:	2001      	movs	r0, #1
 80159aa:	e7a8      	b.n	80158fe <_vfiprintf_r+0xfe>
 80159ac:	2300      	movs	r3, #0
 80159ae:	3401      	adds	r4, #1
 80159b0:	9305      	str	r3, [sp, #20]
 80159b2:	4619      	mov	r1, r3
 80159b4:	f04f 0c0a 	mov.w	ip, #10
 80159b8:	4620      	mov	r0, r4
 80159ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80159be:	3a30      	subs	r2, #48	@ 0x30
 80159c0:	2a09      	cmp	r2, #9
 80159c2:	d903      	bls.n	80159cc <_vfiprintf_r+0x1cc>
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d0c6      	beq.n	8015956 <_vfiprintf_r+0x156>
 80159c8:	9105      	str	r1, [sp, #20]
 80159ca:	e7c4      	b.n	8015956 <_vfiprintf_r+0x156>
 80159cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80159d0:	4604      	mov	r4, r0
 80159d2:	2301      	movs	r3, #1
 80159d4:	e7f0      	b.n	80159b8 <_vfiprintf_r+0x1b8>
 80159d6:	ab03      	add	r3, sp, #12
 80159d8:	9300      	str	r3, [sp, #0]
 80159da:	462a      	mov	r2, r5
 80159dc:	4b12      	ldr	r3, [pc, #72]	@ (8015a28 <_vfiprintf_r+0x228>)
 80159de:	a904      	add	r1, sp, #16
 80159e0:	4630      	mov	r0, r6
 80159e2:	f7fb fa8b 	bl	8010efc <_printf_float>
 80159e6:	4607      	mov	r7, r0
 80159e8:	1c78      	adds	r0, r7, #1
 80159ea:	d1d6      	bne.n	801599a <_vfiprintf_r+0x19a>
 80159ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80159ee:	07d9      	lsls	r1, r3, #31
 80159f0:	d405      	bmi.n	80159fe <_vfiprintf_r+0x1fe>
 80159f2:	89ab      	ldrh	r3, [r5, #12]
 80159f4:	059a      	lsls	r2, r3, #22
 80159f6:	d402      	bmi.n	80159fe <_vfiprintf_r+0x1fe>
 80159f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80159fa:	f7fc fa2d 	bl	8011e58 <__retarget_lock_release_recursive>
 80159fe:	89ab      	ldrh	r3, [r5, #12]
 8015a00:	065b      	lsls	r3, r3, #25
 8015a02:	f53f af1f 	bmi.w	8015844 <_vfiprintf_r+0x44>
 8015a06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015a08:	e71e      	b.n	8015848 <_vfiprintf_r+0x48>
 8015a0a:	ab03      	add	r3, sp, #12
 8015a0c:	9300      	str	r3, [sp, #0]
 8015a0e:	462a      	mov	r2, r5
 8015a10:	4b05      	ldr	r3, [pc, #20]	@ (8015a28 <_vfiprintf_r+0x228>)
 8015a12:	a904      	add	r1, sp, #16
 8015a14:	4630      	mov	r0, r6
 8015a16:	f7fb fd09 	bl	801142c <_printf_i>
 8015a1a:	e7e4      	b.n	80159e6 <_vfiprintf_r+0x1e6>
 8015a1c:	08017861 	.word	0x08017861
 8015a20:	0801786b 	.word	0x0801786b
 8015a24:	08010efd 	.word	0x08010efd
 8015a28:	080157dd 	.word	0x080157dd
 8015a2c:	08017867 	.word	0x08017867

08015a30 <__swbuf_r>:
 8015a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a32:	460e      	mov	r6, r1
 8015a34:	4614      	mov	r4, r2
 8015a36:	4605      	mov	r5, r0
 8015a38:	b118      	cbz	r0, 8015a42 <__swbuf_r+0x12>
 8015a3a:	6a03      	ldr	r3, [r0, #32]
 8015a3c:	b90b      	cbnz	r3, 8015a42 <__swbuf_r+0x12>
 8015a3e:	f7fc f8b5 	bl	8011bac <__sinit>
 8015a42:	69a3      	ldr	r3, [r4, #24]
 8015a44:	60a3      	str	r3, [r4, #8]
 8015a46:	89a3      	ldrh	r3, [r4, #12]
 8015a48:	071a      	lsls	r2, r3, #28
 8015a4a:	d501      	bpl.n	8015a50 <__swbuf_r+0x20>
 8015a4c:	6923      	ldr	r3, [r4, #16]
 8015a4e:	b943      	cbnz	r3, 8015a62 <__swbuf_r+0x32>
 8015a50:	4621      	mov	r1, r4
 8015a52:	4628      	mov	r0, r5
 8015a54:	f000 f82a 	bl	8015aac <__swsetup_r>
 8015a58:	b118      	cbz	r0, 8015a62 <__swbuf_r+0x32>
 8015a5a:	f04f 37ff 	mov.w	r7, #4294967295
 8015a5e:	4638      	mov	r0, r7
 8015a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a62:	6823      	ldr	r3, [r4, #0]
 8015a64:	6922      	ldr	r2, [r4, #16]
 8015a66:	1a98      	subs	r0, r3, r2
 8015a68:	6963      	ldr	r3, [r4, #20]
 8015a6a:	b2f6      	uxtb	r6, r6
 8015a6c:	4283      	cmp	r3, r0
 8015a6e:	4637      	mov	r7, r6
 8015a70:	dc05      	bgt.n	8015a7e <__swbuf_r+0x4e>
 8015a72:	4621      	mov	r1, r4
 8015a74:	4628      	mov	r0, r5
 8015a76:	f7ff f97f 	bl	8014d78 <_fflush_r>
 8015a7a:	2800      	cmp	r0, #0
 8015a7c:	d1ed      	bne.n	8015a5a <__swbuf_r+0x2a>
 8015a7e:	68a3      	ldr	r3, [r4, #8]
 8015a80:	3b01      	subs	r3, #1
 8015a82:	60a3      	str	r3, [r4, #8]
 8015a84:	6823      	ldr	r3, [r4, #0]
 8015a86:	1c5a      	adds	r2, r3, #1
 8015a88:	6022      	str	r2, [r4, #0]
 8015a8a:	701e      	strb	r6, [r3, #0]
 8015a8c:	6962      	ldr	r2, [r4, #20]
 8015a8e:	1c43      	adds	r3, r0, #1
 8015a90:	429a      	cmp	r2, r3
 8015a92:	d004      	beq.n	8015a9e <__swbuf_r+0x6e>
 8015a94:	89a3      	ldrh	r3, [r4, #12]
 8015a96:	07db      	lsls	r3, r3, #31
 8015a98:	d5e1      	bpl.n	8015a5e <__swbuf_r+0x2e>
 8015a9a:	2e0a      	cmp	r6, #10
 8015a9c:	d1df      	bne.n	8015a5e <__swbuf_r+0x2e>
 8015a9e:	4621      	mov	r1, r4
 8015aa0:	4628      	mov	r0, r5
 8015aa2:	f7ff f969 	bl	8014d78 <_fflush_r>
 8015aa6:	2800      	cmp	r0, #0
 8015aa8:	d0d9      	beq.n	8015a5e <__swbuf_r+0x2e>
 8015aaa:	e7d6      	b.n	8015a5a <__swbuf_r+0x2a>

08015aac <__swsetup_r>:
 8015aac:	b538      	push	{r3, r4, r5, lr}
 8015aae:	4b29      	ldr	r3, [pc, #164]	@ (8015b54 <__swsetup_r+0xa8>)
 8015ab0:	4605      	mov	r5, r0
 8015ab2:	6818      	ldr	r0, [r3, #0]
 8015ab4:	460c      	mov	r4, r1
 8015ab6:	b118      	cbz	r0, 8015ac0 <__swsetup_r+0x14>
 8015ab8:	6a03      	ldr	r3, [r0, #32]
 8015aba:	b90b      	cbnz	r3, 8015ac0 <__swsetup_r+0x14>
 8015abc:	f7fc f876 	bl	8011bac <__sinit>
 8015ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ac4:	0719      	lsls	r1, r3, #28
 8015ac6:	d422      	bmi.n	8015b0e <__swsetup_r+0x62>
 8015ac8:	06da      	lsls	r2, r3, #27
 8015aca:	d407      	bmi.n	8015adc <__swsetup_r+0x30>
 8015acc:	2209      	movs	r2, #9
 8015ace:	602a      	str	r2, [r5, #0]
 8015ad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015ad4:	81a3      	strh	r3, [r4, #12]
 8015ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8015ada:	e033      	b.n	8015b44 <__swsetup_r+0x98>
 8015adc:	0758      	lsls	r0, r3, #29
 8015ade:	d512      	bpl.n	8015b06 <__swsetup_r+0x5a>
 8015ae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015ae2:	b141      	cbz	r1, 8015af6 <__swsetup_r+0x4a>
 8015ae4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015ae8:	4299      	cmp	r1, r3
 8015aea:	d002      	beq.n	8015af2 <__swsetup_r+0x46>
 8015aec:	4628      	mov	r0, r5
 8015aee:	f7fd f817 	bl	8012b20 <_free_r>
 8015af2:	2300      	movs	r3, #0
 8015af4:	6363      	str	r3, [r4, #52]	@ 0x34
 8015af6:	89a3      	ldrh	r3, [r4, #12]
 8015af8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015afc:	81a3      	strh	r3, [r4, #12]
 8015afe:	2300      	movs	r3, #0
 8015b00:	6063      	str	r3, [r4, #4]
 8015b02:	6923      	ldr	r3, [r4, #16]
 8015b04:	6023      	str	r3, [r4, #0]
 8015b06:	89a3      	ldrh	r3, [r4, #12]
 8015b08:	f043 0308 	orr.w	r3, r3, #8
 8015b0c:	81a3      	strh	r3, [r4, #12]
 8015b0e:	6923      	ldr	r3, [r4, #16]
 8015b10:	b94b      	cbnz	r3, 8015b26 <__swsetup_r+0x7a>
 8015b12:	89a3      	ldrh	r3, [r4, #12]
 8015b14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015b1c:	d003      	beq.n	8015b26 <__swsetup_r+0x7a>
 8015b1e:	4621      	mov	r1, r4
 8015b20:	4628      	mov	r0, r5
 8015b22:	f000 f883 	bl	8015c2c <__smakebuf_r>
 8015b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b2a:	f013 0201 	ands.w	r2, r3, #1
 8015b2e:	d00a      	beq.n	8015b46 <__swsetup_r+0x9a>
 8015b30:	2200      	movs	r2, #0
 8015b32:	60a2      	str	r2, [r4, #8]
 8015b34:	6962      	ldr	r2, [r4, #20]
 8015b36:	4252      	negs	r2, r2
 8015b38:	61a2      	str	r2, [r4, #24]
 8015b3a:	6922      	ldr	r2, [r4, #16]
 8015b3c:	b942      	cbnz	r2, 8015b50 <__swsetup_r+0xa4>
 8015b3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015b42:	d1c5      	bne.n	8015ad0 <__swsetup_r+0x24>
 8015b44:	bd38      	pop	{r3, r4, r5, pc}
 8015b46:	0799      	lsls	r1, r3, #30
 8015b48:	bf58      	it	pl
 8015b4a:	6962      	ldrpl	r2, [r4, #20]
 8015b4c:	60a2      	str	r2, [r4, #8]
 8015b4e:	e7f4      	b.n	8015b3a <__swsetup_r+0x8e>
 8015b50:	2000      	movs	r0, #0
 8015b52:	e7f7      	b.n	8015b44 <__swsetup_r+0x98>
 8015b54:	200001cc 	.word	0x200001cc

08015b58 <_raise_r>:
 8015b58:	291f      	cmp	r1, #31
 8015b5a:	b538      	push	{r3, r4, r5, lr}
 8015b5c:	4605      	mov	r5, r0
 8015b5e:	460c      	mov	r4, r1
 8015b60:	d904      	bls.n	8015b6c <_raise_r+0x14>
 8015b62:	2316      	movs	r3, #22
 8015b64:	6003      	str	r3, [r0, #0]
 8015b66:	f04f 30ff 	mov.w	r0, #4294967295
 8015b6a:	bd38      	pop	{r3, r4, r5, pc}
 8015b6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015b6e:	b112      	cbz	r2, 8015b76 <_raise_r+0x1e>
 8015b70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015b74:	b94b      	cbnz	r3, 8015b8a <_raise_r+0x32>
 8015b76:	4628      	mov	r0, r5
 8015b78:	f000 f830 	bl	8015bdc <_getpid_r>
 8015b7c:	4622      	mov	r2, r4
 8015b7e:	4601      	mov	r1, r0
 8015b80:	4628      	mov	r0, r5
 8015b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b86:	f000 b817 	b.w	8015bb8 <_kill_r>
 8015b8a:	2b01      	cmp	r3, #1
 8015b8c:	d00a      	beq.n	8015ba4 <_raise_r+0x4c>
 8015b8e:	1c59      	adds	r1, r3, #1
 8015b90:	d103      	bne.n	8015b9a <_raise_r+0x42>
 8015b92:	2316      	movs	r3, #22
 8015b94:	6003      	str	r3, [r0, #0]
 8015b96:	2001      	movs	r0, #1
 8015b98:	e7e7      	b.n	8015b6a <_raise_r+0x12>
 8015b9a:	2100      	movs	r1, #0
 8015b9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015ba0:	4620      	mov	r0, r4
 8015ba2:	4798      	blx	r3
 8015ba4:	2000      	movs	r0, #0
 8015ba6:	e7e0      	b.n	8015b6a <_raise_r+0x12>

08015ba8 <raise>:
 8015ba8:	4b02      	ldr	r3, [pc, #8]	@ (8015bb4 <raise+0xc>)
 8015baa:	4601      	mov	r1, r0
 8015bac:	6818      	ldr	r0, [r3, #0]
 8015bae:	f7ff bfd3 	b.w	8015b58 <_raise_r>
 8015bb2:	bf00      	nop
 8015bb4:	200001cc 	.word	0x200001cc

08015bb8 <_kill_r>:
 8015bb8:	b538      	push	{r3, r4, r5, lr}
 8015bba:	4d07      	ldr	r5, [pc, #28]	@ (8015bd8 <_kill_r+0x20>)
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	4604      	mov	r4, r0
 8015bc0:	4608      	mov	r0, r1
 8015bc2:	4611      	mov	r1, r2
 8015bc4:	602b      	str	r3, [r5, #0]
 8015bc6:	f7ee fc5d 	bl	8004484 <_kill>
 8015bca:	1c43      	adds	r3, r0, #1
 8015bcc:	d102      	bne.n	8015bd4 <_kill_r+0x1c>
 8015bce:	682b      	ldr	r3, [r5, #0]
 8015bd0:	b103      	cbz	r3, 8015bd4 <_kill_r+0x1c>
 8015bd2:	6023      	str	r3, [r4, #0]
 8015bd4:	bd38      	pop	{r3, r4, r5, pc}
 8015bd6:	bf00      	nop
 8015bd8:	200026c4 	.word	0x200026c4

08015bdc <_getpid_r>:
 8015bdc:	f7ee bc4a 	b.w	8004474 <_getpid>

08015be0 <__swhatbuf_r>:
 8015be0:	b570      	push	{r4, r5, r6, lr}
 8015be2:	460c      	mov	r4, r1
 8015be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015be8:	2900      	cmp	r1, #0
 8015bea:	b096      	sub	sp, #88	@ 0x58
 8015bec:	4615      	mov	r5, r2
 8015bee:	461e      	mov	r6, r3
 8015bf0:	da0d      	bge.n	8015c0e <__swhatbuf_r+0x2e>
 8015bf2:	89a3      	ldrh	r3, [r4, #12]
 8015bf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015bf8:	f04f 0100 	mov.w	r1, #0
 8015bfc:	bf14      	ite	ne
 8015bfe:	2340      	movne	r3, #64	@ 0x40
 8015c00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015c04:	2000      	movs	r0, #0
 8015c06:	6031      	str	r1, [r6, #0]
 8015c08:	602b      	str	r3, [r5, #0]
 8015c0a:	b016      	add	sp, #88	@ 0x58
 8015c0c:	bd70      	pop	{r4, r5, r6, pc}
 8015c0e:	466a      	mov	r2, sp
 8015c10:	f000 f848 	bl	8015ca4 <_fstat_r>
 8015c14:	2800      	cmp	r0, #0
 8015c16:	dbec      	blt.n	8015bf2 <__swhatbuf_r+0x12>
 8015c18:	9901      	ldr	r1, [sp, #4]
 8015c1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015c1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015c22:	4259      	negs	r1, r3
 8015c24:	4159      	adcs	r1, r3
 8015c26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015c2a:	e7eb      	b.n	8015c04 <__swhatbuf_r+0x24>

08015c2c <__smakebuf_r>:
 8015c2c:	898b      	ldrh	r3, [r1, #12]
 8015c2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c30:	079d      	lsls	r5, r3, #30
 8015c32:	4606      	mov	r6, r0
 8015c34:	460c      	mov	r4, r1
 8015c36:	d507      	bpl.n	8015c48 <__smakebuf_r+0x1c>
 8015c38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015c3c:	6023      	str	r3, [r4, #0]
 8015c3e:	6123      	str	r3, [r4, #16]
 8015c40:	2301      	movs	r3, #1
 8015c42:	6163      	str	r3, [r4, #20]
 8015c44:	b003      	add	sp, #12
 8015c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c48:	ab01      	add	r3, sp, #4
 8015c4a:	466a      	mov	r2, sp
 8015c4c:	f7ff ffc8 	bl	8015be0 <__swhatbuf_r>
 8015c50:	9f00      	ldr	r7, [sp, #0]
 8015c52:	4605      	mov	r5, r0
 8015c54:	4639      	mov	r1, r7
 8015c56:	4630      	mov	r0, r6
 8015c58:	f7fc ffd6 	bl	8012c08 <_malloc_r>
 8015c5c:	b948      	cbnz	r0, 8015c72 <__smakebuf_r+0x46>
 8015c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c62:	059a      	lsls	r2, r3, #22
 8015c64:	d4ee      	bmi.n	8015c44 <__smakebuf_r+0x18>
 8015c66:	f023 0303 	bic.w	r3, r3, #3
 8015c6a:	f043 0302 	orr.w	r3, r3, #2
 8015c6e:	81a3      	strh	r3, [r4, #12]
 8015c70:	e7e2      	b.n	8015c38 <__smakebuf_r+0xc>
 8015c72:	89a3      	ldrh	r3, [r4, #12]
 8015c74:	6020      	str	r0, [r4, #0]
 8015c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015c7a:	81a3      	strh	r3, [r4, #12]
 8015c7c:	9b01      	ldr	r3, [sp, #4]
 8015c7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015c82:	b15b      	cbz	r3, 8015c9c <__smakebuf_r+0x70>
 8015c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c88:	4630      	mov	r0, r6
 8015c8a:	f000 f81d 	bl	8015cc8 <_isatty_r>
 8015c8e:	b128      	cbz	r0, 8015c9c <__smakebuf_r+0x70>
 8015c90:	89a3      	ldrh	r3, [r4, #12]
 8015c92:	f023 0303 	bic.w	r3, r3, #3
 8015c96:	f043 0301 	orr.w	r3, r3, #1
 8015c9a:	81a3      	strh	r3, [r4, #12]
 8015c9c:	89a3      	ldrh	r3, [r4, #12]
 8015c9e:	431d      	orrs	r5, r3
 8015ca0:	81a5      	strh	r5, [r4, #12]
 8015ca2:	e7cf      	b.n	8015c44 <__smakebuf_r+0x18>

08015ca4 <_fstat_r>:
 8015ca4:	b538      	push	{r3, r4, r5, lr}
 8015ca6:	4d07      	ldr	r5, [pc, #28]	@ (8015cc4 <_fstat_r+0x20>)
 8015ca8:	2300      	movs	r3, #0
 8015caa:	4604      	mov	r4, r0
 8015cac:	4608      	mov	r0, r1
 8015cae:	4611      	mov	r1, r2
 8015cb0:	602b      	str	r3, [r5, #0]
 8015cb2:	f7ee fc47 	bl	8004544 <_fstat>
 8015cb6:	1c43      	adds	r3, r0, #1
 8015cb8:	d102      	bne.n	8015cc0 <_fstat_r+0x1c>
 8015cba:	682b      	ldr	r3, [r5, #0]
 8015cbc:	b103      	cbz	r3, 8015cc0 <_fstat_r+0x1c>
 8015cbe:	6023      	str	r3, [r4, #0]
 8015cc0:	bd38      	pop	{r3, r4, r5, pc}
 8015cc2:	bf00      	nop
 8015cc4:	200026c4 	.word	0x200026c4

08015cc8 <_isatty_r>:
 8015cc8:	b538      	push	{r3, r4, r5, lr}
 8015cca:	4d06      	ldr	r5, [pc, #24]	@ (8015ce4 <_isatty_r+0x1c>)
 8015ccc:	2300      	movs	r3, #0
 8015cce:	4604      	mov	r4, r0
 8015cd0:	4608      	mov	r0, r1
 8015cd2:	602b      	str	r3, [r5, #0]
 8015cd4:	f7ee fc46 	bl	8004564 <_isatty>
 8015cd8:	1c43      	adds	r3, r0, #1
 8015cda:	d102      	bne.n	8015ce2 <_isatty_r+0x1a>
 8015cdc:	682b      	ldr	r3, [r5, #0]
 8015cde:	b103      	cbz	r3, 8015ce2 <_isatty_r+0x1a>
 8015ce0:	6023      	str	r3, [r4, #0]
 8015ce2:	bd38      	pop	{r3, r4, r5, pc}
 8015ce4:	200026c4 	.word	0x200026c4

08015ce8 <acos>:
 8015ce8:	b538      	push	{r3, r4, r5, lr}
 8015cea:	ed2d 8b02 	vpush	{d8}
 8015cee:	ec55 4b10 	vmov	r4, r5, d0
 8015cf2:	f000 f9b9 	bl	8016068 <__ieee754_acos>
 8015cf6:	4622      	mov	r2, r4
 8015cf8:	462b      	mov	r3, r5
 8015cfa:	4620      	mov	r0, r4
 8015cfc:	4629      	mov	r1, r5
 8015cfe:	eeb0 8a40 	vmov.f32	s16, s0
 8015d02:	eef0 8a60 	vmov.f32	s17, s1
 8015d06:	f7ea ff39 	bl	8000b7c <__aeabi_dcmpun>
 8015d0a:	b9a8      	cbnz	r0, 8015d38 <acos+0x50>
 8015d0c:	ec45 4b10 	vmov	d0, r4, r5
 8015d10:	f000 f8ba 	bl	8015e88 <fabs>
 8015d14:	4b0c      	ldr	r3, [pc, #48]	@ (8015d48 <acos+0x60>)
 8015d16:	ec51 0b10 	vmov	r0, r1, d0
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	f7ea ff24 	bl	8000b68 <__aeabi_dcmpgt>
 8015d20:	b150      	cbz	r0, 8015d38 <acos+0x50>
 8015d22:	f7fc f86d 	bl	8011e00 <__errno>
 8015d26:	ecbd 8b02 	vpop	{d8}
 8015d2a:	2321      	movs	r3, #33	@ 0x21
 8015d2c:	6003      	str	r3, [r0, #0]
 8015d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d32:	4806      	ldr	r0, [pc, #24]	@ (8015d4c <acos+0x64>)
 8015d34:	f7ff b8e8 	b.w	8014f08 <nan>
 8015d38:	eeb0 0a48 	vmov.f32	s0, s16
 8015d3c:	eef0 0a68 	vmov.f32	s1, s17
 8015d40:	ecbd 8b02 	vpop	{d8}
 8015d44:	bd38      	pop	{r3, r4, r5, pc}
 8015d46:	bf00      	nop
 8015d48:	3ff00000 	.word	0x3ff00000
 8015d4c:	080178d0 	.word	0x080178d0

08015d50 <pow>:
 8015d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d52:	ed2d 8b02 	vpush	{d8}
 8015d56:	eeb0 8a40 	vmov.f32	s16, s0
 8015d5a:	eef0 8a60 	vmov.f32	s17, s1
 8015d5e:	ec55 4b11 	vmov	r4, r5, d1
 8015d62:	f000 fbdd 	bl	8016520 <__ieee754_pow>
 8015d66:	4622      	mov	r2, r4
 8015d68:	462b      	mov	r3, r5
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	4629      	mov	r1, r5
 8015d6e:	ec57 6b10 	vmov	r6, r7, d0
 8015d72:	f7ea ff03 	bl	8000b7c <__aeabi_dcmpun>
 8015d76:	2800      	cmp	r0, #0
 8015d78:	d13b      	bne.n	8015df2 <pow+0xa2>
 8015d7a:	ec51 0b18 	vmov	r0, r1, d8
 8015d7e:	2200      	movs	r2, #0
 8015d80:	2300      	movs	r3, #0
 8015d82:	f7ea fec9 	bl	8000b18 <__aeabi_dcmpeq>
 8015d86:	b1b8      	cbz	r0, 8015db8 <pow+0x68>
 8015d88:	2200      	movs	r2, #0
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	4620      	mov	r0, r4
 8015d8e:	4629      	mov	r1, r5
 8015d90:	f7ea fec2 	bl	8000b18 <__aeabi_dcmpeq>
 8015d94:	2800      	cmp	r0, #0
 8015d96:	d146      	bne.n	8015e26 <pow+0xd6>
 8015d98:	ec45 4b10 	vmov	d0, r4, r5
 8015d9c:	f000 f87c 	bl	8015e98 <finite>
 8015da0:	b338      	cbz	r0, 8015df2 <pow+0xa2>
 8015da2:	2200      	movs	r2, #0
 8015da4:	2300      	movs	r3, #0
 8015da6:	4620      	mov	r0, r4
 8015da8:	4629      	mov	r1, r5
 8015daa:	f7ea febf 	bl	8000b2c <__aeabi_dcmplt>
 8015dae:	b300      	cbz	r0, 8015df2 <pow+0xa2>
 8015db0:	f7fc f826 	bl	8011e00 <__errno>
 8015db4:	2322      	movs	r3, #34	@ 0x22
 8015db6:	e01b      	b.n	8015df0 <pow+0xa0>
 8015db8:	ec47 6b10 	vmov	d0, r6, r7
 8015dbc:	f000 f86c 	bl	8015e98 <finite>
 8015dc0:	b9e0      	cbnz	r0, 8015dfc <pow+0xac>
 8015dc2:	eeb0 0a48 	vmov.f32	s0, s16
 8015dc6:	eef0 0a68 	vmov.f32	s1, s17
 8015dca:	f000 f865 	bl	8015e98 <finite>
 8015dce:	b1a8      	cbz	r0, 8015dfc <pow+0xac>
 8015dd0:	ec45 4b10 	vmov	d0, r4, r5
 8015dd4:	f000 f860 	bl	8015e98 <finite>
 8015dd8:	b180      	cbz	r0, 8015dfc <pow+0xac>
 8015dda:	4632      	mov	r2, r6
 8015ddc:	463b      	mov	r3, r7
 8015dde:	4630      	mov	r0, r6
 8015de0:	4639      	mov	r1, r7
 8015de2:	f7ea fecb 	bl	8000b7c <__aeabi_dcmpun>
 8015de6:	2800      	cmp	r0, #0
 8015de8:	d0e2      	beq.n	8015db0 <pow+0x60>
 8015dea:	f7fc f809 	bl	8011e00 <__errno>
 8015dee:	2321      	movs	r3, #33	@ 0x21
 8015df0:	6003      	str	r3, [r0, #0]
 8015df2:	ecbd 8b02 	vpop	{d8}
 8015df6:	ec47 6b10 	vmov	d0, r6, r7
 8015dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	2300      	movs	r3, #0
 8015e00:	4630      	mov	r0, r6
 8015e02:	4639      	mov	r1, r7
 8015e04:	f7ea fe88 	bl	8000b18 <__aeabi_dcmpeq>
 8015e08:	2800      	cmp	r0, #0
 8015e0a:	d0f2      	beq.n	8015df2 <pow+0xa2>
 8015e0c:	eeb0 0a48 	vmov.f32	s0, s16
 8015e10:	eef0 0a68 	vmov.f32	s1, s17
 8015e14:	f000 f840 	bl	8015e98 <finite>
 8015e18:	2800      	cmp	r0, #0
 8015e1a:	d0ea      	beq.n	8015df2 <pow+0xa2>
 8015e1c:	ec45 4b10 	vmov	d0, r4, r5
 8015e20:	f000 f83a 	bl	8015e98 <finite>
 8015e24:	e7c3      	b.n	8015dae <pow+0x5e>
 8015e26:	4f01      	ldr	r7, [pc, #4]	@ (8015e2c <pow+0xdc>)
 8015e28:	2600      	movs	r6, #0
 8015e2a:	e7e2      	b.n	8015df2 <pow+0xa2>
 8015e2c:	3ff00000 	.word	0x3ff00000

08015e30 <sqrt>:
 8015e30:	b538      	push	{r3, r4, r5, lr}
 8015e32:	ed2d 8b02 	vpush	{d8}
 8015e36:	ec55 4b10 	vmov	r4, r5, d0
 8015e3a:	f000 f839 	bl	8015eb0 <__ieee754_sqrt>
 8015e3e:	4622      	mov	r2, r4
 8015e40:	462b      	mov	r3, r5
 8015e42:	4620      	mov	r0, r4
 8015e44:	4629      	mov	r1, r5
 8015e46:	eeb0 8a40 	vmov.f32	s16, s0
 8015e4a:	eef0 8a60 	vmov.f32	s17, s1
 8015e4e:	f7ea fe95 	bl	8000b7c <__aeabi_dcmpun>
 8015e52:	b990      	cbnz	r0, 8015e7a <sqrt+0x4a>
 8015e54:	2200      	movs	r2, #0
 8015e56:	2300      	movs	r3, #0
 8015e58:	4620      	mov	r0, r4
 8015e5a:	4629      	mov	r1, r5
 8015e5c:	f7ea fe66 	bl	8000b2c <__aeabi_dcmplt>
 8015e60:	b158      	cbz	r0, 8015e7a <sqrt+0x4a>
 8015e62:	f7fb ffcd 	bl	8011e00 <__errno>
 8015e66:	2321      	movs	r3, #33	@ 0x21
 8015e68:	6003      	str	r3, [r0, #0]
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	4610      	mov	r0, r2
 8015e70:	4619      	mov	r1, r3
 8015e72:	f7ea fd13 	bl	800089c <__aeabi_ddiv>
 8015e76:	ec41 0b18 	vmov	d8, r0, r1
 8015e7a:	eeb0 0a48 	vmov.f32	s0, s16
 8015e7e:	eef0 0a68 	vmov.f32	s1, s17
 8015e82:	ecbd 8b02 	vpop	{d8}
 8015e86:	bd38      	pop	{r3, r4, r5, pc}

08015e88 <fabs>:
 8015e88:	ec51 0b10 	vmov	r0, r1, d0
 8015e8c:	4602      	mov	r2, r0
 8015e8e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015e92:	ec43 2b10 	vmov	d0, r2, r3
 8015e96:	4770      	bx	lr

08015e98 <finite>:
 8015e98:	b082      	sub	sp, #8
 8015e9a:	ed8d 0b00 	vstr	d0, [sp]
 8015e9e:	9801      	ldr	r0, [sp, #4]
 8015ea0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8015ea4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015ea8:	0fc0      	lsrs	r0, r0, #31
 8015eaa:	b002      	add	sp, #8
 8015eac:	4770      	bx	lr
	...

08015eb0 <__ieee754_sqrt>:
 8015eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eb4:	4a68      	ldr	r2, [pc, #416]	@ (8016058 <__ieee754_sqrt+0x1a8>)
 8015eb6:	ec55 4b10 	vmov	r4, r5, d0
 8015eba:	43aa      	bics	r2, r5
 8015ebc:	462b      	mov	r3, r5
 8015ebe:	4621      	mov	r1, r4
 8015ec0:	d110      	bne.n	8015ee4 <__ieee754_sqrt+0x34>
 8015ec2:	4622      	mov	r2, r4
 8015ec4:	4620      	mov	r0, r4
 8015ec6:	4629      	mov	r1, r5
 8015ec8:	f7ea fbbe 	bl	8000648 <__aeabi_dmul>
 8015ecc:	4602      	mov	r2, r0
 8015ece:	460b      	mov	r3, r1
 8015ed0:	4620      	mov	r0, r4
 8015ed2:	4629      	mov	r1, r5
 8015ed4:	f7ea fa02 	bl	80002dc <__adddf3>
 8015ed8:	4604      	mov	r4, r0
 8015eda:	460d      	mov	r5, r1
 8015edc:	ec45 4b10 	vmov	d0, r4, r5
 8015ee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ee4:	2d00      	cmp	r5, #0
 8015ee6:	dc0e      	bgt.n	8015f06 <__ieee754_sqrt+0x56>
 8015ee8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8015eec:	4322      	orrs	r2, r4
 8015eee:	d0f5      	beq.n	8015edc <__ieee754_sqrt+0x2c>
 8015ef0:	b19d      	cbz	r5, 8015f1a <__ieee754_sqrt+0x6a>
 8015ef2:	4622      	mov	r2, r4
 8015ef4:	4620      	mov	r0, r4
 8015ef6:	4629      	mov	r1, r5
 8015ef8:	f7ea f9ee 	bl	80002d8 <__aeabi_dsub>
 8015efc:	4602      	mov	r2, r0
 8015efe:	460b      	mov	r3, r1
 8015f00:	f7ea fccc 	bl	800089c <__aeabi_ddiv>
 8015f04:	e7e8      	b.n	8015ed8 <__ieee754_sqrt+0x28>
 8015f06:	152a      	asrs	r2, r5, #20
 8015f08:	d115      	bne.n	8015f36 <__ieee754_sqrt+0x86>
 8015f0a:	2000      	movs	r0, #0
 8015f0c:	e009      	b.n	8015f22 <__ieee754_sqrt+0x72>
 8015f0e:	0acb      	lsrs	r3, r1, #11
 8015f10:	3a15      	subs	r2, #21
 8015f12:	0549      	lsls	r1, r1, #21
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d0fa      	beq.n	8015f0e <__ieee754_sqrt+0x5e>
 8015f18:	e7f7      	b.n	8015f0a <__ieee754_sqrt+0x5a>
 8015f1a:	462a      	mov	r2, r5
 8015f1c:	e7fa      	b.n	8015f14 <__ieee754_sqrt+0x64>
 8015f1e:	005b      	lsls	r3, r3, #1
 8015f20:	3001      	adds	r0, #1
 8015f22:	02dc      	lsls	r4, r3, #11
 8015f24:	d5fb      	bpl.n	8015f1e <__ieee754_sqrt+0x6e>
 8015f26:	1e44      	subs	r4, r0, #1
 8015f28:	1b12      	subs	r2, r2, r4
 8015f2a:	f1c0 0420 	rsb	r4, r0, #32
 8015f2e:	fa21 f404 	lsr.w	r4, r1, r4
 8015f32:	4323      	orrs	r3, r4
 8015f34:	4081      	lsls	r1, r0
 8015f36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015f3a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8015f3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015f42:	07d2      	lsls	r2, r2, #31
 8015f44:	bf5c      	itt	pl
 8015f46:	005b      	lslpl	r3, r3, #1
 8015f48:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8015f4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015f50:	bf58      	it	pl
 8015f52:	0049      	lslpl	r1, r1, #1
 8015f54:	2600      	movs	r6, #0
 8015f56:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8015f5a:	106d      	asrs	r5, r5, #1
 8015f5c:	0049      	lsls	r1, r1, #1
 8015f5e:	2016      	movs	r0, #22
 8015f60:	4632      	mov	r2, r6
 8015f62:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8015f66:	1917      	adds	r7, r2, r4
 8015f68:	429f      	cmp	r7, r3
 8015f6a:	bfde      	ittt	le
 8015f6c:	193a      	addle	r2, r7, r4
 8015f6e:	1bdb      	suble	r3, r3, r7
 8015f70:	1936      	addle	r6, r6, r4
 8015f72:	0fcf      	lsrs	r7, r1, #31
 8015f74:	3801      	subs	r0, #1
 8015f76:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015f7a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015f7e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015f82:	d1f0      	bne.n	8015f66 <__ieee754_sqrt+0xb6>
 8015f84:	4604      	mov	r4, r0
 8015f86:	2720      	movs	r7, #32
 8015f88:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8015f8c:	429a      	cmp	r2, r3
 8015f8e:	eb00 0e0c 	add.w	lr, r0, ip
 8015f92:	db02      	blt.n	8015f9a <__ieee754_sqrt+0xea>
 8015f94:	d113      	bne.n	8015fbe <__ieee754_sqrt+0x10e>
 8015f96:	458e      	cmp	lr, r1
 8015f98:	d811      	bhi.n	8015fbe <__ieee754_sqrt+0x10e>
 8015f9a:	f1be 0f00 	cmp.w	lr, #0
 8015f9e:	eb0e 000c 	add.w	r0, lr, ip
 8015fa2:	da42      	bge.n	801602a <__ieee754_sqrt+0x17a>
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	db40      	blt.n	801602a <__ieee754_sqrt+0x17a>
 8015fa8:	f102 0801 	add.w	r8, r2, #1
 8015fac:	1a9b      	subs	r3, r3, r2
 8015fae:	458e      	cmp	lr, r1
 8015fb0:	bf88      	it	hi
 8015fb2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8015fb6:	eba1 010e 	sub.w	r1, r1, lr
 8015fba:	4464      	add	r4, ip
 8015fbc:	4642      	mov	r2, r8
 8015fbe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8015fc2:	3f01      	subs	r7, #1
 8015fc4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8015fc8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015fcc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8015fd0:	d1dc      	bne.n	8015f8c <__ieee754_sqrt+0xdc>
 8015fd2:	4319      	orrs	r1, r3
 8015fd4:	d01b      	beq.n	801600e <__ieee754_sqrt+0x15e>
 8015fd6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801605c <__ieee754_sqrt+0x1ac>
 8015fda:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8016060 <__ieee754_sqrt+0x1b0>
 8015fde:	e9da 0100 	ldrd	r0, r1, [sl]
 8015fe2:	e9db 2300 	ldrd	r2, r3, [fp]
 8015fe6:	f7ea f977 	bl	80002d8 <__aeabi_dsub>
 8015fea:	e9da 8900 	ldrd	r8, r9, [sl]
 8015fee:	4602      	mov	r2, r0
 8015ff0:	460b      	mov	r3, r1
 8015ff2:	4640      	mov	r0, r8
 8015ff4:	4649      	mov	r1, r9
 8015ff6:	f7ea fda3 	bl	8000b40 <__aeabi_dcmple>
 8015ffa:	b140      	cbz	r0, 801600e <__ieee754_sqrt+0x15e>
 8015ffc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8016000:	e9da 0100 	ldrd	r0, r1, [sl]
 8016004:	e9db 2300 	ldrd	r2, r3, [fp]
 8016008:	d111      	bne.n	801602e <__ieee754_sqrt+0x17e>
 801600a:	3601      	adds	r6, #1
 801600c:	463c      	mov	r4, r7
 801600e:	1072      	asrs	r2, r6, #1
 8016010:	0863      	lsrs	r3, r4, #1
 8016012:	07f1      	lsls	r1, r6, #31
 8016014:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8016018:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801601c:	bf48      	it	mi
 801601e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8016022:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8016026:	4618      	mov	r0, r3
 8016028:	e756      	b.n	8015ed8 <__ieee754_sqrt+0x28>
 801602a:	4690      	mov	r8, r2
 801602c:	e7be      	b.n	8015fac <__ieee754_sqrt+0xfc>
 801602e:	f7ea f955 	bl	80002dc <__adddf3>
 8016032:	e9da 8900 	ldrd	r8, r9, [sl]
 8016036:	4602      	mov	r2, r0
 8016038:	460b      	mov	r3, r1
 801603a:	4640      	mov	r0, r8
 801603c:	4649      	mov	r1, r9
 801603e:	f7ea fd75 	bl	8000b2c <__aeabi_dcmplt>
 8016042:	b120      	cbz	r0, 801604e <__ieee754_sqrt+0x19e>
 8016044:	1ca0      	adds	r0, r4, #2
 8016046:	bf08      	it	eq
 8016048:	3601      	addeq	r6, #1
 801604a:	3402      	adds	r4, #2
 801604c:	e7df      	b.n	801600e <__ieee754_sqrt+0x15e>
 801604e:	1c63      	adds	r3, r4, #1
 8016050:	f023 0401 	bic.w	r4, r3, #1
 8016054:	e7db      	b.n	801600e <__ieee754_sqrt+0x15e>
 8016056:	bf00      	nop
 8016058:	7ff00000 	.word	0x7ff00000
 801605c:	20000390 	.word	0x20000390
 8016060:	20000388 	.word	0x20000388
 8016064:	00000000 	.word	0x00000000

08016068 <__ieee754_acos>:
 8016068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801606c:	ec55 4b10 	vmov	r4, r5, d0
 8016070:	49b7      	ldr	r1, [pc, #732]	@ (8016350 <__ieee754_acos+0x2e8>)
 8016072:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016076:	428b      	cmp	r3, r1
 8016078:	d919      	bls.n	80160ae <__ieee754_acos+0x46>
 801607a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801607e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8016082:	4323      	orrs	r3, r4
 8016084:	d106      	bne.n	8016094 <__ieee754_acos+0x2c>
 8016086:	2d00      	cmp	r5, #0
 8016088:	f340 8210 	ble.w	80164ac <__ieee754_acos+0x444>
 801608c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 80162e0 <__ieee754_acos+0x278>
 8016090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016094:	4622      	mov	r2, r4
 8016096:	462b      	mov	r3, r5
 8016098:	4620      	mov	r0, r4
 801609a:	4629      	mov	r1, r5
 801609c:	f7ea f91c 	bl	80002d8 <__aeabi_dsub>
 80160a0:	4602      	mov	r2, r0
 80160a2:	460b      	mov	r3, r1
 80160a4:	f7ea fbfa 	bl	800089c <__aeabi_ddiv>
 80160a8:	ec41 0b10 	vmov	d0, r0, r1
 80160ac:	e7f0      	b.n	8016090 <__ieee754_acos+0x28>
 80160ae:	49a9      	ldr	r1, [pc, #676]	@ (8016354 <__ieee754_acos+0x2ec>)
 80160b0:	428b      	cmp	r3, r1
 80160b2:	f200 8085 	bhi.w	80161c0 <__ieee754_acos+0x158>
 80160b6:	4aa8      	ldr	r2, [pc, #672]	@ (8016358 <__ieee754_acos+0x2f0>)
 80160b8:	4293      	cmp	r3, r2
 80160ba:	f240 81fa 	bls.w	80164b2 <__ieee754_acos+0x44a>
 80160be:	4622      	mov	r2, r4
 80160c0:	462b      	mov	r3, r5
 80160c2:	4620      	mov	r0, r4
 80160c4:	4629      	mov	r1, r5
 80160c6:	f7ea fabf 	bl	8000648 <__aeabi_dmul>
 80160ca:	a387      	add	r3, pc, #540	@ (adr r3, 80162e8 <__ieee754_acos+0x280>)
 80160cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160d0:	4606      	mov	r6, r0
 80160d2:	460f      	mov	r7, r1
 80160d4:	f7ea fab8 	bl	8000648 <__aeabi_dmul>
 80160d8:	a385      	add	r3, pc, #532	@ (adr r3, 80162f0 <__ieee754_acos+0x288>)
 80160da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160de:	f7ea f8fd 	bl	80002dc <__adddf3>
 80160e2:	4632      	mov	r2, r6
 80160e4:	463b      	mov	r3, r7
 80160e6:	f7ea faaf 	bl	8000648 <__aeabi_dmul>
 80160ea:	a383      	add	r3, pc, #524	@ (adr r3, 80162f8 <__ieee754_acos+0x290>)
 80160ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160f0:	f7ea f8f2 	bl	80002d8 <__aeabi_dsub>
 80160f4:	4632      	mov	r2, r6
 80160f6:	463b      	mov	r3, r7
 80160f8:	f7ea faa6 	bl	8000648 <__aeabi_dmul>
 80160fc:	a380      	add	r3, pc, #512	@ (adr r3, 8016300 <__ieee754_acos+0x298>)
 80160fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016102:	f7ea f8eb 	bl	80002dc <__adddf3>
 8016106:	4632      	mov	r2, r6
 8016108:	463b      	mov	r3, r7
 801610a:	f7ea fa9d 	bl	8000648 <__aeabi_dmul>
 801610e:	a37e      	add	r3, pc, #504	@ (adr r3, 8016308 <__ieee754_acos+0x2a0>)
 8016110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016114:	f7ea f8e0 	bl	80002d8 <__aeabi_dsub>
 8016118:	4632      	mov	r2, r6
 801611a:	463b      	mov	r3, r7
 801611c:	f7ea fa94 	bl	8000648 <__aeabi_dmul>
 8016120:	a37b      	add	r3, pc, #492	@ (adr r3, 8016310 <__ieee754_acos+0x2a8>)
 8016122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016126:	f7ea f8d9 	bl	80002dc <__adddf3>
 801612a:	4632      	mov	r2, r6
 801612c:	463b      	mov	r3, r7
 801612e:	f7ea fa8b 	bl	8000648 <__aeabi_dmul>
 8016132:	a379      	add	r3, pc, #484	@ (adr r3, 8016318 <__ieee754_acos+0x2b0>)
 8016134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016138:	4680      	mov	r8, r0
 801613a:	4689      	mov	r9, r1
 801613c:	4630      	mov	r0, r6
 801613e:	4639      	mov	r1, r7
 8016140:	f7ea fa82 	bl	8000648 <__aeabi_dmul>
 8016144:	a376      	add	r3, pc, #472	@ (adr r3, 8016320 <__ieee754_acos+0x2b8>)
 8016146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801614a:	f7ea f8c5 	bl	80002d8 <__aeabi_dsub>
 801614e:	4632      	mov	r2, r6
 8016150:	463b      	mov	r3, r7
 8016152:	f7ea fa79 	bl	8000648 <__aeabi_dmul>
 8016156:	a374      	add	r3, pc, #464	@ (adr r3, 8016328 <__ieee754_acos+0x2c0>)
 8016158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801615c:	f7ea f8be 	bl	80002dc <__adddf3>
 8016160:	4632      	mov	r2, r6
 8016162:	463b      	mov	r3, r7
 8016164:	f7ea fa70 	bl	8000648 <__aeabi_dmul>
 8016168:	a371      	add	r3, pc, #452	@ (adr r3, 8016330 <__ieee754_acos+0x2c8>)
 801616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801616e:	f7ea f8b3 	bl	80002d8 <__aeabi_dsub>
 8016172:	4632      	mov	r2, r6
 8016174:	463b      	mov	r3, r7
 8016176:	f7ea fa67 	bl	8000648 <__aeabi_dmul>
 801617a:	4b78      	ldr	r3, [pc, #480]	@ (801635c <__ieee754_acos+0x2f4>)
 801617c:	2200      	movs	r2, #0
 801617e:	f7ea f8ad 	bl	80002dc <__adddf3>
 8016182:	4602      	mov	r2, r0
 8016184:	460b      	mov	r3, r1
 8016186:	4640      	mov	r0, r8
 8016188:	4649      	mov	r1, r9
 801618a:	f7ea fb87 	bl	800089c <__aeabi_ddiv>
 801618e:	4622      	mov	r2, r4
 8016190:	462b      	mov	r3, r5
 8016192:	f7ea fa59 	bl	8000648 <__aeabi_dmul>
 8016196:	4602      	mov	r2, r0
 8016198:	460b      	mov	r3, r1
 801619a:	a167      	add	r1, pc, #412	@ (adr r1, 8016338 <__ieee754_acos+0x2d0>)
 801619c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80161a0:	f7ea f89a 	bl	80002d8 <__aeabi_dsub>
 80161a4:	4602      	mov	r2, r0
 80161a6:	460b      	mov	r3, r1
 80161a8:	4620      	mov	r0, r4
 80161aa:	4629      	mov	r1, r5
 80161ac:	f7ea f894 	bl	80002d8 <__aeabi_dsub>
 80161b0:	4602      	mov	r2, r0
 80161b2:	460b      	mov	r3, r1
 80161b4:	a162      	add	r1, pc, #392	@ (adr r1, 8016340 <__ieee754_acos+0x2d8>)
 80161b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80161ba:	f7ea f88d 	bl	80002d8 <__aeabi_dsub>
 80161be:	e773      	b.n	80160a8 <__ieee754_acos+0x40>
 80161c0:	2d00      	cmp	r5, #0
 80161c2:	f280 80cf 	bge.w	8016364 <__ieee754_acos+0x2fc>
 80161c6:	4b65      	ldr	r3, [pc, #404]	@ (801635c <__ieee754_acos+0x2f4>)
 80161c8:	2200      	movs	r2, #0
 80161ca:	4620      	mov	r0, r4
 80161cc:	4629      	mov	r1, r5
 80161ce:	f7ea f885 	bl	80002dc <__adddf3>
 80161d2:	4b63      	ldr	r3, [pc, #396]	@ (8016360 <__ieee754_acos+0x2f8>)
 80161d4:	2200      	movs	r2, #0
 80161d6:	f7ea fa37 	bl	8000648 <__aeabi_dmul>
 80161da:	a343      	add	r3, pc, #268	@ (adr r3, 80162e8 <__ieee754_acos+0x280>)
 80161dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e0:	4604      	mov	r4, r0
 80161e2:	460d      	mov	r5, r1
 80161e4:	f7ea fa30 	bl	8000648 <__aeabi_dmul>
 80161e8:	a341      	add	r3, pc, #260	@ (adr r3, 80162f0 <__ieee754_acos+0x288>)
 80161ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ee:	f7ea f875 	bl	80002dc <__adddf3>
 80161f2:	4622      	mov	r2, r4
 80161f4:	462b      	mov	r3, r5
 80161f6:	f7ea fa27 	bl	8000648 <__aeabi_dmul>
 80161fa:	a33f      	add	r3, pc, #252	@ (adr r3, 80162f8 <__ieee754_acos+0x290>)
 80161fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016200:	f7ea f86a 	bl	80002d8 <__aeabi_dsub>
 8016204:	4622      	mov	r2, r4
 8016206:	462b      	mov	r3, r5
 8016208:	f7ea fa1e 	bl	8000648 <__aeabi_dmul>
 801620c:	a33c      	add	r3, pc, #240	@ (adr r3, 8016300 <__ieee754_acos+0x298>)
 801620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016212:	f7ea f863 	bl	80002dc <__adddf3>
 8016216:	4622      	mov	r2, r4
 8016218:	462b      	mov	r3, r5
 801621a:	f7ea fa15 	bl	8000648 <__aeabi_dmul>
 801621e:	a33a      	add	r3, pc, #232	@ (adr r3, 8016308 <__ieee754_acos+0x2a0>)
 8016220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016224:	f7ea f858 	bl	80002d8 <__aeabi_dsub>
 8016228:	4622      	mov	r2, r4
 801622a:	462b      	mov	r3, r5
 801622c:	f7ea fa0c 	bl	8000648 <__aeabi_dmul>
 8016230:	a337      	add	r3, pc, #220	@ (adr r3, 8016310 <__ieee754_acos+0x2a8>)
 8016232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016236:	f7ea f851 	bl	80002dc <__adddf3>
 801623a:	4622      	mov	r2, r4
 801623c:	462b      	mov	r3, r5
 801623e:	f7ea fa03 	bl	8000648 <__aeabi_dmul>
 8016242:	a335      	add	r3, pc, #212	@ (adr r3, 8016318 <__ieee754_acos+0x2b0>)
 8016244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016248:	4606      	mov	r6, r0
 801624a:	460f      	mov	r7, r1
 801624c:	4620      	mov	r0, r4
 801624e:	4629      	mov	r1, r5
 8016250:	f7ea f9fa 	bl	8000648 <__aeabi_dmul>
 8016254:	a332      	add	r3, pc, #200	@ (adr r3, 8016320 <__ieee754_acos+0x2b8>)
 8016256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801625a:	f7ea f83d 	bl	80002d8 <__aeabi_dsub>
 801625e:	4622      	mov	r2, r4
 8016260:	462b      	mov	r3, r5
 8016262:	f7ea f9f1 	bl	8000648 <__aeabi_dmul>
 8016266:	a330      	add	r3, pc, #192	@ (adr r3, 8016328 <__ieee754_acos+0x2c0>)
 8016268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801626c:	f7ea f836 	bl	80002dc <__adddf3>
 8016270:	4622      	mov	r2, r4
 8016272:	462b      	mov	r3, r5
 8016274:	f7ea f9e8 	bl	8000648 <__aeabi_dmul>
 8016278:	a32d      	add	r3, pc, #180	@ (adr r3, 8016330 <__ieee754_acos+0x2c8>)
 801627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801627e:	f7ea f82b 	bl	80002d8 <__aeabi_dsub>
 8016282:	4622      	mov	r2, r4
 8016284:	462b      	mov	r3, r5
 8016286:	f7ea f9df 	bl	8000648 <__aeabi_dmul>
 801628a:	4b34      	ldr	r3, [pc, #208]	@ (801635c <__ieee754_acos+0x2f4>)
 801628c:	2200      	movs	r2, #0
 801628e:	f7ea f825 	bl	80002dc <__adddf3>
 8016292:	ec45 4b10 	vmov	d0, r4, r5
 8016296:	4680      	mov	r8, r0
 8016298:	4689      	mov	r9, r1
 801629a:	f7ff fe09 	bl	8015eb0 <__ieee754_sqrt>
 801629e:	ec55 4b10 	vmov	r4, r5, d0
 80162a2:	4642      	mov	r2, r8
 80162a4:	464b      	mov	r3, r9
 80162a6:	4630      	mov	r0, r6
 80162a8:	4639      	mov	r1, r7
 80162aa:	f7ea faf7 	bl	800089c <__aeabi_ddiv>
 80162ae:	4622      	mov	r2, r4
 80162b0:	462b      	mov	r3, r5
 80162b2:	f7ea f9c9 	bl	8000648 <__aeabi_dmul>
 80162b6:	a320      	add	r3, pc, #128	@ (adr r3, 8016338 <__ieee754_acos+0x2d0>)
 80162b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162bc:	f7ea f80c 	bl	80002d8 <__aeabi_dsub>
 80162c0:	4622      	mov	r2, r4
 80162c2:	462b      	mov	r3, r5
 80162c4:	f7ea f80a 	bl	80002dc <__adddf3>
 80162c8:	4602      	mov	r2, r0
 80162ca:	460b      	mov	r3, r1
 80162cc:	f7ea f806 	bl	80002dc <__adddf3>
 80162d0:	4602      	mov	r2, r0
 80162d2:	460b      	mov	r3, r1
 80162d4:	a11c      	add	r1, pc, #112	@ (adr r1, 8016348 <__ieee754_acos+0x2e0>)
 80162d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162da:	e76e      	b.n	80161ba <__ieee754_acos+0x152>
 80162dc:	f3af 8000 	nop.w
	...
 80162e8:	0dfdf709 	.word	0x0dfdf709
 80162ec:	3f023de1 	.word	0x3f023de1
 80162f0:	7501b288 	.word	0x7501b288
 80162f4:	3f49efe0 	.word	0x3f49efe0
 80162f8:	b5688f3b 	.word	0xb5688f3b
 80162fc:	3fa48228 	.word	0x3fa48228
 8016300:	0e884455 	.word	0x0e884455
 8016304:	3fc9c155 	.word	0x3fc9c155
 8016308:	03eb6f7d 	.word	0x03eb6f7d
 801630c:	3fd4d612 	.word	0x3fd4d612
 8016310:	55555555 	.word	0x55555555
 8016314:	3fc55555 	.word	0x3fc55555
 8016318:	b12e9282 	.word	0xb12e9282
 801631c:	3fb3b8c5 	.word	0x3fb3b8c5
 8016320:	1b8d0159 	.word	0x1b8d0159
 8016324:	3fe6066c 	.word	0x3fe6066c
 8016328:	9c598ac8 	.word	0x9c598ac8
 801632c:	40002ae5 	.word	0x40002ae5
 8016330:	1c8a2d4b 	.word	0x1c8a2d4b
 8016334:	40033a27 	.word	0x40033a27
 8016338:	33145c07 	.word	0x33145c07
 801633c:	3c91a626 	.word	0x3c91a626
 8016340:	54442d18 	.word	0x54442d18
 8016344:	3ff921fb 	.word	0x3ff921fb
 8016348:	54442d18 	.word	0x54442d18
 801634c:	400921fb 	.word	0x400921fb
 8016350:	3fefffff 	.word	0x3fefffff
 8016354:	3fdfffff 	.word	0x3fdfffff
 8016358:	3c600000 	.word	0x3c600000
 801635c:	3ff00000 	.word	0x3ff00000
 8016360:	3fe00000 	.word	0x3fe00000
 8016364:	4622      	mov	r2, r4
 8016366:	462b      	mov	r3, r5
 8016368:	496b      	ldr	r1, [pc, #428]	@ (8016518 <__ieee754_acos+0x4b0>)
 801636a:	2000      	movs	r0, #0
 801636c:	f7e9 ffb4 	bl	80002d8 <__aeabi_dsub>
 8016370:	4b6a      	ldr	r3, [pc, #424]	@ (801651c <__ieee754_acos+0x4b4>)
 8016372:	2200      	movs	r2, #0
 8016374:	f7ea f968 	bl	8000648 <__aeabi_dmul>
 8016378:	4604      	mov	r4, r0
 801637a:	460d      	mov	r5, r1
 801637c:	ec45 4b10 	vmov	d0, r4, r5
 8016380:	f7ff fd96 	bl	8015eb0 <__ieee754_sqrt>
 8016384:	a34c      	add	r3, pc, #304	@ (adr r3, 80164b8 <__ieee754_acos+0x450>)
 8016386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801638a:	4620      	mov	r0, r4
 801638c:	4629      	mov	r1, r5
 801638e:	ec59 8b10 	vmov	r8, r9, d0
 8016392:	f7ea f959 	bl	8000648 <__aeabi_dmul>
 8016396:	a34a      	add	r3, pc, #296	@ (adr r3, 80164c0 <__ieee754_acos+0x458>)
 8016398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801639c:	f7e9 ff9e 	bl	80002dc <__adddf3>
 80163a0:	4622      	mov	r2, r4
 80163a2:	462b      	mov	r3, r5
 80163a4:	f7ea f950 	bl	8000648 <__aeabi_dmul>
 80163a8:	a347      	add	r3, pc, #284	@ (adr r3, 80164c8 <__ieee754_acos+0x460>)
 80163aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ae:	f7e9 ff93 	bl	80002d8 <__aeabi_dsub>
 80163b2:	4622      	mov	r2, r4
 80163b4:	462b      	mov	r3, r5
 80163b6:	f7ea f947 	bl	8000648 <__aeabi_dmul>
 80163ba:	a345      	add	r3, pc, #276	@ (adr r3, 80164d0 <__ieee754_acos+0x468>)
 80163bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163c0:	f7e9 ff8c 	bl	80002dc <__adddf3>
 80163c4:	4622      	mov	r2, r4
 80163c6:	462b      	mov	r3, r5
 80163c8:	f7ea f93e 	bl	8000648 <__aeabi_dmul>
 80163cc:	a342      	add	r3, pc, #264	@ (adr r3, 80164d8 <__ieee754_acos+0x470>)
 80163ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d2:	f7e9 ff81 	bl	80002d8 <__aeabi_dsub>
 80163d6:	4622      	mov	r2, r4
 80163d8:	462b      	mov	r3, r5
 80163da:	f7ea f935 	bl	8000648 <__aeabi_dmul>
 80163de:	a340      	add	r3, pc, #256	@ (adr r3, 80164e0 <__ieee754_acos+0x478>)
 80163e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e4:	f7e9 ff7a 	bl	80002dc <__adddf3>
 80163e8:	4622      	mov	r2, r4
 80163ea:	462b      	mov	r3, r5
 80163ec:	f7ea f92c 	bl	8000648 <__aeabi_dmul>
 80163f0:	a33d      	add	r3, pc, #244	@ (adr r3, 80164e8 <__ieee754_acos+0x480>)
 80163f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163f6:	4682      	mov	sl, r0
 80163f8:	468b      	mov	fp, r1
 80163fa:	4620      	mov	r0, r4
 80163fc:	4629      	mov	r1, r5
 80163fe:	f7ea f923 	bl	8000648 <__aeabi_dmul>
 8016402:	a33b      	add	r3, pc, #236	@ (adr r3, 80164f0 <__ieee754_acos+0x488>)
 8016404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016408:	f7e9 ff66 	bl	80002d8 <__aeabi_dsub>
 801640c:	4622      	mov	r2, r4
 801640e:	462b      	mov	r3, r5
 8016410:	f7ea f91a 	bl	8000648 <__aeabi_dmul>
 8016414:	a338      	add	r3, pc, #224	@ (adr r3, 80164f8 <__ieee754_acos+0x490>)
 8016416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801641a:	f7e9 ff5f 	bl	80002dc <__adddf3>
 801641e:	4622      	mov	r2, r4
 8016420:	462b      	mov	r3, r5
 8016422:	f7ea f911 	bl	8000648 <__aeabi_dmul>
 8016426:	a336      	add	r3, pc, #216	@ (adr r3, 8016500 <__ieee754_acos+0x498>)
 8016428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801642c:	f7e9 ff54 	bl	80002d8 <__aeabi_dsub>
 8016430:	4622      	mov	r2, r4
 8016432:	462b      	mov	r3, r5
 8016434:	f7ea f908 	bl	8000648 <__aeabi_dmul>
 8016438:	4b37      	ldr	r3, [pc, #220]	@ (8016518 <__ieee754_acos+0x4b0>)
 801643a:	2200      	movs	r2, #0
 801643c:	f7e9 ff4e 	bl	80002dc <__adddf3>
 8016440:	4602      	mov	r2, r0
 8016442:	460b      	mov	r3, r1
 8016444:	4650      	mov	r0, sl
 8016446:	4659      	mov	r1, fp
 8016448:	f7ea fa28 	bl	800089c <__aeabi_ddiv>
 801644c:	4642      	mov	r2, r8
 801644e:	464b      	mov	r3, r9
 8016450:	f7ea f8fa 	bl	8000648 <__aeabi_dmul>
 8016454:	2600      	movs	r6, #0
 8016456:	4682      	mov	sl, r0
 8016458:	468b      	mov	fp, r1
 801645a:	4632      	mov	r2, r6
 801645c:	464b      	mov	r3, r9
 801645e:	4630      	mov	r0, r6
 8016460:	4649      	mov	r1, r9
 8016462:	f7ea f8f1 	bl	8000648 <__aeabi_dmul>
 8016466:	4602      	mov	r2, r0
 8016468:	460b      	mov	r3, r1
 801646a:	4620      	mov	r0, r4
 801646c:	4629      	mov	r1, r5
 801646e:	f7e9 ff33 	bl	80002d8 <__aeabi_dsub>
 8016472:	4632      	mov	r2, r6
 8016474:	4604      	mov	r4, r0
 8016476:	460d      	mov	r5, r1
 8016478:	464b      	mov	r3, r9
 801647a:	4640      	mov	r0, r8
 801647c:	4649      	mov	r1, r9
 801647e:	f7e9 ff2d 	bl	80002dc <__adddf3>
 8016482:	4602      	mov	r2, r0
 8016484:	460b      	mov	r3, r1
 8016486:	4620      	mov	r0, r4
 8016488:	4629      	mov	r1, r5
 801648a:	f7ea fa07 	bl	800089c <__aeabi_ddiv>
 801648e:	4602      	mov	r2, r0
 8016490:	460b      	mov	r3, r1
 8016492:	4650      	mov	r0, sl
 8016494:	4659      	mov	r1, fp
 8016496:	f7e9 ff21 	bl	80002dc <__adddf3>
 801649a:	4632      	mov	r2, r6
 801649c:	464b      	mov	r3, r9
 801649e:	f7e9 ff1d 	bl	80002dc <__adddf3>
 80164a2:	4602      	mov	r2, r0
 80164a4:	460b      	mov	r3, r1
 80164a6:	f7e9 ff19 	bl	80002dc <__adddf3>
 80164aa:	e5fd      	b.n	80160a8 <__ieee754_acos+0x40>
 80164ac:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8016508 <__ieee754_acos+0x4a0>
 80164b0:	e5ee      	b.n	8016090 <__ieee754_acos+0x28>
 80164b2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8016510 <__ieee754_acos+0x4a8>
 80164b6:	e5eb      	b.n	8016090 <__ieee754_acos+0x28>
 80164b8:	0dfdf709 	.word	0x0dfdf709
 80164bc:	3f023de1 	.word	0x3f023de1
 80164c0:	7501b288 	.word	0x7501b288
 80164c4:	3f49efe0 	.word	0x3f49efe0
 80164c8:	b5688f3b 	.word	0xb5688f3b
 80164cc:	3fa48228 	.word	0x3fa48228
 80164d0:	0e884455 	.word	0x0e884455
 80164d4:	3fc9c155 	.word	0x3fc9c155
 80164d8:	03eb6f7d 	.word	0x03eb6f7d
 80164dc:	3fd4d612 	.word	0x3fd4d612
 80164e0:	55555555 	.word	0x55555555
 80164e4:	3fc55555 	.word	0x3fc55555
 80164e8:	b12e9282 	.word	0xb12e9282
 80164ec:	3fb3b8c5 	.word	0x3fb3b8c5
 80164f0:	1b8d0159 	.word	0x1b8d0159
 80164f4:	3fe6066c 	.word	0x3fe6066c
 80164f8:	9c598ac8 	.word	0x9c598ac8
 80164fc:	40002ae5 	.word	0x40002ae5
 8016500:	1c8a2d4b 	.word	0x1c8a2d4b
 8016504:	40033a27 	.word	0x40033a27
 8016508:	54442d18 	.word	0x54442d18
 801650c:	400921fb 	.word	0x400921fb
 8016510:	54442d18 	.word	0x54442d18
 8016514:	3ff921fb 	.word	0x3ff921fb
 8016518:	3ff00000 	.word	0x3ff00000
 801651c:	3fe00000 	.word	0x3fe00000

08016520 <__ieee754_pow>:
 8016520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016524:	b091      	sub	sp, #68	@ 0x44
 8016526:	ed8d 1b00 	vstr	d1, [sp]
 801652a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801652e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8016532:	ea5a 0001 	orrs.w	r0, sl, r1
 8016536:	ec57 6b10 	vmov	r6, r7, d0
 801653a:	d113      	bne.n	8016564 <__ieee754_pow+0x44>
 801653c:	19b3      	adds	r3, r6, r6
 801653e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8016542:	4152      	adcs	r2, r2
 8016544:	4298      	cmp	r0, r3
 8016546:	4b98      	ldr	r3, [pc, #608]	@ (80167a8 <__ieee754_pow+0x288>)
 8016548:	4193      	sbcs	r3, r2
 801654a:	f080 84ea 	bcs.w	8016f22 <__ieee754_pow+0xa02>
 801654e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016552:	4630      	mov	r0, r6
 8016554:	4639      	mov	r1, r7
 8016556:	f7e9 fec1 	bl	80002dc <__adddf3>
 801655a:	ec41 0b10 	vmov	d0, r0, r1
 801655e:	b011      	add	sp, #68	@ 0x44
 8016560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016564:	4a91      	ldr	r2, [pc, #580]	@ (80167ac <__ieee754_pow+0x28c>)
 8016566:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801656a:	4590      	cmp	r8, r2
 801656c:	463d      	mov	r5, r7
 801656e:	4633      	mov	r3, r6
 8016570:	d806      	bhi.n	8016580 <__ieee754_pow+0x60>
 8016572:	d101      	bne.n	8016578 <__ieee754_pow+0x58>
 8016574:	2e00      	cmp	r6, #0
 8016576:	d1ea      	bne.n	801654e <__ieee754_pow+0x2e>
 8016578:	4592      	cmp	sl, r2
 801657a:	d801      	bhi.n	8016580 <__ieee754_pow+0x60>
 801657c:	d10e      	bne.n	801659c <__ieee754_pow+0x7c>
 801657e:	b169      	cbz	r1, 801659c <__ieee754_pow+0x7c>
 8016580:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8016584:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8016588:	431d      	orrs	r5, r3
 801658a:	d1e0      	bne.n	801654e <__ieee754_pow+0x2e>
 801658c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016590:	18db      	adds	r3, r3, r3
 8016592:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8016596:	4152      	adcs	r2, r2
 8016598:	429d      	cmp	r5, r3
 801659a:	e7d4      	b.n	8016546 <__ieee754_pow+0x26>
 801659c:	2d00      	cmp	r5, #0
 801659e:	46c3      	mov	fp, r8
 80165a0:	da3a      	bge.n	8016618 <__ieee754_pow+0xf8>
 80165a2:	4a83      	ldr	r2, [pc, #524]	@ (80167b0 <__ieee754_pow+0x290>)
 80165a4:	4592      	cmp	sl, r2
 80165a6:	d84d      	bhi.n	8016644 <__ieee754_pow+0x124>
 80165a8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80165ac:	4592      	cmp	sl, r2
 80165ae:	f240 84c7 	bls.w	8016f40 <__ieee754_pow+0xa20>
 80165b2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80165b6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80165ba:	2a14      	cmp	r2, #20
 80165bc:	dd0f      	ble.n	80165de <__ieee754_pow+0xbe>
 80165be:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80165c2:	fa21 f402 	lsr.w	r4, r1, r2
 80165c6:	fa04 f202 	lsl.w	r2, r4, r2
 80165ca:	428a      	cmp	r2, r1
 80165cc:	f040 84b8 	bne.w	8016f40 <__ieee754_pow+0xa20>
 80165d0:	f004 0401 	and.w	r4, r4, #1
 80165d4:	f1c4 0402 	rsb	r4, r4, #2
 80165d8:	2900      	cmp	r1, #0
 80165da:	d158      	bne.n	801668e <__ieee754_pow+0x16e>
 80165dc:	e00e      	b.n	80165fc <__ieee754_pow+0xdc>
 80165de:	2900      	cmp	r1, #0
 80165e0:	d154      	bne.n	801668c <__ieee754_pow+0x16c>
 80165e2:	f1c2 0214 	rsb	r2, r2, #20
 80165e6:	fa4a f402 	asr.w	r4, sl, r2
 80165ea:	fa04 f202 	lsl.w	r2, r4, r2
 80165ee:	4552      	cmp	r2, sl
 80165f0:	f040 84a3 	bne.w	8016f3a <__ieee754_pow+0xa1a>
 80165f4:	f004 0401 	and.w	r4, r4, #1
 80165f8:	f1c4 0402 	rsb	r4, r4, #2
 80165fc:	4a6d      	ldr	r2, [pc, #436]	@ (80167b4 <__ieee754_pow+0x294>)
 80165fe:	4592      	cmp	sl, r2
 8016600:	d12e      	bne.n	8016660 <__ieee754_pow+0x140>
 8016602:	f1b9 0f00 	cmp.w	r9, #0
 8016606:	f280 8494 	bge.w	8016f32 <__ieee754_pow+0xa12>
 801660a:	496a      	ldr	r1, [pc, #424]	@ (80167b4 <__ieee754_pow+0x294>)
 801660c:	4632      	mov	r2, r6
 801660e:	463b      	mov	r3, r7
 8016610:	2000      	movs	r0, #0
 8016612:	f7ea f943 	bl	800089c <__aeabi_ddiv>
 8016616:	e7a0      	b.n	801655a <__ieee754_pow+0x3a>
 8016618:	2400      	movs	r4, #0
 801661a:	bbc1      	cbnz	r1, 801668e <__ieee754_pow+0x16e>
 801661c:	4a63      	ldr	r2, [pc, #396]	@ (80167ac <__ieee754_pow+0x28c>)
 801661e:	4592      	cmp	sl, r2
 8016620:	d1ec      	bne.n	80165fc <__ieee754_pow+0xdc>
 8016622:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8016626:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801662a:	431a      	orrs	r2, r3
 801662c:	f000 8479 	beq.w	8016f22 <__ieee754_pow+0xa02>
 8016630:	4b61      	ldr	r3, [pc, #388]	@ (80167b8 <__ieee754_pow+0x298>)
 8016632:	4598      	cmp	r8, r3
 8016634:	d908      	bls.n	8016648 <__ieee754_pow+0x128>
 8016636:	f1b9 0f00 	cmp.w	r9, #0
 801663a:	f2c0 8476 	blt.w	8016f2a <__ieee754_pow+0xa0a>
 801663e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016642:	e78a      	b.n	801655a <__ieee754_pow+0x3a>
 8016644:	2402      	movs	r4, #2
 8016646:	e7e8      	b.n	801661a <__ieee754_pow+0xfa>
 8016648:	f1b9 0f00 	cmp.w	r9, #0
 801664c:	f04f 0000 	mov.w	r0, #0
 8016650:	f04f 0100 	mov.w	r1, #0
 8016654:	da81      	bge.n	801655a <__ieee754_pow+0x3a>
 8016656:	e9dd 0300 	ldrd	r0, r3, [sp]
 801665a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801665e:	e77c      	b.n	801655a <__ieee754_pow+0x3a>
 8016660:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8016664:	d106      	bne.n	8016674 <__ieee754_pow+0x154>
 8016666:	4632      	mov	r2, r6
 8016668:	463b      	mov	r3, r7
 801666a:	4630      	mov	r0, r6
 801666c:	4639      	mov	r1, r7
 801666e:	f7e9 ffeb 	bl	8000648 <__aeabi_dmul>
 8016672:	e772      	b.n	801655a <__ieee754_pow+0x3a>
 8016674:	4a51      	ldr	r2, [pc, #324]	@ (80167bc <__ieee754_pow+0x29c>)
 8016676:	4591      	cmp	r9, r2
 8016678:	d109      	bne.n	801668e <__ieee754_pow+0x16e>
 801667a:	2d00      	cmp	r5, #0
 801667c:	db07      	blt.n	801668e <__ieee754_pow+0x16e>
 801667e:	ec47 6b10 	vmov	d0, r6, r7
 8016682:	b011      	add	sp, #68	@ 0x44
 8016684:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016688:	f7ff bc12 	b.w	8015eb0 <__ieee754_sqrt>
 801668c:	2400      	movs	r4, #0
 801668e:	ec47 6b10 	vmov	d0, r6, r7
 8016692:	9302      	str	r3, [sp, #8]
 8016694:	f7ff fbf8 	bl	8015e88 <fabs>
 8016698:	9b02      	ldr	r3, [sp, #8]
 801669a:	ec51 0b10 	vmov	r0, r1, d0
 801669e:	bb53      	cbnz	r3, 80166f6 <__ieee754_pow+0x1d6>
 80166a0:	4b44      	ldr	r3, [pc, #272]	@ (80167b4 <__ieee754_pow+0x294>)
 80166a2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80166a6:	429a      	cmp	r2, r3
 80166a8:	d002      	beq.n	80166b0 <__ieee754_pow+0x190>
 80166aa:	f1b8 0f00 	cmp.w	r8, #0
 80166ae:	d122      	bne.n	80166f6 <__ieee754_pow+0x1d6>
 80166b0:	f1b9 0f00 	cmp.w	r9, #0
 80166b4:	da05      	bge.n	80166c2 <__ieee754_pow+0x1a2>
 80166b6:	4602      	mov	r2, r0
 80166b8:	460b      	mov	r3, r1
 80166ba:	2000      	movs	r0, #0
 80166bc:	493d      	ldr	r1, [pc, #244]	@ (80167b4 <__ieee754_pow+0x294>)
 80166be:	f7ea f8ed 	bl	800089c <__aeabi_ddiv>
 80166c2:	2d00      	cmp	r5, #0
 80166c4:	f6bf af49 	bge.w	801655a <__ieee754_pow+0x3a>
 80166c8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80166cc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80166d0:	ea58 0804 	orrs.w	r8, r8, r4
 80166d4:	d108      	bne.n	80166e8 <__ieee754_pow+0x1c8>
 80166d6:	4602      	mov	r2, r0
 80166d8:	460b      	mov	r3, r1
 80166da:	4610      	mov	r0, r2
 80166dc:	4619      	mov	r1, r3
 80166de:	f7e9 fdfb 	bl	80002d8 <__aeabi_dsub>
 80166e2:	4602      	mov	r2, r0
 80166e4:	460b      	mov	r3, r1
 80166e6:	e794      	b.n	8016612 <__ieee754_pow+0xf2>
 80166e8:	2c01      	cmp	r4, #1
 80166ea:	f47f af36 	bne.w	801655a <__ieee754_pow+0x3a>
 80166ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80166f2:	4619      	mov	r1, r3
 80166f4:	e731      	b.n	801655a <__ieee754_pow+0x3a>
 80166f6:	0feb      	lsrs	r3, r5, #31
 80166f8:	3b01      	subs	r3, #1
 80166fa:	ea53 0204 	orrs.w	r2, r3, r4
 80166fe:	d102      	bne.n	8016706 <__ieee754_pow+0x1e6>
 8016700:	4632      	mov	r2, r6
 8016702:	463b      	mov	r3, r7
 8016704:	e7e9      	b.n	80166da <__ieee754_pow+0x1ba>
 8016706:	3c01      	subs	r4, #1
 8016708:	431c      	orrs	r4, r3
 801670a:	d016      	beq.n	801673a <__ieee754_pow+0x21a>
 801670c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8016798 <__ieee754_pow+0x278>
 8016710:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8016714:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016718:	f240 8112 	bls.w	8016940 <__ieee754_pow+0x420>
 801671c:	4b28      	ldr	r3, [pc, #160]	@ (80167c0 <__ieee754_pow+0x2a0>)
 801671e:	459a      	cmp	sl, r3
 8016720:	4b25      	ldr	r3, [pc, #148]	@ (80167b8 <__ieee754_pow+0x298>)
 8016722:	d916      	bls.n	8016752 <__ieee754_pow+0x232>
 8016724:	4598      	cmp	r8, r3
 8016726:	d80b      	bhi.n	8016740 <__ieee754_pow+0x220>
 8016728:	f1b9 0f00 	cmp.w	r9, #0
 801672c:	da0b      	bge.n	8016746 <__ieee754_pow+0x226>
 801672e:	2000      	movs	r0, #0
 8016730:	b011      	add	sp, #68	@ 0x44
 8016732:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016736:	f000 bceb 	b.w	8017110 <__math_oflow>
 801673a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80167a0 <__ieee754_pow+0x280>
 801673e:	e7e7      	b.n	8016710 <__ieee754_pow+0x1f0>
 8016740:	f1b9 0f00 	cmp.w	r9, #0
 8016744:	dcf3      	bgt.n	801672e <__ieee754_pow+0x20e>
 8016746:	2000      	movs	r0, #0
 8016748:	b011      	add	sp, #68	@ 0x44
 801674a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801674e:	f000 bcd7 	b.w	8017100 <__math_uflow>
 8016752:	4598      	cmp	r8, r3
 8016754:	d20c      	bcs.n	8016770 <__ieee754_pow+0x250>
 8016756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801675a:	2200      	movs	r2, #0
 801675c:	2300      	movs	r3, #0
 801675e:	f7ea f9e5 	bl	8000b2c <__aeabi_dcmplt>
 8016762:	3800      	subs	r0, #0
 8016764:	bf18      	it	ne
 8016766:	2001      	movne	r0, #1
 8016768:	f1b9 0f00 	cmp.w	r9, #0
 801676c:	daec      	bge.n	8016748 <__ieee754_pow+0x228>
 801676e:	e7df      	b.n	8016730 <__ieee754_pow+0x210>
 8016770:	4b10      	ldr	r3, [pc, #64]	@ (80167b4 <__ieee754_pow+0x294>)
 8016772:	4598      	cmp	r8, r3
 8016774:	f04f 0200 	mov.w	r2, #0
 8016778:	d924      	bls.n	80167c4 <__ieee754_pow+0x2a4>
 801677a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801677e:	2300      	movs	r3, #0
 8016780:	f7ea f9d4 	bl	8000b2c <__aeabi_dcmplt>
 8016784:	3800      	subs	r0, #0
 8016786:	bf18      	it	ne
 8016788:	2001      	movne	r0, #1
 801678a:	f1b9 0f00 	cmp.w	r9, #0
 801678e:	dccf      	bgt.n	8016730 <__ieee754_pow+0x210>
 8016790:	e7da      	b.n	8016748 <__ieee754_pow+0x228>
 8016792:	bf00      	nop
 8016794:	f3af 8000 	nop.w
 8016798:	00000000 	.word	0x00000000
 801679c:	3ff00000 	.word	0x3ff00000
 80167a0:	00000000 	.word	0x00000000
 80167a4:	bff00000 	.word	0xbff00000
 80167a8:	fff00000 	.word	0xfff00000
 80167ac:	7ff00000 	.word	0x7ff00000
 80167b0:	433fffff 	.word	0x433fffff
 80167b4:	3ff00000 	.word	0x3ff00000
 80167b8:	3fefffff 	.word	0x3fefffff
 80167bc:	3fe00000 	.word	0x3fe00000
 80167c0:	43f00000 	.word	0x43f00000
 80167c4:	4b5a      	ldr	r3, [pc, #360]	@ (8016930 <__ieee754_pow+0x410>)
 80167c6:	f7e9 fd87 	bl	80002d8 <__aeabi_dsub>
 80167ca:	a351      	add	r3, pc, #324	@ (adr r3, 8016910 <__ieee754_pow+0x3f0>)
 80167cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167d0:	4604      	mov	r4, r0
 80167d2:	460d      	mov	r5, r1
 80167d4:	f7e9 ff38 	bl	8000648 <__aeabi_dmul>
 80167d8:	a34f      	add	r3, pc, #316	@ (adr r3, 8016918 <__ieee754_pow+0x3f8>)
 80167da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167de:	4606      	mov	r6, r0
 80167e0:	460f      	mov	r7, r1
 80167e2:	4620      	mov	r0, r4
 80167e4:	4629      	mov	r1, r5
 80167e6:	f7e9 ff2f 	bl	8000648 <__aeabi_dmul>
 80167ea:	4b52      	ldr	r3, [pc, #328]	@ (8016934 <__ieee754_pow+0x414>)
 80167ec:	4682      	mov	sl, r0
 80167ee:	468b      	mov	fp, r1
 80167f0:	2200      	movs	r2, #0
 80167f2:	4620      	mov	r0, r4
 80167f4:	4629      	mov	r1, r5
 80167f6:	f7e9 ff27 	bl	8000648 <__aeabi_dmul>
 80167fa:	4602      	mov	r2, r0
 80167fc:	460b      	mov	r3, r1
 80167fe:	a148      	add	r1, pc, #288	@ (adr r1, 8016920 <__ieee754_pow+0x400>)
 8016800:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016804:	f7e9 fd68 	bl	80002d8 <__aeabi_dsub>
 8016808:	4622      	mov	r2, r4
 801680a:	462b      	mov	r3, r5
 801680c:	f7e9 ff1c 	bl	8000648 <__aeabi_dmul>
 8016810:	4602      	mov	r2, r0
 8016812:	460b      	mov	r3, r1
 8016814:	2000      	movs	r0, #0
 8016816:	4948      	ldr	r1, [pc, #288]	@ (8016938 <__ieee754_pow+0x418>)
 8016818:	f7e9 fd5e 	bl	80002d8 <__aeabi_dsub>
 801681c:	4622      	mov	r2, r4
 801681e:	4680      	mov	r8, r0
 8016820:	4689      	mov	r9, r1
 8016822:	462b      	mov	r3, r5
 8016824:	4620      	mov	r0, r4
 8016826:	4629      	mov	r1, r5
 8016828:	f7e9 ff0e 	bl	8000648 <__aeabi_dmul>
 801682c:	4602      	mov	r2, r0
 801682e:	460b      	mov	r3, r1
 8016830:	4640      	mov	r0, r8
 8016832:	4649      	mov	r1, r9
 8016834:	f7e9 ff08 	bl	8000648 <__aeabi_dmul>
 8016838:	a33b      	add	r3, pc, #236	@ (adr r3, 8016928 <__ieee754_pow+0x408>)
 801683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801683e:	f7e9 ff03 	bl	8000648 <__aeabi_dmul>
 8016842:	4602      	mov	r2, r0
 8016844:	460b      	mov	r3, r1
 8016846:	4650      	mov	r0, sl
 8016848:	4659      	mov	r1, fp
 801684a:	f7e9 fd45 	bl	80002d8 <__aeabi_dsub>
 801684e:	4602      	mov	r2, r0
 8016850:	460b      	mov	r3, r1
 8016852:	4680      	mov	r8, r0
 8016854:	4689      	mov	r9, r1
 8016856:	4630      	mov	r0, r6
 8016858:	4639      	mov	r1, r7
 801685a:	f7e9 fd3f 	bl	80002dc <__adddf3>
 801685e:	2400      	movs	r4, #0
 8016860:	4632      	mov	r2, r6
 8016862:	463b      	mov	r3, r7
 8016864:	4620      	mov	r0, r4
 8016866:	460d      	mov	r5, r1
 8016868:	f7e9 fd36 	bl	80002d8 <__aeabi_dsub>
 801686c:	4602      	mov	r2, r0
 801686e:	460b      	mov	r3, r1
 8016870:	4640      	mov	r0, r8
 8016872:	4649      	mov	r1, r9
 8016874:	f7e9 fd30 	bl	80002d8 <__aeabi_dsub>
 8016878:	e9dd 2300 	ldrd	r2, r3, [sp]
 801687c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016880:	2300      	movs	r3, #0
 8016882:	9304      	str	r3, [sp, #16]
 8016884:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016888:	4606      	mov	r6, r0
 801688a:	460f      	mov	r7, r1
 801688c:	4652      	mov	r2, sl
 801688e:	465b      	mov	r3, fp
 8016890:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016894:	f7e9 fd20 	bl	80002d8 <__aeabi_dsub>
 8016898:	4622      	mov	r2, r4
 801689a:	462b      	mov	r3, r5
 801689c:	f7e9 fed4 	bl	8000648 <__aeabi_dmul>
 80168a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80168a4:	4680      	mov	r8, r0
 80168a6:	4689      	mov	r9, r1
 80168a8:	4630      	mov	r0, r6
 80168aa:	4639      	mov	r1, r7
 80168ac:	f7e9 fecc 	bl	8000648 <__aeabi_dmul>
 80168b0:	4602      	mov	r2, r0
 80168b2:	460b      	mov	r3, r1
 80168b4:	4640      	mov	r0, r8
 80168b6:	4649      	mov	r1, r9
 80168b8:	f7e9 fd10 	bl	80002dc <__adddf3>
 80168bc:	4652      	mov	r2, sl
 80168be:	465b      	mov	r3, fp
 80168c0:	4606      	mov	r6, r0
 80168c2:	460f      	mov	r7, r1
 80168c4:	4620      	mov	r0, r4
 80168c6:	4629      	mov	r1, r5
 80168c8:	f7e9 febe 	bl	8000648 <__aeabi_dmul>
 80168cc:	460b      	mov	r3, r1
 80168ce:	4602      	mov	r2, r0
 80168d0:	4680      	mov	r8, r0
 80168d2:	4689      	mov	r9, r1
 80168d4:	4630      	mov	r0, r6
 80168d6:	4639      	mov	r1, r7
 80168d8:	f7e9 fd00 	bl	80002dc <__adddf3>
 80168dc:	4b17      	ldr	r3, [pc, #92]	@ (801693c <__ieee754_pow+0x41c>)
 80168de:	4299      	cmp	r1, r3
 80168e0:	4604      	mov	r4, r0
 80168e2:	460d      	mov	r5, r1
 80168e4:	468a      	mov	sl, r1
 80168e6:	468b      	mov	fp, r1
 80168e8:	f340 82ef 	ble.w	8016eca <__ieee754_pow+0x9aa>
 80168ec:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80168f0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80168f4:	4303      	orrs	r3, r0
 80168f6:	f000 81e8 	beq.w	8016cca <__ieee754_pow+0x7aa>
 80168fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80168fe:	2200      	movs	r2, #0
 8016900:	2300      	movs	r3, #0
 8016902:	f7ea f913 	bl	8000b2c <__aeabi_dcmplt>
 8016906:	3800      	subs	r0, #0
 8016908:	bf18      	it	ne
 801690a:	2001      	movne	r0, #1
 801690c:	e710      	b.n	8016730 <__ieee754_pow+0x210>
 801690e:	bf00      	nop
 8016910:	60000000 	.word	0x60000000
 8016914:	3ff71547 	.word	0x3ff71547
 8016918:	f85ddf44 	.word	0xf85ddf44
 801691c:	3e54ae0b 	.word	0x3e54ae0b
 8016920:	55555555 	.word	0x55555555
 8016924:	3fd55555 	.word	0x3fd55555
 8016928:	652b82fe 	.word	0x652b82fe
 801692c:	3ff71547 	.word	0x3ff71547
 8016930:	3ff00000 	.word	0x3ff00000
 8016934:	3fd00000 	.word	0x3fd00000
 8016938:	3fe00000 	.word	0x3fe00000
 801693c:	408fffff 	.word	0x408fffff
 8016940:	4bd5      	ldr	r3, [pc, #852]	@ (8016c98 <__ieee754_pow+0x778>)
 8016942:	402b      	ands	r3, r5
 8016944:	2200      	movs	r2, #0
 8016946:	b92b      	cbnz	r3, 8016954 <__ieee754_pow+0x434>
 8016948:	4bd4      	ldr	r3, [pc, #848]	@ (8016c9c <__ieee754_pow+0x77c>)
 801694a:	f7e9 fe7d 	bl	8000648 <__aeabi_dmul>
 801694e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8016952:	468b      	mov	fp, r1
 8016954:	ea4f 532b 	mov.w	r3, fp, asr #20
 8016958:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801695c:	4413      	add	r3, r2
 801695e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016960:	4bcf      	ldr	r3, [pc, #828]	@ (8016ca0 <__ieee754_pow+0x780>)
 8016962:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8016966:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801696a:	459b      	cmp	fp, r3
 801696c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016970:	dd08      	ble.n	8016984 <__ieee754_pow+0x464>
 8016972:	4bcc      	ldr	r3, [pc, #816]	@ (8016ca4 <__ieee754_pow+0x784>)
 8016974:	459b      	cmp	fp, r3
 8016976:	f340 81a5 	ble.w	8016cc4 <__ieee754_pow+0x7a4>
 801697a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801697c:	3301      	adds	r3, #1
 801697e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016980:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8016984:	f04f 0a00 	mov.w	sl, #0
 8016988:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801698c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801698e:	4bc6      	ldr	r3, [pc, #792]	@ (8016ca8 <__ieee754_pow+0x788>)
 8016990:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016994:	ed93 7b00 	vldr	d7, [r3]
 8016998:	4629      	mov	r1, r5
 801699a:	ec53 2b17 	vmov	r2, r3, d7
 801699e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80169a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80169a6:	f7e9 fc97 	bl	80002d8 <__aeabi_dsub>
 80169aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80169ae:	4606      	mov	r6, r0
 80169b0:	460f      	mov	r7, r1
 80169b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80169b6:	f7e9 fc91 	bl	80002dc <__adddf3>
 80169ba:	4602      	mov	r2, r0
 80169bc:	460b      	mov	r3, r1
 80169be:	2000      	movs	r0, #0
 80169c0:	49ba      	ldr	r1, [pc, #744]	@ (8016cac <__ieee754_pow+0x78c>)
 80169c2:	f7e9 ff6b 	bl	800089c <__aeabi_ddiv>
 80169c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80169ca:	4602      	mov	r2, r0
 80169cc:	460b      	mov	r3, r1
 80169ce:	4630      	mov	r0, r6
 80169d0:	4639      	mov	r1, r7
 80169d2:	f7e9 fe39 	bl	8000648 <__aeabi_dmul>
 80169d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80169da:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80169de:	106d      	asrs	r5, r5, #1
 80169e0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80169e4:	f04f 0b00 	mov.w	fp, #0
 80169e8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80169ec:	4661      	mov	r1, ip
 80169ee:	2200      	movs	r2, #0
 80169f0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80169f4:	4658      	mov	r0, fp
 80169f6:	46e1      	mov	r9, ip
 80169f8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80169fc:	4614      	mov	r4, r2
 80169fe:	461d      	mov	r5, r3
 8016a00:	f7e9 fe22 	bl	8000648 <__aeabi_dmul>
 8016a04:	4602      	mov	r2, r0
 8016a06:	460b      	mov	r3, r1
 8016a08:	4630      	mov	r0, r6
 8016a0a:	4639      	mov	r1, r7
 8016a0c:	f7e9 fc64 	bl	80002d8 <__aeabi_dsub>
 8016a10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016a14:	4606      	mov	r6, r0
 8016a16:	460f      	mov	r7, r1
 8016a18:	4620      	mov	r0, r4
 8016a1a:	4629      	mov	r1, r5
 8016a1c:	f7e9 fc5c 	bl	80002d8 <__aeabi_dsub>
 8016a20:	4602      	mov	r2, r0
 8016a22:	460b      	mov	r3, r1
 8016a24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016a28:	f7e9 fc56 	bl	80002d8 <__aeabi_dsub>
 8016a2c:	465a      	mov	r2, fp
 8016a2e:	464b      	mov	r3, r9
 8016a30:	f7e9 fe0a 	bl	8000648 <__aeabi_dmul>
 8016a34:	4602      	mov	r2, r0
 8016a36:	460b      	mov	r3, r1
 8016a38:	4630      	mov	r0, r6
 8016a3a:	4639      	mov	r1, r7
 8016a3c:	f7e9 fc4c 	bl	80002d8 <__aeabi_dsub>
 8016a40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016a44:	f7e9 fe00 	bl	8000648 <__aeabi_dmul>
 8016a48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016a4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016a50:	4610      	mov	r0, r2
 8016a52:	4619      	mov	r1, r3
 8016a54:	f7e9 fdf8 	bl	8000648 <__aeabi_dmul>
 8016a58:	a37d      	add	r3, pc, #500	@ (adr r3, 8016c50 <__ieee754_pow+0x730>)
 8016a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a5e:	4604      	mov	r4, r0
 8016a60:	460d      	mov	r5, r1
 8016a62:	f7e9 fdf1 	bl	8000648 <__aeabi_dmul>
 8016a66:	a37c      	add	r3, pc, #496	@ (adr r3, 8016c58 <__ieee754_pow+0x738>)
 8016a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a6c:	f7e9 fc36 	bl	80002dc <__adddf3>
 8016a70:	4622      	mov	r2, r4
 8016a72:	462b      	mov	r3, r5
 8016a74:	f7e9 fde8 	bl	8000648 <__aeabi_dmul>
 8016a78:	a379      	add	r3, pc, #484	@ (adr r3, 8016c60 <__ieee754_pow+0x740>)
 8016a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a7e:	f7e9 fc2d 	bl	80002dc <__adddf3>
 8016a82:	4622      	mov	r2, r4
 8016a84:	462b      	mov	r3, r5
 8016a86:	f7e9 fddf 	bl	8000648 <__aeabi_dmul>
 8016a8a:	a377      	add	r3, pc, #476	@ (adr r3, 8016c68 <__ieee754_pow+0x748>)
 8016a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a90:	f7e9 fc24 	bl	80002dc <__adddf3>
 8016a94:	4622      	mov	r2, r4
 8016a96:	462b      	mov	r3, r5
 8016a98:	f7e9 fdd6 	bl	8000648 <__aeabi_dmul>
 8016a9c:	a374      	add	r3, pc, #464	@ (adr r3, 8016c70 <__ieee754_pow+0x750>)
 8016a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aa2:	f7e9 fc1b 	bl	80002dc <__adddf3>
 8016aa6:	4622      	mov	r2, r4
 8016aa8:	462b      	mov	r3, r5
 8016aaa:	f7e9 fdcd 	bl	8000648 <__aeabi_dmul>
 8016aae:	a372      	add	r3, pc, #456	@ (adr r3, 8016c78 <__ieee754_pow+0x758>)
 8016ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ab4:	f7e9 fc12 	bl	80002dc <__adddf3>
 8016ab8:	4622      	mov	r2, r4
 8016aba:	4606      	mov	r6, r0
 8016abc:	460f      	mov	r7, r1
 8016abe:	462b      	mov	r3, r5
 8016ac0:	4620      	mov	r0, r4
 8016ac2:	4629      	mov	r1, r5
 8016ac4:	f7e9 fdc0 	bl	8000648 <__aeabi_dmul>
 8016ac8:	4602      	mov	r2, r0
 8016aca:	460b      	mov	r3, r1
 8016acc:	4630      	mov	r0, r6
 8016ace:	4639      	mov	r1, r7
 8016ad0:	f7e9 fdba 	bl	8000648 <__aeabi_dmul>
 8016ad4:	465a      	mov	r2, fp
 8016ad6:	4604      	mov	r4, r0
 8016ad8:	460d      	mov	r5, r1
 8016ada:	464b      	mov	r3, r9
 8016adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016ae0:	f7e9 fbfc 	bl	80002dc <__adddf3>
 8016ae4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016ae8:	f7e9 fdae 	bl	8000648 <__aeabi_dmul>
 8016aec:	4622      	mov	r2, r4
 8016aee:	462b      	mov	r3, r5
 8016af0:	f7e9 fbf4 	bl	80002dc <__adddf3>
 8016af4:	465a      	mov	r2, fp
 8016af6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016afa:	464b      	mov	r3, r9
 8016afc:	4658      	mov	r0, fp
 8016afe:	4649      	mov	r1, r9
 8016b00:	f7e9 fda2 	bl	8000648 <__aeabi_dmul>
 8016b04:	4b6a      	ldr	r3, [pc, #424]	@ (8016cb0 <__ieee754_pow+0x790>)
 8016b06:	2200      	movs	r2, #0
 8016b08:	4606      	mov	r6, r0
 8016b0a:	460f      	mov	r7, r1
 8016b0c:	f7e9 fbe6 	bl	80002dc <__adddf3>
 8016b10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016b14:	f7e9 fbe2 	bl	80002dc <__adddf3>
 8016b18:	46d8      	mov	r8, fp
 8016b1a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8016b1e:	460d      	mov	r5, r1
 8016b20:	465a      	mov	r2, fp
 8016b22:	460b      	mov	r3, r1
 8016b24:	4640      	mov	r0, r8
 8016b26:	4649      	mov	r1, r9
 8016b28:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8016b2c:	f7e9 fd8c 	bl	8000648 <__aeabi_dmul>
 8016b30:	465c      	mov	r4, fp
 8016b32:	4680      	mov	r8, r0
 8016b34:	4689      	mov	r9, r1
 8016b36:	4b5e      	ldr	r3, [pc, #376]	@ (8016cb0 <__ieee754_pow+0x790>)
 8016b38:	2200      	movs	r2, #0
 8016b3a:	4620      	mov	r0, r4
 8016b3c:	4629      	mov	r1, r5
 8016b3e:	f7e9 fbcb 	bl	80002d8 <__aeabi_dsub>
 8016b42:	4632      	mov	r2, r6
 8016b44:	463b      	mov	r3, r7
 8016b46:	f7e9 fbc7 	bl	80002d8 <__aeabi_dsub>
 8016b4a:	4602      	mov	r2, r0
 8016b4c:	460b      	mov	r3, r1
 8016b4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016b52:	f7e9 fbc1 	bl	80002d8 <__aeabi_dsub>
 8016b56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016b5a:	f7e9 fd75 	bl	8000648 <__aeabi_dmul>
 8016b5e:	4622      	mov	r2, r4
 8016b60:	4606      	mov	r6, r0
 8016b62:	460f      	mov	r7, r1
 8016b64:	462b      	mov	r3, r5
 8016b66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016b6a:	f7e9 fd6d 	bl	8000648 <__aeabi_dmul>
 8016b6e:	4602      	mov	r2, r0
 8016b70:	460b      	mov	r3, r1
 8016b72:	4630      	mov	r0, r6
 8016b74:	4639      	mov	r1, r7
 8016b76:	f7e9 fbb1 	bl	80002dc <__adddf3>
 8016b7a:	4606      	mov	r6, r0
 8016b7c:	460f      	mov	r7, r1
 8016b7e:	4602      	mov	r2, r0
 8016b80:	460b      	mov	r3, r1
 8016b82:	4640      	mov	r0, r8
 8016b84:	4649      	mov	r1, r9
 8016b86:	f7e9 fba9 	bl	80002dc <__adddf3>
 8016b8a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8016b8e:	a33c      	add	r3, pc, #240	@ (adr r3, 8016c80 <__ieee754_pow+0x760>)
 8016b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b94:	4658      	mov	r0, fp
 8016b96:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8016b9a:	460d      	mov	r5, r1
 8016b9c:	f7e9 fd54 	bl	8000648 <__aeabi_dmul>
 8016ba0:	465c      	mov	r4, fp
 8016ba2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016ba6:	4642      	mov	r2, r8
 8016ba8:	464b      	mov	r3, r9
 8016baa:	4620      	mov	r0, r4
 8016bac:	4629      	mov	r1, r5
 8016bae:	f7e9 fb93 	bl	80002d8 <__aeabi_dsub>
 8016bb2:	4602      	mov	r2, r0
 8016bb4:	460b      	mov	r3, r1
 8016bb6:	4630      	mov	r0, r6
 8016bb8:	4639      	mov	r1, r7
 8016bba:	f7e9 fb8d 	bl	80002d8 <__aeabi_dsub>
 8016bbe:	a332      	add	r3, pc, #200	@ (adr r3, 8016c88 <__ieee754_pow+0x768>)
 8016bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bc4:	f7e9 fd40 	bl	8000648 <__aeabi_dmul>
 8016bc8:	a331      	add	r3, pc, #196	@ (adr r3, 8016c90 <__ieee754_pow+0x770>)
 8016bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bce:	4606      	mov	r6, r0
 8016bd0:	460f      	mov	r7, r1
 8016bd2:	4620      	mov	r0, r4
 8016bd4:	4629      	mov	r1, r5
 8016bd6:	f7e9 fd37 	bl	8000648 <__aeabi_dmul>
 8016bda:	4602      	mov	r2, r0
 8016bdc:	460b      	mov	r3, r1
 8016bde:	4630      	mov	r0, r6
 8016be0:	4639      	mov	r1, r7
 8016be2:	f7e9 fb7b 	bl	80002dc <__adddf3>
 8016be6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016be8:	4b32      	ldr	r3, [pc, #200]	@ (8016cb4 <__ieee754_pow+0x794>)
 8016bea:	4413      	add	r3, r2
 8016bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bf0:	f7e9 fb74 	bl	80002dc <__adddf3>
 8016bf4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016bf8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016bfa:	f7e9 fcbb 	bl	8000574 <__aeabi_i2d>
 8016bfe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016c00:	4b2d      	ldr	r3, [pc, #180]	@ (8016cb8 <__ieee754_pow+0x798>)
 8016c02:	4413      	add	r3, r2
 8016c04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016c08:	4606      	mov	r6, r0
 8016c0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016c0e:	460f      	mov	r7, r1
 8016c10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016c14:	f7e9 fb62 	bl	80002dc <__adddf3>
 8016c18:	4642      	mov	r2, r8
 8016c1a:	464b      	mov	r3, r9
 8016c1c:	f7e9 fb5e 	bl	80002dc <__adddf3>
 8016c20:	4632      	mov	r2, r6
 8016c22:	463b      	mov	r3, r7
 8016c24:	f7e9 fb5a 	bl	80002dc <__adddf3>
 8016c28:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8016c2c:	4632      	mov	r2, r6
 8016c2e:	463b      	mov	r3, r7
 8016c30:	4658      	mov	r0, fp
 8016c32:	460d      	mov	r5, r1
 8016c34:	f7e9 fb50 	bl	80002d8 <__aeabi_dsub>
 8016c38:	4642      	mov	r2, r8
 8016c3a:	464b      	mov	r3, r9
 8016c3c:	f7e9 fb4c 	bl	80002d8 <__aeabi_dsub>
 8016c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016c44:	f7e9 fb48 	bl	80002d8 <__aeabi_dsub>
 8016c48:	465c      	mov	r4, fp
 8016c4a:	4602      	mov	r2, r0
 8016c4c:	e036      	b.n	8016cbc <__ieee754_pow+0x79c>
 8016c4e:	bf00      	nop
 8016c50:	4a454eef 	.word	0x4a454eef
 8016c54:	3fca7e28 	.word	0x3fca7e28
 8016c58:	93c9db65 	.word	0x93c9db65
 8016c5c:	3fcd864a 	.word	0x3fcd864a
 8016c60:	a91d4101 	.word	0xa91d4101
 8016c64:	3fd17460 	.word	0x3fd17460
 8016c68:	518f264d 	.word	0x518f264d
 8016c6c:	3fd55555 	.word	0x3fd55555
 8016c70:	db6fabff 	.word	0xdb6fabff
 8016c74:	3fdb6db6 	.word	0x3fdb6db6
 8016c78:	33333303 	.word	0x33333303
 8016c7c:	3fe33333 	.word	0x3fe33333
 8016c80:	e0000000 	.word	0xe0000000
 8016c84:	3feec709 	.word	0x3feec709
 8016c88:	dc3a03fd 	.word	0xdc3a03fd
 8016c8c:	3feec709 	.word	0x3feec709
 8016c90:	145b01f5 	.word	0x145b01f5
 8016c94:	be3e2fe0 	.word	0xbe3e2fe0
 8016c98:	7ff00000 	.word	0x7ff00000
 8016c9c:	43400000 	.word	0x43400000
 8016ca0:	0003988e 	.word	0x0003988e
 8016ca4:	000bb679 	.word	0x000bb679
 8016ca8:	08017958 	.word	0x08017958
 8016cac:	3ff00000 	.word	0x3ff00000
 8016cb0:	40080000 	.word	0x40080000
 8016cb4:	08017938 	.word	0x08017938
 8016cb8:	08017948 	.word	0x08017948
 8016cbc:	460b      	mov	r3, r1
 8016cbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016cc2:	e5d7      	b.n	8016874 <__ieee754_pow+0x354>
 8016cc4:	f04f 0a01 	mov.w	sl, #1
 8016cc8:	e65e      	b.n	8016988 <__ieee754_pow+0x468>
 8016cca:	a3b4      	add	r3, pc, #720	@ (adr r3, 8016f9c <__ieee754_pow+0xa7c>)
 8016ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cd0:	4630      	mov	r0, r6
 8016cd2:	4639      	mov	r1, r7
 8016cd4:	f7e9 fb02 	bl	80002dc <__adddf3>
 8016cd8:	4642      	mov	r2, r8
 8016cda:	e9cd 0100 	strd	r0, r1, [sp]
 8016cde:	464b      	mov	r3, r9
 8016ce0:	4620      	mov	r0, r4
 8016ce2:	4629      	mov	r1, r5
 8016ce4:	f7e9 faf8 	bl	80002d8 <__aeabi_dsub>
 8016ce8:	4602      	mov	r2, r0
 8016cea:	460b      	mov	r3, r1
 8016cec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016cf0:	f7e9 ff3a 	bl	8000b68 <__aeabi_dcmpgt>
 8016cf4:	2800      	cmp	r0, #0
 8016cf6:	f47f ae00 	bne.w	80168fa <__ieee754_pow+0x3da>
 8016cfa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8016cfe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8016d02:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8016d06:	fa43 fa0a 	asr.w	sl, r3, sl
 8016d0a:	44da      	add	sl, fp
 8016d0c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8016d10:	489d      	ldr	r0, [pc, #628]	@ (8016f88 <__ieee754_pow+0xa68>)
 8016d12:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8016d16:	4108      	asrs	r0, r1
 8016d18:	ea00 030a 	and.w	r3, r0, sl
 8016d1c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8016d20:	f1c1 0114 	rsb	r1, r1, #20
 8016d24:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8016d28:	fa4a fa01 	asr.w	sl, sl, r1
 8016d2c:	f1bb 0f00 	cmp.w	fp, #0
 8016d30:	4640      	mov	r0, r8
 8016d32:	4649      	mov	r1, r9
 8016d34:	f04f 0200 	mov.w	r2, #0
 8016d38:	bfb8      	it	lt
 8016d3a:	f1ca 0a00 	rsblt	sl, sl, #0
 8016d3e:	f7e9 facb 	bl	80002d8 <__aeabi_dsub>
 8016d42:	4680      	mov	r8, r0
 8016d44:	4689      	mov	r9, r1
 8016d46:	4632      	mov	r2, r6
 8016d48:	463b      	mov	r3, r7
 8016d4a:	4640      	mov	r0, r8
 8016d4c:	4649      	mov	r1, r9
 8016d4e:	f7e9 fac5 	bl	80002dc <__adddf3>
 8016d52:	2400      	movs	r4, #0
 8016d54:	a37c      	add	r3, pc, #496	@ (adr r3, 8016f48 <__ieee754_pow+0xa28>)
 8016d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	460d      	mov	r5, r1
 8016d5e:	f7e9 fc73 	bl	8000648 <__aeabi_dmul>
 8016d62:	4642      	mov	r2, r8
 8016d64:	e9cd 0100 	strd	r0, r1, [sp]
 8016d68:	464b      	mov	r3, r9
 8016d6a:	4620      	mov	r0, r4
 8016d6c:	4629      	mov	r1, r5
 8016d6e:	f7e9 fab3 	bl	80002d8 <__aeabi_dsub>
 8016d72:	4602      	mov	r2, r0
 8016d74:	460b      	mov	r3, r1
 8016d76:	4630      	mov	r0, r6
 8016d78:	4639      	mov	r1, r7
 8016d7a:	f7e9 faad 	bl	80002d8 <__aeabi_dsub>
 8016d7e:	a374      	add	r3, pc, #464	@ (adr r3, 8016f50 <__ieee754_pow+0xa30>)
 8016d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d84:	f7e9 fc60 	bl	8000648 <__aeabi_dmul>
 8016d88:	a373      	add	r3, pc, #460	@ (adr r3, 8016f58 <__ieee754_pow+0xa38>)
 8016d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d8e:	4680      	mov	r8, r0
 8016d90:	4689      	mov	r9, r1
 8016d92:	4620      	mov	r0, r4
 8016d94:	4629      	mov	r1, r5
 8016d96:	f7e9 fc57 	bl	8000648 <__aeabi_dmul>
 8016d9a:	4602      	mov	r2, r0
 8016d9c:	460b      	mov	r3, r1
 8016d9e:	4640      	mov	r0, r8
 8016da0:	4649      	mov	r1, r9
 8016da2:	f7e9 fa9b 	bl	80002dc <__adddf3>
 8016da6:	4604      	mov	r4, r0
 8016da8:	460d      	mov	r5, r1
 8016daa:	4602      	mov	r2, r0
 8016dac:	460b      	mov	r3, r1
 8016dae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016db2:	f7e9 fa93 	bl	80002dc <__adddf3>
 8016db6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016dba:	4680      	mov	r8, r0
 8016dbc:	4689      	mov	r9, r1
 8016dbe:	f7e9 fa8b 	bl	80002d8 <__aeabi_dsub>
 8016dc2:	4602      	mov	r2, r0
 8016dc4:	460b      	mov	r3, r1
 8016dc6:	4620      	mov	r0, r4
 8016dc8:	4629      	mov	r1, r5
 8016dca:	f7e9 fa85 	bl	80002d8 <__aeabi_dsub>
 8016dce:	4642      	mov	r2, r8
 8016dd0:	4606      	mov	r6, r0
 8016dd2:	460f      	mov	r7, r1
 8016dd4:	464b      	mov	r3, r9
 8016dd6:	4640      	mov	r0, r8
 8016dd8:	4649      	mov	r1, r9
 8016dda:	f7e9 fc35 	bl	8000648 <__aeabi_dmul>
 8016dde:	a360      	add	r3, pc, #384	@ (adr r3, 8016f60 <__ieee754_pow+0xa40>)
 8016de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016de4:	4604      	mov	r4, r0
 8016de6:	460d      	mov	r5, r1
 8016de8:	f7e9 fc2e 	bl	8000648 <__aeabi_dmul>
 8016dec:	a35e      	add	r3, pc, #376	@ (adr r3, 8016f68 <__ieee754_pow+0xa48>)
 8016dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016df2:	f7e9 fa71 	bl	80002d8 <__aeabi_dsub>
 8016df6:	4622      	mov	r2, r4
 8016df8:	462b      	mov	r3, r5
 8016dfa:	f7e9 fc25 	bl	8000648 <__aeabi_dmul>
 8016dfe:	a35c      	add	r3, pc, #368	@ (adr r3, 8016f70 <__ieee754_pow+0xa50>)
 8016e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e04:	f7e9 fa6a 	bl	80002dc <__adddf3>
 8016e08:	4622      	mov	r2, r4
 8016e0a:	462b      	mov	r3, r5
 8016e0c:	f7e9 fc1c 	bl	8000648 <__aeabi_dmul>
 8016e10:	a359      	add	r3, pc, #356	@ (adr r3, 8016f78 <__ieee754_pow+0xa58>)
 8016e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e16:	f7e9 fa5f 	bl	80002d8 <__aeabi_dsub>
 8016e1a:	4622      	mov	r2, r4
 8016e1c:	462b      	mov	r3, r5
 8016e1e:	f7e9 fc13 	bl	8000648 <__aeabi_dmul>
 8016e22:	a357      	add	r3, pc, #348	@ (adr r3, 8016f80 <__ieee754_pow+0xa60>)
 8016e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e28:	f7e9 fa58 	bl	80002dc <__adddf3>
 8016e2c:	4622      	mov	r2, r4
 8016e2e:	462b      	mov	r3, r5
 8016e30:	f7e9 fc0a 	bl	8000648 <__aeabi_dmul>
 8016e34:	4602      	mov	r2, r0
 8016e36:	460b      	mov	r3, r1
 8016e38:	4640      	mov	r0, r8
 8016e3a:	4649      	mov	r1, r9
 8016e3c:	f7e9 fa4c 	bl	80002d8 <__aeabi_dsub>
 8016e40:	4604      	mov	r4, r0
 8016e42:	460d      	mov	r5, r1
 8016e44:	4602      	mov	r2, r0
 8016e46:	460b      	mov	r3, r1
 8016e48:	4640      	mov	r0, r8
 8016e4a:	4649      	mov	r1, r9
 8016e4c:	f7e9 fbfc 	bl	8000648 <__aeabi_dmul>
 8016e50:	2200      	movs	r2, #0
 8016e52:	e9cd 0100 	strd	r0, r1, [sp]
 8016e56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016e5a:	4620      	mov	r0, r4
 8016e5c:	4629      	mov	r1, r5
 8016e5e:	f7e9 fa3b 	bl	80002d8 <__aeabi_dsub>
 8016e62:	4602      	mov	r2, r0
 8016e64:	460b      	mov	r3, r1
 8016e66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e6a:	f7e9 fd17 	bl	800089c <__aeabi_ddiv>
 8016e6e:	4632      	mov	r2, r6
 8016e70:	4604      	mov	r4, r0
 8016e72:	460d      	mov	r5, r1
 8016e74:	463b      	mov	r3, r7
 8016e76:	4640      	mov	r0, r8
 8016e78:	4649      	mov	r1, r9
 8016e7a:	f7e9 fbe5 	bl	8000648 <__aeabi_dmul>
 8016e7e:	4632      	mov	r2, r6
 8016e80:	463b      	mov	r3, r7
 8016e82:	f7e9 fa2b 	bl	80002dc <__adddf3>
 8016e86:	4602      	mov	r2, r0
 8016e88:	460b      	mov	r3, r1
 8016e8a:	4620      	mov	r0, r4
 8016e8c:	4629      	mov	r1, r5
 8016e8e:	f7e9 fa23 	bl	80002d8 <__aeabi_dsub>
 8016e92:	4642      	mov	r2, r8
 8016e94:	464b      	mov	r3, r9
 8016e96:	f7e9 fa1f 	bl	80002d8 <__aeabi_dsub>
 8016e9a:	460b      	mov	r3, r1
 8016e9c:	4602      	mov	r2, r0
 8016e9e:	493b      	ldr	r1, [pc, #236]	@ (8016f8c <__ieee754_pow+0xa6c>)
 8016ea0:	2000      	movs	r0, #0
 8016ea2:	f7e9 fa19 	bl	80002d8 <__aeabi_dsub>
 8016ea6:	ec41 0b10 	vmov	d0, r0, r1
 8016eaa:	ee10 3a90 	vmov	r3, s1
 8016eae:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016eb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016eb6:	da30      	bge.n	8016f1a <__ieee754_pow+0x9fa>
 8016eb8:	4650      	mov	r0, sl
 8016eba:	f000 f875 	bl	8016fa8 <scalbn>
 8016ebe:	ec51 0b10 	vmov	r0, r1, d0
 8016ec2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016ec6:	f7ff bbd2 	b.w	801666e <__ieee754_pow+0x14e>
 8016eca:	4c31      	ldr	r4, [pc, #196]	@ (8016f90 <__ieee754_pow+0xa70>)
 8016ecc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016ed0:	42a3      	cmp	r3, r4
 8016ed2:	d91a      	bls.n	8016f0a <__ieee754_pow+0x9ea>
 8016ed4:	4b2f      	ldr	r3, [pc, #188]	@ (8016f94 <__ieee754_pow+0xa74>)
 8016ed6:	440b      	add	r3, r1
 8016ed8:	4303      	orrs	r3, r0
 8016eda:	d009      	beq.n	8016ef0 <__ieee754_pow+0x9d0>
 8016edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	2300      	movs	r3, #0
 8016ee4:	f7e9 fe22 	bl	8000b2c <__aeabi_dcmplt>
 8016ee8:	3800      	subs	r0, #0
 8016eea:	bf18      	it	ne
 8016eec:	2001      	movne	r0, #1
 8016eee:	e42b      	b.n	8016748 <__ieee754_pow+0x228>
 8016ef0:	4642      	mov	r2, r8
 8016ef2:	464b      	mov	r3, r9
 8016ef4:	f7e9 f9f0 	bl	80002d8 <__aeabi_dsub>
 8016ef8:	4632      	mov	r2, r6
 8016efa:	463b      	mov	r3, r7
 8016efc:	f7e9 fe2a 	bl	8000b54 <__aeabi_dcmpge>
 8016f00:	2800      	cmp	r0, #0
 8016f02:	d1eb      	bne.n	8016edc <__ieee754_pow+0x9bc>
 8016f04:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8016fa4 <__ieee754_pow+0xa84>
 8016f08:	e6f7      	b.n	8016cfa <__ieee754_pow+0x7da>
 8016f0a:	469a      	mov	sl, r3
 8016f0c:	4b22      	ldr	r3, [pc, #136]	@ (8016f98 <__ieee754_pow+0xa78>)
 8016f0e:	459a      	cmp	sl, r3
 8016f10:	f63f aef3 	bhi.w	8016cfa <__ieee754_pow+0x7da>
 8016f14:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016f18:	e715      	b.n	8016d46 <__ieee754_pow+0x826>
 8016f1a:	ec51 0b10 	vmov	r0, r1, d0
 8016f1e:	4619      	mov	r1, r3
 8016f20:	e7cf      	b.n	8016ec2 <__ieee754_pow+0x9a2>
 8016f22:	491a      	ldr	r1, [pc, #104]	@ (8016f8c <__ieee754_pow+0xa6c>)
 8016f24:	2000      	movs	r0, #0
 8016f26:	f7ff bb18 	b.w	801655a <__ieee754_pow+0x3a>
 8016f2a:	2000      	movs	r0, #0
 8016f2c:	2100      	movs	r1, #0
 8016f2e:	f7ff bb14 	b.w	801655a <__ieee754_pow+0x3a>
 8016f32:	4630      	mov	r0, r6
 8016f34:	4639      	mov	r1, r7
 8016f36:	f7ff bb10 	b.w	801655a <__ieee754_pow+0x3a>
 8016f3a:	460c      	mov	r4, r1
 8016f3c:	f7ff bb5e 	b.w	80165fc <__ieee754_pow+0xdc>
 8016f40:	2400      	movs	r4, #0
 8016f42:	f7ff bb49 	b.w	80165d8 <__ieee754_pow+0xb8>
 8016f46:	bf00      	nop
 8016f48:	00000000 	.word	0x00000000
 8016f4c:	3fe62e43 	.word	0x3fe62e43
 8016f50:	fefa39ef 	.word	0xfefa39ef
 8016f54:	3fe62e42 	.word	0x3fe62e42
 8016f58:	0ca86c39 	.word	0x0ca86c39
 8016f5c:	be205c61 	.word	0xbe205c61
 8016f60:	72bea4d0 	.word	0x72bea4d0
 8016f64:	3e663769 	.word	0x3e663769
 8016f68:	c5d26bf1 	.word	0xc5d26bf1
 8016f6c:	3ebbbd41 	.word	0x3ebbbd41
 8016f70:	af25de2c 	.word	0xaf25de2c
 8016f74:	3f11566a 	.word	0x3f11566a
 8016f78:	16bebd93 	.word	0x16bebd93
 8016f7c:	3f66c16c 	.word	0x3f66c16c
 8016f80:	5555553e 	.word	0x5555553e
 8016f84:	3fc55555 	.word	0x3fc55555
 8016f88:	fff00000 	.word	0xfff00000
 8016f8c:	3ff00000 	.word	0x3ff00000
 8016f90:	4090cbff 	.word	0x4090cbff
 8016f94:	3f6f3400 	.word	0x3f6f3400
 8016f98:	3fe00000 	.word	0x3fe00000
 8016f9c:	652b82fe 	.word	0x652b82fe
 8016fa0:	3c971547 	.word	0x3c971547
 8016fa4:	4090cc00 	.word	0x4090cc00

08016fa8 <scalbn>:
 8016fa8:	b570      	push	{r4, r5, r6, lr}
 8016faa:	ec55 4b10 	vmov	r4, r5, d0
 8016fae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8016fb2:	4606      	mov	r6, r0
 8016fb4:	462b      	mov	r3, r5
 8016fb6:	b991      	cbnz	r1, 8016fde <scalbn+0x36>
 8016fb8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016fbc:	4323      	orrs	r3, r4
 8016fbe:	d03d      	beq.n	801703c <scalbn+0x94>
 8016fc0:	4b35      	ldr	r3, [pc, #212]	@ (8017098 <scalbn+0xf0>)
 8016fc2:	4620      	mov	r0, r4
 8016fc4:	4629      	mov	r1, r5
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	f7e9 fb3e 	bl	8000648 <__aeabi_dmul>
 8016fcc:	4b33      	ldr	r3, [pc, #204]	@ (801709c <scalbn+0xf4>)
 8016fce:	429e      	cmp	r6, r3
 8016fd0:	4604      	mov	r4, r0
 8016fd2:	460d      	mov	r5, r1
 8016fd4:	da0f      	bge.n	8016ff6 <scalbn+0x4e>
 8016fd6:	a328      	add	r3, pc, #160	@ (adr r3, 8017078 <scalbn+0xd0>)
 8016fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fdc:	e01e      	b.n	801701c <scalbn+0x74>
 8016fde:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8016fe2:	4291      	cmp	r1, r2
 8016fe4:	d10b      	bne.n	8016ffe <scalbn+0x56>
 8016fe6:	4622      	mov	r2, r4
 8016fe8:	4620      	mov	r0, r4
 8016fea:	4629      	mov	r1, r5
 8016fec:	f7e9 f976 	bl	80002dc <__adddf3>
 8016ff0:	4604      	mov	r4, r0
 8016ff2:	460d      	mov	r5, r1
 8016ff4:	e022      	b.n	801703c <scalbn+0x94>
 8016ff6:	460b      	mov	r3, r1
 8016ff8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016ffc:	3936      	subs	r1, #54	@ 0x36
 8016ffe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8017002:	4296      	cmp	r6, r2
 8017004:	dd0d      	ble.n	8017022 <scalbn+0x7a>
 8017006:	2d00      	cmp	r5, #0
 8017008:	a11d      	add	r1, pc, #116	@ (adr r1, 8017080 <scalbn+0xd8>)
 801700a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801700e:	da02      	bge.n	8017016 <scalbn+0x6e>
 8017010:	a11d      	add	r1, pc, #116	@ (adr r1, 8017088 <scalbn+0xe0>)
 8017012:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017016:	a31a      	add	r3, pc, #104	@ (adr r3, 8017080 <scalbn+0xd8>)
 8017018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801701c:	f7e9 fb14 	bl	8000648 <__aeabi_dmul>
 8017020:	e7e6      	b.n	8016ff0 <scalbn+0x48>
 8017022:	1872      	adds	r2, r6, r1
 8017024:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8017028:	428a      	cmp	r2, r1
 801702a:	dcec      	bgt.n	8017006 <scalbn+0x5e>
 801702c:	2a00      	cmp	r2, #0
 801702e:	dd08      	ble.n	8017042 <scalbn+0x9a>
 8017030:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8017034:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8017038:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801703c:	ec45 4b10 	vmov	d0, r4, r5
 8017040:	bd70      	pop	{r4, r5, r6, pc}
 8017042:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8017046:	da08      	bge.n	801705a <scalbn+0xb2>
 8017048:	2d00      	cmp	r5, #0
 801704a:	a10b      	add	r1, pc, #44	@ (adr r1, 8017078 <scalbn+0xd0>)
 801704c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017050:	dac1      	bge.n	8016fd6 <scalbn+0x2e>
 8017052:	a10f      	add	r1, pc, #60	@ (adr r1, 8017090 <scalbn+0xe8>)
 8017054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017058:	e7bd      	b.n	8016fd6 <scalbn+0x2e>
 801705a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801705e:	3236      	adds	r2, #54	@ 0x36
 8017060:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8017064:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017068:	4620      	mov	r0, r4
 801706a:	4b0d      	ldr	r3, [pc, #52]	@ (80170a0 <scalbn+0xf8>)
 801706c:	4629      	mov	r1, r5
 801706e:	2200      	movs	r2, #0
 8017070:	e7d4      	b.n	801701c <scalbn+0x74>
 8017072:	bf00      	nop
 8017074:	f3af 8000 	nop.w
 8017078:	c2f8f359 	.word	0xc2f8f359
 801707c:	01a56e1f 	.word	0x01a56e1f
 8017080:	8800759c 	.word	0x8800759c
 8017084:	7e37e43c 	.word	0x7e37e43c
 8017088:	8800759c 	.word	0x8800759c
 801708c:	fe37e43c 	.word	0xfe37e43c
 8017090:	c2f8f359 	.word	0xc2f8f359
 8017094:	81a56e1f 	.word	0x81a56e1f
 8017098:	43500000 	.word	0x43500000
 801709c:	ffff3cb0 	.word	0xffff3cb0
 80170a0:	3c900000 	.word	0x3c900000

080170a4 <with_errno>:
 80170a4:	b510      	push	{r4, lr}
 80170a6:	ed2d 8b02 	vpush	{d8}
 80170aa:	eeb0 8a40 	vmov.f32	s16, s0
 80170ae:	eef0 8a60 	vmov.f32	s17, s1
 80170b2:	4604      	mov	r4, r0
 80170b4:	f7fa fea4 	bl	8011e00 <__errno>
 80170b8:	eeb0 0a48 	vmov.f32	s0, s16
 80170bc:	eef0 0a68 	vmov.f32	s1, s17
 80170c0:	ecbd 8b02 	vpop	{d8}
 80170c4:	6004      	str	r4, [r0, #0]
 80170c6:	bd10      	pop	{r4, pc}

080170c8 <xflow>:
 80170c8:	4603      	mov	r3, r0
 80170ca:	b507      	push	{r0, r1, r2, lr}
 80170cc:	ec51 0b10 	vmov	r0, r1, d0
 80170d0:	b183      	cbz	r3, 80170f4 <xflow+0x2c>
 80170d2:	4602      	mov	r2, r0
 80170d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80170d8:	e9cd 2300 	strd	r2, r3, [sp]
 80170dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80170e0:	f7e9 fab2 	bl	8000648 <__aeabi_dmul>
 80170e4:	ec41 0b10 	vmov	d0, r0, r1
 80170e8:	2022      	movs	r0, #34	@ 0x22
 80170ea:	b003      	add	sp, #12
 80170ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80170f0:	f7ff bfd8 	b.w	80170a4 <with_errno>
 80170f4:	4602      	mov	r2, r0
 80170f6:	460b      	mov	r3, r1
 80170f8:	e7ee      	b.n	80170d8 <xflow+0x10>
 80170fa:	0000      	movs	r0, r0
 80170fc:	0000      	movs	r0, r0
	...

08017100 <__math_uflow>:
 8017100:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017108 <__math_uflow+0x8>
 8017104:	f7ff bfe0 	b.w	80170c8 <xflow>
 8017108:	00000000 	.word	0x00000000
 801710c:	10000000 	.word	0x10000000

08017110 <__math_oflow>:
 8017110:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017118 <__math_oflow+0x8>
 8017114:	f7ff bfd8 	b.w	80170c8 <xflow>
 8017118:	00000000 	.word	0x00000000
 801711c:	70000000 	.word	0x70000000

08017120 <_init>:
 8017120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017122:	bf00      	nop
 8017124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017126:	bc08      	pop	{r3}
 8017128:	469e      	mov	lr, r3
 801712a:	4770      	bx	lr

0801712c <_fini>:
 801712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801712e:	bf00      	nop
 8017130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017132:	bc08      	pop	{r3}
 8017134:	469e      	mov	lr, r3
 8017136:	4770      	bx	lr
